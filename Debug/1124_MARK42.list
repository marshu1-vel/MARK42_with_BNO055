
1124_MARK42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd7c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800df80  0800df80  0001df80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6a0  0800e6a0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6a8  0800e6a8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6a8  0800e6a8  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ac  0800e6ac  0001e6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00062c64  200001f8  0800e8a8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20062e5c  0800e8a8  00022e5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018606  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d29  00000000  00000000  0003882c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003b558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003ca90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a5b6  00000000  00000000  0003de60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010044  00000000  00000000  00068416  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001012d1  00000000  00000000  0007845a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017972b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006928  00000000  00000000  001797a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800df64 	.word	0x0800df64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800df64 	.word	0x0800df64

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 fa44 	bl	8000a8c <bno055_writeData>
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	203d      	movs	r0, #61	; 0x3d
 800061c:	f000 fa36 	bl	8000a8c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000626:	2013      	movs	r0, #19
 8000628:	f000 fa24 	bl	8000a74 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800062c:	e002      	b.n	8000634 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 fa20 	bl	8000a74 <bno055_delay>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffe3 	bl	800060c <bno055_setOperationMode>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800064e:	200c      	movs	r0, #12
 8000650:	f7ff ffdc 	bl	800060c <bno055_setOperationMode>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800065c:	2120      	movs	r1, #32
 800065e:	203f      	movs	r0, #63	; 0x3f
 8000660:	f000 fa14 	bl	8000a8c <bno055_writeData>
  bno055_delay(700);
 8000664:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000668:	f000 fa04 	bl	8000a74 <bno055_delay>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  bno055_reset();
 8000676:	f7ff ffef 	bl	8000658 <bno055_reset>

  uint8_t id = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	2000      	movs	r0, #0
 8000686:	f000 faed 	bl	8000c64 <bno055_readData>
  if (id != BNO055_ID) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2ba0      	cmp	r3, #160	; 0xa0
 800068e:	d004      	beq.n	800069a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <bno055_setup+0x4c>)
 8000696:	f00a fdff 	bl	800b298 <iprintf>
  }
  bno055_setPage(0);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffa8 	bl	80005f0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	203f      	movs	r0, #63	; 0x3f
 80006a4:	f000 f9f2 	bl	8000a8c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80006a8:	f7ff ffc8 	bl	800063c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 f9e1 	bl	8000a74 <bno055_delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	0800df80 	.word	0x0800df80

080006c0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c4:	b09f      	sub	sp, #124	; 0x7c
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff8e 	bl	80005f0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d108      	bne.n	80006ee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e4:	2208      	movs	r2, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fabc 	bl	8000c64 <bno055_readData>
 80006ec:	e007      	b.n	80006fe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f6:	2206      	movs	r2, #6
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fab3 	bl	8000c64 <bno055_readData>

  double scale = 1;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	4c81      	ldr	r4, [pc, #516]	; (8000908 <bno055_getVector+0x248>)
 8000704:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	2b0e      	cmp	r3, #14
 800070e:	d108      	bne.n	8000722 <bno055_getVector+0x62>
    scale = magScale;
 8000710:	4b7e      	ldr	r3, [pc, #504]	; (800090c <bno055_getVector+0x24c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800071c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000720:	e03a      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000726:	2b08      	cmp	r3, #8
 8000728:	d007      	beq.n	800073a <bno055_getVector+0x7a>
 800072a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072e:	2b28      	cmp	r3, #40	; 0x28
 8000730:	d003      	beq.n	800073a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000736:	2b2e      	cmp	r3, #46	; 0x2e
 8000738:	d108      	bne.n	800074c <bno055_getVector+0x8c>
    scale = accelScale;
 800073a:	4b75      	ldr	r3, [pc, #468]	; (8000910 <bno055_getVector+0x250>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000746:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800074a:	e025      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800074c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000750:	2b14      	cmp	r3, #20
 8000752:	d108      	bne.n	8000766 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000754:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <bno055_getVector+0x254>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000760:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000764:	e018      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800076a:	2b1a      	cmp	r3, #26
 800076c:	d108      	bne.n	8000780 <bno055_getVector+0xc0>
    scale = eulerScale;
 800076e:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <bno055_getVector+0x258>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800077a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800077e:	e00b      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000784:	2b20      	cmp	r3, #32
 8000786:	d107      	bne.n	8000798 <bno055_getVector+0xd8>
    scale = quaScale;
 8000788:	4b64      	ldr	r3, [pc, #400]	; (800091c <bno055_getVector+0x25c>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000794:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00a f936 	bl	800aa12 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80007a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d14c      	bne.n	8000848 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80007ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007c8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21a      	sxth	r2, r3
 80007dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007ee:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000814:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000818:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800082c:	b21b      	sxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b21b      	sxth	r3, r3
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800083a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800083e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000842:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000846:	e038      	b.n	80008ba <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000848:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000862:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000866:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800086e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800087a:	b21b      	sxth	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b21b      	sxth	r3, r3
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000888:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800088c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000890:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000894:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008ae:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80008b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80008ba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80008be:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80008d2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80008d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80008da:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80008de:	ec49 8b14 	vmov	d4, r8, r9
 80008e2:	ec46 5b15 	vmov	d5, r5, r6
 80008e6:	ec42 1b16 	vmov	d6, r1, r2
 80008ea:	ec44 3b17 	vmov	d7, r3, r4
}
 80008ee:	eeb0 0b44 	vmov.f64	d0, d4
 80008f2:	eeb0 1b45 	vmov.f64	d1, d5
 80008f6:	eeb0 2b46 	vmov.f64	d2, d6
 80008fa:	eeb0 3b47 	vmov.f64	d3, d7
 80008fe:	377c      	adds	r7, #124	; 0x7c
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000906:	bf00      	nop
 8000908:	3ff00000 	.word	0x3ff00000
 800090c:	20000006 	.word	0x20000006
 8000910:	20000000 	.word	0x20000000
 8000914:	20000002 	.word	0x20000002
 8000918:	20000004 	.word	0x20000004
 800091c:	20000008 	.word	0x20000008

08000920 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8000920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000924:	b091      	sub	sp, #68	; 0x44
 8000926:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff fec9 	bl	80006c0 <bno055_getVector>
 800092e:	eeb0 4b40 	vmov.f64	d4, d0
 8000932:	eeb0 5b41 	vmov.f64	d5, d1
 8000936:	eeb0 6b42 	vmov.f64	d6, d2
 800093a:	eeb0 7b43 	vmov.f64	d7, d3
 800093e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000942:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000946:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800094a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800094e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000952:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000956:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800095a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800095e:	ec49 8b14 	vmov	d4, r8, r9
 8000962:	ec46 5b15 	vmov	d5, r5, r6
 8000966:	ec42 1b16 	vmov	d6, r1, r2
 800096a:	ec44 3b17 	vmov	d7, r3, r4
}
 800096e:	eeb0 0b44 	vmov.f64	d0, d4
 8000972:	eeb0 1b45 	vmov.f64	d1, d5
 8000976:	eeb0 2b46 	vmov.f64	d2, d6
 800097a:	eeb0 3b47 	vmov.f64	d3, d7
 800097e:	3744      	adds	r7, #68	; 0x44
 8000980:	46bd      	mov	sp, r7
 8000982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000986 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8000986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098a:	b091      	sub	sp, #68	; 0x44
 800098c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800098e:	2014      	movs	r0, #20
 8000990:	f7ff fe96 	bl	80006c0 <bno055_getVector>
 8000994:	eeb0 4b40 	vmov.f64	d4, d0
 8000998:	eeb0 5b41 	vmov.f64	d5, d1
 800099c:	eeb0 6b42 	vmov.f64	d6, d2
 80009a0:	eeb0 7b43 	vmov.f64	d7, d3
 80009a4:	ed87 4b08 	vstr	d4, [r7, #32]
 80009a8:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80009ac:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80009b0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80009b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80009b8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80009bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80009c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80009c4:	ec49 8b14 	vmov	d4, r8, r9
 80009c8:	ec46 5b15 	vmov	d5, r5, r6
 80009cc:	ec42 1b16 	vmov	d6, r1, r2
 80009d0:	ec44 3b17 	vmov	d7, r3, r4
}
 80009d4:	eeb0 0b44 	vmov.f64	d0, d4
 80009d8:	eeb0 1b45 	vmov.f64	d1, d5
 80009dc:	eeb0 2b46 	vmov.f64	d2, d6
 80009e0:	eeb0 3b47 	vmov.f64	d3, d7
 80009e4:	3744      	adds	r7, #68	; 0x44
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080009ec <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80009ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009f0:	b091      	sub	sp, #68	; 0x44
 80009f2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80009f4:	201a      	movs	r0, #26
 80009f6:	f7ff fe63 	bl	80006c0 <bno055_getVector>
 80009fa:	eeb0 4b40 	vmov.f64	d4, d0
 80009fe:	eeb0 5b41 	vmov.f64	d5, d1
 8000a02:	eeb0 6b42 	vmov.f64	d6, d2
 8000a06:	eeb0 7b43 	vmov.f64	d7, d3
 8000a0a:	ed87 4b08 	vstr	d4, [r7, #32]
 8000a0e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000a12:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000a16:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000a1a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000a1e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000a22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000a26:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000a2a:	ec49 8b14 	vmov	d4, r8, r9
 8000a2e:	ec46 5b15 	vmov	d5, r5, r6
 8000a32:	ec42 1b16 	vmov	d6, r1, r2
 8000a36:	ec44 3b17 	vmov	d7, r3, r4
}
 8000a3a:	eeb0 0b44 	vmov.f64	d0, d4
 8000a3e:	eeb0 1b45 	vmov.f64	d1, d5
 8000a42:	eeb0 2b46 	vmov.f64	d2, d6
 8000a46:	eeb0 3b47 	vmov.f64	d3, d7
 8000a4a:	3744      	adds	r7, #68	; 0x44
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000a54 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <bno055_assignI2C+0x1c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20062c88 	.word	0x20062c88

08000a74 <bno055_delay>:

void bno055_delay(int time) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fc4a 	bl	8006318 <HAL_Delay>
#endif
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	733b      	strb	r3, [r7, #12]
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <bno055_writeData+0x184>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	230a      	movs	r3, #10
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2150      	movs	r1, #80	; 0x50
 8000ab4:	f005 ffd0 	bl	8006a58 <HAL_I2C_Master_Transmit>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80a0 	beq.w	8000c04 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d103      	bne.n	8000ad2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000aca:	4852      	ldr	r0, [pc, #328]	; (8000c14 <bno055_writeData+0x188>)
 8000acc:	f00a fc58 	bl	800b380 <puts>
 8000ad0:	e012      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d103      	bne.n	8000ae0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ad8:	484f      	ldr	r0, [pc, #316]	; (8000c18 <bno055_writeData+0x18c>)
 8000ada:	f00a fc51 	bl	800b380 <puts>
 8000ade:	e00b      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d103      	bne.n	8000aee <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ae6:	484d      	ldr	r0, [pc, #308]	; (8000c1c <bno055_writeData+0x190>)
 8000ae8:	f00a fc4a 	bl	800b380 <puts>
 8000aec:	e004      	b.n	8000af8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	4619      	mov	r1, r3
 8000af2:	484b      	ldr	r0, [pc, #300]	; (8000c20 <bno055_writeData+0x194>)
 8000af4:	f00a fbd0 	bl	800b298 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <bno055_writeData+0x184>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 f9a3 	bl	8006e48 <HAL_I2C_GetError>
 8000b02:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d07e      	beq.n	8000c08 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d103      	bne.n	8000b18 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000b10:	4844      	ldr	r0, [pc, #272]	; (8000c24 <bno055_writeData+0x198>)
 8000b12:	f00a fc35 	bl	800b380 <puts>
 8000b16:	e021      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d103      	bne.n	8000b26 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <bno055_writeData+0x19c>)
 8000b20:	f00a fc2e 	bl	800b380 <puts>
 8000b24:	e01a      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d103      	bne.n	8000b34 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000b2c:	483f      	ldr	r0, [pc, #252]	; (8000c2c <bno055_writeData+0x1a0>)
 8000b2e:	f00a fc27 	bl	800b380 <puts>
 8000b32:	e013      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d103      	bne.n	8000b42 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000b3a:	483d      	ldr	r0, [pc, #244]	; (8000c30 <bno055_writeData+0x1a4>)
 8000b3c:	f00a fc20 	bl	800b380 <puts>
 8000b40:	e00c      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b10      	cmp	r3, #16
 8000b46:	d103      	bne.n	8000b50 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <bno055_writeData+0x1a8>)
 8000b4a:	f00a fc19 	bl	800b380 <puts>
 8000b4e:	e005      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	d102      	bne.n	8000b5c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000b56:	4838      	ldr	r0, [pc, #224]	; (8000c38 <bno055_writeData+0x1ac>)
 8000b58:	f00a fc12 	bl	800b380 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <bno055_writeData+0x184>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f006 f963 	bl	8006e2c <HAL_I2C_GetState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b70:	4832      	ldr	r0, [pc, #200]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b72:	f00a fc05 	bl	800b380 <puts>
 8000b76:	e048      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d103      	bne.n	8000b86 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b80:	f00a fbfe 	bl	800b380 <puts>
 8000b84:	e041      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b24      	cmp	r3, #36	; 0x24
 8000b8a:	d103      	bne.n	8000b94 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000b8c:	482c      	ldr	r0, [pc, #176]	; (8000c40 <bno055_writeData+0x1b4>)
 8000b8e:	f00a fbf7 	bl	800b380 <puts>
 8000b92:	e03a      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b21      	cmp	r3, #33	; 0x21
 8000b98:	d103      	bne.n	8000ba2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000b9a:	482a      	ldr	r0, [pc, #168]	; (8000c44 <bno055_writeData+0x1b8>)
 8000b9c:	f00a fbf0 	bl	800b380 <puts>
 8000ba0:	e033      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b22      	cmp	r3, #34	; 0x22
 8000ba6:	d103      	bne.n	8000bb0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ba8:	4827      	ldr	r0, [pc, #156]	; (8000c48 <bno055_writeData+0x1bc>)
 8000baa:	f00a fbe9 	bl	800b380 <puts>
 8000bae:	e02c      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b28      	cmp	r3, #40	; 0x28
 8000bb4:	d103      	bne.n	8000bbe <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <bno055_writeData+0x1c0>)
 8000bb8:	f00a fbe2 	bl	800b380 <puts>
 8000bbc:	e025      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b29      	cmp	r3, #41	; 0x29
 8000bc2:	d103      	bne.n	8000bcc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <bno055_writeData+0x1c4>)
 8000bc6:	f00a fbdb 	bl	800b380 <puts>
 8000bca:	e01e      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd0:	d103      	bne.n	8000bda <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <bno055_writeData+0x1c8>)
 8000bd4:	f00a fbd4 	bl	800b380 <puts>
 8000bd8:	e017      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b60      	cmp	r3, #96	; 0x60
 8000bde:	d103      	bne.n	8000be8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000be0:	481d      	ldr	r0, [pc, #116]	; (8000c58 <bno055_writeData+0x1cc>)
 8000be2:	f00a fbcd 	bl	800b380 <puts>
 8000be6:	e010      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2ba0      	cmp	r3, #160	; 0xa0
 8000bec:	d103      	bne.n	8000bf6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <bno055_writeData+0x1d0>)
 8000bf0:	f00a fbc6 	bl	800b380 <puts>
 8000bf4:	e009      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2be0      	cmp	r3, #224	; 0xe0
 8000bfa:	d106      	bne.n	8000c0a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <bno055_writeData+0x1d4>)
 8000bfe:	f00a fbbf 	bl	800b380 <puts>
 8000c02:	e002      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c08:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20062c88 	.word	0x20062c88
 8000c14:	0800dfbc 	.word	0x0800dfbc
 8000c18:	0800dfe0 	.word	0x0800dfe0
 8000c1c:	0800e008 	.word	0x0800e008
 8000c20:	0800e02c 	.word	0x0800e02c
 8000c24:	0800e044 	.word	0x0800e044
 8000c28:	0800e058 	.word	0x0800e058
 8000c2c:	0800e06c 	.word	0x0800e06c
 8000c30:	0800e080 	.word	0x0800e080
 8000c34:	0800e094 	.word	0x0800e094
 8000c38:	0800e0a8 	.word	0x0800e0a8
 8000c3c:	0800e0c0 	.word	0x0800e0c0
 8000c40:	0800e0d8 	.word	0x0800e0d8
 8000c44:	0800e0ec 	.word	0x0800e0ec
 8000c48:	0800e104 	.word	0x0800e104
 8000c4c:	0800e11c 	.word	0x0800e11c
 8000c50:	0800e134 	.word	0x0800e134
 8000c54:	0800e154 	.word	0x0800e154
 8000c58:	0800e174 	.word	0x0800e174
 8000c5c:	0800e18c 	.word	0x0800e18c
 8000c60:	0800e1a4 	.word	0x0800e1a4

08000c64 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <bno055_readData+0x40>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	1dfa      	adds	r2, r7, #7
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2150      	movs	r1, #80	; 0x50
 8000c82:	f005 fee9 	bl	8006a58 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <bno055_readData+0x40>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4613      	mov	r3, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	2150      	movs	r1, #80	; 0x50
 8000c98:	f005 ffd2 	bl	8006c40 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20062c88 	.word	0x20062c88

08000ca8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <__io_putchar+0x20>)
 8000cba:	f008 ff27 	bl	8009b0c <HAL_UART_Transmit>

  return ch;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200627b8 	.word	0x200627b8
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	ed2d 8b04 	vpush	{d8-d9}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	f043 8367 	bne.w	80043b6 <HAL_TIM_PeriodElapsedCallback+0x36e6>
		// TIM2 task
    switch(mode){
 8000ce8:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d031      	beq.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	f003 835f 	beq.w	80043b4 <HAL_TIM_PeriodElapsedCallback+0x36e4>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x2e>

        break;
    }

		}
}
 8000cfa:	f003 bb5c 	b.w	80043b6 <HAL_TIM_PeriodElapsedCallback+0x36e6>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2101      	movs	r1, #1
 8000d02:	4860      	ldr	r0, [pc, #384]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d04:	f005 fde6 	bl	80068d4 <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 8000d08:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d0e:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000d10:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d16:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8000d18:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d1e:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000d20:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d26:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8000d28:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000d32:	4b56      	ldr	r3, [pc, #344]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000d50:	f003 bb31 	b.w	80043b6 <HAL_TIM_PeriodElapsedCallback+0x36e6>
        cnt1 = TIM1->CNT;
 8000d54:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d5c:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d66:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d70:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d7a:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 8000d7c:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d8c:	dd09      	ble.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d90:	f993 3000 	ldrsb.w	r3, [r3]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3b01      	subs	r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e011      	b.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db2:	dd08      	ble.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000db6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000dc4:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dd6:	dd09      	ble.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000dda:	f993 3000 	ldrsb.w	r3, [r3]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e011      	b.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x140>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dfc:	dd08      	ble.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e00:	f993 3000 	ldrsb.w	r3, [r3]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b25a      	sxtb	r2, r3
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e0e:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e20:	dd09      	ble.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x166>
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e24:	f993 3000 	ldrsb.w	r3, [r3]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e011      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x18a>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e46:	dd08      	ble.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x18a>
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e58:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e6a:	dd39      	ble.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x210>
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e041      	b.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000e80:	2000021a 	.word	0x2000021a
 8000e84:	40020400 	.word	0x40020400
 8000e88:	200002e8 	.word	0x200002e8
 8000e8c:	200002ea 	.word	0x200002ea
 8000e90:	200002ec 	.word	0x200002ec
 8000e94:	200002ee 	.word	0x200002ee
 8000e98:	20062c8c 	.word	0x20062c8c
 8000e9c:	20062d70 	.word	0x20062d70
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	2000021e 	.word	0x2000021e
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	20000220 	.word	0x20000220
 8000eb0:	40010400 	.word	0x40010400
 8000eb4:	20000222 	.word	0x20000222
 8000eb8:	40000800 	.word	0x40000800
 8000ebc:	20000224 	.word	0x20000224
 8000ec0:	20000226 	.word	0x20000226
 8000ec4:	2000022e 	.word	0x2000022e
 8000ec8:	20000228 	.word	0x20000228
 8000ecc:	2000022f 	.word	0x2000022f
 8000ed0:	2000022a 	.word	0x2000022a
 8000ed4:	20000230 	.word	0x20000230
 8000ed8:	2000022c 	.word	0x2000022c
 8000edc:	20000231 	.word	0x20000231
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000ee0:	4bdb      	ldr	r3, [pc, #876]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4bdb      	ldr	r3, [pc, #876]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef0:	dd08      	ble.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000ef2:	4bd9      	ldr	r3, [pc, #868]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	4bd5      	ldr	r3, [pc, #852]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000f02:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000f04:	4bd5      	ldr	r3, [pc, #852]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4bd5      	ldr	r3, [pc, #852]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	1ad2      	subs	r2, r2, r3
 8000f12:	4bd4      	ldr	r3, [pc, #848]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000f14:	f993 3000 	ldrsb.w	r3, [r3]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4413      	add	r3, r2
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f24:	4bd0      	ldr	r3, [pc, #832]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f36:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000f3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f46:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f52:	4bc6      	ldr	r3, [pc, #792]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000f58:	4bc5      	ldr	r3, [pc, #788]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4bc0      	ldr	r3, [pc, #768]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	4bc3      	ldr	r3, [pc, #780]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f68:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	4413      	add	r3, r2
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f78:	4bbb      	ldr	r3, [pc, #748]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8a:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000f8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f9a:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa6:	4bb4      	ldr	r3, [pc, #720]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000fac:	4bb3      	ldr	r3, [pc, #716]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4bab      	ldr	r3, [pc, #684]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	4bb1      	ldr	r3, [pc, #708]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	4413      	add	r3, r2
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000fda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fde:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000fe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fee:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000ff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ff6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8001000:	4b94      	ldr	r3, [pc, #592]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001010:	f993 3000 	ldrsb.w	r3, [r3]
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	4413      	add	r3, r2
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001020:	4b91      	ldr	r3, [pc, #580]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800102e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001032:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8001036:	ee27 6b06 	vmul.f64	d6, d7, d6
 800103a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800103e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001042:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800104a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800104e:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
        yaw   = Euler.x;// [degree]
 8001054:	4b8d      	ldr	r3, [pc, #564]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001056:	ed93 7b02 	vldr	d7, [r3, #8]
 800105a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105e:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001060:	edc3 7a00 	vstr	s15, [r3]
        roll  = Euler.y;
 8001064:	4b89      	ldr	r3, [pc, #548]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001066:	ed93 7b04 	vldr	d7, [r3, #16]
 800106a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
        pitch = Euler.z;
 8001074:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001076:	ed93 7b06 	vldr	d7, [r3, #24]
 800107a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800107e:	4b86      	ldr	r3, [pc, #536]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate   = Gyro.z;// [dps : degree/sec]
 8001084:	4b85      	ldr	r3, [pc, #532]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001086:	ed93 7b06 	vldr	d7, [r3, #24]
 800108a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108e:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
        roll_rate  = Gyro.y;//Gyro.x;
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001096:	ed93 7b04 	vldr	d7, [r3, #16]
 800109a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109e:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80010a0:	edc3 7a00 	vstr	s15, [r3]
        pitch_rate = Gyro.x;//Gyro.y;
 80010a4:	4b7d      	ldr	r3, [pc, #500]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80010a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80010aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ae:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
        Acc_x = -Acc.x;// Adjust these values to Vehicle coordinate system of modeling
 80010b4:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80010ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010be:	eef1 7a67 	vneg.f32	s15, s15
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
        Acc_y = -Acc.y;// Direction is opposite, due to inertial force
 80010c8:	4b78      	ldr	r3, [pc, #480]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010ca:	ed93 7b04 	vldr	d7, [r3, #16]
 80010ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d2:	eef1 7a67 	vneg.f32	s15, s15
 80010d6:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
        Acc_z = -Acc.z;// Add minus - : as of 2021/01/09
 80010dc:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010de:	ed93 7b06 	vldr	d7, [r3, #24]
 80010e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e6:	eef1 7a67 	vneg.f32	s15, s15
 80010ea:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
        yaw   = -yaw   * 2.0 * pi / 360.0;// [rad] Convert degree to rad
 80010f0:	4b67      	ldr	r3, [pc, #412]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eef1 7a67 	vneg.f32	s15, s15
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001102:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001106:	ee27 6b06 	vmul.f64	d6, d7, d6
 800110a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800110e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001112:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
        roll  = -roll  * 2.0 * pi / 360.0;
 800111c:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eef1 7a67 	vneg.f32	s15, s15
 8001126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800112e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001132:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001136:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800113a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800113e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
        pitch = -pitch * 2.0 * pi / 360.0;
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eef1 7a67 	vneg.f32	s15, s15
 8001152:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001156:	ee37 7b07 	vadd.f64	d7, d7, d7
 800115a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 800115e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001162:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 8001166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800116e:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate   = yaw_rate   * 2.0 * pi / 360.0;// [rad/sec] // ! Direction is not confirmed yet.
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001182:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001186:	ee27 6b06 	vmul.f64	d6, d7, d6
 800118a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800118e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001192:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001198:	edc3 7a00 	vstr	s15, [r3]
        roll_rate  = roll_rate  * 2.0 * pi / 360.0;
 800119c:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011aa:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
        pitch_rate = pitch_rate * 2.0 * pi / 360.0;
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011d2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 80011d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011da:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 80011de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
        Acc_y_correct = cos(roll)*cos(pitch)                                *Acc_y + sin(roll)*cos(pitch)                                *(-Acc_x) - sin(pitch)         *Acc_z;
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f6:	eeb0 0b47 	vmov.f64	d0, d7
 80011fa:	f00b ff05 	bl	800d008 <cos>
 80011fe:	eeb0 8b40 	vmov.f64	d8, d0
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120c:	eeb0 0b47 	vmov.f64	d0, d7
 8001210:	f00b fefa 	bl	800d008 <cos>
 8001214:	eeb0 7b40 	vmov.f64	d7, d0
 8001218:	ee28 6b07 	vmul.f64	d6, d8, d7
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001226:	ee26 8b07 	vmul.f64	d8, d6, d7
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001234:	e042      	b.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x5ec>
 8001236:	bf00      	nop
 8001238:	00000000 	.word	0x00000000
 800123c:	40500000 	.word	0x40500000
 8001240:	60000000 	.word	0x60000000
 8001244:	400921fb 	.word	0x400921fb
 8001248:	00000000 	.word	0x00000000
 800124c:	40768000 	.word	0x40768000
 8001250:	2000022c 	.word	0x2000022c
 8001254:	20000224 	.word	0x20000224
 8001258:	20000231 	.word	0x20000231
 800125c:	2000021e 	.word	0x2000021e
 8001260:	2000000a 	.word	0x2000000a
 8001264:	2000022e 	.word	0x2000022e
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000238 	.word	0x20000238
 8001270:	20000220 	.word	0x20000220
 8001274:	2000022f 	.word	0x2000022f
 8001278:	2000023c 	.word	0x2000023c
 800127c:	20000222 	.word	0x20000222
 8001280:	20000230 	.word	0x20000230
 8001284:	20000240 	.word	0x20000240
 8001288:	20000244 	.word	0x20000244
 800128c:	20062d10 	.word	0x20062d10
 8001290:	20000434 	.word	0x20000434
 8001294:	20000438 	.word	0x20000438
 8001298:	2000043c 	.word	0x2000043c
 800129c:	20062e10 	.word	0x20062e10
 80012a0:	20000448 	.word	0x20000448
 80012a4:	2000044c 	.word	0x2000044c
 80012a8:	20000450 	.word	0x20000450
 80012ac:	20062db0 	.word	0x20062db0
 80012b0:	20000470 	.word	0x20000470
 80012b4:	20000474 	.word	0x20000474
 80012b8:	20000478 	.word	0x20000478
 80012bc:	eeb0 0b47 	vmov.f64	d0, d7
 80012c0:	f00b fede 	bl	800d080 <sin>
 80012c4:	eeb0 9b40 	vmov.f64	d9, d0
 80012c8:	4be9      	ldr	r3, [pc, #932]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d2:	eeb0 0b47 	vmov.f64	d0, d7
 80012d6:	f00b fe97 	bl	800d008 <cos>
 80012da:	eeb0 7b40 	vmov.f64	d7, d0
 80012de:	ee29 6b07 	vmul.f64	d6, d9, d7
 80012e2:	4be4      	ldr	r3, [pc, #912]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eef1 7a67 	vneg.f32	s15, s15
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012f4:	ee38 8b07 	vadd.f64	d8, d8, d7
 80012f8:	4bdd      	ldr	r3, [pc, #884]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001302:	eeb0 0b47 	vmov.f64	d0, d7
 8001306:	f00b febb 	bl	800d080 <sin>
 800130a:	eeb0 6b40 	vmov.f64	d6, d0
 800130e:	4bda      	ldr	r3, [pc, #872]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001318:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001320:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001324:	4bd5      	ldr	r3, [pc, #852]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_correct = -sin(roll)*Acc_y +  cos(roll)*(-Acc_x);
 800132a:	4bd5      	ldr	r3, [pc, #852]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001334:	eeb0 0b47 	vmov.f64	d0, d7
 8001338:	f00b fea2 	bl	800d080 <sin>
 800133c:	eeb0 7b40 	vmov.f64	d7, d0
 8001340:	eeb1 6b47 	vneg.f64	d6, d7
 8001344:	4bcf      	ldr	r3, [pc, #828]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001352:	4bcb      	ldr	r3, [pc, #812]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800135c:	eeb0 0b47 	vmov.f64	d0, d7
 8001360:	f00b fe52 	bl	800d008 <cos>
 8001364:	eeb0 6b40 	vmov.f64	d6, d0
 8001368:	4bc2      	ldr	r3, [pc, #776]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eef1 7a67 	vneg.f32	s15, s15
 8001372:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001376:	ee26 7b07 	vmul.f64	d7, d6, d7
 800137a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800137e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001382:	4bc1      	ldr	r3, [pc, #772]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_correct = - Acc_x_correct;
 8001388:	4bbf      	ldr	r3, [pc, #764]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eef1 7a67 	vneg.f32	s15, s15
 8001392:	4bbd      	ldr	r3, [pc, #756]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
        Acc_z_correct = cos(roll)*sin(pitch)*Acc_y + sin(roll)*sin(pitch)*(-Acc_x) + cos(pitch)*Acc_z;
 8001398:	4bb9      	ldr	r3, [pc, #740]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a2:	eeb0 0b47 	vmov.f64	d0, d7
 80013a6:	f00b fe2f 	bl	800d008 <cos>
 80013aa:	eeb0 8b40 	vmov.f64	d8, d0
 80013ae:	4bb0      	ldr	r3, [pc, #704]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b8:	eeb0 0b47 	vmov.f64	d0, d7
 80013bc:	f00b fe60 	bl	800d080 <sin>
 80013c0:	eeb0 7b40 	vmov.f64	d7, d0
 80013c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80013c8:	4bae      	ldr	r3, [pc, #696]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80013d6:	4baa      	ldr	r3, [pc, #680]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e0:	eeb0 0b47 	vmov.f64	d0, d7
 80013e4:	f00b fe4c 	bl	800d080 <sin>
 80013e8:	eeb0 9b40 	vmov.f64	d9, d0
 80013ec:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f6:	eeb0 0b47 	vmov.f64	d0, d7
 80013fa:	f00b fe41 	bl	800d080 <sin>
 80013fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001402:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001406:	4b9b      	ldr	r3, [pc, #620]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eef1 7a67 	vneg.f32	s15, s15
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001418:	ee38 8b07 	vadd.f64	d8, d8, d7
 800141c:	4b94      	ldr	r3, [pc, #592]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001426:	eeb0 0b47 	vmov.f64	d0, d7
 800142a:	f00b fded 	bl	800d008 <cos>
 800142e:	eeb0 6b40 	vmov.f64	d6, d0
 8001432:	4b91      	ldr	r3, [pc, #580]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001440:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001444:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001448:	4b90      	ldr	r3, [pc, #576]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 800144a:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_LPF = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * Acc_x_LPF_pre + G_LPF_acc * dt * ( Acc_x_correct + Acc_x_correct_pre ) );// LPF
 800144e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001452:	eddf 7a90 	vldr	s15, [pc, #576]	; 8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001462:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001466:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800146a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800146e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001472:	eddf 7a88 	vldr	s15, [pc, #544]	; 8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>
 8001476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001482:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001486:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001490:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001494:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001498:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80014a2:	edd3 4a00 	vldr	s9, [r3]
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee74 7aa7 	vadd.f32	s15, s9, s15
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80014bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
        Acc_y_LPF = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * Acc_y_LPF_pre + G_LPF_acc * dt * ( Acc_y_correct + Acc_y_correct_pre ) );// LPF
 80014ca:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 80014ce:	eddf 7a71 	vldr	s15, [pc, #452]	; 8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014da:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80014de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80014e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014ea:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 80014ee:	eddf 7a69 	vldr	s15, [pc, #420]	; 8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014fe:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001502:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800150c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001510:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001514:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>
 8001518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800151e:	edd3 4a00 	vldr	s9, [r3]
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee74 7aa7 	vadd.f32	s15, s9, s15
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001534:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001538:	ee26 7b07 	vmul.f64	d7, d6, d7
 800153c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001540:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
        d_yawrate = 1.0 / (2.0 + G_LPF_gyro * dt) * ( (2.0 - G_LPF_gyro * dt) * d_yawrate_pre + 2.0 * G_LPF_gyro * (yaw_rate - yaw_rate_pre) );// Pseudo Derivative : ddphi_res
 8001546:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 800154a:	eddf 7a59 	vldr	s15, [pc, #356]	; 80016b0 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001556:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800155a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800155e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001562:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001566:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 800156a:	eddf 7a51 	vldr	s15, [pc, #324]	; 80016b0 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001576:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800157a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800157e:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001588:	ee25 5b07 	vmul.f64	d5, d5, d7
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8001658 <HAL_TIM_PeriodElapsedCallback+0x988>
 80015a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80015a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 80015b6:	edc3 7a00 	vstr	s15, [r3]
        yaw   = yaw   * 2.0 * pi / 360.0 + yaw_initial;// [rad] Convert this value to definition in modeling 
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015c8:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 80015cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015d0:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001668 <HAL_TIM_PeriodElapsedCallback+0x998>
 80015d4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ea:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate_notch = 1.0 / ( 1.0 + 2.0*zeta1*G_notch1*dt + G_notch1*G_notch1*dt*dt ) * ( 2.0*(1.0+zeta1*G_notch1*dt)*yaw_rate_notch_pre - yaw_rate_notch_pre2 + (1.0 + G_notch1*G_notch1*dt*dt)*yaw_rate - 2.0*yaw_rate_pre + yaw_rate_pre2 );
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015fe:	eddf 7a24 	vldr	s15, [pc, #144]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001602:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001606:	ee26 7b07 	vmul.f64	d7, d6, d7
 800160a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800160e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8001614:	ed93 7a00 	vldr	s14, [r3]
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001636:	ee36 7b07 	vadd.f64	d7, d6, d7
 800163a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800163e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001654:	e03c      	b.n	80016d0 <HAL_TIM_PeriodElapsedCallback+0xa00>
 8001656:	bf00      	nop
 8001658:	00000000 	.word	0x00000000
 800165c:	40590000 	.word	0x40590000
 8001660:	60000000 	.word	0x60000000
 8001664:	400921fb 	.word	0x400921fb
 8001668:	00000000 	.word	0x00000000
 800166c:	40768000 	.word	0x40768000
 8001670:	2000043c 	.word	0x2000043c
 8001674:	20000470 	.word	0x20000470
 8001678:	20000478 	.word	0x20000478
 800167c:	20000480 	.word	0x20000480
 8001680:	20000438 	.word	0x20000438
 8001684:	20000474 	.word	0x20000474
 8001688:	2000047c 	.word	0x2000047c
 800168c:	20000484 	.word	0x20000484
 8001690:	3a83126f 	.word	0x3a83126f
 8001694:	43960000 	.word	0x43960000
 8001698:	20000498 	.word	0x20000498
 800169c:	20000488 	.word	0x20000488
 80016a0:	20000490 	.word	0x20000490
 80016a4:	2000049c 	.word	0x2000049c
 80016a8:	2000048c 	.word	0x2000048c
 80016ac:	20000494 	.word	0x20000494
 80016b0:	42480000 	.word	0x42480000
 80016b4:	2000046c 	.word	0x2000046c
 80016b8:	20000448 	.word	0x20000448
 80016bc:	20000454 	.word	0x20000454
 80016c0:	20000468 	.word	0x20000468
 80016c4:	20000434 	.word	0x20000434
 80016c8:	20000014 	.word	0x20000014
 80016cc:	20000018 	.word	0x20000018
 80016d0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80016d8:	ee37 5b07 	vadd.f64	d5, d7, d7
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <HAL_TIM_PeriodElapsedCallback+0xacc>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80017a4 <HAL_TIM_PeriodElapsedCallback+0xad4>
 800170c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001710:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80017a4 <HAL_TIM_PeriodElapsedCallback+0xad4>
 8001714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800171c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001720:	ee37 4b04 	vadd.f64	d4, d7, d4
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xad8>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800172e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001732:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xadc>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001740:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001744:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xae0>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001752:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001756:	ee26 7b07 	vmul.f64	d7, d6, d7
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8001760:	edc3 7a00 	vstr	s15, [r3]
        if     ( yaw - yaw_pre > 2.0*pi/2.0 ) yaw_digit--;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xae8>)
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0xaec>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001774:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017c0 <HAL_TIM_PeriodElapsedCallback+0xaf0>
 8001778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	dd22      	ble.n	80017c8 <HAL_TIM_PeriodElapsedCallback+0xaf8>
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800178c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 8001792:	edc3 7a00 	vstr	s15, [r3]
 8001796:	e030      	b.n	80017fa <HAL_TIM_PeriodElapsedCallback+0xb2a>
 8001798:	20000460 	.word	0x20000460
 800179c:	20000464 	.word	0x20000464
 80017a0:	20000018 	.word	0x20000018
 80017a4:	3a83126f 	.word	0x3a83126f
 80017a8:	20000448 	.word	0x20000448
 80017ac:	20000454 	.word	0x20000454
 80017b0:	20000458 	.word	0x20000458
 80017b4:	2000045c 	.word	0x2000045c
 80017b8:	20000434 	.word	0x20000434
 80017bc:	20000440 	.word	0x20000440
 80017c0:	40490fdb 	.word	0x40490fdb
 80017c4:	20000444 	.word	0x20000444
        else if( yaw_pre - yaw > 2.0*pi/2.0 ) yaw_digit++;
 80017c8:	4be9      	ldr	r3, [pc, #932]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	4be9      	ldr	r3, [pc, #932]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	ed9f 7ae7 	vldr	s14, [pc, #924]	; 8001b78 <HAL_TIM_PeriodElapsedCallback+0xea8>
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	dd09      	ble.n	80017fa <HAL_TIM_PeriodElapsedCallback+0xb2a>
 80017e6:	4be5      	ldr	r3, [pc, #916]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xeac>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f4:	4be1      	ldr	r3, [pc, #900]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xeac>)
 80017f6:	edc3 7a00 	vstr	s15, [r3]
        yaw_pre = yaw;
 80017fa:	4bde      	ldr	r3, [pc, #888]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4adc      	ldr	r2, [pc, #880]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8001800:	6013      	str	r3, [r2, #0]
        yaw = (yaw + yaw_digit * 2.0 * pi);// :* 2.0 * pi / 360.0;
 8001802:	4bdc      	ldr	r3, [pc, #880]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800180c:	4bdb      	ldr	r3, [pc, #876]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001816:	ee37 7b07 	vadd.f64	d7, d7, d7
 800181a:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 8001b58 <HAL_TIM_PeriodElapsedCallback+0xe88>
 800181e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001822:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001826:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800182a:	4bd2      	ldr	r3, [pc, #840]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 8001830:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001834:	eddf 7ad3 	vldr	s15, [pc, #844]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001840:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001844:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001848:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800184c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001850:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001854:	eddf 7acb 	vldr	s15, [pc, #812]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 8001858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001860:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001864:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001868:	4bc7      	ldr	r3, [pc, #796]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001872:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001876:	4bc5      	ldr	r3, [pc, #788]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0xebc>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	4bc4      	ldr	r3, [pc, #784]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800188a:	ed9f 4bb5 	vldr	d4, [pc, #724]	; 8001b60 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800188e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001892:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001896:	ee26 7b07 	vmul.f64	d7, d6, d7
 800189a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800189e:	4bbd      	ldr	r3, [pc, #756]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xec4>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 80018a4:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 80018a8:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018b4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80018b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018bc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80018c0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80018c4:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 80018c8:	eddf 7aae 	vldr	s15, [pc, #696]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80018d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80018dc:	4bae      	ldr	r3, [pc, #696]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018e6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80018ea:	4bac      	ldr	r3, [pc, #688]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xecc>)
 80018ec:	ed93 7a00 	vldr	s14, [r3]
 80018f0:	4bab      	ldr	r3, [pc, #684]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fe:	ed9f 4b98 	vldr	d4, [pc, #608]	; 8001b60 <HAL_TIM_PeriodElapsedCallback+0xe90>
 8001902:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001906:	ee35 7b07 	vadd.f64	d7, d5, d7
 800190a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800190e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001912:	4ba4      	ldr	r3, [pc, #656]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 8001918:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 800191c:	eddf 7a99 	vldr	s15, [pc, #612]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001928:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800192c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001930:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001934:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001938:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 800193c:	eddf 7a91 	vldr	s15, [pc, #580]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001948:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800194c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001950:	4b95      	ldr	r3, [pc, #596]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800195a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800195e:	4b93      	ldr	r3, [pc, #588]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xedc>)
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001972:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 8001b60 <HAL_TIM_PeriodElapsedCallback+0xe90>
 8001976:	ee27 7b04 	vmul.f64	d7, d7, d4
 800197a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800197e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001986:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 8001988:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 800198c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001990:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800199c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80019a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019a4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80019a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80019ac:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 80019b0:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0xeb4>
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80019c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80019c4:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ce:	ee25 5b07 	vmul.f64	d5, d5, d7
 80019d2:	4b7a      	ldr	r3, [pc, #488]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019e6:	ed9f 4b5e 	vldr	d4, [pc, #376]	; 8001b60 <HAL_TIM_PeriodElapsedCallback+0xe90>
 80019ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80019ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80019f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019fa:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta1_res_pre + 2.0 * G_LPF_ddth * (dtheta1_res - dtheta1_res_pre) );
 8001a00:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001a04:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a10:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001a14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a18:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001a1c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001a20:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001a24:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a30:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001a34:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a38:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a42:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xec4>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5a:	ed9f 4b43 	vldr	d4, [pc, #268]	; 8001b68 <HAL_TIM_PeriodElapsedCallback+0xe98>
 8001a5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001a62:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001a66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8001a70:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta2_res_pre + 2.0 * G_LPF_ddth * (dtheta2_res - dtheta2_res_pre) );
 8001a74:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001a78:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a84:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a8c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001a94:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001a98:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001aa8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ab6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8001abc:	ed93 7a00 	vldr	s14, [r3]
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ace:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8001b68 <HAL_TIM_PeriodElapsedCallback+0xe98>
 8001ad2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001ad6:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001ada:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ade:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta3_res_pre + 2.0 * G_LPF_ddth * (dtheta3_res - dtheta3_res_pre) );
 8001ae8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001aec:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af8:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001afc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b00:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001b04:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b08:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b80 <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8001b0c:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001b1c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b2a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 8001b30:	ed93 7a00 	vldr	s14, [r3]
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b42:	ed9f 4b09 	vldr	d4, [pc, #36]	; 8001b68 <HAL_TIM_PeriodElapsedCallback+0xe98>
 8001b46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b4a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001b4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b56:	e041      	b.n	8001bdc <HAL_TIM_PeriodElapsedCallback+0xf0c>
 8001b58:	60000000 	.word	0x60000000
 8001b5c:	400921fb 	.word	0x400921fb
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40590000 	.word	0x40590000
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	404e0000 	.word	0x404e0000
 8001b70:	20000440 	.word	0x20000440
 8001b74:	20000434 	.word	0x20000434
 8001b78:	40490fdb 	.word	0x40490fdb
 8001b7c:	20000444 	.word	0x20000444
 8001b80:	3a83126f 	.word	0x3a83126f
 8001b84:	42480000 	.word	0x42480000
 8001b88:	20000268 	.word	0x20000268
 8001b8c:	20000238 	.word	0x20000238
 8001b90:	20000248 	.word	0x20000248
 8001b94:	20000258 	.word	0x20000258
 8001b98:	2000026c 	.word	0x2000026c
 8001b9c:	2000023c 	.word	0x2000023c
 8001ba0:	2000024c 	.word	0x2000024c
 8001ba4:	2000025c 	.word	0x2000025c
 8001ba8:	20000270 	.word	0x20000270
 8001bac:	20000240 	.word	0x20000240
 8001bb0:	20000250 	.word	0x20000250
 8001bb4:	20000260 	.word	0x20000260
 8001bb8:	20000274 	.word	0x20000274
 8001bbc:	20000244 	.word	0x20000244
 8001bc0:	20000254 	.word	0x20000254
 8001bc4:	20000264 	.word	0x20000264
 8001bc8:	20000288 	.word	0x20000288
 8001bcc:	20000278 	.word	0x20000278
 8001bd0:	2000028c 	.word	0x2000028c
 8001bd4:	2000027c 	.word	0x2000027c
 8001bd8:	20000290 	.word	0x20000290
 8001bdc:	4ba6      	ldr	r3, [pc, #664]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8001bde:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta4_res_pre + 2.0 * G_LPF_ddth * (dtheta4_res - dtheta4_res_pre) );
 8001be2:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001e7c <HAL_TIM_PeriodElapsedCallback+0x11ac>
 8001be6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf2:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001bf6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bfa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001bfe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c02:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001e7c <HAL_TIM_PeriodElapsedCallback+0x11ac>
 8001c06:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c12:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c16:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c1a:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c24:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001c28:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8001c2a:	ed93 7a00 	vldr	s14, [r3]
 8001c2e:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c3c:	ed9f 4b8c 	vldr	d4, [pc, #560]	; 8001e70 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 8001c40:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001c44:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c50:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x11bc>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
          ddtheta1_res_pre = ddtheta1_res;
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8e      	ldr	r2, [pc, #568]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8001c5c:	6013      	str	r3, [r2, #0]
          ddtheta2_res_pre = ddtheta2_res;
 8001c5e:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a8e      	ldr	r2, [pc, #568]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8001c64:	6013      	str	r3, [r2, #0]
          ddtheta3_res_pre = ddtheta3_res;
 8001c66:	4b84      	ldr	r3, [pc, #528]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8d      	ldr	r2, [pc, #564]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 8001c6c:	6013      	str	r3, [r2, #0]
          ddtheta4_res_pre = ddtheta4_res;
 8001c6e:	4b87      	ldr	r3, [pc, #540]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x11bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8001c74:	6013      	str	r3, [r2, #0]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	4b8a      	ldr	r3, [pc, #552]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c86:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x11dc>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c90:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x11e0>
 8001c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca2:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	4b7e      	ldr	r3, [pc, #504]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb8:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x11dc>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc2:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x11e0>
 8001cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd4:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8001cd6:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = yaw_rate;
 8001cda:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x11ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a78      	ldr	r2, [pc, #480]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 8001ce0:	6013      	str	r3, [r2, #0]
        x_res   += vx_res   * dt;// [m]
 8001ce2:	4b74      	ldr	r3, [pc, #464]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001e7c <HAL_TIM_PeriodElapsedCallback+0x11ac>
 8001cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf0:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfa:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 8001d00:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001e7c <HAL_TIM_PeriodElapsedCallback+0x11ac>
 8001d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 8001d1e:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001e7c <HAL_TIM_PeriodElapsedCallback+0x11ac>
 8001d28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	b25a      	sxtb	r2, r3
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8001d54:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8001d56:	4b60      	ldr	r3, [pc, #384]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8001d6e:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 8001d70:	4b5b      	ldr	r3, [pc, #364]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x1210>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x1214>)
 8001d88:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8001d8a:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	4b52      	ldr	r3, [pc, #328]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8001da2:	701a      	strb	r2, [r3, #0]
        omega = 0.5;// Period T is 2pi / omega
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001da6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001daa:	601a      	str	r2, [r3, #0]
        r     = 0.75;
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x1224>)
 8001dae:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8001db2:	601a      	str	r2, [r3, #0]
        if( t < 3.0 ){
 8001db4:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	d503      	bpl.n	8001dd0 <HAL_TIM_PeriodElapsedCallback+0x1100>
          omega = 0.1;
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001dca:	4a4c      	ldr	r2, [pc, #304]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x122c>)
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e02f      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x1160>
        }else if( t < 6.0 ){
 8001dd0:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d504      	bpl.n	8001dee <HAL_TIM_PeriodElapsedCallback+0x111e>
          omega = 0.5;
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001de6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e020      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x1160>
        }else if( t < 9.0 ){
 8001dee:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d503      	bpl.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x113a>
          omega = 0.1;
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001e04:	4a3d      	ldr	r2, [pc, #244]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x122c>)
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e012      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x1160>
        }else if( t < 12.0 ){
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d504      	bpl.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x1158>
          omega = 0.5;
 8001e1e:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001e20:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e003      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x1160>
          omega = 0.0;
 8001e28:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
        if(t < t_experiment - 3.0){
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d563      	bpl.n	8001f0c <HAL_TIM_PeriodElapsedCallback+0x123c>
          vx_cmd   = 0.0;
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
          vy_cmd   = r * omega;
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x1224>)
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8001e5e:	edc3 7a00 	vstr	s15, [r3]
          dphi_cmd = omega;
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a28      	ldr	r2, [pc, #160]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e05b      	b.n	8001f24 <HAL_TIM_PeriodElapsedCallback+0x1254>
 8001e6c:	f3af 8000 	nop.w
 8001e70:	00000000 	.word	0x00000000
 8001e74:	404e0000 	.word	0x404e0000
 8001e78:	20000280 	.word	0x20000280
 8001e7c:	3a83126f 	.word	0x3a83126f
 8001e80:	20000294 	.word	0x20000294
 8001e84:	20000264 	.word	0x20000264
 8001e88:	20000274 	.word	0x20000274
 8001e8c:	20000284 	.word	0x20000284
 8001e90:	20000278 	.word	0x20000278
 8001e94:	20000288 	.word	0x20000288
 8001e98:	2000027c 	.word	0x2000027c
 8001e9c:	2000028c 	.word	0x2000028c
 8001ea0:	20000290 	.word	0x20000290
 8001ea4:	20000258 	.word	0x20000258
 8001ea8:	2000025c 	.word	0x2000025c
 8001eac:	20000260 	.word	0x20000260
 8001eb0:	3c4ccccd 	.word	0x3c4ccccd
 8001eb4:	200002fc 	.word	0x200002fc
 8001eb8:	20000300 	.word	0x20000300
 8001ebc:	20000448 	.word	0x20000448
 8001ec0:	20000304 	.word	0x20000304
 8001ec4:	20000308 	.word	0x20000308
 8001ec8:	2000030c 	.word	0x2000030c
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	20062d30 	.word	0x20062d30
 8001ed4:	20000232 	.word	0x20000232
 8001ed8:	20062ccc 	.word	0x20062ccc
 8001edc:	20000233 	.word	0x20000233
 8001ee0:	20062738 	.word	0x20062738
 8001ee4:	20000234 	.word	0x20000234
 8001ee8:	20062778 	.word	0x20062778
 8001eec:	20000235 	.word	0x20000235
 8001ef0:	20062724 	.word	0x20062724
 8001ef4:	20062728 	.word	0x20062728
 8001ef8:	20000214 	.word	0x20000214
 8001efc:	3dcccccd 	.word	0x3dcccccd
 8001f00:	200002f0 	.word	0x200002f0
 8001f04:	200002f4 	.word	0x200002f4
 8001f08:	200002f8 	.word	0x200002f8
          vx_cmd   = 0.0;
 8001f0c:	4bda      	ldr	r3, [pc, #872]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
          vy_cmd   = 0.0;
 8001f14:	4bd9      	ldr	r3, [pc, #868]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
          dphi_cmd = 0.0;
 8001f1c:	4bd8      	ldr	r3, [pc, #864]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
        v1_x = vx_res - L * yaw_rate;
 8001f24:	4bd7      	ldr	r3, [pc, #860]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	4bd7      	ldr	r3, [pc, #860]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eddf 6ad6 	vldr	s13, [pc, #856]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001f34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	4bd4      	ldr	r3, [pc, #848]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
        v2_x = vx_res + L * yaw_rate;
 8001f42:	4bd1      	ldr	r3, [pc, #836]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001f4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f50:	4bcc      	ldr	r3, [pc, #816]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	4bce      	ldr	r3, [pc, #824]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
        v3_x = vx_res + L * yaw_rate;
 8001f60:	4bc9      	ldr	r3, [pc, #804]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001f6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f6e:	4bc5      	ldr	r3, [pc, #788]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f78:	4bc7      	ldr	r3, [pc, #796]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
        v4_x = vx_res - L * yaw_rate;
 8001f7e:	4bc1      	ldr	r3, [pc, #772]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	4bc0      	ldr	r3, [pc, #768]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	eddf 6ac0 	vldr	s13, [pc, #768]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001f8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	4bc1      	ldr	r3, [pc, #772]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
        v1_y = vy_res - W * yaw_rate;
 8001f9c:	4bc0      	ldr	r3, [pc, #768]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8001f9e:	ed93 7a00 	vldr	s14, [r3]
 8001fa2:	4bb9      	ldr	r3, [pc, #740]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	eddf 6ab8 	vldr	s13, [pc, #736]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001fac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb4:	4bbb      	ldr	r3, [pc, #748]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
        v2_y = vy_res - W * yaw_rate;
 8001fba:	4bb9      	ldr	r3, [pc, #740]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	4bb1      	ldr	r3, [pc, #708]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	eddf 6ab1 	vldr	s13, [pc, #708]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd2:	4bb5      	ldr	r3, [pc, #724]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
        v3_y = vy_res + W * yaw_rate;
 8001fd8:	4bab      	ldr	r3, [pc, #684]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001fe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe6:	4bae      	ldr	r3, [pc, #696]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	4bae      	ldr	r3, [pc, #696]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 8001ff2:	edc3 7a00 	vstr	s15, [r3]
        v4_y = vy_res + W * yaw_rate;
 8001ff6:	4ba4      	ldr	r3, [pc, #656]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800228c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8002000:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002004:	4ba6      	ldr	r3, [pc, #664]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200e:	4ba8      	ldr	r3, [pc, #672]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 8002010:	edc3 7a00 	vstr	s15, [r3]
        alpha_1 = atan2f( v1_y , v1_x );
 8002014:	4ba3      	ldr	r3, [pc, #652]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	4b9d      	ldr	r3, [pc, #628]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	eef0 0a47 	vmov.f32	s1, s14
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	f00b f866 	bl	800d0f8 <atan2f>
 800202c:	eef0 7a40 	vmov.f32	s15, s0
 8002030:	4ba0      	ldr	r3, [pc, #640]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 8002032:	edc3 7a00 	vstr	s15, [r3]
        alpha_2 = atan2f( v2_y , v2_x );
 8002036:	4b9c      	ldr	r3, [pc, #624]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	4b95      	ldr	r3, [pc, #596]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	eef0 0a47 	vmov.f32	s1, s14
 8002046:	eeb0 0a67 	vmov.f32	s0, s15
 800204a:	f00b f855 	bl	800d0f8 <atan2f>
 800204e:	eef0 7a40 	vmov.f32	s15, s0
 8002052:	4b99      	ldr	r3, [pc, #612]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8002054:	edc3 7a00 	vstr	s15, [r3]
        alpha_3 = atan2f( v3_y , v3_x );
 8002058:	4b94      	ldr	r3, [pc, #592]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8002060:	ed93 7a00 	vldr	s14, [r3]
 8002064:	eef0 0a47 	vmov.f32	s1, s14
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	f00b f844 	bl	800d0f8 <atan2f>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8002076:	edc3 7a00 	vstr	s15, [r3]
        alpha_4 = atan2f( v4_y , v4_x );
 800207a:	4b8d      	ldr	r3, [pc, #564]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	4b86      	ldr	r3, [pc, #536]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	eef0 0a47 	vmov.f32	s1, s14
 800208a:	eeb0 0a67 	vmov.f32	s0, s15
 800208e:	f00b f833 	bl	800d0f8 <atan2f>
 8002092:	eef0 7a40 	vmov.f32	s15, s0
 8002096:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 8002098:	edc3 7a00 	vstr	s15, [r3]
        w1 = cos( pi / 4.0 + alpha_1 ) * cos( pi / 4.0 + alpha_1 );
 800209c:	4b85      	ldr	r3, [pc, #532]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020a6:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 80020aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020ae:	eeb0 0b47 	vmov.f64	d0, d7
 80020b2:	f00a ffa9 	bl	800d008 <cos>
 80020b6:	eeb0 8b40 	vmov.f64	d8, d0
 80020ba:	4b7e      	ldr	r3, [pc, #504]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 80020c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020cc:	eeb0 0b47 	vmov.f64	d0, d7
 80020d0:	f00a ff9a 	bl	800d008 <cos>
 80020d4:	eeb0 7b40 	vmov.f64	d7, d0
 80020d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80020dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020e0:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
        w2 = cos( pi / 4.0 - alpha_2 ) * cos( pi / 4.0 - alpha_2 );
 80020e6:	4b74      	ldr	r3, [pc, #464]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020f0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 80020f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020f8:	eeb0 0b47 	vmov.f64	d0, d7
 80020fc:	f00a ff84 	bl	800d008 <cos>
 8002100:	eeb0 8b40 	vmov.f64	d8, d0
 8002104:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800210e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 8002112:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002116:	eeb0 0b47 	vmov.f64	d0, d7
 800211a:	f00a ff75 	bl	800d008 <cos>
 800211e:	eeb0 7b40 	vmov.f64	d7, d0
 8002122:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002126:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800212c:	edc3 7a00 	vstr	s15, [r3]
        w3 = cos( pi / 4.0 + alpha_3 ) * cos( pi / 4.0 + alpha_3 );
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800213a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 800213e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002142:	eeb0 0b47 	vmov.f64	d0, d7
 8002146:	f00a ff5f 	bl	800d008 <cos>
 800214a:	eeb0 8b40 	vmov.f64	d8, d0
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002158:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 800215c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002160:	eeb0 0b47 	vmov.f64	d0, d7
 8002164:	f00a ff50 	bl	800d008 <cos>
 8002168:	eeb0 7b40 	vmov.f64	d7, d0
 800216c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002170:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002174:	4b55      	ldr	r3, [pc, #340]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 8002176:	edc3 7a00 	vstr	s15, [r3]
        w4 = cos( pi / 4.0 - alpha_4 ) * cos( pi / 4.0 - alpha_4 );
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002184:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 8002188:	ee36 7b47 	vsub.f64	d7, d6, d7
 800218c:	eeb0 0b47 	vmov.f64	d0, d7
 8002190:	f00a ff3a 	bl	800d008 <cos>
 8002194:	eeb0 8b40 	vmov.f64	d8, d0
 8002198:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021a2:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8002270 <HAL_TIM_PeriodElapsedCallback+0x15a0>
 80021a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021aa:	eeb0 0b47 	vmov.f64	d0, d7
 80021ae:	f00a ff2b 	bl	800d008 <cos>
 80021b2:	eeb0 7b40 	vmov.f64	d7, d0
 80021b6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80021ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
        ddx_ref   = Kp_df_x   * (vx_cmd   -   vx_res);
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 80021c6:	ed93 7a00 	vldr	s14, [r3]
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80022d4 <HAL_TIM_PeriodElapsedCallback+0x1604>
 80021d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021dc:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x1608>)
 80021de:	edc3 7a00 	vstr	s15, [r3]
        ddy_ref   = Kp_df_y   * (vy_cmd   -   vy_res);
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 80021e4:	ed93 7a00 	vldr	s14, [r3]
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80022d4 <HAL_TIM_PeriodElapsedCallback+0x1604>
 80021f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fa:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x160c>)
 80021fc:	edc3 7a00 	vstr	s15, [r3]
        ddphi_ref = Kp_df_phi * (dphi_cmd - dphi_res);
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8002202:	ed93 7a00 	vldr	s14, [r3]
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x1610>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80022e4 <HAL_TIM_PeriodElapsedCallback+0x1614>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x1618>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
        fx_ref = Mass * ddx_ref + WOB_FB * Fx_dis;
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x1608>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022ec <HAL_TIM_PeriodElapsedCallback+0x161c>
 8002228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x1620>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eddf 6a30 	vldr	s13, [pc, #192]	; 80022f4 <HAL_TIM_PeriodElapsedCallback+0x1624>
 8002236:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x1628>)
 8002240:	edc3 7a00 	vstr	s15, [r3]
        fy_ref = Mass * ddy_ref + WOB_FB * Fy_dis;
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x160c>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80022ec <HAL_TIM_PeriodElapsedCallback+0x161c>
 800224e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x162c>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022f4 <HAL_TIM_PeriodElapsedCallback+0x1624>
 800225c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x1630>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
 800226a:	e04b      	b.n	8002304 <HAL_TIM_PeriodElapsedCallback+0x1634>
 800226c:	f3af 8000 	nop.w
 8002270:	60000000 	.word	0x60000000
 8002274:	3fe921fb 	.word	0x3fe921fb
 8002278:	200002f0 	.word	0x200002f0
 800227c:	200002f4 	.word	0x200002f4
 8002280:	200002f8 	.word	0x200002f8
 8002284:	200002fc 	.word	0x200002fc
 8002288:	20000448 	.word	0x20000448
 800228c:	3e19999a 	.word	0x3e19999a
 8002290:	20000414 	.word	0x20000414
 8002294:	20000418 	.word	0x20000418
 8002298:	2000041c 	.word	0x2000041c
 800229c:	20000420 	.word	0x20000420
 80022a0:	20000300 	.word	0x20000300
 80022a4:	20000424 	.word	0x20000424
 80022a8:	20000428 	.word	0x20000428
 80022ac:	2000042c 	.word	0x2000042c
 80022b0:	20000430 	.word	0x20000430
 80022b4:	20000404 	.word	0x20000404
 80022b8:	20000408 	.word	0x20000408
 80022bc:	2000040c 	.word	0x2000040c
 80022c0:	20000410 	.word	0x20000410
 80022c4:	200003f4 	.word	0x200003f4
 80022c8:	200003f8 	.word	0x200003f8
 80022cc:	200003fc 	.word	0x200003fc
 80022d0:	20000400 	.word	0x20000400
 80022d4:	42c80000 	.word	0x42c80000
 80022d8:	20000310 	.word	0x20000310
 80022dc:	20000314 	.word	0x20000314
 80022e0:	20000304 	.word	0x20000304
 80022e4:	44610000 	.word	0x44610000
 80022e8:	20000318 	.word	0x20000318
 80022ec:	40b147ae 	.word	0x40b147ae
 80022f0:	200004a8 	.word	0x200004a8
 80022f4:	00000000 	.word	0x00000000
 80022f8:	2000031c 	.word	0x2000031c
 80022fc:	200004ac 	.word	0x200004ac
 8002300:	20000320 	.word	0x20000320
        Mz_ref = Jz * ddphi_ref + WOB_FB * Mz_dis;
 8002304:	4bde      	ldr	r3, [pc, #888]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8002684 <HAL_TIM_PeriodElapsedCallback+0x19b4>
 800230e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002312:	4bdd      	ldr	r3, [pc, #884]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x19b8>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eddf 6adc 	vldr	s13, [pc, #880]	; 800268c <HAL_TIM_PeriodElapsedCallback+0x19bc>
 800231c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002324:	4bda      	ldr	r3, [pc, #872]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 8002326:	edc3 7a00 	vstr	s15, [r3]
        fd1_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * (   fx_ref + fy_ref ) - 1.0 / ( L + W ) * Mz_ref );// ! Coefficient *, / of L + W : as of 2021/01/16, related to Weighted Jacobi Matrix ( *, / L + W)
 800232a:	4bda      	ldr	r3, [pc, #872]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 800232c:	ed93 7a00 	vldr	s14, [r3]
 8002330:	4bd9      	ldr	r3, [pc, #868]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233a:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 800233e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002342:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002346:	4bd2      	ldr	r3, [pc, #840]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002350:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 8002668 <HAL_TIM_PeriodElapsedCallback+0x1998>
 8002354:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002358:	ee36 7b47 	vsub.f64	d7, d6, d7
 800235c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8002670 <HAL_TIM_PeriodElapsedCallback+0x19a0>
 8002360:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002364:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002368:	4bcd      	ldr	r3, [pc, #820]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x19d0>)
 800236a:	edc3 7a00 	vstr	s15, [r3]
        fd2_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * ( - fx_ref + fy_ref ) - 1.0 / ( L + W ) * Mz_ref );// ! For comparing fd before distributing process : as of 2021/01/16
 800236e:	4bca      	ldr	r3, [pc, #808]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	4bc7      	ldr	r3, [pc, #796]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237e:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002386:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800238a:	4bc1      	ldr	r3, [pc, #772]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002394:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8002668 <HAL_TIM_PeriodElapsedCallback+0x1998>
 8002398:	ee27 7b05 	vmul.f64	d7, d7, d5
 800239c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023a0:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8002670 <HAL_TIM_PeriodElapsedCallback+0x19a0>
 80023a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023ac:	4bbd      	ldr	r3, [pc, #756]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x19d4>)
 80023ae:	edc3 7a00 	vstr	s15, [r3]
        fd3_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * (   fx_ref + fy_ref ) + 1.0 / ( L + W ) * Mz_ref );// Change place of sqrt(2.0) : as of 2021/01/17
 80023b2:	4bb8      	ldr	r3, [pc, #736]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 80023b4:	ed93 7a00 	vldr	s14, [r3]
 80023b8:	4bb7      	ldr	r3, [pc, #732]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 80023c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023ce:	4bb0      	ldr	r3, [pc, #704]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023d8:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8002668 <HAL_TIM_PeriodElapsedCallback+0x1998>
 80023dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80023e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023e4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8002670 <HAL_TIM_PeriodElapsedCallback+0x19a0>
 80023e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023f0:	4bad      	ldr	r3, [pc, #692]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x19d8>)
 80023f2:	edc3 7a00 	vstr	s15, [r3]
        fd4_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * ( - fx_ref + fy_ref ) + 1.0 / ( L + W ) * Mz_ref );
 80023f6:	4ba8      	ldr	r3, [pc, #672]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 80023f8:	ed93 7a00 	vldr	s14, [r3]
 80023fc:	4ba5      	ldr	r3, [pc, #660]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002406:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002412:	4b9f      	ldr	r3, [pc, #636]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800241c:	ed9f 5b92 	vldr	d5, [pc, #584]	; 8002668 <HAL_TIM_PeriodElapsedCallback+0x1998>
 8002420:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002424:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002428:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8002670 <HAL_TIM_PeriodElapsedCallback+0x19a0>
 800242c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002430:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002434:	4b9d      	ldr	r3, [pc, #628]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x19dc>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
        fd1_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * (   ( w3 + w4 ) * sqrtf(2.0) * fx_ref + ( w2 + w3 ) * sqrtf(2.0) * fy_ref - ( w2 + w4 ) / ( L + W ) * Mz_ref );// ! Coefficient *, / of L + W !! Check!!
 800243a:	4b9d      	ldr	r3, [pc, #628]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b9c      	ldr	r3, [pc, #624]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244a:	4b9b      	ldr	r3, [pc, #620]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002454:	4b99      	ldr	r3, [pc, #612]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002462:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002678 <HAL_TIM_PeriodElapsedCallback+0x19a8>
 8002466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800246a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800246e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	4b90      	ldr	r3, [pc, #576]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002482:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 8002486:	ee27 7a87 	vmul.f32	s14, s15, s14
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002494:	4b87      	ldr	r3, [pc, #540]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 8002496:	edd3 5a00 	vldr	s11, [r3]
 800249a:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80024a4:	eddf 5a7d 	vldr	s11, [pc, #500]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 80024a8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80024ac:	4b7a      	ldr	r3, [pc, #488]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ba:	4b7e      	ldr	r3, [pc, #504]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 80024bc:	edd3 5a00 	vldr	s11, [r3]
 80024c0:	4b7e      	ldr	r3, [pc, #504]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80024ca:	ed9f 5a7d 	vldr	s10, [pc, #500]	; 80026c0 <HAL_TIM_PeriodElapsedCallback+0x19f0>
 80024ce:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80024e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ec:	4b75      	ldr	r3, [pc, #468]	; (80026c4 <HAL_TIM_PeriodElapsedCallback+0x19f4>)
 80024ee:	edc3 7a00 	vstr	s15, [r3]
        fd2_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * ( - ( w3 + w4 ) * sqrtf(2.0) * fx_ref + ( w1 + w4 ) * sqrtf(2.0) * fy_ref - ( w1 + w3 ) / ( L + W ) * Mz_ref );// as of 2021/01/17
 80024f2:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 80024f4:	ed93 7a00 	vldr	s14, [r3]
 80024f8:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250c:	4b6b      	ldr	r3, [pc, #428]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002516:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800251a:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8002678 <HAL_TIM_PeriodElapsedCallback+0x19a8>
 800251e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002522:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002526:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	eef1 7a67 	vneg.f32	s15, s15
 800253e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 8002542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 8002552:	edd3 5a00 	vldr	s11, [r3]
 8002556:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002560:	eddf 5a4e 	vldr	s11, [pc, #312]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 8002564:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 8002578:	edd3 5a00 	vldr	s11, [r3]
 800257c:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002586:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 80026c0 <HAL_TIM_PeriodElapsedCallback+0x19f0>
 800258a:	eec7 5a85 	vdiv.f32	s11, s15, s10
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x19f8>)
 80025aa:	edc3 7a00 	vstr	s15, [r3]
        fd3_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * (   ( w1 + w2 ) * sqrtf(2.0) * fx_ref + ( w1 + w4 ) * sqrtf(2.0) * fy_ref + ( w2 + w4 ) / ( L + W ) * Mz_ref );
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c8:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025d6:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002678 <HAL_TIM_PeriodElapsedCallback+0x19a8>
 80025da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025de:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80025e2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80025e6:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 80025fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 800260a:	edd3 5a00 	vldr	s11, [r3]
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002618:	eddf 5a20 	vldr	s11, [pc, #128]	; 800269c <HAL_TIM_PeriodElapsedCallback+0x19cc>
 800261c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800262a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 8002630:	edd3 5a00 	vldr	s11, [r3]
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800263e:	ed9f 5a20 	vldr	s10, [pc, #128]	; 80026c0 <HAL_TIM_PeriodElapsedCallback+0x19f0>
 8002642:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002658:	ee26 7b07 	vmul.f64	d7, d6, d7
 800265c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x19fc>)
 8002662:	edc3 7a00 	vstr	s15, [r3]
 8002666:	e033      	b.n	80026d0 <HAL_TIM_PeriodElapsedCallback+0x1a00>
 8002668:	98e38e45 	.word	0x98e38e45
 800266c:	400aaaaa 	.word	0x400aaaaa
 8002670:	6cfe779b 	.word	0x6cfe779b
 8002674:	3fc6a09e 	.word	0x3fc6a09e
 8002678:	60000000 	.word	0x60000000
 800267c:	4006a09e 	.word	0x4006a09e
 8002680:	20000318 	.word	0x20000318
 8002684:	3db645a2 	.word	0x3db645a2
 8002688:	200004b4 	.word	0x200004b4
 800268c:	00000000 	.word	0x00000000
 8002690:	20000324 	.word	0x20000324
 8002694:	2000031c 	.word	0x2000031c
 8002698:	20000320 	.word	0x20000320
 800269c:	3fb504f3 	.word	0x3fb504f3
 80026a0:	20000338 	.word	0x20000338
 80026a4:	2000033c 	.word	0x2000033c
 80026a8:	20000340 	.word	0x20000340
 80026ac:	20000344 	.word	0x20000344
 80026b0:	200003f4 	.word	0x200003f4
 80026b4:	200003f8 	.word	0x200003f8
 80026b8:	200003fc 	.word	0x200003fc
 80026bc:	20000400 	.word	0x20000400
 80026c0:	3e99999a 	.word	0x3e99999a
 80026c4:	20000328 	.word	0x20000328
 80026c8:	2000032c 	.word	0x2000032c
 80026cc:	20000330 	.word	0x20000330
        fd4_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * ( - ( w1 + w2 ) * sqrtf(2.0) * fx_ref + ( w2 + w3 ) * sqrtf(2.0) * fy_ref + ( w1 + w3 ) / ( L + W ) * Mz_ref );
 80026d0:	4bd7      	ldr	r3, [pc, #860]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1d60>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4bd7      	ldr	r3, [pc, #860]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1d64>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e0:	4bd5      	ldr	r3, [pc, #852]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x1d68>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ea:	4bd4      	ldr	r3, [pc, #848]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x1d6c>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026f8:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8002a28 <HAL_TIM_PeriodElapsedCallback+0x1d58>
 80026fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002700:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002704:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002708:	4bc9      	ldr	r3, [pc, #804]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1d60>)
 800270a:	ed93 7a00 	vldr	s14, [r3]
 800270e:	4bc9      	ldr	r3, [pc, #804]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1d64>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002718:	eef1 7a67 	vneg.f32	s15, s15
 800271c:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8002a40 <HAL_TIM_PeriodElapsedCallback+0x1d70>
 8002720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002724:	4bc7      	ldr	r3, [pc, #796]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x1d74>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272e:	4bc1      	ldr	r3, [pc, #772]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1d64>)
 8002730:	edd3 5a00 	vldr	s11, [r3]
 8002734:	4bc0      	ldr	r3, [pc, #768]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x1d68>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800273e:	eddf 5ac0 	vldr	s11, [pc, #768]	; 8002a40 <HAL_TIM_PeriodElapsedCallback+0x1d70>
 8002742:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002746:	4bc0      	ldr	r3, [pc, #768]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x1d78>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002754:	4bb6      	ldr	r3, [pc, #728]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1d60>)
 8002756:	edd3 5a00 	vldr	s11, [r3]
 800275a:	4bb7      	ldr	r3, [pc, #732]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x1d68>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002764:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 8002a4c <HAL_TIM_PeriodElapsedCallback+0x1d7c>
 8002768:	eec7 5a85 	vdiv.f32	s11, s15, s10
 800276c:	4bb8      	ldr	r3, [pc, #736]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x1d80>)
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800277e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002786:	4bb3      	ldr	r3, [pc, #716]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x1d84>)
 8002788:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral1 = Ki_df_integral1 + Ki_df * dt * ( fd1_ref - fd_hat1 );
 800278c:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x1e18>
 8002790:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8002a58 <HAL_TIM_PeriodElapsedCallback+0x1d88>
 8002794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002798:	4bb0      	ldr	r3, [pc, #704]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x1d8c>)
 800279a:	edd3 6a00 	vldr	s13, [r3]
 800279e:	4bb0      	ldr	r3, [pc, #704]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x1d90>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	4bad      	ldr	r3, [pc, #692]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x1d94>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	4bab      	ldr	r3, [pc, #684]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x1d94>)
 80027b8:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral2 = Ki_df_integral2 + Ki_df * dt * ( fd2_ref - fd_hat2 );
 80027bc:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x1e18>
 80027c0:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8002a58 <HAL_TIM_PeriodElapsedCallback+0x1d88>
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	4ba7      	ldr	r3, [pc, #668]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x1d98>)
 80027ca:	edd3 6a00 	vldr	s13, [r3]
 80027ce:	4ba7      	ldr	r3, [pc, #668]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x1d9c>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027dc:	4ba4      	ldr	r3, [pc, #656]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x1da0>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	4ba2      	ldr	r3, [pc, #648]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x1da0>)
 80027e8:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral3 = Ki_df_integral3 + Ki_df * dt * ( fd3_ref - fd_hat3 );
 80027ec:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x1e18>
 80027f0:	eddf 7a99 	vldr	s15, [pc, #612]	; 8002a58 <HAL_TIM_PeriodElapsedCallback+0x1d88>
 80027f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f8:	4b9e      	ldr	r3, [pc, #632]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x1da4>)
 80027fa:	edd3 6a00 	vldr	s13, [r3]
 80027fe:	4b9e      	ldr	r3, [pc, #632]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x1da8>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280c:	4b9b      	ldr	r3, [pc, #620]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	4b99      	ldr	r3, [pc, #612]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 8002818:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral4 = Ki_df_integral4 + Ki_df * dt * ( fd4_ref - fd_hat4 );
 800281c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x1e18>
 8002820:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8002a58 <HAL_TIM_PeriodElapsedCallback+0x1d88>
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	4b8a      	ldr	r3, [pc, #552]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x1d84>)
 800282a:	edd3 6a00 	vldr	s13, [r3]
 800282e:	4b94      	ldr	r3, [pc, #592]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x1db0>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283c:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x1db4>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002846:	4b8f      	ldr	r3, [pc, #572]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x1db4>)
 8002848:	edc3 7a00 	vstr	s15, [r3]
        vel1_ref_new = Kp_df * ( fd1_ref - fd_hat1 ) + Ki_df_integral1;
 800284c:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x1d8c>)
 800284e:	ed93 7a00 	vldr	s14, [r3]
 8002852:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x1d90>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002a88 <HAL_TIM_PeriodElapsedCallback+0x1db8>
 8002860:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002864:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x1d94>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	4b87      	ldr	r3, [pc, #540]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1dbc>)
 8002870:	edc3 7a00 	vstr	s15, [r3]
        vel2_ref_new = Kp_df * ( fd2_ref - fd_hat2 ) + Ki_df_integral2;
 8002874:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x1d98>)
 8002876:	ed93 7a00 	vldr	s14, [r3]
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x1d9c>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a88 <HAL_TIM_PeriodElapsedCallback+0x1db8>
 8002888:	ee27 7a87 	vmul.f32	s14, s15, s14
 800288c:	4b78      	ldr	r3, [pc, #480]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x1da0>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x1dc0>)
 8002898:	edc3 7a00 	vstr	s15, [r3]
        vel3_ref_new = Kp_df * ( fd3_ref - fd_hat3 ) + Ki_df_integral3;
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x1da4>)
 800289e:	ed93 7a00 	vldr	s14, [r3]
 80028a2:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x1da8>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ac:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002a88 <HAL_TIM_PeriodElapsedCallback+0x1db8>
 80028b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b4:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028be:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x1dc4>)
 80028c0:	edc3 7a00 	vstr	s15, [r3]
        vel4_ref_new = Kp_df * ( fd4_ref - fd_hat4 ) + Ki_df_integral4;
 80028c4:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x1d84>)
 80028c6:	ed93 7a00 	vldr	s14, [r3]
 80028ca:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x1db0>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002a88 <HAL_TIM_PeriodElapsedCallback+0x1db8>
 80028d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028dc:	4b69      	ldr	r3, [pc, #420]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x1db4>)
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x1dc8>)
 80028e8:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_cmd = vel1_ref_new / Rw;
 80028ec:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1dbc>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8002a9c <HAL_TIM_PeriodElapsedCallback+0x1dcc>
 80028f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028fa:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x1dd0>)
 80028fc:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_cmd = vel2_ref_new / Rw;
 8002900:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x1dc0>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	eddf 6a65 	vldr	s13, [pc, #404]	; 8002a9c <HAL_TIM_PeriodElapsedCallback+0x1dcc>
 800290a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_cmd = vel3_ref_new / Rw;
 8002914:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x1dc4>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002a9c <HAL_TIM_PeriodElapsedCallback+0x1dcc>
 800291e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002922:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 8002924:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_cmd = vel4_ref_new / Rw;
 8002928:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x1dc8>)
 800292a:	ed93 7a00 	vldr	s14, [r3]
 800292e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8002a9c <HAL_TIM_PeriodElapsedCallback+0x1dcc>
 8002932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002936:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 8002938:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_ref = Kp_av_df * (dtheta1_cmd - dtheta1_res);
 800293c:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x1dd0>)
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002954:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 8002956:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_ref = Kp_av_df * (dtheta2_cmd - dtheta2_res);
 800295a:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800296e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002972:	4b52      	ldr	r3, [pc, #328]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x1dec>)
 8002974:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref = Kp_av_df * (dtheta3_cmd - dtheta3_res);
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x1df0>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002988:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800298c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 8002992:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_ref = Kp_av_df * (dtheta4_cmd - dtheta4_res);
 8002996:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x1df8>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x1dfc>)
 80029b0:	edc3 7a00 	vstr	s15, [r3]
        i1_ref = M11*ddtheta1_ref / ( Gear * Ktn );
 80029b4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002ad0 <HAL_TIM_PeriodElapsedCallback+0x1e00>
 80029b8:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c2:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002ad4 <HAL_TIM_PeriodElapsedCallback+0x1e04>
 80029c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x1e08>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = M22*ddtheta2_ref / ( Gear * Ktn );
 80029d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002ad0 <HAL_TIM_PeriodElapsedCallback+0x1e00>
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x1dec>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002ad4 <HAL_TIM_PeriodElapsedCallback+0x1e04>
 80029e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x1e0c>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = M33*ddtheta3_ref / ( Gear * Ktn );
 80029ec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002ad0 <HAL_TIM_PeriodElapsedCallback+0x1e00>
 80029f0:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fa:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002ad4 <HAL_TIM_PeriodElapsedCallback+0x1e04>
 80029fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x1e10>)
 8002a04:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = M44*ddtheta4_ref / ( Gear * Ktn );
 8002a08:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002ad0 <HAL_TIM_PeriodElapsedCallback+0x1e00>
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x1dfc>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a16:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002ad4 <HAL_TIM_PeriodElapsedCallback+0x1e04>
 8002a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x1e14>)
 8002a20:	edc3 7a00 	vstr	s15, [r3]
 8002a24:	e068      	b.n	8002af8 <HAL_TIM_PeriodElapsedCallback+0x1e28>
 8002a26:	bf00      	nop
 8002a28:	60000000 	.word	0x60000000
 8002a2c:	4006a09e 	.word	0x4006a09e
 8002a30:	200003f4 	.word	0x200003f4
 8002a34:	200003f8 	.word	0x200003f8
 8002a38:	200003fc 	.word	0x200003fc
 8002a3c:	20000400 	.word	0x20000400
 8002a40:	3fb504f3 	.word	0x3fb504f3
 8002a44:	2000031c 	.word	0x2000031c
 8002a48:	20000320 	.word	0x20000320
 8002a4c:	3e99999a 	.word	0x3e99999a
 8002a50:	20000324 	.word	0x20000324
 8002a54:	20000334 	.word	0x20000334
 8002a58:	3c23d70a 	.word	0x3c23d70a
 8002a5c:	20000328 	.word	0x20000328
 8002a60:	200003c8 	.word	0x200003c8
 8002a64:	20000348 	.word	0x20000348
 8002a68:	2000032c 	.word	0x2000032c
 8002a6c:	200003cc 	.word	0x200003cc
 8002a70:	2000034c 	.word	0x2000034c
 8002a74:	20000330 	.word	0x20000330
 8002a78:	200003d0 	.word	0x200003d0
 8002a7c:	20000350 	.word	0x20000350
 8002a80:	200003d4 	.word	0x200003d4
 8002a84:	20000354 	.word	0x20000354
 8002a88:	3ba3d70a 	.word	0x3ba3d70a
 8002a8c:	20000358 	.word	0x20000358
 8002a90:	2000035c 	.word	0x2000035c
 8002a94:	20000360 	.word	0x20000360
 8002a98:	20000364 	.word	0x20000364
 8002a9c:	3d4ccccd 	.word	0x3d4ccccd
 8002aa0:	200002a8 	.word	0x200002a8
 8002aa4:	200002ac 	.word	0x200002ac
 8002aa8:	200002b0 	.word	0x200002b0
 8002aac:	200002b4 	.word	0x200002b4
 8002ab0:	20000258 	.word	0x20000258
 8002ab4:	20000298 	.word	0x20000298
 8002ab8:	2000025c 	.word	0x2000025c
 8002abc:	2000029c 	.word	0x2000029c
 8002ac0:	20000260 	.word	0x20000260
 8002ac4:	200002a0 	.word	0x200002a0
 8002ac8:	20000264 	.word	0x20000264
 8002acc:	200002a4 	.word	0x200002a4
 8002ad0:	3b8a4bfc 	.word	0x3b8a4bfc
 8002ad4:	3f5b8bac 	.word	0x3f5b8bac
 8002ad8:	200002b8 	.word	0x200002b8
 8002adc:	200002bc 	.word	0x200002bc
 8002ae0:	200002c0 	.word	0x200002c0
 8002ae4:	200002c4 	.word	0x200002c4
 8002ae8:	3a83126f 	.word	0x3a83126f
 8002aec:	42480000 	.word	0x42480000
 8002af0:	42800000 	.word	0x42800000
 8002af4:	3c5b8bac 	.word	0x3c5b8bac
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 8002af8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x1e18>
 8002afc:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 8002aec <HAL_TIM_PeriodElapsedCallback+0x1e1c>
 8002b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b10:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002b14:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b18:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x1e18>
 8002b1c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8002aec <HAL_TIM_PeriodElapsedCallback+0x1e1c>
 8002b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b24:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8002af0 <HAL_TIM_PeriodElapsedCallback+0x1e20>
 8002b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2c:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8002af4 <HAL_TIM_PeriodElapsedCallback+0x1e24>
 8002b30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b34:	4bd7      	ldr	r3, [pc, #860]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x21c4>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3e:	4bd6      	ldr	r3, [pc, #856]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x21c8>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b48:	eddf 5ad4 	vldr	s11, [pc, #848]	; 8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>
 8002b4c:	eddf 7ad4 	vldr	s15, [pc, #848]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002b50:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b54:	4bd3      	ldr	r3, [pc, #844]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x21d4>)
 8002b56:	ed93 5a00 	vldr	s10, [r3]
 8002b5a:	4bd3      	ldr	r3, [pc, #844]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x21d8>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002b64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b78:	4bcc      	ldr	r3, [pc, #816]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x21dc>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 8002b7e:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>
 8002b82:	eddf 7ac7 	vldr	s15, [pc, #796]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b8e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b96:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002b9a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b9e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>
 8002ba2:	eddf 7abf 	vldr	s15, [pc, #764]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8002eb4 <HAL_TIM_PeriodElapsedCallback+0x21e4>
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb2:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8002eb8 <HAL_TIM_PeriodElapsedCallback+0x21e8>
 8002bb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bba:	4bc0      	ldr	r3, [pc, #768]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x21ec>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc4:	4bbe      	ldr	r3, [pc, #760]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x21f0>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bce:	eddf 5ab3 	vldr	s11, [pc, #716]	; 8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>
 8002bd2:	eddf 7ab3 	vldr	s15, [pc, #716]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002bd6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002bda:	4bba      	ldr	r3, [pc, #744]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x21f4>)
 8002bdc:	ed93 5a00 	vldr	s10, [r3]
 8002be0:	4bb9      	ldr	r3, [pc, #740]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x21f8>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002bea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bf6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bfe:	4bb3      	ldr	r3, [pc, #716]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x21fc>)
 8002c00:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 8002c04:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>
 8002c08:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c1c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002c20:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002c24:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>
 8002c28:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c30:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002eb4 <HAL_TIM_PeriodElapsedCallback+0x21e4>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8002eb8 <HAL_TIM_PeriodElapsedCallback+0x21e8>
 8002c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c40:	4ba3      	ldr	r3, [pc, #652]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x2200>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4a:	4ba2      	ldr	r3, [pc, #648]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x2204>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	eddf 5a91 	vldr	s11, [pc, #580]	; 8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>
 8002c58:	eddf 7a91 	vldr	s15, [pc, #580]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002c5c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002c60:	4b9d      	ldr	r3, [pc, #628]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x2208>)
 8002c62:	ed93 5a00 	vldr	s10, [r3]
 8002c66:	4b9d      	ldr	r3, [pc, #628]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x220c>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002c70:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c84:	4b96      	ldr	r3, [pc, #600]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2210>)
 8002c86:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 8002c8a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>
 8002c8e:	eddf 7a84 	vldr	s15, [pc, #528]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ca2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002ca6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002caa:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>
 8002cae:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002eb4 <HAL_TIM_PeriodElapsedCallback+0x21e4>
 8002cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbe:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002eb8 <HAL_TIM_PeriodElapsedCallback+0x21e8>
 8002cc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc6:	4b87      	ldr	r3, [pc, #540]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x2214>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd0:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2218>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cda:	eddf 5a70 	vldr	s11, [pc, #448]	; 8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>
 8002cde:	eddf 7a70 	vldr	s15, [pc, #448]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002ce2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002ce6:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x221c>)
 8002ce8:	ed93 5a00 	vldr	s10, [r3]
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2220>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002cf6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2224>)
 8002d0c:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 8002d10:	4b66      	ldr	r3, [pc, #408]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x21dc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a60      	ldr	r2, [pc, #384]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x21c8>)
 8002d16:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 8002d18:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x21fc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x21f0>)
 8002d1e:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2210>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6b      	ldr	r2, [pc, #428]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x2204>)
 8002d26:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 8002d28:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2224>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2218>)
 8002d2e:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 8002d30:	4b58      	ldr	r3, [pc, #352]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x21c4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a70      	ldr	r2, [pc, #448]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2228>)
 8002d36:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 8002d38:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x21ec>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6f      	ldr	r2, [pc, #444]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x222c>)
 8002d3e:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 8002d40:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x2200>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x2230>)
 8002d46:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 8002d48:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x2214>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x2234>)
 8002d4e:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 8002d50:	4b56      	ldr	r3, [pc, #344]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x21dc>)
 8002d52:	ed93 7a00 	vldr	s14, [r3]
 8002d56:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002f08 <HAL_TIM_PeriodElapsedCallback+0x2238>
 8002d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d5e:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x223c>)
 8002d60:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x21fc>)
 8002d66:	ed93 7a00 	vldr	s14, [r3]
 8002d6a:	eddf 6a67 	vldr	s13, [pc, #412]	; 8002f08 <HAL_TIM_PeriodElapsedCallback+0x2238>
 8002d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d72:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x2240>)
 8002d74:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 8002d78:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2210>)
 8002d7a:	ed93 7a00 	vldr	s14, [r3]
 8002d7e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002f08 <HAL_TIM_PeriodElapsedCallback+0x2238>
 8002d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d86:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x2244>)
 8002d88:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2224>)
 8002d8e:	ed93 7a00 	vldr	s14, [r3]
 8002d92:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002f08 <HAL_TIM_PeriodElapsedCallback+0x2238>
 8002d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x2248>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res - M12 * G_DFOB * dtheta2_res - M13 * G_DFOB * dtheta3_res - M14 * G_DFOB * dtheta4_res;// * Continuous
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x224c>)
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>
 8002daa:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002dae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002db2:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x21d4>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dc0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002f20 <HAL_TIM_PeriodElapsedCallback+0x2250>
 8002dc4:	eddf 7a36 	vldr	s15, [pc, #216]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002dc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x21f4>)
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dda:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002f24 <HAL_TIM_PeriodElapsedCallback+0x2254>
 8002dde:	eddf 7a30 	vldr	s15, [pc, #192]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002de2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de6:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x2208>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df4:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002f28 <HAL_TIM_PeriodElapsedCallback+0x2258>
 8002df8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002dfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x221c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x225c>)
 8002e10:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob2 = integral_tau_dfob2 - M21 * G_DFOB * dtheta1_res - M22 * G_DFOB * dtheta2_res - M23 * G_DFOB * dtheta3_res - M24 * G_DFOB * dtheta4_res;// * Continuous
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x2260>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002f20 <HAL_TIM_PeriodElapsedCallback+0x2250>
 8002e1e:	eddf 7a20 	vldr	s15, [pc, #128]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002e22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x21d4>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e34:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>
 8002e38:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002e3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x21f4>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e4e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002f28 <HAL_TIM_PeriodElapsedCallback+0x2258>
 8002e52:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002e56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x2208>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e68:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002f24 <HAL_TIM_PeriodElapsedCallback+0x2254>
 8002e6c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>
 8002e70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x221c>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e82:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x2264>)
 8002e84:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M31 * G_DFOB * dtheta1_res - M32 * G_DFOB * dtheta2_res - M33 * G_DFOB * dtheta3_res - M34 * G_DFOB * dtheta4_res;// * Continuous
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x2268>)
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002f24 <HAL_TIM_PeriodElapsedCallback+0x2254>
 8002e92:	e055      	b.n	8002f40 <HAL_TIM_PeriodElapsedCallback+0x2270>
 8002e94:	200002c8 	.word	0x200002c8
 8002e98:	20000378 	.word	0x20000378
 8002e9c:	3b8a4bfc 	.word	0x3b8a4bfc
 8002ea0:	42480000 	.word	0x42480000
 8002ea4:	20000258 	.word	0x20000258
 8002ea8:	20000268 	.word	0x20000268
 8002eac:	20000368 	.word	0x20000368
 8002eb0:	3a83126f 	.word	0x3a83126f
 8002eb4:	42800000 	.word	0x42800000
 8002eb8:	3c5b8bac 	.word	0x3c5b8bac
 8002ebc:	200002cc 	.word	0x200002cc
 8002ec0:	2000037c 	.word	0x2000037c
 8002ec4:	2000025c 	.word	0x2000025c
 8002ec8:	2000026c 	.word	0x2000026c
 8002ecc:	2000036c 	.word	0x2000036c
 8002ed0:	200002d0 	.word	0x200002d0
 8002ed4:	20000380 	.word	0x20000380
 8002ed8:	20000260 	.word	0x20000260
 8002edc:	20000270 	.word	0x20000270
 8002ee0:	20000370 	.word	0x20000370
 8002ee4:	200002d4 	.word	0x200002d4
 8002ee8:	20000384 	.word	0x20000384
 8002eec:	20000264 	.word	0x20000264
 8002ef0:	20000274 	.word	0x20000274
 8002ef4:	20000374 	.word	0x20000374
 8002ef8:	200002d8 	.word	0x200002d8
 8002efc:	200002dc 	.word	0x200002dc
 8002f00:	200002e0 	.word	0x200002e0
 8002f04:	200002e4 	.word	0x200002e4
 8002f08:	3f5b8bac 	.word	0x3f5b8bac
 8002f0c:	20000388 	.word	0x20000388
 8002f10:	2000038c 	.word	0x2000038c
 8002f14:	20000390 	.word	0x20000390
 8002f18:	20000394 	.word	0x20000394
 8002f1c:	200003b8 	.word	0x200003b8
 8002f20:	39220502 	.word	0x39220502
 8002f24:	3aceaa7d 	.word	0x3aceaa7d
 8002f28:	b9220502 	.word	0xb9220502
 8002f2c:	20000398 	.word	0x20000398
 8002f30:	200003bc 	.word	0x200003bc
 8002f34:	2000039c 	.word	0x2000039c
 8002f38:	200003c0 	.word	0x200003c0
 8002f3c:	42480000 	.word	0x42480000
 8002f40:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8002f3c <HAL_TIM_PeriodElapsedCallback+0x226c>
 8002f44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f48:	4b79      	ldr	r3, [pc, #484]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x2460>)
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f56:	eddf 6a77 	vldr	s13, [pc, #476]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 8002f5a:	eddf 7a77 	vldr	s15, [pc, #476]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002f5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x246c>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f70:	eddf 6a73 	vldr	s13, [pc, #460]	; 8003140 <HAL_TIM_PeriodElapsedCallback+0x2470>
 8002f74:	eddf 7a70 	vldr	s15, [pc, #448]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002f78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f7c:	4b71      	ldr	r3, [pc, #452]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2474>)
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003148 <HAL_TIM_PeriodElapsedCallback+0x2478>
 8002f8e:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002f92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x247c>)
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x2480>)
 8002fa6:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M41 * G_DFOB * dtheta1_res - M42 * G_DFOB * dtheta2_res - M43 * G_DFOB * dtheta3_res - M44 * G_DFOB * dtheta4_res;// * Continuous
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x2484>)
 8002fac:	ed93 7a00 	vldr	s14, [r3]
 8002fb0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 8002fb4:	eddf 7a60 	vldr	s15, [pc, #384]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002fb8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fbc:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x2460>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fca:	eddf 6a63 	vldr	s13, [pc, #396]	; 8003158 <HAL_TIM_PeriodElapsedCallback+0x2488>
 8002fce:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002fd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fd6:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x246c>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fe4:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003148 <HAL_TIM_PeriodElapsedCallback+0x2478>
 8002fe8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002fec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ff0:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2474>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffe:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003140 <HAL_TIM_PeriodElapsedCallback+0x2470>
 8003002:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8003006:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800300a:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x247c>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x248c>)
 800301a:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 800301e:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x2490>)
 8003020:	f993 3000 	ldrsb.w	r3, [r3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_TIM_PeriodElapsedCallback+0x235e>
 8003028:	2b01      	cmp	r3, #1
 800302a:	d00f      	beq.n	800304c <HAL_TIM_PeriodElapsedCallback+0x237c>
 800302c:	e01d      	b.n	800306a <HAL_TIM_PeriodElapsedCallback+0x239a>
            tau_fric1 = F1_plus + D1_plus * dtheta1_res;
 800302e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003164 <HAL_TIM_PeriodElapsedCallback+0x2494>
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x2460>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003168 <HAL_TIM_PeriodElapsedCallback+0x2498>
 8003040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x249c>)
 8003046:	edc3 7a00 	vstr	s15, [r3]
            break;
 800304a:	e00e      	b.n	800306a <HAL_TIM_PeriodElapsedCallback+0x239a>
            tau_fric1 = F1_minus + D1_minus * dtheta1_res;
 800304c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003170 <HAL_TIM_PeriodElapsedCallback+0x24a0>
 8003050:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x2460>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003174 <HAL_TIM_PeriodElapsedCallback+0x24a4>
 800305e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003062:	4b42      	ldr	r3, [pc, #264]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x249c>)
 8003064:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003068:	bf00      	nop
        switch(direc2){
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x24a8>)
 800306c:	f993 3000 	ldrsb.w	r3, [r3]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_TIM_PeriodElapsedCallback+0x23aa>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d00f      	beq.n	8003098 <HAL_TIM_PeriodElapsedCallback+0x23c8>
 8003078:	e01d      	b.n	80030b6 <HAL_TIM_PeriodElapsedCallback+0x23e6>
            tau_fric2 = F2_plus + D2_plus * dtheta2_res;
 800307a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800317c <HAL_TIM_PeriodElapsedCallback+0x24ac>
 800307e:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x246c>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003088:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003180 <HAL_TIM_PeriodElapsedCallback+0x24b0>
 800308c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x24b4>)
 8003092:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003096:	e00e      	b.n	80030b6 <HAL_TIM_PeriodElapsedCallback+0x23e6>
            tau_fric2 = F2_minus + D2_minus * dtheta2_res;
 8003098:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003188 <HAL_TIM_PeriodElapsedCallback+0x24b8>
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x246c>)
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800318c <HAL_TIM_PeriodElapsedCallback+0x24bc>
 80030aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030ae:	4b35      	ldr	r3, [pc, #212]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x24b4>)
 80030b0:	edc3 7a00 	vstr	s15, [r3]
            break;
 80030b4:	bf00      	nop
        switch(direc3){
 80030b6:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x24c0>)
 80030b8:	f993 3000 	ldrsb.w	r3, [r3]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_TIM_PeriodElapsedCallback+0x23f6>
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d00f      	beq.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x2414>
 80030c4:	e01d      	b.n	8003102 <HAL_TIM_PeriodElapsedCallback+0x2432>
            tau_fric3 = F3_plus + D3_plus * dtheta3_res;
 80030c6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003194 <HAL_TIM_PeriodElapsedCallback+0x24c4>
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2474>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003198 <HAL_TIM_PeriodElapsedCallback+0x24c8>
 80030d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x24cc>)
 80030de:	edc3 7a00 	vstr	s15, [r3]
            break;
 80030e2:	e00e      	b.n	8003102 <HAL_TIM_PeriodElapsedCallback+0x2432>
            tau_fric3 = F3_minus + D3_minus * dtheta3_res;
 80030e4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80031a0 <HAL_TIM_PeriodElapsedCallback+0x24d0>
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2474>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80031a4 <HAL_TIM_PeriodElapsedCallback+0x24d4>
 80030f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x24cc>)
 80030fc:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003100:	bf00      	nop
        switch(direc4){
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x24d8>)
 8003104:	f993 3000 	ldrsb.w	r3, [r3]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_TIM_PeriodElapsedCallback+0x2442>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d055      	beq.n	80031bc <HAL_TIM_PeriodElapsedCallback+0x24ec>
 8003110:	e063      	b.n	80031da <HAL_TIM_PeriodElapsedCallback+0x250a>
            tau_fric4 = F4_plus + D4_plus * dtheta4_res;
 8003112:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80031ac <HAL_TIM_PeriodElapsedCallback+0x24dc>
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x247c>)
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031b0 <HAL_TIM_PeriodElapsedCallback+0x24e0>
 8003124:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x24e4>)
 800312a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800312e:	e054      	b.n	80031da <HAL_TIM_PeriodElapsedCallback+0x250a>
 8003130:	20000258 	.word	0x20000258
 8003134:	b9220502 	.word	0xb9220502
 8003138:	42480000 	.word	0x42480000
 800313c:	2000025c 	.word	0x2000025c
 8003140:	3b8a4bfc 	.word	0x3b8a4bfc
 8003144:	20000260 	.word	0x20000260
 8003148:	39220502 	.word	0x39220502
 800314c:	20000264 	.word	0x20000264
 8003150:	200003a0 	.word	0x200003a0
 8003154:	200003c4 	.word	0x200003c4
 8003158:	3aceaa7d 	.word	0x3aceaa7d
 800315c:	200003a4 	.word	0x200003a4
 8003160:	20000232 	.word	0x20000232
 8003164:	3a03126f 	.word	0x3a03126f
 8003168:	3c8db8bb 	.word	0x3c8db8bb
 800316c:	200003e4 	.word	0x200003e4
 8003170:	3a1d4952 	.word	0x3a1d4952
 8003174:	bd2dab9f 	.word	0xbd2dab9f
 8003178:	20000233 	.word	0x20000233
 800317c:	39d1b717 	.word	0x39d1b717
 8003180:	3ca8c155 	.word	0x3ca8c155
 8003184:	200003e8 	.word	0x200003e8
 8003188:	36eae18b 	.word	0x36eae18b
 800318c:	bd571d1d 	.word	0xbd571d1d
 8003190:	20000234 	.word	0x20000234
 8003194:	3a902de0 	.word	0x3a902de0
 8003198:	3d202752 	.word	0x3d202752
 800319c:	200003ec 	.word	0x200003ec
 80031a0:	3b09a027 	.word	0x3b09a027
 80031a4:	bd81a36e 	.word	0xbd81a36e
 80031a8:	20000235 	.word	0x20000235
 80031ac:	3a9d4952 	.word	0x3a9d4952
 80031b0:	3ce21965 	.word	0x3ce21965
 80031b4:	200003f0 	.word	0x200003f0
 80031b8:	3a83126f 	.word	0x3a83126f
            tau_fric4 = F4_minus + D4_minus * dtheta4_res;
 80031bc:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80031b8 <HAL_TIM_PeriodElapsedCallback+0x24e8>
 80031c0:	4bde      	ldr	r3, [pc, #888]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	ed9f 7add 	vldr	s14, [pc, #884]	; 8003540 <HAL_TIM_PeriodElapsedCallback+0x2870>
 80031ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031d2:	4bdc      	ldr	r3, [pc, #880]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x2874>)
 80031d4:	edc3 7a00 	vstr	s15, [r3]
            break;
 80031d8:	bf00      	nop
        if( dtheta1_res < 0.5 && dtheta1_res > -0.5 ) tau_fric1 = 0.0;
 80031da:	4bdb      	ldr	r3, [pc, #876]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d50d      	bpl.n	800320a <HAL_TIM_PeriodElapsedCallback+0x253a>
 80031ee:	4bd6      	ldr	r3, [pc, #856]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dd03      	ble.n	800320a <HAL_TIM_PeriodElapsedCallback+0x253a>
 8003202:	4bd2      	ldr	r3, [pc, #840]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x287c>)
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
        if( dtheta2_res < 0.5 && dtheta2_res > -0.5 ) tau_fric2 = 0.0;
 800320a:	4bd1      	ldr	r3, [pc, #836]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	d50d      	bpl.n	800323a <HAL_TIM_PeriodElapsedCallback+0x256a>
 800321e:	4bcc      	ldr	r3, [pc, #816]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	dd03      	ble.n	800323a <HAL_TIM_PeriodElapsedCallback+0x256a>
 8003232:	4bc8      	ldr	r3, [pc, #800]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x2884>)
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
        if( dtheta3_res < 0.5 && dtheta3_res > -0.5 ) tau_fric3 = 0.0;
 800323a:	4bc7      	ldr	r3, [pc, #796]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	d50d      	bpl.n	800326a <HAL_TIM_PeriodElapsedCallback+0x259a>
 800324e:	4bc2      	ldr	r3, [pc, #776]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	dd03      	ble.n	800326a <HAL_TIM_PeriodElapsedCallback+0x259a>
 8003262:	4bbe      	ldr	r3, [pc, #760]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x288c>)
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
        if( dtheta4_res < 0.5 && dtheta4_res > -0.5 ) tau_fric4 = 0.0;
 800326a:	4bb4      	ldr	r3, [pc, #720]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d50d      	bpl.n	800329a <HAL_TIM_PeriodElapsedCallback+0x25ca>
 800327e:	4baf      	ldr	r3, [pc, #700]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	dd03      	ble.n	800329a <HAL_TIM_PeriodElapsedCallback+0x25ca>
 8003292:	4bac      	ldr	r3, [pc, #688]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x2874>)
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
        integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11*G_DFOB*dtheta1_res + M12*G_DFOB*dtheta2_res + M13*G_DFOB*dtheta3_res + M14*G_DFOB*dtheta4_res - tau_fric1 - integral_tau_dfob1) * G_DFOB * dt;
 800329a:	4bb1      	ldr	r3, [pc, #708]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x2890>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003564 <HAL_TIM_PeriodElapsedCallback+0x2894>
 80032a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032a8:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8003568 <HAL_TIM_PeriodElapsedCallback+0x2898>
 80032ac:	eddf 7aaf 	vldr	s15, [pc, #700]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80032b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032b4:	4ba4      	ldr	r3, [pc, #656]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c2:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x28a0>
 80032c6:	eddf 7aa9 	vldr	s15, [pc, #676]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80032ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032ce:	4ba0      	ldr	r3, [pc, #640]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032dc:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x28a4>
 80032e0:	eddf 7aa2 	vldr	s15, [pc, #648]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80032e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032e8:	4b9b      	ldr	r3, [pc, #620]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f6:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x28a8>
 80032fa:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80032fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003302:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800330c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003310:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x287c>)
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800331a:	4b98      	ldr	r3, [pc, #608]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x28ac>)
 800331c:	edd3 7a00 	vldr	s15, [r3]
 8003320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003324:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 8003328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800332c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x28b0>
 8003330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003334:	4b91      	ldr	r3, [pc, #580]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x28ac>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333e:	4b8f      	ldr	r3, [pc, #572]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x28ac>)
 8003340:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M21*G_DFOB*dtheta1_res + M22*G_DFOB*dtheta2_res + M23*G_DFOB*dtheta3_res + M24*G_DFOB*dtheta4_res - tau_fric2 - integral_tau_dfob2) * G_DFOB * dt;
 8003344:	4b8f      	ldr	r3, [pc, #572]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0x28b4>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003564 <HAL_TIM_PeriodElapsedCallback+0x2894>
 800334e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003352:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x28a0>
 8003356:	eddf 7a85 	vldr	s15, [pc, #532]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 800335a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800335e:	4b7a      	ldr	r3, [pc, #488]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003368:	ee37 7a27 	vadd.f32	s14, s14, s15
 800336c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003568 <HAL_TIM_PeriodElapsedCallback+0x2898>
 8003370:	eddf 7a7e 	vldr	s15, [pc, #504]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 8003374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003378:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003386:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x28a8>
 800338a:	eddf 7a78 	vldr	s15, [pc, #480]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 800338e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003392:	4b71      	ldr	r3, [pc, #452]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>)
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800339c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a0:	eddf 6a74 	vldr	s13, [pc, #464]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x28a4>
 80033a4:	eddf 7a71 	vldr	s15, [pc, #452]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80033a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033ac:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ba:	4b66      	ldr	r3, [pc, #408]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x2884>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033c4:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x28b8>)
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80033d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x28b0>
 80033da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033de:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x28b8>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e8:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x28b8>)
 80033ea:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M31*G_DFOB*dtheta1_res + M32*G_DFOB*dtheta2_res + M33*G_DFOB*dtheta3_res + M34*G_DFOB*dtheta4_res - tau_fric3 - integral_tau_dfob3) * G_DFOB * dt;
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <HAL_TIM_PeriodElapsedCallback+0x28bc>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003564 <HAL_TIM_PeriodElapsedCallback+0x2894>
 80033f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033fc:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x28a4>
 8003400:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 8003404:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003408:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003416:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x28a8>
 800341a:	eddf 7a54 	vldr	s15, [pc, #336]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 800341e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003422:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003430:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8003568 <HAL_TIM_PeriodElapsedCallback+0x2898>
 8003434:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 8003438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800343c:	4b46      	ldr	r3, [pc, #280]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800344a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x28a0>
 800344e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 8003452:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x288c>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800346e:	4b48      	ldr	r3, [pc, #288]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x28c0>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003478:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 800347c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003480:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x28b0>
 8003484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x28c0>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x28c0>)
 8003494:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M41*G_DFOB*dtheta1_res + M42*G_DFOB*dtheta2_res + M43*G_DFOB*dtheta3_res + M44*G_DFOB*dtheta4_res - tau_fric4 - integral_tau_dfob4) * G_DFOB * dt;
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x28c4>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003564 <HAL_TIM_PeriodElapsedCallback+0x2894>
 80034a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034a6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x28a8>
 80034aa:	eddf 7a30 	vldr	s15, [pc, #192]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80034ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x28a4>
 80034c4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80034c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034cc:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034da:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x28a0>
 80034de:	eddf 7a23 	vldr	s15, [pc, #140]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80034e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003568 <HAL_TIM_PeriodElapsedCallback+0x2898>
 80034f8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 80034fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x2874>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003518:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x28c8>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003522:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800356c <HAL_TIM_PeriodElapsedCallback+0x289c>
 8003526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800352a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x28b0>
 800352e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x28c8>)
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	e030      	b.n	800359c <HAL_TIM_PeriodElapsedCallback+0x28cc>
 800353a:	bf00      	nop
 800353c:	20000264 	.word	0x20000264
 8003540:	bd87fcb9 	.word	0xbd87fcb9
 8003544:	200003f0 	.word	0x200003f0
 8003548:	20000258 	.word	0x20000258
 800354c:	200003e4 	.word	0x200003e4
 8003550:	2000025c 	.word	0x2000025c
 8003554:	200003e8 	.word	0x200003e8
 8003558:	20000260 	.word	0x20000260
 800355c:	200003ec 	.word	0x200003ec
 8003560:	200002c8 	.word	0x200002c8
 8003564:	3f5b8bac 	.word	0x3f5b8bac
 8003568:	3b8a4bfc 	.word	0x3b8a4bfc
 800356c:	42480000 	.word	0x42480000
 8003570:	39220502 	.word	0x39220502
 8003574:	3aceaa7d 	.word	0x3aceaa7d
 8003578:	b9220502 	.word	0xb9220502
 800357c:	200003b8 	.word	0x200003b8
 8003580:	3a83126f 	.word	0x3a83126f
 8003584:	200002cc 	.word	0x200002cc
 8003588:	200003bc 	.word	0x200003bc
 800358c:	200002d0 	.word	0x200002d0
 8003590:	200003c0 	.word	0x200003c0
 8003594:	200002d4 	.word	0x200002d4
 8003598:	200003c4 	.word	0x200003c4
 800359c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a0:	4bd3      	ldr	r3, [pc, #844]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x2c20>)
 80035a2:	edc3 7a00 	vstr	s15, [r3]
          tau_dfob1_pre = tau_dfob1;
 80035a6:	4bd3      	ldr	r3, [pc, #844]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x2c24>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4ad3      	ldr	r2, [pc, #844]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x2c28>)
 80035ac:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 80035ae:	4bd3      	ldr	r3, [pc, #844]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x2c2c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4ad3      	ldr	r2, [pc, #844]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x2c30>)
 80035b4:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 80035b6:	4bd3      	ldr	r3, [pc, #844]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x2c34>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4ad3      	ldr	r2, [pc, #844]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x2c38>)
 80035bc:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 80035be:	4bd3      	ldr	r3, [pc, #844]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x2c3c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4ad3      	ldr	r2, [pc, #844]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x2c40>)
 80035c4:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw;// [N] Element of fd's wheel rotation direction
 80035c6:	4bcb      	ldr	r3, [pc, #812]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x2c24>)
 80035c8:	ed93 7a00 	vldr	s14, [r3]
 80035cc:	eddf 6ad1 	vldr	s13, [pc, #836]	; 8003914 <HAL_TIM_PeriodElapsedCallback+0x2c44>
 80035d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035d4:	4bd0      	ldr	r3, [pc, #832]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x2c48>)
 80035d6:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw;
 80035da:	4bc8      	ldr	r3, [pc, #800]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x2c2c>)
 80035dc:	ed93 7a00 	vldr	s14, [r3]
 80035e0:	eddf 6acc 	vldr	s13, [pc, #816]	; 8003914 <HAL_TIM_PeriodElapsedCallback+0x2c44>
 80035e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035e8:	4bcc      	ldr	r3, [pc, #816]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x2c4c>)
 80035ea:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw;
 80035ee:	4bc5      	ldr	r3, [pc, #788]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x2c34>)
 80035f0:	ed93 7a00 	vldr	s14, [r3]
 80035f4:	eddf 6ac7 	vldr	s13, [pc, #796]	; 8003914 <HAL_TIM_PeriodElapsedCallback+0x2c44>
 80035f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035fc:	4bc8      	ldr	r3, [pc, #800]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x2c50>)
 80035fe:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw;
 8003602:	4bc2      	ldr	r3, [pc, #776]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x2c3c>)
 8003604:	ed93 7a00 	vldr	s14, [r3]
 8003608:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8003914 <HAL_TIM_PeriodElapsedCallback+0x2c44>
 800360c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003610:	4bc4      	ldr	r3, [pc, #784]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x2c54>)
 8003612:	edc3 7a00 	vstr	s15, [r3]
        fx_hat = 1.0 / Rw             * (   tau_dfob1 - tau_dfob2 + tau_dfob3 - tau_dfob4 );// Substantially, 1.0 / sqrt(2.0) * fd : as of 2021/01/08
 8003616:	4bb7      	ldr	r3, [pc, #732]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x2c24>)
 8003618:	ed93 7a00 	vldr	s14, [r3]
 800361c:	4bb7      	ldr	r3, [pc, #732]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x2c2c>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003626:	4bb7      	ldr	r3, [pc, #732]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x2c34>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003630:	4bb6      	ldr	r3, [pc, #728]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x2c3c>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800363e:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80038e0 <HAL_TIM_PeriodElapsedCallback+0x2c10>
 8003642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800364a:	4bb7      	ldr	r3, [pc, #732]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x2c58>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
        fy_hat = 1.0 / Rw             * (   tau_dfob1 + tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8003650:	4ba8      	ldr	r3, [pc, #672]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x2c24>)
 8003652:	ed93 7a00 	vldr	s14, [r3]
 8003656:	4ba9      	ldr	r3, [pc, #676]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x2c2c>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003660:	4ba8      	ldr	r3, [pc, #672]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x2c34>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800366a:	4ba8      	ldr	r3, [pc, #672]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x2c3c>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003678:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80038e0 <HAL_TIM_PeriodElapsedCallback+0x2c10>
 800367c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003680:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003684:	4ba9      	ldr	r3, [pc, #676]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x2c5c>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
        Mz_hat = 1.0 / Rw * ( L + W ) * ( - tau_dfob1 - tau_dfob2 + tau_dfob3 + tau_dfob4 );
 800368a:	4b9a      	ldr	r3, [pc, #616]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x2c24>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	eeb1 7a67 	vneg.f32	s14, s15
 8003694:	4b99      	ldr	r3, [pc, #612]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x2c2c>)
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800369e:	4b99      	ldr	r3, [pc, #612]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x2c34>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a8:	4b98      	ldr	r3, [pc, #608]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x2c3c>)
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036b6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0x2c18>
 80036ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036c2:	4b9b      	ldr	r3, [pc, #620]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x2c60>)
 80036c4:	edc3 7a00 	vstr	s15, [r3]
        WOB_x_input   = fx_ref - Mass * Acc_x_correct;
 80036c8:	4b9a      	ldr	r3, [pc, #616]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x2c64>)
 80036ca:	ed93 7a00 	vldr	s14, [r3]
 80036ce:	4b9a      	ldr	r3, [pc, #616]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x2c68>)
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	eddf 6a99 	vldr	s13, [pc, #612]	; 800393c <HAL_TIM_PeriodElapsedCallback+0x2c6c>
 80036d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e0:	4b97      	ldr	r3, [pc, #604]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x2c70>)
 80036e2:	edc3 7a00 	vstr	s15, [r3]
        WOB_y_input   = fy_ref - Mass * Acc_y_correct;
 80036e6:	4b97      	ldr	r3, [pc, #604]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x2c74>)
 80036e8:	ed93 7a00 	vldr	s14, [r3]
 80036ec:	4b96      	ldr	r3, [pc, #600]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x2c78>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	eddf 6a92 	vldr	s13, [pc, #584]	; 800393c <HAL_TIM_PeriodElapsedCallback+0x2c6c>
 80036f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fe:	4b93      	ldr	r3, [pc, #588]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x2c7c>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
        Fx_dis = 1.0 / (1.0 + G_WOB * dt) * ( Fx_dis_pre + G_WOB * dt * WOB_x_input );// LPF : Backward Difference
 8003704:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 8003708:	eddf 7a92 	vldr	s15, [pc, #584]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 800370c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003714:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003718:	ee37 7b06 	vadd.f64	d7, d7, d6
 800371c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003720:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003724:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 8003728:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 800372c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003730:	4b83      	ldr	r3, [pc, #524]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x2c70>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373a:	4b87      	ldr	r3, [pc, #540]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x2c88>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003744:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003748:	ee26 7b07 	vmul.f64	d7, d6, d7
 800374c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003750:	4b82      	ldr	r3, [pc, #520]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x2c8c>)
 8003752:	edc3 7a00 	vstr	s15, [r3]
        Fy_dis = 1.0 / (1.0 + G_WOB * dt) * ( Fy_dis_pre + G_WOB * dt * WOB_y_input );// LPF : Backward Difference
 8003756:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 800375a:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003766:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800376a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800376e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003772:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003776:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 800377a:	eddf 7a76 	vldr	s15, [pc, #472]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 800377e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003782:	4b72      	ldr	r3, [pc, #456]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x2c7c>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800378c:	4b74      	ldr	r3, [pc, #464]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x2c90>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003796:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800379a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800379e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037a2:	4b70      	ldr	r3, [pc, #448]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x2c94>)
 80037a4:	edc3 7a00 	vstr	s15, [r3]
        ddphi_dis = 1.0 / (1.0 + G_WOB * dt) * ( ddphi_dis_pre + G_WOB * dt * ddphi_ref - G_WOB * ( yaw_rate - yaw_rate_pre ) );// LPF + Pseudo Derivative : Backward Difference
 80037a8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 80037ac:	eddf 7a69 	vldr	s15, [pc, #420]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 80037b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80037bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037c0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80037c4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80037c8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 80037cc:	eddf 7a61 	vldr	s15, [pc, #388]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 80037d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d4:	4b64      	ldr	r3, [pc, #400]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x2c98>)
 80037d6:	edd3 7a00 	vldr	s15, [r3]
 80037da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x2c9c>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x2ca0>)
 80037ea:	edd3 5a00 	vldr	s11, [r3]
 80037ee:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x2ca4>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80037f8:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 80037fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003808:	ee26 7b07 	vmul.f64	d7, d6, d7
 800380c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x2ca8>)
 8003812:	edc3 7a00 	vstr	s15, [r3]
        Fx_dis = - Fx_dis;// Apply + - sign direction to the sign direction of slip ratio observer
 8003816:	4b51      	ldr	r3, [pc, #324]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x2c8c>)
 8003818:	edd3 7a00 	vldr	s15, [r3]
 800381c:	eef1 7a67 	vneg.f32	s15, s15
 8003820:	4b4e      	ldr	r3, [pc, #312]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x2c8c>)
 8003822:	edc3 7a00 	vstr	s15, [r3]
        Fy_dis = - Fy_dis;
 8003826:	4b4f      	ldr	r3, [pc, #316]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x2c94>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	eef1 7a67 	vneg.f32	s15, s15
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x2c94>)
 8003832:	edc3 7a00 	vstr	s15, [r3]
        Mz_dis = - Jz * ddphi_dis;
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x2ca8>)
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800397c <HAL_TIM_PeriodElapsedCallback+0x2cac>
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x2cb0>)
 8003846:	edc3 7a00 	vstr	s15, [r3]
          Fx_dis_pre = Fx_dis;
 800384a:	4b44      	ldr	r3, [pc, #272]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x2c8c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x2c88>)
 8003850:	6013      	str	r3, [r2, #0]
          Fy_dis_pre = Fy_dis;
 8003852:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x2c94>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a42      	ldr	r2, [pc, #264]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x2c90>)
 8003858:	6013      	str	r3, [r2, #0]
          ddphi_dis_pre = ddphi_dis;
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x2ca8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a43      	ldr	r2, [pc, #268]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x2c9c>)
 8003860:	6013      	str	r3, [r2, #0]
        M_YMO = 1.0 / (1.0 + G_YMO * dt) * ( M_YMO_pre + G_YMO * ( yaw_rate - yaw_rate_pre ) - G_YMO * dt * Mz_hat );// LPF + Pseudo Derivative : Backward Difference
 8003862:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 8003866:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003872:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003876:	ee37 7b06 	vadd.f64	d7, d7, d6
 800387a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800387e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x2ca0>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x2ca4>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003892:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 8003896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800389a:	4b3a      	ldr	r3, [pc, #232]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x2cb4>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a4:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8003950 <HAL_TIM_PeriodElapsedCallback+0x2c80>
 80038a8:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8003954 <HAL_TIM_PeriodElapsedCallback+0x2c84>
 80038ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x2c60>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80038c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x2cb8>)
 80038cc:	edc3 7a00 	vstr	s15, [r3]
          M_YMO_pre     = M_YMO;
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x2cb8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2b      	ldr	r2, [pc, #172]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x2cb4>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e058      	b.n	800398c <HAL_TIM_PeriodElapsedCallback+0x2cbc>
 80038da:	bf00      	nop
 80038dc:	f3af 8000 	nop.w
 80038e0:	fb000001 	.word	0xfb000001
 80038e4:	4033ffff 	.word	0x4033ffff
 80038e8:	09fffffd 	.word	0x09fffffd
 80038ec:	40180000 	.word	0x40180000
 80038f0:	200003c4 	.word	0x200003c4
 80038f4:	20000398 	.word	0x20000398
 80038f8:	200003a8 	.word	0x200003a8
 80038fc:	2000039c 	.word	0x2000039c
 8003900:	200003ac 	.word	0x200003ac
 8003904:	200003a0 	.word	0x200003a0
 8003908:	200003b0 	.word	0x200003b0
 800390c:	200003a4 	.word	0x200003a4
 8003910:	200003b4 	.word	0x200003b4
 8003914:	3d4ccccd 	.word	0x3d4ccccd
 8003918:	200003c8 	.word	0x200003c8
 800391c:	200003cc 	.word	0x200003cc
 8003920:	200003d0 	.word	0x200003d0
 8003924:	200003d4 	.word	0x200003d4
 8003928:	200003d8 	.word	0x200003d8
 800392c:	200003dc 	.word	0x200003dc
 8003930:	200003e0 	.word	0x200003e0
 8003934:	2000031c 	.word	0x2000031c
 8003938:	2000047c 	.word	0x2000047c
 800393c:	40b147ae 	.word	0x40b147ae
 8003940:	200004a0 	.word	0x200004a0
 8003944:	20000320 	.word	0x20000320
 8003948:	20000480 	.word	0x20000480
 800394c:	200004a4 	.word	0x200004a4
 8003950:	3a83126f 	.word	0x3a83126f
 8003954:	42480000 	.word	0x42480000
 8003958:	200004b8 	.word	0x200004b8
 800395c:	200004a8 	.word	0x200004a8
 8003960:	200004bc 	.word	0x200004bc
 8003964:	200004ac 	.word	0x200004ac
 8003968:	20000318 	.word	0x20000318
 800396c:	200004c0 	.word	0x200004c0
 8003970:	20000448 	.word	0x20000448
 8003974:	20000454 	.word	0x20000454
 8003978:	200004b0 	.word	0x200004b0
 800397c:	bdb645a2 	.word	0xbdb645a2
 8003980:	200004b4 	.word	0x200004b4
 8003984:	200004c8 	.word	0x200004c8
 8003988:	200004c4 	.word	0x200004c4
        ia1_ref = i1_ref + i1_comp;
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x2dd4>)
 800398e:	ed93 7a00 	vldr	s14, [r3]
 8003992:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x2dd8>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 800399e:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x2de0>)
 80039a4:	ed93 7a00 	vldr	s14, [r3]
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2de4>)
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b2:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2de8>)
 80039b4:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 80039b8:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x2dec>)
 80039ba:	ed93 7a00 	vldr	s14, [r3]
 80039be:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x2df0>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c8:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2df4>)
 80039ca:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x2df8>)
 80039d0:	ed93 7a00 	vldr	s14, [r3]
 80039d4:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x2dfc>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x2e00>)
 80039e0:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x2e04>
 80039ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f6:	dd03      	ble.n	8003a00 <HAL_TIM_PeriodElapsedCallback+0x2d30>
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 80039fa:	4a37      	ldr	r2, [pc, #220]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2e08>)
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e00c      	b.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x2d4a>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 8003a02:	edd3 7a00 	vldr	s15, [r3]
 8003a06:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>
 8003a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a12:	d502      	bpl.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x2d4a>
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 8003a16:	4a32      	ldr	r2, [pc, #200]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x2e10>)
 8003a18:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 8003a1a:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2de8>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x2e04>
 8003a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2c:	dd03      	ble.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x2d66>
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2de8>)
 8003a30:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2e08>)
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e00c      	b.n	8003a50 <HAL_TIM_PeriodElapsedCallback+0x2d80>
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2de8>)
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>
 8003a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	d502      	bpl.n	8003a50 <HAL_TIM_PeriodElapsedCallback+0x2d80>
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2de8>)
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x2e10>)
 8003a4e:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8003a50:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2df4>)
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x2e04>
 8003a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	dd03      	ble.n	8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2df4>)
 8003a66:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2e08>)
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e00c      	b.n	8003a86 <HAL_TIM_PeriodElapsedCallback+0x2db6>
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2df4>)
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>
 8003a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d502      	bpl.n	8003a86 <HAL_TIM_PeriodElapsedCallback+0x2db6>
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2df4>)
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x2e10>)
 8003a84:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x2e00>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x2e04>
 8003a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	dd24      	ble.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x2e14>
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x2e00>)
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2e08>)
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e02d      	b.n	8003afe <HAL_TIM_PeriodElapsedCallback+0x2e2e>
 8003aa2:	bf00      	nop
 8003aa4:	200002b8 	.word	0x200002b8
 8003aa8:	20000388 	.word	0x20000388
 8003aac:	200002c8 	.word	0x200002c8
 8003ab0:	200002bc 	.word	0x200002bc
 8003ab4:	2000038c 	.word	0x2000038c
 8003ab8:	200002cc 	.word	0x200002cc
 8003abc:	200002c0 	.word	0x200002c0
 8003ac0:	20000390 	.word	0x20000390
 8003ac4:	200002d0 	.word	0x200002d0
 8003ac8:	200002c4 	.word	0x200002c4
 8003acc:	20000394 	.word	0x20000394
 8003ad0:	200002d4 	.word	0x200002d4
 8003ad4:	3fb33333 	.word	0x3fb33333
 8003ad8:	3fb33333 	.word	0x3fb33333
 8003adc:	bfb33333 	.word	0xbfb33333
 8003ae0:	bfb33333 	.word	0xbfb33333
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 8003ae4:	4ba6      	ldr	r3, [pc, #664]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x30b0>)
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003d84 <HAL_TIM_PeriodElapsedCallback+0x30b4>
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	d502      	bpl.n	8003afe <HAL_TIM_PeriodElapsedCallback+0x2e2e>
 8003af8:	4ba1      	ldr	r3, [pc, #644]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x30b0>)
 8003afa:	4aa3      	ldr	r2, [pc, #652]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x30b8>)
 8003afc:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8003afe:	4ba3      	ldr	r3, [pc, #652]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x30bc>)
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b08:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003d68 <HAL_TIM_PeriodElapsedCallback+0x3098>
 8003b0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b10:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003d70 <HAL_TIM_PeriodElapsedCallback+0x30a0>
 8003b14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b1c:	ee17 3a90 	vmov	r3, s15
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	4b9b      	ldr	r3, [pc, #620]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x30c0>)
 8003b24:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 8003b26:	4b9b      	ldr	r3, [pc, #620]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x30c4>)
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b30:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8003d68 <HAL_TIM_PeriodElapsedCallback+0x3098>
 8003b34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b38:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8003d70 <HAL_TIM_PeriodElapsedCallback+0x30a0>
 8003b3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b44:	ee17 3a90 	vmov	r3, s15
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b93      	ldr	r3, [pc, #588]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x30c8>)
 8003b4c:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8003b4e:	4b93      	ldr	r3, [pc, #588]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x30cc>)
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b58:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8003d68 <HAL_TIM_PeriodElapsedCallback+0x3098>
 8003b5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b60:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8003d70 <HAL_TIM_PeriodElapsedCallback+0x30a0>
 8003b64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b6c:	ee17 3a90 	vmov	r3, s15
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	4b8b      	ldr	r3, [pc, #556]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x30d0>)
 8003b74:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 8003b76:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x30b0>)
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b80:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8003d68 <HAL_TIM_PeriodElapsedCallback+0x3098>
 8003b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b88:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8003d70 <HAL_TIM_PeriodElapsedCallback+0x30a0>
 8003b8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b94:	ee17 3a90 	vmov	r3, s15
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	4b82      	ldr	r3, [pc, #520]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x30d4>)
 8003b9c:	801a      	strh	r2, [r3, #0]
        if(PWM1 >= PWM_rsl * 0.9){
 8003b9e:	4b7c      	ldr	r3, [pc, #496]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x30c0>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003baa:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8003d78 <HAL_TIM_PeriodElapsedCallback+0x30a8>
 8003bae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	db03      	blt.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x2ef0>
          PWM1 = PWM_rsl * 0.85;
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x30c0>)
 8003bba:	f640 5248 	movw	r2, #3400	; 0xd48
 8003bbe:	801a      	strh	r2, [r3, #0]
        if(PWM2 >= PWM_rsl * 0.9){
 8003bc0:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x30c8>)
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003bcc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003d78 <HAL_TIM_PeriodElapsedCallback+0x30a8>
 8003bd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	db03      	blt.n	8003be2 <HAL_TIM_PeriodElapsedCallback+0x2f12>
          PWM2 = PWM_rsl * 0.85;
 8003bda:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x30c8>)
 8003bdc:	f640 5248 	movw	r2, #3400	; 0xd48
 8003be0:	801a      	strh	r2, [r3, #0]
        if(PWM3 >= PWM_rsl * 0.9){
 8003be2:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x30d0>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003bee:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003d78 <HAL_TIM_PeriodElapsedCallback+0x30a8>
 8003bf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	db03      	blt.n	8003c04 <HAL_TIM_PeriodElapsedCallback+0x2f34>
          PWM3 = PWM_rsl * 0.85;
 8003bfc:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x30d0>)
 8003bfe:	f640 5248 	movw	r2, #3400	; 0xd48
 8003c02:	801a      	strh	r2, [r3, #0]
        if(PWM4 >= PWM_rsl * 0.9){
 8003c04:	4b67      	ldr	r3, [pc, #412]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x30d4>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c10:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003d78 <HAL_TIM_PeriodElapsedCallback+0x30a8>
 8003c14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	db03      	blt.n	8003c26 <HAL_TIM_PeriodElapsedCallback+0x2f56>
          PWM4 = PWM_rsl * 0.85;
 8003c1e:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x30d4>)
 8003c20:	f640 5248 	movw	r2, #3400	; 0xd48
 8003c24:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8003c26:	4b5a      	ldr	r3, [pc, #360]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x30c0>)
 8003c28:	881a      	ldrh	r2, [r3, #0]
 8003c2a:	4b5f      	ldr	r3, [pc, #380]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x30d8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8003c30:	4b59      	ldr	r3, [pc, #356]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x30c8>)
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	4b5c      	ldr	r3, [pc, #368]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x30d8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x30d0>)
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8003c44:	4b57      	ldr	r3, [pc, #348]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x30d4>)
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 8003c4e:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x30e0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x30e4>)
 8003c54:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 8003c56:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x30e8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x30ec>)
 8003c5c:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 8003c5e:	4b58      	ldr	r3, [pc, #352]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x30f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30f4>)
 8003c64:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 8003c66:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x30f8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x30fc>)
 8003c6c:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x3104>)
 8003c74:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 8003c76:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3108>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a58      	ldr	r2, [pc, #352]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x310c>)
 8003c7c:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 8003c7e:	4b58      	ldr	r3, [pc, #352]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x3110>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x3114>)
 8003c84:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 8003c86:	4b58      	ldr	r3, [pc, #352]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x3118>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x311c>)
 8003c8c:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 8003c8e:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3120>)
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	4b58      	ldr	r3, [pc, #352]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x3124>)
 8003c94:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 8003c96:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3128>)
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x312c>)
 8003c9c:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 8003c9e:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x3130>)
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x3134>)
 8003ca4:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 8003ca6:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x3138>)
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x313c>)
 8003cac:	801a      	strh	r2, [r3, #0]
        Acc_x_correct_pre = Acc_x_correct;
 8003cae:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x3140>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x3144>)
 8003cb4:	6013      	str	r3, [r2, #0]
        Acc_y_correct_pre = Acc_y_correct;
 8003cb6:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x3148>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x314c>)
 8003cbc:	6013      	str	r3, [r2, #0]
        d_yawrate_pre     = d_yawrate;
 8003cbe:	4b58      	ldr	r3, [pc, #352]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x3150>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a58      	ldr	r2, [pc, #352]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x3154>)
 8003cc4:	6013      	str	r3, [r2, #0]
        yaw_rate_pre2       = yaw_rate_pre;
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_TIM_PeriodElapsedCallback+0x3158>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_TIM_PeriodElapsedCallback+0x315c>)
 8003ccc:	6013      	str	r3, [r2, #0]
        yaw_rate_pre        = yaw_rate;
 8003cce:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x3160>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a55      	ldr	r2, [pc, #340]	; (8003e28 <HAL_TIM_PeriodElapsedCallback+0x3158>)
 8003cd4:	6013      	str	r3, [r2, #0]
        yaw_rate_notch_pre2 = yaw_rate_notch_pre;
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x3164>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x3168>)
 8003cdc:	6013      	str	r3, [r2, #0]
        yaw_rate_notch_pre  = yaw_rate_notch;
 8003cde:	4b57      	ldr	r3, [pc, #348]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x316c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a54      	ldr	r2, [pc, #336]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x3164>)
 8003ce4:	6013      	str	r3, [r2, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x3170>)
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x3174>)
 8003cec:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf0:	08d9      	lsrs	r1, r3, #3
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 8347 	bne.w	8004392 <HAL_TIM_PeriodElapsedCallback+0x36c2>
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f240 52db 	movw	r2, #1499	; 0x5db
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	f300 8340 	bgt.w	8004392 <HAL_TIM_PeriodElapsedCallback+0x36c2>
          t_SRAM[i_save] = t;
 8003d12:	4b4d      	ldr	r3, [pc, #308]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x317c>)
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	494d      	ldr	r1, [pc, #308]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x3180>)
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8003d22:	4b49      	ldr	r3, [pc, #292]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>)
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	494a      	ldr	r1, [pc, #296]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x3184>)
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8003d32:	4b45      	ldr	r3, [pc, #276]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3108>)
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	4947      	ldr	r1, [pc, #284]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x3188>)
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x3110>)
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	4944      	ldr	r1, [pc, #272]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x318c>)
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x3118>)
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	4941      	ldr	r1, [pc, #260]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x3190>)
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e07f      	b.n	8003e64 <HAL_TIM_PeriodElapsedCallback+0x3194>
 8003d64:	f3af 8000 	nop.w
 8003d68:	bbf58d11 	.word	0xbbf58d11
 8003d6c:	4091db6d 	.word	0x4091db6d
 8003d70:	00000000 	.word	0x00000000
 8003d74:	409f4000 	.word	0x409f4000
 8003d78:	00000000 	.word	0x00000000
 8003d7c:	40ac2000 	.word	0x40ac2000
 8003d80:	200002d4 	.word	0x200002d4
 8003d84:	bfb33333 	.word	0xbfb33333
 8003d88:	bfb33333 	.word	0xbfb33333
 8003d8c:	200002c8 	.word	0x200002c8
 8003d90:	200002e8 	.word	0x200002e8
 8003d94:	200002cc 	.word	0x200002cc
 8003d98:	200002ea 	.word	0x200002ea
 8003d9c:	200002d0 	.word	0x200002d0
 8003da0:	200002ec 	.word	0x200002ec
 8003da4:	200002ee 	.word	0x200002ee
 8003da8:	20062c8c 	.word	0x20062c8c
 8003dac:	20062d70 	.word	0x20062d70
 8003db0:	20000238 	.word	0x20000238
 8003db4:	20000248 	.word	0x20000248
 8003db8:	2000023c 	.word	0x2000023c
 8003dbc:	2000024c 	.word	0x2000024c
 8003dc0:	20000240 	.word	0x20000240
 8003dc4:	20000250 	.word	0x20000250
 8003dc8:	20000244 	.word	0x20000244
 8003dcc:	20000254 	.word	0x20000254
 8003dd0:	20000258 	.word	0x20000258
 8003dd4:	20000268 	.word	0x20000268
 8003dd8:	2000025c 	.word	0x2000025c
 8003ddc:	2000026c 	.word	0x2000026c
 8003de0:	20000260 	.word	0x20000260
 8003de4:	20000270 	.word	0x20000270
 8003de8:	20000264 	.word	0x20000264
 8003dec:	20000274 	.word	0x20000274
 8003df0:	2000021e 	.word	0x2000021e
 8003df4:	20000226 	.word	0x20000226
 8003df8:	20000220 	.word	0x20000220
 8003dfc:	20000228 	.word	0x20000228
 8003e00:	20000222 	.word	0x20000222
 8003e04:	2000022a 	.word	0x2000022a
 8003e08:	20000224 	.word	0x20000224
 8003e0c:	2000022c 	.word	0x2000022c
 8003e10:	2000047c 	.word	0x2000047c
 8003e14:	20000488 	.word	0x20000488
 8003e18:	20000480 	.word	0x20000480
 8003e1c:	2000048c 	.word	0x2000048c
 8003e20:	20000468 	.word	0x20000468
 8003e24:	2000046c 	.word	0x2000046c
 8003e28:	20000454 	.word	0x20000454
 8003e2c:	20000458 	.word	0x20000458
 8003e30:	20000448 	.word	0x20000448
 8003e34:	20000460 	.word	0x20000460
 8003e38:	20000464 	.word	0x20000464
 8003e3c:	2000045c 	.word	0x2000045c
 8003e40:	20000218 	.word	0x20000218
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	200004cc 	.word	0x200004cc
 8003e4c:	20000214 	.word	0x20000214
 8003e50:	200004d4 	.word	0x200004d4
 8003e54:	20001c44 	.word	0x20001c44
 8003e58:	200033b4 	.word	0x200033b4
 8003e5c:	20004b24 	.word	0x20004b24
 8003e60:	20006294 	.word	0x20006294
          theta1_res_SRAM[i_save] = theta1_res;
 8003e64:	4b90      	ldr	r3, [pc, #576]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a90      	ldr	r2, [pc, #576]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x33dc>)
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4990      	ldr	r1, [pc, #576]	; (80040b0 <HAL_TIM_PeriodElapsedCallback+0x33e0>)
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 8003e74:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a8e      	ldr	r2, [pc, #568]	; (80040b4 <HAL_TIM_PeriodElapsedCallback+0x33e4>)
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	498e      	ldr	r1, [pc, #568]	; (80040b8 <HAL_TIM_PeriodElapsedCallback+0x33e8>)
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 8003e84:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8c      	ldr	r2, [pc, #560]	; (80040bc <HAL_TIM_PeriodElapsedCallback+0x33ec>)
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	498c      	ldr	r1, [pc, #560]	; (80040c0 <HAL_TIM_PeriodElapsedCallback+0x33f0>)
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 8003e94:	4b84      	ldr	r3, [pc, #528]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a8a      	ldr	r2, [pc, #552]	; (80040c4 <HAL_TIM_PeriodElapsedCallback+0x33f4>)
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	498a      	ldr	r1, [pc, #552]	; (80040c8 <HAL_TIM_PeriodElapsedCallback+0x33f8>)
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	601a      	str	r2, [r3, #0]
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 8003ea4:	4b80      	ldr	r3, [pc, #512]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a88      	ldr	r2, [pc, #544]	; (80040cc <HAL_TIM_PeriodElapsedCallback+0x33fc>)
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	4988      	ldr	r1, [pc, #544]	; (80040d0 <HAL_TIM_PeriodElapsedCallback+0x3400>)
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 8003eb4:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a86      	ldr	r2, [pc, #536]	; (80040d4 <HAL_TIM_PeriodElapsedCallback+0x3404>)
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	4986      	ldr	r1, [pc, #536]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x3408>)
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 8003ec4:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a84      	ldr	r2, [pc, #528]	; (80040dc <HAL_TIM_PeriodElapsedCallback+0x340c>)
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4984      	ldr	r1, [pc, #528]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x3410>)
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 8003ed4:	4b74      	ldr	r3, [pc, #464]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a82      	ldr	r2, [pc, #520]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x3414>)
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4982      	ldr	r1, [pc, #520]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x3418>)
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	601a      	str	r2, [r3, #0]
          ddtheta1_res_SRAM[i_save] = ddtheta1_res;
 8003ee4:	4b70      	ldr	r3, [pc, #448]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a80      	ldr	r2, [pc, #512]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0x341c>)
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	4980      	ldr	r1, [pc, #512]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x3420>)
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	601a      	str	r2, [r3, #0]
          ddtheta2_res_SRAM[i_save] = ddtheta2_res;
 8003ef4:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7e      	ldr	r2, [pc, #504]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x3424>)
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	497e      	ldr	r1, [pc, #504]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x3428>)
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	601a      	str	r2, [r3, #0]
          ddtheta3_res_SRAM[i_save] = ddtheta3_res;
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a7c      	ldr	r2, [pc, #496]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x342c>)
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	497c      	ldr	r1, [pc, #496]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x3430>)
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	601a      	str	r2, [r3, #0]
          ddtheta4_res_SRAM[i_save] = ddtheta4_res;
 8003f14:	4b64      	ldr	r3, [pc, #400]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7a      	ldr	r2, [pc, #488]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x3434>)
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	497a      	ldr	r1, [pc, #488]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x3438>)
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 8003f24:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a78      	ldr	r2, [pc, #480]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x343c>)
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	4978      	ldr	r1, [pc, #480]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x3440>)
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 8003f34:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a76      	ldr	r2, [pc, #472]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x3444>)
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	4976      	ldr	r1, [pc, #472]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x3448>)
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 8003f44:	4b58      	ldr	r3, [pc, #352]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a74      	ldr	r2, [pc, #464]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x344c>)
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	4974      	ldr	r1, [pc, #464]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 8003f54:	4b54      	ldr	r3, [pc, #336]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a72      	ldr	r2, [pc, #456]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x3454>)
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	4972      	ldr	r1, [pc, #456]	; (8004128 <HAL_TIM_PeriodElapsedCallback+0x3458>)
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x345c>)
 8003f6a:	8811      	ldrh	r1, [r2, #0]
 8003f6c:	4a70      	ldr	r2, [pc, #448]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x3460>)
 8003f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 8003f72:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6f      	ldr	r2, [pc, #444]	; (8004134 <HAL_TIM_PeriodElapsedCallback+0x3464>)
 8003f78:	8811      	ldrh	r1, [r2, #0]
 8003f7a:	4a6f      	ldr	r2, [pc, #444]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x3468>)
 8003f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 8003f80:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6d      	ldr	r2, [pc, #436]	; (800413c <HAL_TIM_PeriodElapsedCallback+0x346c>)
 8003f86:	8811      	ldrh	r1, [r2, #0]
 8003f88:	4a6d      	ldr	r2, [pc, #436]	; (8004140 <HAL_TIM_PeriodElapsedCallback+0x3470>)
 8003f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 8003f8e:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6c      	ldr	r2, [pc, #432]	; (8004144 <HAL_TIM_PeriodElapsedCallback+0x3474>)
 8003f94:	8811      	ldrh	r1, [r2, #0]
 8003f96:	4a6c      	ldr	r2, [pc, #432]	; (8004148 <HAL_TIM_PeriodElapsedCallback+0x3478>)
 8003f98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          fd1_ref_normal_SRAM[i_save] = fd1_ref_normal;
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_TIM_PeriodElapsedCallback+0x347c>)
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	496a      	ldr	r1, [pc, #424]	; (8004150 <HAL_TIM_PeriodElapsedCallback+0x3480>)
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	601a      	str	r2, [r3, #0]
          fd1_ref_SRAM[i_save] = fd1_ref;
 8003fac:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a68      	ldr	r2, [pc, #416]	; (8004154 <HAL_TIM_PeriodElapsedCallback+0x3484>)
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	4968      	ldr	r1, [pc, #416]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0x3488>)
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	601a      	str	r2, [r3, #0]
          fd2_ref_normal_SRAM[i_save] = fd2_ref_normal;
 8003fbc:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a66      	ldr	r2, [pc, #408]	; (800415c <HAL_TIM_PeriodElapsedCallback+0x348c>)
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	4966      	ldr	r1, [pc, #408]	; (8004160 <HAL_TIM_PeriodElapsedCallback+0x3490>)
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	601a      	str	r2, [r3, #0]
          fd2_ref_SRAM[i_save] = fd2_ref;
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a64      	ldr	r2, [pc, #400]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x3494>)
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	4964      	ldr	r1, [pc, #400]	; (8004168 <HAL_TIM_PeriodElapsedCallback+0x3498>)
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	601a      	str	r2, [r3, #0]
          fd3_ref_normal_SRAM[i_save] = fd3_ref_normal;
 8003fdc:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a62      	ldr	r2, [pc, #392]	; (800416c <HAL_TIM_PeriodElapsedCallback+0x349c>)
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	4962      	ldr	r1, [pc, #392]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0x34a0>)
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	601a      	str	r2, [r3, #0]
          fd3_ref_SRAM[i_save] = fd3_ref;
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a60      	ldr	r2, [pc, #384]	; (8004174 <HAL_TIM_PeriodElapsedCallback+0x34a4>)
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4960      	ldr	r1, [pc, #384]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0x34a8>)
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	601a      	str	r2, [r3, #0]
          fd4_ref_normal_SRAM[i_save] = fd4_ref_normal;
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5e      	ldr	r2, [pc, #376]	; (800417c <HAL_TIM_PeriodElapsedCallback+0x34ac>)
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	495e      	ldr	r1, [pc, #376]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0x34b0>)
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	601a      	str	r2, [r3, #0]
          fd4_ref_SRAM[i_save] = fd4_ref;
 800400c:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_TIM_PeriodElapsedCallback+0x34b4>)
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	495c      	ldr	r1, [pc, #368]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x34b8>)
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	601a      	str	r2, [r3, #0]
          Ki_df_integral1_SRAM[i_save] = Ki_df_integral1;
 800401c:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x34bc>)
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	495a      	ldr	r1, [pc, #360]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0x34c0>)
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	601a      	str	r2, [r3, #0]
          Ki_df_integral2_SRAM[i_save] = Ki_df_integral2;
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a58      	ldr	r2, [pc, #352]	; (8004194 <HAL_TIM_PeriodElapsedCallback+0x34c4>)
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	4958      	ldr	r1, [pc, #352]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0x34c8>)
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	601a      	str	r2, [r3, #0]
          Ki_df_integral3_SRAM[i_save] = Ki_df_integral3;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a56      	ldr	r2, [pc, #344]	; (800419c <HAL_TIM_PeriodElapsedCallback+0x34cc>)
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	4956      	ldr	r1, [pc, #344]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0x34d0>)
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	601a      	str	r2, [r3, #0]
          Ki_df_integral4_SRAM[i_save] = Ki_df_integral4;
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a54      	ldr	r2, [pc, #336]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x34d4>)
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	4954      	ldr	r1, [pc, #336]	; (80041a8 <HAL_TIM_PeriodElapsedCallback+0x34d8>)
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x34dc>)
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4952      	ldr	r1, [pc, #328]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x34e0>)
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a50      	ldr	r2, [pc, #320]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x34e4>)
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	4950      	ldr	r1, [pc, #320]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0x34e8>)
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a4e      	ldr	r2, [pc, #312]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x34ec>)
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	494e      	ldr	r1, [pc, #312]	; (80041c0 <HAL_TIM_PeriodElapsedCallback+0x34f0>)
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_TIM_PeriodElapsedCallback+0x34f4>)
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	494c      	ldr	r1, [pc, #304]	; (80041c8 <HAL_TIM_PeriodElapsedCallback+0x34f8>)
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 800409c:	4b02      	ldr	r3, [pc, #8]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <HAL_TIM_PeriodElapsedCallback+0x34fc>)
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	e094      	b.n	80041d0 <HAL_TIM_PeriodElapsedCallback+0x3500>
 80040a6:	bf00      	nop
 80040a8:	200004cc 	.word	0x200004cc
 80040ac:	20000238 	.word	0x20000238
 80040b0:	20007a04 	.word	0x20007a04
 80040b4:	2000023c 	.word	0x2000023c
 80040b8:	20009174 	.word	0x20009174
 80040bc:	20000240 	.word	0x20000240
 80040c0:	2000a8e4 	.word	0x2000a8e4
 80040c4:	20000244 	.word	0x20000244
 80040c8:	2000c054 	.word	0x2000c054
 80040cc:	20000298 	.word	0x20000298
 80040d0:	2000d7c4 	.word	0x2000d7c4
 80040d4:	2000029c 	.word	0x2000029c
 80040d8:	2000ef34 	.word	0x2000ef34
 80040dc:	200002a0 	.word	0x200002a0
 80040e0:	200106a4 	.word	0x200106a4
 80040e4:	200002a4 	.word	0x200002a4
 80040e8:	20011e14 	.word	0x20011e14
 80040ec:	20000278 	.word	0x20000278
 80040f0:	20013584 	.word	0x20013584
 80040f4:	2000027c 	.word	0x2000027c
 80040f8:	20014cf4 	.word	0x20014cf4
 80040fc:	20000280 	.word	0x20000280
 8004100:	20016464 	.word	0x20016464
 8004104:	20000284 	.word	0x20000284
 8004108:	20017bd4 	.word	0x20017bd4
 800410c:	200002c8 	.word	0x200002c8
 8004110:	20019344 	.word	0x20019344
 8004114:	200002cc 	.word	0x200002cc
 8004118:	2001aab4 	.word	0x2001aab4
 800411c:	200002d0 	.word	0x200002d0
 8004120:	2001c224 	.word	0x2001c224
 8004124:	200002d4 	.word	0x200002d4
 8004128:	2001d994 	.word	0x2001d994
 800412c:	200002e8 	.word	0x200002e8
 8004130:	2001f104 	.word	0x2001f104
 8004134:	200002ea 	.word	0x200002ea
 8004138:	2001fcbc 	.word	0x2001fcbc
 800413c:	200002ec 	.word	0x200002ec
 8004140:	20020874 	.word	0x20020874
 8004144:	200002ee 	.word	0x200002ee
 8004148:	2002142c 	.word	0x2002142c
 800414c:	20000338 	.word	0x20000338
 8004150:	20021fe4 	.word	0x20021fe4
 8004154:	20000328 	.word	0x20000328
 8004158:	20023754 	.word	0x20023754
 800415c:	2000033c 	.word	0x2000033c
 8004160:	20024ec4 	.word	0x20024ec4
 8004164:	2000032c 	.word	0x2000032c
 8004168:	20026634 	.word	0x20026634
 800416c:	20000340 	.word	0x20000340
 8004170:	20027da4 	.word	0x20027da4
 8004174:	20000330 	.word	0x20000330
 8004178:	20029514 	.word	0x20029514
 800417c:	20000344 	.word	0x20000344
 8004180:	2002ac84 	.word	0x2002ac84
 8004184:	20000334 	.word	0x20000334
 8004188:	2002c3f4 	.word	0x2002c3f4
 800418c:	20000348 	.word	0x20000348
 8004190:	2002db64 	.word	0x2002db64
 8004194:	2000034c 	.word	0x2000034c
 8004198:	2002f2d4 	.word	0x2002f2d4
 800419c:	20000350 	.word	0x20000350
 80041a0:	20030a44 	.word	0x20030a44
 80041a4:	20000354 	.word	0x20000354
 80041a8:	200321b4 	.word	0x200321b4
 80041ac:	20000368 	.word	0x20000368
 80041b0:	20033924 	.word	0x20033924
 80041b4:	2000036c 	.word	0x2000036c
 80041b8:	20035094 	.word	0x20035094
 80041bc:	20000370 	.word	0x20000370
 80041c0:	20036804 	.word	0x20036804
 80041c4:	20000374 	.word	0x20000374
 80041c8:	20037f74 	.word	0x20037f74
 80041cc:	20000398 	.word	0x20000398
 80041d0:	497c      	ldr	r1, [pc, #496]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x36f4>)
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 80041d8:	4b7b      	ldr	r3, [pc, #492]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a7b      	ldr	r2, [pc, #492]	; (80043cc <HAL_TIM_PeriodElapsedCallback+0x36fc>)
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	497b      	ldr	r1, [pc, #492]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x3700>)
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	601a      	str	r2, [r3, #0]
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 80041e8:	4b77      	ldr	r3, [pc, #476]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a79      	ldr	r2, [pc, #484]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x3704>)
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	4979      	ldr	r1, [pc, #484]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0x3708>)
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 80041f8:	4b73      	ldr	r3, [pc, #460]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a77      	ldr	r2, [pc, #476]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x370c>)
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	4977      	ldr	r1, [pc, #476]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x3710>)
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	601a      	str	r2, [r3, #0]
          yaw_SRAM[i_save]   = yaw;//Euler.x;
 8004208:	4b6f      	ldr	r3, [pc, #444]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a75      	ldr	r2, [pc, #468]	; (80043e4 <HAL_TIM_PeriodElapsedCallback+0x3714>)
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	4975      	ldr	r1, [pc, #468]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0x3718>)
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	601a      	str	r2, [r3, #0]
          roll_SRAM[i_save]  = roll;//Euler.y;
 8004218:	4b6b      	ldr	r3, [pc, #428]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a73      	ldr	r2, [pc, #460]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0x371c>)
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	4973      	ldr	r1, [pc, #460]	; (80043f0 <HAL_TIM_PeriodElapsedCallback+0x3720>)
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	601a      	str	r2, [r3, #0]
          pitch_SRAM[i_save] = pitch;//Euler.z;
 8004228:	4b67      	ldr	r3, [pc, #412]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a71      	ldr	r2, [pc, #452]	; (80043f4 <HAL_TIM_PeriodElapsedCallback+0x3724>)
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4971      	ldr	r1, [pc, #452]	; (80043f8 <HAL_TIM_PeriodElapsedCallback+0x3728>)
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	601a      	str	r2, [r3, #0]
          yaw_rate_SRAM[i_save]   = yaw_rate;//Gyro.z;
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6f      	ldr	r2, [pc, #444]	; (80043fc <HAL_TIM_PeriodElapsedCallback+0x372c>)
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	496f      	ldr	r1, [pc, #444]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0x3730>)
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	601a      	str	r2, [r3, #0]
          yaw_rate_notch_SRAM[i_save]  = yaw_rate_notch;
 8004248:	4b5f      	ldr	r3, [pc, #380]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a6d      	ldr	r2, [pc, #436]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x3734>)
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	496d      	ldr	r1, [pc, #436]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x3738>)
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	601a      	str	r2, [r3, #0]
          roll_rate_SRAM[i_save]  = roll_rate;//Gyro.x;
 8004258:	4b5b      	ldr	r3, [pc, #364]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6b      	ldr	r2, [pc, #428]	; (800440c <HAL_TIM_PeriodElapsedCallback+0x373c>)
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	496b      	ldr	r1, [pc, #428]	; (8004410 <HAL_TIM_PeriodElapsedCallback+0x3740>)
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	601a      	str	r2, [r3, #0]
          pitch_rate_SRAM[i_save] = pitch_rate;//Gyro.y;
 8004268:	4b57      	ldr	r3, [pc, #348]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_TIM_PeriodElapsedCallback+0x3744>)
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	4969      	ldr	r1, [pc, #420]	; (8004418 <HAL_TIM_PeriodElapsedCallback+0x3748>)
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	601a      	str	r2, [r3, #0]
          Acc_x_SRAM[i_save] = Acc_x;//Acc.x;
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a67      	ldr	r2, [pc, #412]	; (800441c <HAL_TIM_PeriodElapsedCallback+0x374c>)
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	4967      	ldr	r1, [pc, #412]	; (8004420 <HAL_TIM_PeriodElapsedCallback+0x3750>)
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	601a      	str	r2, [r3, #0]
          Acc_y_SRAM[i_save] = Acc_y;//Acc.y;
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a65      	ldr	r2, [pc, #404]	; (8004424 <HAL_TIM_PeriodElapsedCallback+0x3754>)
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	4965      	ldr	r1, [pc, #404]	; (8004428 <HAL_TIM_PeriodElapsedCallback+0x3758>)
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	601a      	str	r2, [r3, #0]
          Acc_z_SRAM[i_save] = Acc_z;//Acc.z;
 8004298:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a63      	ldr	r2, [pc, #396]	; (800442c <HAL_TIM_PeriodElapsedCallback+0x375c>)
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	4963      	ldr	r1, [pc, #396]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x3760>)
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	601a      	str	r2, [r3, #0]
          Acc_x_correct_SRAM[i_save] = Acc_x_correct;
 80042a8:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a61      	ldr	r2, [pc, #388]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x3764>)
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4961      	ldr	r1, [pc, #388]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x3768>)
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	601a      	str	r2, [r3, #0]
          Acc_y_correct_SRAM[i_save] = Acc_y_correct;
 80042b8:	4b43      	ldr	r3, [pc, #268]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5f      	ldr	r2, [pc, #380]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x376c>)
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	495f      	ldr	r1, [pc, #380]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x3770>)
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	601a      	str	r2, [r3, #0]
          Acc_z_correct_SRAM[i_save] = Acc_z_correct;
 80042c8:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5d      	ldr	r2, [pc, #372]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x3774>)
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	495d      	ldr	r1, [pc, #372]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x3778>)
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	601a      	str	r2, [r3, #0]
          Acc_x_LPF_SRAM[i_save] = Acc_x_LPF;
 80042d8:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a5b      	ldr	r2, [pc, #364]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x377c>)
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	495b      	ldr	r1, [pc, #364]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x3780>)
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	601a      	str	r2, [r3, #0]
          Acc_y_LPF_SRAM[i_save] = Acc_y_LPF;
 80042e8:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a59      	ldr	r2, [pc, #356]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x3784>)
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	4959      	ldr	r1, [pc, #356]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x3788>)
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	601a      	str	r2, [r3, #0]
          d_yawrate_SRAM[i_save] = d_yawrate;
 80042f8:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a57      	ldr	r2, [pc, #348]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x378c>)
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	4957      	ldr	r1, [pc, #348]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x3790>)
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	601a      	str	r2, [r3, #0]
          Fx_dis_SRAM[i_save] = Fx_dis;
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a55      	ldr	r2, [pc, #340]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x3794>)
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	4955      	ldr	r1, [pc, #340]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x3798>)
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	601a      	str	r2, [r3, #0]
          Fy_dis_SRAM[i_save] = Fy_dis;
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a53      	ldr	r2, [pc, #332]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x379c>)
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	4953      	ldr	r1, [pc, #332]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x37a0>)
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	601a      	str	r2, [r3, #0]
          Mz_dis_SRAM[i_save] = Mz_dis;
 8004328:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a51      	ldr	r2, [pc, #324]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x37a4>)
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	4951      	ldr	r1, [pc, #324]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x37a8>)
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	601a      	str	r2, [r3, #0]
          M_YMO_SRAM[i_save] = M_YMO;
 8004338:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4f      	ldr	r2, [pc, #316]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x37ac>)
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	494f      	ldr	r1, [pc, #316]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x37b0>)
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	601a      	str	r2, [r3, #0]
          alpha_1_SRAM[i_save] = alpha_1;
 8004348:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a4d      	ldr	r2, [pc, #308]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x37b4>)
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	494d      	ldr	r1, [pc, #308]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x37b8>)
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	601a      	str	r2, [r3, #0]
          alpha_2_SRAM[i_save] = alpha_2;
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a4b      	ldr	r2, [pc, #300]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x37bc>)
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	494b      	ldr	r1, [pc, #300]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x37c0>)
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	601a      	str	r2, [r3, #0]
          alpha_3_SRAM[i_save] = alpha_3;
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a49      	ldr	r2, [pc, #292]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x37c4>)
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	4949      	ldr	r1, [pc, #292]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x37c8>)
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	601a      	str	r2, [r3, #0]
          alpha_4_SRAM[i_save] = alpha_4;
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a47      	ldr	r2, [pc, #284]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x37cc>)
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4947      	ldr	r1, [pc, #284]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x37d0>)
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	601a      	str	r2, [r3, #0]
          i_save++;
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 8004390:	6013      	str	r3, [r2, #0]
        loop = loop + 1;
 8004392:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x37d4>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x37d4>)
 800439c:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 800439e:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x37d8>)
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80044ac <HAL_TIM_PeriodElapsedCallback+0x37dc>
 80043a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x37d8>)
 80043ae:	edc3 7a00 	vstr	s15, [r3]
        break;
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_PeriodElapsedCallback+0x36e6>
        break;
 80043b4:	bf00      	nop
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	ecbd 8b04 	vpop	{d8-d9}
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200396e4 	.word	0x200396e4
 80043c8:	200004cc 	.word	0x200004cc
 80043cc:	2000039c 	.word	0x2000039c
 80043d0:	2003ae54 	.word	0x2003ae54
 80043d4:	200003a0 	.word	0x200003a0
 80043d8:	2003c5c4 	.word	0x2003c5c4
 80043dc:	200003a4 	.word	0x200003a4
 80043e0:	2003dd34 	.word	0x2003dd34
 80043e4:	20000434 	.word	0x20000434
 80043e8:	2003f4a4 	.word	0x2003f4a4
 80043ec:	20000438 	.word	0x20000438
 80043f0:	20040c14 	.word	0x20040c14
 80043f4:	2000043c 	.word	0x2000043c
 80043f8:	20042384 	.word	0x20042384
 80043fc:	20000448 	.word	0x20000448
 8004400:	20043af4 	.word	0x20043af4
 8004404:	2000045c 	.word	0x2000045c
 8004408:	20048144 	.word	0x20048144
 800440c:	2000044c 	.word	0x2000044c
 8004410:	20045264 	.word	0x20045264
 8004414:	20000450 	.word	0x20000450
 8004418:	200469d4 	.word	0x200469d4
 800441c:	20000470 	.word	0x20000470
 8004420:	200498b4 	.word	0x200498b4
 8004424:	20000474 	.word	0x20000474
 8004428:	2004b024 	.word	0x2004b024
 800442c:	20000478 	.word	0x20000478
 8004430:	2004c794 	.word	0x2004c794
 8004434:	2000047c 	.word	0x2000047c
 8004438:	2004df04 	.word	0x2004df04
 800443c:	20000480 	.word	0x20000480
 8004440:	2004f674 	.word	0x2004f674
 8004444:	20000484 	.word	0x20000484
 8004448:	20050de4 	.word	0x20050de4
 800444c:	20000490 	.word	0x20000490
 8004450:	20052554 	.word	0x20052554
 8004454:	20000494 	.word	0x20000494
 8004458:	20053cc4 	.word	0x20053cc4
 800445c:	20000468 	.word	0x20000468
 8004460:	20055434 	.word	0x20055434
 8004464:	200004a8 	.word	0x200004a8
 8004468:	20056ba4 	.word	0x20056ba4
 800446c:	200004ac 	.word	0x200004ac
 8004470:	20058314 	.word	0x20058314
 8004474:	200004b4 	.word	0x200004b4
 8004478:	20059a84 	.word	0x20059a84
 800447c:	200004c4 	.word	0x200004c4
 8004480:	2005b1f4 	.word	0x2005b1f4
 8004484:	20000404 	.word	0x20000404
 8004488:	2005c964 	.word	0x2005c964
 800448c:	20000408 	.word	0x20000408
 8004490:	2005e0d4 	.word	0x2005e0d4
 8004494:	2000040c 	.word	0x2000040c
 8004498:	2005f844 	.word	0x2005f844
 800449c:	20000410 	.word	0x20000410
 80044a0:	20060fb4 	.word	0x20060fb4
 80044a4:	20000218 	.word	0x20000218
 80044a8:	20000214 	.word	0x20000214
 80044ac:	3a83126f 	.word	0x3a83126f

080044b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	f040 8537 	bne.w	8004f32 <HAL_GPIO_EXTI_Callback+0xa82>
		// if(mode == 0){
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }
    if( t == 0.0 || t > t_experiment ){// 14.999
 80044c4:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_GPIO_EXTI_Callback+0x19c>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	d009      	beq.n	80044e8 <HAL_GPIO_EXTI_Callback+0x38>
 80044d4:	4b5d      	ldr	r3, [pc, #372]	; (800464c <HAL_GPIO_EXTI_Callback+0x19c>)
 80044d6:	edd3 7a00 	vldr	s15, [r3]
 80044da:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80044de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e6:	dd05      	ble.n	80044f4 <HAL_GPIO_EXTI_Callback+0x44>
		  mode++;
 80044e8:	4b59      	ldr	r3, [pc, #356]	; (8004650 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	4b57      	ldr	r3, [pc, #348]	; (8004650 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80044f2:	701a      	strb	r2, [r3, #0]
    }
		// printf("%d, ", mode);
		// printf("\r\n");

    divide = mode % 3;
 80044f4:	4b56      	ldr	r3, [pc, #344]	; (8004650 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	4b56      	ldr	r3, [pc, #344]	; (8004654 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80044fa:	fba3 1302 	umull	r1, r3, r3, r2
 80044fe:	0859      	lsrs	r1, r3, #1
 8004500:	460b      	mov	r3, r1
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	440b      	add	r3, r1
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b53      	ldr	r3, [pc, #332]	; (8004658 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800450c:	701a      	strb	r2, [r3, #0]

    switch(divide){
 800450e:	4b52      	ldr	r3, [pc, #328]	; (8004658 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d00f      	beq.n	8004536 <HAL_GPIO_EXTI_Callback+0x86>
 8004516:	2b02      	cmp	r3, #2
 8004518:	d018      	beq.n	800454c <HAL_GPIO_EXTI_Callback+0x9c>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d127      	bne.n	800456e <HAL_GPIO_EXTI_Callback+0xbe>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800451e:	2200      	movs	r2, #0
 8004520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004524:	484d      	ldr	r0, [pc, #308]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004526:	f002 f9d5 	bl	80068d4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 800452a:	2201      	movs	r2, #1
 800452c:	2101      	movs	r1, #1
 800452e:	484b      	ldr	r0, [pc, #300]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004530:	f002 f9d0 	bl	80068d4 <HAL_GPIO_WritePin>
        break;
 8004534:	e01b      	b.n	800456e <HAL_GPIO_EXTI_Callback+0xbe>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8004536:	2200      	movs	r2, #0
 8004538:	2101      	movs	r1, #1
 800453a:	4848      	ldr	r0, [pc, #288]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800453c:	f002 f9ca 	bl	80068d4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 8004540:	2201      	movs	r2, #1
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	4845      	ldr	r0, [pc, #276]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004546:	f002 f9c5 	bl	80068d4 <HAL_GPIO_WritePin>
        break;
 800454a:	e010      	b.n	800456e <HAL_GPIO_EXTI_Callback+0xbe>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 800454c:	2200      	movs	r2, #0
 800454e:	2101      	movs	r1, #1
 8004550:	4842      	ldr	r0, [pc, #264]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004552:	f002 f9bf 	bl	80068d4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 8004556:	2200      	movs	r2, #0
 8004558:	2180      	movs	r1, #128	; 0x80
 800455a:	4840      	ldr	r0, [pc, #256]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 800455c:	f002 f9ba 	bl	80068d4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 8004560:	2201      	movs	r2, #1
 8004562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004566:	483d      	ldr	r0, [pc, #244]	; (800465c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004568:	f002 f9b4 	bl	80068d4 <HAL_GPIO_WritePin>
        break;
 800456c:	bf00      	nop
    }

    switch(mode){
 800456e:	4b38      	ldr	r3, [pc, #224]	; (8004650 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d004      	beq.n	8004580 <HAL_GPIO_EXTI_Callback+0xd0>
 8004576:	2b02      	cmp	r3, #2
 8004578:	d03f      	beq.n	80045fa <HAL_GPIO_EXTI_Callback+0x14a>
 800457a:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 800457c:	f000 bcd9 	b.w	8004f32 <HAL_GPIO_EXTI_Callback+0xa82>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        if( isFirst == 0 ){
 8004580:	4b37      	ldr	r3, [pc, #220]	; (8004660 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 84d3 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0xa80>
          tau_dfob1 = 0.0;
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
          tau_dfob2 = 0.0;
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
          tau_dfob3 = 0.0;
 800459a:	4b34      	ldr	r3, [pc, #208]	; (800466c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
          tau_dfob4 = 0.0;
 80045a2:	4b33      	ldr	r3, [pc, #204]	; (8004670 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

          tau_dfob1_pre = 0.0;
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
          
          integral_tau_dfob1 = 0.0;
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
          integral_tau_dfob2 = 0.0;
 80045d2:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
          integral_tau_dfob3 = 0.0;
 80045da:	4b29      	ldr	r3, [pc, #164]	; (8004680 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
          integral_tau_dfob4 = 0.0;
 80045e2:	4b28      	ldr	r3, [pc, #160]	; (8004684 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

          isFirst++;
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80045f4:	701a      	strb	r2, [r3, #0]
        }


        break;
 80045f6:	f000 bc9b 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0xa80>
        // }
        // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
        // fprintf(outputfile, "abc");
        // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 80045fa:	4b23      	ldr	r3, [pc, #140]	; (8004688 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80045fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004600:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_GPIO_EXTI_Callback+0x1dc>)
 8004604:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004608:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800460c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004610:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8004614:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004618:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_GPIO_EXTI_Callback+0x1dc>)
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 800462e:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f000 bc6a 	b.w	8004f20 <HAL_GPIO_EXTI_Callback+0xa70>
 800464c:	20000214 	.word	0x20000214
 8004650:	2000021a 	.word	0x2000021a
 8004654:	aaaaaaab 	.word	0xaaaaaaab
 8004658:	2000021b 	.word	0x2000021b
 800465c:	40020400 	.word	0x40020400
 8004660:	2000021c 	.word	0x2000021c
 8004664:	20000398 	.word	0x20000398
 8004668:	2000039c 	.word	0x2000039c
 800466c:	200003a0 	.word	0x200003a0
 8004670:	200003a4 	.word	0x200003a4
 8004674:	200003a8 	.word	0x200003a8
 8004678:	200003b8 	.word	0x200003b8
 800467c:	200003bc 	.word	0x200003bc
 8004680:	200003c0 	.word	0x200003c0
 8004684:	200003c4 	.word	0x200003c4
 8004688:	200002e8 	.word	0x200002e8
 800468c:	200002ea 	.word	0x200002ea
 8004690:	200002ec 	.word	0x200002ec
 8004694:	200002ee 	.word	0x200002ee
 8004698:	20062c8c 	.word	0x20062c8c
 800469c:	20062d70 	.word	0x20062d70
 80046a0:	200004d0 	.word	0x200004d0
          printf("%d, ", i_output);
 80046a4:	4bc2      	ldr	r3, [pc, #776]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	48c2      	ldr	r0, [pc, #776]	; (80049b4 <HAL_GPIO_EXTI_Callback+0x504>)
 80046ac:	f006 fdf4 	bl	800b298 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 80046b0:	4bbf      	ldr	r3, [pc, #764]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4ac0      	ldr	r2, [pc, #768]	; (80049b8 <HAL_GPIO_EXTI_Callback+0x508>)
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046c2:	ec53 2b17 	vmov	r2, r3, d7
 80046c6:	48bd      	ldr	r0, [pc, #756]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80046c8:	f006 fde6 	bl	800b298 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 80046cc:	4bb8      	ldr	r3, [pc, #736]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4abb      	ldr	r2, [pc, #748]	; (80049c0 <HAL_GPIO_EXTI_Callback+0x510>)
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046de:	ec53 2b17 	vmov	r2, r3, d7
 80046e2:	48b6      	ldr	r0, [pc, #728]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80046e4:	f006 fdd8 	bl	800b298 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 80046e8:	4bb1      	ldr	r3, [pc, #708]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4ab5      	ldr	r2, [pc, #724]	; (80049c4 <HAL_GPIO_EXTI_Callback+0x514>)
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	edd3 7a00 	vldr	s15, [r3]
 80046f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046fa:	ec53 2b17 	vmov	r2, r3, d7
 80046fe:	48af      	ldr	r0, [pc, #700]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004700:	f006 fdca 	bl	800b298 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 8004704:	4baa      	ldr	r3, [pc, #680]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4aaf      	ldr	r2, [pc, #700]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x518>)
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	edd3 7a00 	vldr	s15, [r3]
 8004712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004716:	ec53 2b17 	vmov	r2, r3, d7
 800471a:	48a8      	ldr	r0, [pc, #672]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 800471c:	f006 fdbc 	bl	800b298 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 8004720:	4ba3      	ldr	r3, [pc, #652]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4aa9      	ldr	r2, [pc, #676]	; (80049cc <HAL_GPIO_EXTI_Callback+0x51c>)
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004732:	ec53 2b17 	vmov	r2, r3, d7
 8004736:	48a1      	ldr	r0, [pc, #644]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004738:	f006 fdae 	bl	800b298 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 800473c:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4aa3      	ldr	r2, [pc, #652]	; (80049d0 <HAL_GPIO_EXTI_Callback+0x520>)
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800474e:	ec53 2b17 	vmov	r2, r3, d7
 8004752:	489a      	ldr	r0, [pc, #616]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004754:	f006 fda0 	bl	800b298 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 8004758:	4b95      	ldr	r3, [pc, #596]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a9d      	ldr	r2, [pc, #628]	; (80049d4 <HAL_GPIO_EXTI_Callback+0x524>)
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	edd3 7a00 	vldr	s15, [r3]
 8004766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800476a:	ec53 2b17 	vmov	r2, r3, d7
 800476e:	4893      	ldr	r0, [pc, #588]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004770:	f006 fd92 	bl	800b298 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 8004774:	4b8e      	ldr	r3, [pc, #568]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a97      	ldr	r2, [pc, #604]	; (80049d8 <HAL_GPIO_EXTI_Callback+0x528>)
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004786:	ec53 2b17 	vmov	r2, r3, d7
 800478a:	488c      	ldr	r0, [pc, #560]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 800478c:	f006 fd84 	bl	800b298 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 8004790:	4b87      	ldr	r3, [pc, #540]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a91      	ldr	r2, [pc, #580]	; (80049dc <HAL_GPIO_EXTI_Callback+0x52c>)
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	edd3 7a00 	vldr	s15, [r3]
 800479e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047a2:	ec53 2b17 	vmov	r2, r3, d7
 80047a6:	4885      	ldr	r0, [pc, #532]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80047a8:	f006 fd76 	bl	800b298 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 80047ac:	4b80      	ldr	r3, [pc, #512]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a8b      	ldr	r2, [pc, #556]	; (80049e0 <HAL_GPIO_EXTI_Callback+0x530>)
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047be:	ec53 2b17 	vmov	r2, r3, d7
 80047c2:	487e      	ldr	r0, [pc, #504]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80047c4:	f006 fd68 	bl	800b298 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 80047c8:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a85      	ldr	r2, [pc, #532]	; (80049e4 <HAL_GPIO_EXTI_Callback+0x534>)
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047da:	ec53 2b17 	vmov	r2, r3, d7
 80047de:	4877      	ldr	r0, [pc, #476]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80047e0:	f006 fd5a 	bl	800b298 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7f      	ldr	r2, [pc, #508]	; (80049e8 <HAL_GPIO_EXTI_Callback+0x538>)
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	edd3 7a00 	vldr	s15, [r3]
 80047f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047f6:	ec53 2b17 	vmov	r2, r3, d7
 80047fa:	4870      	ldr	r0, [pc, #448]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80047fc:	f006 fd4c 	bl	800b298 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 8004800:	4b6b      	ldr	r3, [pc, #428]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a79      	ldr	r2, [pc, #484]	; (80049ec <HAL_GPIO_EXTI_Callback+0x53c>)
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	edd3 7a00 	vldr	s15, [r3]
 800480e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004812:	ec53 2b17 	vmov	r2, r3, d7
 8004816:	4869      	ldr	r0, [pc, #420]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004818:	f006 fd3e 	bl	800b298 <iprintf>

          printf("%f, ", ddtheta1_res_SRAM[i_output]);
 800481c:	4b64      	ldr	r3, [pc, #400]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a73      	ldr	r2, [pc, #460]	; (80049f0 <HAL_GPIO_EXTI_Callback+0x540>)
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	edd3 7a00 	vldr	s15, [r3]
 800482a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800482e:	ec53 2b17 	vmov	r2, r3, d7
 8004832:	4862      	ldr	r0, [pc, #392]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004834:	f006 fd30 	bl	800b298 <iprintf>
          printf("%f, ", ddtheta2_res_SRAM[i_output]);
 8004838:	4b5d      	ldr	r3, [pc, #372]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6d      	ldr	r2, [pc, #436]	; (80049f4 <HAL_GPIO_EXTI_Callback+0x544>)
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	edd3 7a00 	vldr	s15, [r3]
 8004846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800484a:	ec53 2b17 	vmov	r2, r3, d7
 800484e:	485b      	ldr	r0, [pc, #364]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004850:	f006 fd22 	bl	800b298 <iprintf>
          printf("%f, ", ddtheta3_res_SRAM[i_output]);
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a67      	ldr	r2, [pc, #412]	; (80049f8 <HAL_GPIO_EXTI_Callback+0x548>)
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	edd3 7a00 	vldr	s15, [r3]
 8004862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004866:	ec53 2b17 	vmov	r2, r3, d7
 800486a:	4854      	ldr	r0, [pc, #336]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 800486c:	f006 fd14 	bl	800b298 <iprintf>
          printf("%f, ", ddtheta4_res_SRAM[i_output]);
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a61      	ldr	r2, [pc, #388]	; (80049fc <HAL_GPIO_EXTI_Callback+0x54c>)
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	edd3 7a00 	vldr	s15, [r3]
 800487e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004882:	ec53 2b17 	vmov	r2, r3, d7
 8004886:	484d      	ldr	r0, [pc, #308]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004888:	f006 fd06 	bl	800b298 <iprintf>
          // printf("%f, ", i1_ref_SRAM[i_output]);
          // printf("%f, ", i2_ref_SRAM[i_output]);
          // printf("%f, ", i3_ref_SRAM[i_output]);
          // printf("%f, ", i4_ref_SRAM[i_output]);

          printf("%f, ", ia1_ref_SRAM[i_output]);
 800488c:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5b      	ldr	r2, [pc, #364]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x550>)
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	edd3 7a00 	vldr	s15, [r3]
 800489a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800489e:	ec53 2b17 	vmov	r2, r3, d7
 80048a2:	4846      	ldr	r0, [pc, #280]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80048a4:	f006 fcf8 	bl	800b298 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 80048a8:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a55      	ldr	r2, [pc, #340]	; (8004a04 <HAL_GPIO_EXTI_Callback+0x554>)
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048ba:	ec53 2b17 	vmov	r2, r3, d7
 80048be:	483f      	ldr	r0, [pc, #252]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80048c0:	f006 fcea 	bl	800b298 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 80048c4:	4b3a      	ldr	r3, [pc, #232]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4f      	ldr	r2, [pc, #316]	; (8004a08 <HAL_GPIO_EXTI_Callback+0x558>)
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	edd3 7a00 	vldr	s15, [r3]
 80048d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048d6:	ec53 2b17 	vmov	r2, r3, d7
 80048da:	4838      	ldr	r0, [pc, #224]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80048dc:	f006 fcdc 	bl	800b298 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 80048e0:	4b33      	ldr	r3, [pc, #204]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <HAL_GPIO_EXTI_Callback+0x55c>)
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	edd3 7a00 	vldr	s15, [r3]
 80048ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048f2:	ec53 2b17 	vmov	r2, r3, d7
 80048f6:	4831      	ldr	r0, [pc, #196]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 80048f8:	f006 fcce 	bl	800b298 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 80048fc:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a43      	ldr	r2, [pc, #268]	; (8004a10 <HAL_GPIO_EXTI_Callback+0x560>)
 8004902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004906:	4619      	mov	r1, r3
 8004908:	482a      	ldr	r0, [pc, #168]	; (80049b4 <HAL_GPIO_EXTI_Callback+0x504>)
 800490a:	f006 fcc5 	bl	800b298 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 800490e:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <HAL_GPIO_EXTI_Callback+0x564>)
 8004914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004918:	4619      	mov	r1, r3
 800491a:	4826      	ldr	r0, [pc, #152]	; (80049b4 <HAL_GPIO_EXTI_Callback+0x504>)
 800491c:	f006 fcbc 	bl	800b298 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 8004920:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <HAL_GPIO_EXTI_Callback+0x568>)
 8004926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492a:	4619      	mov	r1, r3
 800492c:	4821      	ldr	r0, [pc, #132]	; (80049b4 <HAL_GPIO_EXTI_Callback+0x504>)
 800492e:	f006 fcb3 	bl	800b298 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <HAL_GPIO_EXTI_Callback+0x56c>)
 8004938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800493c:	4619      	mov	r1, r3
 800493e:	481d      	ldr	r0, [pc, #116]	; (80049b4 <HAL_GPIO_EXTI_Callback+0x504>)
 8004940:	f006 fcaa 	bl	800b298 <iprintf>

          printf("%f, ", fd1_ref_normal_SRAM[i_output]);
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a35      	ldr	r2, [pc, #212]	; (8004a20 <HAL_GPIO_EXTI_Callback+0x570>)
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004956:	ec53 2b17 	vmov	r2, r3, d7
 800495a:	4818      	ldr	r0, [pc, #96]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 800495c:	f006 fc9c 	bl	800b298 <iprintf>
          printf("%f, ", fd1_ref_SRAM[i_output]);
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2f      	ldr	r2, [pc, #188]	; (8004a24 <HAL_GPIO_EXTI_Callback+0x574>)
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	edd3 7a00 	vldr	s15, [r3]
 800496e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004972:	ec53 2b17 	vmov	r2, r3, d7
 8004976:	4811      	ldr	r0, [pc, #68]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004978:	f006 fc8e 	bl	800b298 <iprintf>
          
          printf("%f, ", fd2_ref_normal_SRAM[i_output]);
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <HAL_GPIO_EXTI_Callback+0x578>)
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800498e:	ec53 2b17 	vmov	r2, r3, d7
 8004992:	480a      	ldr	r0, [pc, #40]	; (80049bc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004994:	f006 fc80 	bl	800b298 <iprintf>
          printf("%f, ", fd2_ref_SRAM[i_output]);
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x500>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x57c>)
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049aa:	ec53 2b17 	vmov	r2, r3, d7
 80049ae:	e03f      	b.n	8004a30 <HAL_GPIO_EXTI_Callback+0x580>
 80049b0:	200004d0 	.word	0x200004d0
 80049b4:	0800e1bc 	.word	0x0800e1bc
 80049b8:	200004d4 	.word	0x200004d4
 80049bc:	0800e1c4 	.word	0x0800e1c4
 80049c0:	20001c44 	.word	0x20001c44
 80049c4:	200033b4 	.word	0x200033b4
 80049c8:	20004b24 	.word	0x20004b24
 80049cc:	20006294 	.word	0x20006294
 80049d0:	20007a04 	.word	0x20007a04
 80049d4:	20009174 	.word	0x20009174
 80049d8:	2000a8e4 	.word	0x2000a8e4
 80049dc:	2000c054 	.word	0x2000c054
 80049e0:	2000d7c4 	.word	0x2000d7c4
 80049e4:	2000ef34 	.word	0x2000ef34
 80049e8:	200106a4 	.word	0x200106a4
 80049ec:	20011e14 	.word	0x20011e14
 80049f0:	20013584 	.word	0x20013584
 80049f4:	20014cf4 	.word	0x20014cf4
 80049f8:	20016464 	.word	0x20016464
 80049fc:	20017bd4 	.word	0x20017bd4
 8004a00:	20019344 	.word	0x20019344
 8004a04:	2001aab4 	.word	0x2001aab4
 8004a08:	2001c224 	.word	0x2001c224
 8004a0c:	2001d994 	.word	0x2001d994
 8004a10:	2001f104 	.word	0x2001f104
 8004a14:	2001fcbc 	.word	0x2001fcbc
 8004a18:	20020874 	.word	0x20020874
 8004a1c:	2002142c 	.word	0x2002142c
 8004a20:	20021fe4 	.word	0x20021fe4
 8004a24:	20023754 	.word	0x20023754
 8004a28:	20024ec4 	.word	0x20024ec4
 8004a2c:	20026634 	.word	0x20026634
 8004a30:	48c5      	ldr	r0, [pc, #788]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004a32:	f006 fc31 	bl	800b298 <iprintf>

          printf("%f, ", fd3_ref_normal_SRAM[i_output]);
 8004a36:	4bc5      	ldr	r3, [pc, #788]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4ac5      	ldr	r2, [pc, #788]	; (8004d50 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	edd3 7a00 	vldr	s15, [r3]
 8004a44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a48:	ec53 2b17 	vmov	r2, r3, d7
 8004a4c:	48be      	ldr	r0, [pc, #760]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004a4e:	f006 fc23 	bl	800b298 <iprintf>
          printf("%f, ", fd3_ref_SRAM[i_output]);
 8004a52:	4bbe      	ldr	r3, [pc, #760]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4abf      	ldr	r2, [pc, #764]	; (8004d54 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	edd3 7a00 	vldr	s15, [r3]
 8004a60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a64:	ec53 2b17 	vmov	r2, r3, d7
 8004a68:	48b7      	ldr	r0, [pc, #732]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004a6a:	f006 fc15 	bl	800b298 <iprintf>

          printf("%f, ", fd4_ref_normal_SRAM[i_output]);
 8004a6e:	4bb7      	ldr	r3, [pc, #732]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4ab9      	ldr	r2, [pc, #740]	; (8004d58 <HAL_GPIO_EXTI_Callback+0x8a8>)
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	edd3 7a00 	vldr	s15, [r3]
 8004a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a80:	ec53 2b17 	vmov	r2, r3, d7
 8004a84:	48b0      	ldr	r0, [pc, #704]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004a86:	f006 fc07 	bl	800b298 <iprintf>
          printf("%f, ", fd4_ref_SRAM[i_output]);
 8004a8a:	4bb0      	ldr	r3, [pc, #704]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4ab3      	ldr	r2, [pc, #716]	; (8004d5c <HAL_GPIO_EXTI_Callback+0x8ac>)
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	edd3 7a00 	vldr	s15, [r3]
 8004a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a9c:	ec53 2b17 	vmov	r2, r3, d7
 8004aa0:	48a9      	ldr	r0, [pc, #676]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004aa2:	f006 fbf9 	bl	800b298 <iprintf>
          
          printf("%f, ", Ki_df_integral1_SRAM[i_output]);
 8004aa6:	4ba9      	ldr	r3, [pc, #676]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4aad      	ldr	r2, [pc, #692]	; (8004d60 <HAL_GPIO_EXTI_Callback+0x8b0>)
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	edd3 7a00 	vldr	s15, [r3]
 8004ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ab8:	ec53 2b17 	vmov	r2, r3, d7
 8004abc:	48a2      	ldr	r0, [pc, #648]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004abe:	f006 fbeb 	bl	800b298 <iprintf>
          printf("%f, ", Ki_df_integral2_SRAM[i_output]);
 8004ac2:	4ba2      	ldr	r3, [pc, #648]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4aa7      	ldr	r2, [pc, #668]	; (8004d64 <HAL_GPIO_EXTI_Callback+0x8b4>)
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	edd3 7a00 	vldr	s15, [r3]
 8004ad0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ad4:	ec53 2b17 	vmov	r2, r3, d7
 8004ad8:	489b      	ldr	r0, [pc, #620]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004ada:	f006 fbdd 	bl	800b298 <iprintf>
          printf("%f, ", Ki_df_integral3_SRAM[i_output]);
 8004ade:	4b9b      	ldr	r3, [pc, #620]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4aa1      	ldr	r2, [pc, #644]	; (8004d68 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	edd3 7a00 	vldr	s15, [r3]
 8004aec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004af0:	ec53 2b17 	vmov	r2, r3, d7
 8004af4:	4894      	ldr	r0, [pc, #592]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004af6:	f006 fbcf 	bl	800b298 <iprintf>
          printf("%f, ", Ki_df_integral4_SRAM[i_output]);
 8004afa:	4b94      	ldr	r3, [pc, #592]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a9b      	ldr	r2, [pc, #620]	; (8004d6c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	edd3 7a00 	vldr	s15, [r3]
 8004b08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b0c:	ec53 2b17 	vmov	r2, r3, d7
 8004b10:	488d      	ldr	r0, [pc, #564]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004b12:	f006 fbc1 	bl	800b298 <iprintf>
          
          printf("%f, ", tau_dob1_SRAM[i_output]);
 8004b16:	4b8d      	ldr	r3, [pc, #564]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a95      	ldr	r2, [pc, #596]	; (8004d70 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	edd3 7a00 	vldr	s15, [r3]
 8004b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b28:	ec53 2b17 	vmov	r2, r3, d7
 8004b2c:	4886      	ldr	r0, [pc, #536]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004b2e:	f006 fbb3 	bl	800b298 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 8004b32:	4b86      	ldr	r3, [pc, #536]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a8f      	ldr	r2, [pc, #572]	; (8004d74 <HAL_GPIO_EXTI_Callback+0x8c4>)
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	edd3 7a00 	vldr	s15, [r3]
 8004b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b44:	ec53 2b17 	vmov	r2, r3, d7
 8004b48:	487f      	ldr	r0, [pc, #508]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004b4a:	f006 fba5 	bl	800b298 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 8004b4e:	4b7f      	ldr	r3, [pc, #508]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a89      	ldr	r2, [pc, #548]	; (8004d78 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	edd3 7a00 	vldr	s15, [r3]
 8004b5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b60:	ec53 2b17 	vmov	r2, r3, d7
 8004b64:	4878      	ldr	r0, [pc, #480]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004b66:	f006 fb97 	bl	800b298 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 8004b6a:	4b78      	ldr	r3, [pc, #480]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a83      	ldr	r2, [pc, #524]	; (8004d7c <HAL_GPIO_EXTI_Callback+0x8cc>)
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	edd3 7a00 	vldr	s15, [r3]
 8004b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b7c:	ec53 2b17 	vmov	r2, r3, d7
 8004b80:	4871      	ldr	r0, [pc, #452]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004b82:	f006 fb89 	bl	800b298 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 8004b86:	4b71      	ldr	r3, [pc, #452]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7d      	ldr	r2, [pc, #500]	; (8004d80 <HAL_GPIO_EXTI_Callback+0x8d0>)
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b98:	ec53 2b17 	vmov	r2, r3, d7
 8004b9c:	486a      	ldr	r0, [pc, #424]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004b9e:	f006 fb7b 	bl	800b298 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a77      	ldr	r2, [pc, #476]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x8d4>)
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bb4:	ec53 2b17 	vmov	r2, r3, d7
 8004bb8:	4863      	ldr	r0, [pc, #396]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004bba:	f006 fb6d 	bl	800b298 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a71      	ldr	r2, [pc, #452]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	edd3 7a00 	vldr	s15, [r3]
 8004bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bd0:	ec53 2b17 	vmov	r2, r3, d7
 8004bd4:	485c      	ldr	r0, [pc, #368]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004bd6:	f006 fb5f 	bl	800b298 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 8004bda:	4b5c      	ldr	r3, [pc, #368]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6b      	ldr	r2, [pc, #428]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	edd3 7a00 	vldr	s15, [r3]
 8004be8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bec:	ec53 2b17 	vmov	r2, r3, d7
 8004bf0:	4855      	ldr	r0, [pc, #340]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004bf2:	f006 fb51 	bl	800b298 <iprintf>

          printf("%f, ", yaw_SRAM[i_output]);
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a65      	ldr	r2, [pc, #404]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	edd3 7a00 	vldr	s15, [r3]
 8004c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c08:	ec53 2b17 	vmov	r2, r3, d7
 8004c0c:	484e      	ldr	r0, [pc, #312]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004c0e:	f006 fb43 	bl	800b298 <iprintf>
          printf("%f, ", roll_SRAM[i_output]);
 8004c12:	4b4e      	ldr	r3, [pc, #312]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5f      	ldr	r2, [pc, #380]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	edd3 7a00 	vldr	s15, [r3]
 8004c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c24:	ec53 2b17 	vmov	r2, r3, d7
 8004c28:	4847      	ldr	r0, [pc, #284]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004c2a:	f006 fb35 	bl	800b298 <iprintf>
          printf("%f, ", pitch_SRAM[i_output]);
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a59      	ldr	r2, [pc, #356]	; (8004d98 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	edd3 7a00 	vldr	s15, [r3]
 8004c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c40:	ec53 2b17 	vmov	r2, r3, d7
 8004c44:	4840      	ldr	r0, [pc, #256]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004c46:	f006 fb27 	bl	800b298 <iprintf>

          printf("%f, ", yaw_rate_SRAM[i_output]);
 8004c4a:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a53      	ldr	r2, [pc, #332]	; (8004d9c <HAL_GPIO_EXTI_Callback+0x8ec>)
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	edd3 7a00 	vldr	s15, [r3]
 8004c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c5c:	ec53 2b17 	vmov	r2, r3, d7
 8004c60:	4839      	ldr	r0, [pc, #228]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004c62:	f006 fb19 	bl	800b298 <iprintf>
          printf("%f, ", yaw_rate_notch_SRAM[i_output]);
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a4d      	ldr	r2, [pc, #308]	; (8004da0 <HAL_GPIO_EXTI_Callback+0x8f0>)
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	edd3 7a00 	vldr	s15, [r3]
 8004c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c78:	ec53 2b17 	vmov	r2, r3, d7
 8004c7c:	4832      	ldr	r0, [pc, #200]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004c7e:	f006 fb0b 	bl	800b298 <iprintf>

          printf("%f, ", roll_rate_SRAM[i_output]);
 8004c82:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a47      	ldr	r2, [pc, #284]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	edd3 7a00 	vldr	s15, [r3]
 8004c90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c94:	ec53 2b17 	vmov	r2, r3, d7
 8004c98:	482b      	ldr	r0, [pc, #172]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004c9a:	f006 fafd 	bl	800b298 <iprintf>
          printf("%f, ", pitch_rate_SRAM[i_output]);
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a41      	ldr	r2, [pc, #260]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	edd3 7a00 	vldr	s15, [r3]
 8004cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cb0:	ec53 2b17 	vmov	r2, r3, d7
 8004cb4:	4824      	ldr	r0, [pc, #144]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004cb6:	f006 faef 	bl	800b298 <iprintf>

          printf("%f, ", Acc_x_SRAM[i_output]);
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <HAL_GPIO_EXTI_Callback+0x8fc>)
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	edd3 7a00 	vldr	s15, [r3]
 8004cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ccc:	ec53 2b17 	vmov	r2, r3, d7
 8004cd0:	481d      	ldr	r0, [pc, #116]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004cd2:	f006 fae1 	bl	800b298 <iprintf>
          printf("%f, ", Acc_y_SRAM[i_output]);
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <HAL_GPIO_EXTI_Callback+0x900>)
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	edd3 7a00 	vldr	s15, [r3]
 8004ce4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ce8:	ec53 2b17 	vmov	r2, r3, d7
 8004cec:	4816      	ldr	r0, [pc, #88]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004cee:	f006 fad3 	bl	800b298 <iprintf>
          printf("%f, ", Acc_z_SRAM[i_output]);
 8004cf2:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <HAL_GPIO_EXTI_Callback+0x904>)
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	edd3 7a00 	vldr	s15, [r3]
 8004d00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d04:	ec53 2b17 	vmov	r2, r3, d7
 8004d08:	480f      	ldr	r0, [pc, #60]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004d0a:	f006 fac5 	bl	800b298 <iprintf>

          printf("%f, ", Acc_x_correct_SRAM[i_output]);
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <HAL_GPIO_EXTI_Callback+0x908>)
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	edd3 7a00 	vldr	s15, [r3]
 8004d1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d20:	ec53 2b17 	vmov	r2, r3, d7
 8004d24:	4808      	ldr	r0, [pc, #32]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004d26:	f006 fab7 	bl	800b298 <iprintf>
          printf("%f, ", Acc_y_correct_SRAM[i_output]);
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_GPIO_EXTI_Callback+0x90c>)
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d3c:	ec53 2b17 	vmov	r2, r3, d7
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <HAL_GPIO_EXTI_Callback+0x898>)
 8004d42:	f006 faa9 	bl	800b298 <iprintf>
 8004d46:	e03b      	b.n	8004dc0 <HAL_GPIO_EXTI_Callback+0x910>
 8004d48:	0800e1c4 	.word	0x0800e1c4
 8004d4c:	200004d0 	.word	0x200004d0
 8004d50:	20027da4 	.word	0x20027da4
 8004d54:	20029514 	.word	0x20029514
 8004d58:	2002ac84 	.word	0x2002ac84
 8004d5c:	2002c3f4 	.word	0x2002c3f4
 8004d60:	2002db64 	.word	0x2002db64
 8004d64:	2002f2d4 	.word	0x2002f2d4
 8004d68:	20030a44 	.word	0x20030a44
 8004d6c:	200321b4 	.word	0x200321b4
 8004d70:	20033924 	.word	0x20033924
 8004d74:	20035094 	.word	0x20035094
 8004d78:	20036804 	.word	0x20036804
 8004d7c:	20037f74 	.word	0x20037f74
 8004d80:	200396e4 	.word	0x200396e4
 8004d84:	2003ae54 	.word	0x2003ae54
 8004d88:	2003c5c4 	.word	0x2003c5c4
 8004d8c:	2003dd34 	.word	0x2003dd34
 8004d90:	2003f4a4 	.word	0x2003f4a4
 8004d94:	20040c14 	.word	0x20040c14
 8004d98:	20042384 	.word	0x20042384
 8004d9c:	20043af4 	.word	0x20043af4
 8004da0:	20048144 	.word	0x20048144
 8004da4:	20045264 	.word	0x20045264
 8004da8:	200469d4 	.word	0x200469d4
 8004dac:	200498b4 	.word	0x200498b4
 8004db0:	2004b024 	.word	0x2004b024
 8004db4:	2004c794 	.word	0x2004c794
 8004db8:	2004df04 	.word	0x2004df04
 8004dbc:	2004f674 	.word	0x2004f674
          printf("%f, ", Acc_z_correct_SRAM[i_output]);
 8004dc0:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a5e      	ldr	r2, [pc, #376]	; (8004f40 <HAL_GPIO_EXTI_Callback+0xa90>)
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	edd3 7a00 	vldr	s15, [r3]
 8004dce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dd2:	ec53 2b17 	vmov	r2, r3, d7
 8004dd6:	485b      	ldr	r0, [pc, #364]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004dd8:	f006 fa5e 	bl	800b298 <iprintf>

          printf("%f, ", Acc_x_LPF_SRAM[i_output]);
 8004ddc:	4b57      	ldr	r3, [pc, #348]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a59      	ldr	r2, [pc, #356]	; (8004f48 <HAL_GPIO_EXTI_Callback+0xa98>)
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	edd3 7a00 	vldr	s15, [r3]
 8004dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dee:	ec53 2b17 	vmov	r2, r3, d7
 8004df2:	4854      	ldr	r0, [pc, #336]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004df4:	f006 fa50 	bl	800b298 <iprintf>
          printf("%f, ", Acc_y_LPF_SRAM[i_output]);
 8004df8:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a53      	ldr	r2, [pc, #332]	; (8004f4c <HAL_GPIO_EXTI_Callback+0xa9c>)
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	edd3 7a00 	vldr	s15, [r3]
 8004e06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e0a:	ec53 2b17 	vmov	r2, r3, d7
 8004e0e:	484d      	ldr	r0, [pc, #308]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004e10:	f006 fa42 	bl	800b298 <iprintf>
          printf("%f, ", d_yawrate_SRAM[i_output]);
 8004e14:	4b49      	ldr	r3, [pc, #292]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a4d      	ldr	r2, [pc, #308]	; (8004f50 <HAL_GPIO_EXTI_Callback+0xaa0>)
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	edd3 7a00 	vldr	s15, [r3]
 8004e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e26:	ec53 2b17 	vmov	r2, r3, d7
 8004e2a:	4846      	ldr	r0, [pc, #280]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004e2c:	f006 fa34 	bl	800b298 <iprintf>

          printf("%f, ", Fx_dis_SRAM[i_output]);
 8004e30:	4b42      	ldr	r3, [pc, #264]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a47      	ldr	r2, [pc, #284]	; (8004f54 <HAL_GPIO_EXTI_Callback+0xaa4>)
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	edd3 7a00 	vldr	s15, [r3]
 8004e3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e42:	ec53 2b17 	vmov	r2, r3, d7
 8004e46:	483f      	ldr	r0, [pc, #252]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004e48:	f006 fa26 	bl	800b298 <iprintf>
          printf("%f, ", Fy_dis_SRAM[i_output]);
 8004e4c:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	edd3 7a00 	vldr	s15, [r3]
 8004e5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e5e:	ec53 2b17 	vmov	r2, r3, d7
 8004e62:	4838      	ldr	r0, [pc, #224]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004e64:	f006 fa18 	bl	800b298 <iprintf>
          printf("%f, ", Mz_dis_SRAM[i_output]);
 8004e68:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3b      	ldr	r2, [pc, #236]	; (8004f5c <HAL_GPIO_EXTI_Callback+0xaac>)
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	edd3 7a00 	vldr	s15, [r3]
 8004e76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e7a:	ec53 2b17 	vmov	r2, r3, d7
 8004e7e:	4831      	ldr	r0, [pc, #196]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004e80:	f006 fa0a 	bl	800b298 <iprintf>
          
          printf("%f, ", M_YMO_SRAM[i_output]);
 8004e84:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a35      	ldr	r2, [pc, #212]	; (8004f60 <HAL_GPIO_EXTI_Callback+0xab0>)
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	edd3 7a00 	vldr	s15, [r3]
 8004e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e96:	ec53 2b17 	vmov	r2, r3, d7
 8004e9a:	482a      	ldr	r0, [pc, #168]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004e9c:	f006 f9fc 	bl	800b298 <iprintf>

          printf("%f, ", alpha_1_SRAM[i_output]);
 8004ea0:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_GPIO_EXTI_Callback+0xab4>)
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004eb2:	ec53 2b17 	vmov	r2, r3, d7
 8004eb6:	4823      	ldr	r0, [pc, #140]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004eb8:	f006 f9ee 	bl	800b298 <iprintf>
          printf("%f, ", alpha_2_SRAM[i_output]);
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <HAL_GPIO_EXTI_Callback+0xab8>)
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ece:	ec53 2b17 	vmov	r2, r3, d7
 8004ed2:	481c      	ldr	r0, [pc, #112]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004ed4:	f006 f9e0 	bl	800b298 <iprintf>
          printf("%f, ", alpha_3_SRAM[i_output]);
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a23      	ldr	r2, [pc, #140]	; (8004f6c <HAL_GPIO_EXTI_Callback+0xabc>)
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	edd3 7a00 	vldr	s15, [r3]
 8004ee6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004eea:	ec53 2b17 	vmov	r2, r3, d7
 8004eee:	4815      	ldr	r0, [pc, #84]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004ef0:	f006 f9d2 	bl	800b298 <iprintf>
          printf("%f, ", alpha_4_SRAM[i_output]);
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_GPIO_EXTI_Callback+0xac0>)
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	edd3 7a00 	vldr	s15, [r3]
 8004f02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f06:	ec53 2b17 	vmov	r2, r3, d7
 8004f0a:	480e      	ldr	r0, [pc, #56]	; (8004f44 <HAL_GPIO_EXTI_Callback+0xa94>)
 8004f0c:	f006 f9c4 	bl	800b298 <iprintf>
          printf("%f, ", v2_hat_acc_SRAM[i_output]);
          printf("%f, ", v3_hat_acc_SRAM[i_output]);
          printf("%f, ", v4_hat_acc_SRAM[i_output]);
          #endif

          printf("\r\n");
 8004f10:	4818      	ldr	r0, [pc, #96]	; (8004f74 <HAL_GPIO_EXTI_Callback+0xac4>)
 8004f12:	f006 fa35 	bl	800b380 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_GPIO_EXTI_Callback+0xa8c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f240 52db 	movw	r2, #1499	; 0x5db
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	f77f abbb 	ble.w	80046a4 <HAL_GPIO_EXTI_Callback+0x1f4>
        }
        break;
 8004f2e:	e000      	b.n	8004f32 <HAL_GPIO_EXTI_Callback+0xa82>
        break;
 8004f30:	bf00      	nop
    }


	}
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200004d0 	.word	0x200004d0
 8004f40:	20050de4 	.word	0x20050de4
 8004f44:	0800e1c4 	.word	0x0800e1c4
 8004f48:	20052554 	.word	0x20052554
 8004f4c:	20053cc4 	.word	0x20053cc4
 8004f50:	20055434 	.word	0x20055434
 8004f54:	20056ba4 	.word	0x20056ba4
 8004f58:	20058314 	.word	0x20058314
 8004f5c:	20059a84 	.word	0x20059a84
 8004f60:	2005b1f4 	.word	0x2005b1f4
 8004f64:	2005c964 	.word	0x2005c964
 8004f68:	2005e0d4 	.word	0x2005e0d4
 8004f6c:	2005f844 	.word	0x2005f844
 8004f70:	20060fb4 	.word	0x20060fb4
 8004f74:	0800e1cc 	.word	0x0800e1cc

08004f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f7c:	f001 f96f 	bl	800625e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f80:	f000 f8b8 	bl	80050f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f84:	f000 fc8a 	bl	800589c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8004f88:	f000 fc2a 	bl	80057e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004f8c:	f000 fc58 	bl	8005840 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8004f90:	f000 f9e2 	bl	8005358 <MX_TIM2_Init>
  MX_TIM1_Init();
 8004f94:	f000 f986 	bl	80052a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004f98:	f000 fa2c 	bl	80053f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004f9c:	f000 fa80 	bl	80054a0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004fa0:	f000 fb56 	bl	8005650 <MX_TIM8_Init>
  MX_TIM5_Init();
 8004fa4:	f000 fad2 	bl	800554c <MX_TIM5_Init>
  MX_TIM9_Init();
 8004fa8:	f000 fbac 	bl	8005704 <MX_TIM9_Init>
  MX_I2C1_Init();
 8004fac:	f000 f93a 	bl	8005224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8004fb0:	483f      	ldr	r0, [pc, #252]	; (80050b0 <main+0x138>)
 8004fb2:	f003 fc6d 	bl	8008890 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8004fb6:	213c      	movs	r1, #60	; 0x3c
 8004fb8:	483e      	ldr	r0, [pc, #248]	; (80050b4 <main+0x13c>)
 8004fba:	f003 fd9f 	bl	8008afc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004fbe:	213c      	movs	r1, #60	; 0x3c
 8004fc0:	483d      	ldr	r0, [pc, #244]	; (80050b8 <main+0x140>)
 8004fc2:	f003 fd9b 	bl	8008afc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8004fc6:	213c      	movs	r1, #60	; 0x3c
 8004fc8:	483c      	ldr	r0, [pc, #240]	; (80050bc <main+0x144>)
 8004fca:	f003 fd97 	bl	8008afc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8004fce:	213c      	movs	r1, #60	; 0x3c
 8004fd0:	483b      	ldr	r0, [pc, #236]	; (80050c0 <main+0x148>)
 8004fd2:	f003 fd93 	bl	8008afc <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <main+0x14c>)
 8004fd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <main+0x150>)
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 8004fe0:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <main+0x14c>)
 8004fe2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <main+0x154>)
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 8004fea:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <main+0x14c>)
 8004fec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004ff0:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <main+0x158>)
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 8004ff4:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <main+0x14c>)
 8004ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004ffa:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <main+0x15c>)
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8004ffe:	2100      	movs	r1, #0
 8005000:	4835      	ldr	r0, [pc, #212]	; (80050d8 <main+0x160>)
 8005002:	f003 fca5 	bl	8008950 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8005006:	210c      	movs	r1, #12
 8005008:	4833      	ldr	r0, [pc, #204]	; (80050d8 <main+0x160>)
 800500a:	f003 fca1 	bl	8008950 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800500e:	2100      	movs	r1, #0
 8005010:	4832      	ldr	r0, [pc, #200]	; (80050dc <main+0x164>)
 8005012:	f003 fc9d 	bl	8008950 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8005016:	2104      	movs	r1, #4
 8005018:	4830      	ldr	r0, [pc, #192]	; (80050dc <main+0x164>)
 800501a:	f003 fc99 	bl	8008950 <HAL_TIM_PWM_Start>

  #ifdef Enable_I2C
  bno055_assignI2C(&hi2c1);
 800501e:	4830      	ldr	r0, [pc, #192]	; (80050e0 <main+0x168>)
 8005020:	f7fb fd18 	bl	8000a54 <bno055_assignI2C>
  bno055_reset();
 8005024:	f7fb fb18 	bl	8000658 <bno055_reset>
  bno055_setup();
 8005028:	f7fb fb22 	bl	8000670 <bno055_setup>
  bno055_setOperationModeNDOF();
 800502c:	f7fb fb0d 	bl	800064a <bno055_setOperationModeNDOF>
  #endif

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8005030:	2201      	movs	r2, #1
 8005032:	2101      	movs	r1, #1
 8005034:	482b      	ldr	r0, [pc, #172]	; (80050e4 <main+0x16c>)
 8005036:	f001 fc4d 	bl	80068d4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    #ifdef Enable_I2C
    Euler      = bno055_getVectorEuler();
 800503a:	f7fb fcd7 	bl	80009ec <bno055_getVectorEuler>
 800503e:	eeb0 4b40 	vmov.f64	d4, d0
 8005042:	eeb0 5b41 	vmov.f64	d5, d1
 8005046:	eeb0 6b42 	vmov.f64	d6, d2
 800504a:	eeb0 7b43 	vmov.f64	d7, d3
 800504e:	4b26      	ldr	r3, [pc, #152]	; (80050e8 <main+0x170>)
 8005050:	ed83 4b00 	vstr	d4, [r3]
 8005054:	ed83 5b02 	vstr	d5, [r3, #8]
 8005058:	ed83 6b04 	vstr	d6, [r3, #16]
 800505c:	ed83 7b06 	vstr	d7, [r3, #24]
    Gyro       = bno055_getVectorGyroscope();
 8005060:	f7fb fc91 	bl	8000986 <bno055_getVectorGyroscope>
 8005064:	eeb0 4b40 	vmov.f64	d4, d0
 8005068:	eeb0 5b41 	vmov.f64	d5, d1
 800506c:	eeb0 6b42 	vmov.f64	d6, d2
 8005070:	eeb0 7b43 	vmov.f64	d7, d3
 8005074:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <main+0x174>)
 8005076:	ed83 4b00 	vstr	d4, [r3]
 800507a:	ed83 5b02 	vstr	d5, [r3, #8]
 800507e:	ed83 6b04 	vstr	d6, [r3, #16]
 8005082:	ed83 7b06 	vstr	d7, [r3, #24]
    Acc        = bno055_getVectorAccelerometer();
 8005086:	f7fb fc4b 	bl	8000920 <bno055_getVectorAccelerometer>
 800508a:	eeb0 4b40 	vmov.f64	d4, d0
 800508e:	eeb0 5b41 	vmov.f64	d5, d1
 8005092:	eeb0 6b42 	vmov.f64	d6, d2
 8005096:	eeb0 7b43 	vmov.f64	d7, d3
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <main+0x178>)
 800509c:	ed83 4b00 	vstr	d4, [r3]
 80050a0:	ed83 5b02 	vstr	d5, [r3, #8]
 80050a4:	ed83 6b04 	vstr	d6, [r3, #16]
 80050a8:	ed83 7b06 	vstr	d7, [r3, #24]
    Euler      = bno055_getVectorEuler();
 80050ac:	e7c5      	b.n	800503a <main+0xc2>
 80050ae:	bf00      	nop
 80050b0:	20062dd0 	.word	0x20062dd0
 80050b4:	20062d30 	.word	0x20062d30
 80050b8:	20062ccc 	.word	0x20062ccc
 80050bc:	20062778 	.word	0x20062778
 80050c0:	20062738 	.word	0x20062738
 80050c4:	2000000a 	.word	0x2000000a
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40010400 	.word	0x40010400
 80050d8:	20062c8c 	.word	0x20062c8c
 80050dc:	20062d70 	.word	0x20062d70
 80050e0:	20062838 	.word	0x20062838
 80050e4:	40020400 	.word	0x40020400
 80050e8:	20062d10 	.word	0x20062d10
 80050ec:	20062e10 	.word	0x20062e10
 80050f0:	20062db0 	.word	0x20062db0

080050f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b0b8      	sub	sp, #224	; 0xe0
 80050f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80050fe:	2234      	movs	r2, #52	; 0x34
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f005 fc85 	bl	800aa12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005108:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	2290      	movs	r2, #144	; 0x90
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f005 fc76 	bl	800aa12 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005126:	f002 fa5b 	bl	80075e0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <SystemClock_Config+0x124>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <SystemClock_Config+0x124>)
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b38      	ldr	r3, [pc, #224]	; (8005218 <SystemClock_Config+0x124>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005142:	4b36      	ldr	r3, [pc, #216]	; (800521c <SystemClock_Config+0x128>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800514a:	4a34      	ldr	r2, [pc, #208]	; (800521c <SystemClock_Config+0x128>)
 800514c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4b32      	ldr	r3, [pc, #200]	; (800521c <SystemClock_Config+0x128>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800515e:	2301      	movs	r3, #1
 8005160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005164:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800516c:	2302      	movs	r3, #2
 800516e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800517a:	2304      	movs	r3, #4
 800517c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005180:	2360      	movs	r3, #96	; 0x60
 8005182:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005186:	2302      	movs	r3, #2
 8005188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800518c:	2304      	movs	r3, #4
 800518e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005192:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005196:	4618      	mov	r0, r3
 8005198:	f002 fa82 	bl	80076a0 <HAL_RCC_OscConfig>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80051a2:	f000 fc85 	bl	8005ab0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80051a6:	f002 fa2b 	bl	8007600 <HAL_PWREx_EnableOverDrive>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80051b0:	f000 fc7e 	bl	8005ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051b4:	230f      	movs	r3, #15
 80051b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051ba:	2302      	movs	r3, #2
 80051bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80051d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80051d8:	2103      	movs	r1, #3
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 fd0e 	bl	8007bfc <HAL_RCC_ClockConfig>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80051e6:	f000 fc63 	bl	8005ab0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <SystemClock_Config+0x12c>)
 80051ec:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80051ee:	2300      	movs	r3, #0
 80051f0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80051f2:	2300      	movs	r3, #0
 80051f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051fc:	f107 0308 	add.w	r3, r7, #8
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fef3 	bl	8007fec <HAL_RCCEx_PeriphCLKConfig>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800520c:	f000 fc50 	bl	8005ab0 <Error_Handler>
  }
}
 8005210:	bf00      	nop
 8005212:	37e0      	adds	r7, #224	; 0xe0
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	40007000 	.word	0x40007000
 8005220:	00204100 	.word	0x00204100

08005224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <MX_I2C1_Init+0x74>)
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <MX_I2C1_Init+0x78>)
 800522c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 800522e:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <MX_I2C1_Init+0x74>)
 8005230:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <MX_I2C1_Init+0x7c>)
 8005232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005234:	4b18      	ldr	r3, [pc, #96]	; (8005298 <MX_I2C1_Init+0x74>)
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800523a:	4b17      	ldr	r3, [pc, #92]	; (8005298 <MX_I2C1_Init+0x74>)
 800523c:	2201      	movs	r2, #1
 800523e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005240:	4b15      	ldr	r3, [pc, #84]	; (8005298 <MX_I2C1_Init+0x74>)
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <MX_I2C1_Init+0x74>)
 8005248:	2200      	movs	r2, #0
 800524a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800524c:	4b12      	ldr	r3, [pc, #72]	; (8005298 <MX_I2C1_Init+0x74>)
 800524e:	2200      	movs	r2, #0
 8005250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <MX_I2C1_Init+0x74>)
 8005254:	2200      	movs	r2, #0
 8005256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <MX_I2C1_Init+0x74>)
 800525a:	2200      	movs	r2, #0
 800525c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800525e:	480e      	ldr	r0, [pc, #56]	; (8005298 <MX_I2C1_Init+0x74>)
 8005260:	f001 fb6a 	bl	8006938 <HAL_I2C_Init>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800526a:	f000 fc21 	bl	8005ab0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800526e:	2100      	movs	r1, #0
 8005270:	4809      	ldr	r0, [pc, #36]	; (8005298 <MX_I2C1_Init+0x74>)
 8005272:	f001 ffd5 	bl	8007220 <HAL_I2CEx_ConfigAnalogFilter>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800527c:	f000 fc18 	bl	8005ab0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005280:	2100      	movs	r1, #0
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <MX_I2C1_Init+0x74>)
 8005284:	f002 f817 	bl	80072b6 <HAL_I2CEx_ConfigDigitalFilter>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800528e:	f000 fc0f 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20062838 	.word	0x20062838
 800529c:	40005400 	.word	0x40005400
 80052a0:	2010091a 	.word	0x2010091a

080052a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052aa:	f107 030c 	add.w	r3, r7, #12
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f005 fbad 	bl	800aa12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052b8:	463b      	mov	r3, r7
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80052c2:	4b23      	ldr	r3, [pc, #140]	; (8005350 <MX_TIM1_Init+0xac>)
 80052c4:	4a23      	ldr	r2, [pc, #140]	; (8005354 <MX_TIM1_Init+0xb0>)
 80052c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80052c8:	4b21      	ldr	r3, [pc, #132]	; (8005350 <MX_TIM1_Init+0xac>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ce:	4b20      	ldr	r3, [pc, #128]	; (8005350 <MX_TIM1_Init+0xac>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80052d4:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <MX_TIM1_Init+0xac>)
 80052d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052dc:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <MX_TIM1_Init+0xac>)
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052e2:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <MX_TIM1_Init+0xac>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <MX_TIM1_Init+0xac>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80052ee:	2303      	movs	r3, #3
 80052f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052f6:	2301      	movs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005302:	2300      	movs	r3, #0
 8005304:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005306:	2301      	movs	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800530a:	2300      	movs	r3, #0
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	4619      	mov	r1, r3
 8005318:	480d      	ldr	r0, [pc, #52]	; (8005350 <MX_TIM1_Init+0xac>)
 800531a:	f003 fb5d 	bl	80089d8 <HAL_TIM_Encoder_Init>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8005324:	f000 fbc4 	bl	8005ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800532c:	2300      	movs	r3, #0
 800532e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005330:	2300      	movs	r3, #0
 8005332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005334:	463b      	mov	r3, r7
 8005336:	4619      	mov	r1, r3
 8005338:	4805      	ldr	r0, [pc, #20]	; (8005350 <MX_TIM1_Init+0xac>)
 800533a:	f004 faed 	bl	8009918 <HAL_TIMEx_MasterConfigSynchronization>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005344:	f000 fbb4 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005348:	bf00      	nop
 800534a:	3730      	adds	r7, #48	; 0x30
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20062d30 	.word	0x20062d30
 8005354:	40010000 	.word	0x40010000

08005358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <MX_TIM2_Init+0x98>)
 8005378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800537c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800537e:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <MX_TIM2_Init+0x98>)
 8005380:	225f      	movs	r2, #95	; 0x5f
 8005382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <MX_TIM2_Init+0x98>)
 8005386:	2200      	movs	r2, #0
 8005388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800538a:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <MX_TIM2_Init+0x98>)
 800538c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <MX_TIM2_Init+0x98>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <MX_TIM2_Init+0x98>)
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800539e:	4814      	ldr	r0, [pc, #80]	; (80053f0 <MX_TIM2_Init+0x98>)
 80053a0:	f003 fa4a 	bl	8008838 <HAL_TIM_Base_Init>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80053aa:	f000 fb81 	bl	8005ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053b4:	f107 0310 	add.w	r3, r7, #16
 80053b8:	4619      	mov	r1, r3
 80053ba:	480d      	ldr	r0, [pc, #52]	; (80053f0 <MX_TIM2_Init+0x98>)
 80053bc:	f003 fe0c 	bl	8008fd8 <HAL_TIM_ConfigClockSource>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80053c6:	f000 fb73 	bl	8005ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4806      	ldr	r0, [pc, #24]	; (80053f0 <MX_TIM2_Init+0x98>)
 80053d8:	f004 fa9e 	bl	8009918 <HAL_TIMEx_MasterConfigSynchronization>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80053e2:	f000 fb65 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80053e6:	bf00      	nop
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20062dd0 	.word	0x20062dd0

080053f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08c      	sub	sp, #48	; 0x30
 80053f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053fa:	f107 030c 	add.w	r3, r7, #12
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f005 fb05 	bl	800aa12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005408:	463b      	mov	r3, r7
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <MX_TIM3_Init+0xa4>)
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <MX_TIM3_Init+0xa8>)
 8005416:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005418:	4b1f      	ldr	r3, [pc, #124]	; (8005498 <MX_TIM3_Init+0xa4>)
 800541a:	2200      	movs	r2, #0
 800541c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <MX_TIM3_Init+0xa4>)
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005424:	4b1c      	ldr	r3, [pc, #112]	; (8005498 <MX_TIM3_Init+0xa4>)
 8005426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800542a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800542c:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <MX_TIM3_Init+0xa4>)
 800542e:	2200      	movs	r2, #0
 8005430:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005432:	4b19      	ldr	r3, [pc, #100]	; (8005498 <MX_TIM3_Init+0xa4>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005438:	2303      	movs	r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005450:	2301      	movs	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005454:	2300      	movs	r3, #0
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800545c:	f107 030c 	add.w	r3, r7, #12
 8005460:	4619      	mov	r1, r3
 8005462:	480d      	ldr	r0, [pc, #52]	; (8005498 <MX_TIM3_Init+0xa4>)
 8005464:	f003 fab8 	bl	80089d8 <HAL_TIM_Encoder_Init>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800546e:	f000 fb1f 	bl	8005ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800547a:	463b      	mov	r3, r7
 800547c:	4619      	mov	r1, r3
 800547e:	4806      	ldr	r0, [pc, #24]	; (8005498 <MX_TIM3_Init+0xa4>)
 8005480:	f004 fa4a 	bl	8009918 <HAL_TIMEx_MasterConfigSynchronization>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800548a:	f000 fb11 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800548e:	bf00      	nop
 8005490:	3730      	adds	r7, #48	; 0x30
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20062ccc 	.word	0x20062ccc
 800549c:	40000400 	.word	0x40000400

080054a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08c      	sub	sp, #48	; 0x30
 80054a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f005 faaf 	bl	800aa12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054b4:	463b      	mov	r3, r7
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80054be:	4b21      	ldr	r3, [pc, #132]	; (8005544 <MX_TIM4_Init+0xa4>)
 80054c0:	4a21      	ldr	r2, [pc, #132]	; (8005548 <MX_TIM4_Init+0xa8>)
 80054c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <MX_TIM4_Init+0xa4>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <MX_TIM4_Init+0xa4>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <MX_TIM4_Init+0xa4>)
 80054d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d8:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <MX_TIM4_Init+0xa4>)
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <MX_TIM4_Init+0xa4>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80054e4:	2303      	movs	r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054f8:	2300      	movs	r3, #0
 80054fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054fc:	2301      	movs	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005500:	2300      	movs	r3, #0
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4619      	mov	r1, r3
 800550e:	480d      	ldr	r0, [pc, #52]	; (8005544 <MX_TIM4_Init+0xa4>)
 8005510:	f003 fa62 	bl	80089d8 <HAL_TIM_Encoder_Init>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800551a:	f000 fac9 	bl	8005ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800551e:	2300      	movs	r3, #0
 8005520:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005526:	463b      	mov	r3, r7
 8005528:	4619      	mov	r1, r3
 800552a:	4806      	ldr	r0, [pc, #24]	; (8005544 <MX_TIM4_Init+0xa4>)
 800552c:	f004 f9f4 	bl	8009918 <HAL_TIMEx_MasterConfigSynchronization>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005536:	f000 fabb 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800553a:	bf00      	nop
 800553c:	3730      	adds	r7, #48	; 0x30
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20062778 	.word	0x20062778
 8005548:	40000800 	.word	0x40000800

0800554c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08e      	sub	sp, #56	; 0x38
 8005550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005560:	f107 031c 	add.w	r3, r7, #28
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800556c:	463b      	mov	r3, r7
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	609a      	str	r2, [r3, #8]
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	615a      	str	r2, [r3, #20]
 800557c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800557e:	4b32      	ldr	r3, [pc, #200]	; (8005648 <MX_TIM5_Init+0xfc>)
 8005580:	4a32      	ldr	r2, [pc, #200]	; (800564c <MX_TIM5_Init+0x100>)
 8005582:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8005584:	4b30      	ldr	r3, [pc, #192]	; (8005648 <MX_TIM5_Init+0xfc>)
 8005586:	2200      	movs	r2, #0
 8005588:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800558a:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <MX_TIM5_Init+0xfc>)
 800558c:	2200      	movs	r2, #0
 800558e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000-1;
 8005590:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <MX_TIM5_Init+0xfc>)
 8005592:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005596:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005598:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <MX_TIM5_Init+0xfc>)
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <MX_TIM5_Init+0xfc>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80055a4:	4828      	ldr	r0, [pc, #160]	; (8005648 <MX_TIM5_Init+0xfc>)
 80055a6:	f003 f947 	bl	8008838 <HAL_TIM_Base_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80055b0:	f000 fa7e 	bl	8005ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80055ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055be:	4619      	mov	r1, r3
 80055c0:	4821      	ldr	r0, [pc, #132]	; (8005648 <MX_TIM5_Init+0xfc>)
 80055c2:	f003 fd09 	bl	8008fd8 <HAL_TIM_ConfigClockSource>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80055cc:	f000 fa70 	bl	8005ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80055d0:	481d      	ldr	r0, [pc, #116]	; (8005648 <MX_TIM5_Init+0xfc>)
 80055d2:	f003 f987 	bl	80088e4 <HAL_TIM_PWM_Init>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80055dc:	f000 fa68 	bl	8005ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80055e8:	f107 031c 	add.w	r3, r7, #28
 80055ec:	4619      	mov	r1, r3
 80055ee:	4816      	ldr	r0, [pc, #88]	; (8005648 <MX_TIM5_Init+0xfc>)
 80055f0:	f004 f992 	bl	8009918 <HAL_TIMEx_MasterConfigSynchronization>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80055fa:	f000 fa59 	bl	8005ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055fe:	2360      	movs	r3, #96	; 0x60
 8005600:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800560e:	463b      	mov	r3, r7
 8005610:	2200      	movs	r2, #0
 8005612:	4619      	mov	r1, r3
 8005614:	480c      	ldr	r0, [pc, #48]	; (8005648 <MX_TIM5_Init+0xfc>)
 8005616:	f003 fbc7 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8005620:	f000 fa46 	bl	8005ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005624:	463b      	mov	r3, r7
 8005626:	220c      	movs	r2, #12
 8005628:	4619      	mov	r1, r3
 800562a:	4807      	ldr	r0, [pc, #28]	; (8005648 <MX_TIM5_Init+0xfc>)
 800562c:	f003 fbbc 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8005636:	f000 fa3b 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800563a:	4803      	ldr	r0, [pc, #12]	; (8005648 <MX_TIM5_Init+0xfc>)
 800563c:	f000 fbee 	bl	8005e1c <HAL_TIM_MspPostInit>

}
 8005640:	bf00      	nop
 8005642:	3738      	adds	r7, #56	; 0x38
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20062c8c 	.word	0x20062c8c
 800564c:	40000c00 	.word	0x40000c00

08005650 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08c      	sub	sp, #48	; 0x30
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	2224      	movs	r2, #36	; 0x24
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f005 f9d7 	bl	800aa12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005664:	463b      	mov	r3, r7
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800566e:	4b23      	ldr	r3, [pc, #140]	; (80056fc <MX_TIM8_Init+0xac>)
 8005670:	4a23      	ldr	r2, [pc, #140]	; (8005700 <MX_TIM8_Init+0xb0>)
 8005672:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005674:	4b21      	ldr	r3, [pc, #132]	; (80056fc <MX_TIM8_Init+0xac>)
 8005676:	2200      	movs	r2, #0
 8005678:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <MX_TIM8_Init+0xac>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <MX_TIM8_Init+0xac>)
 8005682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005686:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005688:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <MX_TIM8_Init+0xac>)
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <MX_TIM8_Init+0xac>)
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <MX_TIM8_Init+0xac>)
 8005696:	2200      	movs	r2, #0
 8005698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800569a:	2303      	movs	r3, #3
 800569c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80056a2:	2301      	movs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80056ae:	2300      	movs	r3, #0
 80056b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80056b2:	2301      	movs	r3, #1
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80056b6:	2300      	movs	r3, #0
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	4619      	mov	r1, r3
 80056c4:	480d      	ldr	r0, [pc, #52]	; (80056fc <MX_TIM8_Init+0xac>)
 80056c6:	f003 f987 	bl	80089d8 <HAL_TIM_Encoder_Init>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80056d0:	f000 f9ee 	bl	8005ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d4:	2300      	movs	r3, #0
 80056d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056d8:	2300      	movs	r3, #0
 80056da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80056e0:	463b      	mov	r3, r7
 80056e2:	4619      	mov	r1, r3
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <MX_TIM8_Init+0xac>)
 80056e6:	f004 f917 	bl	8009918 <HAL_TIMEx_MasterConfigSynchronization>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80056f0:	f000 f9de 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80056f4:	bf00      	nop
 80056f6:	3730      	adds	r7, #48	; 0x30
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20062738 	.word	0x20062738
 8005700:	40010400 	.word	0x40010400

08005704 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08c      	sub	sp, #48	; 0x30
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800570a:	f107 0320 	add.w	r3, r7, #32
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	60da      	str	r2, [r3, #12]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	615a      	str	r2, [r3, #20]
 8005728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800572a:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <MX_TIM9_Init+0xd4>)
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <MX_TIM9_Init+0xd8>)
 800572e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8005730:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <MX_TIM9_Init+0xd4>)
 8005732:	2200      	movs	r2, #0
 8005734:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005736:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <MX_TIM9_Init+0xd4>)
 8005738:	2200      	movs	r2, #0
 800573a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4000-1;
 800573c:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <MX_TIM9_Init+0xd4>)
 800573e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005742:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005744:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <MX_TIM9_Init+0xd4>)
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <MX_TIM9_Init+0xd4>)
 800574c:	2200      	movs	r2, #0
 800574e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005750:	4821      	ldr	r0, [pc, #132]	; (80057d8 <MX_TIM9_Init+0xd4>)
 8005752:	f003 f871 	bl	8008838 <HAL_TIM_Base_Init>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800575c:	f000 f9a8 	bl	8005ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005764:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005766:	f107 0320 	add.w	r3, r7, #32
 800576a:	4619      	mov	r1, r3
 800576c:	481a      	ldr	r0, [pc, #104]	; (80057d8 <MX_TIM9_Init+0xd4>)
 800576e:	f003 fc33 	bl	8008fd8 <HAL_TIM_ConfigClockSource>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005778:	f000 f99a 	bl	8005ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800577c:	4816      	ldr	r0, [pc, #88]	; (80057d8 <MX_TIM9_Init+0xd4>)
 800577e:	f003 f8b1 	bl	80088e4 <HAL_TIM_PWM_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005788:	f000 f992 	bl	8005ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800578c:	2360      	movs	r3, #96	; 0x60
 800578e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	2200      	movs	r2, #0
 80057a0:	4619      	mov	r1, r3
 80057a2:	480d      	ldr	r0, [pc, #52]	; (80057d8 <MX_TIM9_Init+0xd4>)
 80057a4:	f003 fb00 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80057ae:	f000 f97f 	bl	8005ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	2204      	movs	r2, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4807      	ldr	r0, [pc, #28]	; (80057d8 <MX_TIM9_Init+0xd4>)
 80057ba:	f003 faf5 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80057c4:	f000 f974 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80057c8:	4803      	ldr	r0, [pc, #12]	; (80057d8 <MX_TIM9_Init+0xd4>)
 80057ca:	f000 fb27 	bl	8005e1c <HAL_TIM_MspPostInit>

}
 80057ce:	bf00      	nop
 80057d0:	3730      	adds	r7, #48	; 0x30
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20062d70 	.word	0x20062d70
 80057dc:	40014000 	.word	0x40014000

080057e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80057e4:	4b14      	ldr	r3, [pc, #80]	; (8005838 <MX_USART3_UART_Init+0x58>)
 80057e6:	4a15      	ldr	r2, [pc, #84]	; (800583c <MX_USART3_UART_Init+0x5c>)
 80057e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80057ea:	4b13      	ldr	r3, [pc, #76]	; (8005838 <MX_USART3_UART_Init+0x58>)
 80057ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <MX_USART3_UART_Init+0x58>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80057f8:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <MX_USART3_UART_Init+0x58>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <MX_USART3_UART_Init+0x58>)
 8005800:	2200      	movs	r2, #0
 8005802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <MX_USART3_UART_Init+0x58>)
 8005806:	2208      	movs	r2, #8
 8005808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <MX_USART3_UART_Init+0x58>)
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <MX_USART3_UART_Init+0x58>)
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005816:	4b08      	ldr	r3, [pc, #32]	; (8005838 <MX_USART3_UART_Init+0x58>)
 8005818:	2200      	movs	r2, #0
 800581a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <MX_USART3_UART_Init+0x58>)
 800581e:	2200      	movs	r2, #0
 8005820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005822:	4805      	ldr	r0, [pc, #20]	; (8005838 <MX_USART3_UART_Init+0x58>)
 8005824:	f004 f924 	bl	8009a70 <HAL_UART_Init>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800582e:	f000 f93f 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200627b8 	.word	0x200627b8
 800583c:	40004800 	.word	0x40004800

08005840 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005846:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800584a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800584c:	4b12      	ldr	r3, [pc, #72]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800584e:	2206      	movs	r2, #6
 8005850:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005854:	2202      	movs	r2, #2
 8005856:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005860:	2202      	movs	r2, #2
 8005862:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005866:	2201      	movs	r2, #1
 8005868:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800586c:	2200      	movs	r2, #0
 800586e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005872:	2200      	movs	r2, #0
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005878:	2201      	movs	r2, #1
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005882:	4805      	ldr	r0, [pc, #20]	; (8005898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005884:	f001 fd63 	bl	800734e <HAL_PCD_Init>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800588e:	f000 f90f 	bl	8005ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20062884 	.word	0x20062884

0800589c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a2:	f107 031c 	add.w	r3, r7, #28
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058b2:	4b78      	ldr	r3, [pc, #480]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a77      	ldr	r2, [pc, #476]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058b8:	f043 0310 	orr.w	r3, r3, #16
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b75      	ldr	r3, [pc, #468]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ca:	4b72      	ldr	r3, [pc, #456]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	4a71      	ldr	r2, [pc, #452]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058d0:	f043 0304 	orr.w	r3, r3, #4
 80058d4:	6313      	str	r3, [r2, #48]	; 0x30
 80058d6:	4b6f      	ldr	r3, [pc, #444]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058e2:	4b6c      	ldr	r3, [pc, #432]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	4a6b      	ldr	r2, [pc, #428]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	6313      	str	r3, [r2, #48]	; 0x30
 80058ee:	4b69      	ldr	r3, [pc, #420]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fa:	4b66      	ldr	r3, [pc, #408]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	4a65      	ldr	r2, [pc, #404]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6313      	str	r3, [r2, #48]	; 0x30
 8005906:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005912:	4b60      	ldr	r3, [pc, #384]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	4a5f      	ldr	r2, [pc, #380]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	6313      	str	r3, [r2, #48]	; 0x30
 800591e:	4b5d      	ldr	r3, [pc, #372]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800592a:	4b5a      	ldr	r3, [pc, #360]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4a59      	ldr	r2, [pc, #356]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	6313      	str	r3, [r2, #48]	; 0x30
 8005936:	4b57      	ldr	r3, [pc, #348]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005942:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	4a53      	ldr	r2, [pc, #332]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594c:	6313      	str	r3, [r2, #48]	; 0x30
 800594e:	4b51      	ldr	r3, [pc, #324]	; (8005a94 <MX_GPIO_Init+0x1f8>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800595a:	2200      	movs	r2, #0
 800595c:	f244 0181 	movw	r1, #16513	; 0x4081
 8005960:	484d      	ldr	r0, [pc, #308]	; (8005a98 <MX_GPIO_Init+0x1fc>)
 8005962:	f000 ffb7 	bl	80068d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8005966:	2200      	movs	r2, #0
 8005968:	2140      	movs	r1, #64	; 0x40
 800596a:	484c      	ldr	r0, [pc, #304]	; (8005a9c <MX_GPIO_Init+0x200>)
 800596c:	f000 ffb2 	bl	80068d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <MX_GPIO_Init+0x204>)
 8005978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800597e:	f107 031c 	add.w	r3, r7, #28
 8005982:	4619      	mov	r1, r3
 8005984:	4847      	ldr	r0, [pc, #284]	; (8005aa4 <MX_GPIO_Init+0x208>)
 8005986:	f000 fdfb 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800598a:	2332      	movs	r3, #50	; 0x32
 800598c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598e:	2302      	movs	r3, #2
 8005990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005996:	2303      	movs	r3, #3
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800599a:	230b      	movs	r3, #11
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800599e:	f107 031c 	add.w	r3, r7, #28
 80059a2:	4619      	mov	r1, r3
 80059a4:	483f      	ldr	r0, [pc, #252]	; (8005aa4 <MX_GPIO_Init+0x208>)
 80059a6:	f000 fdeb 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80059aa:	2386      	movs	r3, #134	; 0x86
 80059ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ae:	2302      	movs	r3, #2
 80059b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b6:	2303      	movs	r3, #3
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059ba:	230b      	movs	r3, #11
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059be:	f107 031c 	add.w	r3, r7, #28
 80059c2:	4619      	mov	r1, r3
 80059c4:	4838      	ldr	r0, [pc, #224]	; (8005aa8 <MX_GPIO_Init+0x20c>)
 80059c6:	f000 fddb 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80059ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80059ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059d0:	2301      	movs	r3, #1
 80059d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059d8:	2300      	movs	r3, #0
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059dc:	f107 031c 	add.w	r3, r7, #28
 80059e0:	4619      	mov	r1, r3
 80059e2:	482d      	ldr	r0, [pc, #180]	; (8005a98 <MX_GPIO_Init+0x1fc>)
 80059e4:	f000 fdcc 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80059e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	2302      	movs	r3, #2
 80059f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f6:	2303      	movs	r3, #3
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059fa:	230b      	movs	r3, #11
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80059fe:	f107 031c 	add.w	r3, r7, #28
 8005a02:	4619      	mov	r1, r3
 8005a04:	4824      	ldr	r0, [pc, #144]	; (8005a98 <MX_GPIO_Init+0x1fc>)
 8005a06:	f000 fdbb 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a0a:	2340      	movs	r3, #64	; 0x40
 8005a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a1a:	f107 031c 	add.w	r3, r7, #28
 8005a1e:	4619      	mov	r1, r3
 8005a20:	481e      	ldr	r0, [pc, #120]	; (8005a9c <MX_GPIO_Init+0x200>)
 8005a22:	f000 fdad 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005a32:	f107 031c 	add.w	r3, r7, #28
 8005a36:	4619      	mov	r1, r3
 8005a38:	4818      	ldr	r0, [pc, #96]	; (8005a9c <MX_GPIO_Init+0x200>)
 8005a3a:	f000 fda1 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <MX_GPIO_Init+0x210>)
 8005a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a4c:	f107 031c 	add.w	r3, r7, #28
 8005a50:	4619      	mov	r1, r3
 8005a52:	4814      	ldr	r0, [pc, #80]	; (8005aa4 <MX_GPIO_Init+0x208>)
 8005a54:	f000 fd94 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005a58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a66:	2303      	movs	r3, #3
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a6a:	230b      	movs	r3, #11
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a6e:	f107 031c 	add.w	r3, r7, #28
 8005a72:	4619      	mov	r1, r3
 8005a74:	4809      	ldr	r0, [pc, #36]	; (8005a9c <MX_GPIO_Init+0x200>)
 8005a76:	f000 fd83 	bl	8006580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	2017      	movs	r0, #23
 8005a80:	f000 fd47 	bl	8006512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005a84:	2017      	movs	r0, #23
 8005a86:	f000 fd60 	bl	800654a <HAL_NVIC_EnableIRQ>

}
 8005a8a:	bf00      	nop
 8005a8c:	3730      	adds	r7, #48	; 0x30
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40023800 	.word	0x40023800
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	40021800 	.word	0x40021800
 8005aa0:	10110000 	.word	0x10110000
 8005aa4:	40020800 	.word	0x40020800
 8005aa8:	40020000 	.word	0x40020000
 8005aac:	10310000 	.word	0x10310000

08005ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <HAL_MspInit+0x44>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <HAL_MspInit+0x44>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <HAL_MspInit+0x44>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <HAL_MspInit+0x44>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <HAL_MspInit+0x44>)
 8005ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_MspInit+0x44>)
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40023800 	.word	0x40023800

08005b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
 8005b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <HAL_I2C_MspInit+0x7c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d128      	bne.n	8005b7c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b2a:	4b17      	ldr	r3, [pc, #92]	; (8005b88 <HAL_I2C_MspInit+0x80>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	4a16      	ldr	r2, [pc, #88]	; (8005b88 <HAL_I2C_MspInit+0x80>)
 8005b30:	f043 0302 	orr.w	r3, r3, #2
 8005b34:	6313      	str	r3, [r2, #48]	; 0x30
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <HAL_I2C_MspInit+0x80>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005b42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b48:	2312      	movs	r3, #18
 8005b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b50:	2303      	movs	r3, #3
 8005b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b54:	2304      	movs	r3, #4
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	480b      	ldr	r0, [pc, #44]	; (8005b8c <HAL_I2C_MspInit+0x84>)
 8005b60:	f000 fd0e 	bl	8006580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b64:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_I2C_MspInit+0x80>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <HAL_I2C_MspInit+0x80>)
 8005b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <HAL_I2C_MspInit+0x80>)
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b7c:	bf00      	nop
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40005400 	.word	0x40005400
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	40020400 	.word	0x40020400

08005b90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b090      	sub	sp, #64	; 0x40
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6b      	ldr	r2, [pc, #428]	; (8005d5c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d129      	bne.n	8005c06 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bb2:	4b6b      	ldr	r3, [pc, #428]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	4a6a      	ldr	r2, [pc, #424]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bbe:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005bca:	4b65      	ldr	r3, [pc, #404]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	4a64      	ldr	r2, [pc, #400]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005bd0:	f043 0310 	orr.w	r3, r3, #16
 8005bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd6:	4b62      	ldr	r3, [pc, #392]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005be2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be8:	2302      	movs	r3, #2
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4859      	ldr	r0, [pc, #356]	; (8005d64 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005c00:	f000 fcbe 	bl	8006580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005c04:	e0a5      	b.n	8005d52 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d144      	bne.n	8005c9a <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c10:	4b53      	ldr	r3, [pc, #332]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	4a52      	ldr	r2, [pc, #328]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c16:	f043 0302 	orr.w	r3, r3, #2
 8005c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c1c:	4b50      	ldr	r3, [pc, #320]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c28:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	4a4c      	ldr	r2, [pc, #304]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6313      	str	r3, [r2, #48]	; 0x30
 8005c34:	4b4a      	ldr	r3, [pc, #296]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c40:	4b47      	ldr	r3, [pc, #284]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4a46      	ldr	r2, [pc, #280]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c4c:	4b44      	ldr	r3, [pc, #272]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c64:	2300      	movs	r3, #0
 8005c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c70:	4619      	mov	r1, r3
 8005c72:	483e      	ldr	r0, [pc, #248]	; (8005d6c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8005c74:	f000 fc84 	bl	8006580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005c78:	2320      	movs	r3, #32
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c90:	4619      	mov	r1, r3
 8005c92:	4837      	ldr	r0, [pc, #220]	; (8005d70 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8005c94:	f000 fc74 	bl	8006580 <HAL_GPIO_Init>
}
 8005c98:	e05b      	b.n	8005d52 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a35      	ldr	r2, [pc, #212]	; (8005d74 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d129      	bne.n	8005cf8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ca4:	4b2e      	ldr	r3, [pc, #184]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005caa:	f043 0304 	orr.w	r3, r3, #4
 8005cae:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb0:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cbc:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cc2:	f043 0308 	orr.w	r3, r3, #8
 8005cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005cd4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4821      	ldr	r0, [pc, #132]	; (8005d78 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005cf2:	f000 fc45 	bl	8006580 <HAL_GPIO_Init>
}
 8005cf6:	e02c      	b.n	8005d52 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d127      	bne.n	8005d52 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005d02:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d0e:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	6313      	str	r3, [r2, #48]	; 0x30
 8005d26:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d32:	23c0      	movs	r3, #192	; 0xc0
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d36:	2302      	movs	r3, #2
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005d42:	2303      	movs	r3, #3
 8005d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	480c      	ldr	r0, [pc, #48]	; (8005d80 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005d4e:	f000 fc17 	bl	8006580 <HAL_GPIO_Init>
}
 8005d52:	bf00      	nop
 8005d54:	3740      	adds	r7, #64	; 0x40
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40020000 	.word	0x40020000
 8005d70:	40020400 	.word	0x40020400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40020c00 	.word	0x40020c00
 8005d7c:	40010400 	.word	0x40010400
 8005d80:	40020800 	.word	0x40020800

08005d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d94:	d114      	bne.n	8005dc0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d96:	4b1e      	ldr	r3, [pc, #120]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6413      	str	r3, [r2, #64]	; 0x40
 8005da2:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005dae:	2200      	movs	r2, #0
 8005db0:	2100      	movs	r1, #0
 8005db2:	201c      	movs	r0, #28
 8005db4:	f000 fbad 	bl	8006512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005db8:	201c      	movs	r0, #28
 8005dba:	f000 fbc6 	bl	800654a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8005dbe:	e022      	b.n	8005e06 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <HAL_TIM_Base_MspInit+0x90>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10c      	bne.n	8005de4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005dd0:	f043 0308 	orr.w	r3, r3, #8
 8005dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	693b      	ldr	r3, [r7, #16]
}
 8005de2:	e010      	b.n	8005e06 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a0b      	ldr	r2, [pc, #44]	; (8005e18 <HAL_TIM_Base_MspInit+0x94>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d10b      	bne.n	8005e06 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_TIM_Base_MspInit+0x8c>)
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40014000 	.word	0x40014000

08005e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	; 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <HAL_TIM_MspPostInit+0xa8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d11c      	bne.n	8005e78 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e3e:	4b22      	ldr	r3, [pc, #136]	; (8005ec8 <HAL_TIM_MspPostInit+0xac>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <HAL_TIM_MspPostInit+0xac>)
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <HAL_TIM_MspPostInit+0xac>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8005e56:	2309      	movs	r3, #9
 8005e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e62:	2300      	movs	r3, #0
 8005e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e66:	2302      	movs	r3, #2
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6a:	f107 0314 	add.w	r3, r7, #20
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4816      	ldr	r0, [pc, #88]	; (8005ecc <HAL_TIM_MspPostInit+0xb0>)
 8005e72:	f000 fb85 	bl	8006580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8005e76:	e020      	b.n	8005eba <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <HAL_TIM_MspPostInit+0xb4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d11b      	bne.n	8005eba <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <HAL_TIM_MspPostInit+0xac>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <HAL_TIM_MspPostInit+0xac>)
 8005e88:	f043 0310 	orr.w	r3, r3, #16
 8005e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <HAL_TIM_MspPostInit+0xac>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005e9a:	2360      	movs	r3, #96	; 0x60
 8005e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005eae:	f107 0314 	add.w	r3, r7, #20
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4807      	ldr	r0, [pc, #28]	; (8005ed4 <HAL_TIM_MspPostInit+0xb8>)
 8005eb6:	f000 fb63 	bl	8006580 <HAL_GPIO_Init>
}
 8005eba:	bf00      	nop
 8005ebc:	3728      	adds	r7, #40	; 0x28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40000c00 	.word	0x40000c00
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40020000 	.word	0x40020000
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40021000 	.word	0x40021000

08005ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee0:	f107 0314 	add.w	r3, r7, #20
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	60da      	str	r2, [r3, #12]
 8005eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <HAL_UART_MspInit+0x7c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d128      	bne.n	8005f4c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <HAL_UART_MspInit+0x80>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <HAL_UART_MspInit+0x80>)
 8005f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f04:	6413      	str	r3, [r2, #64]	; 0x40
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <HAL_UART_MspInit+0x80>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <HAL_UART_MspInit+0x80>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	4a10      	ldr	r2, [pc, #64]	; (8005f58 <HAL_UART_MspInit+0x80>)
 8005f18:	f043 0308 	orr.w	r3, r3, #8
 8005f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <HAL_UART_MspInit+0x80>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f30:	2302      	movs	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005f3c:	2307      	movs	r3, #7
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	4619      	mov	r1, r3
 8005f46:	4805      	ldr	r0, [pc, #20]	; (8005f5c <HAL_UART_MspInit+0x84>)
 8005f48:	f000 fb1a 	bl	8006580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005f4c:	bf00      	nop
 8005f4e:	3728      	adds	r7, #40	; 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40004800 	.word	0x40004800
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40020c00 	.word	0x40020c00

08005f60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	; 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f80:	d141      	bne.n	8006006 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f82:	4b23      	ldr	r3, [pc, #140]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	4a22      	ldr	r2, [pc, #136]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005f9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fac:	230a      	movs	r3, #10
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb0:	f107 0314 	add.w	r3, r7, #20
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4817      	ldr	r0, [pc, #92]	; (8006014 <HAL_PCD_MspInit+0xb4>)
 8005fb8:	f000 fae2 	bl	8006580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4810      	ldr	r0, [pc, #64]	; (8006014 <HAL_PCD_MspInit+0xb4>)
 8005fd2:	f000 fad5 	bl	8006580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fda:	4a0d      	ldr	r2, [pc, #52]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	6353      	str	r3, [r2, #52]	; 0x34
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	4a07      	ldr	r2, [pc, #28]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffa:	4b05      	ldr	r3, [pc, #20]	; (8006010 <HAL_PCD_MspInit+0xb0>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006006:	bf00      	nop
 8006008:	3728      	adds	r7, #40	; 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40023800 	.word	0x40023800
 8006014:	40020000 	.word	0x40020000

08006018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800601c:	bf00      	nop
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006026:	b480      	push	{r7}
 8006028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800602a:	e7fe      	b.n	800602a <HardFault_Handler+0x4>

0800602c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006030:	e7fe      	b.n	8006030 <MemManage_Handler+0x4>

08006032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006036:	e7fe      	b.n	8006036 <BusFault_Handler+0x4>

08006038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800603c:	e7fe      	b.n	800603c <UsageFault_Handler+0x4>

0800603e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800603e:	b480      	push	{r7}
 8006040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006042:	bf00      	nop
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006050:	bf00      	nop
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800605a:	b480      	push	{r7}
 800605c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800605e:	bf00      	nop
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800606c:	f000 f934 	bl	80062d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006070:	bf00      	nop
 8006072:	bd80      	pop	{r7, pc}

08006074 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006078:	f44f 7080 	mov.w	r0, #256	; 0x100
 800607c:	f000 fc44 	bl	8006908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006080:	bf00      	nop
 8006082:	bd80      	pop	{r7, pc}

08006084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006088:	4802      	ldr	r0, [pc, #8]	; (8006094 <TIM2_IRQHandler+0x10>)
 800608a:	f002 fd6e 	bl	8008b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20062dd0 	.word	0x20062dd0

08006098 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e00a      	b.n	80060c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060aa:	f3af 8000 	nop.w
 80060ae:	4601      	mov	r1, r0
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	60ba      	str	r2, [r7, #8]
 80060b6:	b2ca      	uxtb	r2, r1
 80060b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	3301      	adds	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	dbf0      	blt.n	80060aa <_read+0x12>
	}

return len;
 80060c8:	687b      	ldr	r3, [r7, #4]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e009      	b.n	80060f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	60ba      	str	r2, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fa fddb 	bl	8000ca8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	3301      	adds	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	dbf1      	blt.n	80060e4 <_write+0x12>
	}
	return len;
 8006100:	687b      	ldr	r3, [r7, #4]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <_close>:

int _close(int file)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	return -1;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006132:	605a      	str	r2, [r3, #4]
	return 0;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <_isatty>:

int _isatty(int file)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
	return 1;
 800614a:	2301      	movs	r3, #1
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
	return 0;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800617c:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <_sbrk+0x5c>)
 800617e:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <_sbrk+0x60>)
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006188:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <_sbrk+0x64>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <_sbrk+0x64>)
 8006192:	4a12      	ldr	r2, [pc, #72]	; (80061dc <_sbrk+0x68>)
 8006194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <_sbrk+0x64>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d207      	bcs.n	80061b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061a4:	f004 fc00 	bl	800a9a8 <__errno>
 80061a8:	4602      	mov	r2, r0
 80061aa:	230c      	movs	r3, #12
 80061ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
 80061b2:	e009      	b.n	80061c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <_sbrk+0x64>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <_sbrk+0x64>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4413      	add	r3, r2
 80061c2:	4a05      	ldr	r2, [pc, #20]	; (80061d8 <_sbrk+0x64>)
 80061c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061c6:	68fb      	ldr	r3, [r7, #12]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20080000 	.word	0x20080000
 80061d4:	00000400 	.word	0x00000400
 80061d8:	2006272c 	.word	0x2006272c
 80061dc:	20062e60 	.word	0x20062e60

080061e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061e4:	4b08      	ldr	r3, [pc, #32]	; (8006208 <SystemInit+0x28>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ea:	4a07      	ldr	r2, [pc, #28]	; (8006208 <SystemInit+0x28>)
 80061ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <SystemInit+0x28>)
 80061f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061fa:	609a      	str	r2, [r3, #8]
#endif
}
 80061fc:	bf00      	nop
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800620c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006212:	e003      	b.n	800621c <LoopCopyDataInit>

08006214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800621a:	3104      	adds	r1, #4

0800621c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800621c:	480b      	ldr	r0, [pc, #44]	; (800624c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006224:	d3f6      	bcc.n	8006214 <CopyDataInit>
  ldr  r2, =_sbss
 8006226:	4a0b      	ldr	r2, [pc, #44]	; (8006254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006228:	e002      	b.n	8006230 <LoopFillZerobss>

0800622a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800622a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800622c:	f842 3b04 	str.w	r3, [r2], #4

08006230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006234:	d3f9      	bcc.n	800622a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006236:	f7ff ffd3 	bl	80061e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800623a:	f004 fbbb 	bl	800a9b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800623e:	f7fe fe9b 	bl	8004f78 <main>
  bx  lr    
 8006242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006244:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006248:	0800e6b0 	.word	0x0800e6b0
  ldr  r0, =_sdata
 800624c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006250:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8006254:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8006258:	20062e5c 	.word	0x20062e5c

0800625c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800625c:	e7fe      	b.n	800625c <ADC_IRQHandler>

0800625e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006262:	2003      	movs	r0, #3
 8006264:	f000 f94a 	bl	80064fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006268:	2000      	movs	r0, #0
 800626a:	f000 f805 	bl	8006278 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800626e:	f7ff fc27 	bl	8005ac0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <HAL_InitTick+0x54>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <HAL_InitTick+0x58>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	4619      	mov	r1, r3
 800628a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800628e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	4618      	mov	r0, r3
 8006298:	f000 f965 	bl	8006566 <HAL_SYSTICK_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e00e      	b.n	80062c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b0f      	cmp	r3, #15
 80062aa:	d80a      	bhi.n	80062c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062ac:	2200      	movs	r2, #0
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	f000 f92d 	bl	8006512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062b8:	4a06      	ldr	r2, [pc, #24]	; (80062d4 <HAL_InitTick+0x5c>)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2000001c 	.word	0x2000001c
 80062d0:	20000024 	.word	0x20000024
 80062d4:	20000020 	.word	0x20000020

080062d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062dc:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <HAL_IncTick+0x20>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <HAL_IncTick+0x24>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4413      	add	r3, r2
 80062e8:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HAL_IncTick+0x24>)
 80062ea:	6013      	str	r3, [r2, #0]
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000024 	.word	0x20000024
 80062fc:	20062e54 	.word	0x20062e54

08006300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return uwTick;
 8006304:	4b03      	ldr	r3, [pc, #12]	; (8006314 <HAL_GetTick+0x14>)
 8006306:	681b      	ldr	r3, [r3, #0]
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20062e54 	.word	0x20062e54

08006318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006320:	f7ff ffee 	bl	8006300 <HAL_GetTick>
 8006324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d005      	beq.n	800633e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <HAL_Delay+0x40>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800633e:	bf00      	nop
 8006340:	f7ff ffde 	bl	8006300 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d8f7      	bhi.n	8006340 <HAL_Delay+0x28>
  {
  }
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000024 	.word	0x20000024

0800635c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <__NVIC_SetPriorityGrouping+0x40>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006378:	4013      	ands	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006386:	4313      	orrs	r3, r2
 8006388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800638a:	4a04      	ldr	r2, [pc, #16]	; (800639c <__NVIC_SetPriorityGrouping+0x40>)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	60d3      	str	r3, [r2, #12]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	e000ed00 	.word	0xe000ed00
 80063a0:	05fa0000 	.word	0x05fa0000

080063a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <__NVIC_GetPriorityGrouping+0x18>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	f003 0307 	and.w	r3, r3, #7
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	e000ed00 	.word	0xe000ed00

080063c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db0b      	blt.n	80063ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	f003 021f 	and.w	r2, r3, #31
 80063d8:	4907      	ldr	r1, [pc, #28]	; (80063f8 <__NVIC_EnableIRQ+0x38>)
 80063da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2001      	movs	r0, #1
 80063e2:	fa00 f202 	lsl.w	r2, r0, r2
 80063e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	e000e100 	.word	0xe000e100

080063fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	6039      	str	r1, [r7, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640c:	2b00      	cmp	r3, #0
 800640e:	db0a      	blt.n	8006426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	490c      	ldr	r1, [pc, #48]	; (8006448 <__NVIC_SetPriority+0x4c>)
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	0112      	lsls	r2, r2, #4
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	440b      	add	r3, r1
 8006420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006424:	e00a      	b.n	800643c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	4908      	ldr	r1, [pc, #32]	; (800644c <__NVIC_SetPriority+0x50>)
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	3b04      	subs	r3, #4
 8006434:	0112      	lsls	r2, r2, #4
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	440b      	add	r3, r1
 800643a:	761a      	strb	r2, [r3, #24]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	e000e100 	.word	0xe000e100
 800644c:	e000ed00 	.word	0xe000ed00

08006450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006450:	b480      	push	{r7}
 8006452:	b089      	sub	sp, #36	; 0x24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f1c3 0307 	rsb	r3, r3, #7
 800646a:	2b04      	cmp	r3, #4
 800646c:	bf28      	it	cs
 800646e:	2304      	movcs	r3, #4
 8006470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3304      	adds	r3, #4
 8006476:	2b06      	cmp	r3, #6
 8006478:	d902      	bls.n	8006480 <NVIC_EncodePriority+0x30>
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3b03      	subs	r3, #3
 800647e:	e000      	b.n	8006482 <NVIC_EncodePriority+0x32>
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006484:	f04f 32ff 	mov.w	r2, #4294967295
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43da      	mvns	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	401a      	ands	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006498:	f04f 31ff 	mov.w	r1, #4294967295
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	43d9      	mvns	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064a8:	4313      	orrs	r3, r2
         );
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3724      	adds	r7, #36	; 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064c8:	d301      	bcc.n	80064ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064ca:	2301      	movs	r3, #1
 80064cc:	e00f      	b.n	80064ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064ce:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <SysTick_Config+0x40>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064d6:	210f      	movs	r1, #15
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	f7ff ff8e 	bl	80063fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064e0:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <SysTick_Config+0x40>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064e6:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <SysTick_Config+0x40>)
 80064e8:	2207      	movs	r2, #7
 80064ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	e000e010 	.word	0xe000e010

080064fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff29 	bl	800635c <__NVIC_SetPriorityGrouping>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	4603      	mov	r3, r0
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
 800651e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006524:	f7ff ff3e 	bl	80063a4 <__NVIC_GetPriorityGrouping>
 8006528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f7ff ff8e 	bl	8006450 <NVIC_EncodePriority>
 8006534:	4602      	mov	r2, r0
 8006536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff ff5d 	bl	80063fc <__NVIC_SetPriority>
}
 8006542:	bf00      	nop
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	4603      	mov	r3, r0
 8006552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff ff31 	bl	80063c0 <__NVIC_EnableIRQ>
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ffa2 	bl	80064b8 <SysTick_Config>
 8006574:	4603      	mov	r3, r0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800658a:	2300      	movs	r3, #0
 800658c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006592:	2300      	movs	r3, #0
 8006594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006596:	2300      	movs	r3, #0
 8006598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e175      	b.n	800688c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80065a0:	2201      	movs	r2, #1
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4013      	ands	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	f040 8164 	bne.w	8006886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d00b      	beq.n	80065de <HAL_GPIO_Init+0x5e>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d007      	beq.n	80065de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065d2:	2b11      	cmp	r3, #17
 80065d4:	d003      	beq.n	80065de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b12      	cmp	r3, #18
 80065dc:	d130      	bne.n	8006640 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	2203      	movs	r2, #3
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4313      	orrs	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006614:	2201      	movs	r2, #1
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	43db      	mvns	r3, r3
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	4013      	ands	r3, r2
 8006622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 0201 	and.w	r2, r3, #1
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4313      	orrs	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_Init+0x100>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b12      	cmp	r3, #18
 800667e:	d123      	bne.n	80066c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	08da      	lsrs	r2, r3, #3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3208      	adds	r2, #8
 8006688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	220f      	movs	r2, #15
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4013      	ands	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	08da      	lsrs	r2, r3, #3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3208      	adds	r2, #8
 80066c2:	69b9      	ldr	r1, [r7, #24]
 80066c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	2203      	movs	r2, #3
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	43db      	mvns	r3, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4013      	ands	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 0203 	and.w	r2, r3, #3
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80be 	beq.w	8006886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800670a:	4b65      	ldr	r3, [pc, #404]	; (80068a0 <HAL_GPIO_Init+0x320>)
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	4a64      	ldr	r2, [pc, #400]	; (80068a0 <HAL_GPIO_Init+0x320>)
 8006710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006714:	6453      	str	r3, [r2, #68]	; 0x44
 8006716:	4b62      	ldr	r3, [pc, #392]	; (80068a0 <HAL_GPIO_Init+0x320>)
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006722:	4a60      	ldr	r2, [pc, #384]	; (80068a4 <HAL_GPIO_Init+0x324>)
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	089b      	lsrs	r3, r3, #2
 8006728:	3302      	adds	r3, #2
 800672a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	220f      	movs	r2, #15
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a57      	ldr	r2, [pc, #348]	; (80068a8 <HAL_GPIO_Init+0x328>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d037      	beq.n	80067be <HAL_GPIO_Init+0x23e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a56      	ldr	r2, [pc, #344]	; (80068ac <HAL_GPIO_Init+0x32c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d031      	beq.n	80067ba <HAL_GPIO_Init+0x23a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a55      	ldr	r2, [pc, #340]	; (80068b0 <HAL_GPIO_Init+0x330>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02b      	beq.n	80067b6 <HAL_GPIO_Init+0x236>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a54      	ldr	r2, [pc, #336]	; (80068b4 <HAL_GPIO_Init+0x334>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d025      	beq.n	80067b2 <HAL_GPIO_Init+0x232>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a53      	ldr	r2, [pc, #332]	; (80068b8 <HAL_GPIO_Init+0x338>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01f      	beq.n	80067ae <HAL_GPIO_Init+0x22e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a52      	ldr	r2, [pc, #328]	; (80068bc <HAL_GPIO_Init+0x33c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d019      	beq.n	80067aa <HAL_GPIO_Init+0x22a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a51      	ldr	r2, [pc, #324]	; (80068c0 <HAL_GPIO_Init+0x340>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_GPIO_Init+0x226>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a50      	ldr	r2, [pc, #320]	; (80068c4 <HAL_GPIO_Init+0x344>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00d      	beq.n	80067a2 <HAL_GPIO_Init+0x222>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a4f      	ldr	r2, [pc, #316]	; (80068c8 <HAL_GPIO_Init+0x348>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <HAL_GPIO_Init+0x21e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a4e      	ldr	r2, [pc, #312]	; (80068cc <HAL_GPIO_Init+0x34c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_GPIO_Init+0x21a>
 8006796:	2309      	movs	r3, #9
 8006798:	e012      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 800679a:	230a      	movs	r3, #10
 800679c:	e010      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 800679e:	2308      	movs	r3, #8
 80067a0:	e00e      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067a2:	2307      	movs	r3, #7
 80067a4:	e00c      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067a6:	2306      	movs	r3, #6
 80067a8:	e00a      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067aa:	2305      	movs	r3, #5
 80067ac:	e008      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067ae:	2304      	movs	r3, #4
 80067b0:	e006      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067b2:	2303      	movs	r3, #3
 80067b4:	e004      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e002      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067be:	2300      	movs	r3, #0
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	f002 0203 	and.w	r2, r2, #3
 80067c6:	0092      	lsls	r2, r2, #2
 80067c8:	4093      	lsls	r3, r2
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80067d0:	4934      	ldr	r1, [pc, #208]	; (80068a4 <HAL_GPIO_Init+0x324>)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	3302      	adds	r3, #2
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067de:	4b3c      	ldr	r3, [pc, #240]	; (80068d0 <HAL_GPIO_Init+0x350>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006802:	4a33      	ldr	r2, [pc, #204]	; (80068d0 <HAL_GPIO_Init+0x350>)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006808:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <HAL_GPIO_Init+0x350>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	43db      	mvns	r3, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4013      	ands	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800682c:	4a28      	ldr	r2, [pc, #160]	; (80068d0 <HAL_GPIO_Init+0x350>)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006832:	4b27      	ldr	r3, [pc, #156]	; (80068d0 <HAL_GPIO_Init+0x350>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006856:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <HAL_GPIO_Init+0x350>)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800685c:	4b1c      	ldr	r3, [pc, #112]	; (80068d0 <HAL_GPIO_Init+0x350>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <HAL_GPIO_Init+0x350>)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	3301      	adds	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b0f      	cmp	r3, #15
 8006890:	f67f ae86 	bls.w	80065a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006894:	bf00      	nop
 8006896:	3724      	adds	r7, #36	; 0x24
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40013800 	.word	0x40013800
 80068a8:	40020000 	.word	0x40020000
 80068ac:	40020400 	.word	0x40020400
 80068b0:	40020800 	.word	0x40020800
 80068b4:	40020c00 	.word	0x40020c00
 80068b8:	40021000 	.word	0x40021000
 80068bc:	40021400 	.word	0x40021400
 80068c0:	40021800 	.word	0x40021800
 80068c4:	40021c00 	.word	0x40021c00
 80068c8:	40022000 	.word	0x40022000
 80068cc:	40022400 	.word	0x40022400
 80068d0:	40013c00 	.word	0x40013c00

080068d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	807b      	strh	r3, [r7, #2]
 80068e0:	4613      	mov	r3, r2
 80068e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068e4:	787b      	ldrb	r3, [r7, #1]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80068f0:	e003      	b.n	80068fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80068f2:	887b      	ldrh	r3, [r7, #2]
 80068f4:	041a      	lsls	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	619a      	str	r2, [r3, #24]
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800691e:	4a05      	ldr	r2, [pc, #20]	; (8006934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fdc2 	bl	80044b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40013c00 	.word	0x40013c00

08006938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e07f      	b.n	8006a4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff f8d2 	bl	8005b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2224      	movs	r2, #36	; 0x24
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006988:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006998:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d107      	bne.n	80069b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ae:	609a      	str	r2, [r3, #8]
 80069b0:	e006      	b.n	80069c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d104      	bne.n	80069d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <HAL_I2C_Init+0x11c>)
 80069de:	430b      	orrs	r3, r1
 80069e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	ea42 0103 	orr.w	r1, r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	02008000 	.word	0x02008000

08006a58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	461a      	mov	r2, r3
 8006a64:	460b      	mov	r3, r1
 8006a66:	817b      	strh	r3, [r7, #10]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	f040 80da 	bne.w	8006c2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_I2C_Master_Transmit+0x30>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e0d3      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1d8>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a90:	f7ff fc36 	bl	8006300 <HAL_GetTick>
 8006a94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	2319      	movs	r3, #25
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fa00 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e0be      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2221      	movs	r2, #33	; 0x21
 8006ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2210      	movs	r2, #16
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	893a      	ldrh	r2, [r7, #8]
 8006ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2bff      	cmp	r3, #255	; 0xff
 8006ae2:	d90e      	bls.n	8006b02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	22ff      	movs	r2, #255	; 0xff
 8006ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	8979      	ldrh	r1, [r7, #10]
 8006af2:	4b51      	ldr	r3, [pc, #324]	; (8006c38 <HAL_I2C_Master_Transmit+0x1e0>)
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fb62 	bl	80071c4 <I2C_TransferConfig>
 8006b00:	e06c      	b.n	8006bdc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	8979      	ldrh	r1, [r7, #10]
 8006b14:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <HAL_I2C_Master_Transmit+0x1e0>)
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fb51 	bl	80071c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006b22:	e05b      	b.n	8006bdc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	6a39      	ldr	r1, [r7, #32]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f9fd 	bl	8006f28 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e07b      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d034      	beq.n	8006bdc <HAL_I2C_Master_Transmit+0x184>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d130      	bne.n	8006bdc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f98f 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e04d      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2bff      	cmp	r3, #255	; 0xff
 8006b9c:	d90e      	bls.n	8006bbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	22ff      	movs	r2, #255	; 0xff
 8006ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	8979      	ldrh	r1, [r7, #10]
 8006bac:	2300      	movs	r3, #0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fb05 	bl	80071c4 <I2C_TransferConfig>
 8006bba:	e00f      	b.n	8006bdc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	8979      	ldrh	r1, [r7, #10]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 faf4 	bl	80071c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d19e      	bne.n	8006b24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	6a39      	ldr	r1, [r7, #32]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f9dc 	bl	8006fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e01a      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <HAL_I2C_Master_Transmit+0x1e4>)
 8006c0e:	400b      	ands	r3, r1
 8006c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	80002000 	.word	0x80002000
 8006c3c:	fe00e800 	.word	0xfe00e800

08006c40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	817b      	strh	r3, [r7, #10]
 8006c50:	4613      	mov	r3, r2
 8006c52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	f040 80db 	bne.w	8006e18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2C_Master_Receive+0x30>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e0d4      	b.n	8006e1a <HAL_I2C_Master_Receive+0x1da>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c78:	f7ff fb42 	bl	8006300 <HAL_GetTick>
 8006c7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	2319      	movs	r3, #25
 8006c84:	2201      	movs	r2, #1
 8006c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f90c 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e0bf      	b.n	8006e1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2222      	movs	r2, #34	; 0x22
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	893a      	ldrh	r2, [r7, #8]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2bff      	cmp	r3, #255	; 0xff
 8006cca:	d90e      	bls.n	8006cea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	22ff      	movs	r2, #255	; 0xff
 8006cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	8979      	ldrh	r1, [r7, #10]
 8006cda:	4b52      	ldr	r3, [pc, #328]	; (8006e24 <HAL_I2C_Master_Receive+0x1e4>)
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fa6e 	bl	80071c4 <I2C_TransferConfig>
 8006ce8:	e06d      	b.n	8006dc6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	8979      	ldrh	r1, [r7, #10]
 8006cfc:	4b49      	ldr	r3, [pc, #292]	; (8006e24 <HAL_I2C_Master_Receive+0x1e4>)
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fa5d 	bl	80071c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006d0a:	e05c      	b.n	8006dc6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	6a39      	ldr	r1, [r7, #32]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f985 	bl	8007020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e07c      	b.n	8006e1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d034      	beq.n	8006dc6 <HAL_I2C_Master_Receive+0x186>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d130      	bne.n	8006dc6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f89a 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e04d      	b.n	8006e1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2bff      	cmp	r3, #255	; 0xff
 8006d86:	d90e      	bls.n	8006da6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	8979      	ldrh	r1, [r7, #10]
 8006d96:	2300      	movs	r3, #0
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fa10 	bl	80071c4 <I2C_TransferConfig>
 8006da4:	e00f      	b.n	8006dc6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	8979      	ldrh	r1, [r7, #10]
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f9ff 	bl	80071c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d19d      	bne.n	8006d0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	6a39      	ldr	r1, [r7, #32]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f8e7 	bl	8006fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e01a      	b.n	8006e1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2220      	movs	r2, #32
 8006dea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <HAL_I2C_Master_Receive+0x1e8>)
 8006df8:	400b      	ands	r3, r1
 8006dfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	80002400 	.word	0x80002400
 8006e28:	fe00e800 	.word	0xfe00e800

08006e2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e3a:	b2db      	uxtb	r3, r3
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d103      	bne.n	8006e7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d007      	beq.n	8006e9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	619a      	str	r2, [r3, #24]
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eb8:	e022      	b.n	8006f00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d01e      	beq.n	8006f00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec2:	f7ff fa1d 	bl	8006300 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d113      	bne.n	8006f00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	f043 0220 	orr.w	r2, r3, #32
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e00f      	b.n	8006f20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d0cd      	beq.n	8006eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f34:	e02c      	b.n	8006f90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f8dc 	bl	80070f8 <I2C_IsAcknowledgeFailed>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e02a      	b.n	8006fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d01e      	beq.n	8006f90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7ff f9d5 	bl	8006300 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d113      	bne.n	8006f90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	f043 0220 	orr.w	r2, r3, #32
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e007      	b.n	8006fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d1cb      	bne.n	8006f36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb4:	e028      	b.n	8007008 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f89c 	bl	80070f8 <I2C_IsAcknowledgeFailed>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e026      	b.n	8007018 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fca:	f7ff f999 	bl	8006300 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d113      	bne.n	8007008 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e007      	b.n	8007018 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b20      	cmp	r3, #32
 8007014:	d1cf      	bne.n	8006fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800702c:	e055      	b.n	80070da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f860 	bl	80070f8 <I2C_IsAcknowledgeFailed>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e053      	b.n	80070ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b20      	cmp	r3, #32
 800704e:	d129      	bne.n	80070a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b04      	cmp	r3, #4
 800705c:	d105      	bne.n	800706a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	e03f      	b.n	80070ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2220      	movs	r2, #32
 8007070:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6859      	ldr	r1, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800707e:	400b      	ands	r3, r1
 8007080:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e022      	b.n	80070ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a4:	f7ff f92c 	bl	8006300 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d302      	bcc.n	80070ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10f      	bne.n	80070da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070be:	f043 0220 	orr.w	r2, r3, #32
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e007      	b.n	80070ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d1a2      	bne.n	800702e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	fe00e800 	.word	0xfe00e800

080070f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b10      	cmp	r3, #16
 8007110:	d151      	bne.n	80071b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007112:	e022      	b.n	800715a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d01e      	beq.n	800715a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711c:	f7ff f8f0 	bl	8006300 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <I2C_IsAcknowledgeFailed+0x3a>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d113      	bne.n	800715a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e02e      	b.n	80071b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b20      	cmp	r3, #32
 8007166:	d1d5      	bne.n	8007114 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2210      	movs	r2, #16
 800716e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2220      	movs	r2, #32
 8007176:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff fe71 	bl	8006e60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6859      	ldr	r1, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800718a:	400b      	ands	r3, r1
 800718c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	f043 0204 	orr.w	r2, r3, #4
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	fe00e800 	.word	0xfe00e800

080071c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	817b      	strh	r3, [r7, #10]
 80071d2:	4613      	mov	r3, r2
 80071d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	0d5b      	lsrs	r3, r3, #21
 80071e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <I2C_TransferConfig+0x58>)
 80071e6:	430b      	orrs	r3, r1
 80071e8:	43db      	mvns	r3, r3
 80071ea:	ea02 0103 	and.w	r1, r2, r3
 80071ee:	897b      	ldrh	r3, [r7, #10]
 80071f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80071f4:	7a7b      	ldrb	r3, [r7, #9]
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	431a      	orrs	r2, r3
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	431a      	orrs	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	03ff63ff 	.word	0x03ff63ff

08007220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b20      	cmp	r3, #32
 8007234:	d138      	bne.n	80072a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007240:	2302      	movs	r3, #2
 8007242:	e032      	b.n	80072aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2224      	movs	r2, #36	; 0x24
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0201 	bic.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e000      	b.n	80072aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072a8:	2302      	movs	r3, #2
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d139      	bne.n	8007340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e033      	b.n	8007342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2224      	movs	r2, #36	; 0x24
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800734e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007350:	b08f      	sub	sp, #60	; 0x3c
 8007352:	af0a      	add	r7, sp, #40	; 0x28
 8007354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e116      	b.n	800758e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fe fdf0 	bl	8005f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2203      	movs	r2, #3
 8007384:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f003 f8aa 	bl	800a4f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	687e      	ldr	r6, [r7, #4]
 80073ac:	466d      	mov	r5, sp
 80073ae:	f106 0410 	add.w	r4, r6, #16
 80073b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073be:	e885 0003 	stmia.w	r5, {r0, r1}
 80073c2:	1d33      	adds	r3, r6, #4
 80073c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073c6:	6838      	ldr	r0, [r7, #0]
 80073c8:	f003 f83e 	bl	800a448 <USB_CoreInit>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e0d7      	b.n	800758e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f003 f898 	bl	800a51a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
 80073ee:	e04a      	b.n	8007486 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073f0:	7bfa      	ldrb	r2, [r7, #15]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	333d      	adds	r3, #61	; 0x3d
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007404:	7bfa      	ldrb	r2, [r7, #15]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	333c      	adds	r3, #60	; 0x3c
 8007414:	7bfa      	ldrb	r2, [r7, #15]
 8007416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007418:	7bfa      	ldrb	r2, [r7, #15]
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	b298      	uxth	r0, r3
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	3342      	adds	r3, #66	; 0x42
 800742c:	4602      	mov	r2, r0
 800742e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	333f      	adds	r3, #63	; 0x3f
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007444:	7bfa      	ldrb	r2, [r7, #15]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	3344      	adds	r3, #68	; 0x44
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	3348      	adds	r3, #72	; 0x48
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800746c:	7bfa      	ldrb	r2, [r7, #15]
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	3350      	adds	r3, #80	; 0x50
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	3301      	adds	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	429a      	cmp	r2, r3
 800748e:	d3af      	bcc.n	80073f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e044      	b.n	8007520 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007496:	7bfa      	ldrb	r2, [r7, #15]
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80074ac:	7bfa      	ldrb	r2, [r7, #15]
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80074be:	7bfa      	ldrb	r2, [r7, #15]
 80074c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80074c2:	7bfa      	ldrb	r2, [r7, #15]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007504:	7bfa      	ldrb	r2, [r7, #15]
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	3301      	adds	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
 8007520:	7bfa      	ldrb	r2, [r7, #15]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d3b5      	bcc.n	8007496 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	687e      	ldr	r6, [r7, #4]
 8007532:	466d      	mov	r5, sp
 8007534:	f106 0410 	add.w	r4, r6, #16
 8007538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800753a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800753c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800753e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007540:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007544:	e885 0003 	stmia.w	r5, {r0, r1}
 8007548:	1d33      	adds	r3, r6, #4
 800754a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800754c:	6838      	ldr	r0, [r7, #0]
 800754e:	f003 f80f 	bl	800a570 <USB_DevInit>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e014      	b.n	800758e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b01      	cmp	r3, #1
 800757a:	d102      	bne.n	8007582 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f80b 	bl	8007598 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f003 f9c1 	bl	800a90e <USB_DevDisconnect>

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007598 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <HAL_PCDEx_ActivateLPM+0x44>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	10000003 	.word	0x10000003

080075e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a04      	ldr	r2, [pc, #16]	; (80075fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ee:	6013      	str	r3, [r2, #0]
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40007000 	.word	0x40007000

08007600 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800760a:	4b23      	ldr	r3, [pc, #140]	; (8007698 <HAL_PWREx_EnableOverDrive+0x98>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	4a22      	ldr	r2, [pc, #136]	; (8007698 <HAL_PWREx_EnableOverDrive+0x98>)
 8007610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007614:	6413      	str	r3, [r2, #64]	; 0x40
 8007616:	4b20      	ldr	r3, [pc, #128]	; (8007698 <HAL_PWREx_EnableOverDrive+0x98>)
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007622:	4b1e      	ldr	r3, [pc, #120]	; (800769c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1d      	ldr	r2, [pc, #116]	; (800769c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800762e:	f7fe fe67 	bl	8006300 <HAL_GetTick>
 8007632:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007634:	e009      	b.n	800764a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007636:	f7fe fe63 	bl	8006300 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007644:	d901      	bls.n	800764a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e022      	b.n	8007690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <HAL_PWREx_EnableOverDrive+0x9c>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007656:	d1ee      	bne.n	8007636 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007658:	4b10      	ldr	r3, [pc, #64]	; (800769c <HAL_PWREx_EnableOverDrive+0x9c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a0f      	ldr	r2, [pc, #60]	; (800769c <HAL_PWREx_EnableOverDrive+0x9c>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007662:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007664:	f7fe fe4c 	bl	8006300 <HAL_GetTick>
 8007668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800766a:	e009      	b.n	8007680 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800766c:	f7fe fe48 	bl	8006300 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800767a:	d901      	bls.n	8007680 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e007      	b.n	8007690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007680:	4b06      	ldr	r3, [pc, #24]	; (800769c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800768c:	d1ee      	bne.n	800766c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40023800 	.word	0x40023800
 800769c:	40007000 	.word	0x40007000

080076a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80076a8:	2300      	movs	r3, #0
 80076aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e29b      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 8087 	beq.w	80077d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076c4:	4b96      	ldr	r3, [pc, #600]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 030c 	and.w	r3, r3, #12
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d00c      	beq.n	80076ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076d0:	4b93      	ldr	r3, [pc, #588]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 030c 	and.w	r3, r3, #12
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d112      	bne.n	8007702 <HAL_RCC_OscConfig+0x62>
 80076dc:	4b90      	ldr	r3, [pc, #576]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e8:	d10b      	bne.n	8007702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ea:	4b8d      	ldr	r3, [pc, #564]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d06c      	beq.n	80077d0 <HAL_RCC_OscConfig+0x130>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d168      	bne.n	80077d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e275      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770a:	d106      	bne.n	800771a <HAL_RCC_OscConfig+0x7a>
 800770c:	4b84      	ldr	r3, [pc, #528]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a83      	ldr	r2, [pc, #524]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e02e      	b.n	8007778 <HAL_RCC_OscConfig+0xd8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10c      	bne.n	800773c <HAL_RCC_OscConfig+0x9c>
 8007722:	4b7f      	ldr	r3, [pc, #508]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a7e      	ldr	r2, [pc, #504]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	4b7c      	ldr	r3, [pc, #496]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a7b      	ldr	r2, [pc, #492]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	e01d      	b.n	8007778 <HAL_RCC_OscConfig+0xd8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007744:	d10c      	bne.n	8007760 <HAL_RCC_OscConfig+0xc0>
 8007746:	4b76      	ldr	r3, [pc, #472]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a75      	ldr	r2, [pc, #468]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800774c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	4b73      	ldr	r3, [pc, #460]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a72      	ldr	r2, [pc, #456]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e00b      	b.n	8007778 <HAL_RCC_OscConfig+0xd8>
 8007760:	4b6f      	ldr	r3, [pc, #444]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a6e      	ldr	r2, [pc, #440]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	4b6c      	ldr	r3, [pc, #432]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a6b      	ldr	r2, [pc, #428]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d013      	beq.n	80077a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007780:	f7fe fdbe 	bl	8006300 <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007788:	f7fe fdba 	bl	8006300 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b64      	cmp	r3, #100	; 0x64
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e229      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4b61      	ldr	r3, [pc, #388]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f0      	beq.n	8007788 <HAL_RCC_OscConfig+0xe8>
 80077a6:	e014      	b.n	80077d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a8:	f7fe fdaa 	bl	8006300 <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077b0:	f7fe fda6 	bl	8006300 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b64      	cmp	r3, #100	; 0x64
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e215      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077c2:	4b57      	ldr	r3, [pc, #348]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f0      	bne.n	80077b0 <HAL_RCC_OscConfig+0x110>
 80077ce:	e000      	b.n	80077d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d069      	beq.n	80078b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077de:	4b50      	ldr	r3, [pc, #320]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 030c 	and.w	r3, r3, #12
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ea:	4b4d      	ldr	r3, [pc, #308]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 030c 	and.w	r3, r3, #12
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d11c      	bne.n	8007830 <HAL_RCC_OscConfig+0x190>
 80077f6:	4b4a      	ldr	r3, [pc, #296]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d116      	bne.n	8007830 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007802:	4b47      	ldr	r3, [pc, #284]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_RCC_OscConfig+0x17a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d001      	beq.n	800781a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e1e9      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800781a:	4b41      	ldr	r3, [pc, #260]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	493d      	ldr	r1, [pc, #244]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800782a:	4313      	orrs	r3, r2
 800782c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800782e:	e040      	b.n	80078b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d023      	beq.n	8007880 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007838:	4b39      	ldr	r3, [pc, #228]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a38      	ldr	r2, [pc, #224]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fe fd5c 	bl	8006300 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800784c:	f7fe fd58 	bl	8006300 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1c7      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800785e:	4b30      	ldr	r3, [pc, #192]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f0      	beq.n	800784c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800786a:	4b2d      	ldr	r3, [pc, #180]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	4929      	ldr	r1, [pc, #164]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 800787a:	4313      	orrs	r3, r2
 800787c:	600b      	str	r3, [r1, #0]
 800787e:	e018      	b.n	80078b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a26      	ldr	r2, [pc, #152]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800788c:	f7fe fd38 	bl	8006300 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007894:	f7fe fd34 	bl	8006300 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e1a3      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078a6:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f0      	bne.n	8007894 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d038      	beq.n	8007930 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d019      	beq.n	80078fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80078c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d2:	f7fe fd15 	bl	8006300 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078da:	f7fe fd11 	bl	8006300 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e180      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80078ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0x23a>
 80078f8:	e01a      	b.n	8007930 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 80078fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fe:	4a08      	ldr	r2, [pc, #32]	; (8007920 <HAL_RCC_OscConfig+0x280>)
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007906:	f7fe fcfb 	bl	8006300 <HAL_GetTick>
 800790a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800790c:	e00a      	b.n	8007924 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800790e:	f7fe fcf7 	bl	8006300 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d903      	bls.n	8007924 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e166      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
 8007920:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007924:	4b92      	ldr	r3, [pc, #584]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1ee      	bne.n	800790e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80a4 	beq.w	8007a86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800793e:	4b8c      	ldr	r3, [pc, #560]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10d      	bne.n	8007966 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800794a:	4b89      	ldr	r3, [pc, #548]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	4a88      	ldr	r2, [pc, #544]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007954:	6413      	str	r3, [r2, #64]	; 0x40
 8007956:	4b86      	ldr	r3, [pc, #536]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007966:	4b83      	ldr	r3, [pc, #524]	; (8007b74 <HAL_RCC_OscConfig+0x4d4>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796e:	2b00      	cmp	r3, #0
 8007970:	d118      	bne.n	80079a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007972:	4b80      	ldr	r3, [pc, #512]	; (8007b74 <HAL_RCC_OscConfig+0x4d4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a7f      	ldr	r2, [pc, #508]	; (8007b74 <HAL_RCC_OscConfig+0x4d4>)
 8007978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800797e:	f7fe fcbf 	bl	8006300 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007984:	e008      	b.n	8007998 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007986:	f7fe fcbb 	bl	8006300 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b64      	cmp	r3, #100	; 0x64
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e12a      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007998:	4b76      	ldr	r3, [pc, #472]	; (8007b74 <HAL_RCC_OscConfig+0x4d4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f0      	beq.n	8007986 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d106      	bne.n	80079ba <HAL_RCC_OscConfig+0x31a>
 80079ac:	4b70      	ldr	r3, [pc, #448]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4a6f      	ldr	r2, [pc, #444]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6713      	str	r3, [r2, #112]	; 0x70
 80079b8:	e02d      	b.n	8007a16 <HAL_RCC_OscConfig+0x376>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10c      	bne.n	80079dc <HAL_RCC_OscConfig+0x33c>
 80079c2:	4b6b      	ldr	r3, [pc, #428]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	4a6a      	ldr	r2, [pc, #424]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	6713      	str	r3, [r2, #112]	; 0x70
 80079ce:	4b68      	ldr	r3, [pc, #416]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	4a67      	ldr	r2, [pc, #412]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079d4:	f023 0304 	bic.w	r3, r3, #4
 80079d8:	6713      	str	r3, [r2, #112]	; 0x70
 80079da:	e01c      	b.n	8007a16 <HAL_RCC_OscConfig+0x376>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b05      	cmp	r3, #5
 80079e2:	d10c      	bne.n	80079fe <HAL_RCC_OscConfig+0x35e>
 80079e4:	4b62      	ldr	r3, [pc, #392]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e8:	4a61      	ldr	r2, [pc, #388]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079ea:	f043 0304 	orr.w	r3, r3, #4
 80079ee:	6713      	str	r3, [r2, #112]	; 0x70
 80079f0:	4b5f      	ldr	r3, [pc, #380]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	4a5e      	ldr	r2, [pc, #376]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	6713      	str	r3, [r2, #112]	; 0x70
 80079fc:	e00b      	b.n	8007a16 <HAL_RCC_OscConfig+0x376>
 80079fe:	4b5c      	ldr	r3, [pc, #368]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	4a5b      	ldr	r2, [pc, #364]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	6713      	str	r3, [r2, #112]	; 0x70
 8007a0a:	4b59      	ldr	r3, [pc, #356]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	4a58      	ldr	r2, [pc, #352]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a10:	f023 0304 	bic.w	r3, r3, #4
 8007a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d015      	beq.n	8007a4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1e:	f7fe fc6f 	bl	8006300 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a24:	e00a      	b.n	8007a3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a26:	f7fe fc6b 	bl	8006300 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e0d8      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a3c:	4b4c      	ldr	r3, [pc, #304]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0ee      	beq.n	8007a26 <HAL_RCC_OscConfig+0x386>
 8007a48:	e014      	b.n	8007a74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a4a:	f7fe fc59 	bl	8006300 <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a50:	e00a      	b.n	8007a68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a52:	f7fe fc55 	bl	8006300 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e0c2      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a68:	4b41      	ldr	r3, [pc, #260]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1ee      	bne.n	8007a52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d105      	bne.n	8007a86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a7a:	4b3d      	ldr	r3, [pc, #244]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	4a3c      	ldr	r2, [pc, #240]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80ae 	beq.w	8007bec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a90:	4b37      	ldr	r3, [pc, #220]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 030c 	and.w	r3, r3, #12
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d06d      	beq.n	8007b78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d14b      	bne.n	8007b3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa4:	4b32      	ldr	r3, [pc, #200]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a31      	ldr	r2, [pc, #196]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7fe fc26 	bl	8006300 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab8:	f7fe fc22 	bl	8006300 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e091      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f0      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69da      	ldr	r2, [r3, #28]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	019b      	lsls	r3, r3, #6
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	085b      	lsrs	r3, r3, #1
 8007aee:	3b01      	subs	r3, #1
 8007af0:	041b      	lsls	r3, r3, #16
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	061b      	lsls	r3, r3, #24
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	071b      	lsls	r3, r3, #28
 8007b02:	491b      	ldr	r1, [pc, #108]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a18      	ldr	r2, [pc, #96]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b14:	f7fe fbf4 	bl	8006300 <HAL_GetTick>
 8007b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b1c:	f7fe fbf0 	bl	8006300 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e05f      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b2e:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0f0      	beq.n	8007b1c <HAL_RCC_OscConfig+0x47c>
 8007b3a:	e057      	b.n	8007bec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0b      	ldr	r2, [pc, #44]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7fe fbda 	bl	8006300 <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b50:	f7fe fbd6 	bl	8006300 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e045      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b62:	4b03      	ldr	r3, [pc, #12]	; (8007b70 <HAL_RCC_OscConfig+0x4d0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x4b0>
 8007b6e:	e03d      	b.n	8007bec <HAL_RCC_OscConfig+0x54c>
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007b78:	4b1f      	ldr	r3, [pc, #124]	; (8007bf8 <HAL_RCC_OscConfig+0x558>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d030      	beq.n	8007be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d129      	bne.n	8007be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d122      	bne.n	8007be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ba8:	4013      	ands	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d119      	bne.n	8007be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d10f      	bne.n	8007be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d107      	bne.n	8007be8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d001      	beq.n	8007bec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800

08007bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0d0      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c14:	4b6a      	ldr	r3, [pc, #424]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 030f 	and.w	r3, r3, #15
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d910      	bls.n	8007c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c22:	4b67      	ldr	r3, [pc, #412]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 020f 	bic.w	r2, r3, #15
 8007c2a:	4965      	ldr	r1, [pc, #404]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c32:	4b63      	ldr	r3, [pc, #396]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d001      	beq.n	8007c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0b8      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d020      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c5c:	4b59      	ldr	r3, [pc, #356]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4a58      	ldr	r2, [pc, #352]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c74:	4b53      	ldr	r3, [pc, #332]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a52      	ldr	r2, [pc, #328]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c80:	4b50      	ldr	r3, [pc, #320]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	494d      	ldr	r1, [pc, #308]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d040      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d107      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca6:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d115      	bne.n	8007cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e07f      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d107      	bne.n	8007cce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cbe:	4b41      	ldr	r3, [pc, #260]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e073      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cce:	4b3d      	ldr	r3, [pc, #244]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e06b      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cde:	4b39      	ldr	r3, [pc, #228]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f023 0203 	bic.w	r2, r3, #3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4936      	ldr	r1, [pc, #216]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf0:	f7fe fb06 	bl	8006300 <HAL_GetTick>
 8007cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf6:	e00a      	b.n	8007d0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf8:	f7fe fb02 	bl	8006300 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e053      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0e:	4b2d      	ldr	r3, [pc, #180]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 020c 	and.w	r2, r3, #12
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d1eb      	bne.n	8007cf8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d20:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 030f 	and.w	r3, r3, #15
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d210      	bcs.n	8007d50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f023 020f 	bic.w	r2, r3, #15
 8007d36:	4922      	ldr	r1, [pc, #136]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d3e:	4b20      	ldr	r3, [pc, #128]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d001      	beq.n	8007d50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e032      	b.n	8007db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d5c:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4916      	ldr	r1, [pc, #88]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	490e      	ldr	r1, [pc, #56]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d8e:	f000 f821 	bl	8007dd4 <HAL_RCC_GetSysClockFreq>
 8007d92:	4601      	mov	r1, r0
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	091b      	lsrs	r3, r3, #4
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	4a0a      	ldr	r2, [pc, #40]	; (8007dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8007da0:	5cd3      	ldrb	r3, [r2, r3]
 8007da2:	fa21 f303 	lsr.w	r3, r1, r3
 8007da6:	4a09      	ldr	r2, [pc, #36]	; (8007dcc <HAL_RCC_ClockConfig+0x1d0>)
 8007da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007daa:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <HAL_RCC_ClockConfig+0x1d4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fa62 	bl	8006278 <HAL_InitTick>

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40023c00 	.word	0x40023c00
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	0800e1d0 	.word	0x0800e1d0
 8007dcc:	2000001c 	.word	0x2000001c
 8007dd0:	20000020 	.word	0x20000020

08007dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	2300      	movs	r3, #0
 8007de4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dea:	4b63      	ldr	r3, [pc, #396]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 030c 	and.w	r3, r3, #12
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d007      	beq.n	8007e06 <HAL_RCC_GetSysClockFreq+0x32>
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d008      	beq.n	8007e0c <HAL_RCC_GetSysClockFreq+0x38>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 80b4 	bne.w	8007f68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e00:	4b5e      	ldr	r3, [pc, #376]	; (8007f7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007e02:	60bb      	str	r3, [r7, #8]
      break;
 8007e04:	e0b3      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e06:	4b5e      	ldr	r3, [pc, #376]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007e08:	60bb      	str	r3, [r7, #8]
      break;
 8007e0a:	e0b0      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e0c:	4b5a      	ldr	r3, [pc, #360]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007e16:	4b58      	ldr	r3, [pc, #352]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d04a      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e22:	4b55      	ldr	r3, [pc, #340]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	f04f 0400 	mov.w	r4, #0
 8007e2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	ea03 0501 	and.w	r5, r3, r1
 8007e38:	ea04 0602 	and.w	r6, r4, r2
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4632      	mov	r2, r6
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	f04f 0400 	mov.w	r4, #0
 8007e48:	0154      	lsls	r4, r2, #5
 8007e4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007e4e:	014b      	lsls	r3, r1, #5
 8007e50:	4619      	mov	r1, r3
 8007e52:	4622      	mov	r2, r4
 8007e54:	1b49      	subs	r1, r1, r5
 8007e56:	eb62 0206 	sbc.w	r2, r2, r6
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	f04f 0400 	mov.w	r4, #0
 8007e62:	0194      	lsls	r4, r2, #6
 8007e64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007e68:	018b      	lsls	r3, r1, #6
 8007e6a:	1a5b      	subs	r3, r3, r1
 8007e6c:	eb64 0402 	sbc.w	r4, r4, r2
 8007e70:	f04f 0100 	mov.w	r1, #0
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	00e2      	lsls	r2, r4, #3
 8007e7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007e7e:	00d9      	lsls	r1, r3, #3
 8007e80:	460b      	mov	r3, r1
 8007e82:	4614      	mov	r4, r2
 8007e84:	195b      	adds	r3, r3, r5
 8007e86:	eb44 0406 	adc.w	r4, r4, r6
 8007e8a:	f04f 0100 	mov.w	r1, #0
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	0262      	lsls	r2, r4, #9
 8007e94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007e98:	0259      	lsls	r1, r3, #9
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f04f 0400 	mov.w	r4, #0
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4623      	mov	r3, r4
 8007eac:	f7f8 fa20 	bl	80002f0 <__aeabi_uldivmod>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e049      	b.n	8007f4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb8:	4b2f      	ldr	r3, [pc, #188]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	099b      	lsrs	r3, r3, #6
 8007ebe:	f04f 0400 	mov.w	r4, #0
 8007ec2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	ea03 0501 	and.w	r5, r3, r1
 8007ece:	ea04 0602 	and.w	r6, r4, r2
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	f04f 0400 	mov.w	r4, #0
 8007ede:	0154      	lsls	r4, r2, #5
 8007ee0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007ee4:	014b      	lsls	r3, r1, #5
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4622      	mov	r2, r4
 8007eea:	1b49      	subs	r1, r1, r5
 8007eec:	eb62 0206 	sbc.w	r2, r2, r6
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	f04f 0400 	mov.w	r4, #0
 8007ef8:	0194      	lsls	r4, r2, #6
 8007efa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007efe:	018b      	lsls	r3, r1, #6
 8007f00:	1a5b      	subs	r3, r3, r1
 8007f02:	eb64 0402 	sbc.w	r4, r4, r2
 8007f06:	f04f 0100 	mov.w	r1, #0
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	00e2      	lsls	r2, r4, #3
 8007f10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f14:	00d9      	lsls	r1, r3, #3
 8007f16:	460b      	mov	r3, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	195b      	adds	r3, r3, r5
 8007f1c:	eb44 0406 	adc.w	r4, r4, r6
 8007f20:	f04f 0100 	mov.w	r1, #0
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	02a2      	lsls	r2, r4, #10
 8007f2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007f2e:	0299      	lsls	r1, r3, #10
 8007f30:	460b      	mov	r3, r1
 8007f32:	4614      	mov	r4, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	4621      	mov	r1, r4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f04f 0400 	mov.w	r4, #0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4623      	mov	r3, r4
 8007f42:	f7f8 f9d5 	bl	80002f0 <__aeabi_uldivmod>
 8007f46:	4603      	mov	r3, r0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	0c1b      	lsrs	r3, r3, #16
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	3301      	adds	r3, #1
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f64:	60bb      	str	r3, [r7, #8]
      break;
 8007f66:	e002      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007f6a:	60bb      	str	r3, [r7, #8]
      break;
 8007f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	00f42400 	.word	0x00f42400
 8007f80:	007a1200 	.word	0x007a1200

08007f84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f88:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	2000001c 	.word	0x2000001c

08007f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fa0:	f7ff fff0 	bl	8007f84 <HAL_RCC_GetHCLKFreq>
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	0a9b      	lsrs	r3, r3, #10
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	4a03      	ldr	r2, [pc, #12]	; (8007fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fb2:	5cd3      	ldrb	r3, [r2, r3]
 8007fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	0800e1e0 	.word	0x0800e1e0

08007fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fc8:	f7ff ffdc 	bl	8007f84 <HAL_RCC_GetHCLKFreq>
 8007fcc:	4601      	mov	r1, r0
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	0b5b      	lsrs	r3, r3, #13
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4a03      	ldr	r2, [pc, #12]	; (8007fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fda:	5cd3      	ldrb	r3, [r2, r3]
 8007fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	0800e1e0 	.word	0x0800e1e0

08007fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d012      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008014:	4b69      	ldr	r3, [pc, #420]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	4a68      	ldr	r2, [pc, #416]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800801e:	6093      	str	r3, [r2, #8]
 8008020:	4b66      	ldr	r3, [pc, #408]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008028:	4964      	ldr	r1, [pc, #400]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802a:	4313      	orrs	r3, r2
 800802c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d017      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008046:	4b5d      	ldr	r3, [pc, #372]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	4959      	ldr	r1, [pc, #356]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008064:	d101      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008066:	2301      	movs	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008072:	2301      	movs	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d017      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008082:	4b4e      	ldr	r3, [pc, #312]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	494a      	ldr	r1, [pc, #296]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008092:	4313      	orrs	r3, r2
 8008094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a0:	d101      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80080ae:	2301      	movs	r3, #1
 80080b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80080be:	2301      	movs	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 808b 	beq.w	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080d0:	4b3a      	ldr	r3, [pc, #232]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	4a39      	ldr	r2, [pc, #228]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080da:	6413      	str	r3, [r2, #64]	; 0x40
 80080dc:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080e8:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a34      	ldr	r2, [pc, #208]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f4:	f7fe f904 	bl	8006300 <HAL_GetTick>
 80080f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fc:	f7fe f900 	bl	8006300 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b64      	cmp	r3, #100	; 0x64
 8008108:	d901      	bls.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e38d      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800810e:	4b2c      	ldr	r3, [pc, #176]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800811a:	4b28      	ldr	r3, [pc, #160]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d035      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	429a      	cmp	r2, r3
 8008136:	d02e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008138:	4b20      	ldr	r3, [pc, #128]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008142:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800814c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800814e:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	4a1a      	ldr	r2, [pc, #104]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800815a:	4a18      	ldr	r2, [pc, #96]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008160:	4b16      	ldr	r3, [pc, #88]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b01      	cmp	r3, #1
 800816a:	d114      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816c:	f7fe f8c8 	bl	8006300 <HAL_GetTick>
 8008170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008172:	e00a      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008174:	f7fe f8c4 	bl	8006300 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e34f      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0ee      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800819e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a2:	d111      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80081b2:	400b      	ands	r3, r1
 80081b4:	4901      	ldr	r1, [pc, #4]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
 80081ba:	e00b      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80081bc:	40023800 	.word	0x40023800
 80081c0:	40007000 	.word	0x40007000
 80081c4:	0ffffcff 	.word	0x0ffffcff
 80081c8:	4bb3      	ldr	r3, [pc, #716]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	4ab2      	ldr	r2, [pc, #712]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80081ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081d2:	6093      	str	r3, [r2, #8]
 80081d4:	4bb0      	ldr	r3, [pc, #704]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80081d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e0:	49ad      	ldr	r1, [pc, #692]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081f2:	4ba9      	ldr	r3, [pc, #676]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80081f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f8:	4aa7      	ldr	r2, [pc, #668]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80081fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008202:	4ba5      	ldr	r3, [pc, #660]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	49a2      	ldr	r1, [pc, #648]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008220:	4b9d      	ldr	r3, [pc, #628]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822e:	499a      	ldr	r1, [pc, #616]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008230:	4313      	orrs	r3, r2
 8008232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008242:	4b95      	ldr	r3, [pc, #596]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008250:	4991      	ldr	r1, [pc, #580]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008252:	4313      	orrs	r3, r2
 8008254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008264:	4b8c      	ldr	r3, [pc, #560]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008272:	4989      	ldr	r1, [pc, #548]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008274:	4313      	orrs	r3, r2
 8008276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008286:	4b84      	ldr	r3, [pc, #528]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008294:	4980      	ldr	r1, [pc, #512]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008296:	4313      	orrs	r3, r2
 8008298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082a8:	4b7b      	ldr	r3, [pc, #492]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ae:	f023 0203 	bic.w	r2, r3, #3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	4978      	ldr	r1, [pc, #480]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082ca:	4b73      	ldr	r3, [pc, #460]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d0:	f023 020c 	bic.w	r2, r3, #12
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d8:	496f      	ldr	r1, [pc, #444]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082ec:	4b6a      	ldr	r3, [pc, #424]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fa:	4967      	ldr	r1, [pc, #412]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800830e:	4b62      	ldr	r3, [pc, #392]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	495e      	ldr	r1, [pc, #376]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008330:	4b59      	ldr	r3, [pc, #356]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	4956      	ldr	r1, [pc, #344]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008340:	4313      	orrs	r3, r2
 8008342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008352:	4b51      	ldr	r3, [pc, #324]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008360:	494d      	ldr	r1, [pc, #308]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008374:	4b48      	ldr	r3, [pc, #288]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008382:	4945      	ldr	r1, [pc, #276]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008396:	4b40      	ldr	r3, [pc, #256]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a4:	493c      	ldr	r1, [pc, #240]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80083b8:	4b37      	ldr	r3, [pc, #220]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c6:	4934      	ldr	r1, [pc, #208]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d011      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083da:	4b2f      	ldr	r3, [pc, #188]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083e8:	492b      	ldr	r1, [pc, #172]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f8:	d101      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800840a:	2301      	movs	r3, #1
 800840c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800841a:	4b1f      	ldr	r3, [pc, #124]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008428:	491b      	ldr	r1, [pc, #108]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800843c:	4b16      	ldr	r3, [pc, #88]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800844c:	4912      	ldr	r1, [pc, #72]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008460:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008466:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008470:	4909      	ldr	r1, [pc, #36]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00f      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800848a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008494:	e002      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008496:	bf00      	nop
 8008498:	40023800 	.word	0x40023800
 800849c:	4985      	ldr	r1, [pc, #532]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80084b0:	4b80      	ldr	r3, [pc, #512]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80084b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c0:	497c      	ldr	r1, [pc, #496]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d005      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084d6:	f040 80d6 	bne.w	8008686 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084da:	4b76      	ldr	r3, [pc, #472]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a75      	ldr	r2, [pc, #468]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80084e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e6:	f7fd ff0b 	bl	8006300 <HAL_GetTick>
 80084ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084ec:	e008      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084ee:	f7fd ff07 	bl	8006300 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b64      	cmp	r3, #100	; 0x64
 80084fa:	d901      	bls.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e194      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008500:	4b6c      	ldr	r3, [pc, #432]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f0      	bne.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d021      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851c:	2b00      	cmp	r3, #0
 800851e:	d11d      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008520:	4b64      	ldr	r3, [pc, #400]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008526:	0c1b      	lsrs	r3, r3, #16
 8008528:	f003 0303 	and.w	r3, r3, #3
 800852c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800852e:	4b61      	ldr	r3, [pc, #388]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008534:	0e1b      	lsrs	r3, r3, #24
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	019a      	lsls	r2, r3, #6
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	041b      	lsls	r3, r3, #16
 8008546:	431a      	orrs	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	061b      	lsls	r3, r3, #24
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	071b      	lsls	r3, r3, #28
 8008554:	4957      	ldr	r1, [pc, #348]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008556:	4313      	orrs	r3, r2
 8008558:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008570:	d00a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800857a:	2b00      	cmp	r3, #0
 800857c:	d02e      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008586:	d129      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008588:	4b4a      	ldr	r3, [pc, #296]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800858a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008596:	4b47      	ldr	r3, [pc, #284]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859c:	0f1b      	lsrs	r3, r3, #28
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	019a      	lsls	r2, r3, #6
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	041b      	lsls	r3, r3, #16
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	061b      	lsls	r3, r3, #24
 80085b6:	431a      	orrs	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	071b      	lsls	r3, r3, #28
 80085bc:	493d      	ldr	r1, [pc, #244]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80085c4:	4b3b      	ldr	r3, [pc, #236]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ca:	f023 021f 	bic.w	r2, r3, #31
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4937      	ldr	r1, [pc, #220]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01d      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085e8:	4b32      	ldr	r3, [pc, #200]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ee:	0e1b      	lsrs	r3, r3, #24
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085f6:	4b2f      	ldr	r3, [pc, #188]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085fc:	0f1b      	lsrs	r3, r3, #28
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	019a      	lsls	r2, r3, #6
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	431a      	orrs	r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	061b      	lsls	r3, r3, #24
 8008616:	431a      	orrs	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	071b      	lsls	r3, r3, #28
 800861c:	4925      	ldr	r1, [pc, #148]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800861e:	4313      	orrs	r3, r2
 8008620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d011      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	019a      	lsls	r2, r3, #6
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	041b      	lsls	r3, r3, #16
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	061b      	lsls	r3, r3, #24
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	071b      	lsls	r3, r3, #28
 800864c:	4919      	ldr	r1, [pc, #100]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800864e:	4313      	orrs	r3, r2
 8008650:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008654:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800865a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800865e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008660:	f7fd fe4e 	bl	8006300 <HAL_GetTick>
 8008664:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008666:	e008      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008668:	f7fd fe4a 	bl	8006300 <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b64      	cmp	r3, #100	; 0x64
 8008674:	d901      	bls.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e0d7      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800867a:	4b0e      	ldr	r3, [pc, #56]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0f0      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b01      	cmp	r3, #1
 800868a:	f040 80cd 	bne.w	8008828 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800869a:	f7fd fe31 	bl	8006300 <HAL_GetTick>
 800869e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086a0:	e00a      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086a2:	f7fd fe2d 	bl	8006300 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b64      	cmp	r3, #100	; 0x64
 80086ae:	d903      	bls.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e0ba      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80086b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086b8:	4b5e      	ldr	r3, [pc, #376]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c4:	d0ed      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d02e      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d12a      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086ee:	4b51      	ldr	r3, [pc, #324]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80086f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086fc:	4b4d      	ldr	r3, [pc, #308]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	019a      	lsls	r2, r3, #6
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	431a      	orrs	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	061b      	lsls	r3, r3, #24
 800871c:	431a      	orrs	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	071b      	lsls	r3, r3, #28
 8008722:	4944      	ldr	r1, [pc, #272]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008724:	4313      	orrs	r3, r2
 8008726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800872a:	4b42      	ldr	r3, [pc, #264]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800872c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008730:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	3b01      	subs	r3, #1
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	493d      	ldr	r1, [pc, #244]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d022      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008758:	d11d      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800875a:	4b36      	ldr	r3, [pc, #216]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008760:	0e1b      	lsrs	r3, r3, #24
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008768:	4b32      	ldr	r3, [pc, #200]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800876a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876e:	0f1b      	lsrs	r3, r3, #28
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	019a      	lsls	r2, r3, #6
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	431a      	orrs	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	061b      	lsls	r3, r3, #24
 8008788:	431a      	orrs	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	071b      	lsls	r3, r3, #28
 800878e:	4929      	ldr	r1, [pc, #164]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008790:	4313      	orrs	r3, r2
 8008792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d028      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087a2:	4b24      	ldr	r3, [pc, #144]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a8:	0e1b      	lsrs	r3, r3, #24
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80087b0:	4b20      	ldr	r3, [pc, #128]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	019a      	lsls	r2, r3, #6
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	431a      	orrs	r2, r3
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	071b      	lsls	r3, r3, #28
 80087d6:	4917      	ldr	r1, [pc, #92]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80087de:	4b15      	ldr	r3, [pc, #84]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4911      	ldr	r1, [pc, #68]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80087f4:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a0e      	ldr	r2, [pc, #56]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008800:	f7fd fd7e 	bl	8006300 <HAL_GetTick>
 8008804:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008806:	e008      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008808:	f7fd fd7a 	bl	8006300 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	; 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e007      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008826:	d1ef      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40023800 	.word	0x40023800

08008838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e01d      	b.n	8008886 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fd fa90 	bl	8005d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f000 fc90 	bl	800919c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <HAL_TIM_Base_Start_IT+0x50>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b06      	cmp	r3, #6
 80088b8:	d00b      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0x42>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c0:	d007      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f042 0201 	orr.w	r2, r2, #1
 80088d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	00010007 	.word	0x00010007

080088e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e01d      	b.n	8008932 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f815 	bl	800893a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f000 fc3a 	bl	800919c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2201      	movs	r2, #1
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 ffb2 	bl	80098cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a17      	ldr	r2, [pc, #92]	; (80089cc <HAL_TIM_PWM_Start+0x7c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIM_PWM_Start+0x2c>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <HAL_TIM_PWM_Start+0x80>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d101      	bne.n	8008980 <HAL_TIM_PWM_Start+0x30>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <HAL_TIM_PWM_Start+0x32>
 8008980:	2300      	movs	r3, #0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <HAL_TIM_PWM_Start+0x84>)
 800899e:	4013      	ands	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b06      	cmp	r3, #6
 80089a6:	d00b      	beq.n	80089c0 <HAL_TIM_PWM_Start+0x70>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ae:	d007      	beq.n	80089c0 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40010400 	.word	0x40010400
 80089d4:	00010007 	.word	0x00010007

080089d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e07b      	b.n	8008ae4 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d106      	bne.n	8008a06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7fd f8c5 	bl	8005b90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6899      	ldr	r1, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	4b34      	ldr	r3, [pc, #208]	; (8008aec <HAL_TIM_Encoder_Init+0x114>)
 8008a1a:	400b      	ands	r3, r1
 8008a1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4619      	mov	r1, r3
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f000 fbb7 	bl	800919c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <HAL_TIM_Encoder_Init+0x118>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	4313      	orrs	r3, r2
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <HAL_TIM_Encoder_Init+0x11c>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4b20      	ldr	r3, [pc, #128]	; (8008af8 <HAL_TIM_Encoder_Init+0x120>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	4313      	orrs	r3, r2
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	011a      	lsls	r2, r3, #4
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	031b      	lsls	r3, r3, #12
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008aae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	4313      	orrs	r3, r2
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	fffebff8 	.word	0xfffebff8
 8008af0:	fffffcfc 	.word	0xfffffcfc
 8008af4:	fffff3f3 	.word	0xfffff3f3
 8008af8:	ffff0f0f 	.word	0xffff0f0f

08008afc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_TIM_Encoder_Start+0x16>
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d008      	beq.n	8008b22 <HAL_TIM_Encoder_Start+0x26>
 8008b10:	e00f      	b.n	8008b32 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2201      	movs	r2, #1
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fed6 	bl	80098cc <TIM_CCxChannelCmd>
      break;
 8008b20:	e016      	b.n	8008b50 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2201      	movs	r2, #1
 8008b28:	2104      	movs	r1, #4
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fece 	bl	80098cc <TIM_CCxChannelCmd>
      break;
 8008b30:	e00e      	b.n	8008b50 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2201      	movs	r2, #1
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fec6 	bl	80098cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2201      	movs	r2, #1
 8008b46:	2104      	movs	r1, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 febf 	bl	80098cc <TIM_CCxChannelCmd>
      break;
 8008b4e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d122      	bne.n	8008bc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d11b      	bne.n	8008bc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f06f 0202 	mvn.w	r2, #2
 8008b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fad7 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008bb2:	e005      	b.n	8008bc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fac9 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fada 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d122      	bne.n	8008c1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d11b      	bne.n	8008c1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f06f 0204 	mvn.w	r2, #4
 8008bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 faad 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008c06:	e005      	b.n	8008c14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa9f 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fab0 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0308 	and.w	r3, r3, #8
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d122      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d11b      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f06f 0208 	mvn.w	r2, #8
 8008c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2204      	movs	r2, #4
 8008c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa83 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008c5a:	e005      	b.n	8008c68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fa75 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa86 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b10      	cmp	r3, #16
 8008c7a:	d122      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b10      	cmp	r3, #16
 8008c88:	d11b      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0210 	mvn.w	r2, #16
 8008c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2208      	movs	r2, #8
 8008c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa59 	bl	8009160 <HAL_TIM_IC_CaptureCallback>
 8008cae:	e005      	b.n	8008cbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fa4b 	bl	800914c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa5c 	bl	8009174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d10e      	bne.n	8008cee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d107      	bne.n	8008cee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f06f 0201 	mvn.w	r2, #1
 8008ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7f7 fff1 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf8:	2b80      	cmp	r3, #128	; 0x80
 8008cfa:	d10e      	bne.n	8008d1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d06:	2b80      	cmp	r3, #128	; 0x80
 8008d08:	d107      	bne.n	8008d1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fe97 	bl	8009a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d28:	d10e      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d107      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fe8a 	bl	8009a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d52:	2b40      	cmp	r3, #64	; 0x40
 8008d54:	d10e      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d107      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa0a 	bl	8009188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d10e      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d107      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0220 	mvn.w	r2, #32
 8008d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fe4a 	bl	8009a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	e105      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x226>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b14      	cmp	r3, #20
 8008dd6:	f200 80f0 	bhi.w	8008fba <HAL_TIM_PWM_ConfigChannel+0x212>
 8008dda:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008e35 	.word	0x08008e35
 8008de4:	08008fbb 	.word	0x08008fbb
 8008de8:	08008fbb 	.word	0x08008fbb
 8008dec:	08008fbb 	.word	0x08008fbb
 8008df0:	08008e75 	.word	0x08008e75
 8008df4:	08008fbb 	.word	0x08008fbb
 8008df8:	08008fbb 	.word	0x08008fbb
 8008dfc:	08008fbb 	.word	0x08008fbb
 8008e00:	08008eb7 	.word	0x08008eb7
 8008e04:	08008fbb 	.word	0x08008fbb
 8008e08:	08008fbb 	.word	0x08008fbb
 8008e0c:	08008fbb 	.word	0x08008fbb
 8008e10:	08008ef7 	.word	0x08008ef7
 8008e14:	08008fbb 	.word	0x08008fbb
 8008e18:	08008fbb 	.word	0x08008fbb
 8008e1c:	08008fbb 	.word	0x08008fbb
 8008e20:	08008f39 	.word	0x08008f39
 8008e24:	08008fbb 	.word	0x08008fbb
 8008e28:	08008fbb 	.word	0x08008fbb
 8008e2c:	08008fbb 	.word	0x08008fbb
 8008e30:	08008f79 	.word	0x08008f79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fa4e 	bl	80092dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0208 	orr.w	r2, r2, #8
 8008e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0204 	bic.w	r2, r2, #4
 8008e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6999      	ldr	r1, [r3, #24]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	619a      	str	r2, [r3, #24]
      break;
 8008e72:	e0a3      	b.n	8008fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 faa0 	bl	80093c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699a      	ldr	r2, [r3, #24]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6999      	ldr	r1, [r3, #24]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	021a      	lsls	r2, r3, #8
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	619a      	str	r2, [r3, #24]
      break;
 8008eb4:	e082      	b.n	8008fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 faf7 	bl	80094b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0208 	orr.w	r2, r2, #8
 8008ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 0204 	bic.w	r2, r2, #4
 8008ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69d9      	ldr	r1, [r3, #28]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	61da      	str	r2, [r3, #28]
      break;
 8008ef4:	e062      	b.n	8008fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fb4d 	bl	800959c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69da      	ldr	r2, [r3, #28]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69da      	ldr	r2, [r3, #28]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69d9      	ldr	r1, [r3, #28]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	021a      	lsls	r2, r3, #8
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	61da      	str	r2, [r3, #28]
      break;
 8008f36:	e041      	b.n	8008fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fb84 	bl	800964c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0208 	orr.w	r2, r2, #8
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0204 	bic.w	r2, r2, #4
 8008f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691a      	ldr	r2, [r3, #16]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f76:	e021      	b.n	8008fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fbb6 	bl	80096f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	021a      	lsls	r2, r3, #8
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fb8:	e000      	b.n	8008fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008fba:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d101      	bne.n	8008ff0 <HAL_TIM_ConfigClockSource+0x18>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e0a6      	b.n	800913e <HAL_TIM_ConfigClockSource+0x166>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4b4f      	ldr	r3, [pc, #316]	; (8009148 <HAL_TIM_ConfigClockSource+0x170>)
 800900c:	4013      	ands	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009016:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	d067      	beq.n	80090f8 <HAL_TIM_ConfigClockSource+0x120>
 8009028:	2b40      	cmp	r3, #64	; 0x40
 800902a:	d80b      	bhi.n	8009044 <HAL_TIM_ConfigClockSource+0x6c>
 800902c:	2b10      	cmp	r3, #16
 800902e:	d073      	beq.n	8009118 <HAL_TIM_ConfigClockSource+0x140>
 8009030:	2b10      	cmp	r3, #16
 8009032:	d802      	bhi.n	800903a <HAL_TIM_ConfigClockSource+0x62>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d06f      	beq.n	8009118 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009038:	e078      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800903a:	2b20      	cmp	r3, #32
 800903c:	d06c      	beq.n	8009118 <HAL_TIM_ConfigClockSource+0x140>
 800903e:	2b30      	cmp	r3, #48	; 0x30
 8009040:	d06a      	beq.n	8009118 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009042:	e073      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009044:	2b70      	cmp	r3, #112	; 0x70
 8009046:	d00d      	beq.n	8009064 <HAL_TIM_ConfigClockSource+0x8c>
 8009048:	2b70      	cmp	r3, #112	; 0x70
 800904a:	d804      	bhi.n	8009056 <HAL_TIM_ConfigClockSource+0x7e>
 800904c:	2b50      	cmp	r3, #80	; 0x50
 800904e:	d033      	beq.n	80090b8 <HAL_TIM_ConfigClockSource+0xe0>
 8009050:	2b60      	cmp	r3, #96	; 0x60
 8009052:	d041      	beq.n	80090d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009054:	e06a      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905a:	d066      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x152>
 800905c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009060:	d017      	beq.n	8009092 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009062:	e063      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6899      	ldr	r1, [r3, #8]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f000 fc0a 	bl	800988c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009086:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	609a      	str	r2, [r3, #8]
      break;
 8009090:	e04c      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	6899      	ldr	r1, [r3, #8]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f000 fbf3 	bl	800988c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090b4:	609a      	str	r2, [r3, #8]
      break;
 80090b6:	e039      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	6859      	ldr	r1, [r3, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	461a      	mov	r2, r3
 80090c6:	f000 fb67 	bl	8009798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2150      	movs	r1, #80	; 0x50
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fbc0 	bl	8009856 <TIM_ITRx_SetConfig>
      break;
 80090d6:	e029      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	6859      	ldr	r1, [r3, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	461a      	mov	r2, r3
 80090e6:	f000 fb86 	bl	80097f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2160      	movs	r1, #96	; 0x60
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fbb0 	bl	8009856 <TIM_ITRx_SetConfig>
      break;
 80090f6:	e019      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	461a      	mov	r2, r3
 8009106:	f000 fb47 	bl	8009798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2140      	movs	r1, #64	; 0x40
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fba0 	bl	8009856 <TIM_ITRx_SetConfig>
      break;
 8009116:	e009      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f000 fb97 	bl	8009856 <TIM_ITRx_SetConfig>
      break;
 8009128:	e000      	b.n	800912c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800912a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	fffeff88 	.word	0xfffeff88

0800914c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a40      	ldr	r2, [pc, #256]	; (80092b0 <TIM_Base_SetConfig+0x114>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d013      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ba:	d00f      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a3d      	ldr	r2, [pc, #244]	; (80092b4 <TIM_Base_SetConfig+0x118>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00b      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3c      	ldr	r2, [pc, #240]	; (80092b8 <TIM_Base_SetConfig+0x11c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a3b      	ldr	r2, [pc, #236]	; (80092bc <TIM_Base_SetConfig+0x120>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_Base_SetConfig+0x40>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a3a      	ldr	r2, [pc, #232]	; (80092c0 <TIM_Base_SetConfig+0x124>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d108      	bne.n	80091ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a2f      	ldr	r2, [pc, #188]	; (80092b0 <TIM_Base_SetConfig+0x114>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d02b      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fc:	d027      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2c      	ldr	r2, [pc, #176]	; (80092b4 <TIM_Base_SetConfig+0x118>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d023      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2b      	ldr	r2, [pc, #172]	; (80092b8 <TIM_Base_SetConfig+0x11c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01f      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a2a      	ldr	r2, [pc, #168]	; (80092bc <TIM_Base_SetConfig+0x120>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d01b      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a29      	ldr	r2, [pc, #164]	; (80092c0 <TIM_Base_SetConfig+0x124>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d017      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a28      	ldr	r2, [pc, #160]	; (80092c4 <TIM_Base_SetConfig+0x128>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d013      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a27      	ldr	r2, [pc, #156]	; (80092c8 <TIM_Base_SetConfig+0x12c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d00f      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a26      	ldr	r2, [pc, #152]	; (80092cc <TIM_Base_SetConfig+0x130>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00b      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a25      	ldr	r2, [pc, #148]	; (80092d0 <TIM_Base_SetConfig+0x134>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d007      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a24      	ldr	r2, [pc, #144]	; (80092d4 <TIM_Base_SetConfig+0x138>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d003      	beq.n	800924e <TIM_Base_SetConfig+0xb2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a23      	ldr	r2, [pc, #140]	; (80092d8 <TIM_Base_SetConfig+0x13c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d108      	bne.n	8009260 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689a      	ldr	r2, [r3, #8]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a0a      	ldr	r2, [pc, #40]	; (80092b0 <TIM_Base_SetConfig+0x114>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d003      	beq.n	8009294 <TIM_Base_SetConfig+0xf8>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <TIM_Base_SetConfig+0x124>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d103      	bne.n	800929c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	615a      	str	r2, [r3, #20]
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40010000 	.word	0x40010000
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40000c00 	.word	0x40000c00
 80092c0:	40010400 	.word	0x40010400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800
 80092d0:	40001800 	.word	0x40001800
 80092d4:	40001c00 	.word	0x40001c00
 80092d8:	40002000 	.word	0x40002000

080092dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f023 0201 	bic.w	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4b2b      	ldr	r3, [pc, #172]	; (80093b4 <TIM_OC1_SetConfig+0xd8>)
 8009308:	4013      	ands	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 0302 	bic.w	r3, r3, #2
 8009324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a21      	ldr	r2, [pc, #132]	; (80093b8 <TIM_OC1_SetConfig+0xdc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC1_SetConfig+0x64>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a20      	ldr	r2, [pc, #128]	; (80093bc <TIM_OC1_SetConfig+0xe0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10c      	bne.n	800935a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f023 0308 	bic.w	r3, r3, #8
 8009346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f023 0304 	bic.w	r3, r3, #4
 8009358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <TIM_OC1_SetConfig+0xdc>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d003      	beq.n	800936a <TIM_OC1_SetConfig+0x8e>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a15      	ldr	r2, [pc, #84]	; (80093bc <TIM_OC1_SetConfig+0xe0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d111      	bne.n	800938e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	4313      	orrs	r3, r2
 8009382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	4313      	orrs	r3, r2
 800938c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	621a      	str	r2, [r3, #32]
}
 80093a8:	bf00      	nop
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	fffeff8f 	.word	0xfffeff8f
 80093b8:	40010000 	.word	0x40010000
 80093bc:	40010400 	.word	0x40010400

080093c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f023 0210 	bic.w	r2, r3, #16
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4b2e      	ldr	r3, [pc, #184]	; (80094a4 <TIM_OC2_SetConfig+0xe4>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4313      	orrs	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f023 0320 	bic.w	r3, r3, #32
 800940a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a23      	ldr	r2, [pc, #140]	; (80094a8 <TIM_OC2_SetConfig+0xe8>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d003      	beq.n	8009428 <TIM_OC2_SetConfig+0x68>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a22      	ldr	r2, [pc, #136]	; (80094ac <TIM_OC2_SetConfig+0xec>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d10d      	bne.n	8009444 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800942e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4313      	orrs	r3, r2
 800943a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a18      	ldr	r2, [pc, #96]	; (80094a8 <TIM_OC2_SetConfig+0xe8>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_OC2_SetConfig+0x94>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a17      	ldr	r2, [pc, #92]	; (80094ac <TIM_OC2_SetConfig+0xec>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d113      	bne.n	800947c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800945a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	621a      	str	r2, [r3, #32]
}
 8009496:	bf00      	nop
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	feff8fff 	.word	0xfeff8fff
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40010400 	.word	0x40010400

080094b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4b2d      	ldr	r3, [pc, #180]	; (8009590 <TIM_OC3_SetConfig+0xe0>)
 80094dc:	4013      	ands	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0303 	bic.w	r3, r3, #3
 80094e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a22      	ldr	r2, [pc, #136]	; (8009594 <TIM_OC3_SetConfig+0xe4>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d003      	beq.n	8009516 <TIM_OC3_SetConfig+0x66>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a21      	ldr	r2, [pc, #132]	; (8009598 <TIM_OC3_SetConfig+0xe8>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d10d      	bne.n	8009532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800951c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a17      	ldr	r2, [pc, #92]	; (8009594 <TIM_OC3_SetConfig+0xe4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d003      	beq.n	8009542 <TIM_OC3_SetConfig+0x92>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a16      	ldr	r2, [pc, #88]	; (8009598 <TIM_OC3_SetConfig+0xe8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d113      	bne.n	800956a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	011b      	lsls	r3, r3, #4
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	621a      	str	r2, [r3, #32]
}
 8009584:	bf00      	nop
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	fffeff8f 	.word	0xfffeff8f
 8009594:	40010000 	.word	0x40010000
 8009598:	40010400 	.word	0x40010400

0800959c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4b1e      	ldr	r3, [pc, #120]	; (8009640 <TIM_OC4_SetConfig+0xa4>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4313      	orrs	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	031b      	lsls	r3, r3, #12
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a13      	ldr	r2, [pc, #76]	; (8009644 <TIM_OC4_SetConfig+0xa8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d003      	beq.n	8009604 <TIM_OC4_SetConfig+0x68>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a12      	ldr	r2, [pc, #72]	; (8009648 <TIM_OC4_SetConfig+0xac>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d109      	bne.n	8009618 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800960a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	019b      	lsls	r3, r3, #6
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	621a      	str	r2, [r3, #32]
}
 8009632:	bf00      	nop
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	feff8fff 	.word	0xfeff8fff
 8009644:	40010000 	.word	0x40010000
 8009648:	40010400 	.word	0x40010400

0800964c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <TIM_OC5_SetConfig+0x98>)
 8009678:	4013      	ands	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800968c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4313      	orrs	r3, r2
 8009698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a12      	ldr	r2, [pc, #72]	; (80096e8 <TIM_OC5_SetConfig+0x9c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d003      	beq.n	80096aa <TIM_OC5_SetConfig+0x5e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a11      	ldr	r2, [pc, #68]	; (80096ec <TIM_OC5_SetConfig+0xa0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d109      	bne.n	80096be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	621a      	str	r2, [r3, #32]
}
 80096d8:	bf00      	nop
 80096da:	371c      	adds	r7, #28
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	fffeff8f 	.word	0xfffeff8f
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40010400 	.word	0x40010400

080096f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4b1c      	ldr	r3, [pc, #112]	; (800978c <TIM_OC6_SetConfig+0x9c>)
 800971c:	4013      	ands	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	021b      	lsls	r3, r3, #8
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	051b      	lsls	r3, r3, #20
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4313      	orrs	r3, r2
 800973e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a13      	ldr	r2, [pc, #76]	; (8009790 <TIM_OC6_SetConfig+0xa0>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_OC6_SetConfig+0x60>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a12      	ldr	r2, [pc, #72]	; (8009794 <TIM_OC6_SetConfig+0xa4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d109      	bne.n	8009764 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	029b      	lsls	r3, r3, #10
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	4313      	orrs	r3, r2
 8009762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	621a      	str	r2, [r3, #32]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	feff8fff 	.word	0xfeff8fff
 8009790:	40010000 	.word	0x40010000
 8009794:	40010400 	.word	0x40010400

08009798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f023 0201 	bic.w	r2, r3, #1
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f023 030a 	bic.w	r3, r3, #10
 80097d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4313      	orrs	r3, r2
 80097dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	621a      	str	r2, [r3, #32]
}
 80097ea:	bf00      	nop
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b087      	sub	sp, #28
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f023 0210 	bic.w	r2, r3, #16
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	031b      	lsls	r3, r3, #12
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	4313      	orrs	r3, r2
 800982a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4313      	orrs	r3, r2
 800983c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	621a      	str	r2, [r3, #32]
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009856:	b480      	push	{r7}
 8009858:	b085      	sub	sp, #20
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	f043 0307 	orr.w	r3, r3, #7
 8009878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	609a      	str	r2, [r3, #8]
}
 8009880:	bf00      	nop
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	021a      	lsls	r2, r3, #8
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	609a      	str	r2, [r3, #8]
}
 80098c0:	bf00      	nop
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	2201      	movs	r2, #1
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	43db      	mvns	r3, r3
 80098ee:	401a      	ands	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a1a      	ldr	r2, [r3, #32]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	fa01 f303 	lsl.w	r3, r1, r3
 8009904:	431a      	orrs	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009928:	2b01      	cmp	r3, #1
 800992a:	d101      	bne.n	8009930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800992c:	2302      	movs	r3, #2
 800992e:	e06d      	b.n	8009a0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a30      	ldr	r2, [pc, #192]	; (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d004      	beq.n	8009964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a2f      	ldr	r2, [pc, #188]	; (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d108      	bne.n	8009976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800996a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4313      	orrs	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a20      	ldr	r2, [pc, #128]	; (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d022      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a2:	d01d      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a1d      	ldr	r2, [pc, #116]	; (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d018      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a1c      	ldr	r2, [pc, #112]	; (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d013      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a1a      	ldr	r2, [pc, #104]	; (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00e      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a15      	ldr	r2, [pc, #84]	; (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d009      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a16      	ldr	r2, [pc, #88]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d004      	beq.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10c      	bne.n	80099fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40010400 	.word	0x40010400
 8009a20:	40000400 	.word	0x40000400
 8009a24:	40000800 	.word	0x40000800
 8009a28:	40000c00 	.word	0x40000c00
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40001800 	.word	0x40001800

08009a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e040      	b.n	8009b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fc fa20 	bl	8005ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2224      	movs	r2, #36	; 0x24
 8009a9c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0201 	bic.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f8be 	bl	8009c30 <UART_SetConfig>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d101      	bne.n	8009abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e022      	b.n	8009b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fb5c 	bl	800a184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689a      	ldr	r2, [r3, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fbe3 	bl	800a2c8 <UART_CheckIdleState>
 8009b02:	4603      	mov	r3, r0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08a      	sub	sp, #40	; 0x28
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d17f      	bne.n	8009c24 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_UART_Transmit+0x24>
 8009b2a:	88fb      	ldrh	r3, [r7, #6]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e078      	b.n	8009c26 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <HAL_UART_Transmit+0x36>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e071      	b.n	8009c26 <HAL_UART_Transmit+0x11a>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2221      	movs	r2, #33	; 0x21
 8009b54:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009b56:	f7fc fbd3 	bl	8006300 <HAL_GetTick>
 8009b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	88fa      	ldrh	r2, [r7, #6]
 8009b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	88fa      	ldrh	r2, [r7, #6]
 8009b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b74:	d108      	bne.n	8009b88 <HAL_UART_Transmit+0x7c>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d104      	bne.n	8009b88 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	e003      	b.n	8009b90 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009b98:	e02c      	b.n	8009bf4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2180      	movs	r1, #128	; 0x80
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 fbd4 	bl	800a352 <UART_WaitOnFlagUntilTimeout>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e038      	b.n	8009c26 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	3302      	adds	r3, #2
 8009bce:	61bb      	str	r3, [r7, #24]
 8009bd0:	e007      	b.n	8009be2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	3301      	adds	r3, #1
 8009be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3b01      	subs	r3, #1
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1cc      	bne.n	8009b9a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2200      	movs	r2, #0
 8009c08:	2140      	movs	r1, #64	; 0x40
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 fba1 	bl	800a352 <UART_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e005      	b.n	8009c26 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	e000      	b.n	8009c26 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009c24:	2302      	movs	r3, #2
  }
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	4bb1      	ldr	r3, [pc, #708]	; (8009f24 <UART_SetConfig+0x2f4>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	6939      	ldr	r1, [r7, #16]
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68da      	ldr	r2, [r3, #12]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a9f      	ldr	r2, [pc, #636]	; (8009f28 <UART_SetConfig+0x2f8>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d121      	bne.n	8009cf4 <UART_SetConfig+0xc4>
 8009cb0:	4b9e      	ldr	r3, [pc, #632]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb6:	f003 0303 	and.w	r3, r3, #3
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d816      	bhi.n	8009cec <UART_SetConfig+0xbc>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <UART_SetConfig+0x94>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009ce1 	.word	0x08009ce1
 8009ccc:	08009cdb 	.word	0x08009cdb
 8009cd0:	08009ce7 	.word	0x08009ce7
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	77fb      	strb	r3, [r7, #31]
 8009cd8:	e151      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	77fb      	strb	r3, [r7, #31]
 8009cde:	e14e      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	77fb      	strb	r3, [r7, #31]
 8009ce4:	e14b      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	77fb      	strb	r3, [r7, #31]
 8009cea:	e148      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009cec:	2310      	movs	r3, #16
 8009cee:	77fb      	strb	r3, [r7, #31]
 8009cf0:	bf00      	nop
 8009cf2:	e144      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a8d      	ldr	r2, [pc, #564]	; (8009f30 <UART_SetConfig+0x300>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d134      	bne.n	8009d68 <UART_SetConfig+0x138>
 8009cfe:	4b8b      	ldr	r3, [pc, #556]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d04:	f003 030c 	and.w	r3, r3, #12
 8009d08:	2b0c      	cmp	r3, #12
 8009d0a:	d829      	bhi.n	8009d60 <UART_SetConfig+0x130>
 8009d0c:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0xe4>)
 8009d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d12:	bf00      	nop
 8009d14:	08009d49 	.word	0x08009d49
 8009d18:	08009d61 	.word	0x08009d61
 8009d1c:	08009d61 	.word	0x08009d61
 8009d20:	08009d61 	.word	0x08009d61
 8009d24:	08009d55 	.word	0x08009d55
 8009d28:	08009d61 	.word	0x08009d61
 8009d2c:	08009d61 	.word	0x08009d61
 8009d30:	08009d61 	.word	0x08009d61
 8009d34:	08009d4f 	.word	0x08009d4f
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009d5b 	.word	0x08009d5b
 8009d48:	2300      	movs	r3, #0
 8009d4a:	77fb      	strb	r3, [r7, #31]
 8009d4c:	e117      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009d4e:	2302      	movs	r3, #2
 8009d50:	77fb      	strb	r3, [r7, #31]
 8009d52:	e114      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009d54:	2304      	movs	r3, #4
 8009d56:	77fb      	strb	r3, [r7, #31]
 8009d58:	e111      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009d5a:	2308      	movs	r3, #8
 8009d5c:	77fb      	strb	r3, [r7, #31]
 8009d5e:	e10e      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009d60:	2310      	movs	r3, #16
 8009d62:	77fb      	strb	r3, [r7, #31]
 8009d64:	bf00      	nop
 8009d66:	e10a      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a71      	ldr	r2, [pc, #452]	; (8009f34 <UART_SetConfig+0x304>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d120      	bne.n	8009db4 <UART_SetConfig+0x184>
 8009d72:	4b6e      	ldr	r3, [pc, #440]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d7c:	2b10      	cmp	r3, #16
 8009d7e:	d00f      	beq.n	8009da0 <UART_SetConfig+0x170>
 8009d80:	2b10      	cmp	r3, #16
 8009d82:	d802      	bhi.n	8009d8a <UART_SetConfig+0x15a>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <UART_SetConfig+0x164>
 8009d88:	e010      	b.n	8009dac <UART_SetConfig+0x17c>
 8009d8a:	2b20      	cmp	r3, #32
 8009d8c:	d005      	beq.n	8009d9a <UART_SetConfig+0x16a>
 8009d8e:	2b30      	cmp	r3, #48	; 0x30
 8009d90:	d009      	beq.n	8009da6 <UART_SetConfig+0x176>
 8009d92:	e00b      	b.n	8009dac <UART_SetConfig+0x17c>
 8009d94:	2300      	movs	r3, #0
 8009d96:	77fb      	strb	r3, [r7, #31]
 8009d98:	e0f1      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	77fb      	strb	r3, [r7, #31]
 8009d9e:	e0ee      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009da0:	2304      	movs	r3, #4
 8009da2:	77fb      	strb	r3, [r7, #31]
 8009da4:	e0eb      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009da6:	2308      	movs	r3, #8
 8009da8:	77fb      	strb	r3, [r7, #31]
 8009daa:	e0e8      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009dac:	2310      	movs	r3, #16
 8009dae:	77fb      	strb	r3, [r7, #31]
 8009db0:	bf00      	nop
 8009db2:	e0e4      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a5f      	ldr	r2, [pc, #380]	; (8009f38 <UART_SetConfig+0x308>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d120      	bne.n	8009e00 <UART_SetConfig+0x1d0>
 8009dbe:	4b5b      	ldr	r3, [pc, #364]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009dc8:	2b40      	cmp	r3, #64	; 0x40
 8009dca:	d00f      	beq.n	8009dec <UART_SetConfig+0x1bc>
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d802      	bhi.n	8009dd6 <UART_SetConfig+0x1a6>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <UART_SetConfig+0x1b0>
 8009dd4:	e010      	b.n	8009df8 <UART_SetConfig+0x1c8>
 8009dd6:	2b80      	cmp	r3, #128	; 0x80
 8009dd8:	d005      	beq.n	8009de6 <UART_SetConfig+0x1b6>
 8009dda:	2bc0      	cmp	r3, #192	; 0xc0
 8009ddc:	d009      	beq.n	8009df2 <UART_SetConfig+0x1c2>
 8009dde:	e00b      	b.n	8009df8 <UART_SetConfig+0x1c8>
 8009de0:	2300      	movs	r3, #0
 8009de2:	77fb      	strb	r3, [r7, #31]
 8009de4:	e0cb      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009de6:	2302      	movs	r3, #2
 8009de8:	77fb      	strb	r3, [r7, #31]
 8009dea:	e0c8      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009dec:	2304      	movs	r3, #4
 8009dee:	77fb      	strb	r3, [r7, #31]
 8009df0:	e0c5      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009df2:	2308      	movs	r3, #8
 8009df4:	77fb      	strb	r3, [r7, #31]
 8009df6:	e0c2      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009df8:	2310      	movs	r3, #16
 8009dfa:	77fb      	strb	r3, [r7, #31]
 8009dfc:	bf00      	nop
 8009dfe:	e0be      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a4d      	ldr	r2, [pc, #308]	; (8009f3c <UART_SetConfig+0x30c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d124      	bne.n	8009e54 <UART_SetConfig+0x224>
 8009e0a:	4b48      	ldr	r3, [pc, #288]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e18:	d012      	beq.n	8009e40 <UART_SetConfig+0x210>
 8009e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1e:	d802      	bhi.n	8009e26 <UART_SetConfig+0x1f6>
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d007      	beq.n	8009e34 <UART_SetConfig+0x204>
 8009e24:	e012      	b.n	8009e4c <UART_SetConfig+0x21c>
 8009e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e2a:	d006      	beq.n	8009e3a <UART_SetConfig+0x20a>
 8009e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e30:	d009      	beq.n	8009e46 <UART_SetConfig+0x216>
 8009e32:	e00b      	b.n	8009e4c <UART_SetConfig+0x21c>
 8009e34:	2300      	movs	r3, #0
 8009e36:	77fb      	strb	r3, [r7, #31]
 8009e38:	e0a1      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	77fb      	strb	r3, [r7, #31]
 8009e3e:	e09e      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e40:	2304      	movs	r3, #4
 8009e42:	77fb      	strb	r3, [r7, #31]
 8009e44:	e09b      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e46:	2308      	movs	r3, #8
 8009e48:	77fb      	strb	r3, [r7, #31]
 8009e4a:	e098      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	77fb      	strb	r3, [r7, #31]
 8009e50:	bf00      	nop
 8009e52:	e094      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a39      	ldr	r2, [pc, #228]	; (8009f40 <UART_SetConfig+0x310>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d124      	bne.n	8009ea8 <UART_SetConfig+0x278>
 8009e5e:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e6c:	d012      	beq.n	8009e94 <UART_SetConfig+0x264>
 8009e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e72:	d802      	bhi.n	8009e7a <UART_SetConfig+0x24a>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d007      	beq.n	8009e88 <UART_SetConfig+0x258>
 8009e78:	e012      	b.n	8009ea0 <UART_SetConfig+0x270>
 8009e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e7e:	d006      	beq.n	8009e8e <UART_SetConfig+0x25e>
 8009e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e84:	d009      	beq.n	8009e9a <UART_SetConfig+0x26a>
 8009e86:	e00b      	b.n	8009ea0 <UART_SetConfig+0x270>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	77fb      	strb	r3, [r7, #31]
 8009e8c:	e077      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e8e:	2302      	movs	r3, #2
 8009e90:	77fb      	strb	r3, [r7, #31]
 8009e92:	e074      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e94:	2304      	movs	r3, #4
 8009e96:	77fb      	strb	r3, [r7, #31]
 8009e98:	e071      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	77fb      	strb	r3, [r7, #31]
 8009e9e:	e06e      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	77fb      	strb	r3, [r7, #31]
 8009ea4:	bf00      	nop
 8009ea6:	e06a      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a25      	ldr	r2, [pc, #148]	; (8009f44 <UART_SetConfig+0x314>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d124      	bne.n	8009efc <UART_SetConfig+0x2cc>
 8009eb2:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec0:	d012      	beq.n	8009ee8 <UART_SetConfig+0x2b8>
 8009ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec6:	d802      	bhi.n	8009ece <UART_SetConfig+0x29e>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d007      	beq.n	8009edc <UART_SetConfig+0x2ac>
 8009ecc:	e012      	b.n	8009ef4 <UART_SetConfig+0x2c4>
 8009ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ed2:	d006      	beq.n	8009ee2 <UART_SetConfig+0x2b2>
 8009ed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ed8:	d009      	beq.n	8009eee <UART_SetConfig+0x2be>
 8009eda:	e00b      	b.n	8009ef4 <UART_SetConfig+0x2c4>
 8009edc:	2300      	movs	r3, #0
 8009ede:	77fb      	strb	r3, [r7, #31]
 8009ee0:	e04d      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	77fb      	strb	r3, [r7, #31]
 8009ee6:	e04a      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ee8:	2304      	movs	r3, #4
 8009eea:	77fb      	strb	r3, [r7, #31]
 8009eec:	e047      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009eee:	2308      	movs	r3, #8
 8009ef0:	77fb      	strb	r3, [r7, #31]
 8009ef2:	e044      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	77fb      	strb	r3, [r7, #31]
 8009ef8:	bf00      	nop
 8009efa:	e040      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a11      	ldr	r2, [pc, #68]	; (8009f48 <UART_SetConfig+0x318>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d139      	bne.n	8009f7a <UART_SetConfig+0x34a>
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <UART_SetConfig+0x2fc>)
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f14:	d027      	beq.n	8009f66 <UART_SetConfig+0x336>
 8009f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f1a:	d817      	bhi.n	8009f4c <UART_SetConfig+0x31c>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01c      	beq.n	8009f5a <UART_SetConfig+0x32a>
 8009f20:	e027      	b.n	8009f72 <UART_SetConfig+0x342>
 8009f22:	bf00      	nop
 8009f24:	efff69f3 	.word	0xefff69f3
 8009f28:	40011000 	.word	0x40011000
 8009f2c:	40023800 	.word	0x40023800
 8009f30:	40004400 	.word	0x40004400
 8009f34:	40004800 	.word	0x40004800
 8009f38:	40004c00 	.word	0x40004c00
 8009f3c:	40005000 	.word	0x40005000
 8009f40:	40011400 	.word	0x40011400
 8009f44:	40007800 	.word	0x40007800
 8009f48:	40007c00 	.word	0x40007c00
 8009f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f50:	d006      	beq.n	8009f60 <UART_SetConfig+0x330>
 8009f52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009f56:	d009      	beq.n	8009f6c <UART_SetConfig+0x33c>
 8009f58:	e00b      	b.n	8009f72 <UART_SetConfig+0x342>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	77fb      	strb	r3, [r7, #31]
 8009f5e:	e00e      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009f60:	2302      	movs	r3, #2
 8009f62:	77fb      	strb	r3, [r7, #31]
 8009f64:	e00b      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009f66:	2304      	movs	r3, #4
 8009f68:	77fb      	strb	r3, [r7, #31]
 8009f6a:	e008      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	77fb      	strb	r3, [r7, #31]
 8009f70:	e005      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009f72:	2310      	movs	r3, #16
 8009f74:	77fb      	strb	r3, [r7, #31]
 8009f76:	bf00      	nop
 8009f78:	e001      	b.n	8009f7e <UART_SetConfig+0x34e>
 8009f7a:	2310      	movs	r3, #16
 8009f7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f86:	d17f      	bne.n	800a088 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009f88:	7ffb      	ldrb	r3, [r7, #31]
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	d85c      	bhi.n	800a048 <UART_SetConfig+0x418>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <UART_SetConfig+0x364>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fb9 	.word	0x08009fb9
 8009f98:	08009fd9 	.word	0x08009fd9
 8009f9c:	08009ff9 	.word	0x08009ff9
 8009fa0:	0800a049 	.word	0x0800a049
 8009fa4:	0800a011 	.word	0x0800a011
 8009fa8:	0800a049 	.word	0x0800a049
 8009fac:	0800a049 	.word	0x0800a049
 8009fb0:	0800a049 	.word	0x0800a049
 8009fb4:	0800a031 	.word	0x0800a031
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb8:	f7fd fff0 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 8009fbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	005a      	lsls	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	085b      	lsrs	r3, r3, #1
 8009fc8:	441a      	add	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	61bb      	str	r3, [r7, #24]
        break;
 8009fd6:	e03a      	b.n	800a04e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fd8:	f7fd fff4 	bl	8007fc4 <HAL_RCC_GetPCLK2Freq>
 8009fdc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	005a      	lsls	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	085b      	lsrs	r3, r3, #1
 8009fe8:	441a      	add	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	61bb      	str	r3, [r7, #24]
        break;
 8009ff6:	e02a      	b.n	800a04e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	085a      	lsrs	r2, r3, #1
 8009ffe:	4b5f      	ldr	r3, [pc, #380]	; (800a17c <UART_SetConfig+0x54c>)
 800a000:	4413      	add	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	6852      	ldr	r2, [r2, #4]
 800a006:	fbb3 f3f2 	udiv	r3, r3, r2
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	61bb      	str	r3, [r7, #24]
        break;
 800a00e:	e01e      	b.n	800a04e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a010:	f7fd fee0 	bl	8007dd4 <HAL_RCC_GetSysClockFreq>
 800a014:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	005a      	lsls	r2, r3, #1
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	441a      	add	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	61bb      	str	r3, [r7, #24]
        break;
 800a02e:	e00e      	b.n	800a04e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	085b      	lsrs	r3, r3, #1
 800a036:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a042:	b29b      	uxth	r3, r3
 800a044:	61bb      	str	r3, [r7, #24]
        break;
 800a046:	e002      	b.n	800a04e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]
        break;
 800a04c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b0f      	cmp	r3, #15
 800a052:	d916      	bls.n	800a082 <UART_SetConfig+0x452>
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a05a:	d212      	bcs.n	800a082 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f023 030f 	bic.w	r3, r3, #15
 800a064:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	b29a      	uxth	r2, r3
 800a072:	897b      	ldrh	r3, [r7, #10]
 800a074:	4313      	orrs	r3, r2
 800a076:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	897a      	ldrh	r2, [r7, #10]
 800a07e:	60da      	str	r2, [r3, #12]
 800a080:	e070      	b.n	800a164 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	75fb      	strb	r3, [r7, #23]
 800a086:	e06d      	b.n	800a164 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a088:	7ffb      	ldrb	r3, [r7, #31]
 800a08a:	2b08      	cmp	r3, #8
 800a08c:	d859      	bhi.n	800a142 <UART_SetConfig+0x512>
 800a08e:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <UART_SetConfig+0x464>)
 800a090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a094:	0800a0b9 	.word	0x0800a0b9
 800a098:	0800a0d7 	.word	0x0800a0d7
 800a09c:	0800a0f5 	.word	0x0800a0f5
 800a0a0:	0800a143 	.word	0x0800a143
 800a0a4:	0800a10d 	.word	0x0800a10d
 800a0a8:	0800a143 	.word	0x0800a143
 800a0ac:	0800a143 	.word	0x0800a143
 800a0b0:	0800a143 	.word	0x0800a143
 800a0b4:	0800a12b 	.word	0x0800a12b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0b8:	f7fd ff70 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 800a0bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	085a      	lsrs	r2, r3, #1
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	441a      	add	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	61bb      	str	r3, [r7, #24]
        break;
 800a0d4:	e038      	b.n	800a148 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d6:	f7fd ff75 	bl	8007fc4 <HAL_RCC_GetPCLK2Freq>
 800a0da:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	085a      	lsrs	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	61bb      	str	r3, [r7, #24]
        break;
 800a0f2:	e029      	b.n	800a148 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	085a      	lsrs	r2, r3, #1
 800a0fa:	4b21      	ldr	r3, [pc, #132]	; (800a180 <UART_SetConfig+0x550>)
 800a0fc:	4413      	add	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6852      	ldr	r2, [r2, #4]
 800a102:	fbb3 f3f2 	udiv	r3, r3, r2
 800a106:	b29b      	uxth	r3, r3
 800a108:	61bb      	str	r3, [r7, #24]
        break;
 800a10a:	e01d      	b.n	800a148 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a10c:	f7fd fe62 	bl	8007dd4 <HAL_RCC_GetSysClockFreq>
 800a110:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	085a      	lsrs	r2, r3, #1
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	441a      	add	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	fbb2 f3f3 	udiv	r3, r2, r3
 800a124:	b29b      	uxth	r3, r3
 800a126:	61bb      	str	r3, [r7, #24]
        break;
 800a128:	e00e      	b.n	800a148 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	085b      	lsrs	r3, r3, #1
 800a130:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	61bb      	str	r3, [r7, #24]
        break;
 800a140:	e002      	b.n	800a148 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	75fb      	strb	r3, [r7, #23]
        break;
 800a146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b0f      	cmp	r3, #15
 800a14c:	d908      	bls.n	800a160 <UART_SetConfig+0x530>
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a154:	d204      	bcs.n	800a160 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	60da      	str	r2, [r3, #12]
 800a15e:	e001      	b.n	800a164 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	01e84800 	.word	0x01e84800
 800a180:	00f42400 	.word	0x00f42400

0800a184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00a      	beq.n	800a1ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00a      	beq.n	800a1d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00a      	beq.n	800a1f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	f003 0308 	and.w	r3, r3, #8
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	f003 0310 	and.w	r3, r3, #16
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01a      	beq.n	800a29a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a282:	d10a      	bne.n	800a29a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	605a      	str	r2, [r3, #4]
  }
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a2d6:	f7fc f813 	bl	8006300 <HAL_GetTick>
 800a2da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d10e      	bne.n	800a308 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f82a 	bl	800a352 <UART_WaitOnFlagUntilTimeout>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e020      	b.n	800a34a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	2b04      	cmp	r3, #4
 800a314:	d10e      	bne.n	800a334 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a316:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f814 	bl	800a352 <UART_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e00a      	b.n	800a34a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	60f8      	str	r0, [r7, #12]
 800a35a:	60b9      	str	r1, [r7, #8]
 800a35c:	603b      	str	r3, [r7, #0]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a362:	e05d      	b.n	800a420 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d059      	beq.n	800a420 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a36c:	f7fb ffc8 	bl	8006300 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	69ba      	ldr	r2, [r7, #24]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d302      	bcc.n	800a382 <UART_WaitOnFlagUntilTimeout+0x30>
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d11b      	bne.n	800a3ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a390:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0201 	bic.w	r2, r2, #1
 800a3a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e042      	b.n	800a440 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d02b      	beq.n	800a420 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3d6:	d123      	bne.n	800a420 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0201 	bic.w	r2, r2, #1
 800a400:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2220      	movs	r2, #32
 800a406:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2220      	movs	r2, #32
 800a40c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2220      	movs	r2, #32
 800a412:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e00f      	b.n	800a440 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69da      	ldr	r2, [r3, #28]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d092      	beq.n	800a364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a448:	b084      	sub	sp, #16
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	f107 001c 	add.w	r0, r7, #28
 800a456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d120      	bne.n	800a4a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	4b20      	ldr	r3, [pc, #128]	; (800a4f4 <USB_CoreInit+0xac>)
 800a472:	4013      	ands	r3, r2
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a486:	2b01      	cmp	r3, #1
 800a488:	d105      	bne.n	800a496 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fa52 	bl	800a940 <USB_CoreReset>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
 800a4a0:	e010      	b.n	800a4c4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa46 	bl	800a940 <USB_CoreReset>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d10b      	bne.n	800a4e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f043 0206 	orr.w	r2, r3, #6
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f043 0220 	orr.w	r2, r3, #32
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4ee:	b004      	add	sp, #16
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	ffbdffbf 	.word	0xffbdffbf

0800a4f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f023 0201 	bic.w	r2, r3, #1
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a532:	78fb      	ldrb	r3, [r7, #3]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d106      	bne.n	800a546 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60da      	str	r2, [r3, #12]
 800a544:	e00b      	b.n	800a55e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60da      	str	r2, [r3, #12]
 800a558:	e001      	b.n	800a55e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e003      	b.n	800a566 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a55e:	2032      	movs	r0, #50	; 0x32
 800a560:	f7fb feda 	bl	8006318 <HAL_Delay>

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a570:	b084      	sub	sp, #16
 800a572:	b580      	push	{r7, lr}
 800a574:	b086      	sub	sp, #24
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a57e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a58a:	2300      	movs	r3, #0
 800a58c:	613b      	str	r3, [r7, #16]
 800a58e:	e009      	b.n	800a5a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	3340      	adds	r3, #64	; 0x40
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	2200      	movs	r2, #0
 800a59c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	613b      	str	r3, [r7, #16]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2b0e      	cmp	r3, #14
 800a5a8:	d9f2      	bls.n	800a590 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11c      	bne.n	800a5ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5be:	f043 0302 	orr.w	r3, r3, #2
 800a5c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	e005      	b.n	800a5f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	2300      	movs	r3, #0
 800a600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a608:	4619      	mov	r1, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a610:	461a      	mov	r2, r3
 800a612:	680b      	ldr	r3, [r1, #0]
 800a614:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d10c      	bne.n	800a636 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d104      	bne.n	800a62c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a622:	2100      	movs	r1, #0
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f959 	bl	800a8dc <USB_SetDevSpeed>
 800a62a:	e018      	b.n	800a65e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a62c:	2101      	movs	r1, #1
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f954 	bl	800a8dc <USB_SetDevSpeed>
 800a634:	e013      	b.n	800a65e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d10c      	bne.n	800a656 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a642:	2100      	movs	r1, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f949 	bl	800a8dc <USB_SetDevSpeed>
 800a64a:	e008      	b.n	800a65e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a64c:	2101      	movs	r1, #1
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f944 	bl	800a8dc <USB_SetDevSpeed>
 800a654:	e003      	b.n	800a65e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a656:	2103      	movs	r1, #3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f93f 	bl	800a8dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a65e:	2110      	movs	r1, #16
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f8f3 	bl	800a84c <USB_FlushTxFifo>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f911 	bl	800a898 <USB_FlushRxFifo>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	461a      	mov	r2, r3
 800a688:	2300      	movs	r3, #0
 800a68a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a692:	461a      	mov	r2, r3
 800a694:	2300      	movs	r3, #0
 800a696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	461a      	mov	r2, r3
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	e043      	b.n	800a732 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6c0:	d118      	bne.n	800a6f4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10a      	bne.n	800a6de <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	e013      	b.n	800a706 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	e008      	b.n	800a706 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a700:	461a      	mov	r2, r3
 800a702:	2300      	movs	r3, #0
 800a704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	461a      	mov	r2, r3
 800a714:	2300      	movs	r3, #0
 800a716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a724:	461a      	mov	r2, r3
 800a726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a72a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	3301      	adds	r3, #1
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	429a      	cmp	r2, r3
 800a738:	d3b7      	bcc.n	800a6aa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a73a:	2300      	movs	r3, #0
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	e043      	b.n	800a7c8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a756:	d118      	bne.n	800a78a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10a      	bne.n	800a774 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	461a      	mov	r2, r3
 800a76c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	e013      	b.n	800a79c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a780:	461a      	mov	r2, r3
 800a782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e008      	b.n	800a79c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a796:	461a      	mov	r2, r3
 800a798:	2300      	movs	r3, #0
 800a79a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d3b7      	bcc.n	800a740 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a7f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d105      	bne.n	800a804 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	f043 0210 	orr.w	r2, r3, #16
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	699a      	ldr	r2, [r3, #24]
 800a808:	4b0e      	ldr	r3, [pc, #56]	; (800a844 <USB_DevInit+0x2d4>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	f043 0208 	orr.w	r2, r3, #8
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a824:	2b01      	cmp	r3, #1
 800a826:	d105      	bne.n	800a834 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699a      	ldr	r2, [r3, #24]
 800a82c:	4b06      	ldr	r3, [pc, #24]	; (800a848 <USB_DevInit+0x2d8>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a834:	7dfb      	ldrb	r3, [r7, #23]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a840:	b004      	add	sp, #16
 800a842:	4770      	bx	lr
 800a844:	803c3800 	.word	0x803c3800
 800a848:	40000004 	.word	0x40000004

0800a84c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	019b      	lsls	r3, r3, #6
 800a85e:	f043 0220 	orr.w	r2, r3, #32
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4a09      	ldr	r2, [pc, #36]	; (800a894 <USB_FlushTxFifo+0x48>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d901      	bls.n	800a878 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e006      	b.n	800a886 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b20      	cmp	r3, #32
 800a882:	d0f0      	beq.n	800a866 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	00030d40 	.word	0x00030d40

0800a898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2210      	movs	r2, #16
 800a8a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a09      	ldr	r2, [pc, #36]	; (800a8d8 <USB_FlushRxFifo+0x40>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d901      	bls.n	800a8bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e006      	b.n	800a8ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b10      	cmp	r3, #16
 800a8c6:	d0f0      	beq.n	800a8aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	00030d40 	.word	0x00030d40

0800a8dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	68f9      	ldr	r1, [r7, #12]
 800a8f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a928:	f043 0302 	orr.w	r3, r3, #2
 800a92c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a92e:	2003      	movs	r0, #3
 800a930:	f7fb fcf2 	bl	8006318 <HAL_Delay>

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4a13      	ldr	r2, [pc, #76]	; (800a9a4 <USB_CoreReset+0x64>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d901      	bls.n	800a95e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e01b      	b.n	800a996 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	daf2      	bge.n	800a94c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f043 0201 	orr.w	r2, r3, #1
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3301      	adds	r3, #1
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <USB_CoreReset+0x64>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d901      	bls.n	800a988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e006      	b.n	800a996 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b01      	cmp	r3, #1
 800a992:	d0f0      	beq.n	800a976 <USB_CoreReset+0x36>

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	00030d40 	.word	0x00030d40

0800a9a8 <__errno>:
 800a9a8:	4b01      	ldr	r3, [pc, #4]	; (800a9b0 <__errno+0x8>)
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20000028 	.word	0x20000028

0800a9b4 <__libc_init_array>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	4e0d      	ldr	r6, [pc, #52]	; (800a9ec <__libc_init_array+0x38>)
 800a9b8:	4c0d      	ldr	r4, [pc, #52]	; (800a9f0 <__libc_init_array+0x3c>)
 800a9ba:	1ba4      	subs	r4, r4, r6
 800a9bc:	10a4      	asrs	r4, r4, #2
 800a9be:	2500      	movs	r5, #0
 800a9c0:	42a5      	cmp	r5, r4
 800a9c2:	d109      	bne.n	800a9d8 <__libc_init_array+0x24>
 800a9c4:	4e0b      	ldr	r6, [pc, #44]	; (800a9f4 <__libc_init_array+0x40>)
 800a9c6:	4c0c      	ldr	r4, [pc, #48]	; (800a9f8 <__libc_init_array+0x44>)
 800a9c8:	f003 facc 	bl	800df64 <_init>
 800a9cc:	1ba4      	subs	r4, r4, r6
 800a9ce:	10a4      	asrs	r4, r4, #2
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	42a5      	cmp	r5, r4
 800a9d4:	d105      	bne.n	800a9e2 <__libc_init_array+0x2e>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9dc:	4798      	blx	r3
 800a9de:	3501      	adds	r5, #1
 800a9e0:	e7ee      	b.n	800a9c0 <__libc_init_array+0xc>
 800a9e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9e6:	4798      	blx	r3
 800a9e8:	3501      	adds	r5, #1
 800a9ea:	e7f2      	b.n	800a9d2 <__libc_init_array+0x1e>
 800a9ec:	0800e6a8 	.word	0x0800e6a8
 800a9f0:	0800e6a8 	.word	0x0800e6a8
 800a9f4:	0800e6a8 	.word	0x0800e6a8
 800a9f8:	0800e6ac 	.word	0x0800e6ac

0800a9fc <memcpy>:
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	1e43      	subs	r3, r0, #1
 800aa00:	440a      	add	r2, r1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	d100      	bne.n	800aa08 <memcpy+0xc>
 800aa06:	bd10      	pop	{r4, pc}
 800aa08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa10:	e7f7      	b.n	800aa02 <memcpy+0x6>

0800aa12 <memset>:
 800aa12:	4402      	add	r2, r0
 800aa14:	4603      	mov	r3, r0
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d100      	bne.n	800aa1c <memset+0xa>
 800aa1a:	4770      	bx	lr
 800aa1c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa20:	e7f9      	b.n	800aa16 <memset+0x4>

0800aa22 <__cvt>:
 800aa22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa24:	ed2d 8b02 	vpush	{d8}
 800aa28:	eeb0 8b40 	vmov.f64	d8, d0
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	4617      	mov	r7, r2
 800aa30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aa32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa34:	ee18 2a90 	vmov	r2, s17
 800aa38:	f025 0520 	bic.w	r5, r5, #32
 800aa3c:	2a00      	cmp	r2, #0
 800aa3e:	bfb6      	itet	lt
 800aa40:	222d      	movlt	r2, #45	; 0x2d
 800aa42:	2200      	movge	r2, #0
 800aa44:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa48:	2d46      	cmp	r5, #70	; 0x46
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	d004      	beq.n	800aa5a <__cvt+0x38>
 800aa50:	2d45      	cmp	r5, #69	; 0x45
 800aa52:	d100      	bne.n	800aa56 <__cvt+0x34>
 800aa54:	3401      	adds	r4, #1
 800aa56:	2102      	movs	r1, #2
 800aa58:	e000      	b.n	800aa5c <__cvt+0x3a>
 800aa5a:	2103      	movs	r1, #3
 800aa5c:	ab03      	add	r3, sp, #12
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	ab02      	add	r3, sp, #8
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	4622      	mov	r2, r4
 800aa66:	4633      	mov	r3, r6
 800aa68:	eeb0 0b48 	vmov.f64	d0, d8
 800aa6c:	f000 fddc 	bl	800b628 <_dtoa_r>
 800aa70:	2d47      	cmp	r5, #71	; 0x47
 800aa72:	d101      	bne.n	800aa78 <__cvt+0x56>
 800aa74:	07fb      	lsls	r3, r7, #31
 800aa76:	d51e      	bpl.n	800aab6 <__cvt+0x94>
 800aa78:	2d46      	cmp	r5, #70	; 0x46
 800aa7a:	eb00 0304 	add.w	r3, r0, r4
 800aa7e:	d10c      	bne.n	800aa9a <__cvt+0x78>
 800aa80:	7802      	ldrb	r2, [r0, #0]
 800aa82:	2a30      	cmp	r2, #48	; 0x30
 800aa84:	d107      	bne.n	800aa96 <__cvt+0x74>
 800aa86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8e:	bf1c      	itt	ne
 800aa90:	f1c4 0401 	rsbne	r4, r4, #1
 800aa94:	6034      	strne	r4, [r6, #0]
 800aa96:	6832      	ldr	r2, [r6, #0]
 800aa98:	4413      	add	r3, r2
 800aa9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa2:	d007      	beq.n	800aab4 <__cvt+0x92>
 800aaa4:	2130      	movs	r1, #48	; 0x30
 800aaa6:	9a03      	ldr	r2, [sp, #12]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d204      	bcs.n	800aab6 <__cvt+0x94>
 800aaac:	1c54      	adds	r4, r2, #1
 800aaae:	9403      	str	r4, [sp, #12]
 800aab0:	7011      	strb	r1, [r2, #0]
 800aab2:	e7f8      	b.n	800aaa6 <__cvt+0x84>
 800aab4:	9303      	str	r3, [sp, #12]
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaba:	1a1b      	subs	r3, r3, r0
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	b005      	add	sp, #20
 800aac0:	ecbd 8b02 	vpop	{d8}
 800aac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aac6 <__exponent>:
 800aac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac8:	2900      	cmp	r1, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	bfba      	itte	lt
 800aace:	4249      	neglt	r1, r1
 800aad0:	232d      	movlt	r3, #45	; 0x2d
 800aad2:	232b      	movge	r3, #43	; 0x2b
 800aad4:	2909      	cmp	r1, #9
 800aad6:	f804 2b02 	strb.w	r2, [r4], #2
 800aada:	7043      	strb	r3, [r0, #1]
 800aadc:	dd20      	ble.n	800ab20 <__exponent+0x5a>
 800aade:	f10d 0307 	add.w	r3, sp, #7
 800aae2:	461f      	mov	r7, r3
 800aae4:	260a      	movs	r6, #10
 800aae6:	fb91 f5f6 	sdiv	r5, r1, r6
 800aaea:	fb06 1115 	mls	r1, r6, r5, r1
 800aaee:	3130      	adds	r1, #48	; 0x30
 800aaf0:	2d09      	cmp	r5, #9
 800aaf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aaf6:	f103 32ff 	add.w	r2, r3, #4294967295
 800aafa:	4629      	mov	r1, r5
 800aafc:	dc09      	bgt.n	800ab12 <__exponent+0x4c>
 800aafe:	3130      	adds	r1, #48	; 0x30
 800ab00:	3b02      	subs	r3, #2
 800ab02:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ab06:	42bb      	cmp	r3, r7
 800ab08:	4622      	mov	r2, r4
 800ab0a:	d304      	bcc.n	800ab16 <__exponent+0x50>
 800ab0c:	1a10      	subs	r0, r2, r0
 800ab0e:	b003      	add	sp, #12
 800ab10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab12:	4613      	mov	r3, r2
 800ab14:	e7e7      	b.n	800aae6 <__exponent+0x20>
 800ab16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab1a:	f804 2b01 	strb.w	r2, [r4], #1
 800ab1e:	e7f2      	b.n	800ab06 <__exponent+0x40>
 800ab20:	2330      	movs	r3, #48	; 0x30
 800ab22:	4419      	add	r1, r3
 800ab24:	7083      	strb	r3, [r0, #2]
 800ab26:	1d02      	adds	r2, r0, #4
 800ab28:	70c1      	strb	r1, [r0, #3]
 800ab2a:	e7ef      	b.n	800ab0c <__exponent+0x46>
 800ab2c:	0000      	movs	r0, r0
	...

0800ab30 <_printf_float>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	b08d      	sub	sp, #52	; 0x34
 800ab36:	460c      	mov	r4, r1
 800ab38:	4616      	mov	r6, r2
 800ab3a:	461f      	mov	r7, r3
 800ab3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ab40:	4605      	mov	r5, r0
 800ab42:	f001 fc37 	bl	800c3b4 <_localeconv_r>
 800ab46:	f8d0 b000 	ldr.w	fp, [r0]
 800ab4a:	4658      	mov	r0, fp
 800ab4c:	f7f5 fb78 	bl	8000240 <strlen>
 800ab50:	2300      	movs	r3, #0
 800ab52:	930a      	str	r3, [sp, #40]	; 0x28
 800ab54:	f8d8 3000 	ldr.w	r3, [r8]
 800ab58:	9005      	str	r0, [sp, #20]
 800ab5a:	3307      	adds	r3, #7
 800ab5c:	f023 0307 	bic.w	r3, r3, #7
 800ab60:	f103 0108 	add.w	r1, r3, #8
 800ab64:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	f8c8 1000 	str.w	r1, [r8]
 800ab6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ab76:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800ae00 <_printf_float+0x2d0>
 800ab7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ab7e:	eeb0 6bc0 	vabs.f64	d6, d0
 800ab82:	eeb4 6b47 	vcmp.f64	d6, d7
 800ab86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8a:	dd24      	ble.n	800abd6 <_printf_float+0xa6>
 800ab8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab94:	d502      	bpl.n	800ab9c <_printf_float+0x6c>
 800ab96:	232d      	movs	r3, #45	; 0x2d
 800ab98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab9c:	499a      	ldr	r1, [pc, #616]	; (800ae08 <_printf_float+0x2d8>)
 800ab9e:	4b9b      	ldr	r3, [pc, #620]	; (800ae0c <_printf_float+0x2dc>)
 800aba0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aba4:	bf8c      	ite	hi
 800aba6:	4688      	movhi	r8, r1
 800aba8:	4698      	movls	r8, r3
 800abaa:	f022 0204 	bic.w	r2, r2, #4
 800abae:	2303      	movs	r3, #3
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	f04f 0a00 	mov.w	sl, #0
 800abb8:	9700      	str	r7, [sp, #0]
 800abba:	4633      	mov	r3, r6
 800abbc:	aa0b      	add	r2, sp, #44	; 0x2c
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 f9e1 	bl	800af88 <_printf_common>
 800abc6:	3001      	adds	r0, #1
 800abc8:	f040 8089 	bne.w	800acde <_printf_float+0x1ae>
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	b00d      	add	sp, #52	; 0x34
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	eeb4 0b40 	vcmp.f64	d0, d0
 800abda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abde:	d702      	bvc.n	800abe6 <_printf_float+0xb6>
 800abe0:	498b      	ldr	r1, [pc, #556]	; (800ae10 <_printf_float+0x2e0>)
 800abe2:	4b8c      	ldr	r3, [pc, #560]	; (800ae14 <_printf_float+0x2e4>)
 800abe4:	e7dc      	b.n	800aba0 <_printf_float+0x70>
 800abe6:	6861      	ldr	r1, [r4, #4]
 800abe8:	1c4b      	adds	r3, r1, #1
 800abea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abee:	ab0a      	add	r3, sp, #40	; 0x28
 800abf0:	a809      	add	r0, sp, #36	; 0x24
 800abf2:	d13b      	bne.n	800ac6c <_printf_float+0x13c>
 800abf4:	2106      	movs	r1, #6
 800abf6:	6061      	str	r1, [r4, #4]
 800abf8:	f04f 0c00 	mov.w	ip, #0
 800abfc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ac00:	e9cd 0900 	strd	r0, r9, [sp]
 800ac04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac08:	6022      	str	r2, [r4, #0]
 800ac0a:	6861      	ldr	r1, [r4, #4]
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f7ff ff08 	bl	800aa22 <__cvt>
 800ac12:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ac16:	2b47      	cmp	r3, #71	; 0x47
 800ac18:	4680      	mov	r8, r0
 800ac1a:	d109      	bne.n	800ac30 <_printf_float+0x100>
 800ac1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1e:	1cd8      	adds	r0, r3, #3
 800ac20:	db02      	blt.n	800ac28 <_printf_float+0xf8>
 800ac22:	6862      	ldr	r2, [r4, #4]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	dd47      	ble.n	800acb8 <_printf_float+0x188>
 800ac28:	f1a9 0902 	sub.w	r9, r9, #2
 800ac2c:	fa5f f989 	uxtb.w	r9, r9
 800ac30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac36:	d824      	bhi.n	800ac82 <_printf_float+0x152>
 800ac38:	3901      	subs	r1, #1
 800ac3a:	464a      	mov	r2, r9
 800ac3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac40:	9109      	str	r1, [sp, #36]	; 0x24
 800ac42:	f7ff ff40 	bl	800aac6 <__exponent>
 800ac46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac48:	1813      	adds	r3, r2, r0
 800ac4a:	2a01      	cmp	r2, #1
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	6123      	str	r3, [r4, #16]
 800ac50:	dc02      	bgt.n	800ac58 <_printf_float+0x128>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	07d1      	lsls	r1, r2, #31
 800ac56:	d501      	bpl.n	800ac5c <_printf_float+0x12c>
 800ac58:	3301      	adds	r3, #1
 800ac5a:	6123      	str	r3, [r4, #16]
 800ac5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0a9      	beq.n	800abb8 <_printf_float+0x88>
 800ac64:	232d      	movs	r3, #45	; 0x2d
 800ac66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac6a:	e7a5      	b.n	800abb8 <_printf_float+0x88>
 800ac6c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ac70:	f000 8178 	beq.w	800af64 <_printf_float+0x434>
 800ac74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ac78:	d1be      	bne.n	800abf8 <_printf_float+0xc8>
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d1bc      	bne.n	800abf8 <_printf_float+0xc8>
 800ac7e:	2101      	movs	r1, #1
 800ac80:	e7b9      	b.n	800abf6 <_printf_float+0xc6>
 800ac82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ac86:	d119      	bne.n	800acbc <_printf_float+0x18c>
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	dd0c      	ble.n	800aca8 <_printf_float+0x178>
 800ac8e:	6121      	str	r1, [r4, #16]
 800ac90:	b913      	cbnz	r3, 800ac98 <_printf_float+0x168>
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	07d2      	lsls	r2, r2, #31
 800ac96:	d502      	bpl.n	800ac9e <_printf_float+0x16e>
 800ac98:	3301      	adds	r3, #1
 800ac9a:	440b      	add	r3, r1
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca0:	65a3      	str	r3, [r4, #88]	; 0x58
 800aca2:	f04f 0a00 	mov.w	sl, #0
 800aca6:	e7d9      	b.n	800ac5c <_printf_float+0x12c>
 800aca8:	b913      	cbnz	r3, 800acb0 <_printf_float+0x180>
 800acaa:	6822      	ldr	r2, [r4, #0]
 800acac:	07d0      	lsls	r0, r2, #31
 800acae:	d501      	bpl.n	800acb4 <_printf_float+0x184>
 800acb0:	3302      	adds	r3, #2
 800acb2:	e7f3      	b.n	800ac9c <_printf_float+0x16c>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e7f1      	b.n	800ac9c <_printf_float+0x16c>
 800acb8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800acbc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acc0:	4293      	cmp	r3, r2
 800acc2:	db05      	blt.n	800acd0 <_printf_float+0x1a0>
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	6123      	str	r3, [r4, #16]
 800acc8:	07d1      	lsls	r1, r2, #31
 800acca:	d5e8      	bpl.n	800ac9e <_printf_float+0x16e>
 800accc:	3301      	adds	r3, #1
 800acce:	e7e5      	b.n	800ac9c <_printf_float+0x16c>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	bfd4      	ite	le
 800acd4:	f1c3 0302 	rsble	r3, r3, #2
 800acd8:	2301      	movgt	r3, #1
 800acda:	4413      	add	r3, r2
 800acdc:	e7de      	b.n	800ac9c <_printf_float+0x16c>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	055a      	lsls	r2, r3, #21
 800ace2:	d407      	bmi.n	800acf4 <_printf_float+0x1c4>
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	4642      	mov	r2, r8
 800ace8:	4631      	mov	r1, r6
 800acea:	4628      	mov	r0, r5
 800acec:	47b8      	blx	r7
 800acee:	3001      	adds	r0, #1
 800acf0:	d12a      	bne.n	800ad48 <_printf_float+0x218>
 800acf2:	e76b      	b.n	800abcc <_printf_float+0x9c>
 800acf4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800acf8:	f240 80de 	bls.w	800aeb8 <_printf_float+0x388>
 800acfc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ad00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad08:	d133      	bne.n	800ad72 <_printf_float+0x242>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4a42      	ldr	r2, [pc, #264]	; (800ae18 <_printf_float+0x2e8>)
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4628      	mov	r0, r5
 800ad12:	47b8      	blx	r7
 800ad14:	3001      	adds	r0, #1
 800ad16:	f43f af59 	beq.w	800abcc <_printf_float+0x9c>
 800ad1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	db02      	blt.n	800ad28 <_printf_float+0x1f8>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	07d8      	lsls	r0, r3, #31
 800ad26:	d50f      	bpl.n	800ad48 <_printf_float+0x218>
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	465a      	mov	r2, fp
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b8      	blx	r7
 800ad32:	3001      	adds	r0, #1
 800ad34:	f43f af4a 	beq.w	800abcc <_printf_float+0x9c>
 800ad38:	f04f 0800 	mov.w	r8, #0
 800ad3c:	f104 091a 	add.w	r9, r4, #26
 800ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad42:	3b01      	subs	r3, #1
 800ad44:	4543      	cmp	r3, r8
 800ad46:	dc09      	bgt.n	800ad5c <_printf_float+0x22c>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	079b      	lsls	r3, r3, #30
 800ad4c:	f100 8105 	bmi.w	800af5a <_printf_float+0x42a>
 800ad50:	68e0      	ldr	r0, [r4, #12]
 800ad52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad54:	4298      	cmp	r0, r3
 800ad56:	bfb8      	it	lt
 800ad58:	4618      	movlt	r0, r3
 800ad5a:	e739      	b.n	800abd0 <_printf_float+0xa0>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	464a      	mov	r2, r9
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f af30 	beq.w	800abcc <_printf_float+0x9c>
 800ad6c:	f108 0801 	add.w	r8, r8, #1
 800ad70:	e7e6      	b.n	800ad40 <_printf_float+0x210>
 800ad72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dc2b      	bgt.n	800add0 <_printf_float+0x2a0>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	4a27      	ldr	r2, [pc, #156]	; (800ae18 <_printf_float+0x2e8>)
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	f43f af22 	beq.w	800abcc <_printf_float+0x9c>
 800ad88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad8a:	b923      	cbnz	r3, 800ad96 <_printf_float+0x266>
 800ad8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad8e:	b913      	cbnz	r3, 800ad96 <_printf_float+0x266>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	07d9      	lsls	r1, r3, #31
 800ad94:	d5d8      	bpl.n	800ad48 <_printf_float+0x218>
 800ad96:	9b05      	ldr	r3, [sp, #20]
 800ad98:	465a      	mov	r2, fp
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f af13 	beq.w	800abcc <_printf_float+0x9c>
 800ada6:	f04f 0900 	mov.w	r9, #0
 800adaa:	f104 0a1a 	add.w	sl, r4, #26
 800adae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb0:	425b      	negs	r3, r3
 800adb2:	454b      	cmp	r3, r9
 800adb4:	dc01      	bgt.n	800adba <_printf_float+0x28a>
 800adb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb8:	e795      	b.n	800ace6 <_printf_float+0x1b6>
 800adba:	2301      	movs	r3, #1
 800adbc:	4652      	mov	r2, sl
 800adbe:	4631      	mov	r1, r6
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b8      	blx	r7
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f af01 	beq.w	800abcc <_printf_float+0x9c>
 800adca:	f109 0901 	add.w	r9, r9, #1
 800adce:	e7ee      	b.n	800adae <_printf_float+0x27e>
 800add0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800add4:	429a      	cmp	r2, r3
 800add6:	bfa8      	it	ge
 800add8:	461a      	movge	r2, r3
 800adda:	2a00      	cmp	r2, #0
 800addc:	4691      	mov	r9, r2
 800adde:	dd07      	ble.n	800adf0 <_printf_float+0x2c0>
 800ade0:	4613      	mov	r3, r2
 800ade2:	4631      	mov	r1, r6
 800ade4:	4642      	mov	r2, r8
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b8      	blx	r7
 800adea:	3001      	adds	r0, #1
 800adec:	f43f aeee 	beq.w	800abcc <_printf_float+0x9c>
 800adf0:	f104 031a 	add.w	r3, r4, #26
 800adf4:	f04f 0a00 	mov.w	sl, #0
 800adf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	e017      	b.n	800ae30 <_printf_float+0x300>
 800ae00:	ffffffff 	.word	0xffffffff
 800ae04:	7fefffff 	.word	0x7fefffff
 800ae08:	0800e1f0 	.word	0x0800e1f0
 800ae0c:	0800e1ec 	.word	0x0800e1ec
 800ae10:	0800e1f8 	.word	0x0800e1f8
 800ae14:	0800e1f4 	.word	0x0800e1f4
 800ae18:	0800e1fc 	.word	0x0800e1fc
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	9a07      	ldr	r2, [sp, #28]
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	f43f aed0 	beq.w	800abcc <_printf_float+0x9c>
 800ae2c:	f10a 0a01 	add.w	sl, sl, #1
 800ae30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae32:	9306      	str	r3, [sp, #24]
 800ae34:	eba3 0309 	sub.w	r3, r3, r9
 800ae38:	4553      	cmp	r3, sl
 800ae3a:	dcef      	bgt.n	800ae1c <_printf_float+0x2ec>
 800ae3c:	9b06      	ldr	r3, [sp, #24]
 800ae3e:	4498      	add	r8, r3
 800ae40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae44:	429a      	cmp	r2, r3
 800ae46:	db15      	blt.n	800ae74 <_printf_float+0x344>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	07da      	lsls	r2, r3, #31
 800ae4c:	d412      	bmi.n	800ae74 <_printf_float+0x344>
 800ae4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae50:	9a06      	ldr	r2, [sp, #24]
 800ae52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae54:	1a9a      	subs	r2, r3, r2
 800ae56:	eba3 0a01 	sub.w	sl, r3, r1
 800ae5a:	4592      	cmp	sl, r2
 800ae5c:	bfa8      	it	ge
 800ae5e:	4692      	movge	sl, r2
 800ae60:	f1ba 0f00 	cmp.w	sl, #0
 800ae64:	dc0e      	bgt.n	800ae84 <_printf_float+0x354>
 800ae66:	f04f 0800 	mov.w	r8, #0
 800ae6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae6e:	f104 091a 	add.w	r9, r4, #26
 800ae72:	e019      	b.n	800aea8 <_printf_float+0x378>
 800ae74:	9b05      	ldr	r3, [sp, #20]
 800ae76:	465a      	mov	r2, fp
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	47b8      	blx	r7
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d1e5      	bne.n	800ae4e <_printf_float+0x31e>
 800ae82:	e6a3      	b.n	800abcc <_printf_float+0x9c>
 800ae84:	4653      	mov	r3, sl
 800ae86:	4642      	mov	r2, r8
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	d1e9      	bne.n	800ae66 <_printf_float+0x336>
 800ae92:	e69b      	b.n	800abcc <_printf_float+0x9c>
 800ae94:	2301      	movs	r3, #1
 800ae96:	464a      	mov	r2, r9
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f ae94 	beq.w	800abcc <_printf_float+0x9c>
 800aea4:	f108 0801 	add.w	r8, r8, #1
 800aea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	eba3 030a 	sub.w	r3, r3, sl
 800aeb2:	4543      	cmp	r3, r8
 800aeb4:	dcee      	bgt.n	800ae94 <_printf_float+0x364>
 800aeb6:	e747      	b.n	800ad48 <_printf_float+0x218>
 800aeb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeba:	2a01      	cmp	r2, #1
 800aebc:	dc01      	bgt.n	800aec2 <_printf_float+0x392>
 800aebe:	07db      	lsls	r3, r3, #31
 800aec0:	d539      	bpl.n	800af36 <_printf_float+0x406>
 800aec2:	2301      	movs	r3, #1
 800aec4:	4642      	mov	r2, r8
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b8      	blx	r7
 800aecc:	3001      	adds	r0, #1
 800aece:	f43f ae7d 	beq.w	800abcc <_printf_float+0x9c>
 800aed2:	9b05      	ldr	r3, [sp, #20]
 800aed4:	465a      	mov	r2, fp
 800aed6:	4631      	mov	r1, r6
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b8      	blx	r7
 800aedc:	3001      	adds	r0, #1
 800aede:	f108 0801 	add.w	r8, r8, #1
 800aee2:	f43f ae73 	beq.w	800abcc <_printf_float+0x9c>
 800aee6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef4:	f103 33ff 	add.w	r3, r3, #4294967295
 800aef8:	d018      	beq.n	800af2c <_printf_float+0x3fc>
 800aefa:	4642      	mov	r2, r8
 800aefc:	4631      	mov	r1, r6
 800aefe:	4628      	mov	r0, r5
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	d10e      	bne.n	800af24 <_printf_float+0x3f4>
 800af06:	e661      	b.n	800abcc <_printf_float+0x9c>
 800af08:	2301      	movs	r3, #1
 800af0a:	464a      	mov	r2, r9
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	f43f ae5a 	beq.w	800abcc <_printf_float+0x9c>
 800af18:	f108 0801 	add.w	r8, r8, #1
 800af1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1e:	3b01      	subs	r3, #1
 800af20:	4543      	cmp	r3, r8
 800af22:	dcf1      	bgt.n	800af08 <_printf_float+0x3d8>
 800af24:	4653      	mov	r3, sl
 800af26:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af2a:	e6dd      	b.n	800ace8 <_printf_float+0x1b8>
 800af2c:	f04f 0800 	mov.w	r8, #0
 800af30:	f104 091a 	add.w	r9, r4, #26
 800af34:	e7f2      	b.n	800af1c <_printf_float+0x3ec>
 800af36:	2301      	movs	r3, #1
 800af38:	e7df      	b.n	800aefa <_printf_float+0x3ca>
 800af3a:	2301      	movs	r3, #1
 800af3c:	464a      	mov	r2, r9
 800af3e:	4631      	mov	r1, r6
 800af40:	4628      	mov	r0, r5
 800af42:	47b8      	blx	r7
 800af44:	3001      	adds	r0, #1
 800af46:	f43f ae41 	beq.w	800abcc <_printf_float+0x9c>
 800af4a:	f108 0801 	add.w	r8, r8, #1
 800af4e:	68e3      	ldr	r3, [r4, #12]
 800af50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af52:	1a9b      	subs	r3, r3, r2
 800af54:	4543      	cmp	r3, r8
 800af56:	dcf0      	bgt.n	800af3a <_printf_float+0x40a>
 800af58:	e6fa      	b.n	800ad50 <_printf_float+0x220>
 800af5a:	f04f 0800 	mov.w	r8, #0
 800af5e:	f104 0919 	add.w	r9, r4, #25
 800af62:	e7f4      	b.n	800af4e <_printf_float+0x41e>
 800af64:	2900      	cmp	r1, #0
 800af66:	f43f ae8a 	beq.w	800ac7e <_printf_float+0x14e>
 800af6a:	f04f 0c00 	mov.w	ip, #0
 800af6e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800af72:	e9cd 0900 	strd	r0, r9, [sp]
 800af76:	6022      	str	r2, [r4, #0]
 800af78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af7c:	4628      	mov	r0, r5
 800af7e:	f7ff fd50 	bl	800aa22 <__cvt>
 800af82:	4680      	mov	r8, r0
 800af84:	e64a      	b.n	800ac1c <_printf_float+0xec>
 800af86:	bf00      	nop

0800af88 <_printf_common>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	4691      	mov	r9, r2
 800af8e:	461f      	mov	r7, r3
 800af90:	688a      	ldr	r2, [r1, #8]
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af98:	4293      	cmp	r3, r2
 800af9a:	bfb8      	it	lt
 800af9c:	4613      	movlt	r3, r2
 800af9e:	f8c9 3000 	str.w	r3, [r9]
 800afa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afa6:	4606      	mov	r6, r0
 800afa8:	460c      	mov	r4, r1
 800afaa:	b112      	cbz	r2, 800afb2 <_printf_common+0x2a>
 800afac:	3301      	adds	r3, #1
 800afae:	f8c9 3000 	str.w	r3, [r9]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afbc:	3302      	addmi	r3, #2
 800afbe:	f8c9 3000 	strmi.w	r3, [r9]
 800afc2:	6825      	ldr	r5, [r4, #0]
 800afc4:	f015 0506 	ands.w	r5, r5, #6
 800afc8:	d107      	bne.n	800afda <_printf_common+0x52>
 800afca:	f104 0a19 	add.w	sl, r4, #25
 800afce:	68e3      	ldr	r3, [r4, #12]
 800afd0:	f8d9 2000 	ldr.w	r2, [r9]
 800afd4:	1a9b      	subs	r3, r3, r2
 800afd6:	42ab      	cmp	r3, r5
 800afd8:	dc28      	bgt.n	800b02c <_printf_common+0xa4>
 800afda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	3300      	adds	r3, #0
 800afe2:	bf18      	it	ne
 800afe4:	2301      	movne	r3, #1
 800afe6:	0692      	lsls	r2, r2, #26
 800afe8:	d42d      	bmi.n	800b046 <_printf_common+0xbe>
 800afea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afee:	4639      	mov	r1, r7
 800aff0:	4630      	mov	r0, r6
 800aff2:	47c0      	blx	r8
 800aff4:	3001      	adds	r0, #1
 800aff6:	d020      	beq.n	800b03a <_printf_common+0xb2>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	68e5      	ldr	r5, [r4, #12]
 800affc:	f8d9 2000 	ldr.w	r2, [r9]
 800b000:	f003 0306 	and.w	r3, r3, #6
 800b004:	2b04      	cmp	r3, #4
 800b006:	bf08      	it	eq
 800b008:	1aad      	subeq	r5, r5, r2
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	6922      	ldr	r2, [r4, #16]
 800b00e:	bf0c      	ite	eq
 800b010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b014:	2500      	movne	r5, #0
 800b016:	4293      	cmp	r3, r2
 800b018:	bfc4      	itt	gt
 800b01a:	1a9b      	subgt	r3, r3, r2
 800b01c:	18ed      	addgt	r5, r5, r3
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	341a      	adds	r4, #26
 800b024:	454d      	cmp	r5, r9
 800b026:	d11a      	bne.n	800b05e <_printf_common+0xd6>
 800b028:	2000      	movs	r0, #0
 800b02a:	e008      	b.n	800b03e <_printf_common+0xb6>
 800b02c:	2301      	movs	r3, #1
 800b02e:	4652      	mov	r2, sl
 800b030:	4639      	mov	r1, r7
 800b032:	4630      	mov	r0, r6
 800b034:	47c0      	blx	r8
 800b036:	3001      	adds	r0, #1
 800b038:	d103      	bne.n	800b042 <_printf_common+0xba>
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b042:	3501      	adds	r5, #1
 800b044:	e7c3      	b.n	800afce <_printf_common+0x46>
 800b046:	18e1      	adds	r1, r4, r3
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	2030      	movs	r0, #48	; 0x30
 800b04c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b050:	4422      	add	r2, r4
 800b052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b05a:	3302      	adds	r3, #2
 800b05c:	e7c5      	b.n	800afea <_printf_common+0x62>
 800b05e:	2301      	movs	r3, #1
 800b060:	4622      	mov	r2, r4
 800b062:	4639      	mov	r1, r7
 800b064:	4630      	mov	r0, r6
 800b066:	47c0      	blx	r8
 800b068:	3001      	adds	r0, #1
 800b06a:	d0e6      	beq.n	800b03a <_printf_common+0xb2>
 800b06c:	f109 0901 	add.w	r9, r9, #1
 800b070:	e7d8      	b.n	800b024 <_printf_common+0x9c>
	...

0800b074 <_printf_i>:
 800b074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b078:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b07c:	460c      	mov	r4, r1
 800b07e:	7e09      	ldrb	r1, [r1, #24]
 800b080:	b085      	sub	sp, #20
 800b082:	296e      	cmp	r1, #110	; 0x6e
 800b084:	4617      	mov	r7, r2
 800b086:	4606      	mov	r6, r0
 800b088:	4698      	mov	r8, r3
 800b08a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b08c:	f000 80b3 	beq.w	800b1f6 <_printf_i+0x182>
 800b090:	d822      	bhi.n	800b0d8 <_printf_i+0x64>
 800b092:	2963      	cmp	r1, #99	; 0x63
 800b094:	d036      	beq.n	800b104 <_printf_i+0x90>
 800b096:	d80a      	bhi.n	800b0ae <_printf_i+0x3a>
 800b098:	2900      	cmp	r1, #0
 800b09a:	f000 80b9 	beq.w	800b210 <_printf_i+0x19c>
 800b09e:	2958      	cmp	r1, #88	; 0x58
 800b0a0:	f000 8083 	beq.w	800b1aa <_printf_i+0x136>
 800b0a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0ac:	e032      	b.n	800b114 <_printf_i+0xa0>
 800b0ae:	2964      	cmp	r1, #100	; 0x64
 800b0b0:	d001      	beq.n	800b0b6 <_printf_i+0x42>
 800b0b2:	2969      	cmp	r1, #105	; 0x69
 800b0b4:	d1f6      	bne.n	800b0a4 <_printf_i+0x30>
 800b0b6:	6820      	ldr	r0, [r4, #0]
 800b0b8:	6813      	ldr	r3, [r2, #0]
 800b0ba:	0605      	lsls	r5, r0, #24
 800b0bc:	f103 0104 	add.w	r1, r3, #4
 800b0c0:	d52a      	bpl.n	800b118 <_printf_i+0xa4>
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6011      	str	r1, [r2, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	da03      	bge.n	800b0d2 <_printf_i+0x5e>
 800b0ca:	222d      	movs	r2, #45	; 0x2d
 800b0cc:	425b      	negs	r3, r3
 800b0ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0d2:	486f      	ldr	r0, [pc, #444]	; (800b290 <_printf_i+0x21c>)
 800b0d4:	220a      	movs	r2, #10
 800b0d6:	e039      	b.n	800b14c <_printf_i+0xd8>
 800b0d8:	2973      	cmp	r1, #115	; 0x73
 800b0da:	f000 809d 	beq.w	800b218 <_printf_i+0x1a4>
 800b0de:	d808      	bhi.n	800b0f2 <_printf_i+0x7e>
 800b0e0:	296f      	cmp	r1, #111	; 0x6f
 800b0e2:	d020      	beq.n	800b126 <_printf_i+0xb2>
 800b0e4:	2970      	cmp	r1, #112	; 0x70
 800b0e6:	d1dd      	bne.n	800b0a4 <_printf_i+0x30>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	f043 0320 	orr.w	r3, r3, #32
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	e003      	b.n	800b0fa <_printf_i+0x86>
 800b0f2:	2975      	cmp	r1, #117	; 0x75
 800b0f4:	d017      	beq.n	800b126 <_printf_i+0xb2>
 800b0f6:	2978      	cmp	r1, #120	; 0x78
 800b0f8:	d1d4      	bne.n	800b0a4 <_printf_i+0x30>
 800b0fa:	2378      	movs	r3, #120	; 0x78
 800b0fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b100:	4864      	ldr	r0, [pc, #400]	; (800b294 <_printf_i+0x220>)
 800b102:	e055      	b.n	800b1b0 <_printf_i+0x13c>
 800b104:	6813      	ldr	r3, [r2, #0]
 800b106:	1d19      	adds	r1, r3, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6011      	str	r1, [r2, #0]
 800b10c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b114:	2301      	movs	r3, #1
 800b116:	e08c      	b.n	800b232 <_printf_i+0x1be>
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6011      	str	r1, [r2, #0]
 800b11c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b120:	bf18      	it	ne
 800b122:	b21b      	sxthne	r3, r3
 800b124:	e7cf      	b.n	800b0c6 <_printf_i+0x52>
 800b126:	6813      	ldr	r3, [r2, #0]
 800b128:	6825      	ldr	r5, [r4, #0]
 800b12a:	1d18      	adds	r0, r3, #4
 800b12c:	6010      	str	r0, [r2, #0]
 800b12e:	0628      	lsls	r0, r5, #24
 800b130:	d501      	bpl.n	800b136 <_printf_i+0xc2>
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	e002      	b.n	800b13c <_printf_i+0xc8>
 800b136:	0668      	lsls	r0, r5, #25
 800b138:	d5fb      	bpl.n	800b132 <_printf_i+0xbe>
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	4854      	ldr	r0, [pc, #336]	; (800b290 <_printf_i+0x21c>)
 800b13e:	296f      	cmp	r1, #111	; 0x6f
 800b140:	bf14      	ite	ne
 800b142:	220a      	movne	r2, #10
 800b144:	2208      	moveq	r2, #8
 800b146:	2100      	movs	r1, #0
 800b148:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b14c:	6865      	ldr	r5, [r4, #4]
 800b14e:	60a5      	str	r5, [r4, #8]
 800b150:	2d00      	cmp	r5, #0
 800b152:	f2c0 8095 	blt.w	800b280 <_printf_i+0x20c>
 800b156:	6821      	ldr	r1, [r4, #0]
 800b158:	f021 0104 	bic.w	r1, r1, #4
 800b15c:	6021      	str	r1, [r4, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d13d      	bne.n	800b1de <_printf_i+0x16a>
 800b162:	2d00      	cmp	r5, #0
 800b164:	f040 808e 	bne.w	800b284 <_printf_i+0x210>
 800b168:	4665      	mov	r5, ip
 800b16a:	2a08      	cmp	r2, #8
 800b16c:	d10b      	bne.n	800b186 <_printf_i+0x112>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	07db      	lsls	r3, r3, #31
 800b172:	d508      	bpl.n	800b186 <_printf_i+0x112>
 800b174:	6923      	ldr	r3, [r4, #16]
 800b176:	6862      	ldr	r2, [r4, #4]
 800b178:	429a      	cmp	r2, r3
 800b17a:	bfde      	ittt	le
 800b17c:	2330      	movle	r3, #48	; 0x30
 800b17e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b182:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b186:	ebac 0305 	sub.w	r3, ip, r5
 800b18a:	6123      	str	r3, [r4, #16]
 800b18c:	f8cd 8000 	str.w	r8, [sp]
 800b190:	463b      	mov	r3, r7
 800b192:	aa03      	add	r2, sp, #12
 800b194:	4621      	mov	r1, r4
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff fef6 	bl	800af88 <_printf_common>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d14d      	bne.n	800b23c <_printf_i+0x1c8>
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	b005      	add	sp, #20
 800b1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	4839      	ldr	r0, [pc, #228]	; (800b290 <_printf_i+0x21c>)
 800b1ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1b0:	6813      	ldr	r3, [r2, #0]
 800b1b2:	6821      	ldr	r1, [r4, #0]
 800b1b4:	1d1d      	adds	r5, r3, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6015      	str	r5, [r2, #0]
 800b1ba:	060a      	lsls	r2, r1, #24
 800b1bc:	d50b      	bpl.n	800b1d6 <_printf_i+0x162>
 800b1be:	07ca      	lsls	r2, r1, #31
 800b1c0:	bf44      	itt	mi
 800b1c2:	f041 0120 	orrmi.w	r1, r1, #32
 800b1c6:	6021      	strmi	r1, [r4, #0]
 800b1c8:	b91b      	cbnz	r3, 800b1d2 <_printf_i+0x15e>
 800b1ca:	6822      	ldr	r2, [r4, #0]
 800b1cc:	f022 0220 	bic.w	r2, r2, #32
 800b1d0:	6022      	str	r2, [r4, #0]
 800b1d2:	2210      	movs	r2, #16
 800b1d4:	e7b7      	b.n	800b146 <_printf_i+0xd2>
 800b1d6:	064d      	lsls	r5, r1, #25
 800b1d8:	bf48      	it	mi
 800b1da:	b29b      	uxthmi	r3, r3
 800b1dc:	e7ef      	b.n	800b1be <_printf_i+0x14a>
 800b1de:	4665      	mov	r5, ip
 800b1e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1e4:	fb02 3311 	mls	r3, r2, r1, r3
 800b1e8:	5cc3      	ldrb	r3, [r0, r3]
 800b1ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	d1f5      	bne.n	800b1e0 <_printf_i+0x16c>
 800b1f4:	e7b9      	b.n	800b16a <_printf_i+0xf6>
 800b1f6:	6813      	ldr	r3, [r2, #0]
 800b1f8:	6825      	ldr	r5, [r4, #0]
 800b1fa:	6961      	ldr	r1, [r4, #20]
 800b1fc:	1d18      	adds	r0, r3, #4
 800b1fe:	6010      	str	r0, [r2, #0]
 800b200:	0628      	lsls	r0, r5, #24
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	d501      	bpl.n	800b20a <_printf_i+0x196>
 800b206:	6019      	str	r1, [r3, #0]
 800b208:	e002      	b.n	800b210 <_printf_i+0x19c>
 800b20a:	066a      	lsls	r2, r5, #25
 800b20c:	d5fb      	bpl.n	800b206 <_printf_i+0x192>
 800b20e:	8019      	strh	r1, [r3, #0]
 800b210:	2300      	movs	r3, #0
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	4665      	mov	r5, ip
 800b216:	e7b9      	b.n	800b18c <_printf_i+0x118>
 800b218:	6813      	ldr	r3, [r2, #0]
 800b21a:	1d19      	adds	r1, r3, #4
 800b21c:	6011      	str	r1, [r2, #0]
 800b21e:	681d      	ldr	r5, [r3, #0]
 800b220:	6862      	ldr	r2, [r4, #4]
 800b222:	2100      	movs	r1, #0
 800b224:	4628      	mov	r0, r5
 800b226:	f7f5 f813 	bl	8000250 <memchr>
 800b22a:	b108      	cbz	r0, 800b230 <_printf_i+0x1bc>
 800b22c:	1b40      	subs	r0, r0, r5
 800b22e:	6060      	str	r0, [r4, #4]
 800b230:	6863      	ldr	r3, [r4, #4]
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	2300      	movs	r3, #0
 800b236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23a:	e7a7      	b.n	800b18c <_printf_i+0x118>
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	462a      	mov	r2, r5
 800b240:	4639      	mov	r1, r7
 800b242:	4630      	mov	r0, r6
 800b244:	47c0      	blx	r8
 800b246:	3001      	adds	r0, #1
 800b248:	d0aa      	beq.n	800b1a0 <_printf_i+0x12c>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	079b      	lsls	r3, r3, #30
 800b24e:	d413      	bmi.n	800b278 <_printf_i+0x204>
 800b250:	68e0      	ldr	r0, [r4, #12]
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	4298      	cmp	r0, r3
 800b256:	bfb8      	it	lt
 800b258:	4618      	movlt	r0, r3
 800b25a:	e7a3      	b.n	800b1a4 <_printf_i+0x130>
 800b25c:	2301      	movs	r3, #1
 800b25e:	464a      	mov	r2, r9
 800b260:	4639      	mov	r1, r7
 800b262:	4630      	mov	r0, r6
 800b264:	47c0      	blx	r8
 800b266:	3001      	adds	r0, #1
 800b268:	d09a      	beq.n	800b1a0 <_printf_i+0x12c>
 800b26a:	3501      	adds	r5, #1
 800b26c:	68e3      	ldr	r3, [r4, #12]
 800b26e:	9a03      	ldr	r2, [sp, #12]
 800b270:	1a9b      	subs	r3, r3, r2
 800b272:	42ab      	cmp	r3, r5
 800b274:	dcf2      	bgt.n	800b25c <_printf_i+0x1e8>
 800b276:	e7eb      	b.n	800b250 <_printf_i+0x1dc>
 800b278:	2500      	movs	r5, #0
 800b27a:	f104 0919 	add.w	r9, r4, #25
 800b27e:	e7f5      	b.n	800b26c <_printf_i+0x1f8>
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1ac      	bne.n	800b1de <_printf_i+0x16a>
 800b284:	7803      	ldrb	r3, [r0, #0]
 800b286:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b28a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b28e:	e76c      	b.n	800b16a <_printf_i+0xf6>
 800b290:	0800e1fe 	.word	0x0800e1fe
 800b294:	0800e20f 	.word	0x0800e20f

0800b298 <iprintf>:
 800b298:	b40f      	push	{r0, r1, r2, r3}
 800b29a:	4b0a      	ldr	r3, [pc, #40]	; (800b2c4 <iprintf+0x2c>)
 800b29c:	b513      	push	{r0, r1, r4, lr}
 800b29e:	681c      	ldr	r4, [r3, #0]
 800b2a0:	b124      	cbz	r4, 800b2ac <iprintf+0x14>
 800b2a2:	69a3      	ldr	r3, [r4, #24]
 800b2a4:	b913      	cbnz	r3, 800b2ac <iprintf+0x14>
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 fffa 	bl	800c2a0 <__sinit>
 800b2ac:	ab05      	add	r3, sp, #20
 800b2ae:	9a04      	ldr	r2, [sp, #16]
 800b2b0:	68a1      	ldr	r1, [r4, #8]
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f001 fcb3 	bl	800cc20 <_vfiprintf_r>
 800b2ba:	b002      	add	sp, #8
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	b004      	add	sp, #16
 800b2c2:	4770      	bx	lr
 800b2c4:	20000028 	.word	0x20000028

0800b2c8 <_puts_r>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	460e      	mov	r6, r1
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	b118      	cbz	r0, 800b2d8 <_puts_r+0x10>
 800b2d0:	6983      	ldr	r3, [r0, #24]
 800b2d2:	b90b      	cbnz	r3, 800b2d8 <_puts_r+0x10>
 800b2d4:	f000 ffe4 	bl	800c2a0 <__sinit>
 800b2d8:	69ab      	ldr	r3, [r5, #24]
 800b2da:	68ac      	ldr	r4, [r5, #8]
 800b2dc:	b913      	cbnz	r3, 800b2e4 <_puts_r+0x1c>
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 ffde 	bl	800c2a0 <__sinit>
 800b2e4:	4b23      	ldr	r3, [pc, #140]	; (800b374 <_puts_r+0xac>)
 800b2e6:	429c      	cmp	r4, r3
 800b2e8:	d117      	bne.n	800b31a <_puts_r+0x52>
 800b2ea:	686c      	ldr	r4, [r5, #4]
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	071b      	lsls	r3, r3, #28
 800b2f0:	d51d      	bpl.n	800b32e <_puts_r+0x66>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	b1db      	cbz	r3, 800b32e <_puts_r+0x66>
 800b2f6:	3e01      	subs	r6, #1
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2fe:	3b01      	subs	r3, #1
 800b300:	60a3      	str	r3, [r4, #8]
 800b302:	b9e9      	cbnz	r1, 800b340 <_puts_r+0x78>
 800b304:	2b00      	cmp	r3, #0
 800b306:	da2e      	bge.n	800b366 <_puts_r+0x9e>
 800b308:	4622      	mov	r2, r4
 800b30a:	210a      	movs	r1, #10
 800b30c:	4628      	mov	r0, r5
 800b30e:	f000 f83f 	bl	800b390 <__swbuf_r>
 800b312:	3001      	adds	r0, #1
 800b314:	d011      	beq.n	800b33a <_puts_r+0x72>
 800b316:	200a      	movs	r0, #10
 800b318:	e011      	b.n	800b33e <_puts_r+0x76>
 800b31a:	4b17      	ldr	r3, [pc, #92]	; (800b378 <_puts_r+0xb0>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	d101      	bne.n	800b324 <_puts_r+0x5c>
 800b320:	68ac      	ldr	r4, [r5, #8]
 800b322:	e7e3      	b.n	800b2ec <_puts_r+0x24>
 800b324:	4b15      	ldr	r3, [pc, #84]	; (800b37c <_puts_r+0xb4>)
 800b326:	429c      	cmp	r4, r3
 800b328:	bf08      	it	eq
 800b32a:	68ec      	ldreq	r4, [r5, #12]
 800b32c:	e7de      	b.n	800b2ec <_puts_r+0x24>
 800b32e:	4621      	mov	r1, r4
 800b330:	4628      	mov	r0, r5
 800b332:	f000 f87f 	bl	800b434 <__swsetup_r>
 800b336:	2800      	cmp	r0, #0
 800b338:	d0dd      	beq.n	800b2f6 <_puts_r+0x2e>
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	2b00      	cmp	r3, #0
 800b342:	da04      	bge.n	800b34e <_puts_r+0x86>
 800b344:	69a2      	ldr	r2, [r4, #24]
 800b346:	429a      	cmp	r2, r3
 800b348:	dc06      	bgt.n	800b358 <_puts_r+0x90>
 800b34a:	290a      	cmp	r1, #10
 800b34c:	d004      	beq.n	800b358 <_puts_r+0x90>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	6022      	str	r2, [r4, #0]
 800b354:	7019      	strb	r1, [r3, #0]
 800b356:	e7cf      	b.n	800b2f8 <_puts_r+0x30>
 800b358:	4622      	mov	r2, r4
 800b35a:	4628      	mov	r0, r5
 800b35c:	f000 f818 	bl	800b390 <__swbuf_r>
 800b360:	3001      	adds	r0, #1
 800b362:	d1c9      	bne.n	800b2f8 <_puts_r+0x30>
 800b364:	e7e9      	b.n	800b33a <_puts_r+0x72>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	200a      	movs	r0, #10
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	7018      	strb	r0, [r3, #0]
 800b370:	e7e5      	b.n	800b33e <_puts_r+0x76>
 800b372:	bf00      	nop
 800b374:	0800e250 	.word	0x0800e250
 800b378:	0800e270 	.word	0x0800e270
 800b37c:	0800e230 	.word	0x0800e230

0800b380 <puts>:
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <puts+0xc>)
 800b382:	4601      	mov	r1, r0
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	f7ff bf9f 	b.w	800b2c8 <_puts_r>
 800b38a:	bf00      	nop
 800b38c:	20000028 	.word	0x20000028

0800b390 <__swbuf_r>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	460e      	mov	r6, r1
 800b394:	4614      	mov	r4, r2
 800b396:	4605      	mov	r5, r0
 800b398:	b118      	cbz	r0, 800b3a2 <__swbuf_r+0x12>
 800b39a:	6983      	ldr	r3, [r0, #24]
 800b39c:	b90b      	cbnz	r3, 800b3a2 <__swbuf_r+0x12>
 800b39e:	f000 ff7f 	bl	800c2a0 <__sinit>
 800b3a2:	4b21      	ldr	r3, [pc, #132]	; (800b428 <__swbuf_r+0x98>)
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	d12a      	bne.n	800b3fe <__swbuf_r+0x6e>
 800b3a8:	686c      	ldr	r4, [r5, #4]
 800b3aa:	69a3      	ldr	r3, [r4, #24]
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	071a      	lsls	r2, r3, #28
 800b3b2:	d52e      	bpl.n	800b412 <__swbuf_r+0x82>
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	b363      	cbz	r3, 800b412 <__swbuf_r+0x82>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	1ac0      	subs	r0, r0, r3
 800b3be:	6963      	ldr	r3, [r4, #20]
 800b3c0:	b2f6      	uxtb	r6, r6
 800b3c2:	4283      	cmp	r3, r0
 800b3c4:	4637      	mov	r7, r6
 800b3c6:	dc04      	bgt.n	800b3d2 <__swbuf_r+0x42>
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f000 fefe 	bl	800c1cc <_fflush_r>
 800b3d0:	bb28      	cbnz	r0, 800b41e <__swbuf_r+0x8e>
 800b3d2:	68a3      	ldr	r3, [r4, #8]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	60a3      	str	r3, [r4, #8]
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	6022      	str	r2, [r4, #0]
 800b3de:	701e      	strb	r6, [r3, #0]
 800b3e0:	6963      	ldr	r3, [r4, #20]
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	4283      	cmp	r3, r0
 800b3e6:	d004      	beq.n	800b3f2 <__swbuf_r+0x62>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d519      	bpl.n	800b422 <__swbuf_r+0x92>
 800b3ee:	2e0a      	cmp	r6, #10
 800b3f0:	d117      	bne.n	800b422 <__swbuf_r+0x92>
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 fee9 	bl	800c1cc <_fflush_r>
 800b3fa:	b190      	cbz	r0, 800b422 <__swbuf_r+0x92>
 800b3fc:	e00f      	b.n	800b41e <__swbuf_r+0x8e>
 800b3fe:	4b0b      	ldr	r3, [pc, #44]	; (800b42c <__swbuf_r+0x9c>)
 800b400:	429c      	cmp	r4, r3
 800b402:	d101      	bne.n	800b408 <__swbuf_r+0x78>
 800b404:	68ac      	ldr	r4, [r5, #8]
 800b406:	e7d0      	b.n	800b3aa <__swbuf_r+0x1a>
 800b408:	4b09      	ldr	r3, [pc, #36]	; (800b430 <__swbuf_r+0xa0>)
 800b40a:	429c      	cmp	r4, r3
 800b40c:	bf08      	it	eq
 800b40e:	68ec      	ldreq	r4, [r5, #12]
 800b410:	e7cb      	b.n	800b3aa <__swbuf_r+0x1a>
 800b412:	4621      	mov	r1, r4
 800b414:	4628      	mov	r0, r5
 800b416:	f000 f80d 	bl	800b434 <__swsetup_r>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d0cc      	beq.n	800b3b8 <__swbuf_r+0x28>
 800b41e:	f04f 37ff 	mov.w	r7, #4294967295
 800b422:	4638      	mov	r0, r7
 800b424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b426:	bf00      	nop
 800b428:	0800e250 	.word	0x0800e250
 800b42c:	0800e270 	.word	0x0800e270
 800b430:	0800e230 	.word	0x0800e230

0800b434 <__swsetup_r>:
 800b434:	4b32      	ldr	r3, [pc, #200]	; (800b500 <__swsetup_r+0xcc>)
 800b436:	b570      	push	{r4, r5, r6, lr}
 800b438:	681d      	ldr	r5, [r3, #0]
 800b43a:	4606      	mov	r6, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	b125      	cbz	r5, 800b44a <__swsetup_r+0x16>
 800b440:	69ab      	ldr	r3, [r5, #24]
 800b442:	b913      	cbnz	r3, 800b44a <__swsetup_r+0x16>
 800b444:	4628      	mov	r0, r5
 800b446:	f000 ff2b 	bl	800c2a0 <__sinit>
 800b44a:	4b2e      	ldr	r3, [pc, #184]	; (800b504 <__swsetup_r+0xd0>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	d10f      	bne.n	800b470 <__swsetup_r+0x3c>
 800b450:	686c      	ldr	r4, [r5, #4]
 800b452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b456:	b29a      	uxth	r2, r3
 800b458:	0715      	lsls	r5, r2, #28
 800b45a:	d42c      	bmi.n	800b4b6 <__swsetup_r+0x82>
 800b45c:	06d0      	lsls	r0, r2, #27
 800b45e:	d411      	bmi.n	800b484 <__swsetup_r+0x50>
 800b460:	2209      	movs	r2, #9
 800b462:	6032      	str	r2, [r6, #0]
 800b464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b468:	81a3      	strh	r3, [r4, #12]
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	e03e      	b.n	800b4ee <__swsetup_r+0xba>
 800b470:	4b25      	ldr	r3, [pc, #148]	; (800b508 <__swsetup_r+0xd4>)
 800b472:	429c      	cmp	r4, r3
 800b474:	d101      	bne.n	800b47a <__swsetup_r+0x46>
 800b476:	68ac      	ldr	r4, [r5, #8]
 800b478:	e7eb      	b.n	800b452 <__swsetup_r+0x1e>
 800b47a:	4b24      	ldr	r3, [pc, #144]	; (800b50c <__swsetup_r+0xd8>)
 800b47c:	429c      	cmp	r4, r3
 800b47e:	bf08      	it	eq
 800b480:	68ec      	ldreq	r4, [r5, #12]
 800b482:	e7e6      	b.n	800b452 <__swsetup_r+0x1e>
 800b484:	0751      	lsls	r1, r2, #29
 800b486:	d512      	bpl.n	800b4ae <__swsetup_r+0x7a>
 800b488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b48a:	b141      	cbz	r1, 800b49e <__swsetup_r+0x6a>
 800b48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b490:	4299      	cmp	r1, r3
 800b492:	d002      	beq.n	800b49a <__swsetup_r+0x66>
 800b494:	4630      	mov	r0, r6
 800b496:	f001 faf1 	bl	800ca7c <_free_r>
 800b49a:	2300      	movs	r3, #0
 800b49c:	6363      	str	r3, [r4, #52]	; 0x34
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4a4:	81a3      	strh	r3, [r4, #12]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f043 0308 	orr.w	r3, r3, #8
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	b94b      	cbnz	r3, 800b4ce <__swsetup_r+0x9a>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4c4:	d003      	beq.n	800b4ce <__swsetup_r+0x9a>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f000 ffa5 	bl	800c418 <__smakebuf_r>
 800b4ce:	89a2      	ldrh	r2, [r4, #12]
 800b4d0:	f012 0301 	ands.w	r3, r2, #1
 800b4d4:	d00c      	beq.n	800b4f0 <__swsetup_r+0xbc>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60a3      	str	r3, [r4, #8]
 800b4da:	6963      	ldr	r3, [r4, #20]
 800b4dc:	425b      	negs	r3, r3
 800b4de:	61a3      	str	r3, [r4, #24]
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	b953      	cbnz	r3, 800b4fa <__swsetup_r+0xc6>
 800b4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b4ec:	d1ba      	bne.n	800b464 <__swsetup_r+0x30>
 800b4ee:	bd70      	pop	{r4, r5, r6, pc}
 800b4f0:	0792      	lsls	r2, r2, #30
 800b4f2:	bf58      	it	pl
 800b4f4:	6963      	ldrpl	r3, [r4, #20]
 800b4f6:	60a3      	str	r3, [r4, #8]
 800b4f8:	e7f2      	b.n	800b4e0 <__swsetup_r+0xac>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	e7f7      	b.n	800b4ee <__swsetup_r+0xba>
 800b4fe:	bf00      	nop
 800b500:	20000028 	.word	0x20000028
 800b504:	0800e250 	.word	0x0800e250
 800b508:	0800e270 	.word	0x0800e270
 800b50c:	0800e230 	.word	0x0800e230

0800b510 <quorem>:
 800b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	6903      	ldr	r3, [r0, #16]
 800b516:	690c      	ldr	r4, [r1, #16]
 800b518:	42a3      	cmp	r3, r4
 800b51a:	4680      	mov	r8, r0
 800b51c:	f2c0 8082 	blt.w	800b624 <quorem+0x114>
 800b520:	3c01      	subs	r4, #1
 800b522:	f101 0714 	add.w	r7, r1, #20
 800b526:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b52a:	f100 0614 	add.w	r6, r0, #20
 800b52e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b532:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b536:	eb06 030c 	add.w	r3, r6, ip
 800b53a:	3501      	adds	r5, #1
 800b53c:	eb07 090c 	add.w	r9, r7, ip
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	fbb0 f5f5 	udiv	r5, r0, r5
 800b546:	b395      	cbz	r5, 800b5ae <quorem+0x9e>
 800b548:	f04f 0a00 	mov.w	sl, #0
 800b54c:	4638      	mov	r0, r7
 800b54e:	46b6      	mov	lr, r6
 800b550:	46d3      	mov	fp, sl
 800b552:	f850 2b04 	ldr.w	r2, [r0], #4
 800b556:	b293      	uxth	r3, r2
 800b558:	fb05 a303 	mla	r3, r5, r3, sl
 800b55c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b560:	b29b      	uxth	r3, r3
 800b562:	ebab 0303 	sub.w	r3, fp, r3
 800b566:	0c12      	lsrs	r2, r2, #16
 800b568:	f8de b000 	ldr.w	fp, [lr]
 800b56c:	fb05 a202 	mla	r2, r5, r2, sl
 800b570:	fa13 f38b 	uxtah	r3, r3, fp
 800b574:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b578:	fa1f fb82 	uxth.w	fp, r2
 800b57c:	f8de 2000 	ldr.w	r2, [lr]
 800b580:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b588:	b29b      	uxth	r3, r3
 800b58a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b58e:	4581      	cmp	r9, r0
 800b590:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b594:	f84e 3b04 	str.w	r3, [lr], #4
 800b598:	d2db      	bcs.n	800b552 <quorem+0x42>
 800b59a:	f856 300c 	ldr.w	r3, [r6, ip]
 800b59e:	b933      	cbnz	r3, 800b5ae <quorem+0x9e>
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	3b04      	subs	r3, #4
 800b5a4:	429e      	cmp	r6, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	d330      	bcc.n	800b60c <quorem+0xfc>
 800b5aa:	f8c8 4010 	str.w	r4, [r8, #16]
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	f001 f990 	bl	800c8d4 <__mcmp>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	db25      	blt.n	800b604 <quorem+0xf4>
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f04f 0c00 	mov.w	ip, #0
 800b5c0:	f857 2b04 	ldr.w	r2, [r7], #4
 800b5c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b5c8:	b293      	uxth	r3, r2
 800b5ca:	ebac 0303 	sub.w	r3, ip, r3
 800b5ce:	0c12      	lsrs	r2, r2, #16
 800b5d0:	fa13 f38e 	uxtah	r3, r3, lr
 800b5d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b5d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5e2:	45b9      	cmp	r9, r7
 800b5e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b5e8:	f840 3b04 	str.w	r3, [r0], #4
 800b5ec:	d2e8      	bcs.n	800b5c0 <quorem+0xb0>
 800b5ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b5f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b5f6:	b92a      	cbnz	r2, 800b604 <quorem+0xf4>
 800b5f8:	3b04      	subs	r3, #4
 800b5fa:	429e      	cmp	r6, r3
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	d30b      	bcc.n	800b618 <quorem+0x108>
 800b600:	f8c8 4010 	str.w	r4, [r8, #16]
 800b604:	4628      	mov	r0, r5
 800b606:	b003      	add	sp, #12
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60c:	6812      	ldr	r2, [r2, #0]
 800b60e:	3b04      	subs	r3, #4
 800b610:	2a00      	cmp	r2, #0
 800b612:	d1ca      	bne.n	800b5aa <quorem+0x9a>
 800b614:	3c01      	subs	r4, #1
 800b616:	e7c5      	b.n	800b5a4 <quorem+0x94>
 800b618:	6812      	ldr	r2, [r2, #0]
 800b61a:	3b04      	subs	r3, #4
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d1ef      	bne.n	800b600 <quorem+0xf0>
 800b620:	3c01      	subs	r4, #1
 800b622:	e7ea      	b.n	800b5fa <quorem+0xea>
 800b624:	2000      	movs	r0, #0
 800b626:	e7ee      	b.n	800b606 <quorem+0xf6>

0800b628 <_dtoa_r>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	ec57 6b10 	vmov	r6, r7, d0
 800b630:	b095      	sub	sp, #84	; 0x54
 800b632:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b634:	9108      	str	r1, [sp, #32]
 800b636:	4604      	mov	r4, r0
 800b638:	920a      	str	r2, [sp, #40]	; 0x28
 800b63a:	9311      	str	r3, [sp, #68]	; 0x44
 800b63c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b640:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b644:	b93d      	cbnz	r5, 800b656 <_dtoa_r+0x2e>
 800b646:	2010      	movs	r0, #16
 800b648:	f000 ff26 	bl	800c498 <malloc>
 800b64c:	6260      	str	r0, [r4, #36]	; 0x24
 800b64e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b652:	6005      	str	r5, [r0, #0]
 800b654:	60c5      	str	r5, [r0, #12]
 800b656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b658:	6819      	ldr	r1, [r3, #0]
 800b65a:	b151      	cbz	r1, 800b672 <_dtoa_r+0x4a>
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	604a      	str	r2, [r1, #4]
 800b660:	2301      	movs	r3, #1
 800b662:	4093      	lsls	r3, r2
 800b664:	608b      	str	r3, [r1, #8]
 800b666:	4620      	mov	r0, r4
 800b668:	f000 ff52 	bl	800c510 <_Bfree>
 800b66c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	1e3b      	subs	r3, r7, #0
 800b674:	bfb9      	ittee	lt
 800b676:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b67a:	9303      	strlt	r3, [sp, #12]
 800b67c:	2300      	movge	r3, #0
 800b67e:	f8c8 3000 	strge.w	r3, [r8]
 800b682:	9d03      	ldr	r5, [sp, #12]
 800b684:	4bac      	ldr	r3, [pc, #688]	; (800b938 <_dtoa_r+0x310>)
 800b686:	bfbc      	itt	lt
 800b688:	2201      	movlt	r2, #1
 800b68a:	f8c8 2000 	strlt.w	r2, [r8]
 800b68e:	43ab      	bics	r3, r5
 800b690:	d11b      	bne.n	800b6ca <_dtoa_r+0xa2>
 800b692:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b694:	f242 730f 	movw	r3, #9999	; 0x270f
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	9b02      	ldr	r3, [sp, #8]
 800b69c:	b923      	cbnz	r3, 800b6a8 <_dtoa_r+0x80>
 800b69e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b6a2:	2d00      	cmp	r5, #0
 800b6a4:	f000 84dd 	beq.w	800c062 <_dtoa_r+0xa3a>
 800b6a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6aa:	b953      	cbnz	r3, 800b6c2 <_dtoa_r+0x9a>
 800b6ac:	4ba3      	ldr	r3, [pc, #652]	; (800b93c <_dtoa_r+0x314>)
 800b6ae:	e020      	b.n	800b6f2 <_dtoa_r+0xca>
 800b6b0:	4ba3      	ldr	r3, [pc, #652]	; (800b940 <_dtoa_r+0x318>)
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	9804      	ldr	r0, [sp, #16]
 800b6bc:	b015      	add	sp, #84	; 0x54
 800b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c2:	4b9e      	ldr	r3, [pc, #632]	; (800b93c <_dtoa_r+0x314>)
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	3303      	adds	r3, #3
 800b6c8:	e7f5      	b.n	800b6b6 <_dtoa_r+0x8e>
 800b6ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6da:	d10c      	bne.n	800b6f6 <_dtoa_r+0xce>
 800b6dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6de:	2301      	movs	r3, #1
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 84b9 	beq.w	800c05c <_dtoa_r+0xa34>
 800b6ea:	4b96      	ldr	r3, [pc, #600]	; (800b944 <_dtoa_r+0x31c>)
 800b6ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	e7e1      	b.n	800b6ba <_dtoa_r+0x92>
 800b6f6:	a913      	add	r1, sp, #76	; 0x4c
 800b6f8:	aa12      	add	r2, sp, #72	; 0x48
 800b6fa:	ed9d 0b04 	vldr	d0, [sp, #16]
 800b6fe:	4620      	mov	r0, r4
 800b700:	f001 f95f 	bl	800c9c2 <__d2b>
 800b704:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800b708:	9001      	str	r0, [sp, #4]
 800b70a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b70c:	2e00      	cmp	r6, #0
 800b70e:	d046      	beq.n	800b79e <_dtoa_r+0x176>
 800b710:	9805      	ldr	r0, [sp, #20]
 800b712:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800b716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b71a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800b71e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b722:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800b726:	2700      	movs	r7, #0
 800b728:	ee07 aa90 	vmov	s15, sl
 800b72c:	ec43 2b16 	vmov	d6, r2, r3
 800b730:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b734:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800b920 <_dtoa_r+0x2f8>
 800b738:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b73c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b740:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800b928 <_dtoa_r+0x300>
 800b744:	eea7 6b04 	vfma.f64	d6, d7, d4
 800b748:	eeb0 7b46 	vmov.f64	d7, d6
 800b74c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800b930 <_dtoa_r+0x308>
 800b750:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b754:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b758:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b760:	ee16 ba90 	vmov	fp, s13
 800b764:	d508      	bpl.n	800b778 <_dtoa_r+0x150>
 800b766:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b76a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b772:	bf18      	it	ne
 800b774:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b778:	f1bb 0f16 	cmp.w	fp, #22
 800b77c:	d834      	bhi.n	800b7e8 <_dtoa_r+0x1c0>
 800b77e:	4b72      	ldr	r3, [pc, #456]	; (800b948 <_dtoa_r+0x320>)
 800b780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b784:	ed93 7b00 	vldr	d7, [r3]
 800b788:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b78c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b794:	dd01      	ble.n	800b79a <_dtoa_r+0x172>
 800b796:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b79a:	2300      	movs	r3, #0
 800b79c:	e025      	b.n	800b7ea <_dtoa_r+0x1c2>
 800b79e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7a0:	eb01 0a03 	add.w	sl, r1, r3
 800b7a4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800b7a8:	2b20      	cmp	r3, #32
 800b7aa:	dd17      	ble.n	800b7dc <_dtoa_r+0x1b4>
 800b7ac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b7b0:	9a02      	ldr	r2, [sp, #8]
 800b7b2:	409d      	lsls	r5, r3
 800b7b4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800b7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7bc:	432b      	orrs	r3, r5
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b7ce:	9805      	ldr	r0, [sp, #20]
 800b7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7d4:	2701      	movs	r7, #1
 800b7d6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800b7da:	e7a5      	b.n	800b728 <_dtoa_r+0x100>
 800b7dc:	9a02      	ldr	r2, [sp, #8]
 800b7de:	f1c3 0320 	rsb	r3, r3, #32
 800b7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e6:	e7ea      	b.n	800b7be <_dtoa_r+0x196>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	eba1 0a0a 	sub.w	sl, r1, sl
 800b7ee:	9310      	str	r3, [sp, #64]	; 0x40
 800b7f0:	f1ba 0301 	subs.w	r3, sl, #1
 800b7f4:	9307      	str	r3, [sp, #28]
 800b7f6:	bf43      	ittte	mi
 800b7f8:	2300      	movmi	r3, #0
 800b7fa:	f1ca 0a01 	rsbmi	sl, sl, #1
 800b7fe:	9307      	strmi	r3, [sp, #28]
 800b800:	f04f 0a00 	movpl.w	sl, #0
 800b804:	f1bb 0f00 	cmp.w	fp, #0
 800b808:	db19      	blt.n	800b83e <_dtoa_r+0x216>
 800b80a:	9b07      	ldr	r3, [sp, #28]
 800b80c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b810:	445b      	add	r3, fp
 800b812:	9307      	str	r3, [sp, #28]
 800b814:	f04f 0800 	mov.w	r8, #0
 800b818:	9b08      	ldr	r3, [sp, #32]
 800b81a:	2b09      	cmp	r3, #9
 800b81c:	d866      	bhi.n	800b8ec <_dtoa_r+0x2c4>
 800b81e:	2b05      	cmp	r3, #5
 800b820:	bfc4      	itt	gt
 800b822:	3b04      	subgt	r3, #4
 800b824:	9308      	strgt	r3, [sp, #32]
 800b826:	9b08      	ldr	r3, [sp, #32]
 800b828:	f1a3 0302 	sub.w	r3, r3, #2
 800b82c:	bfcc      	ite	gt
 800b82e:	2500      	movgt	r5, #0
 800b830:	2501      	movle	r5, #1
 800b832:	2b03      	cmp	r3, #3
 800b834:	d866      	bhi.n	800b904 <_dtoa_r+0x2dc>
 800b836:	e8df f003 	tbb	[pc, r3]
 800b83a:	5755      	.short	0x5755
 800b83c:	4909      	.short	0x4909
 800b83e:	2300      	movs	r3, #0
 800b840:	ebaa 0a0b 	sub.w	sl, sl, fp
 800b844:	f1cb 0800 	rsb	r8, fp, #0
 800b848:	930b      	str	r3, [sp, #44]	; 0x2c
 800b84a:	e7e5      	b.n	800b818 <_dtoa_r+0x1f0>
 800b84c:	2301      	movs	r3, #1
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b852:	2b00      	cmp	r3, #0
 800b854:	dd59      	ble.n	800b90a <_dtoa_r+0x2e2>
 800b856:	9306      	str	r3, [sp, #24]
 800b858:	4699      	mov	r9, r3
 800b85a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b85c:	2200      	movs	r2, #0
 800b85e:	6072      	str	r2, [r6, #4]
 800b860:	2204      	movs	r2, #4
 800b862:	f102 0014 	add.w	r0, r2, #20
 800b866:	4298      	cmp	r0, r3
 800b868:	6871      	ldr	r1, [r6, #4]
 800b86a:	d953      	bls.n	800b914 <_dtoa_r+0x2ec>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 fe1b 	bl	800c4a8 <_Balloc>
 800b872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b874:	6030      	str	r0, [r6, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	9304      	str	r3, [sp, #16]
 800b87a:	f1b9 0f0e 	cmp.w	r9, #14
 800b87e:	f200 80c2 	bhi.w	800ba06 <_dtoa_r+0x3de>
 800b882:	2d00      	cmp	r5, #0
 800b884:	f000 80bf 	beq.w	800ba06 <_dtoa_r+0x3de>
 800b888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b88c:	f1bb 0f00 	cmp.w	fp, #0
 800b890:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b894:	f340 80e6 	ble.w	800ba64 <_dtoa_r+0x43c>
 800b898:	4a2b      	ldr	r2, [pc, #172]	; (800b948 <_dtoa_r+0x320>)
 800b89a:	f00b 030f 	and.w	r3, fp, #15
 800b89e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8a2:	ed93 7b00 	vldr	d7, [r3]
 800b8a6:	ea4f 132b 	mov.w	r3, fp, asr #4
 800b8aa:	06da      	lsls	r2, r3, #27
 800b8ac:	f140 80d8 	bpl.w	800ba60 <_dtoa_r+0x438>
 800b8b0:	4a26      	ldr	r2, [pc, #152]	; (800b94c <_dtoa_r+0x324>)
 800b8b2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800b8b6:	ed92 6b08 	vldr	d6, [r2, #32]
 800b8ba:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b8be:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	4920      	ldr	r1, [pc, #128]	; (800b94c <_dtoa_r+0x324>)
 800b8ca:	e04a      	b.n	800b962 <_dtoa_r+0x33a>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d2:	445b      	add	r3, fp
 800b8d4:	f103 0901 	add.w	r9, r3, #1
 800b8d8:	9306      	str	r3, [sp, #24]
 800b8da:	464b      	mov	r3, r9
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	bfb8      	it	lt
 800b8e0:	2301      	movlt	r3, #1
 800b8e2:	e7ba      	b.n	800b85a <_dtoa_r+0x232>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	e7b2      	b.n	800b84e <_dtoa_r+0x226>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e7f0      	b.n	800b8ce <_dtoa_r+0x2a6>
 800b8ec:	2501      	movs	r5, #1
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f8:	9306      	str	r3, [sp, #24]
 800b8fa:	4699      	mov	r9, r3
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2312      	movs	r3, #18
 800b900:	920a      	str	r2, [sp, #40]	; 0x28
 800b902:	e7aa      	b.n	800b85a <_dtoa_r+0x232>
 800b904:	2301      	movs	r3, #1
 800b906:	9309      	str	r3, [sp, #36]	; 0x24
 800b908:	e7f4      	b.n	800b8f4 <_dtoa_r+0x2cc>
 800b90a:	2301      	movs	r3, #1
 800b90c:	9306      	str	r3, [sp, #24]
 800b90e:	4699      	mov	r9, r3
 800b910:	461a      	mov	r2, r3
 800b912:	e7f5      	b.n	800b900 <_dtoa_r+0x2d8>
 800b914:	3101      	adds	r1, #1
 800b916:	6071      	str	r1, [r6, #4]
 800b918:	0052      	lsls	r2, r2, #1
 800b91a:	e7a2      	b.n	800b862 <_dtoa_r+0x23a>
 800b91c:	f3af 8000 	nop.w
 800b920:	636f4361 	.word	0x636f4361
 800b924:	3fd287a7 	.word	0x3fd287a7
 800b928:	8b60c8b3 	.word	0x8b60c8b3
 800b92c:	3fc68a28 	.word	0x3fc68a28
 800b930:	509f79fb 	.word	0x509f79fb
 800b934:	3fd34413 	.word	0x3fd34413
 800b938:	7ff00000 	.word	0x7ff00000
 800b93c:	0800e229 	.word	0x0800e229
 800b940:	0800e220 	.word	0x0800e220
 800b944:	0800e1fd 	.word	0x0800e1fd
 800b948:	0800e2b8 	.word	0x0800e2b8
 800b94c:	0800e290 	.word	0x0800e290
 800b950:	07de      	lsls	r6, r3, #31
 800b952:	d504      	bpl.n	800b95e <_dtoa_r+0x336>
 800b954:	ed91 6b00 	vldr	d6, [r1]
 800b958:	3201      	adds	r2, #1
 800b95a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b95e:	105b      	asrs	r3, r3, #1
 800b960:	3108      	adds	r1, #8
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1f4      	bne.n	800b950 <_dtoa_r+0x328>
 800b966:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b96a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b96e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 80a7 	beq.w	800bac8 <_dtoa_r+0x4a0>
 800b97a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b97e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b982:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98a:	f140 809d 	bpl.w	800bac8 <_dtoa_r+0x4a0>
 800b98e:	f1b9 0f00 	cmp.w	r9, #0
 800b992:	f000 8099 	beq.w	800bac8 <_dtoa_r+0x4a0>
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	dd30      	ble.n	800b9fe <_dtoa_r+0x3d6>
 800b99c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b9a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9a8:	9d06      	ldr	r5, [sp, #24]
 800b9aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b9ae:	3201      	adds	r2, #1
 800b9b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b9b4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b9b8:	ee07 2a90 	vmov	s15, r2
 800b9bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b9c0:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b9c4:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b9c8:	9a03      	ldr	r2, [sp, #12]
 800b9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ce:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800b9d2:	2d00      	cmp	r5, #0
 800b9d4:	d17b      	bne.n	800bace <_dtoa_r+0x4a6>
 800b9d6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b9da:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b9de:	ec41 0b17 	vmov	d7, r0, r1
 800b9e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ea:	f300 8253 	bgt.w	800be94 <_dtoa_r+0x86c>
 800b9ee:	eeb1 7b47 	vneg.f64	d7, d7
 800b9f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fa:	f100 8249 	bmi.w	800be90 <_dtoa_r+0x868>
 800b9fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ba02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f2c0 8119 	blt.w	800bc40 <_dtoa_r+0x618>
 800ba0e:	f1bb 0f0e 	cmp.w	fp, #14
 800ba12:	f300 8115 	bgt.w	800bc40 <_dtoa_r+0x618>
 800ba16:	4bc3      	ldr	r3, [pc, #780]	; (800bd24 <_dtoa_r+0x6fc>)
 800ba18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba1c:	ed93 6b00 	vldr	d6, [r3]
 800ba20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f280 80ba 	bge.w	800bb9c <_dtoa_r+0x574>
 800ba28:	f1b9 0f00 	cmp.w	r9, #0
 800ba2c:	f300 80b6 	bgt.w	800bb9c <_dtoa_r+0x574>
 800ba30:	f040 822d 	bne.w	800be8e <_dtoa_r+0x866>
 800ba34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ba38:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba48:	464d      	mov	r5, r9
 800ba4a:	464f      	mov	r7, r9
 800ba4c:	f280 8204 	bge.w	800be58 <_dtoa_r+0x830>
 800ba50:	9b04      	ldr	r3, [sp, #16]
 800ba52:	9a04      	ldr	r2, [sp, #16]
 800ba54:	1c5e      	adds	r6, r3, #1
 800ba56:	2331      	movs	r3, #49	; 0x31
 800ba58:	7013      	strb	r3, [r2, #0]
 800ba5a:	f10b 0b01 	add.w	fp, fp, #1
 800ba5e:	e1ff      	b.n	800be60 <_dtoa_r+0x838>
 800ba60:	2202      	movs	r2, #2
 800ba62:	e731      	b.n	800b8c8 <_dtoa_r+0x2a0>
 800ba64:	d02e      	beq.n	800bac4 <_dtoa_r+0x49c>
 800ba66:	f1cb 0300 	rsb	r3, fp, #0
 800ba6a:	4aae      	ldr	r2, [pc, #696]	; (800bd24 <_dtoa_r+0x6fc>)
 800ba6c:	f003 010f 	and.w	r1, r3, #15
 800ba70:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ba74:	ed92 7b00 	vldr	d7, [r2]
 800ba78:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800ba7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ba80:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ba84:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800ba88:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ba8c:	49a6      	ldr	r1, [pc, #664]	; (800bd28 <_dtoa_r+0x700>)
 800ba8e:	111b      	asrs	r3, r3, #4
 800ba90:	2000      	movs	r0, #0
 800ba92:	2202      	movs	r2, #2
 800ba94:	b93b      	cbnz	r3, 800baa6 <_dtoa_r+0x47e>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f af6b 	beq.w	800b972 <_dtoa_r+0x34a>
 800ba9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800baa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa4:	e765      	b.n	800b972 <_dtoa_r+0x34a>
 800baa6:	07dd      	lsls	r5, r3, #31
 800baa8:	d509      	bpl.n	800babe <_dtoa_r+0x496>
 800baaa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800baae:	ed91 7b00 	vldr	d7, [r1]
 800bab2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bab6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800baba:	3201      	adds	r2, #1
 800babc:	2001      	movs	r0, #1
 800babe:	105b      	asrs	r3, r3, #1
 800bac0:	3108      	adds	r1, #8
 800bac2:	e7e7      	b.n	800ba94 <_dtoa_r+0x46c>
 800bac4:	2202      	movs	r2, #2
 800bac6:	e754      	b.n	800b972 <_dtoa_r+0x34a>
 800bac8:	465b      	mov	r3, fp
 800baca:	464d      	mov	r5, r9
 800bacc:	e770      	b.n	800b9b0 <_dtoa_r+0x388>
 800bace:	4a95      	ldr	r2, [pc, #596]	; (800bd24 <_dtoa_r+0x6fc>)
 800bad0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800bad4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bada:	ec41 0b17 	vmov	d7, r0, r1
 800bade:	b35a      	cbz	r2, 800bb38 <_dtoa_r+0x510>
 800bae0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bae4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bae8:	9e04      	ldr	r6, [sp, #16]
 800baea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800baee:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800baf2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800baf6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bafa:	ee14 2a90 	vmov	r2, s9
 800bafe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb02:	3230      	adds	r2, #48	; 0x30
 800bb04:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	f806 2b01 	strb.w	r2, [r6], #1
 800bb14:	d43b      	bmi.n	800bb8e <_dtoa_r+0x566>
 800bb16:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bb1a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb22:	d472      	bmi.n	800bc0a <_dtoa_r+0x5e2>
 800bb24:	9a04      	ldr	r2, [sp, #16]
 800bb26:	1ab2      	subs	r2, r6, r2
 800bb28:	4295      	cmp	r5, r2
 800bb2a:	f77f af68 	ble.w	800b9fe <_dtoa_r+0x3d6>
 800bb2e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bb32:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bb36:	e7de      	b.n	800baf6 <_dtoa_r+0x4ce>
 800bb38:	9a04      	ldr	r2, [sp, #16]
 800bb3a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bb3e:	1956      	adds	r6, r2, r5
 800bb40:	4611      	mov	r1, r2
 800bb42:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bb46:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bb4a:	ee14 2a90 	vmov	r2, s9
 800bb4e:	3230      	adds	r2, #48	; 0x30
 800bb50:	f801 2b01 	strb.w	r2, [r1], #1
 800bb54:	42b1      	cmp	r1, r6
 800bb56:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb5a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb5e:	d11a      	bne.n	800bb96 <_dtoa_r+0x56e>
 800bb60:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bb64:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bb68:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb70:	dc4b      	bgt.n	800bc0a <_dtoa_r+0x5e2>
 800bb72:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bb76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	f57f af3e 	bpl.w	800b9fe <_dtoa_r+0x3d6>
 800bb82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb86:	2a30      	cmp	r2, #48	; 0x30
 800bb88:	f106 31ff 	add.w	r1, r6, #4294967295
 800bb8c:	d001      	beq.n	800bb92 <_dtoa_r+0x56a>
 800bb8e:	469b      	mov	fp, r3
 800bb90:	e02a      	b.n	800bbe8 <_dtoa_r+0x5c0>
 800bb92:	460e      	mov	r6, r1
 800bb94:	e7f5      	b.n	800bb82 <_dtoa_r+0x55a>
 800bb96:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bb9a:	e7d4      	b.n	800bb46 <_dtoa_r+0x51e>
 800bb9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bba0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bba4:	9e04      	ldr	r6, [sp, #16]
 800bba6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bbaa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bbae:	ee15 3a10 	vmov	r3, s10
 800bbb2:	3330      	adds	r3, #48	; 0x30
 800bbb4:	f806 3b01 	strb.w	r3, [r6], #1
 800bbb8:	9b04      	ldr	r3, [sp, #16]
 800bbba:	1af3      	subs	r3, r6, r3
 800bbbc:	4599      	cmp	r9, r3
 800bbbe:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bbc2:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bbc6:	d133      	bne.n	800bc30 <_dtoa_r+0x608>
 800bbc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bbcc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	dc18      	bgt.n	800bc08 <_dtoa_r+0x5e0>
 800bbd6:	eeb4 7b46 	vcmp.f64	d7, d6
 800bbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbde:	d103      	bne.n	800bbe8 <_dtoa_r+0x5c0>
 800bbe0:	ee15 3a10 	vmov	r3, s10
 800bbe4:	07db      	lsls	r3, r3, #31
 800bbe6:	d40f      	bmi.n	800bc08 <_dtoa_r+0x5e0>
 800bbe8:	9901      	ldr	r1, [sp, #4]
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fc90 	bl	800c510 <_Bfree>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbf4:	7033      	strb	r3, [r6, #0]
 800bbf6:	f10b 0301 	add.w	r3, fp, #1
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f43f ad5b 	beq.w	800b6ba <_dtoa_r+0x92>
 800bc04:	601e      	str	r6, [r3, #0]
 800bc06:	e558      	b.n	800b6ba <_dtoa_r+0x92>
 800bc08:	465b      	mov	r3, fp
 800bc0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc0e:	2939      	cmp	r1, #57	; 0x39
 800bc10:	f106 32ff 	add.w	r2, r6, #4294967295
 800bc14:	d106      	bne.n	800bc24 <_dtoa_r+0x5fc>
 800bc16:	9904      	ldr	r1, [sp, #16]
 800bc18:	4291      	cmp	r1, r2
 800bc1a:	d107      	bne.n	800bc2c <_dtoa_r+0x604>
 800bc1c:	2230      	movs	r2, #48	; 0x30
 800bc1e:	700a      	strb	r2, [r1, #0]
 800bc20:	3301      	adds	r3, #1
 800bc22:	460a      	mov	r2, r1
 800bc24:	7811      	ldrb	r1, [r2, #0]
 800bc26:	3101      	adds	r1, #1
 800bc28:	7011      	strb	r1, [r2, #0]
 800bc2a:	e7b0      	b.n	800bb8e <_dtoa_r+0x566>
 800bc2c:	4616      	mov	r6, r2
 800bc2e:	e7ec      	b.n	800bc0a <_dtoa_r+0x5e2>
 800bc30:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	d1b3      	bne.n	800bba6 <_dtoa_r+0x57e>
 800bc3e:	e7d3      	b.n	800bbe8 <_dtoa_r+0x5c0>
 800bc40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc42:	2a00      	cmp	r2, #0
 800bc44:	f000 808d 	beq.w	800bd62 <_dtoa_r+0x73a>
 800bc48:	9a08      	ldr	r2, [sp, #32]
 800bc4a:	2a01      	cmp	r2, #1
 800bc4c:	dc72      	bgt.n	800bd34 <_dtoa_r+0x70c>
 800bc4e:	2f00      	cmp	r7, #0
 800bc50:	d06c      	beq.n	800bd2c <_dtoa_r+0x704>
 800bc52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc56:	4645      	mov	r5, r8
 800bc58:	4656      	mov	r6, sl
 800bc5a:	9a07      	ldr	r2, [sp, #28]
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	441a      	add	r2, r3
 800bc60:	4620      	mov	r0, r4
 800bc62:	449a      	add	sl, r3
 800bc64:	9207      	str	r2, [sp, #28]
 800bc66:	f000 fcf3 	bl	800c650 <__i2b>
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	2e00      	cmp	r6, #0
 800bc6e:	dd0b      	ble.n	800bc88 <_dtoa_r+0x660>
 800bc70:	9b07      	ldr	r3, [sp, #28]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dd08      	ble.n	800bc88 <_dtoa_r+0x660>
 800bc76:	42b3      	cmp	r3, r6
 800bc78:	9a07      	ldr	r2, [sp, #28]
 800bc7a:	bfa8      	it	ge
 800bc7c:	4633      	movge	r3, r6
 800bc7e:	ebaa 0a03 	sub.w	sl, sl, r3
 800bc82:	1af6      	subs	r6, r6, r3
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	9307      	str	r3, [sp, #28]
 800bc88:	f1b8 0f00 	cmp.w	r8, #0
 800bc8c:	d01d      	beq.n	800bcca <_dtoa_r+0x6a2>
 800bc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d06a      	beq.n	800bd6a <_dtoa_r+0x742>
 800bc94:	b18d      	cbz	r5, 800bcba <_dtoa_r+0x692>
 800bc96:	4639      	mov	r1, r7
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 fd78 	bl	800c790 <__pow5mult>
 800bca0:	9a01      	ldr	r2, [sp, #4]
 800bca2:	4601      	mov	r1, r0
 800bca4:	4607      	mov	r7, r0
 800bca6:	4620      	mov	r0, r4
 800bca8:	f000 fcdb 	bl	800c662 <__multiply>
 800bcac:	9901      	ldr	r1, [sp, #4]
 800bcae:	900c      	str	r0, [sp, #48]	; 0x30
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 fc2d 	bl	800c510 <_Bfree>
 800bcb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcb8:	9301      	str	r3, [sp, #4]
 800bcba:	ebb8 0205 	subs.w	r2, r8, r5
 800bcbe:	d004      	beq.n	800bcca <_dtoa_r+0x6a2>
 800bcc0:	9901      	ldr	r1, [sp, #4]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f000 fd64 	bl	800c790 <__pow5mult>
 800bcc8:	9001      	str	r0, [sp, #4]
 800bcca:	2101      	movs	r1, #1
 800bccc:	4620      	mov	r0, r4
 800bcce:	f000 fcbf 	bl	800c650 <__i2b>
 800bcd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 81ca 	beq.w	800c070 <_dtoa_r+0xa48>
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4601      	mov	r1, r0
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 fd55 	bl	800c790 <__pow5mult>
 800bce6:	9b08      	ldr	r3, [sp, #32]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	4605      	mov	r5, r0
 800bcec:	dc44      	bgt.n	800bd78 <_dtoa_r+0x750>
 800bcee:	9b02      	ldr	r3, [sp, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d13c      	bne.n	800bd6e <_dtoa_r+0x746>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d137      	bne.n	800bd6e <_dtoa_r+0x746>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd04:	0d1b      	lsrs	r3, r3, #20
 800bd06:	051b      	lsls	r3, r3, #20
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d033      	beq.n	800bd74 <_dtoa_r+0x74c>
 800bd0c:	9b07      	ldr	r3, [sp, #28]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	f10a 0a01 	add.w	sl, sl, #1
 800bd14:	9307      	str	r3, [sp, #28]
 800bd16:	f04f 0801 	mov.w	r8, #1
 800bd1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd1c:	bb73      	cbnz	r3, 800bd7c <_dtoa_r+0x754>
 800bd1e:	2001      	movs	r0, #1
 800bd20:	e034      	b.n	800bd8c <_dtoa_r+0x764>
 800bd22:	bf00      	nop
 800bd24:	0800e2b8 	.word	0x0800e2b8
 800bd28:	0800e290 	.word	0x0800e290
 800bd2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd32:	e790      	b.n	800bc56 <_dtoa_r+0x62e>
 800bd34:	f109 35ff 	add.w	r5, r9, #4294967295
 800bd38:	45a8      	cmp	r8, r5
 800bd3a:	bfbf      	itttt	lt
 800bd3c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800bd3e:	eba5 0808 	sublt.w	r8, r5, r8
 800bd42:	4443      	addlt	r3, r8
 800bd44:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800bd46:	bfb6      	itet	lt
 800bd48:	46a8      	movlt	r8, r5
 800bd4a:	eba8 0505 	subge.w	r5, r8, r5
 800bd4e:	2500      	movlt	r5, #0
 800bd50:	f1b9 0f00 	cmp.w	r9, #0
 800bd54:	bfb9      	ittee	lt
 800bd56:	ebaa 0609 	sublt.w	r6, sl, r9
 800bd5a:	2300      	movlt	r3, #0
 800bd5c:	4656      	movge	r6, sl
 800bd5e:	464b      	movge	r3, r9
 800bd60:	e77b      	b.n	800bc5a <_dtoa_r+0x632>
 800bd62:	4645      	mov	r5, r8
 800bd64:	4656      	mov	r6, sl
 800bd66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bd68:	e780      	b.n	800bc6c <_dtoa_r+0x644>
 800bd6a:	4642      	mov	r2, r8
 800bd6c:	e7a8      	b.n	800bcc0 <_dtoa_r+0x698>
 800bd6e:	f04f 0800 	mov.w	r8, #0
 800bd72:	e7d2      	b.n	800bd1a <_dtoa_r+0x6f2>
 800bd74:	4698      	mov	r8, r3
 800bd76:	e7d0      	b.n	800bd1a <_dtoa_r+0x6f2>
 800bd78:	f04f 0800 	mov.w	r8, #0
 800bd7c:	692b      	ldr	r3, [r5, #16]
 800bd7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bd82:	6918      	ldr	r0, [r3, #16]
 800bd84:	f000 fc16 	bl	800c5b4 <__hi0bits>
 800bd88:	f1c0 0020 	rsb	r0, r0, #32
 800bd8c:	9b07      	ldr	r3, [sp, #28]
 800bd8e:	4418      	add	r0, r3
 800bd90:	f010 001f 	ands.w	r0, r0, #31
 800bd94:	d047      	beq.n	800be26 <_dtoa_r+0x7fe>
 800bd96:	f1c0 0320 	rsb	r3, r0, #32
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	dd3b      	ble.n	800be16 <_dtoa_r+0x7ee>
 800bd9e:	9b07      	ldr	r3, [sp, #28]
 800bda0:	f1c0 001c 	rsb	r0, r0, #28
 800bda4:	4482      	add	sl, r0
 800bda6:	4406      	add	r6, r0
 800bda8:	4403      	add	r3, r0
 800bdaa:	9307      	str	r3, [sp, #28]
 800bdac:	f1ba 0f00 	cmp.w	sl, #0
 800bdb0:	dd05      	ble.n	800bdbe <_dtoa_r+0x796>
 800bdb2:	4652      	mov	r2, sl
 800bdb4:	9901      	ldr	r1, [sp, #4]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f000 fd38 	bl	800c82c <__lshift>
 800bdbc:	9001      	str	r0, [sp, #4]
 800bdbe:	9b07      	ldr	r3, [sp, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	dd05      	ble.n	800bdd0 <_dtoa_r+0x7a8>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fd2f 	bl	800c82c <__lshift>
 800bdce:	4605      	mov	r5, r0
 800bdd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdd2:	b353      	cbz	r3, 800be2a <_dtoa_r+0x802>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	9801      	ldr	r0, [sp, #4]
 800bdd8:	f000 fd7c 	bl	800c8d4 <__mcmp>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	da24      	bge.n	800be2a <_dtoa_r+0x802>
 800bde0:	2300      	movs	r3, #0
 800bde2:	220a      	movs	r2, #10
 800bde4:	9901      	ldr	r1, [sp, #4]
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 fba9 	bl	800c53e <__multadd>
 800bdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdee:	9001      	str	r0, [sp, #4]
 800bdf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8142 	beq.w	800c07e <_dtoa_r+0xa56>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	220a      	movs	r2, #10
 800be00:	4620      	mov	r0, r4
 800be02:	f000 fb9c 	bl	800c53e <__multadd>
 800be06:	9b06      	ldr	r3, [sp, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	4607      	mov	r7, r0
 800be0c:	dc4b      	bgt.n	800bea6 <_dtoa_r+0x87e>
 800be0e:	9b08      	ldr	r3, [sp, #32]
 800be10:	2b02      	cmp	r3, #2
 800be12:	dd48      	ble.n	800bea6 <_dtoa_r+0x87e>
 800be14:	e011      	b.n	800be3a <_dtoa_r+0x812>
 800be16:	d0c9      	beq.n	800bdac <_dtoa_r+0x784>
 800be18:	9a07      	ldr	r2, [sp, #28]
 800be1a:	331c      	adds	r3, #28
 800be1c:	441a      	add	r2, r3
 800be1e:	449a      	add	sl, r3
 800be20:	441e      	add	r6, r3
 800be22:	4613      	mov	r3, r2
 800be24:	e7c1      	b.n	800bdaa <_dtoa_r+0x782>
 800be26:	4603      	mov	r3, r0
 800be28:	e7f6      	b.n	800be18 <_dtoa_r+0x7f0>
 800be2a:	f1b9 0f00 	cmp.w	r9, #0
 800be2e:	dc34      	bgt.n	800be9a <_dtoa_r+0x872>
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	2b02      	cmp	r3, #2
 800be34:	dd31      	ble.n	800be9a <_dtoa_r+0x872>
 800be36:	f8cd 9018 	str.w	r9, [sp, #24]
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	b963      	cbnz	r3, 800be58 <_dtoa_r+0x830>
 800be3e:	4629      	mov	r1, r5
 800be40:	2205      	movs	r2, #5
 800be42:	4620      	mov	r0, r4
 800be44:	f000 fb7b 	bl	800c53e <__multadd>
 800be48:	4601      	mov	r1, r0
 800be4a:	4605      	mov	r5, r0
 800be4c:	9801      	ldr	r0, [sp, #4]
 800be4e:	f000 fd41 	bl	800c8d4 <__mcmp>
 800be52:	2800      	cmp	r0, #0
 800be54:	f73f adfc 	bgt.w	800ba50 <_dtoa_r+0x428>
 800be58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be5a:	9e04      	ldr	r6, [sp, #16]
 800be5c:	ea6f 0b03 	mvn.w	fp, r3
 800be60:	f04f 0900 	mov.w	r9, #0
 800be64:	4629      	mov	r1, r5
 800be66:	4620      	mov	r0, r4
 800be68:	f000 fb52 	bl	800c510 <_Bfree>
 800be6c:	2f00      	cmp	r7, #0
 800be6e:	f43f aebb 	beq.w	800bbe8 <_dtoa_r+0x5c0>
 800be72:	f1b9 0f00 	cmp.w	r9, #0
 800be76:	d005      	beq.n	800be84 <_dtoa_r+0x85c>
 800be78:	45b9      	cmp	r9, r7
 800be7a:	d003      	beq.n	800be84 <_dtoa_r+0x85c>
 800be7c:	4649      	mov	r1, r9
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fb46 	bl	800c510 <_Bfree>
 800be84:	4639      	mov	r1, r7
 800be86:	4620      	mov	r0, r4
 800be88:	f000 fb42 	bl	800c510 <_Bfree>
 800be8c:	e6ac      	b.n	800bbe8 <_dtoa_r+0x5c0>
 800be8e:	2500      	movs	r5, #0
 800be90:	462f      	mov	r7, r5
 800be92:	e7e1      	b.n	800be58 <_dtoa_r+0x830>
 800be94:	469b      	mov	fp, r3
 800be96:	462f      	mov	r7, r5
 800be98:	e5da      	b.n	800ba50 <_dtoa_r+0x428>
 800be9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9c:	f8cd 9018 	str.w	r9, [sp, #24]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 80f3 	beq.w	800c08c <_dtoa_r+0xa64>
 800bea6:	2e00      	cmp	r6, #0
 800bea8:	dd05      	ble.n	800beb6 <_dtoa_r+0x88e>
 800beaa:	4639      	mov	r1, r7
 800beac:	4632      	mov	r2, r6
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 fcbc 	bl	800c82c <__lshift>
 800beb4:	4607      	mov	r7, r0
 800beb6:	f1b8 0f00 	cmp.w	r8, #0
 800beba:	d04c      	beq.n	800bf56 <_dtoa_r+0x92e>
 800bebc:	6879      	ldr	r1, [r7, #4]
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 faf2 	bl	800c4a8 <_Balloc>
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	3202      	adds	r2, #2
 800bec8:	4606      	mov	r6, r0
 800beca:	0092      	lsls	r2, r2, #2
 800becc:	f107 010c 	add.w	r1, r7, #12
 800bed0:	300c      	adds	r0, #12
 800bed2:	f7fe fd93 	bl	800a9fc <memcpy>
 800bed6:	2201      	movs	r2, #1
 800bed8:	4631      	mov	r1, r6
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fca6 	bl	800c82c <__lshift>
 800bee0:	9b02      	ldr	r3, [sp, #8]
 800bee2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	46b9      	mov	r9, r7
 800beec:	9307      	str	r3, [sp, #28]
 800beee:	4607      	mov	r7, r0
 800bef0:	4629      	mov	r1, r5
 800bef2:	9801      	ldr	r0, [sp, #4]
 800bef4:	f7ff fb0c 	bl	800b510 <quorem>
 800bef8:	4649      	mov	r1, r9
 800befa:	4606      	mov	r6, r0
 800befc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bf00:	9801      	ldr	r0, [sp, #4]
 800bf02:	f000 fce7 	bl	800c8d4 <__mcmp>
 800bf06:	463a      	mov	r2, r7
 800bf08:	9002      	str	r0, [sp, #8]
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fcfb 	bl	800c908 <__mdiff>
 800bf12:	68c3      	ldr	r3, [r0, #12]
 800bf14:	4602      	mov	r2, r0
 800bf16:	bb03      	cbnz	r3, 800bf5a <_dtoa_r+0x932>
 800bf18:	4601      	mov	r1, r0
 800bf1a:	9009      	str	r0, [sp, #36]	; 0x24
 800bf1c:	9801      	ldr	r0, [sp, #4]
 800bf1e:	f000 fcd9 	bl	800c8d4 <__mcmp>
 800bf22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf24:	4603      	mov	r3, r0
 800bf26:	4611      	mov	r1, r2
 800bf28:	4620      	mov	r0, r4
 800bf2a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf2c:	f000 faf0 	bl	800c510 <_Bfree>
 800bf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf32:	b9a3      	cbnz	r3, 800bf5e <_dtoa_r+0x936>
 800bf34:	9a08      	ldr	r2, [sp, #32]
 800bf36:	b992      	cbnz	r2, 800bf5e <_dtoa_r+0x936>
 800bf38:	9a07      	ldr	r2, [sp, #28]
 800bf3a:	b982      	cbnz	r2, 800bf5e <_dtoa_r+0x936>
 800bf3c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf40:	d029      	beq.n	800bf96 <_dtoa_r+0x96e>
 800bf42:	9b02      	ldr	r3, [sp, #8]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd01      	ble.n	800bf4c <_dtoa_r+0x924>
 800bf48:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800bf4c:	f10a 0601 	add.w	r6, sl, #1
 800bf50:	f88a 8000 	strb.w	r8, [sl]
 800bf54:	e786      	b.n	800be64 <_dtoa_r+0x83c>
 800bf56:	4638      	mov	r0, r7
 800bf58:	e7c2      	b.n	800bee0 <_dtoa_r+0x8b8>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e7e3      	b.n	800bf26 <_dtoa_r+0x8fe>
 800bf5e:	9a02      	ldr	r2, [sp, #8]
 800bf60:	2a00      	cmp	r2, #0
 800bf62:	db04      	blt.n	800bf6e <_dtoa_r+0x946>
 800bf64:	d124      	bne.n	800bfb0 <_dtoa_r+0x988>
 800bf66:	9a08      	ldr	r2, [sp, #32]
 800bf68:	bb12      	cbnz	r2, 800bfb0 <_dtoa_r+0x988>
 800bf6a:	9a07      	ldr	r2, [sp, #28]
 800bf6c:	bb02      	cbnz	r2, 800bfb0 <_dtoa_r+0x988>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	ddec      	ble.n	800bf4c <_dtoa_r+0x924>
 800bf72:	2201      	movs	r2, #1
 800bf74:	9901      	ldr	r1, [sp, #4]
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 fc58 	bl	800c82c <__lshift>
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	9001      	str	r0, [sp, #4]
 800bf80:	f000 fca8 	bl	800c8d4 <__mcmp>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	dc03      	bgt.n	800bf90 <_dtoa_r+0x968>
 800bf88:	d1e0      	bne.n	800bf4c <_dtoa_r+0x924>
 800bf8a:	f018 0f01 	tst.w	r8, #1
 800bf8e:	d0dd      	beq.n	800bf4c <_dtoa_r+0x924>
 800bf90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf94:	d1d8      	bne.n	800bf48 <_dtoa_r+0x920>
 800bf96:	2339      	movs	r3, #57	; 0x39
 800bf98:	f10a 0601 	add.w	r6, sl, #1
 800bf9c:	f88a 3000 	strb.w	r3, [sl]
 800bfa0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfa4:	2b39      	cmp	r3, #57	; 0x39
 800bfa6:	f106 32ff 	add.w	r2, r6, #4294967295
 800bfaa:	d04c      	beq.n	800c046 <_dtoa_r+0xa1e>
 800bfac:	3301      	adds	r3, #1
 800bfae:	e051      	b.n	800c054 <_dtoa_r+0xa2c>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f10a 0601 	add.w	r6, sl, #1
 800bfb6:	dd05      	ble.n	800bfc4 <_dtoa_r+0x99c>
 800bfb8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bfbc:	d0eb      	beq.n	800bf96 <_dtoa_r+0x96e>
 800bfbe:	f108 0801 	add.w	r8, r8, #1
 800bfc2:	e7c5      	b.n	800bf50 <_dtoa_r+0x928>
 800bfc4:	9b04      	ldr	r3, [sp, #16]
 800bfc6:	9a06      	ldr	r2, [sp, #24]
 800bfc8:	f806 8c01 	strb.w	r8, [r6, #-1]
 800bfcc:	1af3      	subs	r3, r6, r3
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d021      	beq.n	800c016 <_dtoa_r+0x9ee>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	9901      	ldr	r1, [sp, #4]
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fab0 	bl	800c53e <__multadd>
 800bfde:	45b9      	cmp	r9, r7
 800bfe0:	9001      	str	r0, [sp, #4]
 800bfe2:	f04f 0300 	mov.w	r3, #0
 800bfe6:	f04f 020a 	mov.w	r2, #10
 800bfea:	4649      	mov	r1, r9
 800bfec:	4620      	mov	r0, r4
 800bfee:	d105      	bne.n	800bffc <_dtoa_r+0x9d4>
 800bff0:	f000 faa5 	bl	800c53e <__multadd>
 800bff4:	4681      	mov	r9, r0
 800bff6:	4607      	mov	r7, r0
 800bff8:	46b2      	mov	sl, r6
 800bffa:	e779      	b.n	800bef0 <_dtoa_r+0x8c8>
 800bffc:	f000 fa9f 	bl	800c53e <__multadd>
 800c000:	4639      	mov	r1, r7
 800c002:	4681      	mov	r9, r0
 800c004:	2300      	movs	r3, #0
 800c006:	220a      	movs	r2, #10
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fa98 	bl	800c53e <__multadd>
 800c00e:	4607      	mov	r7, r0
 800c010:	e7f2      	b.n	800bff8 <_dtoa_r+0x9d0>
 800c012:	f04f 0900 	mov.w	r9, #0
 800c016:	2201      	movs	r2, #1
 800c018:	9901      	ldr	r1, [sp, #4]
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 fc06 	bl	800c82c <__lshift>
 800c020:	4629      	mov	r1, r5
 800c022:	9001      	str	r0, [sp, #4]
 800c024:	f000 fc56 	bl	800c8d4 <__mcmp>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dcb9      	bgt.n	800bfa0 <_dtoa_r+0x978>
 800c02c:	d102      	bne.n	800c034 <_dtoa_r+0xa0c>
 800c02e:	f018 0f01 	tst.w	r8, #1
 800c032:	d1b5      	bne.n	800bfa0 <_dtoa_r+0x978>
 800c034:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c038:	2b30      	cmp	r3, #48	; 0x30
 800c03a:	f106 32ff 	add.w	r2, r6, #4294967295
 800c03e:	f47f af11 	bne.w	800be64 <_dtoa_r+0x83c>
 800c042:	4616      	mov	r6, r2
 800c044:	e7f6      	b.n	800c034 <_dtoa_r+0xa0c>
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	4293      	cmp	r3, r2
 800c04a:	d105      	bne.n	800c058 <_dtoa_r+0xa30>
 800c04c:	9a04      	ldr	r2, [sp, #16]
 800c04e:	f10b 0b01 	add.w	fp, fp, #1
 800c052:	2331      	movs	r3, #49	; 0x31
 800c054:	7013      	strb	r3, [r2, #0]
 800c056:	e705      	b.n	800be64 <_dtoa_r+0x83c>
 800c058:	4616      	mov	r6, r2
 800c05a:	e7a1      	b.n	800bfa0 <_dtoa_r+0x978>
 800c05c:	4b16      	ldr	r3, [pc, #88]	; (800c0b8 <_dtoa_r+0xa90>)
 800c05e:	f7ff bb48 	b.w	800b6f2 <_dtoa_r+0xca>
 800c062:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c064:	2b00      	cmp	r3, #0
 800c066:	f47f ab23 	bne.w	800b6b0 <_dtoa_r+0x88>
 800c06a:	4b14      	ldr	r3, [pc, #80]	; (800c0bc <_dtoa_r+0xa94>)
 800c06c:	f7ff bb41 	b.w	800b6f2 <_dtoa_r+0xca>
 800c070:	9b08      	ldr	r3, [sp, #32]
 800c072:	2b01      	cmp	r3, #1
 800c074:	f77f ae3b 	ble.w	800bcee <_dtoa_r+0x6c6>
 800c078:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c07c:	e64f      	b.n	800bd1e <_dtoa_r+0x6f6>
 800c07e:	9b06      	ldr	r3, [sp, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	dc03      	bgt.n	800c08c <_dtoa_r+0xa64>
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	2b02      	cmp	r3, #2
 800c088:	f73f aed7 	bgt.w	800be3a <_dtoa_r+0x812>
 800c08c:	9e04      	ldr	r6, [sp, #16]
 800c08e:	9801      	ldr	r0, [sp, #4]
 800c090:	4629      	mov	r1, r5
 800c092:	f7ff fa3d 	bl	800b510 <quorem>
 800c096:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c09a:	f806 8b01 	strb.w	r8, [r6], #1
 800c09e:	9b04      	ldr	r3, [sp, #16]
 800c0a0:	9a06      	ldr	r2, [sp, #24]
 800c0a2:	1af3      	subs	r3, r6, r3
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	ddb4      	ble.n	800c012 <_dtoa_r+0x9ea>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	220a      	movs	r2, #10
 800c0ac:	9901      	ldr	r1, [sp, #4]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 fa45 	bl	800c53e <__multadd>
 800c0b4:	9001      	str	r0, [sp, #4]
 800c0b6:	e7ea      	b.n	800c08e <_dtoa_r+0xa66>
 800c0b8:	0800e1fc 	.word	0x0800e1fc
 800c0bc:	0800e220 	.word	0x0800e220

0800c0c0 <__sflush_r>:
 800c0c0:	898a      	ldrh	r2, [r1, #12]
 800c0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	0710      	lsls	r0, r2, #28
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	d458      	bmi.n	800c180 <__sflush_r+0xc0>
 800c0ce:	684b      	ldr	r3, [r1, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dc05      	bgt.n	800c0e0 <__sflush_r+0x20>
 800c0d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	dc02      	bgt.n	800c0e0 <__sflush_r+0x20>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0e2:	2e00      	cmp	r6, #0
 800c0e4:	d0f9      	beq.n	800c0da <__sflush_r+0x1a>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0ec:	682f      	ldr	r7, [r5, #0]
 800c0ee:	6a21      	ldr	r1, [r4, #32]
 800c0f0:	602b      	str	r3, [r5, #0]
 800c0f2:	d032      	beq.n	800c15a <__sflush_r+0x9a>
 800c0f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	075a      	lsls	r2, r3, #29
 800c0fa:	d505      	bpl.n	800c108 <__sflush_r+0x48>
 800c0fc:	6863      	ldr	r3, [r4, #4]
 800c0fe:	1ac0      	subs	r0, r0, r3
 800c100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c102:	b10b      	cbz	r3, 800c108 <__sflush_r+0x48>
 800c104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c106:	1ac0      	subs	r0, r0, r3
 800c108:	2300      	movs	r3, #0
 800c10a:	4602      	mov	r2, r0
 800c10c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c10e:	6a21      	ldr	r1, [r4, #32]
 800c110:	4628      	mov	r0, r5
 800c112:	47b0      	blx	r6
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	d106      	bne.n	800c128 <__sflush_r+0x68>
 800c11a:	6829      	ldr	r1, [r5, #0]
 800c11c:	291d      	cmp	r1, #29
 800c11e:	d848      	bhi.n	800c1b2 <__sflush_r+0xf2>
 800c120:	4a29      	ldr	r2, [pc, #164]	; (800c1c8 <__sflush_r+0x108>)
 800c122:	40ca      	lsrs	r2, r1
 800c124:	07d6      	lsls	r6, r2, #31
 800c126:	d544      	bpl.n	800c1b2 <__sflush_r+0xf2>
 800c128:	2200      	movs	r2, #0
 800c12a:	6062      	str	r2, [r4, #4]
 800c12c:	04d9      	lsls	r1, r3, #19
 800c12e:	6922      	ldr	r2, [r4, #16]
 800c130:	6022      	str	r2, [r4, #0]
 800c132:	d504      	bpl.n	800c13e <__sflush_r+0x7e>
 800c134:	1c42      	adds	r2, r0, #1
 800c136:	d101      	bne.n	800c13c <__sflush_r+0x7c>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b903      	cbnz	r3, 800c13e <__sflush_r+0x7e>
 800c13c:	6560      	str	r0, [r4, #84]	; 0x54
 800c13e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c140:	602f      	str	r7, [r5, #0]
 800c142:	2900      	cmp	r1, #0
 800c144:	d0c9      	beq.n	800c0da <__sflush_r+0x1a>
 800c146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c14a:	4299      	cmp	r1, r3
 800c14c:	d002      	beq.n	800c154 <__sflush_r+0x94>
 800c14e:	4628      	mov	r0, r5
 800c150:	f000 fc94 	bl	800ca7c <_free_r>
 800c154:	2000      	movs	r0, #0
 800c156:	6360      	str	r0, [r4, #52]	; 0x34
 800c158:	e7c0      	b.n	800c0dc <__sflush_r+0x1c>
 800c15a:	2301      	movs	r3, #1
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b0      	blx	r6
 800c160:	1c41      	adds	r1, r0, #1
 800c162:	d1c8      	bne.n	800c0f6 <__sflush_r+0x36>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d0c5      	beq.n	800c0f6 <__sflush_r+0x36>
 800c16a:	2b1d      	cmp	r3, #29
 800c16c:	d001      	beq.n	800c172 <__sflush_r+0xb2>
 800c16e:	2b16      	cmp	r3, #22
 800c170:	d101      	bne.n	800c176 <__sflush_r+0xb6>
 800c172:	602f      	str	r7, [r5, #0]
 800c174:	e7b1      	b.n	800c0da <__sflush_r+0x1a>
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c17c:	81a3      	strh	r3, [r4, #12]
 800c17e:	e7ad      	b.n	800c0dc <__sflush_r+0x1c>
 800c180:	690f      	ldr	r7, [r1, #16]
 800c182:	2f00      	cmp	r7, #0
 800c184:	d0a9      	beq.n	800c0da <__sflush_r+0x1a>
 800c186:	0793      	lsls	r3, r2, #30
 800c188:	680e      	ldr	r6, [r1, #0]
 800c18a:	bf08      	it	eq
 800c18c:	694b      	ldreq	r3, [r1, #20]
 800c18e:	600f      	str	r7, [r1, #0]
 800c190:	bf18      	it	ne
 800c192:	2300      	movne	r3, #0
 800c194:	eba6 0807 	sub.w	r8, r6, r7
 800c198:	608b      	str	r3, [r1, #8]
 800c19a:	f1b8 0f00 	cmp.w	r8, #0
 800c19e:	dd9c      	ble.n	800c0da <__sflush_r+0x1a>
 800c1a0:	4643      	mov	r3, r8
 800c1a2:	463a      	mov	r2, r7
 800c1a4:	6a21      	ldr	r1, [r4, #32]
 800c1a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b0      	blx	r6
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	dc06      	bgt.n	800c1be <__sflush_r+0xfe>
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1b6:	81a3      	strh	r3, [r4, #12]
 800c1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1bc:	e78e      	b.n	800c0dc <__sflush_r+0x1c>
 800c1be:	4407      	add	r7, r0
 800c1c0:	eba8 0800 	sub.w	r8, r8, r0
 800c1c4:	e7e9      	b.n	800c19a <__sflush_r+0xda>
 800c1c6:	bf00      	nop
 800c1c8:	20400001 	.word	0x20400001

0800c1cc <_fflush_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	690b      	ldr	r3, [r1, #16]
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	b1db      	cbz	r3, 800c20e <_fflush_r+0x42>
 800c1d6:	b118      	cbz	r0, 800c1e0 <_fflush_r+0x14>
 800c1d8:	6983      	ldr	r3, [r0, #24]
 800c1da:	b90b      	cbnz	r3, 800c1e0 <_fflush_r+0x14>
 800c1dc:	f000 f860 	bl	800c2a0 <__sinit>
 800c1e0:	4b0c      	ldr	r3, [pc, #48]	; (800c214 <_fflush_r+0x48>)
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	d109      	bne.n	800c1fa <_fflush_r+0x2e>
 800c1e6:	686c      	ldr	r4, [r5, #4]
 800c1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ec:	b17b      	cbz	r3, 800c20e <_fflush_r+0x42>
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1f6:	f7ff bf63 	b.w	800c0c0 <__sflush_r>
 800c1fa:	4b07      	ldr	r3, [pc, #28]	; (800c218 <_fflush_r+0x4c>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d101      	bne.n	800c204 <_fflush_r+0x38>
 800c200:	68ac      	ldr	r4, [r5, #8]
 800c202:	e7f1      	b.n	800c1e8 <_fflush_r+0x1c>
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <_fflush_r+0x50>)
 800c206:	429c      	cmp	r4, r3
 800c208:	bf08      	it	eq
 800c20a:	68ec      	ldreq	r4, [r5, #12]
 800c20c:	e7ec      	b.n	800c1e8 <_fflush_r+0x1c>
 800c20e:	2000      	movs	r0, #0
 800c210:	bd38      	pop	{r3, r4, r5, pc}
 800c212:	bf00      	nop
 800c214:	0800e250 	.word	0x0800e250
 800c218:	0800e270 	.word	0x0800e270
 800c21c:	0800e230 	.word	0x0800e230

0800c220 <std>:
 800c220:	2300      	movs	r3, #0
 800c222:	b510      	push	{r4, lr}
 800c224:	4604      	mov	r4, r0
 800c226:	e9c0 3300 	strd	r3, r3, [r0]
 800c22a:	6083      	str	r3, [r0, #8]
 800c22c:	8181      	strh	r1, [r0, #12]
 800c22e:	6643      	str	r3, [r0, #100]	; 0x64
 800c230:	81c2      	strh	r2, [r0, #14]
 800c232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c236:	6183      	str	r3, [r0, #24]
 800c238:	4619      	mov	r1, r3
 800c23a:	2208      	movs	r2, #8
 800c23c:	305c      	adds	r0, #92	; 0x5c
 800c23e:	f7fe fbe8 	bl	800aa12 <memset>
 800c242:	4b05      	ldr	r3, [pc, #20]	; (800c258 <std+0x38>)
 800c244:	6263      	str	r3, [r4, #36]	; 0x24
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <std+0x3c>)
 800c248:	62a3      	str	r3, [r4, #40]	; 0x28
 800c24a:	4b05      	ldr	r3, [pc, #20]	; (800c260 <std+0x40>)
 800c24c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <std+0x44>)
 800c250:	6224      	str	r4, [r4, #32]
 800c252:	6323      	str	r3, [r4, #48]	; 0x30
 800c254:	bd10      	pop	{r4, pc}
 800c256:	bf00      	nop
 800c258:	0800ce6d 	.word	0x0800ce6d
 800c25c:	0800ce8f 	.word	0x0800ce8f
 800c260:	0800cec7 	.word	0x0800cec7
 800c264:	0800ceeb 	.word	0x0800ceeb

0800c268 <_cleanup_r>:
 800c268:	4901      	ldr	r1, [pc, #4]	; (800c270 <_cleanup_r+0x8>)
 800c26a:	f000 b885 	b.w	800c378 <_fwalk_reent>
 800c26e:	bf00      	nop
 800c270:	0800c1cd 	.word	0x0800c1cd

0800c274 <__sfmoreglue>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	1e4a      	subs	r2, r1, #1
 800c278:	2568      	movs	r5, #104	; 0x68
 800c27a:	4355      	muls	r5, r2
 800c27c:	460e      	mov	r6, r1
 800c27e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c282:	f000 fc49 	bl	800cb18 <_malloc_r>
 800c286:	4604      	mov	r4, r0
 800c288:	b140      	cbz	r0, 800c29c <__sfmoreglue+0x28>
 800c28a:	2100      	movs	r1, #0
 800c28c:	e9c0 1600 	strd	r1, r6, [r0]
 800c290:	300c      	adds	r0, #12
 800c292:	60a0      	str	r0, [r4, #8]
 800c294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c298:	f7fe fbbb 	bl	800aa12 <memset>
 800c29c:	4620      	mov	r0, r4
 800c29e:	bd70      	pop	{r4, r5, r6, pc}

0800c2a0 <__sinit>:
 800c2a0:	6983      	ldr	r3, [r0, #24]
 800c2a2:	b510      	push	{r4, lr}
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	bb33      	cbnz	r3, 800c2f6 <__sinit+0x56>
 800c2a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c2ac:	6503      	str	r3, [r0, #80]	; 0x50
 800c2ae:	4b12      	ldr	r3, [pc, #72]	; (800c2f8 <__sinit+0x58>)
 800c2b0:	4a12      	ldr	r2, [pc, #72]	; (800c2fc <__sinit+0x5c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6282      	str	r2, [r0, #40]	; 0x28
 800c2b6:	4298      	cmp	r0, r3
 800c2b8:	bf04      	itt	eq
 800c2ba:	2301      	moveq	r3, #1
 800c2bc:	6183      	streq	r3, [r0, #24]
 800c2be:	f000 f81f 	bl	800c300 <__sfp>
 800c2c2:	6060      	str	r0, [r4, #4]
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 f81b 	bl	800c300 <__sfp>
 800c2ca:	60a0      	str	r0, [r4, #8]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 f817 	bl	800c300 <__sfp>
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	60e0      	str	r0, [r4, #12]
 800c2d6:	2104      	movs	r1, #4
 800c2d8:	6860      	ldr	r0, [r4, #4]
 800c2da:	f7ff ffa1 	bl	800c220 <std>
 800c2de:	2201      	movs	r2, #1
 800c2e0:	2109      	movs	r1, #9
 800c2e2:	68a0      	ldr	r0, [r4, #8]
 800c2e4:	f7ff ff9c 	bl	800c220 <std>
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	2112      	movs	r1, #18
 800c2ec:	68e0      	ldr	r0, [r4, #12]
 800c2ee:	f7ff ff97 	bl	800c220 <std>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	61a3      	str	r3, [r4, #24]
 800c2f6:	bd10      	pop	{r4, pc}
 800c2f8:	0800e1e8 	.word	0x0800e1e8
 800c2fc:	0800c269 	.word	0x0800c269

0800c300 <__sfp>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	4b1b      	ldr	r3, [pc, #108]	; (800c370 <__sfp+0x70>)
 800c304:	681e      	ldr	r6, [r3, #0]
 800c306:	69b3      	ldr	r3, [r6, #24]
 800c308:	4607      	mov	r7, r0
 800c30a:	b913      	cbnz	r3, 800c312 <__sfp+0x12>
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7ff ffc7 	bl	800c2a0 <__sinit>
 800c312:	3648      	adds	r6, #72	; 0x48
 800c314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c318:	3b01      	subs	r3, #1
 800c31a:	d503      	bpl.n	800c324 <__sfp+0x24>
 800c31c:	6833      	ldr	r3, [r6, #0]
 800c31e:	b133      	cbz	r3, 800c32e <__sfp+0x2e>
 800c320:	6836      	ldr	r6, [r6, #0]
 800c322:	e7f7      	b.n	800c314 <__sfp+0x14>
 800c324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c328:	b16d      	cbz	r5, 800c346 <__sfp+0x46>
 800c32a:	3468      	adds	r4, #104	; 0x68
 800c32c:	e7f4      	b.n	800c318 <__sfp+0x18>
 800c32e:	2104      	movs	r1, #4
 800c330:	4638      	mov	r0, r7
 800c332:	f7ff ff9f 	bl	800c274 <__sfmoreglue>
 800c336:	6030      	str	r0, [r6, #0]
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1f1      	bne.n	800c320 <__sfp+0x20>
 800c33c:	230c      	movs	r3, #12
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	4604      	mov	r4, r0
 800c342:	4620      	mov	r0, r4
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	4b0b      	ldr	r3, [pc, #44]	; (800c374 <__sfp+0x74>)
 800c348:	6665      	str	r5, [r4, #100]	; 0x64
 800c34a:	e9c4 5500 	strd	r5, r5, [r4]
 800c34e:	60a5      	str	r5, [r4, #8]
 800c350:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c354:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c358:	2208      	movs	r2, #8
 800c35a:	4629      	mov	r1, r5
 800c35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c360:	f7fe fb57 	bl	800aa12 <memset>
 800c364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c36c:	e7e9      	b.n	800c342 <__sfp+0x42>
 800c36e:	bf00      	nop
 800c370:	0800e1e8 	.word	0x0800e1e8
 800c374:	ffff0001 	.word	0xffff0001

0800c378 <_fwalk_reent>:
 800c378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c37c:	4680      	mov	r8, r0
 800c37e:	4689      	mov	r9, r1
 800c380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c384:	2600      	movs	r6, #0
 800c386:	b914      	cbnz	r4, 800c38e <_fwalk_reent+0x16>
 800c388:	4630      	mov	r0, r6
 800c38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c38e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c392:	3f01      	subs	r7, #1
 800c394:	d501      	bpl.n	800c39a <_fwalk_reent+0x22>
 800c396:	6824      	ldr	r4, [r4, #0]
 800c398:	e7f5      	b.n	800c386 <_fwalk_reent+0xe>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d907      	bls.n	800c3b0 <_fwalk_reent+0x38>
 800c3a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	d003      	beq.n	800c3b0 <_fwalk_reent+0x38>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	47c8      	blx	r9
 800c3ae:	4306      	orrs	r6, r0
 800c3b0:	3568      	adds	r5, #104	; 0x68
 800c3b2:	e7ee      	b.n	800c392 <_fwalk_reent+0x1a>

0800c3b4 <_localeconv_r>:
 800c3b4:	4b04      	ldr	r3, [pc, #16]	; (800c3c8 <_localeconv_r+0x14>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6a18      	ldr	r0, [r3, #32]
 800c3ba:	4b04      	ldr	r3, [pc, #16]	; (800c3cc <_localeconv_r+0x18>)
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	bf08      	it	eq
 800c3c0:	4618      	moveq	r0, r3
 800c3c2:	30f0      	adds	r0, #240	; 0xf0
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000028 	.word	0x20000028
 800c3cc:	2000008c 	.word	0x2000008c

0800c3d0 <__swhatbuf_r>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	460e      	mov	r6, r1
 800c3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	b096      	sub	sp, #88	; 0x58
 800c3dc:	4614      	mov	r4, r2
 800c3de:	461d      	mov	r5, r3
 800c3e0:	da07      	bge.n	800c3f2 <__swhatbuf_r+0x22>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	602b      	str	r3, [r5, #0]
 800c3e6:	89b3      	ldrh	r3, [r6, #12]
 800c3e8:	061a      	lsls	r2, r3, #24
 800c3ea:	d410      	bmi.n	800c40e <__swhatbuf_r+0x3e>
 800c3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f0:	e00e      	b.n	800c410 <__swhatbuf_r+0x40>
 800c3f2:	466a      	mov	r2, sp
 800c3f4:	f000 fda0 	bl	800cf38 <_fstat_r>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	dbf2      	blt.n	800c3e2 <__swhatbuf_r+0x12>
 800c3fc:	9a01      	ldr	r2, [sp, #4]
 800c3fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c406:	425a      	negs	r2, r3
 800c408:	415a      	adcs	r2, r3
 800c40a:	602a      	str	r2, [r5, #0]
 800c40c:	e7ee      	b.n	800c3ec <__swhatbuf_r+0x1c>
 800c40e:	2340      	movs	r3, #64	; 0x40
 800c410:	2000      	movs	r0, #0
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	b016      	add	sp, #88	; 0x58
 800c416:	bd70      	pop	{r4, r5, r6, pc}

0800c418 <__smakebuf_r>:
 800c418:	898b      	ldrh	r3, [r1, #12]
 800c41a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c41c:	079d      	lsls	r5, r3, #30
 800c41e:	4606      	mov	r6, r0
 800c420:	460c      	mov	r4, r1
 800c422:	d507      	bpl.n	800c434 <__smakebuf_r+0x1c>
 800c424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	6123      	str	r3, [r4, #16]
 800c42c:	2301      	movs	r3, #1
 800c42e:	6163      	str	r3, [r4, #20]
 800c430:	b002      	add	sp, #8
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	ab01      	add	r3, sp, #4
 800c436:	466a      	mov	r2, sp
 800c438:	f7ff ffca 	bl	800c3d0 <__swhatbuf_r>
 800c43c:	9900      	ldr	r1, [sp, #0]
 800c43e:	4605      	mov	r5, r0
 800c440:	4630      	mov	r0, r6
 800c442:	f000 fb69 	bl	800cb18 <_malloc_r>
 800c446:	b948      	cbnz	r0, 800c45c <__smakebuf_r+0x44>
 800c448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44c:	059a      	lsls	r2, r3, #22
 800c44e:	d4ef      	bmi.n	800c430 <__smakebuf_r+0x18>
 800c450:	f023 0303 	bic.w	r3, r3, #3
 800c454:	f043 0302 	orr.w	r3, r3, #2
 800c458:	81a3      	strh	r3, [r4, #12]
 800c45a:	e7e3      	b.n	800c424 <__smakebuf_r+0xc>
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <__smakebuf_r+0x7c>)
 800c45e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c460:	89a3      	ldrh	r3, [r4, #12]
 800c462:	6020      	str	r0, [r4, #0]
 800c464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c468:	81a3      	strh	r3, [r4, #12]
 800c46a:	9b00      	ldr	r3, [sp, #0]
 800c46c:	6163      	str	r3, [r4, #20]
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	6120      	str	r0, [r4, #16]
 800c472:	b15b      	cbz	r3, 800c48c <__smakebuf_r+0x74>
 800c474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c478:	4630      	mov	r0, r6
 800c47a:	f000 fd6f 	bl	800cf5c <_isatty_r>
 800c47e:	b128      	cbz	r0, 800c48c <__smakebuf_r+0x74>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	f023 0303 	bic.w	r3, r3, #3
 800c486:	f043 0301 	orr.w	r3, r3, #1
 800c48a:	81a3      	strh	r3, [r4, #12]
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	431d      	orrs	r5, r3
 800c490:	81a5      	strh	r5, [r4, #12]
 800c492:	e7cd      	b.n	800c430 <__smakebuf_r+0x18>
 800c494:	0800c269 	.word	0x0800c269

0800c498 <malloc>:
 800c498:	4b02      	ldr	r3, [pc, #8]	; (800c4a4 <malloc+0xc>)
 800c49a:	4601      	mov	r1, r0
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	f000 bb3b 	b.w	800cb18 <_malloc_r>
 800c4a2:	bf00      	nop
 800c4a4:	20000028 	.word	0x20000028

0800c4a8 <_Balloc>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	460e      	mov	r6, r1
 800c4b0:	b93d      	cbnz	r5, 800c4c2 <_Balloc+0x1a>
 800c4b2:	2010      	movs	r0, #16
 800c4b4:	f7ff fff0 	bl	800c498 <malloc>
 800c4b8:	6260      	str	r0, [r4, #36]	; 0x24
 800c4ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4be:	6005      	str	r5, [r0, #0]
 800c4c0:	60c5      	str	r5, [r0, #12]
 800c4c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c4c4:	68eb      	ldr	r3, [r5, #12]
 800c4c6:	b183      	cbz	r3, 800c4ea <_Balloc+0x42>
 800c4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c4d0:	b9b8      	cbnz	r0, 800c502 <_Balloc+0x5a>
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	fa01 f506 	lsl.w	r5, r1, r6
 800c4d8:	1d6a      	adds	r2, r5, #5
 800c4da:	0092      	lsls	r2, r2, #2
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f000 fabf 	bl	800ca60 <_calloc_r>
 800c4e2:	b160      	cbz	r0, 800c4fe <_Balloc+0x56>
 800c4e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c4e8:	e00e      	b.n	800c508 <_Balloc+0x60>
 800c4ea:	2221      	movs	r2, #33	; 0x21
 800c4ec:	2104      	movs	r1, #4
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 fab6 	bl	800ca60 <_calloc_r>
 800c4f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4f6:	60e8      	str	r0, [r5, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1e4      	bne.n	800c4c8 <_Balloc+0x20>
 800c4fe:	2000      	movs	r0, #0
 800c500:	bd70      	pop	{r4, r5, r6, pc}
 800c502:	6802      	ldr	r2, [r0, #0]
 800c504:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c508:	2300      	movs	r3, #0
 800c50a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c50e:	e7f7      	b.n	800c500 <_Balloc+0x58>

0800c510 <_Bfree>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c514:	4606      	mov	r6, r0
 800c516:	460d      	mov	r5, r1
 800c518:	b93c      	cbnz	r4, 800c52a <_Bfree+0x1a>
 800c51a:	2010      	movs	r0, #16
 800c51c:	f7ff ffbc 	bl	800c498 <malloc>
 800c520:	6270      	str	r0, [r6, #36]	; 0x24
 800c522:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c526:	6004      	str	r4, [r0, #0]
 800c528:	60c4      	str	r4, [r0, #12]
 800c52a:	b13d      	cbz	r5, 800c53c <_Bfree+0x2c>
 800c52c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c52e:	686a      	ldr	r2, [r5, #4]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c536:	6029      	str	r1, [r5, #0]
 800c538:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c53c:	bd70      	pop	{r4, r5, r6, pc}

0800c53e <__multadd>:
 800c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	690d      	ldr	r5, [r1, #16]
 800c544:	461f      	mov	r7, r3
 800c546:	4606      	mov	r6, r0
 800c548:	460c      	mov	r4, r1
 800c54a:	f101 0c14 	add.w	ip, r1, #20
 800c54e:	2300      	movs	r3, #0
 800c550:	f8dc 0000 	ldr.w	r0, [ip]
 800c554:	b281      	uxth	r1, r0
 800c556:	fb02 7101 	mla	r1, r2, r1, r7
 800c55a:	0c0f      	lsrs	r7, r1, #16
 800c55c:	0c00      	lsrs	r0, r0, #16
 800c55e:	fb02 7000 	mla	r0, r2, r0, r7
 800c562:	b289      	uxth	r1, r1
 800c564:	3301      	adds	r3, #1
 800c566:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c56a:	429d      	cmp	r5, r3
 800c56c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c570:	f84c 1b04 	str.w	r1, [ip], #4
 800c574:	dcec      	bgt.n	800c550 <__multadd+0x12>
 800c576:	b1d7      	cbz	r7, 800c5ae <__multadd+0x70>
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	42ab      	cmp	r3, r5
 800c57c:	dc12      	bgt.n	800c5a4 <__multadd+0x66>
 800c57e:	6861      	ldr	r1, [r4, #4]
 800c580:	4630      	mov	r0, r6
 800c582:	3101      	adds	r1, #1
 800c584:	f7ff ff90 	bl	800c4a8 <_Balloc>
 800c588:	6922      	ldr	r2, [r4, #16]
 800c58a:	3202      	adds	r2, #2
 800c58c:	f104 010c 	add.w	r1, r4, #12
 800c590:	4680      	mov	r8, r0
 800c592:	0092      	lsls	r2, r2, #2
 800c594:	300c      	adds	r0, #12
 800c596:	f7fe fa31 	bl	800a9fc <memcpy>
 800c59a:	4621      	mov	r1, r4
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7ff ffb7 	bl	800c510 <_Bfree>
 800c5a2:	4644      	mov	r4, r8
 800c5a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5a8:	3501      	adds	r5, #1
 800c5aa:	615f      	str	r7, [r3, #20]
 800c5ac:	6125      	str	r5, [r4, #16]
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5b4 <__hi0bits>:
 800c5b4:	0c02      	lsrs	r2, r0, #16
 800c5b6:	0412      	lsls	r2, r2, #16
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	b9b2      	cbnz	r2, 800c5ea <__hi0bits+0x36>
 800c5bc:	0403      	lsls	r3, r0, #16
 800c5be:	2010      	movs	r0, #16
 800c5c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5c4:	bf04      	itt	eq
 800c5c6:	021b      	lsleq	r3, r3, #8
 800c5c8:	3008      	addeq	r0, #8
 800c5ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5ce:	bf04      	itt	eq
 800c5d0:	011b      	lsleq	r3, r3, #4
 800c5d2:	3004      	addeq	r0, #4
 800c5d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c5d8:	bf04      	itt	eq
 800c5da:	009b      	lsleq	r3, r3, #2
 800c5dc:	3002      	addeq	r0, #2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	db06      	blt.n	800c5f0 <__hi0bits+0x3c>
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	d503      	bpl.n	800c5ee <__hi0bits+0x3a>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	4770      	bx	lr
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e7e8      	b.n	800c5c0 <__hi0bits+0xc>
 800c5ee:	2020      	movs	r0, #32
 800c5f0:	4770      	bx	lr

0800c5f2 <__lo0bits>:
 800c5f2:	6803      	ldr	r3, [r0, #0]
 800c5f4:	f013 0207 	ands.w	r2, r3, #7
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	d00b      	beq.n	800c614 <__lo0bits+0x22>
 800c5fc:	07da      	lsls	r2, r3, #31
 800c5fe:	d423      	bmi.n	800c648 <__lo0bits+0x56>
 800c600:	0798      	lsls	r0, r3, #30
 800c602:	bf49      	itett	mi
 800c604:	085b      	lsrmi	r3, r3, #1
 800c606:	089b      	lsrpl	r3, r3, #2
 800c608:	2001      	movmi	r0, #1
 800c60a:	600b      	strmi	r3, [r1, #0]
 800c60c:	bf5c      	itt	pl
 800c60e:	600b      	strpl	r3, [r1, #0]
 800c610:	2002      	movpl	r0, #2
 800c612:	4770      	bx	lr
 800c614:	b298      	uxth	r0, r3
 800c616:	b9a8      	cbnz	r0, 800c644 <__lo0bits+0x52>
 800c618:	0c1b      	lsrs	r3, r3, #16
 800c61a:	2010      	movs	r0, #16
 800c61c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c620:	bf04      	itt	eq
 800c622:	0a1b      	lsreq	r3, r3, #8
 800c624:	3008      	addeq	r0, #8
 800c626:	071a      	lsls	r2, r3, #28
 800c628:	bf04      	itt	eq
 800c62a:	091b      	lsreq	r3, r3, #4
 800c62c:	3004      	addeq	r0, #4
 800c62e:	079a      	lsls	r2, r3, #30
 800c630:	bf04      	itt	eq
 800c632:	089b      	lsreq	r3, r3, #2
 800c634:	3002      	addeq	r0, #2
 800c636:	07da      	lsls	r2, r3, #31
 800c638:	d402      	bmi.n	800c640 <__lo0bits+0x4e>
 800c63a:	085b      	lsrs	r3, r3, #1
 800c63c:	d006      	beq.n	800c64c <__lo0bits+0x5a>
 800c63e:	3001      	adds	r0, #1
 800c640:	600b      	str	r3, [r1, #0]
 800c642:	4770      	bx	lr
 800c644:	4610      	mov	r0, r2
 800c646:	e7e9      	b.n	800c61c <__lo0bits+0x2a>
 800c648:	2000      	movs	r0, #0
 800c64a:	4770      	bx	lr
 800c64c:	2020      	movs	r0, #32
 800c64e:	4770      	bx	lr

0800c650 <__i2b>:
 800c650:	b510      	push	{r4, lr}
 800c652:	460c      	mov	r4, r1
 800c654:	2101      	movs	r1, #1
 800c656:	f7ff ff27 	bl	800c4a8 <_Balloc>
 800c65a:	2201      	movs	r2, #1
 800c65c:	6144      	str	r4, [r0, #20]
 800c65e:	6102      	str	r2, [r0, #16]
 800c660:	bd10      	pop	{r4, pc}

0800c662 <__multiply>:
 800c662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c666:	4614      	mov	r4, r2
 800c668:	690a      	ldr	r2, [r1, #16]
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	bfb8      	it	lt
 800c670:	460b      	movlt	r3, r1
 800c672:	4688      	mov	r8, r1
 800c674:	bfbc      	itt	lt
 800c676:	46a0      	movlt	r8, r4
 800c678:	461c      	movlt	r4, r3
 800c67a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c67e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c686:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c68a:	eb07 0609 	add.w	r6, r7, r9
 800c68e:	42b3      	cmp	r3, r6
 800c690:	bfb8      	it	lt
 800c692:	3101      	addlt	r1, #1
 800c694:	f7ff ff08 	bl	800c4a8 <_Balloc>
 800c698:	f100 0514 	add.w	r5, r0, #20
 800c69c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	4573      	cmp	r3, lr
 800c6a6:	d316      	bcc.n	800c6d6 <__multiply+0x74>
 800c6a8:	f104 0214 	add.w	r2, r4, #20
 800c6ac:	f108 0114 	add.w	r1, r8, #20
 800c6b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c6b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	9b00      	ldr	r3, [sp, #0]
 800c6bc:	9201      	str	r2, [sp, #4]
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d80c      	bhi.n	800c6dc <__multiply+0x7a>
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	dd03      	ble.n	800c6ce <__multiply+0x6c>
 800c6c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d05d      	beq.n	800c78a <__multiply+0x128>
 800c6ce:	6106      	str	r6, [r0, #16]
 800c6d0:	b003      	add	sp, #12
 800c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d6:	f843 2b04 	str.w	r2, [r3], #4
 800c6da:	e7e3      	b.n	800c6a4 <__multiply+0x42>
 800c6dc:	f8b2 b000 	ldrh.w	fp, [r2]
 800c6e0:	f1bb 0f00 	cmp.w	fp, #0
 800c6e4:	d023      	beq.n	800c72e <__multiply+0xcc>
 800c6e6:	4689      	mov	r9, r1
 800c6e8:	46ac      	mov	ip, r5
 800c6ea:	f04f 0800 	mov.w	r8, #0
 800c6ee:	f859 4b04 	ldr.w	r4, [r9], #4
 800c6f2:	f8dc a000 	ldr.w	sl, [ip]
 800c6f6:	b2a3      	uxth	r3, r4
 800c6f8:	fa1f fa8a 	uxth.w	sl, sl
 800c6fc:	fb0b a303 	mla	r3, fp, r3, sl
 800c700:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c704:	f8dc 4000 	ldr.w	r4, [ip]
 800c708:	4443      	add	r3, r8
 800c70a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c70e:	fb0b 840a 	mla	r4, fp, sl, r8
 800c712:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c716:	46e2      	mov	sl, ip
 800c718:	b29b      	uxth	r3, r3
 800c71a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c71e:	454f      	cmp	r7, r9
 800c720:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c724:	f84a 3b04 	str.w	r3, [sl], #4
 800c728:	d82b      	bhi.n	800c782 <__multiply+0x120>
 800c72a:	f8cc 8004 	str.w	r8, [ip, #4]
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c734:	3204      	adds	r2, #4
 800c736:	f1ba 0f00 	cmp.w	sl, #0
 800c73a:	d020      	beq.n	800c77e <__multiply+0x11c>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	4689      	mov	r9, r1
 800c740:	46a8      	mov	r8, r5
 800c742:	f04f 0b00 	mov.w	fp, #0
 800c746:	f8b9 c000 	ldrh.w	ip, [r9]
 800c74a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c74e:	fb0a 440c 	mla	r4, sl, ip, r4
 800c752:	445c      	add	r4, fp
 800c754:	46c4      	mov	ip, r8
 800c756:	b29b      	uxth	r3, r3
 800c758:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c75c:	f84c 3b04 	str.w	r3, [ip], #4
 800c760:	f859 3b04 	ldr.w	r3, [r9], #4
 800c764:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c768:	0c1b      	lsrs	r3, r3, #16
 800c76a:	fb0a b303 	mla	r3, sl, r3, fp
 800c76e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c772:	454f      	cmp	r7, r9
 800c774:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c778:	d805      	bhi.n	800c786 <__multiply+0x124>
 800c77a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c77e:	3504      	adds	r5, #4
 800c780:	e79b      	b.n	800c6ba <__multiply+0x58>
 800c782:	46d4      	mov	ip, sl
 800c784:	e7b3      	b.n	800c6ee <__multiply+0x8c>
 800c786:	46e0      	mov	r8, ip
 800c788:	e7dd      	b.n	800c746 <__multiply+0xe4>
 800c78a:	3e01      	subs	r6, #1
 800c78c:	e799      	b.n	800c6c2 <__multiply+0x60>
	...

0800c790 <__pow5mult>:
 800c790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c794:	4615      	mov	r5, r2
 800c796:	f012 0203 	ands.w	r2, r2, #3
 800c79a:	4606      	mov	r6, r0
 800c79c:	460f      	mov	r7, r1
 800c79e:	d007      	beq.n	800c7b0 <__pow5mult+0x20>
 800c7a0:	3a01      	subs	r2, #1
 800c7a2:	4c21      	ldr	r4, [pc, #132]	; (800c828 <__pow5mult+0x98>)
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7aa:	f7ff fec8 	bl	800c53e <__multadd>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	10ad      	asrs	r5, r5, #2
 800c7b2:	d035      	beq.n	800c820 <__pow5mult+0x90>
 800c7b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7b6:	b93c      	cbnz	r4, 800c7c8 <__pow5mult+0x38>
 800c7b8:	2010      	movs	r0, #16
 800c7ba:	f7ff fe6d 	bl	800c498 <malloc>
 800c7be:	6270      	str	r0, [r6, #36]	; 0x24
 800c7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7c4:	6004      	str	r4, [r0, #0]
 800c7c6:	60c4      	str	r4, [r0, #12]
 800c7c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7d0:	b94c      	cbnz	r4, 800c7e6 <__pow5mult+0x56>
 800c7d2:	f240 2171 	movw	r1, #625	; 0x271
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f7ff ff3a 	bl	800c650 <__i2b>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	f04f 0800 	mov.w	r8, #0
 800c7ea:	07eb      	lsls	r3, r5, #31
 800c7ec:	d50a      	bpl.n	800c804 <__pow5mult+0x74>
 800c7ee:	4639      	mov	r1, r7
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff ff35 	bl	800c662 <__multiply>
 800c7f8:	4639      	mov	r1, r7
 800c7fa:	4681      	mov	r9, r0
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f7ff fe87 	bl	800c510 <_Bfree>
 800c802:	464f      	mov	r7, r9
 800c804:	106d      	asrs	r5, r5, #1
 800c806:	d00b      	beq.n	800c820 <__pow5mult+0x90>
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	b938      	cbnz	r0, 800c81c <__pow5mult+0x8c>
 800c80c:	4622      	mov	r2, r4
 800c80e:	4621      	mov	r1, r4
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff ff26 	bl	800c662 <__multiply>
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	f8c0 8000 	str.w	r8, [r0]
 800c81c:	4604      	mov	r4, r0
 800c81e:	e7e4      	b.n	800c7ea <__pow5mult+0x5a>
 800c820:	4638      	mov	r0, r7
 800c822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c826:	bf00      	nop
 800c828:	0800e380 	.word	0x0800e380

0800c82c <__lshift>:
 800c82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	460c      	mov	r4, r1
 800c832:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c836:	6923      	ldr	r3, [r4, #16]
 800c838:	6849      	ldr	r1, [r1, #4]
 800c83a:	eb0a 0903 	add.w	r9, sl, r3
 800c83e:	68a3      	ldr	r3, [r4, #8]
 800c840:	4607      	mov	r7, r0
 800c842:	4616      	mov	r6, r2
 800c844:	f109 0501 	add.w	r5, r9, #1
 800c848:	42ab      	cmp	r3, r5
 800c84a:	db32      	blt.n	800c8b2 <__lshift+0x86>
 800c84c:	4638      	mov	r0, r7
 800c84e:	f7ff fe2b 	bl	800c4a8 <_Balloc>
 800c852:	2300      	movs	r3, #0
 800c854:	4680      	mov	r8, r0
 800c856:	f100 0114 	add.w	r1, r0, #20
 800c85a:	461a      	mov	r2, r3
 800c85c:	4553      	cmp	r3, sl
 800c85e:	db2b      	blt.n	800c8b8 <__lshift+0x8c>
 800c860:	6920      	ldr	r0, [r4, #16]
 800c862:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c866:	f104 0314 	add.w	r3, r4, #20
 800c86a:	f016 021f 	ands.w	r2, r6, #31
 800c86e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c872:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c876:	d025      	beq.n	800c8c4 <__lshift+0x98>
 800c878:	f1c2 0e20 	rsb	lr, r2, #32
 800c87c:	2000      	movs	r0, #0
 800c87e:	681e      	ldr	r6, [r3, #0]
 800c880:	468a      	mov	sl, r1
 800c882:	4096      	lsls	r6, r2
 800c884:	4330      	orrs	r0, r6
 800c886:	f84a 0b04 	str.w	r0, [sl], #4
 800c88a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c88e:	459c      	cmp	ip, r3
 800c890:	fa20 f00e 	lsr.w	r0, r0, lr
 800c894:	d814      	bhi.n	800c8c0 <__lshift+0x94>
 800c896:	6048      	str	r0, [r1, #4]
 800c898:	b108      	cbz	r0, 800c89e <__lshift+0x72>
 800c89a:	f109 0502 	add.w	r5, r9, #2
 800c89e:	3d01      	subs	r5, #1
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	f7ff fe32 	bl	800c510 <_Bfree>
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b2:	3101      	adds	r1, #1
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	e7c7      	b.n	800c848 <__lshift+0x1c>
 800c8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	e7cd      	b.n	800c85c <__lshift+0x30>
 800c8c0:	4651      	mov	r1, sl
 800c8c2:	e7dc      	b.n	800c87e <__lshift+0x52>
 800c8c4:	3904      	subs	r1, #4
 800c8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8ce:	459c      	cmp	ip, r3
 800c8d0:	d8f9      	bhi.n	800c8c6 <__lshift+0x9a>
 800c8d2:	e7e4      	b.n	800c89e <__lshift+0x72>

0800c8d4 <__mcmp>:
 800c8d4:	6903      	ldr	r3, [r0, #16]
 800c8d6:	690a      	ldr	r2, [r1, #16]
 800c8d8:	1a9b      	subs	r3, r3, r2
 800c8da:	b530      	push	{r4, r5, lr}
 800c8dc:	d10c      	bne.n	800c8f8 <__mcmp+0x24>
 800c8de:	0092      	lsls	r2, r2, #2
 800c8e0:	3014      	adds	r0, #20
 800c8e2:	3114      	adds	r1, #20
 800c8e4:	1884      	adds	r4, r0, r2
 800c8e6:	4411      	add	r1, r2
 800c8e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8f0:	4295      	cmp	r5, r2
 800c8f2:	d003      	beq.n	800c8fc <__mcmp+0x28>
 800c8f4:	d305      	bcc.n	800c902 <__mcmp+0x2e>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	bd30      	pop	{r4, r5, pc}
 800c8fc:	42a0      	cmp	r0, r4
 800c8fe:	d3f3      	bcc.n	800c8e8 <__mcmp+0x14>
 800c900:	e7fa      	b.n	800c8f8 <__mcmp+0x24>
 800c902:	f04f 33ff 	mov.w	r3, #4294967295
 800c906:	e7f7      	b.n	800c8f8 <__mcmp+0x24>

0800c908 <__mdiff>:
 800c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	460d      	mov	r5, r1
 800c90e:	4607      	mov	r7, r0
 800c910:	4611      	mov	r1, r2
 800c912:	4628      	mov	r0, r5
 800c914:	4614      	mov	r4, r2
 800c916:	f7ff ffdd 	bl	800c8d4 <__mcmp>
 800c91a:	1e06      	subs	r6, r0, #0
 800c91c:	d108      	bne.n	800c930 <__mdiff+0x28>
 800c91e:	4631      	mov	r1, r6
 800c920:	4638      	mov	r0, r7
 800c922:	f7ff fdc1 	bl	800c4a8 <_Balloc>
 800c926:	2301      	movs	r3, #1
 800c928:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c930:	bfa4      	itt	ge
 800c932:	4623      	movge	r3, r4
 800c934:	462c      	movge	r4, r5
 800c936:	4638      	mov	r0, r7
 800c938:	6861      	ldr	r1, [r4, #4]
 800c93a:	bfa6      	itte	ge
 800c93c:	461d      	movge	r5, r3
 800c93e:	2600      	movge	r6, #0
 800c940:	2601      	movlt	r6, #1
 800c942:	f7ff fdb1 	bl	800c4a8 <_Balloc>
 800c946:	692b      	ldr	r3, [r5, #16]
 800c948:	60c6      	str	r6, [r0, #12]
 800c94a:	6926      	ldr	r6, [r4, #16]
 800c94c:	f105 0914 	add.w	r9, r5, #20
 800c950:	f104 0214 	add.w	r2, r4, #20
 800c954:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c958:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c95c:	f100 0514 	add.w	r5, r0, #20
 800c960:	f04f 0e00 	mov.w	lr, #0
 800c964:	f852 ab04 	ldr.w	sl, [r2], #4
 800c968:	f859 4b04 	ldr.w	r4, [r9], #4
 800c96c:	fa1e f18a 	uxtah	r1, lr, sl
 800c970:	b2a3      	uxth	r3, r4
 800c972:	1ac9      	subs	r1, r1, r3
 800c974:	0c23      	lsrs	r3, r4, #16
 800c976:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c97a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c97e:	b289      	uxth	r1, r1
 800c980:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c984:	45c8      	cmp	r8, r9
 800c986:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c98a:	4694      	mov	ip, r2
 800c98c:	f845 3b04 	str.w	r3, [r5], #4
 800c990:	d8e8      	bhi.n	800c964 <__mdiff+0x5c>
 800c992:	45bc      	cmp	ip, r7
 800c994:	d304      	bcc.n	800c9a0 <__mdiff+0x98>
 800c996:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c99a:	b183      	cbz	r3, 800c9be <__mdiff+0xb6>
 800c99c:	6106      	str	r6, [r0, #16]
 800c99e:	e7c5      	b.n	800c92c <__mdiff+0x24>
 800c9a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c9a4:	fa1e f381 	uxtah	r3, lr, r1
 800c9a8:	141a      	asrs	r2, r3, #16
 800c9aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c9b8:	f845 3b04 	str.w	r3, [r5], #4
 800c9bc:	e7e9      	b.n	800c992 <__mdiff+0x8a>
 800c9be:	3e01      	subs	r6, #1
 800c9c0:	e7e9      	b.n	800c996 <__mdiff+0x8e>

0800c9c2 <__d2b>:
 800c9c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9c6:	460e      	mov	r6, r1
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	ec59 8b10 	vmov	r8, r9, d0
 800c9ce:	4615      	mov	r5, r2
 800c9d0:	f7ff fd6a 	bl	800c4a8 <_Balloc>
 800c9d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c9d8:	4607      	mov	r7, r0
 800c9da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9de:	bb34      	cbnz	r4, 800ca2e <__d2b+0x6c>
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	f1b8 0300 	subs.w	r3, r8, #0
 800c9e6:	d027      	beq.n	800ca38 <__d2b+0x76>
 800c9e8:	a802      	add	r0, sp, #8
 800c9ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c9ee:	f7ff fe00 	bl	800c5f2 <__lo0bits>
 800c9f2:	9900      	ldr	r1, [sp, #0]
 800c9f4:	b1f0      	cbz	r0, 800ca34 <__d2b+0x72>
 800c9f6:	9a01      	ldr	r2, [sp, #4]
 800c9f8:	f1c0 0320 	rsb	r3, r0, #32
 800c9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ca00:	430b      	orrs	r3, r1
 800ca02:	40c2      	lsrs	r2, r0
 800ca04:	617b      	str	r3, [r7, #20]
 800ca06:	9201      	str	r2, [sp, #4]
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	61bb      	str	r3, [r7, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	bf14      	ite	ne
 800ca10:	2102      	movne	r1, #2
 800ca12:	2101      	moveq	r1, #1
 800ca14:	6139      	str	r1, [r7, #16]
 800ca16:	b1c4      	cbz	r4, 800ca4a <__d2b+0x88>
 800ca18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ca1c:	4404      	add	r4, r0
 800ca1e:	6034      	str	r4, [r6, #0]
 800ca20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca24:	6028      	str	r0, [r5, #0]
 800ca26:	4638      	mov	r0, r7
 800ca28:	b003      	add	sp, #12
 800ca2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca32:	e7d5      	b.n	800c9e0 <__d2b+0x1e>
 800ca34:	6179      	str	r1, [r7, #20]
 800ca36:	e7e7      	b.n	800ca08 <__d2b+0x46>
 800ca38:	a801      	add	r0, sp, #4
 800ca3a:	f7ff fdda 	bl	800c5f2 <__lo0bits>
 800ca3e:	9b01      	ldr	r3, [sp, #4]
 800ca40:	617b      	str	r3, [r7, #20]
 800ca42:	2101      	movs	r1, #1
 800ca44:	6139      	str	r1, [r7, #16]
 800ca46:	3020      	adds	r0, #32
 800ca48:	e7e5      	b.n	800ca16 <__d2b+0x54>
 800ca4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ca4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca52:	6030      	str	r0, [r6, #0]
 800ca54:	6918      	ldr	r0, [r3, #16]
 800ca56:	f7ff fdad 	bl	800c5b4 <__hi0bits>
 800ca5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ca5e:	e7e1      	b.n	800ca24 <__d2b+0x62>

0800ca60 <_calloc_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	fb02 f401 	mul.w	r4, r2, r1
 800ca66:	4621      	mov	r1, r4
 800ca68:	f000 f856 	bl	800cb18 <_malloc_r>
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	b118      	cbz	r0, 800ca78 <_calloc_r+0x18>
 800ca70:	4622      	mov	r2, r4
 800ca72:	2100      	movs	r1, #0
 800ca74:	f7fd ffcd 	bl	800aa12 <memset>
 800ca78:	4628      	mov	r0, r5
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}

0800ca7c <_free_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4605      	mov	r5, r0
 800ca80:	2900      	cmp	r1, #0
 800ca82:	d045      	beq.n	800cb10 <_free_r+0x94>
 800ca84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca88:	1f0c      	subs	r4, r1, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	bfb8      	it	lt
 800ca8e:	18e4      	addlt	r4, r4, r3
 800ca90:	f000 fa98 	bl	800cfc4 <__malloc_lock>
 800ca94:	4a1f      	ldr	r2, [pc, #124]	; (800cb14 <_free_r+0x98>)
 800ca96:	6813      	ldr	r3, [r2, #0]
 800ca98:	4610      	mov	r0, r2
 800ca9a:	b933      	cbnz	r3, 800caaa <_free_r+0x2e>
 800ca9c:	6063      	str	r3, [r4, #4]
 800ca9e:	6014      	str	r4, [r2, #0]
 800caa0:	4628      	mov	r0, r5
 800caa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa6:	f000 ba8e 	b.w	800cfc6 <__malloc_unlock>
 800caaa:	42a3      	cmp	r3, r4
 800caac:	d90c      	bls.n	800cac8 <_free_r+0x4c>
 800caae:	6821      	ldr	r1, [r4, #0]
 800cab0:	1862      	adds	r2, r4, r1
 800cab2:	4293      	cmp	r3, r2
 800cab4:	bf04      	itt	eq
 800cab6:	681a      	ldreq	r2, [r3, #0]
 800cab8:	685b      	ldreq	r3, [r3, #4]
 800caba:	6063      	str	r3, [r4, #4]
 800cabc:	bf04      	itt	eq
 800cabe:	1852      	addeq	r2, r2, r1
 800cac0:	6022      	streq	r2, [r4, #0]
 800cac2:	6004      	str	r4, [r0, #0]
 800cac4:	e7ec      	b.n	800caa0 <_free_r+0x24>
 800cac6:	4613      	mov	r3, r2
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	b10a      	cbz	r2, 800cad0 <_free_r+0x54>
 800cacc:	42a2      	cmp	r2, r4
 800cace:	d9fa      	bls.n	800cac6 <_free_r+0x4a>
 800cad0:	6819      	ldr	r1, [r3, #0]
 800cad2:	1858      	adds	r0, r3, r1
 800cad4:	42a0      	cmp	r0, r4
 800cad6:	d10b      	bne.n	800caf0 <_free_r+0x74>
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	4401      	add	r1, r0
 800cadc:	1858      	adds	r0, r3, r1
 800cade:	4282      	cmp	r2, r0
 800cae0:	6019      	str	r1, [r3, #0]
 800cae2:	d1dd      	bne.n	800caa0 <_free_r+0x24>
 800cae4:	6810      	ldr	r0, [r2, #0]
 800cae6:	6852      	ldr	r2, [r2, #4]
 800cae8:	605a      	str	r2, [r3, #4]
 800caea:	4401      	add	r1, r0
 800caec:	6019      	str	r1, [r3, #0]
 800caee:	e7d7      	b.n	800caa0 <_free_r+0x24>
 800caf0:	d902      	bls.n	800caf8 <_free_r+0x7c>
 800caf2:	230c      	movs	r3, #12
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	e7d3      	b.n	800caa0 <_free_r+0x24>
 800caf8:	6820      	ldr	r0, [r4, #0]
 800cafa:	1821      	adds	r1, r4, r0
 800cafc:	428a      	cmp	r2, r1
 800cafe:	bf04      	itt	eq
 800cb00:	6811      	ldreq	r1, [r2, #0]
 800cb02:	6852      	ldreq	r2, [r2, #4]
 800cb04:	6062      	str	r2, [r4, #4]
 800cb06:	bf04      	itt	eq
 800cb08:	1809      	addeq	r1, r1, r0
 800cb0a:	6021      	streq	r1, [r4, #0]
 800cb0c:	605c      	str	r4, [r3, #4]
 800cb0e:	e7c7      	b.n	800caa0 <_free_r+0x24>
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	20062730 	.word	0x20062730

0800cb18 <_malloc_r>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	1ccd      	adds	r5, r1, #3
 800cb1c:	f025 0503 	bic.w	r5, r5, #3
 800cb20:	3508      	adds	r5, #8
 800cb22:	2d0c      	cmp	r5, #12
 800cb24:	bf38      	it	cc
 800cb26:	250c      	movcc	r5, #12
 800cb28:	2d00      	cmp	r5, #0
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	db01      	blt.n	800cb32 <_malloc_r+0x1a>
 800cb2e:	42a9      	cmp	r1, r5
 800cb30:	d903      	bls.n	800cb3a <_malloc_r+0x22>
 800cb32:	230c      	movs	r3, #12
 800cb34:	6033      	str	r3, [r6, #0]
 800cb36:	2000      	movs	r0, #0
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	f000 fa43 	bl	800cfc4 <__malloc_lock>
 800cb3e:	4a21      	ldr	r2, [pc, #132]	; (800cbc4 <_malloc_r+0xac>)
 800cb40:	6814      	ldr	r4, [r2, #0]
 800cb42:	4621      	mov	r1, r4
 800cb44:	b991      	cbnz	r1, 800cb6c <_malloc_r+0x54>
 800cb46:	4c20      	ldr	r4, [pc, #128]	; (800cbc8 <_malloc_r+0xb0>)
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	b91b      	cbnz	r3, 800cb54 <_malloc_r+0x3c>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f000 f97d 	bl	800ce4c <_sbrk_r>
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	4629      	mov	r1, r5
 800cb56:	4630      	mov	r0, r6
 800cb58:	f000 f978 	bl	800ce4c <_sbrk_r>
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	d124      	bne.n	800cbaa <_malloc_r+0x92>
 800cb60:	230c      	movs	r3, #12
 800cb62:	6033      	str	r3, [r6, #0]
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 fa2e 	bl	800cfc6 <__malloc_unlock>
 800cb6a:	e7e4      	b.n	800cb36 <_malloc_r+0x1e>
 800cb6c:	680b      	ldr	r3, [r1, #0]
 800cb6e:	1b5b      	subs	r3, r3, r5
 800cb70:	d418      	bmi.n	800cba4 <_malloc_r+0x8c>
 800cb72:	2b0b      	cmp	r3, #11
 800cb74:	d90f      	bls.n	800cb96 <_malloc_r+0x7e>
 800cb76:	600b      	str	r3, [r1, #0]
 800cb78:	50cd      	str	r5, [r1, r3]
 800cb7a:	18cc      	adds	r4, r1, r3
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f000 fa22 	bl	800cfc6 <__malloc_unlock>
 800cb82:	f104 000b 	add.w	r0, r4, #11
 800cb86:	1d23      	adds	r3, r4, #4
 800cb88:	f020 0007 	bic.w	r0, r0, #7
 800cb8c:	1ac3      	subs	r3, r0, r3
 800cb8e:	d0d3      	beq.n	800cb38 <_malloc_r+0x20>
 800cb90:	425a      	negs	r2, r3
 800cb92:	50e2      	str	r2, [r4, r3]
 800cb94:	e7d0      	b.n	800cb38 <_malloc_r+0x20>
 800cb96:	428c      	cmp	r4, r1
 800cb98:	684b      	ldr	r3, [r1, #4]
 800cb9a:	bf16      	itet	ne
 800cb9c:	6063      	strne	r3, [r4, #4]
 800cb9e:	6013      	streq	r3, [r2, #0]
 800cba0:	460c      	movne	r4, r1
 800cba2:	e7eb      	b.n	800cb7c <_malloc_r+0x64>
 800cba4:	460c      	mov	r4, r1
 800cba6:	6849      	ldr	r1, [r1, #4]
 800cba8:	e7cc      	b.n	800cb44 <_malloc_r+0x2c>
 800cbaa:	1cc4      	adds	r4, r0, #3
 800cbac:	f024 0403 	bic.w	r4, r4, #3
 800cbb0:	42a0      	cmp	r0, r4
 800cbb2:	d005      	beq.n	800cbc0 <_malloc_r+0xa8>
 800cbb4:	1a21      	subs	r1, r4, r0
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f000 f948 	bl	800ce4c <_sbrk_r>
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d0cf      	beq.n	800cb60 <_malloc_r+0x48>
 800cbc0:	6025      	str	r5, [r4, #0]
 800cbc2:	e7db      	b.n	800cb7c <_malloc_r+0x64>
 800cbc4:	20062730 	.word	0x20062730
 800cbc8:	20062734 	.word	0x20062734

0800cbcc <__sfputc_r>:
 800cbcc:	6893      	ldr	r3, [r2, #8]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	b410      	push	{r4}
 800cbd4:	6093      	str	r3, [r2, #8]
 800cbd6:	da08      	bge.n	800cbea <__sfputc_r+0x1e>
 800cbd8:	6994      	ldr	r4, [r2, #24]
 800cbda:	42a3      	cmp	r3, r4
 800cbdc:	db01      	blt.n	800cbe2 <__sfputc_r+0x16>
 800cbde:	290a      	cmp	r1, #10
 800cbe0:	d103      	bne.n	800cbea <__sfputc_r+0x1e>
 800cbe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe6:	f7fe bbd3 	b.w	800b390 <__swbuf_r>
 800cbea:	6813      	ldr	r3, [r2, #0]
 800cbec:	1c58      	adds	r0, r3, #1
 800cbee:	6010      	str	r0, [r2, #0]
 800cbf0:	7019      	strb	r1, [r3, #0]
 800cbf2:	4608      	mov	r0, r1
 800cbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <__sfputs_r>:
 800cbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	460f      	mov	r7, r1
 800cc00:	4614      	mov	r4, r2
 800cc02:	18d5      	adds	r5, r2, r3
 800cc04:	42ac      	cmp	r4, r5
 800cc06:	d101      	bne.n	800cc0c <__sfputs_r+0x12>
 800cc08:	2000      	movs	r0, #0
 800cc0a:	e007      	b.n	800cc1c <__sfputs_r+0x22>
 800cc0c:	463a      	mov	r2, r7
 800cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7ff ffda 	bl	800cbcc <__sfputc_r>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d1f3      	bne.n	800cc04 <__sfputs_r+0xa>
 800cc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc20 <_vfiprintf_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	460c      	mov	r4, r1
 800cc26:	b09d      	sub	sp, #116	; 0x74
 800cc28:	4617      	mov	r7, r2
 800cc2a:	461d      	mov	r5, r3
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	b118      	cbz	r0, 800cc38 <_vfiprintf_r+0x18>
 800cc30:	6983      	ldr	r3, [r0, #24]
 800cc32:	b90b      	cbnz	r3, 800cc38 <_vfiprintf_r+0x18>
 800cc34:	f7ff fb34 	bl	800c2a0 <__sinit>
 800cc38:	4b7c      	ldr	r3, [pc, #496]	; (800ce2c <_vfiprintf_r+0x20c>)
 800cc3a:	429c      	cmp	r4, r3
 800cc3c:	d158      	bne.n	800ccf0 <_vfiprintf_r+0xd0>
 800cc3e:	6874      	ldr	r4, [r6, #4]
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	0718      	lsls	r0, r3, #28
 800cc44:	d55e      	bpl.n	800cd04 <_vfiprintf_r+0xe4>
 800cc46:	6923      	ldr	r3, [r4, #16]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d05b      	beq.n	800cd04 <_vfiprintf_r+0xe4>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc50:	2320      	movs	r3, #32
 800cc52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc56:	2330      	movs	r3, #48	; 0x30
 800cc58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc5c:	9503      	str	r5, [sp, #12]
 800cc5e:	f04f 0b01 	mov.w	fp, #1
 800cc62:	46b8      	mov	r8, r7
 800cc64:	4645      	mov	r5, r8
 800cc66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc6a:	b10b      	cbz	r3, 800cc70 <_vfiprintf_r+0x50>
 800cc6c:	2b25      	cmp	r3, #37	; 0x25
 800cc6e:	d154      	bne.n	800cd1a <_vfiprintf_r+0xfa>
 800cc70:	ebb8 0a07 	subs.w	sl, r8, r7
 800cc74:	d00b      	beq.n	800cc8e <_vfiprintf_r+0x6e>
 800cc76:	4653      	mov	r3, sl
 800cc78:	463a      	mov	r2, r7
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f7ff ffbc 	bl	800cbfa <__sfputs_r>
 800cc82:	3001      	adds	r0, #1
 800cc84:	f000 80c2 	beq.w	800ce0c <_vfiprintf_r+0x1ec>
 800cc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8a:	4453      	add	r3, sl
 800cc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8e:	f898 3000 	ldrb.w	r3, [r8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 80ba 	beq.w	800ce0c <_vfiprintf_r+0x1ec>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca2:	9304      	str	r3, [sp, #16]
 800cca4:	9307      	str	r3, [sp, #28]
 800cca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccaa:	931a      	str	r3, [sp, #104]	; 0x68
 800ccac:	46a8      	mov	r8, r5
 800ccae:	2205      	movs	r2, #5
 800ccb0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ccb4:	485e      	ldr	r0, [pc, #376]	; (800ce30 <_vfiprintf_r+0x210>)
 800ccb6:	f7f3 facb 	bl	8000250 <memchr>
 800ccba:	9b04      	ldr	r3, [sp, #16]
 800ccbc:	bb78      	cbnz	r0, 800cd1e <_vfiprintf_r+0xfe>
 800ccbe:	06d9      	lsls	r1, r3, #27
 800ccc0:	bf44      	itt	mi
 800ccc2:	2220      	movmi	r2, #32
 800ccc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccc8:	071a      	lsls	r2, r3, #28
 800ccca:	bf44      	itt	mi
 800cccc:	222b      	movmi	r2, #43	; 0x2b
 800ccce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccd2:	782a      	ldrb	r2, [r5, #0]
 800ccd4:	2a2a      	cmp	r2, #42	; 0x2a
 800ccd6:	d02a      	beq.n	800cd2e <_vfiprintf_r+0x10e>
 800ccd8:	9a07      	ldr	r2, [sp, #28]
 800ccda:	46a8      	mov	r8, r5
 800ccdc:	2000      	movs	r0, #0
 800ccde:	250a      	movs	r5, #10
 800cce0:	4641      	mov	r1, r8
 800cce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cce6:	3b30      	subs	r3, #48	; 0x30
 800cce8:	2b09      	cmp	r3, #9
 800ccea:	d969      	bls.n	800cdc0 <_vfiprintf_r+0x1a0>
 800ccec:	b360      	cbz	r0, 800cd48 <_vfiprintf_r+0x128>
 800ccee:	e024      	b.n	800cd3a <_vfiprintf_r+0x11a>
 800ccf0:	4b50      	ldr	r3, [pc, #320]	; (800ce34 <_vfiprintf_r+0x214>)
 800ccf2:	429c      	cmp	r4, r3
 800ccf4:	d101      	bne.n	800ccfa <_vfiprintf_r+0xda>
 800ccf6:	68b4      	ldr	r4, [r6, #8]
 800ccf8:	e7a2      	b.n	800cc40 <_vfiprintf_r+0x20>
 800ccfa:	4b4f      	ldr	r3, [pc, #316]	; (800ce38 <_vfiprintf_r+0x218>)
 800ccfc:	429c      	cmp	r4, r3
 800ccfe:	bf08      	it	eq
 800cd00:	68f4      	ldreq	r4, [r6, #12]
 800cd02:	e79d      	b.n	800cc40 <_vfiprintf_r+0x20>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4630      	mov	r0, r6
 800cd08:	f7fe fb94 	bl	800b434 <__swsetup_r>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d09d      	beq.n	800cc4c <_vfiprintf_r+0x2c>
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	b01d      	add	sp, #116	; 0x74
 800cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1a:	46a8      	mov	r8, r5
 800cd1c:	e7a2      	b.n	800cc64 <_vfiprintf_r+0x44>
 800cd1e:	4a44      	ldr	r2, [pc, #272]	; (800ce30 <_vfiprintf_r+0x210>)
 800cd20:	1a80      	subs	r0, r0, r2
 800cd22:	fa0b f000 	lsl.w	r0, fp, r0
 800cd26:	4318      	orrs	r0, r3
 800cd28:	9004      	str	r0, [sp, #16]
 800cd2a:	4645      	mov	r5, r8
 800cd2c:	e7be      	b.n	800ccac <_vfiprintf_r+0x8c>
 800cd2e:	9a03      	ldr	r2, [sp, #12]
 800cd30:	1d11      	adds	r1, r2, #4
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	9103      	str	r1, [sp, #12]
 800cd36:	2a00      	cmp	r2, #0
 800cd38:	db01      	blt.n	800cd3e <_vfiprintf_r+0x11e>
 800cd3a:	9207      	str	r2, [sp, #28]
 800cd3c:	e004      	b.n	800cd48 <_vfiprintf_r+0x128>
 800cd3e:	4252      	negs	r2, r2
 800cd40:	f043 0302 	orr.w	r3, r3, #2
 800cd44:	9207      	str	r2, [sp, #28]
 800cd46:	9304      	str	r3, [sp, #16]
 800cd48:	f898 3000 	ldrb.w	r3, [r8]
 800cd4c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd4e:	d10e      	bne.n	800cd6e <_vfiprintf_r+0x14e>
 800cd50:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cd54:	2b2a      	cmp	r3, #42	; 0x2a
 800cd56:	d138      	bne.n	800cdca <_vfiprintf_r+0x1aa>
 800cd58:	9b03      	ldr	r3, [sp, #12]
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	9203      	str	r2, [sp, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bfb8      	it	lt
 800cd64:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd68:	f108 0802 	add.w	r8, r8, #2
 800cd6c:	9305      	str	r3, [sp, #20]
 800cd6e:	4d33      	ldr	r5, [pc, #204]	; (800ce3c <_vfiprintf_r+0x21c>)
 800cd70:	f898 1000 	ldrb.w	r1, [r8]
 800cd74:	2203      	movs	r2, #3
 800cd76:	4628      	mov	r0, r5
 800cd78:	f7f3 fa6a 	bl	8000250 <memchr>
 800cd7c:	b140      	cbz	r0, 800cd90 <_vfiprintf_r+0x170>
 800cd7e:	2340      	movs	r3, #64	; 0x40
 800cd80:	1b40      	subs	r0, r0, r5
 800cd82:	fa03 f000 	lsl.w	r0, r3, r0
 800cd86:	9b04      	ldr	r3, [sp, #16]
 800cd88:	4303      	orrs	r3, r0
 800cd8a:	f108 0801 	add.w	r8, r8, #1
 800cd8e:	9304      	str	r3, [sp, #16]
 800cd90:	f898 1000 	ldrb.w	r1, [r8]
 800cd94:	482a      	ldr	r0, [pc, #168]	; (800ce40 <_vfiprintf_r+0x220>)
 800cd96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd9a:	2206      	movs	r2, #6
 800cd9c:	f108 0701 	add.w	r7, r8, #1
 800cda0:	f7f3 fa56 	bl	8000250 <memchr>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d037      	beq.n	800ce18 <_vfiprintf_r+0x1f8>
 800cda8:	4b26      	ldr	r3, [pc, #152]	; (800ce44 <_vfiprintf_r+0x224>)
 800cdaa:	bb1b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x1d4>
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	3307      	adds	r3, #7
 800cdb0:	f023 0307 	bic.w	r3, r3, #7
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	9303      	str	r3, [sp, #12]
 800cdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdba:	444b      	add	r3, r9
 800cdbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdbe:	e750      	b.n	800cc62 <_vfiprintf_r+0x42>
 800cdc0:	fb05 3202 	mla	r2, r5, r2, r3
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	4688      	mov	r8, r1
 800cdc8:	e78a      	b.n	800cce0 <_vfiprintf_r+0xc0>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f108 0801 	add.w	r8, r8, #1
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	250a      	movs	r5, #10
 800cdd6:	4640      	mov	r0, r8
 800cdd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cddc:	3a30      	subs	r2, #48	; 0x30
 800cdde:	2a09      	cmp	r2, #9
 800cde0:	d903      	bls.n	800cdea <_vfiprintf_r+0x1ca>
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0c3      	beq.n	800cd6e <_vfiprintf_r+0x14e>
 800cde6:	9105      	str	r1, [sp, #20]
 800cde8:	e7c1      	b.n	800cd6e <_vfiprintf_r+0x14e>
 800cdea:	fb05 2101 	mla	r1, r5, r1, r2
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4680      	mov	r8, r0
 800cdf2:	e7f0      	b.n	800cdd6 <_vfiprintf_r+0x1b6>
 800cdf4:	ab03      	add	r3, sp, #12
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <_vfiprintf_r+0x228>)
 800cdfc:	a904      	add	r1, sp, #16
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f7fd fe96 	bl	800ab30 <_printf_float>
 800ce04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce08:	4681      	mov	r9, r0
 800ce0a:	d1d5      	bne.n	800cdb8 <_vfiprintf_r+0x198>
 800ce0c:	89a3      	ldrh	r3, [r4, #12]
 800ce0e:	065b      	lsls	r3, r3, #25
 800ce10:	f53f af7e 	bmi.w	800cd10 <_vfiprintf_r+0xf0>
 800ce14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce16:	e77d      	b.n	800cd14 <_vfiprintf_r+0xf4>
 800ce18:	ab03      	add	r3, sp, #12
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	; (800ce48 <_vfiprintf_r+0x228>)
 800ce20:	a904      	add	r1, sp, #16
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7fe f926 	bl	800b074 <_printf_i>
 800ce28:	e7ec      	b.n	800ce04 <_vfiprintf_r+0x1e4>
 800ce2a:	bf00      	nop
 800ce2c:	0800e250 	.word	0x0800e250
 800ce30:	0800e38c 	.word	0x0800e38c
 800ce34:	0800e270 	.word	0x0800e270
 800ce38:	0800e230 	.word	0x0800e230
 800ce3c:	0800e392 	.word	0x0800e392
 800ce40:	0800e396 	.word	0x0800e396
 800ce44:	0800ab31 	.word	0x0800ab31
 800ce48:	0800cbfb 	.word	0x0800cbfb

0800ce4c <_sbrk_r>:
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	4c06      	ldr	r4, [pc, #24]	; (800ce68 <_sbrk_r+0x1c>)
 800ce50:	2300      	movs	r3, #0
 800ce52:	4605      	mov	r5, r0
 800ce54:	4608      	mov	r0, r1
 800ce56:	6023      	str	r3, [r4, #0]
 800ce58:	f7f9 f98c 	bl	8006174 <_sbrk>
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	d102      	bne.n	800ce66 <_sbrk_r+0x1a>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	b103      	cbz	r3, 800ce66 <_sbrk_r+0x1a>
 800ce64:	602b      	str	r3, [r5, #0]
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	20062e58 	.word	0x20062e58

0800ce6c <__sread>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce74:	f000 f8a8 	bl	800cfc8 <_read_r>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	bfab      	itete	ge
 800ce7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce80:	181b      	addge	r3, r3, r0
 800ce82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce86:	bfac      	ite	ge
 800ce88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce8a:	81a3      	strhlt	r3, [r4, #12]
 800ce8c:	bd10      	pop	{r4, pc}

0800ce8e <__swrite>:
 800ce8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce92:	461f      	mov	r7, r3
 800ce94:	898b      	ldrh	r3, [r1, #12]
 800ce96:	05db      	lsls	r3, r3, #23
 800ce98:	4605      	mov	r5, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	d505      	bpl.n	800ceac <__swrite+0x1e>
 800cea0:	2302      	movs	r3, #2
 800cea2:	2200      	movs	r2, #0
 800cea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea8:	f000 f868 	bl	800cf7c <_lseek_r>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	4632      	mov	r2, r6
 800ceba:	463b      	mov	r3, r7
 800cebc:	4628      	mov	r0, r5
 800cebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	f000 b817 	b.w	800cef4 <_write_r>

0800cec6 <__sseek>:
 800cec6:	b510      	push	{r4, lr}
 800cec8:	460c      	mov	r4, r1
 800ceca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cece:	f000 f855 	bl	800cf7c <_lseek_r>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	bf15      	itete	ne
 800ced8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cee2:	81a3      	strheq	r3, [r4, #12]
 800cee4:	bf18      	it	ne
 800cee6:	81a3      	strhne	r3, [r4, #12]
 800cee8:	bd10      	pop	{r4, pc}

0800ceea <__sclose>:
 800ceea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceee:	f000 b813 	b.w	800cf18 <_close_r>
	...

0800cef4 <_write_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4c07      	ldr	r4, [pc, #28]	; (800cf14 <_write_r+0x20>)
 800cef8:	4605      	mov	r5, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	4611      	mov	r1, r2
 800cefe:	2200      	movs	r2, #0
 800cf00:	6022      	str	r2, [r4, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f7f9 f8e5 	bl	80060d2 <_write>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_write_r+0x1e>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_write_r+0x1e>
 800cf10:	602b      	str	r3, [r5, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	20062e58 	.word	0x20062e58

0800cf18 <_close_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4c06      	ldr	r4, [pc, #24]	; (800cf34 <_close_r+0x1c>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4605      	mov	r5, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	f7f9 f8f1 	bl	800610a <_close>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_close_r+0x1a>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_close_r+0x1a>
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	20062e58 	.word	0x20062e58

0800cf38 <_fstat_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4c07      	ldr	r4, [pc, #28]	; (800cf58 <_fstat_r+0x20>)
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4605      	mov	r5, r0
 800cf40:	4608      	mov	r0, r1
 800cf42:	4611      	mov	r1, r2
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	f7f9 f8ec 	bl	8006122 <_fstat>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	d102      	bne.n	800cf54 <_fstat_r+0x1c>
 800cf4e:	6823      	ldr	r3, [r4, #0]
 800cf50:	b103      	cbz	r3, 800cf54 <_fstat_r+0x1c>
 800cf52:	602b      	str	r3, [r5, #0]
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	bf00      	nop
 800cf58:	20062e58 	.word	0x20062e58

0800cf5c <_isatty_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4c06      	ldr	r4, [pc, #24]	; (800cf78 <_isatty_r+0x1c>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	4605      	mov	r5, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	6023      	str	r3, [r4, #0]
 800cf68:	f7f9 f8eb 	bl	8006142 <_isatty>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d102      	bne.n	800cf76 <_isatty_r+0x1a>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	b103      	cbz	r3, 800cf76 <_isatty_r+0x1a>
 800cf74:	602b      	str	r3, [r5, #0]
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	20062e58 	.word	0x20062e58

0800cf7c <_lseek_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4c07      	ldr	r4, [pc, #28]	; (800cf9c <_lseek_r+0x20>)
 800cf80:	4605      	mov	r5, r0
 800cf82:	4608      	mov	r0, r1
 800cf84:	4611      	mov	r1, r2
 800cf86:	2200      	movs	r2, #0
 800cf88:	6022      	str	r2, [r4, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f7f9 f8e4 	bl	8006158 <_lseek>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d102      	bne.n	800cf9a <_lseek_r+0x1e>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	b103      	cbz	r3, 800cf9a <_lseek_r+0x1e>
 800cf98:	602b      	str	r3, [r5, #0]
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	20062e58 	.word	0x20062e58

0800cfa0 <__ascii_mbtowc>:
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	b901      	cbnz	r1, 800cfa6 <__ascii_mbtowc+0x6>
 800cfa4:	a901      	add	r1, sp, #4
 800cfa6:	b142      	cbz	r2, 800cfba <__ascii_mbtowc+0x1a>
 800cfa8:	b14b      	cbz	r3, 800cfbe <__ascii_mbtowc+0x1e>
 800cfaa:	7813      	ldrb	r3, [r2, #0]
 800cfac:	600b      	str	r3, [r1, #0]
 800cfae:	7812      	ldrb	r2, [r2, #0]
 800cfb0:	1c10      	adds	r0, r2, #0
 800cfb2:	bf18      	it	ne
 800cfb4:	2001      	movne	r0, #1
 800cfb6:	b002      	add	sp, #8
 800cfb8:	4770      	bx	lr
 800cfba:	4610      	mov	r0, r2
 800cfbc:	e7fb      	b.n	800cfb6 <__ascii_mbtowc+0x16>
 800cfbe:	f06f 0001 	mvn.w	r0, #1
 800cfc2:	e7f8      	b.n	800cfb6 <__ascii_mbtowc+0x16>

0800cfc4 <__malloc_lock>:
 800cfc4:	4770      	bx	lr

0800cfc6 <__malloc_unlock>:
 800cfc6:	4770      	bx	lr

0800cfc8 <_read_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4c07      	ldr	r4, [pc, #28]	; (800cfe8 <_read_r+0x20>)
 800cfcc:	4605      	mov	r5, r0
 800cfce:	4608      	mov	r0, r1
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	6022      	str	r2, [r4, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f7f9 f85e 	bl	8006098 <_read>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_read_r+0x1e>
 800cfe0:	6823      	ldr	r3, [r4, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_read_r+0x1e>
 800cfe4:	602b      	str	r3, [r5, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20062e58 	.word	0x20062e58

0800cfec <__ascii_wctomb>:
 800cfec:	b149      	cbz	r1, 800d002 <__ascii_wctomb+0x16>
 800cfee:	2aff      	cmp	r2, #255	; 0xff
 800cff0:	bf85      	ittet	hi
 800cff2:	238a      	movhi	r3, #138	; 0x8a
 800cff4:	6003      	strhi	r3, [r0, #0]
 800cff6:	700a      	strbls	r2, [r1, #0]
 800cff8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cffc:	bf98      	it	ls
 800cffe:	2001      	movls	r0, #1
 800d000:	4770      	bx	lr
 800d002:	4608      	mov	r0, r1
 800d004:	4770      	bx	lr
	...

0800d008 <cos>:
 800d008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d00a:	eeb0 7b40 	vmov.f64	d7, d0
 800d00e:	ee17 3a90 	vmov	r3, s15
 800d012:	4a19      	ldr	r2, [pc, #100]	; (800d078 <cos+0x70>)
 800d014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d018:	4293      	cmp	r3, r2
 800d01a:	dc04      	bgt.n	800d026 <cos+0x1e>
 800d01c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d070 <cos+0x68>
 800d020:	f000 fa56 	bl	800d4d0 <__kernel_cos>
 800d024:	e004      	b.n	800d030 <cos+0x28>
 800d026:	4a15      	ldr	r2, [pc, #84]	; (800d07c <cos+0x74>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	dd04      	ble.n	800d036 <cos+0x2e>
 800d02c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d030:	b005      	add	sp, #20
 800d032:	f85d fb04 	ldr.w	pc, [sp], #4
 800d036:	4668      	mov	r0, sp
 800d038:	f000 f862 	bl	800d100 <__ieee754_rem_pio2>
 800d03c:	f000 0003 	and.w	r0, r0, #3
 800d040:	2801      	cmp	r0, #1
 800d042:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d046:	ed9d 0b00 	vldr	d0, [sp]
 800d04a:	d007      	beq.n	800d05c <cos+0x54>
 800d04c:	2802      	cmp	r0, #2
 800d04e:	d00a      	beq.n	800d066 <cos+0x5e>
 800d050:	2800      	cmp	r0, #0
 800d052:	d0e5      	beq.n	800d020 <cos+0x18>
 800d054:	2001      	movs	r0, #1
 800d056:	f000 fd43 	bl	800dae0 <__kernel_sin>
 800d05a:	e7e9      	b.n	800d030 <cos+0x28>
 800d05c:	f000 fd40 	bl	800dae0 <__kernel_sin>
 800d060:	eeb1 0b40 	vneg.f64	d0, d0
 800d064:	e7e4      	b.n	800d030 <cos+0x28>
 800d066:	f000 fa33 	bl	800d4d0 <__kernel_cos>
 800d06a:	e7f9      	b.n	800d060 <cos+0x58>
 800d06c:	f3af 8000 	nop.w
	...
 800d078:	3fe921fb 	.word	0x3fe921fb
 800d07c:	7fefffff 	.word	0x7fefffff

0800d080 <sin>:
 800d080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d082:	eeb0 7b40 	vmov.f64	d7, d0
 800d086:	ee17 3a90 	vmov	r3, s15
 800d08a:	4a19      	ldr	r2, [pc, #100]	; (800d0f0 <sin+0x70>)
 800d08c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d090:	4293      	cmp	r3, r2
 800d092:	dc05      	bgt.n	800d0a0 <sin+0x20>
 800d094:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d0e8 <sin+0x68>
 800d098:	2000      	movs	r0, #0
 800d09a:	f000 fd21 	bl	800dae0 <__kernel_sin>
 800d09e:	e004      	b.n	800d0aa <sin+0x2a>
 800d0a0:	4a14      	ldr	r2, [pc, #80]	; (800d0f4 <sin+0x74>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	dd04      	ble.n	800d0b0 <sin+0x30>
 800d0a6:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d0aa:	b005      	add	sp, #20
 800d0ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0b0:	4668      	mov	r0, sp
 800d0b2:	f000 f825 	bl	800d100 <__ieee754_rem_pio2>
 800d0b6:	f000 0003 	and.w	r0, r0, #3
 800d0ba:	2801      	cmp	r0, #1
 800d0bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0c0:	ed9d 0b00 	vldr	d0, [sp]
 800d0c4:	d004      	beq.n	800d0d0 <sin+0x50>
 800d0c6:	2802      	cmp	r0, #2
 800d0c8:	d005      	beq.n	800d0d6 <sin+0x56>
 800d0ca:	b950      	cbnz	r0, 800d0e2 <sin+0x62>
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	e7e4      	b.n	800d09a <sin+0x1a>
 800d0d0:	f000 f9fe 	bl	800d4d0 <__kernel_cos>
 800d0d4:	e7e9      	b.n	800d0aa <sin+0x2a>
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	f000 fd02 	bl	800dae0 <__kernel_sin>
 800d0dc:	eeb1 0b40 	vneg.f64	d0, d0
 800d0e0:	e7e3      	b.n	800d0aa <sin+0x2a>
 800d0e2:	f000 f9f5 	bl	800d4d0 <__kernel_cos>
 800d0e6:	e7f9      	b.n	800d0dc <sin+0x5c>
	...
 800d0f0:	3fe921fb 	.word	0x3fe921fb
 800d0f4:	7fefffff 	.word	0x7fefffff

0800d0f8 <atan2f>:
 800d0f8:	f000 b93e 	b.w	800d378 <__ieee754_atan2f>
 800d0fc:	0000      	movs	r0, r0
	...

0800d100 <__ieee754_rem_pio2>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	eeb0 7b40 	vmov.f64	d7, d0
 800d106:	ee17 5a90 	vmov	r5, s15
 800d10a:	4b95      	ldr	r3, [pc, #596]	; (800d360 <__ieee754_rem_pio2+0x260>)
 800d10c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d110:	429e      	cmp	r6, r3
 800d112:	b088      	sub	sp, #32
 800d114:	4604      	mov	r4, r0
 800d116:	dc07      	bgt.n	800d128 <__ieee754_rem_pio2+0x28>
 800d118:	2200      	movs	r2, #0
 800d11a:	2300      	movs	r3, #0
 800d11c:	ed84 0b00 	vstr	d0, [r4]
 800d120:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d124:	2000      	movs	r0, #0
 800d126:	e01b      	b.n	800d160 <__ieee754_rem_pio2+0x60>
 800d128:	4b8e      	ldr	r3, [pc, #568]	; (800d364 <__ieee754_rem_pio2+0x264>)
 800d12a:	429e      	cmp	r6, r3
 800d12c:	dc3b      	bgt.n	800d1a6 <__ieee754_rem_pio2+0xa6>
 800d12e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d132:	2d00      	cmp	r5, #0
 800d134:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d320 <__ieee754_rem_pio2+0x220>
 800d138:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d13c:	dd19      	ble.n	800d172 <__ieee754_rem_pio2+0x72>
 800d13e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d142:	429e      	cmp	r6, r3
 800d144:	d00e      	beq.n	800d164 <__ieee754_rem_pio2+0x64>
 800d146:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d328 <__ieee754_rem_pio2+0x228>
 800d14a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d14e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d152:	ed84 5b00 	vstr	d5, [r4]
 800d156:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d15a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d15e:	2001      	movs	r0, #1
 800d160:	b008      	add	sp, #32
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d330 <__ieee754_rem_pio2+0x230>
 800d168:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d16c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d338 <__ieee754_rem_pio2+0x238>
 800d170:	e7eb      	b.n	800d14a <__ieee754_rem_pio2+0x4a>
 800d172:	429e      	cmp	r6, r3
 800d174:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d178:	d00e      	beq.n	800d198 <__ieee754_rem_pio2+0x98>
 800d17a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d328 <__ieee754_rem_pio2+0x228>
 800d17e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d182:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d186:	ed84 5b00 	vstr	d5, [r4]
 800d18a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295
 800d192:	ed84 7b02 	vstr	d7, [r4, #8]
 800d196:	e7e3      	b.n	800d160 <__ieee754_rem_pio2+0x60>
 800d198:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d330 <__ieee754_rem_pio2+0x230>
 800d19c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d1a0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d338 <__ieee754_rem_pio2+0x238>
 800d1a4:	e7eb      	b.n	800d17e <__ieee754_rem_pio2+0x7e>
 800d1a6:	4b70      	ldr	r3, [pc, #448]	; (800d368 <__ieee754_rem_pio2+0x268>)
 800d1a8:	429e      	cmp	r6, r3
 800d1aa:	dc6c      	bgt.n	800d286 <__ieee754_rem_pio2+0x186>
 800d1ac:	f000 fcf0 	bl	800db90 <fabs>
 800d1b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d1b4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d340 <__ieee754_rem_pio2+0x240>
 800d1b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d1bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d1c0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d1c4:	ee17 0a90 	vmov	r0, s15
 800d1c8:	eeb1 5b44 	vneg.f64	d5, d4
 800d1cc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d320 <__ieee754_rem_pio2+0x220>
 800d1d0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d1d4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d328 <__ieee754_rem_pio2+0x228>
 800d1d8:	281f      	cmp	r0, #31
 800d1da:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d1de:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d1e2:	dc08      	bgt.n	800d1f6 <__ieee754_rem_pio2+0xf6>
 800d1e4:	1e42      	subs	r2, r0, #1
 800d1e6:	4b61      	ldr	r3, [pc, #388]	; (800d36c <__ieee754_rem_pio2+0x26c>)
 800d1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ec:	42b3      	cmp	r3, r6
 800d1ee:	d002      	beq.n	800d1f6 <__ieee754_rem_pio2+0xf6>
 800d1f0:	ed84 6b00 	vstr	d6, [r4]
 800d1f4:	e022      	b.n	800d23c <__ieee754_rem_pio2+0x13c>
 800d1f6:	ee16 3a90 	vmov	r3, s13
 800d1fa:	1536      	asrs	r6, r6, #20
 800d1fc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d200:	1af3      	subs	r3, r6, r3
 800d202:	2b10      	cmp	r3, #16
 800d204:	ddf4      	ble.n	800d1f0 <__ieee754_rem_pio2+0xf0>
 800d206:	eeb0 6b40 	vmov.f64	d6, d0
 800d20a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d330 <__ieee754_rem_pio2+0x230>
 800d20e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d212:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d216:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d21a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d338 <__ieee754_rem_pio2+0x238>
 800d21e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d222:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d226:	ee13 3a90 	vmov	r3, s7
 800d22a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d22e:	1af6      	subs	r6, r6, r3
 800d230:	2e31      	cmp	r6, #49	; 0x31
 800d232:	dc17      	bgt.n	800d264 <__ieee754_rem_pio2+0x164>
 800d234:	eeb0 0b46 	vmov.f64	d0, d6
 800d238:	ed84 3b00 	vstr	d3, [r4]
 800d23c:	ed94 6b00 	vldr	d6, [r4]
 800d240:	2d00      	cmp	r5, #0
 800d242:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d246:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d24a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d24e:	da87      	bge.n	800d160 <__ieee754_rem_pio2+0x60>
 800d250:	eeb1 6b46 	vneg.f64	d6, d6
 800d254:	ed84 6b00 	vstr	d6, [r4]
 800d258:	eeb1 7b47 	vneg.f64	d7, d7
 800d25c:	4240      	negs	r0, r0
 800d25e:	ed84 7b02 	vstr	d7, [r4, #8]
 800d262:	e77d      	b.n	800d160 <__ieee754_rem_pio2+0x60>
 800d264:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d348 <__ieee754_rem_pio2+0x248>
 800d268:	eeb0 0b46 	vmov.f64	d0, d6
 800d26c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d270:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d274:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d350 <__ieee754_rem_pio2+0x250>
 800d278:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d27c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d280:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d284:	e7b4      	b.n	800d1f0 <__ieee754_rem_pio2+0xf0>
 800d286:	4b3a      	ldr	r3, [pc, #232]	; (800d370 <__ieee754_rem_pio2+0x270>)
 800d288:	429e      	cmp	r6, r3
 800d28a:	dd06      	ble.n	800d29a <__ieee754_rem_pio2+0x19a>
 800d28c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d290:	ed80 7b02 	vstr	d7, [r0, #8]
 800d294:	ed80 7b00 	vstr	d7, [r0]
 800d298:	e744      	b.n	800d124 <__ieee754_rem_pio2+0x24>
 800d29a:	1532      	asrs	r2, r6, #20
 800d29c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d2a0:	ee10 0a10 	vmov	r0, s0
 800d2a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d2a8:	ec41 0b17 	vmov	d7, r0, r1
 800d2ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d2b0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d358 <__ieee754_rem_pio2+0x258>
 800d2b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d2b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d2c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d2c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d2c8:	a908      	add	r1, sp, #32
 800d2ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d2ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d2d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d2da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2de:	2303      	movs	r3, #3
 800d2e0:	ed31 7b02 	vldmdb	r1!, {d7}
 800d2e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ec:	f103 30ff 	add.w	r0, r3, #4294967295
 800d2f0:	d013      	beq.n	800d31a <__ieee754_rem_pio2+0x21a>
 800d2f2:	4920      	ldr	r1, [pc, #128]	; (800d374 <__ieee754_rem_pio2+0x274>)
 800d2f4:	9101      	str	r1, [sp, #4]
 800d2f6:	2102      	movs	r1, #2
 800d2f8:	9100      	str	r1, [sp, #0]
 800d2fa:	a802      	add	r0, sp, #8
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	f000 f953 	bl	800d5a8 <__kernel_rem_pio2>
 800d302:	2d00      	cmp	r5, #0
 800d304:	f6bf af2c 	bge.w	800d160 <__ieee754_rem_pio2+0x60>
 800d308:	ed94 7b00 	vldr	d7, [r4]
 800d30c:	eeb1 7b47 	vneg.f64	d7, d7
 800d310:	ed84 7b00 	vstr	d7, [r4]
 800d314:	ed94 7b02 	vldr	d7, [r4, #8]
 800d318:	e79e      	b.n	800d258 <__ieee754_rem_pio2+0x158>
 800d31a:	4603      	mov	r3, r0
 800d31c:	e7e0      	b.n	800d2e0 <__ieee754_rem_pio2+0x1e0>
 800d31e:	bf00      	nop
 800d320:	54400000 	.word	0x54400000
 800d324:	3ff921fb 	.word	0x3ff921fb
 800d328:	1a626331 	.word	0x1a626331
 800d32c:	3dd0b461 	.word	0x3dd0b461
 800d330:	1a600000 	.word	0x1a600000
 800d334:	3dd0b461 	.word	0x3dd0b461
 800d338:	2e037073 	.word	0x2e037073
 800d33c:	3ba3198a 	.word	0x3ba3198a
 800d340:	6dc9c883 	.word	0x6dc9c883
 800d344:	3fe45f30 	.word	0x3fe45f30
 800d348:	2e000000 	.word	0x2e000000
 800d34c:	3ba3198a 	.word	0x3ba3198a
 800d350:	252049c1 	.word	0x252049c1
 800d354:	397b839a 	.word	0x397b839a
 800d358:	00000000 	.word	0x00000000
 800d35c:	41700000 	.word	0x41700000
 800d360:	3fe921fb 	.word	0x3fe921fb
 800d364:	4002d97b 	.word	0x4002d97b
 800d368:	413921fb 	.word	0x413921fb
 800d36c:	0800e4a8 	.word	0x0800e4a8
 800d370:	7fefffff 	.word	0x7fefffff
 800d374:	0800e528 	.word	0x0800e528

0800d378 <__ieee754_atan2f>:
 800d378:	ee10 2a90 	vmov	r2, s1
 800d37c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d380:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d384:	b510      	push	{r4, lr}
 800d386:	eef0 7a40 	vmov.f32	s15, s0
 800d38a:	dc06      	bgt.n	800d39a <__ieee754_atan2f+0x22>
 800d38c:	ee10 0a10 	vmov	r0, s0
 800d390:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d394:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d398:	dd04      	ble.n	800d3a4 <__ieee754_atan2f+0x2c>
 800d39a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d39e:	eeb0 0a67 	vmov.f32	s0, s15
 800d3a2:	bd10      	pop	{r4, pc}
 800d3a4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d3a8:	d103      	bne.n	800d3b2 <__ieee754_atan2f+0x3a>
 800d3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3ae:	f000 bcf1 	b.w	800dd94 <atanf>
 800d3b2:	1794      	asrs	r4, r2, #30
 800d3b4:	f004 0402 	and.w	r4, r4, #2
 800d3b8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d3bc:	b93b      	cbnz	r3, 800d3ce <__ieee754_atan2f+0x56>
 800d3be:	2c02      	cmp	r4, #2
 800d3c0:	d06b      	beq.n	800d49a <__ieee754_atan2f+0x122>
 800d3c2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d4a0 <__ieee754_atan2f+0x128>
 800d3c6:	2c03      	cmp	r4, #3
 800d3c8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800d3cc:	e7e7      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d3ce:	b939      	cbnz	r1, 800d3e0 <__ieee754_atan2f+0x68>
 800d3d0:	eddf 7a34 	vldr	s15, [pc, #208]	; 800d4a4 <__ieee754_atan2f+0x12c>
 800d3d4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d4a8 <__ieee754_atan2f+0x130>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d3de:	e7de      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d3e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d3e4:	d121      	bne.n	800d42a <__ieee754_atan2f+0xb2>
 800d3e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3ea:	d111      	bne.n	800d410 <__ieee754_atan2f+0x98>
 800d3ec:	2c02      	cmp	r4, #2
 800d3ee:	d009      	beq.n	800d404 <__ieee754_atan2f+0x8c>
 800d3f0:	2c03      	cmp	r4, #3
 800d3f2:	d00a      	beq.n	800d40a <__ieee754_atan2f+0x92>
 800d3f4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d4ac <__ieee754_atan2f+0x134>
 800d3f8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800d4b0 <__ieee754_atan2f+0x138>
 800d3fc:	2c01      	cmp	r4, #1
 800d3fe:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800d402:	e7cc      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d404:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d4b4 <__ieee754_atan2f+0x13c>
 800d408:	e7c9      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d40a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d4b8 <__ieee754_atan2f+0x140>
 800d40e:	e7c6      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d410:	2c02      	cmp	r4, #2
 800d412:	d042      	beq.n	800d49a <__ieee754_atan2f+0x122>
 800d414:	2c03      	cmp	r4, #3
 800d416:	d005      	beq.n	800d424 <__ieee754_atan2f+0xac>
 800d418:	2c01      	cmp	r4, #1
 800d41a:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d4bc <__ieee754_atan2f+0x144>
 800d41e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d4c0 <__ieee754_atan2f+0x148>
 800d422:	e7ec      	b.n	800d3fe <__ieee754_atan2f+0x86>
 800d424:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d4a0 <__ieee754_atan2f+0x128>
 800d428:	e7b9      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d42a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d42e:	d0cf      	beq.n	800d3d0 <__ieee754_atan2f+0x58>
 800d430:	1a5b      	subs	r3, r3, r1
 800d432:	15db      	asrs	r3, r3, #23
 800d434:	2b3c      	cmp	r3, #60	; 0x3c
 800d436:	dc1a      	bgt.n	800d46e <__ieee754_atan2f+0xf6>
 800d438:	2a00      	cmp	r2, #0
 800d43a:	da01      	bge.n	800d440 <__ieee754_atan2f+0xc8>
 800d43c:	333c      	adds	r3, #60	; 0x3c
 800d43e:	db19      	blt.n	800d474 <__ieee754_atan2f+0xfc>
 800d440:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d444:	f000 fd78 	bl	800df38 <fabsf>
 800d448:	f000 fca4 	bl	800dd94 <atanf>
 800d44c:	eef0 7a40 	vmov.f32	s15, s0
 800d450:	2c01      	cmp	r4, #1
 800d452:	d012      	beq.n	800d47a <__ieee754_atan2f+0x102>
 800d454:	2c02      	cmp	r4, #2
 800d456:	d017      	beq.n	800d488 <__ieee754_atan2f+0x110>
 800d458:	2c00      	cmp	r4, #0
 800d45a:	d0a0      	beq.n	800d39e <__ieee754_atan2f+0x26>
 800d45c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d4c4 <__ieee754_atan2f+0x14c>
 800d460:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d464:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d4c8 <__ieee754_atan2f+0x150>
 800d468:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d46c:	e797      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d46e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d4a4 <__ieee754_atan2f+0x12c>
 800d472:	e7ed      	b.n	800d450 <__ieee754_atan2f+0xd8>
 800d474:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d4c0 <__ieee754_atan2f+0x148>
 800d478:	e7ea      	b.n	800d450 <__ieee754_atan2f+0xd8>
 800d47a:	ee17 3a90 	vmov	r3, s15
 800d47e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	e78a      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d488:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d4c4 <__ieee754_atan2f+0x14c>
 800d48c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d490:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800d4c8 <__ieee754_atan2f+0x150>
 800d494:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d498:	e781      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d49a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800d4c8 <__ieee754_atan2f+0x150>
 800d49e:	e77e      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d4a0:	c0490fdb 	.word	0xc0490fdb
 800d4a4:	3fc90fdb 	.word	0x3fc90fdb
 800d4a8:	bfc90fdb 	.word	0xbfc90fdb
 800d4ac:	bf490fdb 	.word	0xbf490fdb
 800d4b0:	3f490fdb 	.word	0x3f490fdb
 800d4b4:	4016cbe4 	.word	0x4016cbe4
 800d4b8:	c016cbe4 	.word	0xc016cbe4
 800d4bc:	80000000 	.word	0x80000000
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	33bbbd2e 	.word	0x33bbbd2e
 800d4c8:	40490fdb 	.word	0x40490fdb
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <__kernel_cos>:
 800d4d0:	ee10 1a90 	vmov	r1, s1
 800d4d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d4d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d4dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d4e0:	da05      	bge.n	800d4ee <__kernel_cos+0x1e>
 800d4e2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d4e6:	ee16 3a90 	vmov	r3, s13
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d03d      	beq.n	800d56a <__kernel_cos+0x9a>
 800d4ee:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d4f2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d4f6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d570 <__kernel_cos+0xa0>
 800d4fa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d4fe:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d502:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d578 <__kernel_cos+0xa8>
 800d506:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d50a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d580 <__kernel_cos+0xb0>
 800d50e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d512:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d588 <__kernel_cos+0xb8>
 800d516:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d51a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d590 <__kernel_cos+0xc0>
 800d51e:	4b20      	ldr	r3, [pc, #128]	; (800d5a0 <__kernel_cos+0xd0>)
 800d520:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d524:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d598 <__kernel_cos+0xc8>
 800d528:	4299      	cmp	r1, r3
 800d52a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d52e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d532:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d536:	dc04      	bgt.n	800d542 <__kernel_cos+0x72>
 800d538:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d53c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d540:	4770      	bx	lr
 800d542:	4b18      	ldr	r3, [pc, #96]	; (800d5a4 <__kernel_cos+0xd4>)
 800d544:	4299      	cmp	r1, r3
 800d546:	dc0d      	bgt.n	800d564 <__kernel_cos+0x94>
 800d548:	2200      	movs	r2, #0
 800d54a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d54e:	ec43 2b15 	vmov	d5, r2, r3
 800d552:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d556:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d55a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d55e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d562:	4770      	bx	lr
 800d564:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d568:	e7f3      	b.n	800d552 <__kernel_cos+0x82>
 800d56a:	eeb0 0b47 	vmov.f64	d0, d7
 800d56e:	4770      	bx	lr
 800d570:	be8838d4 	.word	0xbe8838d4
 800d574:	bda8fae9 	.word	0xbda8fae9
 800d578:	bdb4b1c4 	.word	0xbdb4b1c4
 800d57c:	3e21ee9e 	.word	0x3e21ee9e
 800d580:	809c52ad 	.word	0x809c52ad
 800d584:	be927e4f 	.word	0xbe927e4f
 800d588:	19cb1590 	.word	0x19cb1590
 800d58c:	3efa01a0 	.word	0x3efa01a0
 800d590:	16c15177 	.word	0x16c15177
 800d594:	bf56c16c 	.word	0xbf56c16c
 800d598:	5555554c 	.word	0x5555554c
 800d59c:	3fa55555 	.word	0x3fa55555
 800d5a0:	3fd33332 	.word	0x3fd33332
 800d5a4:	3fe90000 	.word	0x3fe90000

0800d5a8 <__kernel_rem_pio2>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	ed2d 8b06 	vpush	{d8-d10}
 800d5b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d5b4:	469b      	mov	fp, r3
 800d5b6:	460e      	mov	r6, r1
 800d5b8:	4bc7      	ldr	r3, [pc, #796]	; (800d8d8 <__kernel_rem_pio2+0x330>)
 800d5ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d5bc:	9002      	str	r0, [sp, #8]
 800d5be:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d5c2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d5c4:	1ed1      	subs	r1, r2, #3
 800d5c6:	2318      	movs	r3, #24
 800d5c8:	f06f 0417 	mvn.w	r4, #23
 800d5cc:	fb91 f1f3 	sdiv	r1, r1, r3
 800d5d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d5d4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d5d8:	fb01 4404 	mla	r4, r1, r4, r4
 800d5dc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d8c0 <__kernel_rem_pio2+0x318>
 800d5e0:	4414      	add	r4, r2
 800d5e2:	eba1 050a 	sub.w	r5, r1, sl
 800d5e6:	aa1a      	add	r2, sp, #104	; 0x68
 800d5e8:	eb09 070a 	add.w	r7, r9, sl
 800d5ec:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d5f0:	4696      	mov	lr, r2
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	42bb      	cmp	r3, r7
 800d5f6:	dd0f      	ble.n	800d618 <__kernel_rem_pio2+0x70>
 800d5f8:	af6a      	add	r7, sp, #424	; 0x1a8
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	454a      	cmp	r2, r9
 800d5fe:	dc28      	bgt.n	800d652 <__kernel_rem_pio2+0xaa>
 800d600:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d604:	eb0b 0302 	add.w	r3, fp, r2
 800d608:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d60c:	9d02      	ldr	r5, [sp, #8]
 800d60e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d8c0 <__kernel_rem_pio2+0x318>
 800d612:	f04f 0c00 	mov.w	ip, #0
 800d616:	e016      	b.n	800d646 <__kernel_rem_pio2+0x9e>
 800d618:	42dd      	cmn	r5, r3
 800d61a:	d409      	bmi.n	800d630 <__kernel_rem_pio2+0x88>
 800d61c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d620:	ee07 2a90 	vmov	s15, r2
 800d624:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d628:	ecae 7b02 	vstmia	lr!, {d7}
 800d62c:	3301      	adds	r3, #1
 800d62e:	e7e1      	b.n	800d5f4 <__kernel_rem_pio2+0x4c>
 800d630:	eeb0 7b46 	vmov.f64	d7, d6
 800d634:	e7f8      	b.n	800d628 <__kernel_rem_pio2+0x80>
 800d636:	ecb5 5b02 	vldmia	r5!, {d5}
 800d63a:	ed33 6b02 	vldmdb	r3!, {d6}
 800d63e:	f10c 0c01 	add.w	ip, ip, #1
 800d642:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d646:	45d4      	cmp	ip, sl
 800d648:	ddf5      	ble.n	800d636 <__kernel_rem_pio2+0x8e>
 800d64a:	eca7 7b02 	vstmia	r7!, {d7}
 800d64e:	3201      	adds	r2, #1
 800d650:	e7d4      	b.n	800d5fc <__kernel_rem_pio2+0x54>
 800d652:	ab06      	add	r3, sp, #24
 800d654:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d658:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d8c8 <__kernel_rem_pio2+0x320>
 800d65c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d8d0 <__kernel_rem_pio2+0x328>
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d666:	9303      	str	r3, [sp, #12]
 800d668:	464d      	mov	r5, r9
 800d66a:	ab92      	add	r3, sp, #584	; 0x248
 800d66c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d674:	3f01      	subs	r7, #1
 800d676:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d67a:	00ff      	lsls	r7, r7, #3
 800d67c:	ab92      	add	r3, sp, #584	; 0x248
 800d67e:	19da      	adds	r2, r3, r7
 800d680:	3a98      	subs	r2, #152	; 0x98
 800d682:	2300      	movs	r3, #0
 800d684:	1ae9      	subs	r1, r5, r3
 800d686:	2900      	cmp	r1, #0
 800d688:	dc4e      	bgt.n	800d728 <__kernel_rem_pio2+0x180>
 800d68a:	4620      	mov	r0, r4
 800d68c:	f000 fb04 	bl	800dc98 <scalbn>
 800d690:	eeb0 8b40 	vmov.f64	d8, d0
 800d694:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d698:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d69c:	f000 fa84 	bl	800dba8 <floor>
 800d6a0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d6a4:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d6a8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d6ac:	2c00      	cmp	r4, #0
 800d6ae:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6b6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d6ba:	dd4a      	ble.n	800d752 <__kernel_rem_pio2+0x1aa>
 800d6bc:	1e69      	subs	r1, r5, #1
 800d6be:	ab06      	add	r3, sp, #24
 800d6c0:	f1c4 0018 	rsb	r0, r4, #24
 800d6c4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d6c8:	9a01      	ldr	r2, [sp, #4]
 800d6ca:	fa4c f300 	asr.w	r3, ip, r0
 800d6ce:	441a      	add	r2, r3
 800d6d0:	4083      	lsls	r3, r0
 800d6d2:	9201      	str	r2, [sp, #4]
 800d6d4:	ebac 0203 	sub.w	r2, ip, r3
 800d6d8:	ab06      	add	r3, sp, #24
 800d6da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d6de:	f1c4 0317 	rsb	r3, r4, #23
 800d6e2:	fa42 f803 	asr.w	r8, r2, r3
 800d6e6:	f1b8 0f00 	cmp.w	r8, #0
 800d6ea:	dd43      	ble.n	800d774 <__kernel_rem_pio2+0x1cc>
 800d6ec:	9b01      	ldr	r3, [sp, #4]
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	9301      	str	r3, [sp, #4]
 800d6f4:	4601      	mov	r1, r0
 800d6f6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d6fa:	4285      	cmp	r5, r0
 800d6fc:	dc6e      	bgt.n	800d7dc <__kernel_rem_pio2+0x234>
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	dd04      	ble.n	800d70c <__kernel_rem_pio2+0x164>
 800d702:	2c01      	cmp	r4, #1
 800d704:	d07f      	beq.n	800d806 <__kernel_rem_pio2+0x25e>
 800d706:	2c02      	cmp	r4, #2
 800d708:	f000 8087 	beq.w	800d81a <__kernel_rem_pio2+0x272>
 800d70c:	f1b8 0f02 	cmp.w	r8, #2
 800d710:	d130      	bne.n	800d774 <__kernel_rem_pio2+0x1cc>
 800d712:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d716:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d71a:	b359      	cbz	r1, 800d774 <__kernel_rem_pio2+0x1cc>
 800d71c:	4620      	mov	r0, r4
 800d71e:	f000 fabb 	bl	800dc98 <scalbn>
 800d722:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d726:	e025      	b.n	800d774 <__kernel_rem_pio2+0x1cc>
 800d728:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d72c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d730:	a806      	add	r0, sp, #24
 800d732:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d736:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d73a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d73e:	ee10 1a10 	vmov	r1, s0
 800d742:	ed32 0b02 	vldmdb	r2!, {d0}
 800d746:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d74a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d74e:	3301      	adds	r3, #1
 800d750:	e798      	b.n	800d684 <__kernel_rem_pio2+0xdc>
 800d752:	d106      	bne.n	800d762 <__kernel_rem_pio2+0x1ba>
 800d754:	1e6b      	subs	r3, r5, #1
 800d756:	aa06      	add	r2, sp, #24
 800d758:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d75c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d760:	e7c1      	b.n	800d6e6 <__kernel_rem_pio2+0x13e>
 800d762:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d766:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d76e:	da32      	bge.n	800d7d6 <__kernel_rem_pio2+0x22e>
 800d770:	f04f 0800 	mov.w	r8, #0
 800d774:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77c:	f040 80b0 	bne.w	800d8e0 <__kernel_rem_pio2+0x338>
 800d780:	1e6b      	subs	r3, r5, #1
 800d782:	4618      	mov	r0, r3
 800d784:	2200      	movs	r2, #0
 800d786:	4548      	cmp	r0, r9
 800d788:	da4e      	bge.n	800d828 <__kernel_rem_pio2+0x280>
 800d78a:	2a00      	cmp	r2, #0
 800d78c:	f000 8088 	beq.w	800d8a0 <__kernel_rem_pio2+0x2f8>
 800d790:	aa06      	add	r2, sp, #24
 800d792:	3c18      	subs	r4, #24
 800d794:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d798:	2900      	cmp	r1, #0
 800d79a:	f000 808e 	beq.w	800d8ba <__kernel_rem_pio2+0x312>
 800d79e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	9302      	str	r3, [sp, #8]
 800d7a6:	f000 fa77 	bl	800dc98 <scalbn>
 800d7aa:	9b02      	ldr	r3, [sp, #8]
 800d7ac:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d7ae:	00d9      	lsls	r1, r3, #3
 800d7b0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d8c8 <__kernel_rem_pio2+0x320>
 800d7b4:	1850      	adds	r0, r2, r1
 800d7b6:	f100 0508 	add.w	r5, r0, #8
 800d7ba:	461c      	mov	r4, r3
 800d7bc:	2c00      	cmp	r4, #0
 800d7be:	f280 80bd 	bge.w	800d93c <__kernel_rem_pio2+0x394>
 800d7c2:	2500      	movs	r5, #0
 800d7c4:	1b5c      	subs	r4, r3, r5
 800d7c6:	2c00      	cmp	r4, #0
 800d7c8:	f2c0 80dd 	blt.w	800d986 <__kernel_rem_pio2+0x3de>
 800d7cc:	4f43      	ldr	r7, [pc, #268]	; (800d8dc <__kernel_rem_pio2+0x334>)
 800d7ce:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d8c0 <__kernel_rem_pio2+0x318>
 800d7d2:	2400      	movs	r4, #0
 800d7d4:	e0cb      	b.n	800d96e <__kernel_rem_pio2+0x3c6>
 800d7d6:	f04f 0802 	mov.w	r8, #2
 800d7da:	e787      	b.n	800d6ec <__kernel_rem_pio2+0x144>
 800d7dc:	ab06      	add	r3, sp, #24
 800d7de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7e2:	b949      	cbnz	r1, 800d7f8 <__kernel_rem_pio2+0x250>
 800d7e4:	b12b      	cbz	r3, 800d7f2 <__kernel_rem_pio2+0x24a>
 800d7e6:	aa06      	add	r2, sp, #24
 800d7e8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d7ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	e780      	b.n	800d6fa <__kernel_rem_pio2+0x152>
 800d7f8:	aa06      	add	r2, sp, #24
 800d7fa:	ebac 0303 	sub.w	r3, ip, r3
 800d7fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d802:	460b      	mov	r3, r1
 800d804:	e7f5      	b.n	800d7f2 <__kernel_rem_pio2+0x24a>
 800d806:	1e68      	subs	r0, r5, #1
 800d808:	ab06      	add	r3, sp, #24
 800d80a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d80e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d812:	aa06      	add	r2, sp, #24
 800d814:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d818:	e778      	b.n	800d70c <__kernel_rem_pio2+0x164>
 800d81a:	1e68      	subs	r0, r5, #1
 800d81c:	ab06      	add	r3, sp, #24
 800d81e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d822:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d826:	e7f4      	b.n	800d812 <__kernel_rem_pio2+0x26a>
 800d828:	a906      	add	r1, sp, #24
 800d82a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d82e:	3801      	subs	r0, #1
 800d830:	430a      	orrs	r2, r1
 800d832:	e7a8      	b.n	800d786 <__kernel_rem_pio2+0x1de>
 800d834:	f10c 0c01 	add.w	ip, ip, #1
 800d838:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d83c:	2a00      	cmp	r2, #0
 800d83e:	d0f9      	beq.n	800d834 <__kernel_rem_pio2+0x28c>
 800d840:	eb0b 0305 	add.w	r3, fp, r5
 800d844:	aa1a      	add	r2, sp, #104	; 0x68
 800d846:	00db      	lsls	r3, r3, #3
 800d848:	1898      	adds	r0, r3, r2
 800d84a:	3008      	adds	r0, #8
 800d84c:	1c69      	adds	r1, r5, #1
 800d84e:	3708      	adds	r7, #8
 800d850:	2200      	movs	r2, #0
 800d852:	4465      	add	r5, ip
 800d854:	9005      	str	r0, [sp, #20]
 800d856:	428d      	cmp	r5, r1
 800d858:	f6ff af07 	blt.w	800d66a <__kernel_rem_pio2+0xc2>
 800d85c:	a81a      	add	r0, sp, #104	; 0x68
 800d85e:	eb02 0c03 	add.w	ip, r2, r3
 800d862:	4484      	add	ip, r0
 800d864:	9803      	ldr	r0, [sp, #12]
 800d866:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d86a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d86e:	9001      	str	r0, [sp, #4]
 800d870:	ee07 0a90 	vmov	s15, r0
 800d874:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d878:	9805      	ldr	r0, [sp, #20]
 800d87a:	ed8c 7b00 	vstr	d7, [ip]
 800d87e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d8c0 <__kernel_rem_pio2+0x318>
 800d882:	eb00 0802 	add.w	r8, r0, r2
 800d886:	f04f 0c00 	mov.w	ip, #0
 800d88a:	45d4      	cmp	ip, sl
 800d88c:	dd0c      	ble.n	800d8a8 <__kernel_rem_pio2+0x300>
 800d88e:	eb02 0c07 	add.w	ip, r2, r7
 800d892:	a86a      	add	r0, sp, #424	; 0x1a8
 800d894:	4484      	add	ip, r0
 800d896:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d89a:	3101      	adds	r1, #1
 800d89c:	3208      	adds	r2, #8
 800d89e:	e7da      	b.n	800d856 <__kernel_rem_pio2+0x2ae>
 800d8a0:	9b04      	ldr	r3, [sp, #16]
 800d8a2:	f04f 0c01 	mov.w	ip, #1
 800d8a6:	e7c7      	b.n	800d838 <__kernel_rem_pio2+0x290>
 800d8a8:	ecbe 5b02 	vldmia	lr!, {d5}
 800d8ac:	ed38 6b02 	vldmdb	r8!, {d6}
 800d8b0:	f10c 0c01 	add.w	ip, ip, #1
 800d8b4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d8b8:	e7e7      	b.n	800d88a <__kernel_rem_pio2+0x2e2>
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	e768      	b.n	800d790 <__kernel_rem_pio2+0x1e8>
 800d8be:	bf00      	nop
	...
 800d8cc:	3e700000 	.word	0x3e700000
 800d8d0:	00000000 	.word	0x00000000
 800d8d4:	41700000 	.word	0x41700000
 800d8d8:	0800e670 	.word	0x0800e670
 800d8dc:	0800e630 	.word	0x0800e630
 800d8e0:	4260      	negs	r0, r4
 800d8e2:	eeb0 0b48 	vmov.f64	d0, d8
 800d8e6:	f000 f9d7 	bl	800dc98 <scalbn>
 800d8ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800dac8 <__kernel_rem_pio2+0x520>
 800d8ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	db18      	blt.n	800d92a <__kernel_rem_pio2+0x382>
 800d8f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800dad0 <__kernel_rem_pio2+0x528>
 800d8fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d900:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d904:	aa06      	add	r2, sp, #24
 800d906:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d90a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d90e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d912:	a906      	add	r1, sp, #24
 800d914:	ee10 3a10 	vmov	r3, s0
 800d918:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d91c:	1c6b      	adds	r3, r5, #1
 800d91e:	ee17 2a10 	vmov	r2, s14
 800d922:	3418      	adds	r4, #24
 800d924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d928:	e739      	b.n	800d79e <__kernel_rem_pio2+0x1f6>
 800d92a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d92e:	aa06      	add	r2, sp, #24
 800d930:	ee10 3a10 	vmov	r3, s0
 800d934:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d938:	462b      	mov	r3, r5
 800d93a:	e730      	b.n	800d79e <__kernel_rem_pio2+0x1f6>
 800d93c:	aa06      	add	r2, sp, #24
 800d93e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d942:	9202      	str	r2, [sp, #8]
 800d944:	ee07 2a90 	vmov	s15, r2
 800d948:	3c01      	subs	r4, #1
 800d94a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d94e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d952:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d956:	ed25 7b02 	vstmdb	r5!, {d7}
 800d95a:	e72f      	b.n	800d7bc <__kernel_rem_pio2+0x214>
 800d95c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d960:	ecb7 5b02 	vldmia	r7!, {d5}
 800d964:	ed9c 6b00 	vldr	d6, [ip]
 800d968:	3401      	adds	r4, #1
 800d96a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d96e:	454c      	cmp	r4, r9
 800d970:	dc01      	bgt.n	800d976 <__kernel_rem_pio2+0x3ce>
 800d972:	42a5      	cmp	r5, r4
 800d974:	daf2      	bge.n	800d95c <__kernel_rem_pio2+0x3b4>
 800d976:	aa42      	add	r2, sp, #264	; 0x108
 800d978:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d97c:	ed84 7b00 	vstr	d7, [r4]
 800d980:	3501      	adds	r5, #1
 800d982:	3808      	subs	r0, #8
 800d984:	e71e      	b.n	800d7c4 <__kernel_rem_pio2+0x21c>
 800d986:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d988:	2a03      	cmp	r2, #3
 800d98a:	d84e      	bhi.n	800da2a <__kernel_rem_pio2+0x482>
 800d98c:	e8df f002 	tbb	[pc, r2]
 800d990:	021f1f3e 	.word	0x021f1f3e
 800d994:	3108      	adds	r1, #8
 800d996:	aa42      	add	r2, sp, #264	; 0x108
 800d998:	4411      	add	r1, r2
 800d99a:	4608      	mov	r0, r1
 800d99c:	461c      	mov	r4, r3
 800d99e:	2c00      	cmp	r4, #0
 800d9a0:	dc61      	bgt.n	800da66 <__kernel_rem_pio2+0x4be>
 800d9a2:	4608      	mov	r0, r1
 800d9a4:	461c      	mov	r4, r3
 800d9a6:	2c01      	cmp	r4, #1
 800d9a8:	dc6d      	bgt.n	800da86 <__kernel_rem_pio2+0x4de>
 800d9aa:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dad8 <__kernel_rem_pio2+0x530>
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	dc79      	bgt.n	800daa6 <__kernel_rem_pio2+0x4fe>
 800d9b2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d9b6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d9ba:	f1b8 0f00 	cmp.w	r8, #0
 800d9be:	d178      	bne.n	800dab2 <__kernel_rem_pio2+0x50a>
 800d9c0:	ed86 5b00 	vstr	d5, [r6]
 800d9c4:	ed86 6b02 	vstr	d6, [r6, #8]
 800d9c8:	ed86 7b04 	vstr	d7, [r6, #16]
 800d9cc:	e02d      	b.n	800da2a <__kernel_rem_pio2+0x482>
 800d9ce:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800dad8 <__kernel_rem_pio2+0x530>
 800d9d2:	3108      	adds	r1, #8
 800d9d4:	aa42      	add	r2, sp, #264	; 0x108
 800d9d6:	4411      	add	r1, r2
 800d9d8:	4618      	mov	r0, r3
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	da34      	bge.n	800da48 <__kernel_rem_pio2+0x4a0>
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	d037      	beq.n	800da54 <__kernel_rem_pio2+0x4ac>
 800d9e4:	eeb1 7b46 	vneg.f64	d7, d6
 800d9e8:	ed86 7b00 	vstr	d7, [r6]
 800d9ec:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d9f0:	a844      	add	r0, sp, #272	; 0x110
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9f8:	428b      	cmp	r3, r1
 800d9fa:	da2e      	bge.n	800da5a <__kernel_rem_pio2+0x4b2>
 800d9fc:	f1b8 0f00 	cmp.w	r8, #0
 800da00:	d001      	beq.n	800da06 <__kernel_rem_pio2+0x45e>
 800da02:	eeb1 7b47 	vneg.f64	d7, d7
 800da06:	ed86 7b02 	vstr	d7, [r6, #8]
 800da0a:	e00e      	b.n	800da2a <__kernel_rem_pio2+0x482>
 800da0c:	aa92      	add	r2, sp, #584	; 0x248
 800da0e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800dad8 <__kernel_rem_pio2+0x530>
 800da12:	4411      	add	r1, r2
 800da14:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800da18:	2b00      	cmp	r3, #0
 800da1a:	da0f      	bge.n	800da3c <__kernel_rem_pio2+0x494>
 800da1c:	f1b8 0f00 	cmp.w	r8, #0
 800da20:	d001      	beq.n	800da26 <__kernel_rem_pio2+0x47e>
 800da22:	eeb1 7b47 	vneg.f64	d7, d7
 800da26:	ed86 7b00 	vstr	d7, [r6]
 800da2a:	9b01      	ldr	r3, [sp, #4]
 800da2c:	f003 0007 	and.w	r0, r3, #7
 800da30:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800da34:	ecbd 8b06 	vpop	{d8-d10}
 800da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3c:	ed31 6b02 	vldmdb	r1!, {d6}
 800da40:	3b01      	subs	r3, #1
 800da42:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da46:	e7e7      	b.n	800da18 <__kernel_rem_pio2+0x470>
 800da48:	ed31 7b02 	vldmdb	r1!, {d7}
 800da4c:	3801      	subs	r0, #1
 800da4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800da52:	e7c2      	b.n	800d9da <__kernel_rem_pio2+0x432>
 800da54:	eeb0 7b46 	vmov.f64	d7, d6
 800da58:	e7c6      	b.n	800d9e8 <__kernel_rem_pio2+0x440>
 800da5a:	ecb0 6b02 	vldmia	r0!, {d6}
 800da5e:	3101      	adds	r1, #1
 800da60:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da64:	e7c8      	b.n	800d9f8 <__kernel_rem_pio2+0x450>
 800da66:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da6a:	ed30 5b02 	vldmdb	r0!, {d5}
 800da6e:	3c01      	subs	r4, #1
 800da70:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da74:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da78:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da7c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da80:	ed80 7b00 	vstr	d7, [r0]
 800da84:	e78b      	b.n	800d99e <__kernel_rem_pio2+0x3f6>
 800da86:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da8a:	ed30 5b02 	vldmdb	r0!, {d5}
 800da8e:	3c01      	subs	r4, #1
 800da90:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da94:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da98:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da9c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800daa0:	ed80 7b00 	vstr	d7, [r0]
 800daa4:	e77f      	b.n	800d9a6 <__kernel_rem_pio2+0x3fe>
 800daa6:	ed31 6b02 	vldmdb	r1!, {d6}
 800daaa:	3b01      	subs	r3, #1
 800daac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dab0:	e77d      	b.n	800d9ae <__kernel_rem_pio2+0x406>
 800dab2:	eeb1 5b45 	vneg.f64	d5, d5
 800dab6:	eeb1 6b46 	vneg.f64	d6, d6
 800daba:	ed86 5b00 	vstr	d5, [r6]
 800dabe:	eeb1 7b47 	vneg.f64	d7, d7
 800dac2:	ed86 6b02 	vstr	d6, [r6, #8]
 800dac6:	e77f      	b.n	800d9c8 <__kernel_rem_pio2+0x420>
 800dac8:	00000000 	.word	0x00000000
 800dacc:	41700000 	.word	0x41700000
 800dad0:	00000000 	.word	0x00000000
 800dad4:	3e700000 	.word	0x3e700000
	...

0800dae0 <__kernel_sin>:
 800dae0:	ee10 3a90 	vmov	r3, s1
 800dae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dae8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800daec:	da04      	bge.n	800daf8 <__kernel_sin+0x18>
 800daee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800daf2:	ee17 3a90 	vmov	r3, s15
 800daf6:	b35b      	cbz	r3, 800db50 <__kernel_sin+0x70>
 800daf8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800dafc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800db00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800db58 <__kernel_sin+0x78>
 800db04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db60 <__kernel_sin+0x80>
 800db08:	eea6 4b07 	vfma.f64	d4, d6, d7
 800db0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db68 <__kernel_sin+0x88>
 800db10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db70 <__kernel_sin+0x90>
 800db18:	eea7 4b06 	vfma.f64	d4, d7, d6
 800db1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db78 <__kernel_sin+0x98>
 800db20:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db24:	b930      	cbnz	r0, 800db34 <__kernel_sin+0x54>
 800db26:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db80 <__kernel_sin+0xa0>
 800db2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800db2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800db32:	4770      	bx	lr
 800db34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800db38:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800db3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800db40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800db44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800db88 <__kernel_sin+0xa8>
 800db48:	eea5 1b07 	vfma.f64	d1, d5, d7
 800db4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	f3af 8000 	nop.w
 800db58:	5acfd57c 	.word	0x5acfd57c
 800db5c:	3de5d93a 	.word	0x3de5d93a
 800db60:	8a2b9ceb 	.word	0x8a2b9ceb
 800db64:	be5ae5e6 	.word	0xbe5ae5e6
 800db68:	57b1fe7d 	.word	0x57b1fe7d
 800db6c:	3ec71de3 	.word	0x3ec71de3
 800db70:	19c161d5 	.word	0x19c161d5
 800db74:	bf2a01a0 	.word	0xbf2a01a0
 800db78:	1110f8a6 	.word	0x1110f8a6
 800db7c:	3f811111 	.word	0x3f811111
 800db80:	55555549 	.word	0x55555549
 800db84:	bfc55555 	.word	0xbfc55555
 800db88:	55555549 	.word	0x55555549
 800db8c:	3fc55555 	.word	0x3fc55555

0800db90 <fabs>:
 800db90:	ec51 0b10 	vmov	r0, r1, d0
 800db94:	ee10 2a10 	vmov	r2, s0
 800db98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db9c:	ec43 2b10 	vmov	d0, r2, r3
 800dba0:	4770      	bx	lr
 800dba2:	0000      	movs	r0, r0
 800dba4:	0000      	movs	r0, r0
	...

0800dba8 <floor>:
 800dba8:	ee10 1a90 	vmov	r1, s1
 800dbac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dbb0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800dbb4:	2b13      	cmp	r3, #19
 800dbb6:	b530      	push	{r4, r5, lr}
 800dbb8:	ee10 0a10 	vmov	r0, s0
 800dbbc:	ee10 5a10 	vmov	r5, s0
 800dbc0:	dc33      	bgt.n	800dc2a <floor+0x82>
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	da17      	bge.n	800dbf6 <floor+0x4e>
 800dbc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800dc88 <floor+0xe0>
 800dbca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dbce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	dd09      	ble.n	800dbec <floor+0x44>
 800dbd8:	2900      	cmp	r1, #0
 800dbda:	da50      	bge.n	800dc7e <floor+0xd6>
 800dbdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbe0:	4a2b      	ldr	r2, [pc, #172]	; (800dc90 <floor+0xe8>)
 800dbe2:	4303      	orrs	r3, r0
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	4283      	cmp	r3, r0
 800dbe8:	bf18      	it	ne
 800dbea:	4611      	movne	r1, r2
 800dbec:	460b      	mov	r3, r1
 800dbee:	4602      	mov	r2, r0
 800dbf0:	ec43 2b10 	vmov	d0, r2, r3
 800dbf4:	e020      	b.n	800dc38 <floor+0x90>
 800dbf6:	4a27      	ldr	r2, [pc, #156]	; (800dc94 <floor+0xec>)
 800dbf8:	411a      	asrs	r2, r3
 800dbfa:	ea01 0402 	and.w	r4, r1, r2
 800dbfe:	4304      	orrs	r4, r0
 800dc00:	d01a      	beq.n	800dc38 <floor+0x90>
 800dc02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800dc88 <floor+0xe0>
 800dc06:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dc0a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc12:	ddeb      	ble.n	800dbec <floor+0x44>
 800dc14:	2900      	cmp	r1, #0
 800dc16:	bfbe      	ittt	lt
 800dc18:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800dc1c:	fa40 f303 	asrlt.w	r3, r0, r3
 800dc20:	18c9      	addlt	r1, r1, r3
 800dc22:	ea21 0102 	bic.w	r1, r1, r2
 800dc26:	2000      	movs	r0, #0
 800dc28:	e7e0      	b.n	800dbec <floor+0x44>
 800dc2a:	2b33      	cmp	r3, #51	; 0x33
 800dc2c:	dd05      	ble.n	800dc3a <floor+0x92>
 800dc2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc32:	d101      	bne.n	800dc38 <floor+0x90>
 800dc34:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dc38:	bd30      	pop	{r4, r5, pc}
 800dc3a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800dc3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc42:	40e2      	lsrs	r2, r4
 800dc44:	4202      	tst	r2, r0
 800dc46:	d0f7      	beq.n	800dc38 <floor+0x90>
 800dc48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800dc88 <floor+0xe0>
 800dc4c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dc50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc58:	ddc8      	ble.n	800dbec <floor+0x44>
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	da02      	bge.n	800dc64 <floor+0xbc>
 800dc5e:	2b14      	cmp	r3, #20
 800dc60:	d103      	bne.n	800dc6a <floor+0xc2>
 800dc62:	3101      	adds	r1, #1
 800dc64:	ea20 0002 	bic.w	r0, r0, r2
 800dc68:	e7c0      	b.n	800dbec <floor+0x44>
 800dc6a:	2401      	movs	r4, #1
 800dc6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dc70:	fa04 f303 	lsl.w	r3, r4, r3
 800dc74:	4418      	add	r0, r3
 800dc76:	42a8      	cmp	r0, r5
 800dc78:	bf38      	it	cc
 800dc7a:	1909      	addcc	r1, r1, r4
 800dc7c:	e7f2      	b.n	800dc64 <floor+0xbc>
 800dc7e:	2000      	movs	r0, #0
 800dc80:	4601      	mov	r1, r0
 800dc82:	e7b3      	b.n	800dbec <floor+0x44>
 800dc84:	f3af 8000 	nop.w
 800dc88:	8800759c 	.word	0x8800759c
 800dc8c:	7e37e43c 	.word	0x7e37e43c
 800dc90:	bff00000 	.word	0xbff00000
 800dc94:	000fffff 	.word	0x000fffff

0800dc98 <scalbn>:
 800dc98:	b500      	push	{lr}
 800dc9a:	ed2d 8b02 	vpush	{d8}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	ed8d 0b00 	vstr	d0, [sp]
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dcaa:	b9a2      	cbnz	r2, 800dcd6 <scalbn+0x3e>
 800dcac:	9a00      	ldr	r2, [sp, #0]
 800dcae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	d03a      	beq.n	800dd2c <scalbn+0x94>
 800dcb6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800dd70 <scalbn+0xd8>
 800dcba:	4b35      	ldr	r3, [pc, #212]	; (800dd90 <scalbn+0xf8>)
 800dcbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dcc0:	4298      	cmp	r0, r3
 800dcc2:	ed8d 7b00 	vstr	d7, [sp]
 800dcc6:	da11      	bge.n	800dcec <scalbn+0x54>
 800dcc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800dd78 <scalbn+0xe0>
 800dccc:	ed9d 6b00 	vldr	d6, [sp]
 800dcd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcd4:	e007      	b.n	800dce6 <scalbn+0x4e>
 800dcd6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dcda:	428a      	cmp	r2, r1
 800dcdc:	d10a      	bne.n	800dcf4 <scalbn+0x5c>
 800dcde:	ed9d 7b00 	vldr	d7, [sp]
 800dce2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dce6:	ed8d 7b00 	vstr	d7, [sp]
 800dcea:	e01f      	b.n	800dd2c <scalbn+0x94>
 800dcec:	9b01      	ldr	r3, [sp, #4]
 800dcee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dcf2:	3a36      	subs	r2, #54	; 0x36
 800dcf4:	4402      	add	r2, r0
 800dcf6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dcfa:	428a      	cmp	r2, r1
 800dcfc:	dd0a      	ble.n	800dd14 <scalbn+0x7c>
 800dcfe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800dd80 <scalbn+0xe8>
 800dd02:	eeb0 0b48 	vmov.f64	d0, d8
 800dd06:	ed9d 1b00 	vldr	d1, [sp]
 800dd0a:	f000 f91c 	bl	800df46 <copysign>
 800dd0e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800dd12:	e7e8      	b.n	800dce6 <scalbn+0x4e>
 800dd14:	2a00      	cmp	r2, #0
 800dd16:	dd10      	ble.n	800dd3a <scalbn+0xa2>
 800dd18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd24:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd28:	e9cd 0100 	strd	r0, r1, [sp]
 800dd2c:	ed9d 0b00 	vldr	d0, [sp]
 800dd30:	b003      	add	sp, #12
 800dd32:	ecbd 8b02 	vpop	{d8}
 800dd36:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd3a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dd3e:	da06      	bge.n	800dd4e <scalbn+0xb6>
 800dd40:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dd44:	4298      	cmp	r0, r3
 800dd46:	dcda      	bgt.n	800dcfe <scalbn+0x66>
 800dd48:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800dd78 <scalbn+0xe0>
 800dd4c:	e7d9      	b.n	800dd02 <scalbn+0x6a>
 800dd4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd56:	3236      	adds	r2, #54	; 0x36
 800dd58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd5c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd60:	ec41 0b17 	vmov	d7, r0, r1
 800dd64:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800dd88 <scalbn+0xf0>
 800dd68:	e7b2      	b.n	800dcd0 <scalbn+0x38>
 800dd6a:	bf00      	nop
 800dd6c:	f3af 8000 	nop.w
 800dd70:	00000000 	.word	0x00000000
 800dd74:	43500000 	.word	0x43500000
 800dd78:	c2f8f359 	.word	0xc2f8f359
 800dd7c:	01a56e1f 	.word	0x01a56e1f
 800dd80:	8800759c 	.word	0x8800759c
 800dd84:	7e37e43c 	.word	0x7e37e43c
 800dd88:	00000000 	.word	0x00000000
 800dd8c:	3c900000 	.word	0x3c900000
 800dd90:	ffff3cb0 	.word	0xffff3cb0

0800dd94 <atanf>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	ee10 5a10 	vmov	r5, s0
 800dd9a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dd9e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800dda2:	eef0 7a40 	vmov.f32	s15, s0
 800dda6:	db0f      	blt.n	800ddc8 <atanf+0x34>
 800dda8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ddac:	dd04      	ble.n	800ddb8 <atanf+0x24>
 800ddae:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ddb2:	eeb0 0a67 	vmov.f32	s0, s15
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800deec <atanf+0x158>
 800ddbc:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800def0 <atanf+0x15c>
 800ddc0:	2d00      	cmp	r5, #0
 800ddc2:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800ddc6:	e7f4      	b.n	800ddb2 <atanf+0x1e>
 800ddc8:	4b4a      	ldr	r3, [pc, #296]	; (800def4 <atanf+0x160>)
 800ddca:	429c      	cmp	r4, r3
 800ddcc:	dc10      	bgt.n	800ddf0 <atanf+0x5c>
 800ddce:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ddd2:	da0a      	bge.n	800ddea <atanf+0x56>
 800ddd4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800def8 <atanf+0x164>
 800ddd8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dde0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde8:	dce3      	bgt.n	800ddb2 <atanf+0x1e>
 800ddea:	f04f 33ff 	mov.w	r3, #4294967295
 800ddee:	e013      	b.n	800de18 <atanf+0x84>
 800ddf0:	f000 f8a2 	bl	800df38 <fabsf>
 800ddf4:	4b41      	ldr	r3, [pc, #260]	; (800defc <atanf+0x168>)
 800ddf6:	429c      	cmp	r4, r3
 800ddf8:	dc4f      	bgt.n	800de9a <atanf+0x106>
 800ddfa:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ddfe:	429c      	cmp	r4, r3
 800de00:	dc41      	bgt.n	800de86 <atanf+0xf2>
 800de02:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800de06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de0a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800de0e:	2300      	movs	r3, #0
 800de10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de14:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800de1e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800df00 <atanf+0x16c>
 800de22:	eddf 5a38 	vldr	s11, [pc, #224]	; 800df04 <atanf+0x170>
 800de26:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800df08 <atanf+0x174>
 800de2a:	ee66 6a06 	vmul.f32	s13, s12, s12
 800de2e:	eee6 5a87 	vfma.f32	s11, s13, s14
 800de32:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800df0c <atanf+0x178>
 800de36:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800de3a:	eddf 5a35 	vldr	s11, [pc, #212]	; 800df10 <atanf+0x17c>
 800de3e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800de42:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800df14 <atanf+0x180>
 800de46:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800de4a:	eddf 5a33 	vldr	s11, [pc, #204]	; 800df18 <atanf+0x184>
 800de4e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800de52:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800df1c <atanf+0x188>
 800de56:	eea6 5a87 	vfma.f32	s10, s13, s14
 800de5a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800df20 <atanf+0x18c>
 800de5e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800de62:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800df24 <atanf+0x190>
 800de66:	eea7 5a26 	vfma.f32	s10, s14, s13
 800de6a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800df28 <atanf+0x194>
 800de6e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800de72:	ee27 7a26 	vmul.f32	s14, s14, s13
 800de76:	eea5 7a86 	vfma.f32	s14, s11, s12
 800de7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de7e:	d121      	bne.n	800dec4 <atanf+0x130>
 800de80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de84:	e795      	b.n	800ddb2 <atanf+0x1e>
 800de86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de8a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800de8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de92:	2301      	movs	r3, #1
 800de94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de98:	e7be      	b.n	800de18 <atanf+0x84>
 800de9a:	4b24      	ldr	r3, [pc, #144]	; (800df2c <atanf+0x198>)
 800de9c:	429c      	cmp	r4, r3
 800de9e:	dc0b      	bgt.n	800deb8 <atanf+0x124>
 800dea0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800dea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dea8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800deac:	2302      	movs	r3, #2
 800deae:	ee70 6a67 	vsub.f32	s13, s0, s15
 800deb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800deb6:	e7af      	b.n	800de18 <atanf+0x84>
 800deb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800debc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dec0:	2303      	movs	r3, #3
 800dec2:	e7a9      	b.n	800de18 <atanf+0x84>
 800dec4:	4a1a      	ldr	r2, [pc, #104]	; (800df30 <atanf+0x19c>)
 800dec6:	491b      	ldr	r1, [pc, #108]	; (800df34 <atanf+0x1a0>)
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	441a      	add	r2, r3
 800decc:	440b      	add	r3, r1
 800dece:	edd3 6a00 	vldr	s13, [r3]
 800ded2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ded6:	2d00      	cmp	r5, #0
 800ded8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dedc:	ed92 7a00 	vldr	s14, [r2]
 800dee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dee4:	bfb8      	it	lt
 800dee6:	eef1 7a67 	vneglt.f32	s15, s15
 800deea:	e762      	b.n	800ddb2 <atanf+0x1e>
 800deec:	bfc90fdb 	.word	0xbfc90fdb
 800def0:	3fc90fdb 	.word	0x3fc90fdb
 800def4:	3edfffff 	.word	0x3edfffff
 800def8:	7149f2ca 	.word	0x7149f2ca
 800defc:	3f97ffff 	.word	0x3f97ffff
 800df00:	3c8569d7 	.word	0x3c8569d7
 800df04:	3d4bda59 	.word	0x3d4bda59
 800df08:	bd6ef16b 	.word	0xbd6ef16b
 800df0c:	3d886b35 	.word	0x3d886b35
 800df10:	3dba2e6e 	.word	0x3dba2e6e
 800df14:	3e124925 	.word	0x3e124925
 800df18:	3eaaaaab 	.word	0x3eaaaaab
 800df1c:	bd15a221 	.word	0xbd15a221
 800df20:	bd9d8795 	.word	0xbd9d8795
 800df24:	bde38e38 	.word	0xbde38e38
 800df28:	be4ccccd 	.word	0xbe4ccccd
 800df2c:	401bffff 	.word	0x401bffff
 800df30:	0800e680 	.word	0x0800e680
 800df34:	0800e690 	.word	0x0800e690

0800df38 <fabsf>:
 800df38:	ee10 3a10 	vmov	r3, s0
 800df3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df40:	ee00 3a10 	vmov	s0, r3
 800df44:	4770      	bx	lr

0800df46 <copysign>:
 800df46:	ec51 0b10 	vmov	r0, r1, d0
 800df4a:	ee11 0a90 	vmov	r0, s3
 800df4e:	ee10 2a10 	vmov	r2, s0
 800df52:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800df56:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800df5a:	ea41 0300 	orr.w	r3, r1, r0
 800df5e:	ec43 2b10 	vmov	d0, r2, r3
 800df62:	4770      	bx	lr

0800df64 <_init>:
 800df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df66:	bf00      	nop
 800df68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df6a:	bc08      	pop	{r3}
 800df6c:	469e      	mov	lr, r3
 800df6e:	4770      	bx	lr

0800df70 <_fini>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	bf00      	nop
 800df74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df76:	bc08      	pop	{r3}
 800df78:	469e      	mov	lr, r3
 800df7a:	4770      	bx	lr
