
1124_MARK42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b470  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800b670  0800b670  0001b670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb98  0800bb98  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb98  0800bb98  0001bb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba0  0800bba0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba4  0800bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046e2c  200001f8  0800bd9c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20047024  0800bd9c  00027024  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f63  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d29  00000000  00000000  00038185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a542  00000000  00000000  0003d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fef5  00000000  00000000  00067cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100e95  00000000  00000000  00077bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  00178b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b658 	.word	0x0800b658

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800b658 	.word	0x0800b658

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 fa44 	bl	8000a8c <bno055_writeData>
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	203d      	movs	r0, #61	; 0x3d
 800061c:	f000 fa36 	bl	8000a8c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000626:	2013      	movs	r0, #19
 8000628:	f000 fa24 	bl	8000a74 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800062c:	e002      	b.n	8000634 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 fa20 	bl	8000a74 <bno055_delay>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffe3 	bl	800060c <bno055_setOperationMode>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800064e:	200c      	movs	r0, #12
 8000650:	f7ff ffdc 	bl	800060c <bno055_setOperationMode>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800065c:	2120      	movs	r1, #32
 800065e:	203f      	movs	r0, #63	; 0x3f
 8000660:	f000 fa14 	bl	8000a8c <bno055_writeData>
  bno055_delay(700);
 8000664:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000668:	f000 fa04 	bl	8000a74 <bno055_delay>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  bno055_reset();
 8000676:	f7ff ffef 	bl	8000658 <bno055_reset>

  uint8_t id = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	2000      	movs	r0, #0
 8000686:	f000 faed 	bl	8000c64 <bno055_readData>
  if (id != BNO055_ID) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2ba0      	cmp	r3, #160	; 0xa0
 800068e:	d004      	beq.n	800069a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <bno055_setup+0x4c>)
 8000696:	f009 f927 	bl	80098e8 <iprintf>
  }
  bno055_setPage(0);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffa8 	bl	80005f0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	203f      	movs	r0, #63	; 0x3f
 80006a4:	f000 f9f2 	bl	8000a8c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80006a8:	f7ff ffc8 	bl	800063c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 f9e1 	bl	8000a74 <bno055_delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	0800b670 	.word	0x0800b670

080006c0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c4:	b09f      	sub	sp, #124	; 0x7c
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff8e 	bl	80005f0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d108      	bne.n	80006ee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e4:	2208      	movs	r2, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fabc 	bl	8000c64 <bno055_readData>
 80006ec:	e007      	b.n	80006fe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f6:	2206      	movs	r2, #6
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fab3 	bl	8000c64 <bno055_readData>

  double scale = 1;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	4c81      	ldr	r4, [pc, #516]	; (8000908 <bno055_getVector+0x248>)
 8000704:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	2b0e      	cmp	r3, #14
 800070e:	d108      	bne.n	8000722 <bno055_getVector+0x62>
    scale = magScale;
 8000710:	4b7e      	ldr	r3, [pc, #504]	; (800090c <bno055_getVector+0x24c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800071c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000720:	e03a      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000726:	2b08      	cmp	r3, #8
 8000728:	d007      	beq.n	800073a <bno055_getVector+0x7a>
 800072a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072e:	2b28      	cmp	r3, #40	; 0x28
 8000730:	d003      	beq.n	800073a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000736:	2b2e      	cmp	r3, #46	; 0x2e
 8000738:	d108      	bne.n	800074c <bno055_getVector+0x8c>
    scale = accelScale;
 800073a:	4b75      	ldr	r3, [pc, #468]	; (8000910 <bno055_getVector+0x250>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000746:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800074a:	e025      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800074c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000750:	2b14      	cmp	r3, #20
 8000752:	d108      	bne.n	8000766 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000754:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <bno055_getVector+0x254>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000760:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000764:	e018      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800076a:	2b1a      	cmp	r3, #26
 800076c:	d108      	bne.n	8000780 <bno055_getVector+0xc0>
    scale = eulerScale;
 800076e:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <bno055_getVector+0x258>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800077a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800077e:	e00b      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000784:	2b20      	cmp	r3, #32
 8000786:	d107      	bne.n	8000798 <bno055_getVector+0xd8>
    scale = quaScale;
 8000788:	4b64      	ldr	r3, [pc, #400]	; (800091c <bno055_getVector+0x25c>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000794:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 fc60 	bl	8009066 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80007a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d14c      	bne.n	8000848 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80007ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007c8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21a      	sxth	r2, r3
 80007dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007ee:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000814:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000818:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800082c:	b21b      	sxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b21b      	sxth	r3, r3
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800083a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800083e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000842:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000846:	e038      	b.n	80008ba <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000848:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000862:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000866:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800086e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800087a:	b21b      	sxth	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b21b      	sxth	r3, r3
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000888:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800088c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000890:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000894:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008ae:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80008b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80008ba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80008be:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80008d2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80008d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80008da:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80008de:	ec49 8b14 	vmov	d4, r8, r9
 80008e2:	ec46 5b15 	vmov	d5, r5, r6
 80008e6:	ec42 1b16 	vmov	d6, r1, r2
 80008ea:	ec44 3b17 	vmov	d7, r3, r4
}
 80008ee:	eeb0 0b44 	vmov.f64	d0, d4
 80008f2:	eeb0 1b45 	vmov.f64	d1, d5
 80008f6:	eeb0 2b46 	vmov.f64	d2, d6
 80008fa:	eeb0 3b47 	vmov.f64	d3, d7
 80008fe:	377c      	adds	r7, #124	; 0x7c
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000906:	bf00      	nop
 8000908:	3ff00000 	.word	0x3ff00000
 800090c:	20000006 	.word	0x20000006
 8000910:	20000000 	.word	0x20000000
 8000914:	20000002 	.word	0x20000002
 8000918:	20000004 	.word	0x20000004
 800091c:	20000008 	.word	0x20000008

08000920 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8000920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000924:	b091      	sub	sp, #68	; 0x44
 8000926:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff fec9 	bl	80006c0 <bno055_getVector>
 800092e:	eeb0 4b40 	vmov.f64	d4, d0
 8000932:	eeb0 5b41 	vmov.f64	d5, d1
 8000936:	eeb0 6b42 	vmov.f64	d6, d2
 800093a:	eeb0 7b43 	vmov.f64	d7, d3
 800093e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000942:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000946:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800094a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800094e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000952:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000956:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800095a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800095e:	ec49 8b14 	vmov	d4, r8, r9
 8000962:	ec46 5b15 	vmov	d5, r5, r6
 8000966:	ec42 1b16 	vmov	d6, r1, r2
 800096a:	ec44 3b17 	vmov	d7, r3, r4
}
 800096e:	eeb0 0b44 	vmov.f64	d0, d4
 8000972:	eeb0 1b45 	vmov.f64	d1, d5
 8000976:	eeb0 2b46 	vmov.f64	d2, d6
 800097a:	eeb0 3b47 	vmov.f64	d3, d7
 800097e:	3744      	adds	r7, #68	; 0x44
 8000980:	46bd      	mov	sp, r7
 8000982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000986 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8000986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098a:	b091      	sub	sp, #68	; 0x44
 800098c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800098e:	2014      	movs	r0, #20
 8000990:	f7ff fe96 	bl	80006c0 <bno055_getVector>
 8000994:	eeb0 4b40 	vmov.f64	d4, d0
 8000998:	eeb0 5b41 	vmov.f64	d5, d1
 800099c:	eeb0 6b42 	vmov.f64	d6, d2
 80009a0:	eeb0 7b43 	vmov.f64	d7, d3
 80009a4:	ed87 4b08 	vstr	d4, [r7, #32]
 80009a8:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80009ac:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80009b0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80009b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80009b8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80009bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80009c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80009c4:	ec49 8b14 	vmov	d4, r8, r9
 80009c8:	ec46 5b15 	vmov	d5, r5, r6
 80009cc:	ec42 1b16 	vmov	d6, r1, r2
 80009d0:	ec44 3b17 	vmov	d7, r3, r4
}
 80009d4:	eeb0 0b44 	vmov.f64	d0, d4
 80009d8:	eeb0 1b45 	vmov.f64	d1, d5
 80009dc:	eeb0 2b46 	vmov.f64	d2, d6
 80009e0:	eeb0 3b47 	vmov.f64	d3, d7
 80009e4:	3744      	adds	r7, #68	; 0x44
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080009ec <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80009ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009f0:	b091      	sub	sp, #68	; 0x44
 80009f2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80009f4:	201a      	movs	r0, #26
 80009f6:	f7ff fe63 	bl	80006c0 <bno055_getVector>
 80009fa:	eeb0 4b40 	vmov.f64	d4, d0
 80009fe:	eeb0 5b41 	vmov.f64	d5, d1
 8000a02:	eeb0 6b42 	vmov.f64	d6, d2
 8000a06:	eeb0 7b43 	vmov.f64	d7, d3
 8000a0a:	ed87 4b08 	vstr	d4, [r7, #32]
 8000a0e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000a12:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000a16:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000a1a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000a1e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000a22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000a26:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000a2a:	ec49 8b14 	vmov	d4, r8, r9
 8000a2e:	ec46 5b15 	vmov	d5, r5, r6
 8000a32:	ec42 1b16 	vmov	d6, r1, r2
 8000a36:	ec44 3b17 	vmov	d7, r3, r4
}
 8000a3a:	eeb0 0b44 	vmov.f64	d0, d4
 8000a3e:	eeb0 1b45 	vmov.f64	d1, d5
 8000a42:	eeb0 2b46 	vmov.f64	d2, d6
 8000a46:	eeb0 3b47 	vmov.f64	d3, d7
 8000a4a:	3744      	adds	r7, #68	; 0x44
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000a54 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <bno055_assignI2C+0x1c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20046e50 	.word	0x20046e50

08000a74 <bno055_delay>:

void bno055_delay(int time) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 ff74 	bl	800496c <HAL_Delay>
#endif
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	733b      	strb	r3, [r7, #12]
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <bno055_writeData+0x184>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	230a      	movs	r3, #10
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2150      	movs	r1, #80	; 0x50
 8000ab4:	f004 fafa 	bl	80050ac <HAL_I2C_Master_Transmit>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80a0 	beq.w	8000c04 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d103      	bne.n	8000ad2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000aca:	4852      	ldr	r0, [pc, #328]	; (8000c14 <bno055_writeData+0x188>)
 8000acc:	f008 ff80 	bl	80099d0 <puts>
 8000ad0:	e012      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d103      	bne.n	8000ae0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ad8:	484f      	ldr	r0, [pc, #316]	; (8000c18 <bno055_writeData+0x18c>)
 8000ada:	f008 ff79 	bl	80099d0 <puts>
 8000ade:	e00b      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d103      	bne.n	8000aee <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ae6:	484d      	ldr	r0, [pc, #308]	; (8000c1c <bno055_writeData+0x190>)
 8000ae8:	f008 ff72 	bl	80099d0 <puts>
 8000aec:	e004      	b.n	8000af8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	4619      	mov	r1, r3
 8000af2:	484b      	ldr	r0, [pc, #300]	; (8000c20 <bno055_writeData+0x194>)
 8000af4:	f008 fef8 	bl	80098e8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <bno055_writeData+0x184>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 fccd 	bl	800549c <HAL_I2C_GetError>
 8000b02:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d07e      	beq.n	8000c08 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d103      	bne.n	8000b18 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000b10:	4844      	ldr	r0, [pc, #272]	; (8000c24 <bno055_writeData+0x198>)
 8000b12:	f008 ff5d 	bl	80099d0 <puts>
 8000b16:	e021      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d103      	bne.n	8000b26 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <bno055_writeData+0x19c>)
 8000b20:	f008 ff56 	bl	80099d0 <puts>
 8000b24:	e01a      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d103      	bne.n	8000b34 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000b2c:	483f      	ldr	r0, [pc, #252]	; (8000c2c <bno055_writeData+0x1a0>)
 8000b2e:	f008 ff4f 	bl	80099d0 <puts>
 8000b32:	e013      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d103      	bne.n	8000b42 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000b3a:	483d      	ldr	r0, [pc, #244]	; (8000c30 <bno055_writeData+0x1a4>)
 8000b3c:	f008 ff48 	bl	80099d0 <puts>
 8000b40:	e00c      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b10      	cmp	r3, #16
 8000b46:	d103      	bne.n	8000b50 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <bno055_writeData+0x1a8>)
 8000b4a:	f008 ff41 	bl	80099d0 <puts>
 8000b4e:	e005      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	d102      	bne.n	8000b5c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000b56:	4838      	ldr	r0, [pc, #224]	; (8000c38 <bno055_writeData+0x1ac>)
 8000b58:	f008 ff3a 	bl	80099d0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <bno055_writeData+0x184>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fc8d 	bl	8005480 <HAL_I2C_GetState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b70:	4832      	ldr	r0, [pc, #200]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b72:	f008 ff2d 	bl	80099d0 <puts>
 8000b76:	e048      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d103      	bne.n	8000b86 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b80:	f008 ff26 	bl	80099d0 <puts>
 8000b84:	e041      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b24      	cmp	r3, #36	; 0x24
 8000b8a:	d103      	bne.n	8000b94 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000b8c:	482c      	ldr	r0, [pc, #176]	; (8000c40 <bno055_writeData+0x1b4>)
 8000b8e:	f008 ff1f 	bl	80099d0 <puts>
 8000b92:	e03a      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b21      	cmp	r3, #33	; 0x21
 8000b98:	d103      	bne.n	8000ba2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000b9a:	482a      	ldr	r0, [pc, #168]	; (8000c44 <bno055_writeData+0x1b8>)
 8000b9c:	f008 ff18 	bl	80099d0 <puts>
 8000ba0:	e033      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b22      	cmp	r3, #34	; 0x22
 8000ba6:	d103      	bne.n	8000bb0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ba8:	4827      	ldr	r0, [pc, #156]	; (8000c48 <bno055_writeData+0x1bc>)
 8000baa:	f008 ff11 	bl	80099d0 <puts>
 8000bae:	e02c      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b28      	cmp	r3, #40	; 0x28
 8000bb4:	d103      	bne.n	8000bbe <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <bno055_writeData+0x1c0>)
 8000bb8:	f008 ff0a 	bl	80099d0 <puts>
 8000bbc:	e025      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b29      	cmp	r3, #41	; 0x29
 8000bc2:	d103      	bne.n	8000bcc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <bno055_writeData+0x1c4>)
 8000bc6:	f008 ff03 	bl	80099d0 <puts>
 8000bca:	e01e      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd0:	d103      	bne.n	8000bda <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <bno055_writeData+0x1c8>)
 8000bd4:	f008 fefc 	bl	80099d0 <puts>
 8000bd8:	e017      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b60      	cmp	r3, #96	; 0x60
 8000bde:	d103      	bne.n	8000be8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000be0:	481d      	ldr	r0, [pc, #116]	; (8000c58 <bno055_writeData+0x1cc>)
 8000be2:	f008 fef5 	bl	80099d0 <puts>
 8000be6:	e010      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2ba0      	cmp	r3, #160	; 0xa0
 8000bec:	d103      	bne.n	8000bf6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <bno055_writeData+0x1d0>)
 8000bf0:	f008 feee 	bl	80099d0 <puts>
 8000bf4:	e009      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2be0      	cmp	r3, #224	; 0xe0
 8000bfa:	d106      	bne.n	8000c0a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <bno055_writeData+0x1d4>)
 8000bfe:	f008 fee7 	bl	80099d0 <puts>
 8000c02:	e002      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c08:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20046e50 	.word	0x20046e50
 8000c14:	0800b6ac 	.word	0x0800b6ac
 8000c18:	0800b6d0 	.word	0x0800b6d0
 8000c1c:	0800b6f8 	.word	0x0800b6f8
 8000c20:	0800b71c 	.word	0x0800b71c
 8000c24:	0800b734 	.word	0x0800b734
 8000c28:	0800b748 	.word	0x0800b748
 8000c2c:	0800b75c 	.word	0x0800b75c
 8000c30:	0800b770 	.word	0x0800b770
 8000c34:	0800b784 	.word	0x0800b784
 8000c38:	0800b798 	.word	0x0800b798
 8000c3c:	0800b7b0 	.word	0x0800b7b0
 8000c40:	0800b7c8 	.word	0x0800b7c8
 8000c44:	0800b7dc 	.word	0x0800b7dc
 8000c48:	0800b7f4 	.word	0x0800b7f4
 8000c4c:	0800b80c 	.word	0x0800b80c
 8000c50:	0800b824 	.word	0x0800b824
 8000c54:	0800b844 	.word	0x0800b844
 8000c58:	0800b864 	.word	0x0800b864
 8000c5c:	0800b87c 	.word	0x0800b87c
 8000c60:	0800b894 	.word	0x0800b894

08000c64 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <bno055_readData+0x40>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	1dfa      	adds	r2, r7, #7
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2150      	movs	r1, #80	; 0x50
 8000c82:	f004 fa13 	bl	80050ac <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <bno055_readData+0x40>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4613      	mov	r3, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	2150      	movs	r1, #80	; 0x50
 8000c98:	f004 fafc 	bl	8005294 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20046e50 	.word	0x20046e50

08000ca8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <__io_putchar+0x20>)
 8000cba:	f007 fa51 	bl	8008160 <HAL_UART_Transmit>

  return ch;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20046980 	.word	0x20046980
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	f042 8067 	bne.w	8002db2 <HAL_TIM_PeriodElapsedCallback+0x20e2>
		// TIM2 task
    switch(mode){
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d031      	beq.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	f002 805f 	beq.w	8002db0 <HAL_TIM_PeriodElapsedCallback+0x20e0>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x2a>

        break;
    }

		}
}
 8000cf6:	f002 b85c 	b.w	8002db2 <HAL_TIM_PeriodElapsedCallback+0x20e2>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4860      	ldr	r0, [pc, #384]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000d00:	f004 f912 	bl	8004f28 <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 8000d04:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d0a:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000d0c:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d12:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8000d14:	4b5d      	ldr	r3, [pc, #372]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d1a:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000d1c:	4b5c      	ldr	r3, [pc, #368]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d22:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8000d24:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d26:	881a      	ldrh	r2, [r3, #0]
 8000d28:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000d2e:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	4b58      	ldr	r3, [pc, #352]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000d38:	4b54      	ldr	r3, [pc, #336]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d3a:	881a      	ldrh	r2, [r3, #0]
 8000d3c:	4b56      	ldr	r3, [pc, #344]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8000d42:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d44:	881a      	ldrh	r2, [r3, #0]
 8000d46:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000d4c:	f002 b831 	b.w	8002db2 <HAL_TIM_PeriodElapsedCallback+0x20e2>
        cnt1 = TIM1->CNT;
 8000d50:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d58:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d62:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d6c:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b50      	ldr	r3, [pc, #320]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d76:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d88:	dd09      	ble.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0xce>
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	b25a      	sxtb	r2, r3
 8000d98:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e011      	b.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0xf2>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dae:	dd08      	ble.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000db2:	f993 3000 	ldrsb.w	r3, [r3]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000dc0:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dd2:	dd09      	ble.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	b25a      	sxtb	r2, r3
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e011      	b.n	8000e0c <HAL_TIM_PeriodElapsedCallback+0x13c>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000df8:	dd08      	ble.n	8000e0c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	b25a      	sxtb	r2, r3
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000e0a:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e1c:	dd09      	ble.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x162>
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e20:	f993 3000 	ldrsb.w	r3, [r3]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e011      	b.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x186>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e42:	dd08      	ble.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x186>
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e46:	f993 3000 	ldrsb.w	r3, [r3]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e54:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e66:	dd39      	ble.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e041      	b.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000e7c:	2000021a 	.word	0x2000021a
 8000e80:	40020400 	.word	0x40020400
 8000e84:	200002d4 	.word	0x200002d4
 8000e88:	200002d6 	.word	0x200002d6
 8000e8c:	200002d8 	.word	0x200002d8
 8000e90:	200002da 	.word	0x200002da
 8000e94:	20046e54 	.word	0x20046e54
 8000e98:	20046f38 	.word	0x20046f38
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	2000021c 	.word	0x2000021c
 8000ea4:	40000400 	.word	0x40000400
 8000ea8:	2000021e 	.word	0x2000021e
 8000eac:	40010400 	.word	0x40010400
 8000eb0:	20000220 	.word	0x20000220
 8000eb4:	40000800 	.word	0x40000800
 8000eb8:	20000222 	.word	0x20000222
 8000ebc:	20000224 	.word	0x20000224
 8000ec0:	2000022c 	.word	0x2000022c
 8000ec4:	20000226 	.word	0x20000226
 8000ec8:	2000022d 	.word	0x2000022d
 8000ecc:	20000228 	.word	0x20000228
 8000ed0:	2000022e 	.word	0x2000022e
 8000ed4:	2000022a 	.word	0x2000022a
 8000ed8:	2000022f 	.word	0x2000022f
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000edc:	4be0      	ldr	r3, [pc, #896]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4be0      	ldr	r3, [pc, #896]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eec:	dd08      	ble.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000eee:	4bde      	ldr	r3, [pc, #888]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	4bda      	ldr	r3, [pc, #872]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000efe:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000f00:	4bda      	ldr	r3, [pc, #872]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4bda      	ldr	r3, [pc, #872]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	1ad2      	subs	r2, r2, r3
 8000f0e:	4bd9      	ldr	r3, [pc, #868]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f10:	f993 3000 	ldrsb.w	r3, [r3]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	4413      	add	r3, r2
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f20:	4bd5      	ldr	r3, [pc, #852]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f32:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001250 <HAL_TIM_PeriodElapsedCallback+0x580>
 8000f36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f3e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000f42:	eddf 7ace 	vldr	s15, [pc, #824]	; 800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8000f46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f52:	4bcb      	ldr	r3, [pc, #812]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000f58:	4bca      	ldr	r3, [pc, #808]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	4bc8      	ldr	r3, [pc, #800]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f68:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	4413      	add	r3, r2
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f78:	4bbf      	ldr	r3, [pc, #764]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8a:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8001250 <HAL_TIM_PeriodElapsedCallback+0x580>
 8000f8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f96:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000f9a:	eddf 7ab8 	vldr	s15, [pc, #736]	; 800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8000f9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fa6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000faa:	4bb8      	ldr	r3, [pc, #736]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000fb0:	4bb7      	ldr	r3, [pc, #732]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4bae      	ldr	r3, [pc, #696]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	4bb5      	ldr	r3, [pc, #724]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8000fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc4:	041b      	lsls	r3, r3, #16
 8000fc6:	4413      	add	r3, r2
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000fd0:	4ba9      	ldr	r3, [pc, #676]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fda:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000fde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe2:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8001250 <HAL_TIM_PeriodElapsedCallback+0x580>
 8000fe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fee:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ff2:	eddf 7aa2 	vldr	s15, [pc, #648]	; 800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8000ff6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ffe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001002:	4ba5      	ldr	r3, [pc, #660]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8001008:	4b96      	ldr	r3, [pc, #600]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b98      	ldr	r3, [pc, #608]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	1ad2      	subs	r2, r2, r3
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001018:	f993 3000 	ldrsb.w	r3, [r3]
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	4413      	add	r3, r2
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001028:	4b93      	ldr	r3, [pc, #588]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001032:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001036:	ee27 7b06 	vmul.f64	d7, d7, d6
 800103a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001250 <HAL_TIM_PeriodElapsedCallback+0x580>
 800103e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001042:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001046:	ee37 6b07 	vadd.f64	d6, d7, d7
 800104a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>
 800104e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001052:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001056:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105a:	4b90      	ldr	r3, [pc, #576]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800105c:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res_raw = ( theta1_res - theta1_res_pre )/dt;
 8001060:	4b87      	ldr	r3, [pc, #540]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001070:	eddf 6a99 	vldr	s13, [pc, #612]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	4b8a      	ldr	r3, [pc, #552]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res_raw = ( theta2_res - theta2_res_pre )/dt;
 800107e:	4b83      	ldr	r3, [pc, #524]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800108e:	eddf 6a92 	vldr	s13, [pc, #584]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001096:	4b85      	ldr	r3, [pc, #532]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res_raw = ( theta3_res - theta3_res_pre )/dt;
 800109c:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800109e:	ed93 7a00 	vldr	s14, [r3]
 80010a2:	4b83      	ldr	r3, [pc, #524]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ac:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80010b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b4:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res_raw = ( theta4_res - theta4_res_pre )/dt;
 80010ba:	4b78      	ldr	r3, [pc, #480]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ca:	eddf 6a83 	vldr	s13, [pc, #524]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80010ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d2:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 80010d8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80010dc:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 80010e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e8:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80010ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010f0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80010f4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80010f8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80010fc:	eddf 7a77 	vldr	s15, [pc, #476]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001108:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800110c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001110:	4b6b      	ldr	r3, [pc, #428]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800111e:	4b58      	ldr	r3, [pc, #352]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001132:	ed9f 4b49 	vldr	d4, [pc, #292]	; 8001258 <HAL_TIM_PeriodElapsedCallback+0x588>
 8001136:	ee27 7b04 	vmul.f64	d7, d7, d4
 800113a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800113e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001142:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001146:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001148:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 800114c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001150:	eddf 7a62 	vldr	s15, [pc, #392]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001160:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001164:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001168:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800116c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001170:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001180:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001192:	4b3e      	ldr	r3, [pc, #248]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8001258 <HAL_TIM_PeriodElapsedCallback+0x588>
 80011aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80011ae:	ee35 7b07 	vadd.f64	d7, d5, d7
 80011b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 80011c0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80011c4:	eddf 7a45 	vldr	s15, [pc, #276]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d0:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80011d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011d8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80011dc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011e0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80011e4:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001202:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800121a:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8001258 <HAL_TIM_PeriodElapsedCallback+0x588>
 800121e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001222:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001226:	ee26 7b07 	vmul.f64	d7, d6, d7
 800122a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 8001234:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001238:	eddf 7a28 	vldr	s15, [pc, #160]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001244:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001248:	ee37 7b06 	vadd.f64	d7, d7, d6
 800124c:	e048      	b.n	80012e0 <HAL_TIM_PeriodElapsedCallback+0x610>
 800124e:	bf00      	nop
 8001250:	00000000 	.word	0x00000000
 8001254:	40500000 	.word	0x40500000
 8001258:	00000000 	.word	0x00000000
 800125c:	40590000 	.word	0x40590000
 8001260:	2000022a 	.word	0x2000022a
 8001264:	20000222 	.word	0x20000222
 8001268:	2000022f 	.word	0x2000022f
 800126c:	2000021c 	.word	0x2000021c
 8001270:	2000000a 	.word	0x2000000a
 8001274:	2000022c 	.word	0x2000022c
 8001278:	2000000c 	.word	0x2000000c
 800127c:	40490fdb 	.word	0x40490fdb
 8001280:	20000234 	.word	0x20000234
 8001284:	2000021e 	.word	0x2000021e
 8001288:	2000022d 	.word	0x2000022d
 800128c:	20000238 	.word	0x20000238
 8001290:	20000220 	.word	0x20000220
 8001294:	2000022e 	.word	0x2000022e
 8001298:	2000023c 	.word	0x2000023c
 800129c:	20000240 	.word	0x20000240
 80012a0:	20000244 	.word	0x20000244
 80012a4:	20000274 	.word	0x20000274
 80012a8:	20000248 	.word	0x20000248
 80012ac:	20000278 	.word	0x20000278
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	2000027c 	.word	0x2000027c
 80012b8:	20000250 	.word	0x20000250
 80012bc:	20000280 	.word	0x20000280
 80012c0:	20000264 	.word	0x20000264
 80012c4:	20000254 	.word	0x20000254
 80012c8:	20000268 	.word	0x20000268
 80012cc:	20000258 	.word	0x20000258
 80012d0:	2000026c 	.word	0x2000026c
 80012d4:	2000025c 	.word	0x2000025c
 80012d8:	3a83126f 	.word	0x3a83126f
 80012dc:	42480000 	.word	0x42480000
 80012e0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80012e4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80012e8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x608>
 80012ec:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 80012dc <HAL_TIM_PeriodElapsedCallback+0x60c>
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80012fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001300:	4bcf      	ldr	r3, [pc, #828]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800130a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800130e:	4bcd      	ldr	r3, [pc, #820]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001310:	ed93 7a00 	vldr	s14, [r3]
 8001314:	4bcc      	ldr	r3, [pc, #816]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001322:	ed9f 4bc3 	vldr	d4, [pc, #780]	; 8001630 <HAL_TIM_PeriodElapsedCallback+0x960>
 8001326:	ee27 7b04 	vmul.f64	d7, d7, d4
 800132a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800132e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001336:	4bc5      	ldr	r3, [pc, #788]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001338:	edc3 7a00 	vstr	s15, [r3]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 800133c:	4bc4      	ldr	r3, [pc, #784]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4bc4      	ldr	r3, [pc, #784]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800134c:	4bc2      	ldr	r3, [pc, #776]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001356:	4bbd      	ldr	r3, [pc, #756]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001360:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800165c <HAL_TIM_PeriodElapsedCallback+0x98c>
 8001364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001368:	4bbd      	ldr	r3, [pc, #756]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800136a:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 800136e:	4bb8      	ldr	r3, [pc, #736]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	4bb7      	ldr	r3, [pc, #732]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137e:	4bb6      	ldr	r3, [pc, #728]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001388:	4bb0      	ldr	r3, [pc, #704]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001392:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800165c <HAL_TIM_PeriodElapsedCallback+0x98c>
 8001396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139a:	4bb2      	ldr	r3, [pc, #712]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x994>)
 800139c:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = (Rw / 4.0) / (W + L) * ( - dtheta1_res - dtheta2_res + dtheta3_res + dtheta4_res);// [rad/sec]
 80013a0:	4bab      	ldr	r3, [pc, #684]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb1 7a67 	vneg.f32	s14, s15
 80013aa:	4baa      	ldr	r3, [pc, #680]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x984>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b4:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013be:	4ba3      	ldr	r3, [pc, #652]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013cc:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x968>
 80013d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013d8:	4ba3      	ldr	r3, [pc, #652]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
        x_res   += vx_res   * dt;// [m]
 80013de:	4ba0      	ldr	r3, [pc, #640]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x990>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800166c <HAL_TIM_PeriodElapsedCallback+0x99c>
 80013e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ec:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	4b9e      	ldr	r3, [pc, #632]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80013f8:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 80013fc:	4b99      	ldr	r3, [pc, #612]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x994>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800166c <HAL_TIM_PeriodElapsedCallback+0x99c>
 8001406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140a:	4b9a      	ldr	r3, [pc, #616]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	4b97      	ldr	r3, [pc, #604]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001416:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 800141a:	4b93      	ldr	r3, [pc, #588]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x998>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800166c <HAL_TIM_PeriodElapsedCallback+0x99c>
 8001424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001428:	4b93      	ldr	r3, [pc, #588]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	4b91      	ldr	r3, [pc, #580]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8001438:	4b90      	ldr	r3, [pc, #576]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b10      	cmp	r3, #16
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	b25a      	sxtb	r2, r3
 800144e:	4b8c      	ldr	r3, [pc, #560]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001450:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8001452:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b10      	cmp	r3, #16
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b25a      	sxtb	r2, r3
 8001468:	4b87      	ldr	r3, [pc, #540]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800146a:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 800146c:	4b87      	ldr	r3, [pc, #540]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b10      	cmp	r3, #16
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	4b83      	ldr	r3, [pc, #524]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001484:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8001486:	4b83      	ldr	r3, [pc, #524]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b10      	cmp	r3, #16
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b25a      	sxtb	r2, r3
 800149c:	4b7e      	ldr	r3, [pc, #504]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 800149e:	701a      	strb	r2, [r3, #0]
        vy_cmd = 0.5;
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80014a2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80014a6:	601a      	str	r2, [r3, #0]
        dtheta1_cmd =  20.0 * vx_cmd + 20.0 * vy_cmd - 6.0 * dphi_cmd;// [rad/sec]
 80014a8:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b2:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 80014b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014ba:	4b78      	ldr	r3, [pc, #480]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c4:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80014c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014da:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80014de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_cmd = -20.0 * vx_cmd + 20.0 * vy_cmd - 6.0 * dphi_cmd;
 80014f0:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fa:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 80014fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800150c:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8001510:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001514:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001518:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001522:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8001526:	ee27 7b05 	vmul.f64	d7, d7, d5
 800152a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800152e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001532:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8001534:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_cmd =  20.0 * vx_cmd + 20.0 * vy_cmd + 6.0 * dphi_cmd;
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001542:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001546:	ee27 6b06 	vmul.f64	d6, d7, d6
 800154a:	4b54      	ldr	r3, [pc, #336]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001554:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8001558:	ee27 7b05 	vmul.f64	d7, d7, d5
 800155c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800156a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800156e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001572:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001576:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800157a:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_cmd = -20.0 * vx_cmd + 20.0 * vy_cmd + 6.0 * dphi_cmd;
 8001580:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158a:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 800158e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800159c:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80015a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a8:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b2:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80015b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015c2:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 80015c4:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_ref = Kp_av * (dtheta1_cmd - dtheta1_res);
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 80015ca:	ed93 7a00 	vldr	s14, [r3]
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 80015e2:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_ref = Kp_av * (dtheta2_cmd - dtheta2_res);
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x984>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8001600:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref = Kp_av * (dtheta3_cmd - dtheta3_res);
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001614:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_ref = Kp_av * (dtheta4_cmd - dtheta4_res);
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8001624:	ed93 7a00 	vldr	s14, [r3]
 8001628:	e04c      	b.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0x9f4>
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	00000000 	.word	0x00000000
 8001634:	40590000 	.word	0x40590000
 8001638:	4c71c722 	.word	0x4c71c722
 800163c:	3fa55555 	.word	0x3fa55555
 8001640:	20000270 	.word	0x20000270
 8001644:	20000240 	.word	0x20000240
 8001648:	20000250 	.word	0x20000250
 800164c:	20000260 	.word	0x20000260
 8001650:	20000254 	.word	0x20000254
 8001654:	20000258 	.word	0x20000258
 8001658:	2000025c 	.word	0x2000025c
 800165c:	3c4ccccd 	.word	0x3c4ccccd
 8001660:	200002e8 	.word	0x200002e8
 8001664:	200002ec 	.word	0x200002ec
 8001668:	200002f0 	.word	0x200002f0
 800166c:	3a83126f 	.word	0x3a83126f
 8001670:	200002f4 	.word	0x200002f4
 8001674:	200002f8 	.word	0x200002f8
 8001678:	20000010 	.word	0x20000010
 800167c:	20046ef8 	.word	0x20046ef8
 8001680:	20000230 	.word	0x20000230
 8001684:	20046e94 	.word	0x20046e94
 8001688:	20000231 	.word	0x20000231
 800168c:	20046900 	.word	0x20046900
 8001690:	20000232 	.word	0x20000232
 8001694:	20046940 	.word	0x20046940
 8001698:	20000233 	.word	0x20000233
 800169c:	200002e0 	.word	0x200002e0
 80016a0:	200002dc 	.word	0x200002dc
 80016a4:	200002e4 	.word	0x200002e4
 80016a8:	20000294 	.word	0x20000294
 80016ac:	20000298 	.word	0x20000298
 80016b0:	2000029c 	.word	0x2000029c
 80016b4:	200002a0 	.word	0x200002a0
 80016b8:	20000284 	.word	0x20000284
 80016bc:	20000288 	.word	0x20000288
 80016c0:	2000028c 	.word	0x2000028c
 80016c4:	4bd7      	ldr	r3, [pc, #860]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80016d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d6:	4bd4      	ldr	r3, [pc, #848]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
        delta_dtheta1 = dtheta1_cmd - dtheta1_res;
 80016dc:	4bd3      	ldr	r3, [pc, #844]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	4bd3      	ldr	r3, [pc, #844]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ec:	4bd1      	ldr	r3, [pc, #836]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
        delta_dtheta2 = dtheta2_cmd - dtheta2_res;
 80016f2:	4bd1      	ldr	r3, [pc, #836]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	4bd0      	ldr	r3, [pc, #832]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001702:	4bcf      	ldr	r3, [pc, #828]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
        delta_dtheta3 = dtheta3_cmd - dtheta3_res;
 8001708:	4bce      	ldr	r3, [pc, #824]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd74>)
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	4bce      	ldr	r3, [pc, #824]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xd78>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	4bcc      	ldr	r3, [pc, #816]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
        delta_dtheta4 = dtheta4_cmd - dtheta4_res;
 800171e:	4bcc      	ldr	r3, [pc, #816]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	4bbf      	ldr	r3, [pc, #764]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172e:	4bc9      	ldr	r3, [pc, #804]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001730:	edc3 7a00 	vstr	s15, [r3]
        PD_controller1_av = 1.0 / (1.0 + G_LPF_D_av * dt) * ( PD_controller1_av_pre + ( Kp_av * ( 1.0 + G_LPF_D_av * dt ) + Kd_av * G_LPF_D_av )*delta_dtheta1 - (Kp_av + Kd_av * G_LPF_D_av) * delta_dtheta1_pre );
 8001734:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 8001738:	eddf 7ac8 	vldr	s15, [pc, #800]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001744:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001748:	ee37 7b06 	vadd.f64	d7, d7, d6
 800174c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001750:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001754:	4bc2      	ldr	r3, [pc, #776]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800175e:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 8001762:	eddf 7abe 	vldr	s15, [pc, #760]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001772:	ee37 7b04 	vadd.f64	d7, d7, d4
 8001776:	eeb3 4b04 	vmov.f64	d4, #52	; 0x41a00000  20.0
 800177a:	ee27 4b04 	vmul.f64	d4, d7, d4
 800177e:	4bb9      	ldr	r3, [pc, #740]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001790:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001794:	4ba7      	ldr	r3, [pc, #668]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800179e:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017a2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017a6:	4baf      	ldr	r3, [pc, #700]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 80017b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80017b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017bc:	4baa      	ldr	r3, [pc, #680]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80017ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017d6:	4ba5      	ldr	r3, [pc, #660]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 80017d8:	edc3 7a00 	vstr	s15, [r3]
        PD_controller2_av = 1.0 / (1.0 + G_LPF_D_av * dt) * ( PD_controller2_av_pre + ( Kp_av * ( 1.0 + G_LPF_D_av * dt ) + Kd_av * G_LPF_D_av )*delta_dtheta2 - (Kp_av + Kd_av * G_LPF_D_av) * delta_dtheta2_pre );
 80017dc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 80017e0:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 80017e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80017f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017f8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017fc:	4b9c      	ldr	r3, [pc, #624]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001806:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 800180a:	eddf 7a94 	vldr	s15, [pc, #592]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001816:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800181a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800181e:	eeb3 4b04 	vmov.f64	d4, #52	; 0x41a00000  20.0
 8001822:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001826:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001838:	ee34 4b07 	vadd.f64	d4, d4, d7
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001846:	ee24 7b07 	vmul.f64	d7, d4, d7
 800184a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001864:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001872:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001876:	ee26 7b07 	vmul.f64	d7, d6, d7
 800187a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800187e:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
        PD_controller3_av = 1.0 / (1.0 + G_LPF_D_av * dt) * ( PD_controller3_av_pre + ( Kp_av * ( 1.0 + G_LPF_D_av * dt ) + Kd_av * G_LPF_D_av )*delta_dtheta3 - (Kp_av + Kd_av * G_LPF_D_av) * delta_dtheta3_pre );
 8001884:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 8001888:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 800188c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001894:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001898:	ee37 7b06 	vadd.f64	d7, d7, d6
 800189c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80018a0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80018ae:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 80018b2:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 80018b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018be:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80018c2:	ee37 7b04 	vadd.f64	d7, d7, d4
 80018c6:	eeb3 4b04 	vmov.f64	d4, #52	; 0x41a00000  20.0
 80018ca:	ee27 4b04 	vmul.f64	d4, d7, d4
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 80018d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018e0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ee:	ee24 7b07 	vmul.f64	d7, d4, d7
 80018f2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800191a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800191e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001922:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001926:	4b57      	ldr	r3, [pc, #348]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
        PD_controller4_av = 1.0 / (1.0 + G_LPF_D_av * dt) * ( PD_controller4_av_pre + ( Kp_av * ( 1.0 + G_LPF_D_av * dt ) + Kd_av * G_LPF_D_av )*delta_dtheta4 - (Kp_av + Kd_av * G_LPF_D_av) * delta_dtheta4_pre );
 800192c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 8001930:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800193c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001940:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001944:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001948:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800194c:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001956:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 800195a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001966:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800196a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800196e:	eeb3 4b04 	vmov.f64	d4, #52	; 0x41a00000  20.0
 8001972:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001976:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001988:	ee34 4b07 	vadd.f64	d4, d4, d7
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001996:	ee24 7b07 	vmul.f64	d7, d4, d7
 800199a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80019b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80019c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
          PD_controller1_av_pre = PD_controller1_av;
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 80019da:	6013      	str	r3, [r2, #0]
          PD_controller2_av_pre = PD_controller2_av;
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 80019e2:	6013      	str	r3, [r2, #0]
          PD_controller3_av_pre = PD_controller3_av;
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80019ea:	6013      	str	r3, [r2, #0]
          PD_controller4_av_pre = PD_controller4_av;
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 80019f2:	6013      	str	r3, [r2, #0]
          delta_dtheta1_pre = delta_dtheta1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80019fa:	6013      	str	r3, [r2, #0]
          delta_dtheta2_pre = delta_dtheta2;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001a02:	6013      	str	r3, [r2, #0]
          delta_dtheta3_pre = delta_dtheta3;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001a0a:	6013      	str	r3, [r2, #0]
          delta_dtheta4_pre = delta_dtheta4;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8001a12:	6013      	str	r3, [r2, #0]
        ddtheta1_ref = PD_controller1_av;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8001a1a:	6013      	str	r3, [r2, #0]
        ddtheta2_ref = PD_controller2_av;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e03a      	b.n	8001a98 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 8001a22:	bf00      	nop
 8001a24:	20000260 	.word	0x20000260
 8001a28:	20000290 	.word	0x20000290
 8001a2c:	20000294 	.word	0x20000294
 8001a30:	20000254 	.word	0x20000254
 8001a34:	2000031c 	.word	0x2000031c
 8001a38:	20000298 	.word	0x20000298
 8001a3c:	20000258 	.word	0x20000258
 8001a40:	20000320 	.word	0x20000320
 8001a44:	2000029c 	.word	0x2000029c
 8001a48:	2000025c 	.word	0x2000025c
 8001a4c:	20000324 	.word	0x20000324
 8001a50:	200002a0 	.word	0x200002a0
 8001a54:	20000328 	.word	0x20000328
 8001a58:	3a83126f 	.word	0x3a83126f
 8001a5c:	42480000 	.word	0x42480000
 8001a60:	2000030c 	.word	0x2000030c
 8001a64:	20000014 	.word	0x20000014
 8001a68:	2000032c 	.word	0x2000032c
 8001a6c:	200002fc 	.word	0x200002fc
 8001a70:	20000310 	.word	0x20000310
 8001a74:	20000330 	.word	0x20000330
 8001a78:	20000300 	.word	0x20000300
 8001a7c:	20000314 	.word	0x20000314
 8001a80:	20000334 	.word	0x20000334
 8001a84:	20000304 	.word	0x20000304
 8001a88:	20000318 	.word	0x20000318
 8001a8c:	20000338 	.word	0x20000338
 8001a90:	20000308 	.word	0x20000308
 8001a94:	20000284 	.word	0x20000284
 8001a98:	4ad4      	ldr	r2, [pc, #848]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x111c>)
 8001a9a:	6013      	str	r3, [r2, #0]
        ddtheta3_ref = PD_controller3_av;
 8001a9c:	4bd4      	ldr	r3, [pc, #848]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x1120>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4ad4      	ldr	r2, [pc, #848]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x1124>)
 8001aa2:	6013      	str	r3, [r2, #0]
        ddtheta4_ref = PD_controller4_av;
 8001aa4:	4bd4      	ldr	r3, [pc, #848]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x1128>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4ad4      	ldr	r2, [pc, #848]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x112c>)
 8001aaa:	6013      	str	r3, [r2, #0]
        i1_ref = M11 * ddtheta1_ref / ( Gear * Ktn );
 8001aac:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001ab0:	4bd4      	ldr	r3, [pc, #848]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1134>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aba:	eddf 6ad3 	vldr	s13, [pc, #844]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	4bd2      	ldr	r3, [pc, #840]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x113c>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = M22 * ddtheta2_ref / ( Gear * Ktn );
 8001ac8:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001acc:	4bc7      	ldr	r3, [pc, #796]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x111c>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad6:	eddf 6acc 	vldr	s13, [pc, #816]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	4bcc      	ldr	r3, [pc, #816]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x1140>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = M33 * ddtheta3_ref / ( Gear * Ktn );
 8001ae4:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001ae8:	4bc2      	ldr	r3, [pc, #776]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x1124>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af2:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	4bc6      	ldr	r3, [pc, #792]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x1144>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = M44 * ddtheta4_ref / ( Gear * Ktn );// Gear * Gear * J4 
 8001b00:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001b04:	4bbd      	ldr	r3, [pc, #756]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x112c>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	eddf 6abe 	vldr	s13, [pc, #760]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001b12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b16:	4bc0      	ldr	r3, [pc, #768]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1148>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 8001b1c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001b20:	eddf 7abf 	vldr	s15, [pc, #764]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b34:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001b38:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b3c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001b40:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x1154>
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001e28 <HAL_TIM_PeriodElapsedCallback+0x1158>
 8001b54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b58:	4bb4      	ldr	r3, [pc, #720]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b62:	4bb3      	ldr	r3, [pc, #716]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6c:	eddf 5aa4 	vldr	s11, [pc, #656]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001b70:	eddf 7aab 	vldr	s15, [pc, #684]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001b74:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001b78:	4bae      	ldr	r3, [pc, #696]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x1164>)
 8001b7a:	ed93 5a00 	vldr	s10, [r3]
 8001b7e:	4bae      	ldr	r3, [pc, #696]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001b88:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b9c:	4ba7      	ldr	r3, [pc, #668]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 8001ba2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001ba6:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001bbe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001bc2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001bc6:	eddf 7a96 	vldr	s15, [pc, #600]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x1154>
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001e28 <HAL_TIM_PeriodElapsedCallback+0x1158>
 8001bda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bde:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be8:	4b96      	ldr	r3, [pc, #600]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	eddf 5a83 	vldr	s11, [pc, #524]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001bf6:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001bfa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001bfe:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001c00:	ed93 5a00 	vldr	s10, [r3]
 8001c04:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001c0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 8001c24:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 8001c28:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001c2c:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c40:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001c44:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c48:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001c4c:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x1154>
 8001c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001e28 <HAL_TIM_PeriodElapsedCallback+0x1158>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1184>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	4b7a      	ldr	r3, [pc, #488]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x1188>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c78:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001c7c:	eddf 7a68 	vldr	s15, [pc, #416]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001c80:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x118c>)
 8001c86:	ed93 5a00 	vldr	s10, [r3]
 8001c8a:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x1190>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001c94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ca4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ca8:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 8001cae:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001cb2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cbe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cc2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cc6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001cca:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001cce:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x114c>
 8001cd2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x1154>
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001e28 <HAL_TIM_PeriodElapsedCallback+0x1158>
 8001ce6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x1198>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf4:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x119c>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfe:	eddf 5a40 	vldr	s11, [pc, #256]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001d02:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001d06:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d0a:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x11a0>)
 8001d0c:	ed93 5a00 	vldr	s10, [r3]
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d2e:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 8001d34:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8001d3a:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 8001d3c:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a40      	ldr	r2, [pc, #256]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001d42:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 8001d44:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x1188>)
 8001d4a:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x119c>)
 8001d52:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8001d5a:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a47      	ldr	r2, [pc, #284]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8001d62:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1184>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a46      	ldr	r2, [pc, #280]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8001d6a:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 8001d6c:	4b3e      	ldr	r3, [pc, #248]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x1198>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a45      	ldr	r2, [pc, #276]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 8001d72:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x11bc>)
 8001d84:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 8001d8a:	ed93 7a00 	vldr	s14, [r3]
 8001d8e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8001dac:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8001dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dbe:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res;// * Continuous
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001e00 <HAL_TIM_PeriodElapsedCallback+0x1130>
 8001dce:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x1150>
 8001dd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x1164>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 8001de6:	edc3 7a00 	vstr	s15, [r3]
 8001dea:	e05b      	b.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x11d4>
 8001dec:	20000288 	.word	0x20000288
 8001df0:	20000304 	.word	0x20000304
 8001df4:	2000028c 	.word	0x2000028c
 8001df8:	20000308 	.word	0x20000308
 8001dfc:	20000290 	.word	0x20000290
 8001e00:	3b19021a 	.word	0x3b19021a
 8001e04:	20000284 	.word	0x20000284
 8001e08:	3f5b8bac 	.word	0x3f5b8bac
 8001e0c:	200002a4 	.word	0x200002a4
 8001e10:	200002a8 	.word	0x200002a8
 8001e14:	200002ac 	.word	0x200002ac
 8001e18:	200002b0 	.word	0x200002b0
 8001e1c:	3a83126f 	.word	0x3a83126f
 8001e20:	42480000 	.word	0x42480000
 8001e24:	42800000 	.word	0x42800000
 8001e28:	3c5b8bac 	.word	0x3c5b8bac
 8001e2c:	200002b4 	.word	0x200002b4
 8001e30:	2000036c 	.word	0x2000036c
 8001e34:	20000254 	.word	0x20000254
 8001e38:	20000264 	.word	0x20000264
 8001e3c:	2000035c 	.word	0x2000035c
 8001e40:	200002b8 	.word	0x200002b8
 8001e44:	20000370 	.word	0x20000370
 8001e48:	20000258 	.word	0x20000258
 8001e4c:	20000268 	.word	0x20000268
 8001e50:	20000360 	.word	0x20000360
 8001e54:	200002bc 	.word	0x200002bc
 8001e58:	20000374 	.word	0x20000374
 8001e5c:	2000025c 	.word	0x2000025c
 8001e60:	2000026c 	.word	0x2000026c
 8001e64:	20000364 	.word	0x20000364
 8001e68:	200002c0 	.word	0x200002c0
 8001e6c:	20000378 	.word	0x20000378
 8001e70:	20000260 	.word	0x20000260
 8001e74:	20000270 	.word	0x20000270
 8001e78:	20000368 	.word	0x20000368
 8001e7c:	200002c4 	.word	0x200002c4
 8001e80:	200002c8 	.word	0x200002c8
 8001e84:	200002cc 	.word	0x200002cc
 8001e88:	200002d0 	.word	0x200002d0
 8001e8c:	2000037c 	.word	0x2000037c
 8001e90:	20000380 	.word	0x20000380
 8001e94:	20000384 	.word	0x20000384
 8001e98:	20000388 	.word	0x20000388
 8001e9c:	200003ac 	.word	0x200003ac
 8001ea0:	2000038c 	.word	0x2000038c
        tau_dfob2 = integral_tau_dfob2 - M22 * G_DFOB * dtheta2_res;// * Continuous
 8001ea4:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1358>)
 8001ea6:	ed93 7a00 	vldr	s14, [r3]
 8001eaa:	eddf 6a60 	vldr	s13, [pc, #384]	; 800202c <HAL_TIM_PeriodElapsedCallback+0x135c>
 8001eae:	eddf 7a60 	vldr	s15, [pc, #384]	; 8002030 <HAL_TIM_PeriodElapsedCallback+0x1360>
 8001eb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x1364>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec4:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1368>)
 8001ec6:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M33 * G_DFOB * dtheta3_res;// * Continuous
 8001eca:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x136c>)
 8001ecc:	ed93 7a00 	vldr	s14, [r3]
 8001ed0:	eddf 6a56 	vldr	s13, [pc, #344]	; 800202c <HAL_TIM_PeriodElapsedCallback+0x135c>
 8001ed4:	eddf 7a56 	vldr	s15, [pc, #344]	; 8002030 <HAL_TIM_PeriodElapsedCallback+0x1360>
 8001ed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1370>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eea:	4b56      	ldr	r3, [pc, #344]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x1374>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M44 * G_DFOB * dtheta4_res;// * Continuous
 8001ef0:	4b55      	ldr	r3, [pc, #340]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x1378>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800202c <HAL_TIM_PeriodElapsedCallback+0x135c>
 8001efa:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8002030 <HAL_TIM_PeriodElapsedCallback+0x1360>
 8001efe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f02:	4b52      	ldr	r3, [pc, #328]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x137c>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x1380>)
 8001f12:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 8001f16:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x1384>)
 8001f18:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x1256>
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d00f      	beq.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x1274>
 8001f24:	e01d      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x1292>
            tau_fric1 = F1_plus + D1_plus * dtheta1_res;
 8001f26:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002058 <HAL_TIM_PeriodElapsedCallback+0x1388>
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x138c>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f34:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002060 <HAL_TIM_PeriodElapsedCallback+0x1390>
 8001f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f3c:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x1394>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001f42:	e00e      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x1292>
            tau_fric1 = F1_minus + D1_minus * dtheta1_res;
 8001f44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002068 <HAL_TIM_PeriodElapsedCallback+0x1398>
 8001f48:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x138c>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x139c>
 8001f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x1394>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001f60:	bf00      	nop
        switch(direc2){
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x13a0>)
 8001f64:	f993 3000 	ldrsb.w	r3, [r3]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0x12a2>
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d00f      	beq.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x12c0>
 8001f70:	e01d      	b.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x12de>
            tau_fric2 = F2_plus + D2_plus * dtheta2_res;
 8001f72:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002074 <HAL_TIM_PeriodElapsedCallback+0x13a4>
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x1364>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f80:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002078 <HAL_TIM_PeriodElapsedCallback+0x13a8>
 8001f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x13ac>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001f8e:	e00e      	b.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x12de>
            tau_fric2 = F2_minus + D2_minus * dtheta2_res;
 8001f90:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002080 <HAL_TIM_PeriodElapsedCallback+0x13b0>
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x1364>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002084 <HAL_TIM_PeriodElapsedCallback+0x13b4>
 8001fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa6:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x13ac>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001fac:	bf00      	nop
        switch(direc3){
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x13b8>)
 8001fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x12ee>
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d00f      	beq.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x130c>
 8001fbc:	e01d      	b.n	8001ffa <HAL_TIM_PeriodElapsedCallback+0x132a>
            tau_fric3 = F3_plus + D3_plus * dtheta3_res;
 8001fbe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800208c <HAL_TIM_PeriodElapsedCallback+0x13bc>
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1370>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fcc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002090 <HAL_TIM_PeriodElapsedCallback+0x13c0>
 8001fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x13c4>)
 8001fd6:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001fda:	e00e      	b.n	8001ffa <HAL_TIM_PeriodElapsedCallback+0x132a>
            tau_fric3 = F3_minus + D3_minus * dtheta3_res;
 8001fdc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002098 <HAL_TIM_PeriodElapsedCallback+0x13c8>
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1370>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800209c <HAL_TIM_PeriodElapsedCallback+0x13cc>
 8001fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x13c4>)
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001ff8:	bf00      	nop
        switch(direc4){
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 8001ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_TIM_PeriodElapsedCallback+0x133a>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d055      	beq.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x13e4>
 8002008:	e063      	b.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x1402>
            tau_fric4 = F4_plus + D4_plus * dtheta4_res;
 800200a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80020a4 <HAL_TIM_PeriodElapsedCallback+0x13d4>
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x137c>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002018:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80020a8 <HAL_TIM_PeriodElapsedCallback+0x13d8>
 800201c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 8002022:	edc3 7a00 	vstr	s15, [r3]
            break;
 8002026:	e054      	b.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x1402>
 8002028:	200003b0 	.word	0x200003b0
 800202c:	3b19021a 	.word	0x3b19021a
 8002030:	42480000 	.word	0x42480000
 8002034:	20000258 	.word	0x20000258
 8002038:	20000390 	.word	0x20000390
 800203c:	200003b4 	.word	0x200003b4
 8002040:	2000025c 	.word	0x2000025c
 8002044:	20000394 	.word	0x20000394
 8002048:	200003b8 	.word	0x200003b8
 800204c:	20000260 	.word	0x20000260
 8002050:	20000398 	.word	0x20000398
 8002054:	20000230 	.word	0x20000230
 8002058:	3a03126f 	.word	0x3a03126f
 800205c:	20000254 	.word	0x20000254
 8002060:	3c8db8bb 	.word	0x3c8db8bb
 8002064:	200003d8 	.word	0x200003d8
 8002068:	3a1d4952 	.word	0x3a1d4952
 800206c:	3d2dab9f 	.word	0x3d2dab9f
 8002070:	20000231 	.word	0x20000231
 8002074:	39d1b717 	.word	0x39d1b717
 8002078:	3ca8c155 	.word	0x3ca8c155
 800207c:	200003dc 	.word	0x200003dc
 8002080:	36eae18b 	.word	0x36eae18b
 8002084:	3d571d1d 	.word	0x3d571d1d
 8002088:	20000232 	.word	0x20000232
 800208c:	3a902de0 	.word	0x3a902de0
 8002090:	3d202752 	.word	0x3d202752
 8002094:	200003e0 	.word	0x200003e0
 8002098:	3b09a027 	.word	0x3b09a027
 800209c:	3d81a36e 	.word	0x3d81a36e
 80020a0:	20000233 	.word	0x20000233
 80020a4:	3a9d4952 	.word	0x3a9d4952
 80020a8:	3ce21965 	.word	0x3ce21965
 80020ac:	200003e4 	.word	0x200003e4
 80020b0:	3a83126f 	.word	0x3a83126f
            tau_fric4 = F4_minus + D4_minus * dtheta4_res;
 80020b4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80020b0 <HAL_TIM_PeriodElapsedCallback+0x13e0>
 80020b8:	4bd1      	ldr	r3, [pc, #836]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x1730>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c2:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8002404 <HAL_TIM_PeriodElapsedCallback+0x1734>
 80020c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ca:	4bcf      	ldr	r3, [pc, #828]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x1738>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]
            break;
 80020d0:	bf00      	nop
        if( dtheta1_res < 0.5 && dtheta1_res > -0.5 ) tau_fric1 = 0.0;
 80020d2:	4bce      	ldr	r3, [pc, #824]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x173c>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	d50d      	bpl.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x1432>
 80020e6:	4bc9      	ldr	r3, [pc, #804]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x173c>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80020f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	dd03      	ble.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x1432>
 80020fa:	4bc5      	ldr	r3, [pc, #788]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x1740>)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
        if( dtheta2_res < 0.5 && dtheta2_res > -0.5 ) tau_fric2 = 0.0;
 8002102:	4bc4      	ldr	r3, [pc, #784]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x1744>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800210c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	d50d      	bpl.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x1462>
 8002116:	4bbf      	ldr	r3, [pc, #764]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x1744>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	dd03      	ble.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x1462>
 800212a:	4bbb      	ldr	r3, [pc, #748]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x1748>)
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
        if( dtheta3_res < 0.5 && dtheta3_res > -0.5 ) tau_fric3 = 0.0;
 8002132:	4bba      	ldr	r3, [pc, #744]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x174c>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800213c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	d50d      	bpl.n	8002162 <HAL_TIM_PeriodElapsedCallback+0x1492>
 8002146:	4bb5      	ldr	r3, [pc, #724]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x174c>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	dd03      	ble.n	8002162 <HAL_TIM_PeriodElapsedCallback+0x1492>
 800215a:	4bb1      	ldr	r3, [pc, #708]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x1750>)
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
        if( dtheta4_res < 0.5 && dtheta4_res > -0.5 ) tau_fric4 = 0.0;
 8002162:	4ba7      	ldr	r3, [pc, #668]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x1730>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800216c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	d50d      	bpl.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x14c2>
 8002176:	4ba2      	ldr	r3, [pc, #648]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x1730>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	dd03      	ble.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x14c2>
 800218a:	4b9f      	ldr	r3, [pc, #636]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x1738>)
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
        integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - tau_fric1 - integral_tau_dfob1) * G_DFOB * dt;
 8002192:	4ba4      	ldr	r3, [pc, #656]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x1754>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002428 <HAL_TIM_PeriodElapsedCallback+0x1758>
 800219c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021a0:	eddf 6aa2 	vldr	s13, [pc, #648]	; 800242c <HAL_TIM_PeriodElapsedCallback+0x175c>
 80021a4:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 80021a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021ac:	4b97      	ldr	r3, [pc, #604]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x173c>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ba:	4b95      	ldr	r3, [pc, #596]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x1740>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c4:	4b9b      	ldr	r3, [pc, #620]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1764>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ce:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 80021d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002438 <HAL_TIM_PeriodElapsedCallback+0x1768>
 80021da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021de:	4b95      	ldr	r3, [pc, #596]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1764>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1764>)
 80021ea:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - tau_fric2 - integral_tau_dfob2) * G_DFOB * dt;
 80021ee:	4b93      	ldr	r3, [pc, #588]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x176c>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002428 <HAL_TIM_PeriodElapsedCallback+0x1758>
 80021f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021fc:	eddf 6a8b 	vldr	s13, [pc, #556]	; 800242c <HAL_TIM_PeriodElapsedCallback+0x175c>
 8002200:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 8002204:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002208:	4b82      	ldr	r3, [pc, #520]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x1744>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	4b80      	ldr	r3, [pc, #512]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x1748>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002220:	4b87      	ldr	r3, [pc, #540]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1770>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 800222e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002232:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002438 <HAL_TIM_PeriodElapsedCallback+0x1768>
 8002236:	ee27 7a87 	vmul.f32	s14, s15, s14
 800223a:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1770>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002244:	4b7e      	ldr	r3, [pc, #504]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1770>)
 8002246:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - tau_fric3 - integral_tau_dfob3) * G_DFOB * dt;
 800224a:	4b7e      	ldr	r3, [pc, #504]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002428 <HAL_TIM_PeriodElapsedCallback+0x1758>
 8002254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002258:	eddf 6a74 	vldr	s13, [pc, #464]	; 800242c <HAL_TIM_PeriodElapsedCallback+0x175c>
 800225c:	eddf 7a74 	vldr	s15, [pc, #464]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 8002260:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002264:	4b6d      	ldr	r3, [pc, #436]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x174c>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002272:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x1750>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee37 7a67 	vsub.f32	s14, s14, s15
 800227c:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1778>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002286:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 800228a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002438 <HAL_TIM_PeriodElapsedCallback+0x1768>
 8002292:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002296:	4b6c      	ldr	r3, [pc, #432]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1778>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	4b69      	ldr	r3, [pc, #420]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1778>)
 80022a2:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - tau_fric4 - integral_tau_dfob4) * G_DFOB * dt;
 80022a6:	4b69      	ldr	r3, [pc, #420]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x177c>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002428 <HAL_TIM_PeriodElapsedCallback+0x1758>
 80022b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800242c <HAL_TIM_PeriodElapsedCallback+0x175c>
 80022b8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 80022bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x1730>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x1738>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022d8:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002430 <HAL_TIM_PeriodElapsedCallback+0x1760>
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002438 <HAL_TIM_PeriodElapsedCallback+0x1768>
 80022ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022f2:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fc:	4b54      	ldr	r3, [pc, #336]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 80022fe:	edc3 7a00 	vstr	s15, [r3]
          tau_dfob1_pre = tau_dfob1;
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a54      	ldr	r2, [pc, #336]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1788>)
 8002308:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 800230a:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1790>)
 8002310:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a54      	ldr	r2, [pc, #336]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 8002318:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 800231a:	4b54      	ldr	r3, [pc, #336]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a54      	ldr	r2, [pc, #336]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x17a0>)
 8002320:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw;// [N] Element of fd's wheel rotation direction
 8002322:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>)
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>
 800232c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002330:	4b51      	ldr	r3, [pc, #324]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x17a8>)
 8002332:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw;
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>
 8002340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002344:	4b4d      	ldr	r3, [pc, #308]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x17ac>)
 8002346:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw;
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>
 8002354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002358:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x17b0>)
 800235a:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw;
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>
 8002368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236c:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x17b4>)
 800236e:	edc3 7a00 	vstr	s15, [r3]
        fx_hat = 1.0 / Rw             * (   tau_dfob1 - tau_dfob2 + tau_dfob3 - tau_dfob4 );
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>)
 8002374:	ed93 7a00 	vldr	s14, [r3]
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002396:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800239a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80023f8 <HAL_TIM_PeriodElapsedCallback+0x1728>
 800239e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x17b8>)
 80023a8:	edc3 7a00 	vstr	s15, [r3]
        fy_hat = 1.0 / Rw             * (   tau_dfob1 + tau_dfob2 + tau_dfob3 + tau_dfob4 );
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>)
 80023ae:	ed93 7a00 	vldr	s14, [r3]
 80023b2:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023bc:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023d4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80023f8 <HAL_TIM_PeriodElapsedCallback+0x1728>
 80023d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x17bc>)
 80023e2:	edc3 7a00 	vstr	s15, [r3]
        Mz_hat = 1.0 / Rw * ( L + W ) * ( - tau_dfob1 - tau_dfob2 + tau_dfob3 + tau_dfob4 );
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eeb1 7a67 	vneg.f32	s14, s15
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	e04b      	b.n	8002490 <HAL_TIM_PeriodElapsedCallback+0x17c0>
 80023f8:	fb000001 	.word	0xfb000001
 80023fc:	4033ffff 	.word	0x4033ffff
 8002400:	20000260 	.word	0x20000260
 8002404:	3d87fcb9 	.word	0x3d87fcb9
 8002408:	200003e4 	.word	0x200003e4
 800240c:	20000254 	.word	0x20000254
 8002410:	200003d8 	.word	0x200003d8
 8002414:	20000258 	.word	0x20000258
 8002418:	200003dc 	.word	0x200003dc
 800241c:	2000025c 	.word	0x2000025c
 8002420:	200003e0 	.word	0x200003e0
 8002424:	200002b4 	.word	0x200002b4
 8002428:	3f5b8bac 	.word	0x3f5b8bac
 800242c:	3b19021a 	.word	0x3b19021a
 8002430:	42480000 	.word	0x42480000
 8002434:	200003ac 	.word	0x200003ac
 8002438:	3a83126f 	.word	0x3a83126f
 800243c:	200002b8 	.word	0x200002b8
 8002440:	200003b0 	.word	0x200003b0
 8002444:	200002bc 	.word	0x200002bc
 8002448:	200003b4 	.word	0x200003b4
 800244c:	200002c0 	.word	0x200002c0
 8002450:	200003b8 	.word	0x200003b8
 8002454:	2000038c 	.word	0x2000038c
 8002458:	2000039c 	.word	0x2000039c
 800245c:	20000390 	.word	0x20000390
 8002460:	200003a0 	.word	0x200003a0
 8002464:	20000394 	.word	0x20000394
 8002468:	200003a4 	.word	0x200003a4
 800246c:	20000398 	.word	0x20000398
 8002470:	200003a8 	.word	0x200003a8
 8002474:	3d4ccccd 	.word	0x3d4ccccd
 8002478:	200003bc 	.word	0x200003bc
 800247c:	200003c0 	.word	0x200003c0
 8002480:	200003c4 	.word	0x200003c4
 8002484:	200003c8 	.word	0x200003c8
 8002488:	200003cc 	.word	0x200003cc
 800248c:	200003d0 	.word	0x200003d0
 8002490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002494:	4b52      	ldr	r3, [pc, #328]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x1910>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x1914>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ac:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80025d8 <HAL_TIM_PeriodElapsedCallback+0x1908>
 80024b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x1918>)
 80024ba:	edc3 7a00 	vstr	s15, [r3]
        ia1_ref = i1_ref + i1_comp;
 80024be:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x191c>)
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 80024d0:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 80024d4:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x192c>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e4:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 80024e6:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x1934>)
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	4b45      	ldr	r3, [pc, #276]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 80024fc:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 8002500:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x1940>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x1944>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 8002512:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800261c <HAL_TIM_PeriodElapsedCallback+0x194c>
 8002520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd03      	ble.n	8002532 <HAL_TIM_PeriodElapsedCallback+0x1862>
 800252a:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800252c:	4a3c      	ldr	r2, [pc, #240]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e00c      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x187c>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002624 <HAL_TIM_PeriodElapsedCallback+0x1954>
 800253c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	d502      	bpl.n	800254c <HAL_TIM_PeriodElapsedCallback+0x187c>
 8002546:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 8002548:	4a37      	ldr	r2, [pc, #220]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x1958>)
 800254a:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 800254c:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800261c <HAL_TIM_PeriodElapsedCallback+0x194c>
 8002556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	dd03      	ble.n	8002568 <HAL_TIM_PeriodElapsedCallback+0x1898>
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 8002562:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00c      	b.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x18b2>
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002624 <HAL_TIM_PeriodElapsedCallback+0x1954>
 8002572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	d502      	bpl.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x18b2>
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800257e:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8002580:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800261c <HAL_TIM_PeriodElapsedCallback+0x194c>
 800258c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	dd03      	ble.n	800259e <HAL_TIM_PeriodElapsedCallback+0x18ce>
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e00c      	b.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x18e8>
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 800259e:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002624 <HAL_TIM_PeriodElapsedCallback+0x1954>
 80025a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d502      	bpl.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x18e8>
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 80025b4:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x1958>)
 80025b6:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800261c <HAL_TIM_PeriodElapsedCallback+0x194c>
 80025c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	dd2f      	ble.n	800262c <HAL_TIM_PeriodElapsedCallback+0x195c>
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e038      	b.n	8002646 <HAL_TIM_PeriodElapsedCallback+0x1976>
 80025d4:	f3af 8000 	nop.w
 80025d8:	09fffffd 	.word	0x09fffffd
 80025dc:	40180000 	.word	0x40180000
 80025e0:	20000394 	.word	0x20000394
 80025e4:	20000398 	.word	0x20000398
 80025e8:	200003d4 	.word	0x200003d4
 80025ec:	200002a4 	.word	0x200002a4
 80025f0:	2000037c 	.word	0x2000037c
 80025f4:	200002b4 	.word	0x200002b4
 80025f8:	200002a8 	.word	0x200002a8
 80025fc:	20000380 	.word	0x20000380
 8002600:	200002b8 	.word	0x200002b8
 8002604:	200002ac 	.word	0x200002ac
 8002608:	20000384 	.word	0x20000384
 800260c:	200002bc 	.word	0x200002bc
 8002610:	200002b0 	.word	0x200002b0
 8002614:	20000388 	.word	0x20000388
 8002618:	200002c0 	.word	0x200002c0
 800261c:	3fb33333 	.word	0x3fb33333
 8002620:	3fb33333 	.word	0x3fb33333
 8002624:	bfb33333 	.word	0xbfb33333
 8002628:	bfb33333 	.word	0xbfb33333
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 800262c:	4ba8      	ldr	r3, [pc, #672]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80028d4 <HAL_TIM_PeriodElapsedCallback+0x1c04>
 8002636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d502      	bpl.n	8002646 <HAL_TIM_PeriodElapsedCallback+0x1976>
 8002640:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 8002642:	4aa5      	ldr	r2, [pc, #660]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1c08>)
 8002644:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8002646:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x1c0c>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002650:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80028b8 <HAL_TIM_PeriodElapsedCallback+0x1be8>
 8002654:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002658:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80028c0 <HAL_TIM_PeriodElapsedCallback+0x1bf0>
 800265c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002664:	ee17 3a90 	vmov	r3, s15
 8002668:	b29a      	uxth	r2, r3
 800266a:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 800266c:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 800266e:	4b9d      	ldr	r3, [pc, #628]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002678:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80028b8 <HAL_TIM_PeriodElapsedCallback+0x1be8>
 800267c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002680:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80028c0 <HAL_TIM_PeriodElapsedCallback+0x1bf0>
 8002684:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002688:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800268c:	ee17 3a90 	vmov	r3, s15
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b95      	ldr	r3, [pc, #596]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 8002694:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8002696:	4b95      	ldr	r3, [pc, #596]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x1c1c>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026a0:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80028b8 <HAL_TIM_PeriodElapsedCallback+0x1be8>
 80026a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026a8:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80028c0 <HAL_TIM_PeriodElapsedCallback+0x1bf0>
 80026ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026b4:	ee17 3a90 	vmov	r3, s15
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 80026bc:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 80026be:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c8:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 80028b8 <HAL_TIM_PeriodElapsedCallback+0x1be8>
 80026cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026d0:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 80028c0 <HAL_TIM_PeriodElapsedCallback+0x1bf0>
 80026d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026dc:	ee17 3a90 	vmov	r3, s15
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4b84      	ldr	r3, [pc, #528]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 80026e4:	801a      	strh	r2, [r3, #0]
        if(PWM1 >= PWM_rsl * 0.9){
 80026e6:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026f2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80028c8 <HAL_TIM_PeriodElapsedCallback+0x1bf8>
 80026f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	db03      	blt.n	8002708 <HAL_TIM_PeriodElapsedCallback+0x1a38>
          PWM1 = PWM_rsl * 0.85;
 8002700:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 8002702:	f640 5248 	movw	r2, #3400	; 0xd48
 8002706:	801a      	strh	r2, [r3, #0]
        if(PWM2 >= PWM_rsl * 0.9){
 8002708:	4b77      	ldr	r3, [pc, #476]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002714:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80028c8 <HAL_TIM_PeriodElapsedCallback+0x1bf8>
 8002718:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	db03      	blt.n	800272a <HAL_TIM_PeriodElapsedCallback+0x1a5a>
          PWM2 = PWM_rsl * 0.85;
 8002722:	4b71      	ldr	r3, [pc, #452]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 8002724:	f640 5248 	movw	r2, #3400	; 0xd48
 8002728:	801a      	strh	r2, [r3, #0]
        if(PWM3 >= PWM_rsl * 0.9){
 800272a:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002736:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80028c8 <HAL_TIM_PeriodElapsedCallback+0x1bf8>
 800273a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	db03      	blt.n	800274c <HAL_TIM_PeriodElapsedCallback+0x1a7c>
          PWM3 = PWM_rsl * 0.85;
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 8002746:	f640 5248 	movw	r2, #3400	; 0xd48
 800274a:	801a      	strh	r2, [r3, #0]
        if(PWM4 >= PWM_rsl * 0.9){
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002758:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80028c8 <HAL_TIM_PeriodElapsedCallback+0x1bf8>
 800275c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	db03      	blt.n	800276e <HAL_TIM_PeriodElapsedCallback+0x1a9e>
          PWM4 = PWM_rsl * 0.85;
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 8002768:	f640 5248 	movw	r2, #3400	; 0xd48
 800276c:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 8002770:	881a      	ldrh	r2, [r3, #0]
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x1c28>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8002778:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	4b5e      	ldr	r3, [pc, #376]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x1c28>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x1c2c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 800278e:	881a      	ldrh	r2, [r3, #0]
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x1c2c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 8002796:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x1c30>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5a      	ldr	r2, [pc, #360]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x1c34>)
 800279c:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 800279e:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x1c38>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5a      	ldr	r2, [pc, #360]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x1c3c>)
 80027a4:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x1c40>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x1c44>)
 80027ac:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 80027ae:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5a      	ldr	r2, [pc, #360]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x1c4c>)
 80027b4:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 80027b6:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x1c54>)
 80027bc:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1c58>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5a      	ldr	r2, [pc, #360]	; (800292c <HAL_TIM_PeriodElapsedCallback+0x1c5c>)
 80027c4:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 80027c6:	4b5a      	ldr	r3, [pc, #360]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1c60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5a      	ldr	r2, [pc, #360]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x1c64>)
 80027cc:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 80027ce:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1c68>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x1c6c>)
 80027d4:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x1c70>)
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x1c74>)
 80027dc:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 80027de:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c78>)
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x1c7c>)
 80027e4:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 80027e6:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x1c80>)
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x1c84>)
 80027ec:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 80027ee:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x1c88>)
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	4b5a      	ldr	r3, [pc, #360]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x1c8c>)
 80027f4:	801a      	strh	r2, [r3, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 80027f6:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x1c90>)
 80027f8:	881a      	ldrh	r2, [r3, #0]
 80027fa:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x1c94>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	08d9      	lsrs	r1, r3, #3
 8002802:	460b      	mov	r3, r1
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 82bd 	bne.w	8002d8e <HAL_TIM_PeriodElapsedCallback+0x20be>
 8002814:	4b54      	ldr	r3, [pc, #336]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f240 52db 	movw	r2, #1499	; 0x5db
 800281c:	4293      	cmp	r3, r2
 800281e:	f300 82b6 	bgt.w	8002d8e <HAL_TIM_PeriodElapsedCallback+0x20be>
          t_SRAM[i_save] = t;
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x1c9c>)
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	4951      	ldr	r1, [pc, #324]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x1ca0>)
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8002832:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	494e      	ldr	r1, [pc, #312]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x1ca4>)
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1c58>)
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	494b      	ldr	r1, [pc, #300]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x1ca8>)
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8002852:	4b45      	ldr	r3, [pc, #276]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1c60>)
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4948      	ldr	r1, [pc, #288]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x1cac>)
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1c68>)
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	4945      	ldr	r1, [pc, #276]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x1cb0>)
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	601a      	str	r2, [r3, #0]
          theta1_res_SRAM[i_save] = theta1_res;
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x1c30>)
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4942      	ldr	r1, [pc, #264]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x1cb4>)
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 8002882:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x1c38>)
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	493f      	ldr	r1, [pc, #252]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x1cb8>)
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 8002892:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x1c40>)
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	493c      	ldr	r1, [pc, #240]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x1cbc>)
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 80028a2:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	4939      	ldr	r1, [pc, #228]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x1cc0>)
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e06f      	b.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x1cc4>
 80028b4:	f3af 8000 	nop.w
 80028b8:	bbf58d11 	.word	0xbbf58d11
 80028bc:	4091db6d 	.word	0x4091db6d
 80028c0:	00000000 	.word	0x00000000
 80028c4:	409f4000 	.word	0x409f4000
 80028c8:	00000000 	.word	0x00000000
 80028cc:	40ac2000 	.word	0x40ac2000
 80028d0:	200002c0 	.word	0x200002c0
 80028d4:	bfb33333 	.word	0xbfb33333
 80028d8:	bfb33333 	.word	0xbfb33333
 80028dc:	200002b4 	.word	0x200002b4
 80028e0:	200002d4 	.word	0x200002d4
 80028e4:	200002b8 	.word	0x200002b8
 80028e8:	200002d6 	.word	0x200002d6
 80028ec:	200002bc 	.word	0x200002bc
 80028f0:	200002d8 	.word	0x200002d8
 80028f4:	200002da 	.word	0x200002da
 80028f8:	20046e54 	.word	0x20046e54
 80028fc:	20046f38 	.word	0x20046f38
 8002900:	20000234 	.word	0x20000234
 8002904:	20000244 	.word	0x20000244
 8002908:	20000238 	.word	0x20000238
 800290c:	20000248 	.word	0x20000248
 8002910:	2000023c 	.word	0x2000023c
 8002914:	2000024c 	.word	0x2000024c
 8002918:	20000240 	.word	0x20000240
 800291c:	20000250 	.word	0x20000250
 8002920:	20000254 	.word	0x20000254
 8002924:	20000264 	.word	0x20000264
 8002928:	20000258 	.word	0x20000258
 800292c:	20000268 	.word	0x20000268
 8002930:	2000025c 	.word	0x2000025c
 8002934:	2000026c 	.word	0x2000026c
 8002938:	20000260 	.word	0x20000260
 800293c:	20000270 	.word	0x20000270
 8002940:	2000021c 	.word	0x2000021c
 8002944:	20000224 	.word	0x20000224
 8002948:	2000021e 	.word	0x2000021e
 800294c:	20000226 	.word	0x20000226
 8002950:	20000220 	.word	0x20000220
 8002954:	20000228 	.word	0x20000228
 8002958:	20000222 	.word	0x20000222
 800295c:	2000022a 	.word	0x2000022a
 8002960:	20000218 	.word	0x20000218
 8002964:	cccccccd 	.word	0xcccccccd
 8002968:	200003e8 	.word	0x200003e8
 800296c:	20000214 	.word	0x20000214
 8002970:	200003f0 	.word	0x200003f0
 8002974:	20001b60 	.word	0x20001b60
 8002978:	200032d0 	.word	0x200032d0
 800297c:	20004a40 	.word	0x20004a40
 8002980:	200061b0 	.word	0x200061b0
 8002984:	20007920 	.word	0x20007920
 8002988:	20009090 	.word	0x20009090
 800298c:	2000a800 	.word	0x2000a800
 8002990:	2000bf70 	.word	0x2000bf70
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 8002994:	4b96      	ldr	r3, [pc, #600]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a96      	ldr	r2, [pc, #600]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x1f24>)
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4996      	ldr	r1, [pc, #600]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x1f28>)
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 80029a4:	4b92      	ldr	r3, [pc, #584]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a94      	ldr	r2, [pc, #592]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x1f2c>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4994      	ldr	r1, [pc, #592]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x1f30>)
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 80029b4:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a92      	ldr	r2, [pc, #584]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x1f34>)
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4992      	ldr	r1, [pc, #584]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x1f38>)
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 80029c4:	4b8a      	ldr	r3, [pc, #552]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a90      	ldr	r2, [pc, #576]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x1f3c>)
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4990      	ldr	r1, [pc, #576]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x1f40>)
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	601a      	str	r2, [r3, #0]
          i1_ref_SRAM[i_save] = i1_ref;
 80029d4:	4b86      	ldr	r3, [pc, #536]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x1f44>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	498e      	ldr	r1, [pc, #568]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1f48>)
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	601a      	str	r2, [r3, #0]
          i2_ref_SRAM[i_save] = i2_ref;
 80029e4:	4b82      	ldr	r3, [pc, #520]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a8c      	ldr	r2, [pc, #560]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x1f4c>)
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	498c      	ldr	r1, [pc, #560]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x1f50>)
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	601a      	str	r2, [r3, #0]
          i3_ref_SRAM[i_save] = i3_ref;
 80029f4:	4b7e      	ldr	r3, [pc, #504]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a8a      	ldr	r2, [pc, #552]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x1f54>)
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	498a      	ldr	r1, [pc, #552]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x1f58>)
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	601a      	str	r2, [r3, #0]
          i4_ref_SRAM[i_save] = i4_ref;
 8002a04:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a88      	ldr	r2, [pc, #544]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x1f5c>)
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	4988      	ldr	r1, [pc, #544]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x1f60>)
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 8002a14:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a86      	ldr	r2, [pc, #536]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x1f64>)
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	4986      	ldr	r1, [pc, #536]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x1f68>)
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 8002a24:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a84      	ldr	r2, [pc, #528]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x1f6c>)
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	4984      	ldr	r1, [pc, #528]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x1f70>)
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 8002a34:	4b6e      	ldr	r3, [pc, #440]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1f74>)
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	4982      	ldr	r1, [pc, #520]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x1f78>)
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x1f7c>)
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	4980      	ldr	r1, [pc, #512]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x1f80>)
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7e      	ldr	r2, [pc, #504]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x1f84>)
 8002a5a:	8811      	ldrh	r1, [r2, #0]
 8002a5c:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1f88>)
 8002a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7d      	ldr	r2, [pc, #500]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1f8c>)
 8002a68:	8811      	ldrh	r1, [r2, #0]
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1f90>)
 8002a6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 8002a70:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7b      	ldr	r2, [pc, #492]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x1f94>)
 8002a76:	8811      	ldrh	r1, [r2, #0]
 8002a78:	4a7b      	ldr	r2, [pc, #492]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1f98>)
 8002a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7a      	ldr	r2, [pc, #488]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x1f9c>)
 8002a84:	8811      	ldrh	r1, [r2, #0]
 8002a86:	4a7a      	ldr	r2, [pc, #488]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1fa0>)
 8002a88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          fd1_ref_SRAM[i_save] = fd1_ref;
 8002a8c:	4b58      	ldr	r3, [pc, #352]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a78      	ldr	r2, [pc, #480]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x1fa4>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4978      	ldr	r1, [pc, #480]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x1fa8>)
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	601a      	str	r2, [r3, #0]
          fd2_ref_SRAM[i_save] = fd2_ref;
 8002a9c:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a76      	ldr	r2, [pc, #472]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x1fac>)
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	4976      	ldr	r1, [pc, #472]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x1fb0>)
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	601a      	str	r2, [r3, #0]
          fd3_ref_SRAM[i_save] = fd3_ref;
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x1fb4>)
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	4974      	ldr	r1, [pc, #464]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x1fb8>)
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	601a      	str	r2, [r3, #0]
          fd4_ref_SRAM[i_save] = fd4_ref;
 8002abc:	4b4c      	ldr	r3, [pc, #304]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a72      	ldr	r2, [pc, #456]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x1fbc>)
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4972      	ldr	r1, [pc, #456]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x1fc0>)
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	601a      	str	r2, [r3, #0]
          Ki_df_integral1_SRAM[i_save] = Ki_df_integral1;
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a70      	ldr	r2, [pc, #448]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x1fc4>)
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	4970      	ldr	r1, [pc, #448]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	601a      	str	r2, [r3, #0]
          Ki_df_integral2_SRAM[i_save] = Ki_df_integral2;
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	496e      	ldr	r1, [pc, #440]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x1fd0>)
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	601a      	str	r2, [r3, #0]
          Ki_df_integral3_SRAM[i_save] = Ki_df_integral3;
 8002aec:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6c      	ldr	r2, [pc, #432]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x1fd4>)
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	496c      	ldr	r1, [pc, #432]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x1fd8>)
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]
          Ki_df_integral4_SRAM[i_save] = Ki_df_integral4;
 8002afc:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x1fdc>)
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	496a      	ldr	r1, [pc, #424]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x1fe0>)
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a68      	ldr	r2, [pc, #416]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x1fe4>)
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4968      	ldr	r1, [pc, #416]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x1fec>)
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	4966      	ldr	r1, [pc, #408]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x1ff0>)
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a64      	ldr	r2, [pc, #400]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x1ff4>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4964      	ldr	r1, [pc, #400]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x1ff8>)
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a62      	ldr	r2, [pc, #392]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x1ffc>)
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	4962      	ldr	r1, [pc, #392]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x2000>)
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2004>)
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4960      	ldr	r1, [pc, #384]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2008>)
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5e      	ldr	r2, [pc, #376]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x200c>)
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	495e      	ldr	r1, [pc, #376]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2010>)
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	601a      	str	r2, [r3, #0]
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 8002b6c:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a5c      	ldr	r2, [pc, #368]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2014>)
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	495c      	ldr	r1, [pc, #368]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2018>)
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x201c>)
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	495a      	ldr	r1, [pc, #360]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2020>)
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	601a      	str	r2, [r3, #0]
          yaw_SRAM[i_save] = Euler.x;
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2024>)
 8002b8e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b9a:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2028>)
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
          roll_SRAM[i_save] = Euler.y;
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2024>)
 8002ba6:	ed93 7b04 	vldr	d7, [r3, #16]
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bb2:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
          pitch_SRAM[i_save] = Euler.z;
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2024>)
 8002bbe:	ed93 7b06 	vldr	d7, [r3, #24]
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bca:	4a4d      	ldr	r2, [pc, #308]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
          yaw_rate_SRAM[i_save] = Gyro.z;
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>)
 8002bd6:	ed93 7b06 	vldr	d7, [r3, #24]
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f20>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002be2:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	edc3 7a00 	vstr	s15, [r3]
 8002bec:	e08e      	b.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0x203c>
 8002bee:	bf00      	nop
 8002bf0:	200003e8 	.word	0x200003e8
 8002bf4:	20000284 	.word	0x20000284
 8002bf8:	2000d6e0 	.word	0x2000d6e0
 8002bfc:	20000288 	.word	0x20000288
 8002c00:	2000ee50 	.word	0x2000ee50
 8002c04:	2000028c 	.word	0x2000028c
 8002c08:	200105c0 	.word	0x200105c0
 8002c0c:	20000290 	.word	0x20000290
 8002c10:	20011d30 	.word	0x20011d30
 8002c14:	200002a4 	.word	0x200002a4
 8002c18:	200134a0 	.word	0x200134a0
 8002c1c:	200002a8 	.word	0x200002a8
 8002c20:	20014c10 	.word	0x20014c10
 8002c24:	200002ac 	.word	0x200002ac
 8002c28:	20016380 	.word	0x20016380
 8002c2c:	200002b0 	.word	0x200002b0
 8002c30:	20017af0 	.word	0x20017af0
 8002c34:	200002b4 	.word	0x200002b4
 8002c38:	20019260 	.word	0x20019260
 8002c3c:	200002b8 	.word	0x200002b8
 8002c40:	2001a9d0 	.word	0x2001a9d0
 8002c44:	200002bc 	.word	0x200002bc
 8002c48:	2001c140 	.word	0x2001c140
 8002c4c:	200002c0 	.word	0x200002c0
 8002c50:	2001d8b0 	.word	0x2001d8b0
 8002c54:	200002d4 	.word	0x200002d4
 8002c58:	2001f020 	.word	0x2001f020
 8002c5c:	200002d6 	.word	0x200002d6
 8002c60:	2001fbd8 	.word	0x2001fbd8
 8002c64:	200002d8 	.word	0x200002d8
 8002c68:	20020790 	.word	0x20020790
 8002c6c:	200002da 	.word	0x200002da
 8002c70:	20021348 	.word	0x20021348
 8002c74:	2000033c 	.word	0x2000033c
 8002c78:	20021f00 	.word	0x20021f00
 8002c7c:	20000340 	.word	0x20000340
 8002c80:	20023670 	.word	0x20023670
 8002c84:	20000344 	.word	0x20000344
 8002c88:	20024de0 	.word	0x20024de0
 8002c8c:	20000348 	.word	0x20000348
 8002c90:	20026550 	.word	0x20026550
 8002c94:	2000034c 	.word	0x2000034c
 8002c98:	20027cc0 	.word	0x20027cc0
 8002c9c:	20000350 	.word	0x20000350
 8002ca0:	20029430 	.word	0x20029430
 8002ca4:	20000354 	.word	0x20000354
 8002ca8:	2002aba0 	.word	0x2002aba0
 8002cac:	20000358 	.word	0x20000358
 8002cb0:	2002c310 	.word	0x2002c310
 8002cb4:	2000035c 	.word	0x2000035c
 8002cb8:	2002da80 	.word	0x2002da80
 8002cbc:	20000360 	.word	0x20000360
 8002cc0:	2002f1f0 	.word	0x2002f1f0
 8002cc4:	20000364 	.word	0x20000364
 8002cc8:	20030960 	.word	0x20030960
 8002ccc:	20000368 	.word	0x20000368
 8002cd0:	200320d0 	.word	0x200320d0
 8002cd4:	2000038c 	.word	0x2000038c
 8002cd8:	20033840 	.word	0x20033840
 8002cdc:	20000390 	.word	0x20000390
 8002ce0:	20034fb0 	.word	0x20034fb0
 8002ce4:	20000394 	.word	0x20000394
 8002ce8:	20036720 	.word	0x20036720
 8002cec:	20000398 	.word	0x20000398
 8002cf0:	20037e90 	.word	0x20037e90
 8002cf4:	20046ed8 	.word	0x20046ed8
 8002cf8:	20039600 	.word	0x20039600
 8002cfc:	2003ad70 	.word	0x2003ad70
 8002d00:	2003c4e0 	.word	0x2003c4e0
 8002d04:	20046fd8 	.word	0x20046fd8
 8002d08:	2003dc50 	.word	0x2003dc50
          roll_rate_SRAM[i_save] = Gyro.x;
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x20ec>)
 8002d0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x20f4>)
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	edc3 7a00 	vstr	s15, [r3]
          pitch_rate_SRAM[i_save] = Gyro.y;
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x20ec>)
 8002d26:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d32:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x20f8>)
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	edc3 7a00 	vstr	s15, [r3]
          Acc_x_SRAM[i_save] = Acc.x;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x20fc>)
 8002d3e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d4a:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2100>)
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	edc3 7a00 	vstr	s15, [r3]
          Acc_y_SRAM[i_save] = Acc.y;
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x20fc>)
 8002d56:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2104>)
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	edc3 7a00 	vstr	s15, [r3]
          Acc_z_SRAM[i_save] = Acc.z;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x20fc>)
 8002d6e:	ed93 7b06 	vldr	d7, [r3, #24]
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2108>)
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	edc3 7a00 	vstr	s15, [r3]
          i_save++;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 8002d8c:	6013      	str	r3, [r2, #0]
        loop = loop + 1;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x210c>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x210c>)
 8002d98:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2110>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002de4 <HAL_TIM_PeriodElapsedCallback+0x2114>
 8002da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2110>)
 8002daa:	edc3 7a00 	vstr	s15, [r3]
        break;
 8002dae:	e000      	b.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x20e2>
        break;
 8002db0:	bf00      	nop
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20046fd8 	.word	0x20046fd8
 8002dc0:	200003e8 	.word	0x200003e8
 8002dc4:	2003f3c0 	.word	0x2003f3c0
 8002dc8:	20040b30 	.word	0x20040b30
 8002dcc:	20046f78 	.word	0x20046f78
 8002dd0:	200422a0 	.word	0x200422a0
 8002dd4:	20043a10 	.word	0x20043a10
 8002dd8:	20045180 	.word	0x20045180
 8002ddc:	20000218 	.word	0x20000218
 8002de0:	20000214 	.word	0x20000214
 8002de4:	3a83126f 	.word	0x3a83126f

08002de8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	f040 83b3 	bne.w	8003562 <HAL_GPIO_EXTI_Callback+0x77a>
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }

		mode++;
 8002dfc:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002e06:	701a      	strb	r2, [r3, #0]
		// printf("%d, ", mode);
		// printf("\r\n");

    divide = mode % 3;
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x140>)
 8002e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e12:	0859      	lsrs	r1, r3, #1
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x144>)
 8002e20:	701a      	strb	r2, [r3, #0]

    switch(divide){
 8002e22:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x144>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d00f      	beq.n	8002e4a <HAL_GPIO_EXTI_Callback+0x62>
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d018      	beq.n	8002e60 <HAL_GPIO_EXTI_Callback+0x78>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d127      	bne.n	8002e82 <HAL_GPIO_EXTI_Callback+0x9a>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
 8002e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e38:	483d      	ldr	r0, [pc, #244]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e3a:	f002 f875 	bl	8004f28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2101      	movs	r1, #1
 8002e42:	483b      	ldr	r0, [pc, #236]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e44:	f002 f870 	bl	8004f28 <HAL_GPIO_WritePin>
        break;
 8002e48:	e01b      	b.n	8002e82 <HAL_GPIO_EXTI_Callback+0x9a>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4838      	ldr	r0, [pc, #224]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e50:	f002 f86a 	bl	8004f28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 8002e54:	2201      	movs	r2, #1
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	4835      	ldr	r0, [pc, #212]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e5a:	f002 f865 	bl	8004f28 <HAL_GPIO_WritePin>
        break;
 8002e5e:	e010      	b.n	8002e82 <HAL_GPIO_EXTI_Callback+0x9a>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2101      	movs	r1, #1
 8002e64:	4832      	ldr	r0, [pc, #200]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e66:	f002 f85f 	bl	8004f28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	4830      	ldr	r0, [pc, #192]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e70:	f002 f85a 	bl	8004f28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 8002e74:	2201      	movs	r2, #1
 8002e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e7a:	482d      	ldr	r0, [pc, #180]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x148>)
 8002e7c:	f002 f854 	bl	8004f28 <HAL_GPIO_WritePin>
        break;
 8002e80:	bf00      	nop
    }

    switch(mode){
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_EXTI_Callback+0xaa>
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d022      	beq.n	8002ed4 <HAL_GPIO_EXTI_Callback+0xec>
 8002e8e:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 8002e90:	e367      	b.n	8003562 <HAL_GPIO_EXTI_Callback+0x77a>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        tau_dfob1 = 0.0;
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
        tau_dfob2 = 0.0;
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x150>)
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
        tau_dfob3 = 0.0;
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_GPIO_EXTI_Callback+0x154>)
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
        tau_dfob4 = 0.0;
 8002eaa:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x158>)
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

        tau_dfob1_pre = 0.0;
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 8002eca:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

        break;
 8002ed2:	e346      	b.n	8003562 <HAL_GPIO_EXTI_Callback+0x77a>
        // }
        // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
        // fprintf(outputfile, "abc");
        // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x160>)
 8002ed6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002eda:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x164>)
 8002ede:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ee2:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_GPIO_EXTI_Callback+0x168>)
 8002ee6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002eea:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002eee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ef2:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x160>)
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_GPIO_EXTI_Callback+0x170>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x164>)
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_GPIO_EXTI_Callback+0x170>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_GPIO_EXTI_Callback+0x168>)
 8002f0a:	881a      	ldrh	r2, [r3, #0]
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_GPIO_EXTI_Callback+0x174>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002f14:	881a      	ldrh	r2, [r3, #0]
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_GPIO_EXTI_Callback+0x174>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_GPIO_EXTI_Callback+0x178>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e316      	b.n	8003552 <HAL_GPIO_EXTI_Callback+0x76a>
 8002f24:	2000021a 	.word	0x2000021a
 8002f28:	aaaaaaab 	.word	0xaaaaaaab
 8002f2c:	2000021b 	.word	0x2000021b
 8002f30:	40020400 	.word	0x40020400
 8002f34:	2000038c 	.word	0x2000038c
 8002f38:	20000390 	.word	0x20000390
 8002f3c:	20000394 	.word	0x20000394
 8002f40:	20000398 	.word	0x20000398
 8002f44:	2000039c 	.word	0x2000039c
 8002f48:	200002d4 	.word	0x200002d4
 8002f4c:	200002d6 	.word	0x200002d6
 8002f50:	200002d8 	.word	0x200002d8
 8002f54:	200002da 	.word	0x200002da
 8002f58:	20046e54 	.word	0x20046e54
 8002f5c:	20046f38 	.word	0x20046f38
 8002f60:	200003ec 	.word	0x200003ec
          printf("%d, ", i_output);
 8002f64:	4bc2      	ldr	r3, [pc, #776]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	48c2      	ldr	r0, [pc, #776]	; (8003274 <HAL_GPIO_EXTI_Callback+0x48c>)
 8002f6c:	f006 fcbc 	bl	80098e8 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 8002f70:	4bbf      	ldr	r3, [pc, #764]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4ac0      	ldr	r2, [pc, #768]	; (8003278 <HAL_GPIO_EXTI_Callback+0x490>)
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f82:	ec53 2b17 	vmov	r2, r3, d7
 8002f86:	48bd      	ldr	r0, [pc, #756]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8002f88:	f006 fcae 	bl	80098e8 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 8002f8c:	4bb8      	ldr	r3, [pc, #736]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4abb      	ldr	r2, [pc, #748]	; (8003280 <HAL_GPIO_EXTI_Callback+0x498>)
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f9e:	ec53 2b17 	vmov	r2, r3, d7
 8002fa2:	48b6      	ldr	r0, [pc, #728]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8002fa4:	f006 fca0 	bl	80098e8 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 8002fa8:	4bb1      	ldr	r3, [pc, #708]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4ab5      	ldr	r2, [pc, #724]	; (8003284 <HAL_GPIO_EXTI_Callback+0x49c>)
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fba:	ec53 2b17 	vmov	r2, r3, d7
 8002fbe:	48af      	ldr	r0, [pc, #700]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8002fc0:	f006 fc92 	bl	80098e8 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 8002fc4:	4baa      	ldr	r3, [pc, #680]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4aaf      	ldr	r2, [pc, #700]	; (8003288 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fd6:	ec53 2b17 	vmov	r2, r3, d7
 8002fda:	48a8      	ldr	r0, [pc, #672]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8002fdc:	f006 fc84 	bl	80098e8 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 8002fe0:	4ba3      	ldr	r3, [pc, #652]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4aa9      	ldr	r2, [pc, #676]	; (800328c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff2:	ec53 2b17 	vmov	r2, r3, d7
 8002ff6:	48a1      	ldr	r0, [pc, #644]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8002ff8:	f006 fc76 	bl	80098e8 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 8002ffc:	4b9c      	ldr	r3, [pc, #624]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4aa3      	ldr	r2, [pc, #652]	; (8003290 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800300e:	ec53 2b17 	vmov	r2, r3, d7
 8003012:	489a      	ldr	r0, [pc, #616]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003014:	f006 fc68 	bl	80098e8 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 8003018:	4b95      	ldr	r3, [pc, #596]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a9d      	ldr	r2, [pc, #628]	; (8003294 <HAL_GPIO_EXTI_Callback+0x4ac>)
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800302a:	ec53 2b17 	vmov	r2, r3, d7
 800302e:	4893      	ldr	r0, [pc, #588]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003030:	f006 fc5a 	bl	80098e8 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 8003034:	4b8e      	ldr	r3, [pc, #568]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a97      	ldr	r2, [pc, #604]	; (8003298 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003046:	ec53 2b17 	vmov	r2, r3, d7
 800304a:	488c      	ldr	r0, [pc, #560]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 800304c:	f006 fc4c 	bl	80098e8 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 8003050:	4b87      	ldr	r3, [pc, #540]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a91      	ldr	r2, [pc, #580]	; (800329c <HAL_GPIO_EXTI_Callback+0x4b4>)
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003062:	ec53 2b17 	vmov	r2, r3, d7
 8003066:	4885      	ldr	r0, [pc, #532]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003068:	f006 fc3e 	bl	80098e8 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 800306c:	4b80      	ldr	r3, [pc, #512]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a8b      	ldr	r2, [pc, #556]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800307e:	ec53 2b17 	vmov	r2, r3, d7
 8003082:	487e      	ldr	r0, [pc, #504]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003084:	f006 fc30 	bl	80098e8 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 8003088:	4b79      	ldr	r3, [pc, #484]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a85      	ldr	r2, [pc, #532]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x4bc>)
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800309a:	ec53 2b17 	vmov	r2, r3, d7
 800309e:	4877      	ldr	r0, [pc, #476]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 80030a0:	f006 fc22 	bl	80098e8 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 80030a4:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7f      	ldr	r2, [pc, #508]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030b6:	ec53 2b17 	vmov	r2, r3, d7
 80030ba:	4870      	ldr	r0, [pc, #448]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 80030bc:	f006 fc14 	bl	80098e8 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 80030c0:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a79      	ldr	r2, [pc, #484]	; (80032ac <HAL_GPIO_EXTI_Callback+0x4c4>)
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030d2:	ec53 2b17 	vmov	r2, r3, d7
 80030d6:	4869      	ldr	r0, [pc, #420]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 80030d8:	f006 fc06 	bl	80098e8 <iprintf>

          printf("%f, ", i1_ref_SRAM[i_output]);
 80030dc:	4b64      	ldr	r3, [pc, #400]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a73      	ldr	r2, [pc, #460]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ee:	ec53 2b17 	vmov	r2, r3, d7
 80030f2:	4862      	ldr	r0, [pc, #392]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 80030f4:	f006 fbf8 	bl	80098e8 <iprintf>
          printf("%f, ", i2_ref_SRAM[i_output]);
 80030f8:	4b5d      	ldr	r3, [pc, #372]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6d      	ldr	r2, [pc, #436]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800310a:	ec53 2b17 	vmov	r2, r3, d7
 800310e:	485b      	ldr	r0, [pc, #364]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003110:	f006 fbea 	bl	80098e8 <iprintf>
          printf("%f, ", i3_ref_SRAM[i_output]);
 8003114:	4b56      	ldr	r3, [pc, #344]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a67      	ldr	r2, [pc, #412]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003126:	ec53 2b17 	vmov	r2, r3, d7
 800312a:	4854      	ldr	r0, [pc, #336]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 800312c:	f006 fbdc 	bl	80098e8 <iprintf>
          printf("%f, ", i4_ref_SRAM[i_output]);
 8003130:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a61      	ldr	r2, [pc, #388]	; (80032bc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003142:	ec53 2b17 	vmov	r2, r3, d7
 8003146:	484d      	ldr	r0, [pc, #308]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003148:	f006 fbce 	bl	80098e8 <iprintf>

          printf("%f, ", ia1_ref_SRAM[i_output]);
 800314c:	4b48      	ldr	r3, [pc, #288]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5b      	ldr	r2, [pc, #364]	; (80032c0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800315e:	ec53 2b17 	vmov	r2, r3, d7
 8003162:	4846      	ldr	r0, [pc, #280]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003164:	f006 fbc0 	bl	80098e8 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a55      	ldr	r2, [pc, #340]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800317a:	ec53 2b17 	vmov	r2, r3, d7
 800317e:	483f      	ldr	r0, [pc, #252]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003180:	f006 fbb2 	bl	80098e8 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4f      	ldr	r2, [pc, #316]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003196:	ec53 2b17 	vmov	r2, r3, d7
 800319a:	4838      	ldr	r0, [pc, #224]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 800319c:	f006 fba4 	bl	80098e8 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 80031a0:	4b33      	ldr	r3, [pc, #204]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a49      	ldr	r2, [pc, #292]	; (80032cc <HAL_GPIO_EXTI_Callback+0x4e4>)
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b2:	ec53 2b17 	vmov	r2, r3, d7
 80031b6:	4831      	ldr	r0, [pc, #196]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 80031b8:	f006 fb96 	bl	80098e8 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a43      	ldr	r2, [pc, #268]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80031c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c6:	4619      	mov	r1, r3
 80031c8:	482a      	ldr	r0, [pc, #168]	; (8003274 <HAL_GPIO_EXTI_Callback+0x48c>)
 80031ca:	f006 fb8d 	bl	80098e8 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80031d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d8:	4619      	mov	r1, r3
 80031da:	4826      	ldr	r0, [pc, #152]	; (8003274 <HAL_GPIO_EXTI_Callback+0x48c>)
 80031dc:	f006 fb84 	bl	80098e8 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3c      	ldr	r2, [pc, #240]	; (80032d8 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80031e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4821      	ldr	r0, [pc, #132]	; (8003274 <HAL_GPIO_EXTI_Callback+0x48c>)
 80031ee:	f006 fb7b 	bl	80098e8 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a39      	ldr	r2, [pc, #228]	; (80032dc <HAL_GPIO_EXTI_Callback+0x4f4>)
 80031f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031fc:	4619      	mov	r1, r3
 80031fe:	481d      	ldr	r0, [pc, #116]	; (8003274 <HAL_GPIO_EXTI_Callback+0x48c>)
 8003200:	f006 fb72 	bl	80098e8 <iprintf>

          printf("%f, ", fd1_ref_SRAM[i_output]);
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a35      	ldr	r2, [pc, #212]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4f8>)
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003216:	ec53 2b17 	vmov	r2, r3, d7
 800321a:	4818      	ldr	r0, [pc, #96]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 800321c:	f006 fb64 	bl	80098e8 <iprintf>
          printf("%f, ", fd2_ref_SRAM[i_output]);
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003232:	ec53 2b17 	vmov	r2, r3, d7
 8003236:	4811      	ldr	r0, [pc, #68]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003238:	f006 fb56 	bl	80098e8 <iprintf>
          printf("%f, ", fd3_ref_SRAM[i_output]);
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x500>)
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800324e:	ec53 2b17 	vmov	r2, r3, d7
 8003252:	480a      	ldr	r0, [pc, #40]	; (800327c <HAL_GPIO_EXTI_Callback+0x494>)
 8003254:	f006 fb48 	bl	80098e8 <iprintf>
          printf("%f, ", fd4_ref_SRAM[i_output]);
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_GPIO_EXTI_Callback+0x488>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_GPIO_EXTI_Callback+0x504>)
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800326a:	ec53 2b17 	vmov	r2, r3, d7
 800326e:	e03f      	b.n	80032f0 <HAL_GPIO_EXTI_Callback+0x508>
 8003270:	200003ec 	.word	0x200003ec
 8003274:	0800b8ac 	.word	0x0800b8ac
 8003278:	200003f0 	.word	0x200003f0
 800327c:	0800b8b4 	.word	0x0800b8b4
 8003280:	20001b60 	.word	0x20001b60
 8003284:	200032d0 	.word	0x200032d0
 8003288:	20004a40 	.word	0x20004a40
 800328c:	200061b0 	.word	0x200061b0
 8003290:	20007920 	.word	0x20007920
 8003294:	20009090 	.word	0x20009090
 8003298:	2000a800 	.word	0x2000a800
 800329c:	2000bf70 	.word	0x2000bf70
 80032a0:	2000d6e0 	.word	0x2000d6e0
 80032a4:	2000ee50 	.word	0x2000ee50
 80032a8:	200105c0 	.word	0x200105c0
 80032ac:	20011d30 	.word	0x20011d30
 80032b0:	200134a0 	.word	0x200134a0
 80032b4:	20014c10 	.word	0x20014c10
 80032b8:	20016380 	.word	0x20016380
 80032bc:	20017af0 	.word	0x20017af0
 80032c0:	20019260 	.word	0x20019260
 80032c4:	2001a9d0 	.word	0x2001a9d0
 80032c8:	2001c140 	.word	0x2001c140
 80032cc:	2001d8b0 	.word	0x2001d8b0
 80032d0:	2001f020 	.word	0x2001f020
 80032d4:	2001fbd8 	.word	0x2001fbd8
 80032d8:	20020790 	.word	0x20020790
 80032dc:	20021348 	.word	0x20021348
 80032e0:	20021f00 	.word	0x20021f00
 80032e4:	20023670 	.word	0x20023670
 80032e8:	20024de0 	.word	0x20024de0
 80032ec:	20026550 	.word	0x20026550
 80032f0:	489e      	ldr	r0, [pc, #632]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80032f2:	f006 faf9 	bl	80098e8 <iprintf>
          
          printf("%f, ", Ki_df_integral1_SRAM[i_output]);
 80032f6:	4b9e      	ldr	r3, [pc, #632]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a9e      	ldr	r2, [pc, #632]	; (8003574 <HAL_GPIO_EXTI_Callback+0x78c>)
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003308:	ec53 2b17 	vmov	r2, r3, d7
 800330c:	4897      	ldr	r0, [pc, #604]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800330e:	f006 faeb 	bl	80098e8 <iprintf>
          printf("%f, ", Ki_df_integral2_SRAM[i_output]);
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a98      	ldr	r2, [pc, #608]	; (8003578 <HAL_GPIO_EXTI_Callback+0x790>)
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	edd3 7a00 	vldr	s15, [r3]
 8003320:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003324:	ec53 2b17 	vmov	r2, r3, d7
 8003328:	4890      	ldr	r0, [pc, #576]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800332a:	f006 fadd 	bl	80098e8 <iprintf>
          printf("%f, ", Ki_df_integral3_SRAM[i_output]);
 800332e:	4b90      	ldr	r3, [pc, #576]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a92      	ldr	r2, [pc, #584]	; (800357c <HAL_GPIO_EXTI_Callback+0x794>)
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003340:	ec53 2b17 	vmov	r2, r3, d7
 8003344:	4889      	ldr	r0, [pc, #548]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003346:	f006 facf 	bl	80098e8 <iprintf>
          printf("%f, ", Ki_df_integral4_SRAM[i_output]);
 800334a:	4b89      	ldr	r3, [pc, #548]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a8c      	ldr	r2, [pc, #560]	; (8003580 <HAL_GPIO_EXTI_Callback+0x798>)
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800335c:	ec53 2b17 	vmov	r2, r3, d7
 8003360:	4882      	ldr	r0, [pc, #520]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003362:	f006 fac1 	bl	80098e8 <iprintf>
          
          printf("%f, ", tau_dob1_SRAM[i_output]);
 8003366:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a86      	ldr	r2, [pc, #536]	; (8003584 <HAL_GPIO_EXTI_Callback+0x79c>)
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003378:	ec53 2b17 	vmov	r2, r3, d7
 800337c:	487b      	ldr	r0, [pc, #492]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800337e:	f006 fab3 	bl	80098e8 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 8003382:	4b7b      	ldr	r3, [pc, #492]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a80      	ldr	r2, [pc, #512]	; (8003588 <HAL_GPIO_EXTI_Callback+0x7a0>)
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003394:	ec53 2b17 	vmov	r2, r3, d7
 8003398:	4874      	ldr	r0, [pc, #464]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800339a:	f006 faa5 	bl	80098e8 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7a      	ldr	r2, [pc, #488]	; (800358c <HAL_GPIO_EXTI_Callback+0x7a4>)
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033b0:	ec53 2b17 	vmov	r2, r3, d7
 80033b4:	486d      	ldr	r0, [pc, #436]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80033b6:	f006 fa97 	bl	80098e8 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a74      	ldr	r2, [pc, #464]	; (8003590 <HAL_GPIO_EXTI_Callback+0x7a8>)
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033cc:	ec53 2b17 	vmov	r2, r3, d7
 80033d0:	4866      	ldr	r0, [pc, #408]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80033d2:	f006 fa89 	bl	80098e8 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 80033d6:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_GPIO_EXTI_Callback+0x7ac>)
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033e8:	ec53 2b17 	vmov	r2, r3, d7
 80033ec:	485f      	ldr	r0, [pc, #380]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80033ee:	f006 fa7b 	bl	80098e8 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a68      	ldr	r2, [pc, #416]	; (8003598 <HAL_GPIO_EXTI_Callback+0x7b0>)
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003404:	ec53 2b17 	vmov	r2, r3, d7
 8003408:	4858      	ldr	r0, [pc, #352]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800340a:	f006 fa6d 	bl	80098e8 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 800340e:	4b58      	ldr	r3, [pc, #352]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a62      	ldr	r2, [pc, #392]	; (800359c <HAL_GPIO_EXTI_Callback+0x7b4>)
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003420:	ec53 2b17 	vmov	r2, r3, d7
 8003424:	4851      	ldr	r0, [pc, #324]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003426:	f006 fa5f 	bl	80098e8 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5c      	ldr	r2, [pc, #368]	; (80035a0 <HAL_GPIO_EXTI_Callback+0x7b8>)
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800343c:	ec53 2b17 	vmov	r2, r3, d7
 8003440:	484a      	ldr	r0, [pc, #296]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003442:	f006 fa51 	bl	80098e8 <iprintf>

          printf("%f, ", yaw_SRAM[i_output]);
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x7bc>)
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003458:	ec53 2b17 	vmov	r2, r3, d7
 800345c:	4843      	ldr	r0, [pc, #268]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800345e:	f006 fa43 	bl	80098e8 <iprintf>
          printf("%f, ", roll_SRAM[i_output]);
 8003462:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a50      	ldr	r2, [pc, #320]	; (80035a8 <HAL_GPIO_EXTI_Callback+0x7c0>)
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003474:	ec53 2b17 	vmov	r2, r3, d7
 8003478:	483c      	ldr	r0, [pc, #240]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800347a:	f006 fa35 	bl	80098e8 <iprintf>
          printf("%f, ", pitch_SRAM[i_output]);
 800347e:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_GPIO_EXTI_Callback+0x7c4>)
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003490:	ec53 2b17 	vmov	r2, r3, d7
 8003494:	4835      	ldr	r0, [pc, #212]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003496:	f006 fa27 	bl	80098e8 <iprintf>

          printf("%f, ", yaw_rate_SRAM[i_output]);
 800349a:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a44      	ldr	r2, [pc, #272]	; (80035b0 <HAL_GPIO_EXTI_Callback+0x7c8>)
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034ac:	ec53 2b17 	vmov	r2, r3, d7
 80034b0:	482e      	ldr	r0, [pc, #184]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80034b2:	f006 fa19 	bl	80098e8 <iprintf>
          printf("%f, ", roll_rate_SRAM[i_output]);
 80034b6:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3e      	ldr	r2, [pc, #248]	; (80035b4 <HAL_GPIO_EXTI_Callback+0x7cc>)
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034c8:	ec53 2b17 	vmov	r2, r3, d7
 80034cc:	4827      	ldr	r0, [pc, #156]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80034ce:	f006 fa0b 	bl	80098e8 <iprintf>
          printf("%f, ", pitch_rate_SRAM[i_output]);
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_GPIO_EXTI_Callback+0x7d0>)
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e4:	ec53 2b17 	vmov	r2, r3, d7
 80034e8:	4820      	ldr	r0, [pc, #128]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 80034ea:	f006 f9fd 	bl	80098e8 <iprintf>

          printf("%f, ", Acc_x_SRAM[i_output]);
 80034ee:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a32      	ldr	r2, [pc, #200]	; (80035bc <HAL_GPIO_EXTI_Callback+0x7d4>)
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003500:	ec53 2b17 	vmov	r2, r3, d7
 8003504:	4819      	ldr	r0, [pc, #100]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003506:	f006 f9ef 	bl	80098e8 <iprintf>
          printf("%f, ", Acc_y_SRAM[i_output]);
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <HAL_GPIO_EXTI_Callback+0x7d8>)
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800351c:	ec53 2b17 	vmov	r2, r3, d7
 8003520:	4812      	ldr	r0, [pc, #72]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 8003522:	f006 f9e1 	bl	80098e8 <iprintf>
          printf("%f, ", Acc_z_SRAM[i_output]);
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_GPIO_EXTI_Callback+0x7dc>)
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003538:	ec53 2b17 	vmov	r2, r3, d7
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <HAL_GPIO_EXTI_Callback+0x784>)
 800353e:	f006 f9d3 	bl	80098e8 <iprintf>

          printf("\r\n");
 8003542:	4821      	ldr	r0, [pc, #132]	; (80035c8 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8003544:	f006 fa44 	bl	80099d0 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <HAL_GPIO_EXTI_Callback+0x788>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f240 52db 	movw	r2, #1499	; 0x5db
 800355a:	4293      	cmp	r3, r2
 800355c:	f77f ad02 	ble.w	8002f64 <HAL_GPIO_EXTI_Callback+0x17c>
        }
        break;
 8003560:	bf00      	nop
    }


	}
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800b8b4 	.word	0x0800b8b4
 8003570:	200003ec 	.word	0x200003ec
 8003574:	20027cc0 	.word	0x20027cc0
 8003578:	20029430 	.word	0x20029430
 800357c:	2002aba0 	.word	0x2002aba0
 8003580:	2002c310 	.word	0x2002c310
 8003584:	2002da80 	.word	0x2002da80
 8003588:	2002f1f0 	.word	0x2002f1f0
 800358c:	20030960 	.word	0x20030960
 8003590:	200320d0 	.word	0x200320d0
 8003594:	20033840 	.word	0x20033840
 8003598:	20034fb0 	.word	0x20034fb0
 800359c:	20036720 	.word	0x20036720
 80035a0:	20037e90 	.word	0x20037e90
 80035a4:	20039600 	.word	0x20039600
 80035a8:	2003ad70 	.word	0x2003ad70
 80035ac:	2003c4e0 	.word	0x2003c4e0
 80035b0:	2003dc50 	.word	0x2003dc50
 80035b4:	2003f3c0 	.word	0x2003f3c0
 80035b8:	20040b30 	.word	0x20040b30
 80035bc:	200422a0 	.word	0x200422a0
 80035c0:	20043a10 	.word	0x20043a10
 80035c4:	20045180 	.word	0x20045180
 80035c8:	0800b8bc 	.word	0x0800b8bc

080035cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d0:	f001 f96f 	bl	80048b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d4:	f000 f8b8 	bl	8003748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035d8:	f000 fc8a 	bl	8003ef0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80035dc:	f000 fc2a 	bl	8003e34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80035e0:	f000 fc58 	bl	8003e94 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80035e4:	f000 f9e2 	bl	80039ac <MX_TIM2_Init>
  MX_TIM1_Init();
 80035e8:	f000 f986 	bl	80038f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80035ec:	f000 fa2c 	bl	8003a48 <MX_TIM3_Init>
  MX_TIM4_Init();
 80035f0:	f000 fa80 	bl	8003af4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80035f4:	f000 fb56 	bl	8003ca4 <MX_TIM8_Init>
  MX_TIM5_Init();
 80035f8:	f000 fad2 	bl	8003ba0 <MX_TIM5_Init>
  MX_TIM9_Init();
 80035fc:	f000 fbac 	bl	8003d58 <MX_TIM9_Init>
  MX_I2C1_Init();
 8003600:	f000 f93a 	bl	8003878 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003604:	483f      	ldr	r0, [pc, #252]	; (8003704 <main+0x138>)
 8003606:	f003 fc6d 	bl	8006ee4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800360a:	213c      	movs	r1, #60	; 0x3c
 800360c:	483e      	ldr	r0, [pc, #248]	; (8003708 <main+0x13c>)
 800360e:	f003 fd9f 	bl	8007150 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003612:	213c      	movs	r1, #60	; 0x3c
 8003614:	483d      	ldr	r0, [pc, #244]	; (800370c <main+0x140>)
 8003616:	f003 fd9b 	bl	8007150 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800361a:	213c      	movs	r1, #60	; 0x3c
 800361c:	483c      	ldr	r0, [pc, #240]	; (8003710 <main+0x144>)
 800361e:	f003 fd97 	bl	8007150 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8003622:	213c      	movs	r1, #60	; 0x3c
 8003624:	483b      	ldr	r0, [pc, #236]	; (8003714 <main+0x148>)
 8003626:	f003 fd93 	bl	8007150 <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <main+0x14c>)
 800362c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003630:	4b3a      	ldr	r3, [pc, #232]	; (800371c <main+0x150>)
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 8003634:	4b38      	ldr	r3, [pc, #224]	; (8003718 <main+0x14c>)
 8003636:	f9b3 2000 	ldrsh.w	r2, [r3]
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <main+0x154>)
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <main+0x14c>)
 8003640:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003644:	4b37      	ldr	r3, [pc, #220]	; (8003724 <main+0x158>)
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <main+0x14c>)
 800364a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800364e:	4b36      	ldr	r3, [pc, #216]	; (8003728 <main+0x15c>)
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8003652:	2100      	movs	r1, #0
 8003654:	4835      	ldr	r0, [pc, #212]	; (800372c <main+0x160>)
 8003656:	f003 fca5 	bl	8006fa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800365a:	210c      	movs	r1, #12
 800365c:	4833      	ldr	r0, [pc, #204]	; (800372c <main+0x160>)
 800365e:	f003 fca1 	bl	8006fa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003662:	2100      	movs	r1, #0
 8003664:	4832      	ldr	r0, [pc, #200]	; (8003730 <main+0x164>)
 8003666:	f003 fc9d 	bl	8006fa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800366a:	2104      	movs	r1, #4
 800366c:	4830      	ldr	r0, [pc, #192]	; (8003730 <main+0x164>)
 800366e:	f003 fc99 	bl	8006fa4 <HAL_TIM_PWM_Start>

  #ifdef Enable_I2C
  bno055_assignI2C(&hi2c1);
 8003672:	4830      	ldr	r0, [pc, #192]	; (8003734 <main+0x168>)
 8003674:	f7fd f9ee 	bl	8000a54 <bno055_assignI2C>
  bno055_reset();
 8003678:	f7fc ffee 	bl	8000658 <bno055_reset>
  bno055_setup();
 800367c:	f7fc fff8 	bl	8000670 <bno055_setup>
  bno055_setOperationModeNDOF();
 8003680:	f7fc ffe3 	bl	800064a <bno055_setOperationModeNDOF>
  #endif

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8003684:	2201      	movs	r2, #1
 8003686:	2101      	movs	r1, #1
 8003688:	482b      	ldr	r0, [pc, #172]	; (8003738 <main+0x16c>)
 800368a:	f001 fc4d 	bl	8004f28 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    #ifdef Enable_I2C
    Euler      = bno055_getVectorEuler();
 800368e:	f7fd f9ad 	bl	80009ec <bno055_getVectorEuler>
 8003692:	eeb0 4b40 	vmov.f64	d4, d0
 8003696:	eeb0 5b41 	vmov.f64	d5, d1
 800369a:	eeb0 6b42 	vmov.f64	d6, d2
 800369e:	eeb0 7b43 	vmov.f64	d7, d3
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <main+0x170>)
 80036a4:	ed83 4b00 	vstr	d4, [r3]
 80036a8:	ed83 5b02 	vstr	d5, [r3, #8]
 80036ac:	ed83 6b04 	vstr	d6, [r3, #16]
 80036b0:	ed83 7b06 	vstr	d7, [r3, #24]
    Gyro       = bno055_getVectorGyroscope();
 80036b4:	f7fd f967 	bl	8000986 <bno055_getVectorGyroscope>
 80036b8:	eeb0 4b40 	vmov.f64	d4, d0
 80036bc:	eeb0 5b41 	vmov.f64	d5, d1
 80036c0:	eeb0 6b42 	vmov.f64	d6, d2
 80036c4:	eeb0 7b43 	vmov.f64	d7, d3
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <main+0x174>)
 80036ca:	ed83 4b00 	vstr	d4, [r3]
 80036ce:	ed83 5b02 	vstr	d5, [r3, #8]
 80036d2:	ed83 6b04 	vstr	d6, [r3, #16]
 80036d6:	ed83 7b06 	vstr	d7, [r3, #24]
    Acc        = bno055_getVectorAccelerometer();
 80036da:	f7fd f921 	bl	8000920 <bno055_getVectorAccelerometer>
 80036de:	eeb0 4b40 	vmov.f64	d4, d0
 80036e2:	eeb0 5b41 	vmov.f64	d5, d1
 80036e6:	eeb0 6b42 	vmov.f64	d6, d2
 80036ea:	eeb0 7b43 	vmov.f64	d7, d3
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <main+0x178>)
 80036f0:	ed83 4b00 	vstr	d4, [r3]
 80036f4:	ed83 5b02 	vstr	d5, [r3, #8]
 80036f8:	ed83 6b04 	vstr	d6, [r3, #16]
 80036fc:	ed83 7b06 	vstr	d7, [r3, #24]
    Euler      = bno055_getVectorEuler();
 8003700:	e7c5      	b.n	800368e <main+0xc2>
 8003702:	bf00      	nop
 8003704:	20046f98 	.word	0x20046f98
 8003708:	20046ef8 	.word	0x20046ef8
 800370c:	20046e94 	.word	0x20046e94
 8003710:	20046940 	.word	0x20046940
 8003714:	20046900 	.word	0x20046900
 8003718:	2000000a 	.word	0x2000000a
 800371c:	40010000 	.word	0x40010000
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40010400 	.word	0x40010400
 800372c:	20046e54 	.word	0x20046e54
 8003730:	20046f38 	.word	0x20046f38
 8003734:	20046a00 	.word	0x20046a00
 8003738:	40020400 	.word	0x40020400
 800373c:	20046ed8 	.word	0x20046ed8
 8003740:	20046fd8 	.word	0x20046fd8
 8003744:	20046f78 	.word	0x20046f78

08003748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b0b8      	sub	sp, #224	; 0xe0
 800374c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800374e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003752:	2234      	movs	r2, #52	; 0x34
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f005 fc85 	bl	8009066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800375c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800376c:	f107 0308 	add.w	r3, r7, #8
 8003770:	2290      	movs	r2, #144	; 0x90
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f005 fc76 	bl	8009066 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800377a:	f002 fa5b 	bl	8005c34 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <SystemClock_Config+0x124>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a3a      	ldr	r2, [pc, #232]	; (800386c <SystemClock_Config+0x124>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <SystemClock_Config+0x124>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <SystemClock_Config+0x128>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <SystemClock_Config+0x128>)
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b32      	ldr	r3, [pc, #200]	; (8003870 <SystemClock_Config+0x128>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80037b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80037bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c0:	2302      	movs	r3, #2
 80037c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037ce:	2304      	movs	r3, #4
 80037d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80037d4:	2360      	movs	r3, #96	; 0x60
 80037d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037da:	2302      	movs	r3, #2
 80037dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037e0:	2304      	movs	r3, #4
 80037e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 fa82 	bl	8005cf4 <HAL_RCC_OscConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80037f6:	f000 fc85 	bl	8004104 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80037fa:	f002 fa2b 	bl	8005c54 <HAL_PWREx_EnableOverDrive>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003804:	f000 fc7e 	bl	8004104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003808:	230f      	movs	r3, #15
 800380a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800380e:	2302      	movs	r3, #2
 8003810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800381a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800381e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003828:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800382c:	2103      	movs	r1, #3
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fd0e 	bl	8006250 <HAL_RCC_ClockConfig>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800383a:	f000 fc63 	bl	8004104 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <SystemClock_Config+0x12c>)
 8003840:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003842:	2300      	movs	r3, #0
 8003844:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003846:	2300      	movs	r3, #0
 8003848:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	4618      	mov	r0, r3
 8003856:	f002 fef3 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8003860:	f000 fc50 	bl	8004104 <Error_Handler>
  }
}
 8003864:	bf00      	nop
 8003866:	37e0      	adds	r7, #224	; 0xe0
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	40007000 	.word	0x40007000
 8003874:	00204100 	.word	0x00204100

08003878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <MX_I2C1_Init+0x74>)
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <MX_I2C1_Init+0x78>)
 8003880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <MX_I2C1_Init+0x74>)
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <MX_I2C1_Init+0x7c>)
 8003886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <MX_I2C1_Init+0x74>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <MX_I2C1_Init+0x74>)
 8003890:	2201      	movs	r2, #1
 8003892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003894:	4b15      	ldr	r3, [pc, #84]	; (80038ec <MX_I2C1_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <MX_I2C1_Init+0x74>)
 800389c:	2200      	movs	r2, #0
 800389e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <MX_I2C1_Init+0x74>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <MX_I2C1_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <MX_I2C1_Init+0x74>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038b2:	480e      	ldr	r0, [pc, #56]	; (80038ec <MX_I2C1_Init+0x74>)
 80038b4:	f001 fb6a 	bl	8004f8c <HAL_I2C_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80038be:	f000 fc21 	bl	8004104 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038c2:	2100      	movs	r1, #0
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <MX_I2C1_Init+0x74>)
 80038c6:	f001 ffd5 	bl	8005874 <HAL_I2CEx_ConfigAnalogFilter>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038d0:	f000 fc18 	bl	8004104 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038d4:	2100      	movs	r1, #0
 80038d6:	4805      	ldr	r0, [pc, #20]	; (80038ec <MX_I2C1_Init+0x74>)
 80038d8:	f002 f817 	bl	800590a <HAL_I2CEx_ConfigDigitalFilter>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038e2:	f000 fc0f 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20046a00 	.word	0x20046a00
 80038f0:	40005400 	.word	0x40005400
 80038f4:	2010091a 	.word	0x2010091a

080038f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038fe:	f107 030c 	add.w	r3, r7, #12
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f005 fbad 	bl	8009066 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800390c:	463b      	mov	r3, r7
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <MX_TIM1_Init+0xac>)
 8003918:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <MX_TIM1_Init+0xb0>)
 800391a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <MX_TIM1_Init+0xac>)
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <MX_TIM1_Init+0xac>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <MX_TIM1_Init+0xac>)
 800392a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <MX_TIM1_Init+0xac>)
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003936:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <MX_TIM1_Init+0xac>)
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <MX_TIM1_Init+0xac>)
 800393e:	2200      	movs	r2, #0
 8003940:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003942:	2303      	movs	r3, #3
 8003944:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003956:	2300      	movs	r3, #0
 8003958:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800395e:	2300      	movs	r3, #0
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	4619      	mov	r1, r3
 800396c:	480d      	ldr	r0, [pc, #52]	; (80039a4 <MX_TIM1_Init+0xac>)
 800396e:	f003 fb5d 	bl	800702c <HAL_TIM_Encoder_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003978:	f000 fbc4 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800397c:	2300      	movs	r3, #0
 800397e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003988:	463b      	mov	r3, r7
 800398a:	4619      	mov	r1, r3
 800398c:	4805      	ldr	r0, [pc, #20]	; (80039a4 <MX_TIM1_Init+0xac>)
 800398e:	f004 faed 	bl	8007f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003998:	f000 fbb4 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800399c:	bf00      	nop
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20046ef8 	.word	0x20046ef8
 80039a8:	40010000 	.word	0x40010000

080039ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039b2:	f107 0310 	add.w	r3, r7, #16
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039d4:	225f      	movs	r2, #95	; 0x5f
 80039d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039f2:	4814      	ldr	r0, [pc, #80]	; (8003a44 <MX_TIM2_Init+0x98>)
 80039f4:	f003 fa4a 	bl	8006e8c <HAL_TIM_Base_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80039fe:	f000 fb81 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480d      	ldr	r0, [pc, #52]	; (8003a44 <MX_TIM2_Init+0x98>)
 8003a10:	f003 fe0c 	bl	800762c <HAL_TIM_ConfigClockSource>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a1a:	f000 fb73 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <MX_TIM2_Init+0x98>)
 8003a2c:	f004 fa9e 	bl	8007f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a36:	f000 fb65 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20046f98 	.word	0x20046f98

08003a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 fb05 	bl	8009066 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a68:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <MX_TIM3_Init+0xa8>)
 8003a6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	480d      	ldr	r0, [pc, #52]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003ab8:	f003 fab8 	bl	800702c <HAL_TIM_Encoder_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003ac2:	f000 fb1f 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ace:	463b      	mov	r3, r7
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4806      	ldr	r0, [pc, #24]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003ad4:	f004 fa4a 	bl	8007f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003ade:	f000 fb11 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	3730      	adds	r7, #48	; 0x30
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20046e94 	.word	0x20046e94
 8003af0:	40000400 	.word	0x40000400

08003af4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	; 0x30
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003afa:	f107 030c 	add.w	r3, r7, #12
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 faaf 	bl	8009066 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b08:	463b      	mov	r3, r7
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b14:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <MX_TIM4_Init+0xa8>)
 8003b16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b18:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	4619      	mov	r1, r3
 8003b62:	480d      	ldr	r0, [pc, #52]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b64:	f003 fa62 	bl	800702c <HAL_TIM_Encoder_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003b6e:	f000 fac9 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4806      	ldr	r0, [pc, #24]	; (8003b98 <MX_TIM4_Init+0xa4>)
 8003b80:	f004 f9f4 	bl	8007f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003b8a:	f000 fabb 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b8e:	bf00      	nop
 8003b90:	3730      	adds	r7, #48	; 0x30
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20046940 	.word	0x20046940
 8003b9c:	40000800 	.word	0x40000800

08003ba0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	; 0x38
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bc0:	463b      	mov	r3, r7
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	611a      	str	r2, [r3, #16]
 8003bce:	615a      	str	r2, [r3, #20]
 8003bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003bd2:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003bd4:	4a32      	ldr	r2, [pc, #200]	; (8003ca0 <MX_TIM5_Init+0x100>)
 8003bd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8003bd8:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000-1;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003be6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003bea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003bf8:	4828      	ldr	r0, [pc, #160]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003bfa:	f003 f947 	bl	8006e8c <HAL_TIM_Base_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003c04:	f000 fa7e 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c12:	4619      	mov	r1, r3
 8003c14:	4821      	ldr	r0, [pc, #132]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003c16:	f003 fd09 	bl	800762c <HAL_TIM_ConfigClockSource>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003c20:	f000 fa70 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003c24:	481d      	ldr	r0, [pc, #116]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003c26:	f003 f987 	bl	8006f38 <HAL_TIM_PWM_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003c30:	f000 fa68 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c3c:	f107 031c 	add.w	r3, r7, #28
 8003c40:	4619      	mov	r1, r3
 8003c42:	4816      	ldr	r0, [pc, #88]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003c44:	f004 f992 	bl	8007f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003c4e:	f000 fa59 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c52:	2360      	movs	r3, #96	; 0x60
 8003c54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c62:	463b      	mov	r3, r7
 8003c64:	2200      	movs	r2, #0
 8003c66:	4619      	mov	r1, r3
 8003c68:	480c      	ldr	r0, [pc, #48]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003c6a:	f003 fbc7 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003c74:	f000 fa46 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c78:	463b      	mov	r3, r7
 8003c7a:	220c      	movs	r2, #12
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4807      	ldr	r0, [pc, #28]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003c80:	f003 fbbc 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8003c8a:	f000 fa3b 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003c8e:	4803      	ldr	r0, [pc, #12]	; (8003c9c <MX_TIM5_Init+0xfc>)
 8003c90:	f000 fbee 	bl	8004470 <HAL_TIM_MspPostInit>

}
 8003c94:	bf00      	nop
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20046e54 	.word	0x20046e54
 8003ca0:	40000c00 	.word	0x40000c00

08003ca4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003caa:	f107 030c 	add.w	r3, r7, #12
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f005 f9d7 	bl	8009066 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb8:	463b      	mov	r3, r7
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <MX_TIM8_Init+0xb0>)
 8003cc6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cdc:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d06:	2301      	movs	r3, #1
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	4619      	mov	r1, r3
 8003d18:	480d      	ldr	r0, [pc, #52]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003d1a:	f003 f987 	bl	800702c <HAL_TIM_Encoder_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003d24:	f000 f9ee 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d34:	463b      	mov	r3, r7
 8003d36:	4619      	mov	r1, r3
 8003d38:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_TIM8_Init+0xac>)
 8003d3a:	f004 f917 	bl	8007f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003d44:	f000 f9de 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20046900 	.word	0x20046900
 8003d54:	40010400 	.word	0x40010400

08003d58 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d5e:	f107 0320 	add.w	r3, r7, #32
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d6c:	1d3b      	adds	r3, r7, #4
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	615a      	str	r2, [r3, #20]
 8003d7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003d80:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <MX_TIM9_Init+0xd8>)
 8003d82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4000-1;
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003d92:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003d96:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9e:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003da4:	4821      	ldr	r0, [pc, #132]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003da6:	f003 f871 	bl	8006e8c <HAL_TIM_Base_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003db0:	f000 f9a8 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003dba:	f107 0320 	add.w	r3, r7, #32
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	481a      	ldr	r0, [pc, #104]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003dc2:	f003 fc33 	bl	800762c <HAL_TIM_ConfigClockSource>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003dcc:	f000 f99a 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003dd0:	4816      	ldr	r0, [pc, #88]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003dd2:	f003 f8b1 	bl	8006f38 <HAL_TIM_PWM_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003ddc:	f000 f992 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de0:	2360      	movs	r3, #96	; 0x60
 8003de2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2200      	movs	r2, #0
 8003df4:	4619      	mov	r1, r3
 8003df6:	480d      	ldr	r0, [pc, #52]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003df8:	f003 fb00 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003e02:	f000 f97f 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	2204      	movs	r2, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4807      	ldr	r0, [pc, #28]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003e0e:	f003 faf5 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003e18:	f000 f974 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003e1c:	4803      	ldr	r0, [pc, #12]	; (8003e2c <MX_TIM9_Init+0xd4>)
 8003e1e:	f000 fb27 	bl	8004470 <HAL_TIM_MspPostInit>

}
 8003e22:	bf00      	nop
 8003e24:	3730      	adds	r7, #48	; 0x30
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20046f38 	.word	0x20046f38
 8003e30:	40014000 	.word	0x40014000

08003e34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <MX_USART3_UART_Init+0x5c>)
 8003e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e76:	4805      	ldr	r0, [pc, #20]	; (8003e8c <MX_USART3_UART_Init+0x58>)
 8003e78:	f004 f924 	bl	80080c4 <HAL_UART_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003e82:	f000 f93f 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20046980 	.word	0x20046980
 8003e90:	40004800 	.word	0x40004800

08003e94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003e9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003e9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ea2:	2206      	movs	r2, #6
 8003ea4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ed6:	4805      	ldr	r0, [pc, #20]	; (8003eec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ed8:	f001 fd63 	bl	80059a2 <HAL_PCD_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003ee2:	f000 f90f 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20046a4c 	.word	0x20046a4c

08003ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef6:	f107 031c 	add.w	r3, r7, #28
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f06:	4b78      	ldr	r3, [pc, #480]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a77      	ldr	r2, [pc, #476]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f0c:	f043 0310 	orr.w	r3, r3, #16
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1e:	4b72      	ldr	r3, [pc, #456]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a71      	ldr	r2, [pc, #452]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b6f      	ldr	r3, [pc, #444]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f36:	4b6c      	ldr	r3, [pc, #432]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a6b      	ldr	r2, [pc, #428]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b69      	ldr	r3, [pc, #420]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	4b66      	ldr	r3, [pc, #408]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a65      	ldr	r2, [pc, #404]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b63      	ldr	r3, [pc, #396]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	4b60      	ldr	r3, [pc, #384]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a5f      	ldr	r2, [pc, #380]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b5d      	ldr	r3, [pc, #372]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f7e:	4b5a      	ldr	r3, [pc, #360]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a59      	ldr	r2, [pc, #356]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f84:	f043 0308 	orr.w	r3, r3, #8
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f96:	4b54      	ldr	r3, [pc, #336]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a53      	ldr	r2, [pc, #332]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <MX_GPIO_Init+0x1f8>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f244 0181 	movw	r1, #16513	; 0x4081
 8003fb4:	484d      	ldr	r0, [pc, #308]	; (80040ec <MX_GPIO_Init+0x1fc>)
 8003fb6:	f000 ffb7 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	484c      	ldr	r0, [pc, #304]	; (80040f0 <MX_GPIO_Init+0x200>)
 8003fc0:	f000 ffb2 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fca:	4b4a      	ldr	r3, [pc, #296]	; (80040f4 <MX_GPIO_Init+0x204>)
 8003fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003fd2:	f107 031c 	add.w	r3, r7, #28
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4847      	ldr	r0, [pc, #284]	; (80040f8 <MX_GPIO_Init+0x208>)
 8003fda:	f000 fdfb 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003fde:	2332      	movs	r3, #50	; 0x32
 8003fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fee:	230b      	movs	r3, #11
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff2:	f107 031c 	add.w	r3, r7, #28
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	483f      	ldr	r0, [pc, #252]	; (80040f8 <MX_GPIO_Init+0x208>)
 8003ffa:	f000 fdeb 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ffe:	2386      	movs	r3, #134	; 0x86
 8004000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800400e:	230b      	movs	r3, #11
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	4619      	mov	r1, r3
 8004018:	4838      	ldr	r0, [pc, #224]	; (80040fc <MX_GPIO_Init+0x20c>)
 800401a:	f000 fddb 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800401e:	f244 0381 	movw	r3, #16513	; 0x4081
 8004022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004024:	2301      	movs	r3, #1
 8004026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004030:	f107 031c 	add.w	r3, r7, #28
 8004034:	4619      	mov	r1, r3
 8004036:	482d      	ldr	r0, [pc, #180]	; (80040ec <MX_GPIO_Init+0x1fc>)
 8004038:	f000 fdcc 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800403c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004042:	2302      	movs	r3, #2
 8004044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404a:	2303      	movs	r3, #3
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800404e:	230b      	movs	r3, #11
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004052:	f107 031c 	add.w	r3, r7, #28
 8004056:	4619      	mov	r1, r3
 8004058:	4824      	ldr	r0, [pc, #144]	; (80040ec <MX_GPIO_Init+0x1fc>)
 800405a:	f000 fdbb 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800405e:	2340      	movs	r3, #64	; 0x40
 8004060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004062:	2301      	movs	r3, #1
 8004064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406a:	2300      	movs	r3, #0
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800406e:	f107 031c 	add.w	r3, r7, #28
 8004072:	4619      	mov	r1, r3
 8004074:	481e      	ldr	r0, [pc, #120]	; (80040f0 <MX_GPIO_Init+0x200>)
 8004076:	f000 fdad 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004086:	f107 031c 	add.w	r3, r7, #28
 800408a:	4619      	mov	r1, r3
 800408c:	4818      	ldr	r0, [pc, #96]	; (80040f0 <MX_GPIO_Init+0x200>)
 800408e:	f000 fda1 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <MX_GPIO_Init+0x210>)
 800409a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a0:	f107 031c 	add.w	r3, r7, #28
 80040a4:	4619      	mov	r1, r3
 80040a6:	4814      	ldr	r0, [pc, #80]	; (80040f8 <MX_GPIO_Init+0x208>)
 80040a8:	f000 fd94 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80040ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80040b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040be:	230b      	movs	r3, #11
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040c2:	f107 031c 	add.w	r3, r7, #28
 80040c6:	4619      	mov	r1, r3
 80040c8:	4809      	ldr	r0, [pc, #36]	; (80040f0 <MX_GPIO_Init+0x200>)
 80040ca:	f000 fd83 	bl	8004bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2100      	movs	r1, #0
 80040d2:	2017      	movs	r0, #23
 80040d4:	f000 fd47 	bl	8004b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80040d8:	2017      	movs	r0, #23
 80040da:	f000 fd60 	bl	8004b9e <HAL_NVIC_EnableIRQ>

}
 80040de:	bf00      	nop
 80040e0:	3730      	adds	r7, #48	; 0x30
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40021800 	.word	0x40021800
 80040f4:	10110000 	.word	0x10110000
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40020000 	.word	0x40020000
 8004100:	10310000 	.word	0x10310000

08004104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_MspInit+0x44>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_MspInit+0x44>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_MspInit+0x44>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_MspInit+0x44>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4a08      	ldr	r2, [pc, #32]	; (8004158 <HAL_MspInit+0x44>)
 8004138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413c:	6453      	str	r3, [r2, #68]	; 0x44
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_MspInit+0x44>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800

0800415c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <HAL_I2C_MspInit+0x7c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d128      	bne.n	80041d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <HAL_I2C_MspInit+0x80>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_I2C_MspInit+0x80>)
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6313      	str	r3, [r2, #48]	; 0x30
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_I2C_MspInit+0x80>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004196:	f44f 7310 	mov.w	r3, #576	; 0x240
 800419a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800419c:	2312      	movs	r3, #18
 800419e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a4:	2303      	movs	r3, #3
 80041a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041a8:	2304      	movs	r3, #4
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	4619      	mov	r1, r3
 80041b2:	480b      	ldr	r0, [pc, #44]	; (80041e0 <HAL_I2C_MspInit+0x84>)
 80041b4:	f000 fd0e 	bl	8004bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041b8:	4b08      	ldr	r3, [pc, #32]	; (80041dc <HAL_I2C_MspInit+0x80>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_I2C_MspInit+0x80>)
 80041be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_I2C_MspInit+0x80>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041d0:	bf00      	nop
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40005400 	.word	0x40005400
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020400 	.word	0x40020400

080041e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b090      	sub	sp, #64	; 0x40
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6b      	ldr	r2, [pc, #428]	; (80043b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d129      	bne.n	800425a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004206:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a6a      	ldr	r2, [pc, #424]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a64      	ldr	r2, [pc, #400]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004224:	f043 0310 	orr.w	r3, r3, #16
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b62      	ldr	r3, [pc, #392]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004236:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	2302      	movs	r3, #2
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004244:	2300      	movs	r3, #0
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004248:	2301      	movs	r3, #1
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800424c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004250:	4619      	mov	r1, r3
 8004252:	4859      	ldr	r0, [pc, #356]	; (80043b8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004254:	f000 fcbe 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004258:	e0a5      	b.n	80043a6 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a57      	ldr	r2, [pc, #348]	; (80043bc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d144      	bne.n	80042ee <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	6413      	str	r3, [r2, #64]	; 0x40
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427c:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	4a4c      	ldr	r2, [pc, #304]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6313      	str	r3, [r2, #48]	; 0x30
 8004288:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
 80042a0:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042ac:	2340      	movs	r3, #64	; 0x40
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b0:	2302      	movs	r3, #2
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b8:	2300      	movs	r3, #0
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042bc:	2302      	movs	r3, #2
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c4:	4619      	mov	r1, r3
 80042c6:	483e      	ldr	r0, [pc, #248]	; (80043c0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80042c8:	f000 fc84 	bl	8004bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042cc:	2320      	movs	r3, #32
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d8:	2300      	movs	r3, #0
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042dc:	2302      	movs	r3, #2
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e4:	4619      	mov	r1, r3
 80042e6:	4837      	ldr	r0, [pc, #220]	; (80043c4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80042e8:	f000 fc74 	bl	8004bd4 <HAL_GPIO_Init>
}
 80042ec:	e05b      	b.n	80043a6 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a35      	ldr	r2, [pc, #212]	; (80043c8 <HAL_TIM_Encoder_MspInit+0x1e4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d129      	bne.n	800434c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042f8:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	6413      	str	r3, [r2, #64]	; 0x40
 8004304:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	6313      	str	r3, [r2, #48]	; 0x30
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004328:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432e:	2302      	movs	r3, #2
 8004330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004336:	2300      	movs	r3, #0
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800433a:	2302      	movs	r3, #2
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800433e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004342:	4619      	mov	r1, r3
 8004344:	4821      	ldr	r0, [pc, #132]	; (80043cc <HAL_TIM_Encoder_MspInit+0x1e8>)
 8004346:	f000 fc45 	bl	8004bd4 <HAL_GPIO_Init>
}
 800434a:	e02c      	b.n	80043a6 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d127      	bne.n	80043a6 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	6453      	str	r3, [r2, #68]	; 0x44
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	6313      	str	r3, [r2, #48]	; 0x30
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004386:	23c0      	movs	r3, #192	; 0xc0
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004396:	2303      	movs	r3, #3
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800439a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800439e:	4619      	mov	r1, r3
 80043a0:	480c      	ldr	r0, [pc, #48]	; (80043d4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043a2:	f000 fc17 	bl	8004bd4 <HAL_GPIO_Init>
}
 80043a6:	bf00      	nop
 80043a8:	3740      	adds	r7, #64	; 0x40
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40020000 	.word	0x40020000
 80043c4:	40020400 	.word	0x40020400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40020c00 	.word	0x40020c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40020800 	.word	0x40020800

080043d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d114      	bne.n	8004414 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6413      	str	r3, [r2, #64]	; 0x40
 80043f6:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	201c      	movs	r0, #28
 8004408:	f000 fbad 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800440c:	201c      	movs	r0, #28
 800440e:	f000 fbc6 	bl	8004b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8004412:	e022      	b.n	800445a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a13      	ldr	r2, [pc, #76]	; (8004468 <HAL_TIM_Base_MspInit+0x90>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10c      	bne.n	8004438 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
}
 8004436:	e010      	b.n	800445a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0b      	ldr	r2, [pc, #44]	; (800446c <HAL_TIM_Base_MspInit+0x94>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10b      	bne.n	800445a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_TIM_Base_MspInit+0x8c>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_TIM_MspPostInit+0xa8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11c      	bne.n	80044cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_TIM_MspPostInit+0xac>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_TIM_MspPostInit+0xac>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6313      	str	r3, [r2, #48]	; 0x30
 800449e:	4b1f      	ldr	r3, [pc, #124]	; (800451c <HAL_TIM_MspPostInit+0xac>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80044aa:	2309      	movs	r3, #9
 80044ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	2300      	movs	r3, #0
 80044b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80044ba:	2302      	movs	r3, #2
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	4619      	mov	r1, r3
 80044c4:	4816      	ldr	r0, [pc, #88]	; (8004520 <HAL_TIM_MspPostInit+0xb0>)
 80044c6:	f000 fb85 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80044ca:	e020      	b.n	800450e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d11b      	bne.n	800450e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_TIM_MspPostInit+0xac>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <HAL_TIM_MspPostInit+0xac>)
 80044dc:	f043 0310 	orr.w	r3, r3, #16
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_TIM_MspPostInit+0xac>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80044ee:	2360      	movs	r3, #96	; 0x60
 80044f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80044fe:	2303      	movs	r3, #3
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004502:	f107 0314 	add.w	r3, r7, #20
 8004506:	4619      	mov	r1, r3
 8004508:	4807      	ldr	r0, [pc, #28]	; (8004528 <HAL_TIM_MspPostInit+0xb8>)
 800450a:	f000 fb63 	bl	8004bd4 <HAL_GPIO_Init>
}
 800450e:	bf00      	nop
 8004510:	3728      	adds	r7, #40	; 0x28
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40023800 	.word	0x40023800
 8004520:	40020000 	.word	0x40020000
 8004524:	40014000 	.word	0x40014000
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004534:	f107 0314 	add.w	r3, r7, #20
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <HAL_UART_MspInit+0x7c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d128      	bne.n	80045a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800454e:	4b17      	ldr	r3, [pc, #92]	; (80045ac <HAL_UART_MspInit+0x80>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a16      	ldr	r2, [pc, #88]	; (80045ac <HAL_UART_MspInit+0x80>)
 8004554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
 800455a:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_UART_MspInit+0x80>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <HAL_UART_MspInit+0x80>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	4a10      	ldr	r2, [pc, #64]	; (80045ac <HAL_UART_MspInit+0x80>)
 800456c:	f043 0308 	orr.w	r3, r3, #8
 8004570:	6313      	str	r3, [r2, #48]	; 0x30
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_UART_MspInit+0x80>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800457e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004584:	2302      	movs	r3, #2
 8004586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458c:	2303      	movs	r3, #3
 800458e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004590:	2307      	movs	r3, #7
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	4619      	mov	r1, r3
 800459a:	4805      	ldr	r0, [pc, #20]	; (80045b0 <HAL_UART_MspInit+0x84>)
 800459c:	f000 fb1a 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045a0:	bf00      	nop
 80045a2:	3728      	adds	r7, #40	; 0x28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40004800 	.word	0x40004800
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40020c00 	.word	0x40020c00

080045b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045d4:	d141      	bne.n	800465a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a22      	ldr	r2, [pc, #136]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80045ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80045f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004600:	230a      	movs	r3, #10
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	4619      	mov	r1, r3
 800460a:	4817      	ldr	r0, [pc, #92]	; (8004668 <HAL_PCD_MspInit+0xb4>)
 800460c:	f000 fae2 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800461e:	f107 0314 	add.w	r3, r7, #20
 8004622:	4619      	mov	r1, r3
 8004624:	4810      	ldr	r0, [pc, #64]	; (8004668 <HAL_PCD_MspInit+0xb4>)
 8004626:	f000 fad5 	bl	8004bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	6353      	str	r3, [r2, #52]	; 0x34
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 8004648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464c:	6453      	str	r3, [r2, #68]	; 0x44
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_PCD_MspInit+0xb0>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800465a:	bf00      	nop
 800465c:	3728      	adds	r7, #40	; 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	40020000 	.word	0x40020000

0800466c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800467e:	e7fe      	b.n	800467e <HardFault_Handler+0x4>

08004680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004684:	e7fe      	b.n	8004684 <MemManage_Handler+0x4>

08004686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800468a:	e7fe      	b.n	800468a <BusFault_Handler+0x4>

0800468c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004690:	e7fe      	b.n	8004690 <UsageFault_Handler+0x4>

08004692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004696:	bf00      	nop
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046ae:	b480      	push	{r7}
 80046b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c0:	f000 f934 	bl	800492c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80046cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80046d0:	f000 fc44 	bl	8004f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <TIM2_IRQHandler+0x10>)
 80046de:	f002 fd6e 	bl	80071be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20046f98 	.word	0x20046f98

080046ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e00a      	b.n	8004714 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046fe:	f3af 8000 	nop.w
 8004702:	4601      	mov	r1, r0
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	60ba      	str	r2, [r7, #8]
 800470a:	b2ca      	uxtb	r2, r1
 800470c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	dbf0      	blt.n	80046fe <_read+0x12>
	}

return len;
 800471c:	687b      	ldr	r3, [r7, #4]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	e009      	b.n	800474c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	60ba      	str	r2, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fc fab1 	bl	8000ca8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	3301      	adds	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	dbf1      	blt.n	8004738 <_write+0x12>
	}
	return len;
 8004754:	687b      	ldr	r3, [r7, #4]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <_close>:

int _close(int file)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
	return -1;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004786:	605a      	str	r2, [r3, #4]
	return 0;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <_isatty>:

int _isatty(int file)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
	return 1;
 800479e:	2301      	movs	r3, #1
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
	return 0;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <_sbrk+0x5c>)
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <_sbrk+0x60>)
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <_sbrk+0x64>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <_sbrk+0x64>)
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <_sbrk+0x68>)
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <_sbrk+0x64>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d207      	bcs.n	8004808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047f8:	f004 fc00 	bl	8008ffc <__errno>
 80047fc:	4602      	mov	r2, r0
 80047fe:	230c      	movs	r3, #12
 8004800:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295
 8004806:	e009      	b.n	800481c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <_sbrk+0x64>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <_sbrk+0x64>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <_sbrk+0x64>)
 8004818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800481a:	68fb      	ldr	r3, [r7, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20080000 	.word	0x20080000
 8004828:	00000400 	.word	0x00000400
 800482c:	200468f0 	.word	0x200468f0
 8004830:	20047028 	.word	0x20047028

08004834 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004838:	4b08      	ldr	r3, [pc, #32]	; (800485c <SystemInit+0x28>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	4a07      	ldr	r2, [pc, #28]	; (800485c <SystemInit+0x28>)
 8004840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <SystemInit+0x28>)
 800484a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800484e:	609a      	str	r2, [r3, #8]
#endif
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004898 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004866:	e003      	b.n	8004870 <LoopCopyDataInit>

08004868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800486a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800486c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800486e:	3104      	adds	r1, #4

08004870 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004870:	480b      	ldr	r0, [pc, #44]	; (80048a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004878:	d3f6      	bcc.n	8004868 <CopyDataInit>
  ldr  r2, =_sbss
 800487a:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800487c:	e002      	b.n	8004884 <LoopFillZerobss>

0800487e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800487e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004880:	f842 3b04 	str.w	r3, [r2], #4

08004884 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004888:	d3f9      	bcc.n	800487e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800488a:	f7ff ffd3 	bl	8004834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800488e:	f004 fbbb 	bl	8009008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004892:	f7fe fe9b 	bl	80035cc <main>
  bx  lr    
 8004896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004898:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800489c:	0800bba8 	.word	0x0800bba8
  ldr  r0, =_sdata
 80048a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048a4:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80048a8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80048ac:	20047024 	.word	0x20047024

080048b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048b0:	e7fe      	b.n	80048b0 <ADC_IRQHandler>

080048b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048b6:	2003      	movs	r0, #3
 80048b8:	f000 f94a 	bl	8004b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048bc:	2000      	movs	r0, #0
 80048be:	f000 f805 	bl	80048cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048c2:	f7ff fc27 	bl	8004114 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_InitTick+0x54>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b12      	ldr	r3, [pc, #72]	; (8004924 <HAL_InitTick+0x58>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f965 	bl	8004bba <HAL_SYSTICK_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00e      	b.n	8004918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b0f      	cmp	r3, #15
 80048fe:	d80a      	bhi.n	8004916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004900:	2200      	movs	r2, #0
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	f000 f92d 	bl	8004b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800490c:	4a06      	ldr	r2, [pc, #24]	; (8004928 <HAL_InitTick+0x5c>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000018 	.word	0x20000018
 8004924:	20000020 	.word	0x20000020
 8004928:	2000001c 	.word	0x2000001c

0800492c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_IncTick+0x20>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_IncTick+0x24>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4413      	add	r3, r2
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <HAL_IncTick+0x24>)
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000020 	.word	0x20000020
 8004950:	2004701c 	.word	0x2004701c

08004954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return uwTick;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_GetTick+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	2004701c 	.word	0x2004701c

0800496c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004974:	f7ff ffee 	bl	8004954 <HAL_GetTick>
 8004978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d005      	beq.n	8004992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_Delay+0x40>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004992:	bf00      	nop
 8004994:	f7ff ffde 	bl	8004954 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d8f7      	bhi.n	8004994 <HAL_Delay+0x28>
  {
  }
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000020 	.word	0x20000020

080049b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <__NVIC_SetPriorityGrouping+0x40>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <__NVIC_SetPriorityGrouping+0x44>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049de:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <__NVIC_SetPriorityGrouping+0x40>)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	60d3      	str	r3, [r2, #12]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000ed00 	.word	0xe000ed00
 80049f4:	05fa0000 	.word	0x05fa0000

080049f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <__NVIC_GetPriorityGrouping+0x18>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	f003 0307 	and.w	r3, r3, #7
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	db0b      	blt.n	8004a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	4907      	ldr	r1, [pc, #28]	; (8004a4c <__NVIC_EnableIRQ+0x38>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2001      	movs	r0, #1
 8004a36:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e100 	.word	0xe000e100

08004a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf28      	it	cs
 8004ac2:	2304      	movcs	r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d902      	bls.n	8004ad4 <NVIC_EncodePriority+0x30>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3b03      	subs	r3, #3
 8004ad2:	e000      	b.n	8004ad6 <NVIC_EncodePriority+0x32>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aec:	f04f 31ff 	mov.w	r1, #4294967295
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4313      	orrs	r3, r2
         );
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b1c:	d301      	bcc.n	8004b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00f      	b.n	8004b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <SysTick_Config+0x40>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b2a:	210f      	movs	r1, #15
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	f7ff ff8e 	bl	8004a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <SysTick_Config+0x40>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b3a:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <SysTick_Config+0x40>)
 8004b3c:	2207      	movs	r2, #7
 8004b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	e000e010 	.word	0xe000e010

08004b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff29 	bl	80049b0 <__NVIC_SetPriorityGrouping>
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b78:	f7ff ff3e 	bl	80049f8 <__NVIC_GetPriorityGrouping>
 8004b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff8e 	bl	8004aa4 <NVIC_EncodePriority>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff5d 	bl	8004a50 <__NVIC_SetPriority>
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff ff31 	bl	8004a14 <__NVIC_EnableIRQ>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ffa2 	bl	8004b0c <SysTick_Config>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	e175      	b.n	8004ee0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	f040 8164 	bne.w	8004eda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d00b      	beq.n	8004c32 <HAL_GPIO_Init+0x5e>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d007      	beq.n	8004c32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c26:	2b11      	cmp	r3, #17
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b12      	cmp	r3, #18
 8004c30:	d130      	bne.n	8004c94 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0201 	and.w	r2, r3, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d003      	beq.n	8004cd4 <HAL_GPIO_Init+0x100>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b12      	cmp	r3, #18
 8004cd2:	d123      	bne.n	8004d1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	08da      	lsrs	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3208      	adds	r2, #8
 8004cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	220f      	movs	r2, #15
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	08da      	lsrs	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3208      	adds	r2, #8
 8004d16:	69b9      	ldr	r1, [r7, #24]
 8004d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	2203      	movs	r2, #3
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0203 	and.w	r2, r3, #3
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80be 	beq.w	8004eda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <HAL_GPIO_Init+0x320>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	4a64      	ldr	r2, [pc, #400]	; (8004ef4 <HAL_GPIO_Init+0x320>)
 8004d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d68:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6a:	4b62      	ldr	r3, [pc, #392]	; (8004ef4 <HAL_GPIO_Init+0x320>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d76:	4a60      	ldr	r2, [pc, #384]	; (8004ef8 <HAL_GPIO_Init+0x324>)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a57      	ldr	r2, [pc, #348]	; (8004efc <HAL_GPIO_Init+0x328>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d037      	beq.n	8004e12 <HAL_GPIO_Init+0x23e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a56      	ldr	r2, [pc, #344]	; (8004f00 <HAL_GPIO_Init+0x32c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_GPIO_Init+0x23a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a55      	ldr	r2, [pc, #340]	; (8004f04 <HAL_GPIO_Init+0x330>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d02b      	beq.n	8004e0a <HAL_GPIO_Init+0x236>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a54      	ldr	r2, [pc, #336]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d025      	beq.n	8004e06 <HAL_GPIO_Init+0x232>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a53      	ldr	r2, [pc, #332]	; (8004f0c <HAL_GPIO_Init+0x338>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01f      	beq.n	8004e02 <HAL_GPIO_Init+0x22e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a52      	ldr	r2, [pc, #328]	; (8004f10 <HAL_GPIO_Init+0x33c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d019      	beq.n	8004dfe <HAL_GPIO_Init+0x22a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a51      	ldr	r2, [pc, #324]	; (8004f14 <HAL_GPIO_Init+0x340>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_GPIO_Init+0x226>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a50      	ldr	r2, [pc, #320]	; (8004f18 <HAL_GPIO_Init+0x344>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00d      	beq.n	8004df6 <HAL_GPIO_Init+0x222>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a4f      	ldr	r2, [pc, #316]	; (8004f1c <HAL_GPIO_Init+0x348>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <HAL_GPIO_Init+0x21e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a4e      	ldr	r2, [pc, #312]	; (8004f20 <HAL_GPIO_Init+0x34c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d101      	bne.n	8004dee <HAL_GPIO_Init+0x21a>
 8004dea:	2309      	movs	r3, #9
 8004dec:	e012      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004dee:	230a      	movs	r3, #10
 8004df0:	e010      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004df2:	2308      	movs	r3, #8
 8004df4:	e00e      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004df6:	2307      	movs	r3, #7
 8004df8:	e00c      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	e00a      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e008      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e02:	2304      	movs	r3, #4
 8004e04:	e006      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e06:	2303      	movs	r3, #3
 8004e08:	e004      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e002      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_GPIO_Init+0x240>
 8004e12:	2300      	movs	r3, #0
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f002 0203 	and.w	r2, r2, #3
 8004e1a:	0092      	lsls	r2, r2, #2
 8004e1c:	4093      	lsls	r3, r2
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e24:	4934      	ldr	r1, [pc, #208]	; (8004ef8 <HAL_GPIO_Init+0x324>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	089b      	lsrs	r3, r3, #2
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e32:	4b3c      	ldr	r3, [pc, #240]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e56:	4a33      	ldr	r2, [pc, #204]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e5c:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb0:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <HAL_GPIO_Init+0x350>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	f67f ae86 	bls.w	8004bf4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3724      	adds	r7, #36	; 0x24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40020000 	.word	0x40020000
 8004f00:	40020400 	.word	0x40020400
 8004f04:	40020800 	.word	0x40020800
 8004f08:	40020c00 	.word	0x40020c00
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40021400 	.word	0x40021400
 8004f14:	40021800 	.word	0x40021800
 8004f18:	40021c00 	.word	0x40021c00
 8004f1c:	40022000 	.word	0x40022000
 8004f20:	40022400 	.word	0x40022400
 8004f24:	40013c00 	.word	0x40013c00

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004f44:	e003      	b.n	8004f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	041a      	lsls	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	619a      	str	r2, [r3, #24]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fd ff34 	bl	8002de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40013c00 	.word	0x40013c00

08004f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e07f      	b.n	800509e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff f8d2 	bl	800415c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	e006      	b.n	8005014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d104      	bne.n	8005026 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_I2C_Init+0x11c>)
 8005032:	430b      	orrs	r3, r1
 8005034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	ea42 0103 	orr.w	r1, r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69d9      	ldr	r1, [r3, #28]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1a      	ldr	r2, [r3, #32]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	02008000 	.word	0x02008000

080050ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	461a      	mov	r2, r3
 80050b8:	460b      	mov	r3, r1
 80050ba:	817b      	strh	r3, [r7, #10]
 80050bc:	4613      	mov	r3, r2
 80050be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	f040 80da 	bne.w	8005282 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_I2C_Master_Transmit+0x30>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0d3      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1d8>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050e4:	f7ff fc36 	bl	8004954 <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2319      	movs	r3, #25
 80050f0:	2201      	movs	r2, #1
 80050f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fa00 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0be      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2221      	movs	r2, #33	; 0x21
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2210      	movs	r2, #16
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	893a      	ldrh	r2, [r7, #8]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2bff      	cmp	r3, #255	; 0xff
 8005136:	d90e      	bls.n	8005156 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	22ff      	movs	r2, #255	; 0xff
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	b2da      	uxtb	r2, r3
 8005144:	8979      	ldrh	r1, [r7, #10]
 8005146:	4b51      	ldr	r3, [pc, #324]	; (800528c <HAL_I2C_Master_Transmit+0x1e0>)
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fb62 	bl	8005818 <I2C_TransferConfig>
 8005154:	e06c      	b.n	8005230 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	4b48      	ldr	r3, [pc, #288]	; (800528c <HAL_I2C_Master_Transmit+0x1e0>)
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fb51 	bl	8005818 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005176:	e05b      	b.n	8005230 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	6a39      	ldr	r1, [r7, #32]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f9fd 	bl	800557c <I2C_WaitOnTXISFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e07b      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d034      	beq.n	8005230 <HAL_I2C_Master_Transmit+0x184>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d130      	bne.n	8005230 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f98f 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e04d      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2bff      	cmp	r3, #255	; 0xff
 80051f0:	d90e      	bls.n	8005210 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	8979      	ldrh	r1, [r7, #10]
 8005200:	2300      	movs	r3, #0
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fb05 	bl	8005818 <I2C_TransferConfig>
 800520e:	e00f      	b.n	8005230 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521e:	b2da      	uxtb	r2, r3
 8005220:	8979      	ldrh	r1, [r7, #10]
 8005222:	2300      	movs	r3, #0
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 faf4 	bl	8005818 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d19e      	bne.n	8005178 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	6a39      	ldr	r1, [r7, #32]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f9dc 	bl	80055fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e01a      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2220      	movs	r2, #32
 8005254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_I2C_Master_Transmit+0x1e4>)
 8005262:	400b      	ands	r3, r1
 8005264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	e000      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005282:	2302      	movs	r3, #2
  }
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	80002000 	.word	0x80002000
 8005290:	fe00e800 	.word	0xfe00e800

08005294 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	460b      	mov	r3, r1
 80052a2:	817b      	strh	r3, [r7, #10]
 80052a4:	4613      	mov	r3, r2
 80052a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	f040 80db 	bne.w	800546c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_I2C_Master_Receive+0x30>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0d4      	b.n	800546e <HAL_I2C_Master_Receive+0x1da>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052cc:	f7ff fb42 	bl	8004954 <HAL_GetTick>
 80052d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2319      	movs	r3, #25
 80052d8:	2201      	movs	r2, #1
 80052da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f90c 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0bf      	b.n	800546e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2222      	movs	r2, #34	; 0x22
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2210      	movs	r2, #16
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	893a      	ldrh	r2, [r7, #8]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	2bff      	cmp	r3, #255	; 0xff
 800531e:	d90e      	bls.n	800533e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	b2da      	uxtb	r2, r3
 800532c:	8979      	ldrh	r1, [r7, #10]
 800532e:	4b52      	ldr	r3, [pc, #328]	; (8005478 <HAL_I2C_Master_Receive+0x1e4>)
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fa6e 	bl	8005818 <I2C_TransferConfig>
 800533c:	e06d      	b.n	800541a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534c:	b2da      	uxtb	r2, r3
 800534e:	8979      	ldrh	r1, [r7, #10]
 8005350:	4b49      	ldr	r3, [pc, #292]	; (8005478 <HAL_I2C_Master_Receive+0x1e4>)
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fa5d 	bl	8005818 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800535e:	e05c      	b.n	800541a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	6a39      	ldr	r1, [r7, #32]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f985 	bl	8005674 <I2C_WaitOnRXNEFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e07c      	b.n	800546e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d034      	beq.n	800541a <HAL_I2C_Master_Receive+0x186>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d130      	bne.n	800541a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	2200      	movs	r2, #0
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f89a 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e04d      	b.n	800546e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2bff      	cmp	r3, #255	; 0xff
 80053da:	d90e      	bls.n	80053fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	8979      	ldrh	r1, [r7, #10]
 80053ea:	2300      	movs	r3, #0
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fa10 	bl	8005818 <I2C_TransferConfig>
 80053f8:	e00f      	b.n	800541a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	b2da      	uxtb	r2, r3
 800540a:	8979      	ldrh	r1, [r7, #10]
 800540c:	2300      	movs	r3, #0
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f9ff 	bl	8005818 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d19d      	bne.n	8005360 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	6a39      	ldr	r1, [r7, #32]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f8e7 	bl	80055fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e01a      	b.n	800546e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2220      	movs	r2, #32
 800543e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <HAL_I2C_Master_Receive+0x1e8>)
 800544c:	400b      	ands	r3, r1
 800544e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	80002400 	.word	0x80002400
 800547c:	fe00e800 	.word	0xfe00e800

08005480 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548e:	b2db      	uxtb	r3, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d103      	bne.n	80054d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d007      	beq.n	80054f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	619a      	str	r2, [r3, #24]
  }
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550c:	e022      	b.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d01e      	beq.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7ff fa1d 	bl	8004954 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e00f      	b.n	8005574 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	429a      	cmp	r2, r3
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	429a      	cmp	r2, r3
 8005570:	d0cd      	beq.n	800550e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005588:	e02c      	b.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8dc 	bl	800574c <I2C_IsAcknowledgeFailed>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e02a      	b.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d01e      	beq.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7ff f9d5 	bl	8004954 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d113      	bne.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e007      	b.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d1cb      	bne.n	800558a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005608:	e028      	b.n	800565c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f89c 	bl	800574c <I2C_IsAcknowledgeFailed>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e026      	b.n	800566c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7ff f999 	bl	8004954 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d113      	bne.n	800565c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d1cf      	bne.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005680:	e055      	b.n	800572e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f860 	bl	800574c <I2C_IsAcknowledgeFailed>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e053      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d129      	bne.n	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d105      	bne.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e03f      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2220      	movs	r2, #32
 80056c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80056d2:	400b      	ands	r3, r1
 80056d4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e022      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f8:	f7ff f92c 	bl	8004954 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10f      	bne.n	800572e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b04      	cmp	r3, #4
 800573a:	d1a2      	bne.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	fe00e800 	.word	0xfe00e800

0800574c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d151      	bne.n	800580a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005766:	e022      	b.n	80057ae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d01e      	beq.n	80057ae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005770:	f7ff f8f0 	bl	8004954 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <I2C_IsAcknowledgeFailed+0x3a>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d113      	bne.n	80057ae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e02e      	b.n	800580c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d1d5      	bne.n	8005768 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2210      	movs	r2, #16
 80057c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2220      	movs	r2, #32
 80057ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fe71 	bl	80054b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <I2C_IsAcknowledgeFailed+0xc8>)
 80057de:	400b      	ands	r3, r1
 80057e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	f043 0204 	orr.w	r2, r3, #4
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	fe00e800 	.word	0xfe00e800

08005818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	817b      	strh	r3, [r7, #10]
 8005826:	4613      	mov	r3, r2
 8005828:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	0d5b      	lsrs	r3, r3, #21
 8005834:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <I2C_TransferConfig+0x58>)
 800583a:	430b      	orrs	r3, r1
 800583c:	43db      	mvns	r3, r3
 800583e:	ea02 0103 	and.w	r1, r2, r3
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005848:	7a7b      	ldrb	r3, [r7, #9]
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	431a      	orrs	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	03ff63ff 	.word	0x03ff63ff

08005874 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b20      	cmp	r3, #32
 8005888:	d138      	bne.n	80058fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005894:	2302      	movs	r3, #2
 8005896:	e032      	b.n	80058fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2224      	movs	r2, #36	; 0x24
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e000      	b.n	80058fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b20      	cmp	r3, #32
 800591e:	d139      	bne.n	8005994 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800592a:	2302      	movs	r3, #2
 800592c:	e033      	b.n	8005996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2224      	movs	r2, #36	; 0x24
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800595c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a4:	b08f      	sub	sp, #60	; 0x3c
 80059a6:	af0a      	add	r7, sp, #40	; 0x28
 80059a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e116      	b.n	8005be2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fe fdf0 	bl	80045b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2203      	movs	r2, #3
 80059d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f003 f8aa 	bl	8008b4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	687e      	ldr	r6, [r7, #4]
 8005a00:	466d      	mov	r5, sp
 8005a02:	f106 0410 	add.w	r4, r6, #16
 8005a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a12:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a16:	1d33      	adds	r3, r6, #4
 8005a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a1a:	6838      	ldr	r0, [r7, #0]
 8005a1c:	f003 f83e 	bl	8008a9c <USB_CoreInit>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e0d7      	b.n	8005be2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 f898 	bl	8008b6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	e04a      	b.n	8005ada <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a44:	7bfa      	ldrb	r2, [r7, #15]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	333d      	adds	r3, #61	; 0x3d
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a58:	7bfa      	ldrb	r2, [r7, #15]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	333c      	adds	r3, #60	; 0x3c
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a6c:	7bfa      	ldrb	r2, [r7, #15]
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	b298      	uxth	r0, r3
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3342      	adds	r3, #66	; 0x42
 8005a80:	4602      	mov	r2, r0
 8005a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a84:	7bfa      	ldrb	r2, [r7, #15]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	333f      	adds	r3, #63	; 0x3f
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	3344      	adds	r3, #68	; 0x44
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	3348      	adds	r3, #72	; 0x48
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	3350      	adds	r3, #80	; 0x50
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d3af      	bcc.n	8005a44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	73fb      	strb	r3, [r7, #15]
 8005ae8:	e044      	b.n	8005b74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b2c:	7bfa      	ldrb	r2, [r7, #15]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b42:	7bfa      	ldrb	r2, [r7, #15]
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b58:	7bfa      	ldrb	r2, [r7, #15]
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	3301      	adds	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
 8005b74:	7bfa      	ldrb	r2, [r7, #15]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d3b5      	bcc.n	8005aea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	687e      	ldr	r6, [r7, #4]
 8005b86:	466d      	mov	r5, sp
 8005b88:	f106 0410 	add.w	r4, r6, #16
 8005b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b98:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b9c:	1d33      	adds	r3, r6, #4
 8005b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f003 f80f 	bl	8008bc4 <USB_DevInit>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e014      	b.n	8005be2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d102      	bne.n	8005bd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f80b 	bl	8005bec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 f9c1 	bl	8008f62 <USB_DevDisconnect>

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005bec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_PCDEx_ActivateLPM+0x44>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	10000003 	.word	0x10000003

08005c34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a04      	ldr	r2, [pc, #16]	; (8005c50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c42:	6013      	str	r3, [r2, #0]
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40007000 	.word	0x40007000

08005c54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b23      	ldr	r3, [pc, #140]	; (8005cec <HAL_PWREx_EnableOverDrive+0x98>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_PWREx_EnableOverDrive+0x98>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6a:	4b20      	ldr	r3, [pc, #128]	; (8005cec <HAL_PWREx_EnableOverDrive+0x98>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c82:	f7fe fe67 	bl	8004954 <HAL_GetTick>
 8005c86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c88:	e009      	b.n	8005c9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c8a:	f7fe fe63 	bl	8004954 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c98:	d901      	bls.n	8005c9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e022      	b.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c9e:	4b14      	ldr	r3, [pc, #80]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005caa:	d1ee      	bne.n	8005c8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cac:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cb8:	f7fe fe4c 	bl	8004954 <HAL_GetTick>
 8005cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cbe:	e009      	b.n	8005cd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cc0:	f7fe fe48 	bl	8004954 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cce:	d901      	bls.n	8005cd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e007      	b.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce0:	d1ee      	bne.n	8005cc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	40007000 	.word	0x40007000

08005cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e29b      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 8087 	beq.w	8005e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d18:	4b96      	ldr	r3, [pc, #600]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 030c 	and.w	r3, r3, #12
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d00c      	beq.n	8005d3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d24:	4b93      	ldr	r3, [pc, #588]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 030c 	and.w	r3, r3, #12
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d112      	bne.n	8005d56 <HAL_RCC_OscConfig+0x62>
 8005d30:	4b90      	ldr	r3, [pc, #576]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3c:	d10b      	bne.n	8005d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3e:	4b8d      	ldr	r3, [pc, #564]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d06c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x130>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d168      	bne.n	8005e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e275      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5e:	d106      	bne.n	8005d6e <HAL_RCC_OscConfig+0x7a>
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a83      	ldr	r2, [pc, #524]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	e02e      	b.n	8005dcc <HAL_RCC_OscConfig+0xd8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCC_OscConfig+0x9c>
 8005d76:	4b7f      	ldr	r3, [pc, #508]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a7e      	ldr	r2, [pc, #504]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b7c      	ldr	r3, [pc, #496]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a7b      	ldr	r2, [pc, #492]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e01d      	b.n	8005dcc <HAL_RCC_OscConfig+0xd8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0xc0>
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a75      	ldr	r2, [pc, #468]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4b73      	ldr	r3, [pc, #460]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a72      	ldr	r2, [pc, #456]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0xd8>
 8005db4:	4b6f      	ldr	r3, [pc, #444]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a6e      	ldr	r2, [pc, #440]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6b      	ldr	r2, [pc, #428]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d013      	beq.n	8005dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fdbe 	bl	8004954 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ddc:	f7fe fdba 	bl	8004954 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	; 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e229      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	4b61      	ldr	r3, [pc, #388]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0xe8>
 8005dfa:	e014      	b.n	8005e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfc:	f7fe fdaa 	bl	8004954 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e04:	f7fe fda6 	bl	8004954 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e215      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e16:	4b57      	ldr	r3, [pc, #348]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x110>
 8005e22:	e000      	b.n	8005e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d069      	beq.n	8005f06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e32:	4b50      	ldr	r3, [pc, #320]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3e:	4b4d      	ldr	r3, [pc, #308]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d11c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x190>
 8005e4a:	4b4a      	ldr	r3, [pc, #296]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d116      	bne.n	8005e84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	4b47      	ldr	r3, [pc, #284]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_RCC_OscConfig+0x17a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e1e9      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6e:	4b41      	ldr	r3, [pc, #260]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	493d      	ldr	r1, [pc, #244]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e82:	e040      	b.n	8005f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d023      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e8c:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a38      	ldr	r2, [pc, #224]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fe fd5c 	bl	8004954 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fe fd58 	bl	8004954 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e1c7      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	4b30      	ldr	r3, [pc, #192]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b2d      	ldr	r3, [pc, #180]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4929      	ldr	r1, [pc, #164]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
 8005ed2:	e018      	b.n	8005f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed4:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fe fd38 	bl	8004954 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fe fd34 	bl	8004954 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e1a3      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d038      	beq.n	8005f84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d019      	beq.n	8005f4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f1a:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005f20:	f043 0301 	orr.w	r3, r3, #1
 8005f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f26:	f7fe fd15 	bl	8004954 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2e:	f7fe fd11 	bl	8004954 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e180      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f40:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x23a>
 8005f4c:	e01a      	b.n	8005f84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5a:	f7fe fcfb 	bl	8004954 <HAL_GetTick>
 8005f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f60:	e00a      	b.n	8005f78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f62:	f7fe fcf7 	bl	8004954 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d903      	bls.n	8005f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e166      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
 8005f74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f78:	4b92      	ldr	r3, [pc, #584]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8005f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1ee      	bne.n	8005f62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80a4 	beq.w	80060da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f92:	4b8c      	ldr	r3, [pc, #560]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10d      	bne.n	8005fba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9e:	4b89      	ldr	r3, [pc, #548]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	4a88      	ldr	r2, [pc, #544]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8005fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8005faa:	4b86      	ldr	r3, [pc, #536]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fba:	4b83      	ldr	r3, [pc, #524]	; (80061c8 <HAL_RCC_OscConfig+0x4d4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d118      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005fc6:	4b80      	ldr	r3, [pc, #512]	; (80061c8 <HAL_RCC_OscConfig+0x4d4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a7f      	ldr	r2, [pc, #508]	; (80061c8 <HAL_RCC_OscConfig+0x4d4>)
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd2:	f7fe fcbf 	bl	8004954 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fda:	f7fe fcbb 	bl	8004954 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	; 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e12a      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fec:	4b76      	ldr	r3, [pc, #472]	; (80061c8 <HAL_RCC_OscConfig+0x4d4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_OscConfig+0x31a>
 8006000:	4b70      	ldr	r3, [pc, #448]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	4a6f      	ldr	r2, [pc, #444]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	6713      	str	r3, [r2, #112]	; 0x70
 800600c:	e02d      	b.n	800606a <HAL_RCC_OscConfig+0x376>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x33c>
 8006016:	4b6b      	ldr	r3, [pc, #428]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	4a6a      	ldr	r2, [pc, #424]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	6713      	str	r3, [r2, #112]	; 0x70
 8006022:	4b68      	ldr	r3, [pc, #416]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006028:	f023 0304 	bic.w	r3, r3, #4
 800602c:	6713      	str	r3, [r2, #112]	; 0x70
 800602e:	e01c      	b.n	800606a <HAL_RCC_OscConfig+0x376>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b05      	cmp	r3, #5
 8006036:	d10c      	bne.n	8006052 <HAL_RCC_OscConfig+0x35e>
 8006038:	4b62      	ldr	r3, [pc, #392]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 800603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603c:	4a61      	ldr	r2, [pc, #388]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 800603e:	f043 0304 	orr.w	r3, r3, #4
 8006042:	6713      	str	r3, [r2, #112]	; 0x70
 8006044:	4b5f      	ldr	r3, [pc, #380]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	4a5e      	ldr	r2, [pc, #376]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6713      	str	r3, [r2, #112]	; 0x70
 8006050:	e00b      	b.n	800606a <HAL_RCC_OscConfig+0x376>
 8006052:	4b5c      	ldr	r3, [pc, #368]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a5b      	ldr	r2, [pc, #364]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
 800605e:	4b59      	ldr	r3, [pc, #356]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a58      	ldr	r2, [pc, #352]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006064:	f023 0304 	bic.w	r3, r3, #4
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d015      	beq.n	800609e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006072:	f7fe fc6f 	bl	8004954 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006078:	e00a      	b.n	8006090 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fe fc6b 	bl	8004954 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e0d8      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006090:	4b4c      	ldr	r3, [pc, #304]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0ee      	beq.n	800607a <HAL_RCC_OscConfig+0x386>
 800609c:	e014      	b.n	80060c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609e:	f7fe fc59 	bl	8004954 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f7fe fc55 	bl	8004954 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0c2      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060bc:	4b41      	ldr	r3, [pc, #260]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1ee      	bne.n	80060a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ce:	4b3d      	ldr	r3, [pc, #244]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	4a3c      	ldr	r2, [pc, #240]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80060d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 80ae 	beq.w	8006240 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060e4:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d06d      	beq.n	80061cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d14b      	bne.n	8006190 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f8:	4b32      	ldr	r3, [pc, #200]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a31      	ldr	r2, [pc, #196]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fe fc26 	bl	8004954 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800610c:	f7fe fc22 	bl	8004954 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e091      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	019b      	lsls	r3, r3, #6
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	3b01      	subs	r3, #1
 8006144:	041b      	lsls	r3, r3, #16
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	061b      	lsls	r3, r3, #24
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	071b      	lsls	r3, r3, #28
 8006156:	491b      	ldr	r1, [pc, #108]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800615c:	4b19      	ldr	r3, [pc, #100]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006168:	f7fe fbf4 	bl	8004954 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006170:	f7fe fbf0 	bl	8004954 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e05f      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x47c>
 800618e:	e057      	b.n	8006240 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 8006196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800619a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fe fbda 	bl	8004954 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a4:	f7fe fbd6 	bl	8004954 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e045      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <HAL_RCC_OscConfig+0x4d0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4b0>
 80061c2:	e03d      	b.n	8006240 <HAL_RCC_OscConfig+0x54c>
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80061cc:	4b1f      	ldr	r3, [pc, #124]	; (800624c <HAL_RCC_OscConfig+0x558>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d030      	beq.n	800623c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d129      	bne.n	800623c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d122      	bne.n	800623c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006202:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006204:	4293      	cmp	r3, r2
 8006206:	d119      	bne.n	800623c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	3b01      	subs	r3, #1
 8006216:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006218:	429a      	cmp	r2, r3
 800621a:	d10f      	bne.n	800623c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d107      	bne.n	800623c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d001      	beq.n	8006240 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800

08006250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0d0      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006268:	4b6a      	ldr	r3, [pc, #424]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d910      	bls.n	8006298 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006276:	4b67      	ldr	r3, [pc, #412]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f023 020f 	bic.w	r2, r3, #15
 800627e:	4965      	ldr	r1, [pc, #404]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	4313      	orrs	r3, r2
 8006284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006286:	4b63      	ldr	r3, [pc, #396]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0b8      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062b0:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a58      	ldr	r2, [pc, #352]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c8:	4b53      	ldr	r3, [pc, #332]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4a52      	ldr	r2, [pc, #328]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d4:	4b50      	ldr	r3, [pc, #320]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	494d      	ldr	r1, [pc, #308]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d040      	beq.n	8006374 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d107      	bne.n	800630a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fa:	4b47      	ldr	r3, [pc, #284]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d115      	bne.n	8006332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e07f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d107      	bne.n	8006322 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006312:	4b41      	ldr	r3, [pc, #260]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e073      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006322:	4b3d      	ldr	r3, [pc, #244]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e06b      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006332:	4b39      	ldr	r3, [pc, #228]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 0203 	bic.w	r2, r3, #3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4936      	ldr	r1, [pc, #216]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006344:	f7fe fb06 	bl	8004954 <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634a:	e00a      	b.n	8006362 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800634c:	f7fe fb02 	bl	8004954 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	f241 3288 	movw	r2, #5000	; 0x1388
 800635a:	4293      	cmp	r3, r2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e053      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006362:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 020c 	and.w	r2, r3, #12
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	429a      	cmp	r2, r3
 8006372:	d1eb      	bne.n	800634c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006374:	4b27      	ldr	r3, [pc, #156]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d210      	bcs.n	80063a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 020f 	bic.w	r2, r3, #15
 800638a:	4922      	ldr	r1, [pc, #136]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e032      	b.n	800640a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4916      	ldr	r1, [pc, #88]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	490e      	ldr	r1, [pc, #56]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063e2:	f000 f821 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063e6:	4601      	mov	r1, r0
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	4a0a      	ldr	r2, [pc, #40]	; (800641c <HAL_RCC_ClockConfig+0x1cc>)
 80063f4:	5cd3      	ldrb	r3, [r2, r3]
 80063f6:	fa21 f303 	lsr.w	r3, r1, r3
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <HAL_RCC_ClockConfig+0x1d0>)
 80063fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_ClockConfig+0x1d4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fa62 	bl	80048cc <HAL_InitTick>

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40023c00 	.word	0x40023c00
 8006418:	40023800 	.word	0x40023800
 800641c:	0800b8c0 	.word	0x0800b8c0
 8006420:	20000018 	.word	0x20000018
 8006424:	2000001c 	.word	0x2000001c

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	2300      	movs	r3, #0
 8006438:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800643e:	4b63      	ldr	r3, [pc, #396]	; (80065cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
 8006446:	2b04      	cmp	r3, #4
 8006448:	d007      	beq.n	800645a <HAL_RCC_GetSysClockFreq+0x32>
 800644a:	2b08      	cmp	r3, #8
 800644c:	d008      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0x38>
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 80b4 	bne.w	80065bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006454:	4b5e      	ldr	r3, [pc, #376]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006456:	60bb      	str	r3, [r7, #8]
      break;
 8006458:	e0b3      	b.n	80065c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800645a:	4b5e      	ldr	r3, [pc, #376]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800645c:	60bb      	str	r3, [r7, #8]
      break;
 800645e:	e0b0      	b.n	80065c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006460:	4b5a      	ldr	r3, [pc, #360]	; (80065cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006468:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800646a:	4b58      	ldr	r3, [pc, #352]	; (80065cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d04a      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006476:	4b55      	ldr	r3, [pc, #340]	; (80065cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	f04f 0400 	mov.w	r4, #0
 8006480:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	ea03 0501 	and.w	r5, r3, r1
 800648c:	ea04 0602 	and.w	r6, r4, r2
 8006490:	4629      	mov	r1, r5
 8006492:	4632      	mov	r2, r6
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	f04f 0400 	mov.w	r4, #0
 800649c:	0154      	lsls	r4, r2, #5
 800649e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064a2:	014b      	lsls	r3, r1, #5
 80064a4:	4619      	mov	r1, r3
 80064a6:	4622      	mov	r2, r4
 80064a8:	1b49      	subs	r1, r1, r5
 80064aa:	eb62 0206 	sbc.w	r2, r2, r6
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	f04f 0400 	mov.w	r4, #0
 80064b6:	0194      	lsls	r4, r2, #6
 80064b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064bc:	018b      	lsls	r3, r1, #6
 80064be:	1a5b      	subs	r3, r3, r1
 80064c0:	eb64 0402 	sbc.w	r4, r4, r2
 80064c4:	f04f 0100 	mov.w	r1, #0
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	00e2      	lsls	r2, r4, #3
 80064ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064d2:	00d9      	lsls	r1, r3, #3
 80064d4:	460b      	mov	r3, r1
 80064d6:	4614      	mov	r4, r2
 80064d8:	195b      	adds	r3, r3, r5
 80064da:	eb44 0406 	adc.w	r4, r4, r6
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	0262      	lsls	r2, r4, #9
 80064e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80064ec:	0259      	lsls	r1, r3, #9
 80064ee:	460b      	mov	r3, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	4621      	mov	r1, r4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f04f 0400 	mov.w	r4, #0
 80064fc:	461a      	mov	r2, r3
 80064fe:	4623      	mov	r3, r4
 8006500:	f7f9 fef6 	bl	80002f0 <__aeabi_uldivmod>
 8006504:	4603      	mov	r3, r0
 8006506:	460c      	mov	r4, r1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e049      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800650c:	4b2f      	ldr	r3, [pc, #188]	; (80065cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	099b      	lsrs	r3, r3, #6
 8006512:	f04f 0400 	mov.w	r4, #0
 8006516:	f240 11ff 	movw	r1, #511	; 0x1ff
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	ea03 0501 	and.w	r5, r3, r1
 8006522:	ea04 0602 	and.w	r6, r4, r2
 8006526:	4629      	mov	r1, r5
 8006528:	4632      	mov	r2, r6
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	f04f 0400 	mov.w	r4, #0
 8006532:	0154      	lsls	r4, r2, #5
 8006534:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006538:	014b      	lsls	r3, r1, #5
 800653a:	4619      	mov	r1, r3
 800653c:	4622      	mov	r2, r4
 800653e:	1b49      	subs	r1, r1, r5
 8006540:	eb62 0206 	sbc.w	r2, r2, r6
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	f04f 0400 	mov.w	r4, #0
 800654c:	0194      	lsls	r4, r2, #6
 800654e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006552:	018b      	lsls	r3, r1, #6
 8006554:	1a5b      	subs	r3, r3, r1
 8006556:	eb64 0402 	sbc.w	r4, r4, r2
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	00e2      	lsls	r2, r4, #3
 8006564:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006568:	00d9      	lsls	r1, r3, #3
 800656a:	460b      	mov	r3, r1
 800656c:	4614      	mov	r4, r2
 800656e:	195b      	adds	r3, r3, r5
 8006570:	eb44 0406 	adc.w	r4, r4, r6
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	02a2      	lsls	r2, r4, #10
 800657e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006582:	0299      	lsls	r1, r3, #10
 8006584:	460b      	mov	r3, r1
 8006586:	4614      	mov	r4, r2
 8006588:	4618      	mov	r0, r3
 800658a:	4621      	mov	r1, r4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f04f 0400 	mov.w	r4, #0
 8006592:	461a      	mov	r2, r3
 8006594:	4623      	mov	r3, r4
 8006596:	f7f9 feab 	bl	80002f0 <__aeabi_uldivmod>
 800659a:	4603      	mov	r3, r0
 800659c:	460c      	mov	r4, r1
 800659e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	3301      	adds	r3, #1
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b8:	60bb      	str	r3, [r7, #8]
      break;
 80065ba:	e002      	b.n	80065c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065bc:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80065be:	60bb      	str	r3, [r7, #8]
      break;
 80065c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065c2:	68bb      	ldr	r3, [r7, #8]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065cc:	40023800 	.word	0x40023800
 80065d0:	00f42400 	.word	0x00f42400
 80065d4:	007a1200 	.word	0x007a1200

080065d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065dc:	4b03      	ldr	r3, [pc, #12]	; (80065ec <HAL_RCC_GetHCLKFreq+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000018 	.word	0x20000018

080065f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065f4:	f7ff fff0 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 80065f8:	4601      	mov	r1, r0
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	0a9b      	lsrs	r3, r3, #10
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4a03      	ldr	r2, [pc, #12]	; (8006614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006606:	5cd3      	ldrb	r3, [r2, r3]
 8006608:	fa21 f303 	lsr.w	r3, r1, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40023800 	.word	0x40023800
 8006614:	0800b8d0 	.word	0x0800b8d0

08006618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800661c:	f7ff ffdc 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 8006620:	4601      	mov	r1, r0
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	0b5b      	lsrs	r3, r3, #13
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4a03      	ldr	r2, [pc, #12]	; (800663c <HAL_RCC_GetPCLK2Freq+0x24>)
 800662e:	5cd3      	ldrb	r3, [r2, r3]
 8006630:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40023800 	.word	0x40023800
 800663c:	0800b8d0 	.word	0x0800b8d0

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006668:	4b69      	ldr	r3, [pc, #420]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	4a68      	ldr	r2, [pc, #416]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006672:	6093      	str	r3, [r2, #8]
 8006674:	4b66      	ldr	r3, [pc, #408]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667c:	4964      	ldr	r1, [pc, #400]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d017      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800669a:	4b5d      	ldr	r3, [pc, #372]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	4959      	ldr	r1, [pc, #356]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b8:	d101      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d017      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066d6:	4b4e      	ldr	r3, [pc, #312]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	494a      	ldr	r1, [pc, #296]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066f4:	d101      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066f6:	2301      	movs	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006702:	2301      	movs	r3, #1
 8006704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006712:	2301      	movs	r3, #1
 8006714:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 808b 	beq.w	800683a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006724:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	4a39      	ldr	r2, [pc, #228]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672e:	6413      	str	r3, [r2, #64]	; 0x40
 8006730:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800673c:	4b35      	ldr	r3, [pc, #212]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a34      	ldr	r2, [pc, #208]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006748:	f7fe f904 	bl	8004954 <HAL_GetTick>
 800674c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006750:	f7fe f900 	bl	8004954 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e38d      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006762:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800676e:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d035      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d02e      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800678c:	4b20      	ldr	r3, [pc, #128]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006794:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006796:	4b1e      	ldr	r3, [pc, #120]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80067ae:	4a18      	ldr	r2, [pc, #96]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067b4:	4b16      	ldr	r3, [pc, #88]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d114      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fe f8c8 	bl	8004954 <HAL_GetTick>
 80067c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c6:	e00a      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067c8:	f7fe f8c4 	bl	8004954 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e34f      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067de:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0ee      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f6:	d111      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006806:	400b      	ands	r3, r1
 8006808:	4901      	ldr	r1, [pc, #4]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800680a:	4313      	orrs	r3, r2
 800680c:	608b      	str	r3, [r1, #8]
 800680e:	e00b      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006810:	40023800 	.word	0x40023800
 8006814:	40007000 	.word	0x40007000
 8006818:	0ffffcff 	.word	0x0ffffcff
 800681c:	4bb3      	ldr	r3, [pc, #716]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4ab2      	ldr	r2, [pc, #712]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006822:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006826:	6093      	str	r3, [r2, #8]
 8006828:	4bb0      	ldr	r3, [pc, #704]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800682a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006834:	49ad      	ldr	r1, [pc, #692]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006836:	4313      	orrs	r3, r2
 8006838:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	d010      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006846:	4ba9      	ldr	r3, [pc, #676]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800684c:	4aa7      	ldr	r2, [pc, #668]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800684e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006856:	4ba5      	ldr	r3, [pc, #660]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006858:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	49a2      	ldr	r1, [pc, #648]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006874:	4b9d      	ldr	r3, [pc, #628]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006882:	499a      	ldr	r1, [pc, #616]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006896:	4b95      	ldr	r3, [pc, #596]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a4:	4991      	ldr	r1, [pc, #580]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068b8:	4b8c      	ldr	r3, [pc, #560]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c6:	4989      	ldr	r1, [pc, #548]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068da:	4b84      	ldr	r3, [pc, #528]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e8:	4980      	ldr	r1, [pc, #512]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068fc:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006902:	f023 0203 	bic.w	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	4978      	ldr	r1, [pc, #480]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800690c:	4313      	orrs	r3, r2
 800690e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800691e:	4b73      	ldr	r3, [pc, #460]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006924:	f023 020c 	bic.w	r2, r3, #12
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692c:	496f      	ldr	r1, [pc, #444]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006940:	4b6a      	ldr	r3, [pc, #424]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694e:	4967      	ldr	r1, [pc, #412]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006962:	4b62      	ldr	r3, [pc, #392]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006968:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	495e      	ldr	r1, [pc, #376]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	4956      	ldr	r1, [pc, #344]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80069a6:	4b51      	ldr	r3, [pc, #324]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	494d      	ldr	r1, [pc, #308]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069c8:	4b48      	ldr	r3, [pc, #288]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	4945      	ldr	r1, [pc, #276]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069ea:	4b40      	ldr	r3, [pc, #256]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f8:	493c      	ldr	r1, [pc, #240]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a0c:	4b37      	ldr	r3, [pc, #220]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a1a:	4934      	ldr	r1, [pc, #208]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d011      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a2e:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a3c:	492b      	ldr	r1, [pc, #172]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a4c:	d101      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a6e:	4b1f      	ldr	r3, [pc, #124]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7c:	491b      	ldr	r1, [pc, #108]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a90:	4b16      	ldr	r3, [pc, #88]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa0:	4912      	ldr	r1, [pc, #72]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac4:	4909      	ldr	r1, [pc, #36]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00f      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ade:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006aea:	bf00      	nop
 8006aec:	40023800 	.word	0x40023800
 8006af0:	4985      	ldr	r1, [pc, #532]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b04:	4b80      	ldr	r3, [pc, #512]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b14:	497c      	ldr	r1, [pc, #496]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d005      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b2a:	f040 80d6 	bne.w	8006cda <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b2e:	4b76      	ldr	r3, [pc, #472]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a75      	ldr	r2, [pc, #468]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b3a:	f7fd ff0b 	bl	8004954 <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b42:	f7fd ff07 	bl	8004954 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b64      	cmp	r3, #100	; 0x64
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e194      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b54:	4b6c      	ldr	r3, [pc, #432]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f0      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d021      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11d      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b74:	4b64      	ldr	r3, [pc, #400]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b82:	4b61      	ldr	r3, [pc, #388]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b88:	0e1b      	lsrs	r3, r3, #24
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	019a      	lsls	r2, r3, #6
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	061b      	lsls	r3, r3, #24
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	071b      	lsls	r3, r3, #28
 8006ba8:	4957      	ldr	r1, [pc, #348]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc4:	d00a      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02e      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bda:	d129      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006bdc:	4b4a      	ldr	r3, [pc, #296]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be2:	0c1b      	lsrs	r3, r3, #16
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bea:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf0:	0f1b      	lsrs	r3, r3, #28
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	019a      	lsls	r2, r3, #6
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	071b      	lsls	r3, r3, #28
 8006c10:	493d      	ldr	r1, [pc, #244]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c18:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1e:	f023 021f 	bic.w	r2, r3, #31
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4937      	ldr	r1, [pc, #220]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01d      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c3c:	4b32      	ldr	r3, [pc, #200]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c50:	0f1b      	lsrs	r3, r3, #28
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	019a      	lsls	r2, r3, #6
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	431a      	orrs	r2, r3
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	061b      	lsls	r3, r3, #24
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	071b      	lsls	r3, r3, #28
 8006c70:	4925      	ldr	r1, [pc, #148]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d011      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	019a      	lsls	r2, r3, #6
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	071b      	lsls	r3, r3, #28
 8006ca0:	4919      	ldr	r1, [pc, #100]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ca8:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb4:	f7fd fe4e 	bl	8004954 <HAL_GetTick>
 8006cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cbc:	f7fd fe4a 	bl	8004954 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b64      	cmp	r3, #100	; 0x64
 8006cc8:	d901      	bls.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0d7      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	f040 80cd 	bne.w	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cee:	f7fd fe31 	bl	8004954 <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cf4:	e00a      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cf6:	f7fd fe2d 	bl	8004954 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b64      	cmp	r3, #100	; 0x64
 8006d02:	d903      	bls.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e0ba      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006d08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d0c:	4b5e      	ldr	r3, [pc, #376]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d18:	d0ed      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d02e      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d12a      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d42:	4b51      	ldr	r3, [pc, #324]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d50:	4b4d      	ldr	r3, [pc, #308]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d56:	0f1b      	lsrs	r3, r3, #28
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	019a      	lsls	r2, r3, #6
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	071b      	lsls	r3, r3, #28
 8006d76:	4944      	ldr	r1, [pc, #272]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d7e:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	493d      	ldr	r1, [pc, #244]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d022      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dac:	d11d      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dae:	4b36      	ldr	r3, [pc, #216]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	0e1b      	lsrs	r3, r3, #24
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006dbc:	4b32      	ldr	r3, [pc, #200]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	0f1b      	lsrs	r3, r3, #28
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	019a      	lsls	r2, r3, #6
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	071b      	lsls	r3, r3, #28
 8006de2:	4929      	ldr	r1, [pc, #164]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d028      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfc:	0e1b      	lsrs	r3, r3, #24
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e04:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	019a      	lsls	r2, r3, #6
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	041b      	lsls	r3, r3, #16
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	071b      	lsls	r3, r3, #28
 8006e2a:	4917      	ldr	r1, [pc, #92]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	4911      	ldr	r1, [pc, #68]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a0e      	ldr	r2, [pc, #56]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e54:	f7fd fd7e 	bl	8004954 <HAL_GetTick>
 8006e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e5c:	f7fd fd7a 	bl	8004954 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b64      	cmp	r3, #100	; 0x64
 8006e68:	d901      	bls.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e007      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e7a:	d1ef      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40023800 	.word	0x40023800

08006e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e01d      	b.n	8006eda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fd fa90 	bl	80043d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f000 fc90 	bl	80077f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <HAL_TIM_Base_Start_IT+0x50>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d00b      	beq.n	8006f26 <HAL_TIM_Base_Start_IT+0x42>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d007      	beq.n	8006f26 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	00010007 	.word	0x00010007

08006f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e01d      	b.n	8006f86 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f815 	bl	8006f8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f000 fc3a 	bl	80077f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 ffb2 	bl	8007f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a17      	ldr	r2, [pc, #92]	; (8007020 <HAL_TIM_PWM_Start+0x7c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_PWM_Start+0x2c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a16      	ldr	r2, [pc, #88]	; (8007024 <HAL_TIM_PWM_Start+0x80>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIM_PWM_Start+0x30>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <HAL_TIM_PWM_Start+0x32>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <HAL_TIM_PWM_Start+0x84>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d00b      	beq.n	8007014 <HAL_TIM_PWM_Start+0x70>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007002:	d007      	beq.n	8007014 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40010000 	.word	0x40010000
 8007024:	40010400 	.word	0x40010400
 8007028:	00010007 	.word	0x00010007

0800702c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e07b      	b.n	8007138 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fd f8c5 	bl	80041e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b34      	ldr	r3, [pc, #208]	; (8007140 <HAL_TIM_Encoder_Init+0x114>)
 800706e:	400b      	ands	r3, r1
 8007070:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f000 fbb7 	bl	80077f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4b27      	ldr	r3, [pc, #156]	; (8007144 <HAL_TIM_Encoder_Init+0x118>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	4313      	orrs	r3, r2
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4b21      	ldr	r3, [pc, #132]	; (8007148 <HAL_TIM_Encoder_Init+0x11c>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4b20      	ldr	r3, [pc, #128]	; (800714c <HAL_TIM_Encoder_Init+0x120>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	4313      	orrs	r3, r2
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	011a      	lsls	r2, r3, #4
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	031b      	lsls	r3, r3, #12
 80070ec:	4313      	orrs	r3, r2
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007102:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	4313      	orrs	r3, r2
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	fffebff8 	.word	0xfffebff8
 8007144:	fffffcfc 	.word	0xfffffcfc
 8007148:	fffff3f3 	.word	0xfffff3f3
 800714c:	ffff0f0f 	.word	0xffff0f0f

08007150 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_TIM_Encoder_Start+0x16>
 8007160:	2b04      	cmp	r3, #4
 8007162:	d008      	beq.n	8007176 <HAL_TIM_Encoder_Start+0x26>
 8007164:	e00f      	b.n	8007186 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2201      	movs	r2, #1
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fed6 	bl	8007f20 <TIM_CCxChannelCmd>
      break;
 8007174:	e016      	b.n	80071a4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2201      	movs	r2, #1
 800717c:	2104      	movs	r1, #4
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fece 	bl	8007f20 <TIM_CCxChannelCmd>
      break;
 8007184:	e00e      	b.n	80071a4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2201      	movs	r2, #1
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fec6 	bl	8007f20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	2104      	movs	r1, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f000 febf 	bl	8007f20 <TIM_CCxChannelCmd>
      break;
 80071a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d122      	bne.n	800721a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d11b      	bne.n	800721a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f06f 0202 	mvn.w	r2, #2
 80071ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fad7 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 8007206:	e005      	b.n	8007214 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fac9 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fada 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d122      	bne.n	800726e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b04      	cmp	r3, #4
 8007234:	d11b      	bne.n	800726e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f06f 0204 	mvn.w	r2, #4
 800723e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 faad 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 800725a:	e005      	b.n	8007268 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa9f 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fab0 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b08      	cmp	r3, #8
 800727a:	d122      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b08      	cmp	r3, #8
 8007288:	d11b      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f06f 0208 	mvn.w	r2, #8
 8007292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa83 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 80072ae:	e005      	b.n	80072bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa75 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa86 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b10      	cmp	r3, #16
 80072ce:	d122      	bne.n	8007316 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d11b      	bne.n	8007316 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f06f 0210 	mvn.w	r2, #16
 80072e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2208      	movs	r2, #8
 80072ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa59 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 8007302:	e005      	b.n	8007310 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa4b 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa5c 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10e      	bne.n	8007342 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b01      	cmp	r3, #1
 8007330:	d107      	bne.n	8007342 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f06f 0201 	mvn.w	r2, #1
 800733a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7f9 fcc7 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d10e      	bne.n	800736e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735a:	2b80      	cmp	r3, #128	; 0x80
 800735c:	d107      	bne.n	800736e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fe97 	bl	800809c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737c:	d10e      	bne.n	800739c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d107      	bne.n	800739c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fe8a 	bl	80080b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d10e      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d107      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa0a 	bl	80077dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d10e      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d107      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0220 	mvn.w	r2, #32
 80073ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fe4a 	bl	8008088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007412:	2302      	movs	r3, #2
 8007414:	e105      	b.n	8007622 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b14      	cmp	r3, #20
 800742a:	f200 80f0 	bhi.w	800760e <HAL_TIM_PWM_ConfigChannel+0x212>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007489 	.word	0x08007489
 8007438:	0800760f 	.word	0x0800760f
 800743c:	0800760f 	.word	0x0800760f
 8007440:	0800760f 	.word	0x0800760f
 8007444:	080074c9 	.word	0x080074c9
 8007448:	0800760f 	.word	0x0800760f
 800744c:	0800760f 	.word	0x0800760f
 8007450:	0800760f 	.word	0x0800760f
 8007454:	0800750b 	.word	0x0800750b
 8007458:	0800760f 	.word	0x0800760f
 800745c:	0800760f 	.word	0x0800760f
 8007460:	0800760f 	.word	0x0800760f
 8007464:	0800754b 	.word	0x0800754b
 8007468:	0800760f 	.word	0x0800760f
 800746c:	0800760f 	.word	0x0800760f
 8007470:	0800760f 	.word	0x0800760f
 8007474:	0800758d 	.word	0x0800758d
 8007478:	0800760f 	.word	0x0800760f
 800747c:	0800760f 	.word	0x0800760f
 8007480:	0800760f 	.word	0x0800760f
 8007484:	080075cd 	.word	0x080075cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fa4e 	bl	8007930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0208 	orr.w	r2, r2, #8
 80074a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0204 	bic.w	r2, r2, #4
 80074b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6999      	ldr	r1, [r3, #24]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	619a      	str	r2, [r3, #24]
      break;
 80074c6:	e0a3      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 faa0 	bl	8007a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6999      	ldr	r1, [r3, #24]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	021a      	lsls	r2, r3, #8
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	619a      	str	r2, [r3, #24]
      break;
 8007508:	e082      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 faf7 	bl	8007b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0208 	orr.w	r2, r2, #8
 8007524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0204 	bic.w	r2, r2, #4
 8007534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69d9      	ldr	r1, [r3, #28]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	61da      	str	r2, [r3, #28]
      break;
 8007548:	e062      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fb4d 	bl	8007bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69d9      	ldr	r1, [r3, #28]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	021a      	lsls	r2, r3, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	61da      	str	r2, [r3, #28]
      break;
 800758a:	e041      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fb84 	bl	8007ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0208 	orr.w	r2, r2, #8
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0204 	bic.w	r2, r2, #4
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075ca:	e021      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fbb6 	bl	8007d44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	021a      	lsls	r2, r3, #8
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800760c:	e000      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800760e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop

0800762c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIM_ConfigClockSource+0x18>
 8007640:	2302      	movs	r3, #2
 8007642:	e0a6      	b.n	8007792 <HAL_TIM_ConfigClockSource+0x166>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4b4f      	ldr	r3, [pc, #316]	; (800779c <HAL_TIM_ConfigClockSource+0x170>)
 8007660:	4013      	ands	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800766a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b40      	cmp	r3, #64	; 0x40
 800767a:	d067      	beq.n	800774c <HAL_TIM_ConfigClockSource+0x120>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d80b      	bhi.n	8007698 <HAL_TIM_ConfigClockSource+0x6c>
 8007680:	2b10      	cmp	r3, #16
 8007682:	d073      	beq.n	800776c <HAL_TIM_ConfigClockSource+0x140>
 8007684:	2b10      	cmp	r3, #16
 8007686:	d802      	bhi.n	800768e <HAL_TIM_ConfigClockSource+0x62>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d06f      	beq.n	800776c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800768c:	e078      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800768e:	2b20      	cmp	r3, #32
 8007690:	d06c      	beq.n	800776c <HAL_TIM_ConfigClockSource+0x140>
 8007692:	2b30      	cmp	r3, #48	; 0x30
 8007694:	d06a      	beq.n	800776c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007696:	e073      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007698:	2b70      	cmp	r3, #112	; 0x70
 800769a:	d00d      	beq.n	80076b8 <HAL_TIM_ConfigClockSource+0x8c>
 800769c:	2b70      	cmp	r3, #112	; 0x70
 800769e:	d804      	bhi.n	80076aa <HAL_TIM_ConfigClockSource+0x7e>
 80076a0:	2b50      	cmp	r3, #80	; 0x50
 80076a2:	d033      	beq.n	800770c <HAL_TIM_ConfigClockSource+0xe0>
 80076a4:	2b60      	cmp	r3, #96	; 0x60
 80076a6:	d041      	beq.n	800772c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80076a8:	e06a      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80076aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ae:	d066      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x152>
 80076b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b4:	d017      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80076b6:	e063      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	6899      	ldr	r1, [r3, #8]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f000 fc0a 	bl	8007ee0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e04c      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6899      	ldr	r1, [r3, #8]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f000 fbf3 	bl	8007ee0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007708:	609a      	str	r2, [r3, #8]
      break;
 800770a:	e039      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	6859      	ldr	r1, [r3, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	461a      	mov	r2, r3
 800771a:	f000 fb67 	bl	8007dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2150      	movs	r1, #80	; 0x50
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fbc0 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 800772a:	e029      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	6859      	ldr	r1, [r3, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	461a      	mov	r2, r3
 800773a:	f000 fb86 	bl	8007e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2160      	movs	r1, #96	; 0x60
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fbb0 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 800774a:	e019      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	6859      	ldr	r1, [r3, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	461a      	mov	r2, r3
 800775a:	f000 fb47 	bl	8007dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2140      	movs	r1, #64	; 0x40
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fba0 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 800776a:	e009      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f000 fb97 	bl	8007eaa <TIM_ITRx_SetConfig>
      break;
 800777c:	e000      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800777e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	fffeff88 	.word	0xfffeff88

080077a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a40      	ldr	r2, [pc, #256]	; (8007904 <TIM_Base_SetConfig+0x114>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780e:	d00f      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3d      	ldr	r2, [pc, #244]	; (8007908 <TIM_Base_SetConfig+0x118>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00b      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3c      	ldr	r2, [pc, #240]	; (800790c <TIM_Base_SetConfig+0x11c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d007      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <TIM_Base_SetConfig+0x120>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a3a      	ldr	r2, [pc, #232]	; (8007914 <TIM_Base_SetConfig+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d108      	bne.n	8007842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2f      	ldr	r2, [pc, #188]	; (8007904 <TIM_Base_SetConfig+0x114>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d02b      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007850:	d027      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <TIM_Base_SetConfig+0x118>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d023      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2b      	ldr	r2, [pc, #172]	; (800790c <TIM_Base_SetConfig+0x11c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d01f      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <TIM_Base_SetConfig+0x120>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d01b      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a29      	ldr	r2, [pc, #164]	; (8007914 <TIM_Base_SetConfig+0x124>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d017      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a28      	ldr	r2, [pc, #160]	; (8007918 <TIM_Base_SetConfig+0x128>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d013      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a27      	ldr	r2, [pc, #156]	; (800791c <TIM_Base_SetConfig+0x12c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00f      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a26      	ldr	r2, [pc, #152]	; (8007920 <TIM_Base_SetConfig+0x130>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00b      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a25      	ldr	r2, [pc, #148]	; (8007924 <TIM_Base_SetConfig+0x134>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d007      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a24      	ldr	r2, [pc, #144]	; (8007928 <TIM_Base_SetConfig+0x138>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d003      	beq.n	80078a2 <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a23      	ldr	r2, [pc, #140]	; (800792c <TIM_Base_SetConfig+0x13c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d108      	bne.n	80078b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a0a      	ldr	r2, [pc, #40]	; (8007904 <TIM_Base_SetConfig+0x114>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0xf8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <TIM_Base_SetConfig+0x124>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d103      	bne.n	80078f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	615a      	str	r2, [r3, #20]
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40010000 	.word	0x40010000
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40010400 	.word	0x40010400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800
 8007924:	40001800 	.word	0x40001800
 8007928:	40001c00 	.word	0x40001c00
 800792c:	40002000 	.word	0x40002000

08007930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f023 0201 	bic.w	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <TIM_OC1_SetConfig+0xd8>)
 800795c:	4013      	ands	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f023 0302 	bic.w	r3, r3, #2
 8007978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	4313      	orrs	r3, r2
 8007982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <TIM_OC1_SetConfig+0xdc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC1_SetConfig+0x64>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <TIM_OC1_SetConfig+0xe0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d10c      	bne.n	80079ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0308 	bic.w	r3, r3, #8
 800799a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f023 0304 	bic.w	r3, r3, #4
 80079ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a16      	ldr	r2, [pc, #88]	; (8007a0c <TIM_OC1_SetConfig+0xdc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <TIM_OC1_SetConfig+0x8e>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a15      	ldr	r2, [pc, #84]	; (8007a10 <TIM_OC1_SetConfig+0xe0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d111      	bne.n	80079e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	621a      	str	r2, [r3, #32]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	fffeff8f 	.word	0xfffeff8f
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400

08007a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0210 	bic.w	r2, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	; (8007af8 <TIM_OC2_SetConfig+0xe4>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0320 	bic.w	r3, r3, #32
 8007a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a23      	ldr	r2, [pc, #140]	; (8007afc <TIM_OC2_SetConfig+0xe8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_OC2_SetConfig+0x68>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a22      	ldr	r2, [pc, #136]	; (8007b00 <TIM_OC2_SetConfig+0xec>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d10d      	bne.n	8007a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a18      	ldr	r2, [pc, #96]	; (8007afc <TIM_OC2_SetConfig+0xe8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_OC2_SetConfig+0x94>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a17      	ldr	r2, [pc, #92]	; (8007b00 <TIM_OC2_SetConfig+0xec>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d113      	bne.n	8007ad0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	621a      	str	r2, [r3, #32]
}
 8007aea:	bf00      	nop
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	feff8fff 	.word	0xfeff8fff
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40010400 	.word	0x40010400

08007b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4b2d      	ldr	r3, [pc, #180]	; (8007be4 <TIM_OC3_SetConfig+0xe0>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a22      	ldr	r2, [pc, #136]	; (8007be8 <TIM_OC3_SetConfig+0xe4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_OC3_SetConfig+0x66>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a21      	ldr	r2, [pc, #132]	; (8007bec <TIM_OC3_SetConfig+0xe8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10d      	bne.n	8007b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <TIM_OC3_SetConfig+0xe4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_OC3_SetConfig+0x92>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a16      	ldr	r2, [pc, #88]	; (8007bec <TIM_OC3_SetConfig+0xe8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d113      	bne.n	8007bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	fffeff8f 	.word	0xfffeff8f
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40010400 	.word	0x40010400

08007bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <TIM_OC4_SetConfig+0xa4>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	031b      	lsls	r3, r3, #12
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <TIM_OC4_SetConfig+0xa8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d003      	beq.n	8007c58 <TIM_OC4_SetConfig+0x68>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a12      	ldr	r2, [pc, #72]	; (8007c9c <TIM_OC4_SetConfig+0xac>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d109      	bne.n	8007c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	019b      	lsls	r3, r3, #6
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	feff8fff 	.word	0xfeff8fff
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <TIM_OC5_SetConfig+0x98>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	041b      	lsls	r3, r3, #16
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a12      	ldr	r2, [pc, #72]	; (8007d3c <TIM_OC5_SetConfig+0x9c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC5_SetConfig+0x5e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a11      	ldr	r2, [pc, #68]	; (8007d40 <TIM_OC5_SetConfig+0xa0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d109      	bne.n	8007d12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	621a      	str	r2, [r3, #32]
}
 8007d2c:	bf00      	nop
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	fffeff8f 	.word	0xfffeff8f
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40010400 	.word	0x40010400

08007d44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <TIM_OC6_SetConfig+0x9c>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	051b      	lsls	r3, r3, #20
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <TIM_OC6_SetConfig+0xa0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_OC6_SetConfig+0x60>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a12      	ldr	r2, [pc, #72]	; (8007de8 <TIM_OC6_SetConfig+0xa4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d109      	bne.n	8007db8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	029b      	lsls	r3, r3, #10
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	feff8fff 	.word	0xfeff8fff
 8007de4:	40010000 	.word	0x40010000
 8007de8:	40010400 	.word	0x40010400

08007dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	f023 0201 	bic.w	r2, r3, #1
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f023 030a 	bic.w	r3, r3, #10
 8007e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	621a      	str	r2, [r3, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b087      	sub	sp, #28
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	f023 0210 	bic.w	r2, r3, #16
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	031b      	lsls	r3, r3, #12
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f043 0307 	orr.w	r3, r3, #7
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	021a      	lsls	r2, r3, #8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	609a      	str	r2, [r3, #8]
}
 8007f14:	bf00      	nop
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2201      	movs	r2, #1
 8007f34:	fa02 f303 	lsl.w	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	401a      	ands	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1a      	ldr	r2, [r3, #32]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	fa01 f303 	lsl.w	r3, r1, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e06d      	b.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a30      	ldr	r2, [pc, #192]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a2f      	ldr	r2, [pc, #188]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d108      	bne.n	8007fca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a20      	ldr	r2, [pc, #128]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d022      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff6:	d01d      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d018      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1c      	ldr	r2, [pc, #112]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d013      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1a      	ldr	r2, [pc, #104]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00e      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a15      	ldr	r2, [pc, #84]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a16      	ldr	r2, [pc, #88]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a15      	ldr	r2, [pc, #84]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d10c      	bne.n	800804e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800803a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	4313      	orrs	r3, r2
 8008044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	40010000 	.word	0x40010000
 8008070:	40010400 	.word	0x40010400
 8008074:	40000400 	.word	0x40000400
 8008078:	40000800 	.word	0x40000800
 800807c:	40000c00 	.word	0x40000c00
 8008080:	40014000 	.word	0x40014000
 8008084:	40001800 	.word	0x40001800

08008088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e040      	b.n	8008158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fc fa20 	bl	800452c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2224      	movs	r2, #36	; 0x24
 80080f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0201 	bic.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f8be 	bl	8008284 <UART_SetConfig>
 8008108:	4603      	mov	r3, r0
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e022      	b.n	8008158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb5c 	bl	80087d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fbe3 	bl	800891c <UART_CheckIdleState>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af02      	add	r7, sp, #8
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008174:	2b20      	cmp	r3, #32
 8008176:	d17f      	bne.n	8008278 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <HAL_UART_Transmit+0x24>
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e078      	b.n	800827a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_UART_Transmit+0x36>
 8008192:	2302      	movs	r3, #2
 8008194:	e071      	b.n	800827a <HAL_UART_Transmit+0x11a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2221      	movs	r2, #33	; 0x21
 80081a8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80081aa:	f7fc fbd3 	bl	8004954 <HAL_GetTick>
 80081ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	88fa      	ldrh	r2, [r7, #6]
 80081b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c8:	d108      	bne.n	80081dc <HAL_UART_Transmit+0x7c>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	e003      	b.n	80081e4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80081ec:	e02c      	b.n	8008248 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2180      	movs	r1, #128	; 0x80
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 fbd4 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e038      	b.n	800827a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800821c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	3302      	adds	r3, #2
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	e007      	b.n	8008236 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	781a      	ldrb	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	3301      	adds	r3, #1
 8008234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800824e:	b29b      	uxth	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1cc      	bne.n	80081ee <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2200      	movs	r2, #0
 800825c:	2140      	movs	r1, #64	; 0x40
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fba1 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e005      	b.n	800827a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008278:	2302      	movs	r3, #2
  }
}
 800827a:	4618      	mov	r0, r3
 800827c:	3720      	adds	r7, #32
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800828c:	2300      	movs	r3, #0
 800828e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	431a      	orrs	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4bb1      	ldr	r3, [pc, #708]	; (8008578 <UART_SetConfig+0x2f4>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	6939      	ldr	r1, [r7, #16]
 80082bc:	430b      	orrs	r3, r1
 80082be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a9f      	ldr	r2, [pc, #636]	; (800857c <UART_SetConfig+0x2f8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d121      	bne.n	8008348 <UART_SetConfig+0xc4>
 8008304:	4b9e      	ldr	r3, [pc, #632]	; (8008580 <UART_SetConfig+0x2fc>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b03      	cmp	r3, #3
 8008310:	d816      	bhi.n	8008340 <UART_SetConfig+0xbc>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0x94>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008329 	.word	0x08008329
 800831c:	08008335 	.word	0x08008335
 8008320:	0800832f 	.word	0x0800832f
 8008324:	0800833b 	.word	0x0800833b
 8008328:	2301      	movs	r3, #1
 800832a:	77fb      	strb	r3, [r7, #31]
 800832c:	e151      	b.n	80085d2 <UART_SetConfig+0x34e>
 800832e:	2302      	movs	r3, #2
 8008330:	77fb      	strb	r3, [r7, #31]
 8008332:	e14e      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008334:	2304      	movs	r3, #4
 8008336:	77fb      	strb	r3, [r7, #31]
 8008338:	e14b      	b.n	80085d2 <UART_SetConfig+0x34e>
 800833a:	2308      	movs	r3, #8
 800833c:	77fb      	strb	r3, [r7, #31]
 800833e:	e148      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008340:	2310      	movs	r3, #16
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	bf00      	nop
 8008346:	e144      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a8d      	ldr	r2, [pc, #564]	; (8008584 <UART_SetConfig+0x300>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d134      	bne.n	80083bc <UART_SetConfig+0x138>
 8008352:	4b8b      	ldr	r3, [pc, #556]	; (8008580 <UART_SetConfig+0x2fc>)
 8008354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008358:	f003 030c 	and.w	r3, r3, #12
 800835c:	2b0c      	cmp	r3, #12
 800835e:	d829      	bhi.n	80083b4 <UART_SetConfig+0x130>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0xe4>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	0800839d 	.word	0x0800839d
 800836c:	080083b5 	.word	0x080083b5
 8008370:	080083b5 	.word	0x080083b5
 8008374:	080083b5 	.word	0x080083b5
 8008378:	080083a9 	.word	0x080083a9
 800837c:	080083b5 	.word	0x080083b5
 8008380:	080083b5 	.word	0x080083b5
 8008384:	080083b5 	.word	0x080083b5
 8008388:	080083a3 	.word	0x080083a3
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083af 	.word	0x080083af
 800839c:	2300      	movs	r3, #0
 800839e:	77fb      	strb	r3, [r7, #31]
 80083a0:	e117      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083a2:	2302      	movs	r3, #2
 80083a4:	77fb      	strb	r3, [r7, #31]
 80083a6:	e114      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083a8:	2304      	movs	r3, #4
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e111      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083ae:	2308      	movs	r3, #8
 80083b0:	77fb      	strb	r3, [r7, #31]
 80083b2:	e10e      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083b4:	2310      	movs	r3, #16
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	bf00      	nop
 80083ba:	e10a      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a71      	ldr	r2, [pc, #452]	; (8008588 <UART_SetConfig+0x304>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d120      	bne.n	8008408 <UART_SetConfig+0x184>
 80083c6:	4b6e      	ldr	r3, [pc, #440]	; (8008580 <UART_SetConfig+0x2fc>)
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d00f      	beq.n	80083f4 <UART_SetConfig+0x170>
 80083d4:	2b10      	cmp	r3, #16
 80083d6:	d802      	bhi.n	80083de <UART_SetConfig+0x15a>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <UART_SetConfig+0x164>
 80083dc:	e010      	b.n	8008400 <UART_SetConfig+0x17c>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d005      	beq.n	80083ee <UART_SetConfig+0x16a>
 80083e2:	2b30      	cmp	r3, #48	; 0x30
 80083e4:	d009      	beq.n	80083fa <UART_SetConfig+0x176>
 80083e6:	e00b      	b.n	8008400 <UART_SetConfig+0x17c>
 80083e8:	2300      	movs	r3, #0
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e0f1      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083ee:	2302      	movs	r3, #2
 80083f0:	77fb      	strb	r3, [r7, #31]
 80083f2:	e0ee      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083f4:	2304      	movs	r3, #4
 80083f6:	77fb      	strb	r3, [r7, #31]
 80083f8:	e0eb      	b.n	80085d2 <UART_SetConfig+0x34e>
 80083fa:	2308      	movs	r3, #8
 80083fc:	77fb      	strb	r3, [r7, #31]
 80083fe:	e0e8      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008400:	2310      	movs	r3, #16
 8008402:	77fb      	strb	r3, [r7, #31]
 8008404:	bf00      	nop
 8008406:	e0e4      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a5f      	ldr	r2, [pc, #380]	; (800858c <UART_SetConfig+0x308>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d120      	bne.n	8008454 <UART_SetConfig+0x1d0>
 8008412:	4b5b      	ldr	r3, [pc, #364]	; (8008580 <UART_SetConfig+0x2fc>)
 8008414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008418:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800841c:	2b40      	cmp	r3, #64	; 0x40
 800841e:	d00f      	beq.n	8008440 <UART_SetConfig+0x1bc>
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d802      	bhi.n	800842a <UART_SetConfig+0x1a6>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <UART_SetConfig+0x1b0>
 8008428:	e010      	b.n	800844c <UART_SetConfig+0x1c8>
 800842a:	2b80      	cmp	r3, #128	; 0x80
 800842c:	d005      	beq.n	800843a <UART_SetConfig+0x1b6>
 800842e:	2bc0      	cmp	r3, #192	; 0xc0
 8008430:	d009      	beq.n	8008446 <UART_SetConfig+0x1c2>
 8008432:	e00b      	b.n	800844c <UART_SetConfig+0x1c8>
 8008434:	2300      	movs	r3, #0
 8008436:	77fb      	strb	r3, [r7, #31]
 8008438:	e0cb      	b.n	80085d2 <UART_SetConfig+0x34e>
 800843a:	2302      	movs	r3, #2
 800843c:	77fb      	strb	r3, [r7, #31]
 800843e:	e0c8      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008440:	2304      	movs	r3, #4
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e0c5      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008446:	2308      	movs	r3, #8
 8008448:	77fb      	strb	r3, [r7, #31]
 800844a:	e0c2      	b.n	80085d2 <UART_SetConfig+0x34e>
 800844c:	2310      	movs	r3, #16
 800844e:	77fb      	strb	r3, [r7, #31]
 8008450:	bf00      	nop
 8008452:	e0be      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a4d      	ldr	r2, [pc, #308]	; (8008590 <UART_SetConfig+0x30c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d124      	bne.n	80084a8 <UART_SetConfig+0x224>
 800845e:	4b48      	ldr	r3, [pc, #288]	; (8008580 <UART_SetConfig+0x2fc>)
 8008460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800846c:	d012      	beq.n	8008494 <UART_SetConfig+0x210>
 800846e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008472:	d802      	bhi.n	800847a <UART_SetConfig+0x1f6>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d007      	beq.n	8008488 <UART_SetConfig+0x204>
 8008478:	e012      	b.n	80084a0 <UART_SetConfig+0x21c>
 800847a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847e:	d006      	beq.n	800848e <UART_SetConfig+0x20a>
 8008480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008484:	d009      	beq.n	800849a <UART_SetConfig+0x216>
 8008486:	e00b      	b.n	80084a0 <UART_SetConfig+0x21c>
 8008488:	2300      	movs	r3, #0
 800848a:	77fb      	strb	r3, [r7, #31]
 800848c:	e0a1      	b.n	80085d2 <UART_SetConfig+0x34e>
 800848e:	2302      	movs	r3, #2
 8008490:	77fb      	strb	r3, [r7, #31]
 8008492:	e09e      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008494:	2304      	movs	r3, #4
 8008496:	77fb      	strb	r3, [r7, #31]
 8008498:	e09b      	b.n	80085d2 <UART_SetConfig+0x34e>
 800849a:	2308      	movs	r3, #8
 800849c:	77fb      	strb	r3, [r7, #31]
 800849e:	e098      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084a0:	2310      	movs	r3, #16
 80084a2:	77fb      	strb	r3, [r7, #31]
 80084a4:	bf00      	nop
 80084a6:	e094      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a39      	ldr	r2, [pc, #228]	; (8008594 <UART_SetConfig+0x310>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d124      	bne.n	80084fc <UART_SetConfig+0x278>
 80084b2:	4b33      	ldr	r3, [pc, #204]	; (8008580 <UART_SetConfig+0x2fc>)
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c0:	d012      	beq.n	80084e8 <UART_SetConfig+0x264>
 80084c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c6:	d802      	bhi.n	80084ce <UART_SetConfig+0x24a>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <UART_SetConfig+0x258>
 80084cc:	e012      	b.n	80084f4 <UART_SetConfig+0x270>
 80084ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d2:	d006      	beq.n	80084e2 <UART_SetConfig+0x25e>
 80084d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d8:	d009      	beq.n	80084ee <UART_SetConfig+0x26a>
 80084da:	e00b      	b.n	80084f4 <UART_SetConfig+0x270>
 80084dc:	2301      	movs	r3, #1
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e077      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084e2:	2302      	movs	r3, #2
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e074      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084e8:	2304      	movs	r3, #4
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e071      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084ee:	2308      	movs	r3, #8
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e06e      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084f4:	2310      	movs	r3, #16
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	bf00      	nop
 80084fa:	e06a      	b.n	80085d2 <UART_SetConfig+0x34e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a25      	ldr	r2, [pc, #148]	; (8008598 <UART_SetConfig+0x314>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d124      	bne.n	8008550 <UART_SetConfig+0x2cc>
 8008506:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <UART_SetConfig+0x2fc>)
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	d012      	beq.n	800853c <UART_SetConfig+0x2b8>
 8008516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851a:	d802      	bhi.n	8008522 <UART_SetConfig+0x29e>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d007      	beq.n	8008530 <UART_SetConfig+0x2ac>
 8008520:	e012      	b.n	8008548 <UART_SetConfig+0x2c4>
 8008522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008526:	d006      	beq.n	8008536 <UART_SetConfig+0x2b2>
 8008528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800852c:	d009      	beq.n	8008542 <UART_SetConfig+0x2be>
 800852e:	e00b      	b.n	8008548 <UART_SetConfig+0x2c4>
 8008530:	2300      	movs	r3, #0
 8008532:	77fb      	strb	r3, [r7, #31]
 8008534:	e04d      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008536:	2302      	movs	r3, #2
 8008538:	77fb      	strb	r3, [r7, #31]
 800853a:	e04a      	b.n	80085d2 <UART_SetConfig+0x34e>
 800853c:	2304      	movs	r3, #4
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e047      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008542:	2308      	movs	r3, #8
 8008544:	77fb      	strb	r3, [r7, #31]
 8008546:	e044      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008548:	2310      	movs	r3, #16
 800854a:	77fb      	strb	r3, [r7, #31]
 800854c:	bf00      	nop
 800854e:	e040      	b.n	80085d2 <UART_SetConfig+0x34e>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a11      	ldr	r2, [pc, #68]	; (800859c <UART_SetConfig+0x318>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d139      	bne.n	80085ce <UART_SetConfig+0x34a>
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <UART_SetConfig+0x2fc>)
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008568:	d027      	beq.n	80085ba <UART_SetConfig+0x336>
 800856a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856e:	d817      	bhi.n	80085a0 <UART_SetConfig+0x31c>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01c      	beq.n	80085ae <UART_SetConfig+0x32a>
 8008574:	e027      	b.n	80085c6 <UART_SetConfig+0x342>
 8008576:	bf00      	nop
 8008578:	efff69f3 	.word	0xefff69f3
 800857c:	40011000 	.word	0x40011000
 8008580:	40023800 	.word	0x40023800
 8008584:	40004400 	.word	0x40004400
 8008588:	40004800 	.word	0x40004800
 800858c:	40004c00 	.word	0x40004c00
 8008590:	40005000 	.word	0x40005000
 8008594:	40011400 	.word	0x40011400
 8008598:	40007800 	.word	0x40007800
 800859c:	40007c00 	.word	0x40007c00
 80085a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a4:	d006      	beq.n	80085b4 <UART_SetConfig+0x330>
 80085a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085aa:	d009      	beq.n	80085c0 <UART_SetConfig+0x33c>
 80085ac:	e00b      	b.n	80085c6 <UART_SetConfig+0x342>
 80085ae:	2300      	movs	r3, #0
 80085b0:	77fb      	strb	r3, [r7, #31]
 80085b2:	e00e      	b.n	80085d2 <UART_SetConfig+0x34e>
 80085b4:	2302      	movs	r3, #2
 80085b6:	77fb      	strb	r3, [r7, #31]
 80085b8:	e00b      	b.n	80085d2 <UART_SetConfig+0x34e>
 80085ba:	2304      	movs	r3, #4
 80085bc:	77fb      	strb	r3, [r7, #31]
 80085be:	e008      	b.n	80085d2 <UART_SetConfig+0x34e>
 80085c0:	2308      	movs	r3, #8
 80085c2:	77fb      	strb	r3, [r7, #31]
 80085c4:	e005      	b.n	80085d2 <UART_SetConfig+0x34e>
 80085c6:	2310      	movs	r3, #16
 80085c8:	77fb      	strb	r3, [r7, #31]
 80085ca:	bf00      	nop
 80085cc:	e001      	b.n	80085d2 <UART_SetConfig+0x34e>
 80085ce:	2310      	movs	r3, #16
 80085d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085da:	d17f      	bne.n	80086dc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80085dc:	7ffb      	ldrb	r3, [r7, #31]
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d85c      	bhi.n	800869c <UART_SetConfig+0x418>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <UART_SetConfig+0x364>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	0800862d 	.word	0x0800862d
 80085f0:	0800864d 	.word	0x0800864d
 80085f4:	0800869d 	.word	0x0800869d
 80085f8:	08008665 	.word	0x08008665
 80085fc:	0800869d 	.word	0x0800869d
 8008600:	0800869d 	.word	0x0800869d
 8008604:	0800869d 	.word	0x0800869d
 8008608:	08008685 	.word	0x08008685
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800860c:	f7fd fff0 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8008610:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	005a      	lsls	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	085b      	lsrs	r3, r3, #1
 800861c:	441a      	add	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	fbb2 f3f3 	udiv	r3, r2, r3
 8008626:	b29b      	uxth	r3, r3
 8008628:	61bb      	str	r3, [r7, #24]
        break;
 800862a:	e03a      	b.n	80086a2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800862c:	f7fd fff4 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 8008630:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	005a      	lsls	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	441a      	add	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	fbb2 f3f3 	udiv	r3, r2, r3
 8008646:	b29b      	uxth	r3, r3
 8008648:	61bb      	str	r3, [r7, #24]
        break;
 800864a:	e02a      	b.n	80086a2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	085a      	lsrs	r2, r3, #1
 8008652:	4b5f      	ldr	r3, [pc, #380]	; (80087d0 <UART_SetConfig+0x54c>)
 8008654:	4413      	add	r3, r2
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6852      	ldr	r2, [r2, #4]
 800865a:	fbb3 f3f2 	udiv	r3, r3, r2
 800865e:	b29b      	uxth	r3, r3
 8008660:	61bb      	str	r3, [r7, #24]
        break;
 8008662:	e01e      	b.n	80086a2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008664:	f7fd fee0 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8008668:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	005a      	lsls	r2, r3, #1
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	085b      	lsrs	r3, r3, #1
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	fbb2 f3f3 	udiv	r3, r2, r3
 800867e:	b29b      	uxth	r3, r3
 8008680:	61bb      	str	r3, [r7, #24]
        break;
 8008682:	e00e      	b.n	80086a2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	fbb2 f3f3 	udiv	r3, r2, r3
 8008696:	b29b      	uxth	r3, r3
 8008698:	61bb      	str	r3, [r7, #24]
        break;
 800869a:	e002      	b.n	80086a2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	75fb      	strb	r3, [r7, #23]
        break;
 80086a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b0f      	cmp	r3, #15
 80086a6:	d916      	bls.n	80086d6 <UART_SetConfig+0x452>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ae:	d212      	bcs.n	80086d6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f023 030f 	bic.w	r3, r3, #15
 80086b8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	897b      	ldrh	r3, [r7, #10]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	897a      	ldrh	r2, [r7, #10]
 80086d2:	60da      	str	r2, [r3, #12]
 80086d4:	e070      	b.n	80087b8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
 80086da:	e06d      	b.n	80087b8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80086dc:	7ffb      	ldrb	r3, [r7, #31]
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d859      	bhi.n	8008796 <UART_SetConfig+0x512>
 80086e2:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <UART_SetConfig+0x464>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	0800870d 	.word	0x0800870d
 80086ec:	0800872b 	.word	0x0800872b
 80086f0:	08008749 	.word	0x08008749
 80086f4:	08008797 	.word	0x08008797
 80086f8:	08008761 	.word	0x08008761
 80086fc:	08008797 	.word	0x08008797
 8008700:	08008797 	.word	0x08008797
 8008704:	08008797 	.word	0x08008797
 8008708:	0800877f 	.word	0x0800877f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800870c:	f7fd ff70 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8008710:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	085a      	lsrs	r2, r3, #1
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	441a      	add	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	fbb2 f3f3 	udiv	r3, r2, r3
 8008724:	b29b      	uxth	r3, r3
 8008726:	61bb      	str	r3, [r7, #24]
        break;
 8008728:	e038      	b.n	800879c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800872a:	f7fd ff75 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 800872e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	085a      	lsrs	r2, r3, #1
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	441a      	add	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	61bb      	str	r3, [r7, #24]
        break;
 8008746:	e029      	b.n	800879c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	085a      	lsrs	r2, r3, #1
 800874e:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <UART_SetConfig+0x550>)
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6852      	ldr	r2, [r2, #4]
 8008756:	fbb3 f3f2 	udiv	r3, r3, r2
 800875a:	b29b      	uxth	r3, r3
 800875c:	61bb      	str	r3, [r7, #24]
        break;
 800875e:	e01d      	b.n	800879c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008760:	f7fd fe62 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8008764:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	085a      	lsrs	r2, r3, #1
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	441a      	add	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	b29b      	uxth	r3, r3
 800877a:	61bb      	str	r3, [r7, #24]
        break;
 800877c:	e00e      	b.n	800879c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008790:	b29b      	uxth	r3, r3
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e002      	b.n	800879c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	75fb      	strb	r3, [r7, #23]
        break;
 800879a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d908      	bls.n	80087b4 <UART_SetConfig+0x530>
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a8:	d204      	bcs.n	80087b4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	60da      	str	r2, [r3, #12]
 80087b2:	e001      	b.n	80087b8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	01e84800 	.word	0x01e84800
 80087d4:	00f42400 	.word	0x00f42400

080087d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01a      	beq.n	80088ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d6:	d10a      	bne.n	80088ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	605a      	str	r2, [r3, #4]
  }
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af02      	add	r7, sp, #8
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800892a:	f7fc f813 	bl	8004954 <HAL_GetTick>
 800892e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b08      	cmp	r3, #8
 800893c:	d10e      	bne.n	800895c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800893e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f82a 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e020      	b.n	800899e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b04      	cmp	r3, #4
 8008968:	d10e      	bne.n	8008988 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800896a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f814 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e00a      	b.n	800899e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	4613      	mov	r3, r2
 80089b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b6:	e05d      	b.n	8008a74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d059      	beq.n	8008a74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c0:	f7fb ffc8 	bl	8004954 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d302      	bcc.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d11b      	bne.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e042      	b.n	8008a94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02b      	beq.n	8008a74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2a:	d123      	bne.n	8008a74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0201 	bic.w	r2, r2, #1
 8008a54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e00f      	b.n	8008a94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69da      	ldr	r2, [r3, #28]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	bf0c      	ite	eq
 8008a84:	2301      	moveq	r3, #1
 8008a86:	2300      	movne	r3, #0
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d092      	beq.n	80089b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	f107 001c 	add.w	r0, r7, #28
 8008aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d120      	bne.n	8008af6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	4b20      	ldr	r3, [pc, #128]	; (8008b48 <USB_CoreInit+0xac>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d105      	bne.n	8008aea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa52 	bl	8008f94 <USB_CoreReset>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
 8008af4:	e010      	b.n	8008b18 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa46 	bl	8008f94 <USB_CoreReset>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d10b      	bne.n	8008b36 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f043 0206 	orr.w	r2, r3, #6
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f043 0220 	orr.w	r2, r3, #32
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b42:	b004      	add	sp, #16
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	ffbdffbf 	.word	0xffbdffbf

08008b4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f023 0201 	bic.w	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d106      	bne.n	8008b9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60da      	str	r2, [r3, #12]
 8008b98:	e00b      	b.n	8008bb2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]
 8008bac:	e001      	b.n	8008bb2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e003      	b.n	8008bba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008bb2:	2032      	movs	r0, #50	; 0x32
 8008bb4:	f7fb feda 	bl	800496c <HAL_Delay>

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bde:	2300      	movs	r3, #0
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e009      	b.n	8008bf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3340      	adds	r3, #64	; 0x40
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	613b      	str	r3, [r7, #16]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b0e      	cmp	r3, #14
 8008bfc:	d9f2      	bls.n	8008be4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d11c      	bne.n	8008c3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c12:	f043 0302 	orr.w	r3, r3, #2
 8008c16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	e005      	b.n	8008c4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c50:	461a      	mov	r2, r3
 8008c52:	2300      	movs	r3, #0
 8008c54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c64:	461a      	mov	r2, r3
 8008c66:	680b      	ldr	r3, [r1, #0]
 8008c68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10c      	bne.n	8008c8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c76:	2100      	movs	r1, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f959 	bl	8008f30 <USB_SetDevSpeed>
 8008c7e:	e018      	b.n	8008cb2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c80:	2101      	movs	r1, #1
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f954 	bl	8008f30 <USB_SetDevSpeed>
 8008c88:	e013      	b.n	8008cb2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d10c      	bne.n	8008caa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c96:	2100      	movs	r1, #0
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f949 	bl	8008f30 <USB_SetDevSpeed>
 8008c9e:	e008      	b.n	8008cb2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f944 	bl	8008f30 <USB_SetDevSpeed>
 8008ca8:	e003      	b.n	8008cb2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008caa:	2103      	movs	r1, #3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f93f 	bl	8008f30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cb2:	2110      	movs	r1, #16
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8f3 	bl	8008ea0 <USB_FlushTxFifo>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f911 	bl	8008eec <USB_FlushRxFifo>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	461a      	mov	r2, r3
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	e043      	b.n	8008d86 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d14:	d118      	bne.n	8008d48 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	e013      	b.n	8008d5a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	e008      	b.n	8008d5a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	461a      	mov	r2, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	461a      	mov	r2, r3
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	3301      	adds	r3, #1
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d3b7      	bcc.n	8008cfe <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d8e:	2300      	movs	r3, #0
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	e043      	b.n	8008e1c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008daa:	d118      	bne.n	8008dde <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	e013      	b.n	8008df0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	e008      	b.n	8008df0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	461a      	mov	r2, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	613b      	str	r3, [r7, #16]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d3b7      	bcc.n	8008d94 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f043 0210 	orr.w	r2, r3, #16
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699a      	ldr	r2, [r3, #24]
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <USB_DevInit+0x2d4>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	f043 0208 	orr.w	r2, r3, #8
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d105      	bne.n	8008e88 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <USB_DevInit+0x2d8>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e94:	b004      	add	sp, #16
 8008e96:	4770      	bx	lr
 8008e98:	803c3800 	.word	0x803c3800
 8008e9c:	40000004 	.word	0x40000004

08008ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	019b      	lsls	r3, r3, #6
 8008eb2:	f043 0220 	orr.w	r2, r3, #32
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <USB_FlushTxFifo+0x48>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d901      	bls.n	8008ecc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e006      	b.n	8008eda <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d0f0      	beq.n	8008eba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	00030d40 	.word	0x00030d40

08008eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2210      	movs	r2, #16
 8008efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <USB_FlushRxFifo+0x40>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d901      	bls.n	8008f10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e006      	b.n	8008f1e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f003 0310 	and.w	r3, r3, #16
 8008f18:	2b10      	cmp	r3, #16
 8008f1a:	d0f0      	beq.n	8008efe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	00030d40 	.word	0x00030d40

08008f30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f50:	4313      	orrs	r3, r2
 8008f52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7c:	f043 0302 	orr.w	r3, r3, #2
 8008f80:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008f82:	2003      	movs	r0, #3
 8008f84:	f7fb fcf2 	bl	800496c <HAL_Delay>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4a13      	ldr	r2, [pc, #76]	; (8008ff8 <USB_CoreReset+0x64>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d901      	bls.n	8008fb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e01b      	b.n	8008fea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	daf2      	bge.n	8008fa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f043 0201 	orr.w	r2, r3, #1
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <USB_CoreReset+0x64>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d901      	bls.n	8008fdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e006      	b.n	8008fea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d0f0      	beq.n	8008fca <USB_CoreReset+0x36>

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	00030d40 	.word	0x00030d40

08008ffc <__errno>:
 8008ffc:	4b01      	ldr	r3, [pc, #4]	; (8009004 <__errno+0x8>)
 8008ffe:	6818      	ldr	r0, [r3, #0]
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000024 	.word	0x20000024

08009008 <__libc_init_array>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4e0d      	ldr	r6, [pc, #52]	; (8009040 <__libc_init_array+0x38>)
 800900c:	4c0d      	ldr	r4, [pc, #52]	; (8009044 <__libc_init_array+0x3c>)
 800900e:	1ba4      	subs	r4, r4, r6
 8009010:	10a4      	asrs	r4, r4, #2
 8009012:	2500      	movs	r5, #0
 8009014:	42a5      	cmp	r5, r4
 8009016:	d109      	bne.n	800902c <__libc_init_array+0x24>
 8009018:	4e0b      	ldr	r6, [pc, #44]	; (8009048 <__libc_init_array+0x40>)
 800901a:	4c0c      	ldr	r4, [pc, #48]	; (800904c <__libc_init_array+0x44>)
 800901c:	f002 fb1c 	bl	800b658 <_init>
 8009020:	1ba4      	subs	r4, r4, r6
 8009022:	10a4      	asrs	r4, r4, #2
 8009024:	2500      	movs	r5, #0
 8009026:	42a5      	cmp	r5, r4
 8009028:	d105      	bne.n	8009036 <__libc_init_array+0x2e>
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009030:	4798      	blx	r3
 8009032:	3501      	adds	r5, #1
 8009034:	e7ee      	b.n	8009014 <__libc_init_array+0xc>
 8009036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800903a:	4798      	blx	r3
 800903c:	3501      	adds	r5, #1
 800903e:	e7f2      	b.n	8009026 <__libc_init_array+0x1e>
 8009040:	0800bba0 	.word	0x0800bba0
 8009044:	0800bba0 	.word	0x0800bba0
 8009048:	0800bba0 	.word	0x0800bba0
 800904c:	0800bba4 	.word	0x0800bba4

08009050 <memcpy>:
 8009050:	b510      	push	{r4, lr}
 8009052:	1e43      	subs	r3, r0, #1
 8009054:	440a      	add	r2, r1
 8009056:	4291      	cmp	r1, r2
 8009058:	d100      	bne.n	800905c <memcpy+0xc>
 800905a:	bd10      	pop	{r4, pc}
 800905c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009064:	e7f7      	b.n	8009056 <memcpy+0x6>

08009066 <memset>:
 8009066:	4402      	add	r2, r0
 8009068:	4603      	mov	r3, r0
 800906a:	4293      	cmp	r3, r2
 800906c:	d100      	bne.n	8009070 <memset+0xa>
 800906e:	4770      	bx	lr
 8009070:	f803 1b01 	strb.w	r1, [r3], #1
 8009074:	e7f9      	b.n	800906a <memset+0x4>

08009076 <__cvt>:
 8009076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009078:	ed2d 8b02 	vpush	{d8}
 800907c:	eeb0 8b40 	vmov.f64	d8, d0
 8009080:	b085      	sub	sp, #20
 8009082:	4617      	mov	r7, r2
 8009084:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009086:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009088:	ee18 2a90 	vmov	r2, s17
 800908c:	f025 0520 	bic.w	r5, r5, #32
 8009090:	2a00      	cmp	r2, #0
 8009092:	bfb6      	itet	lt
 8009094:	222d      	movlt	r2, #45	; 0x2d
 8009096:	2200      	movge	r2, #0
 8009098:	eeb1 8b40 	vneglt.f64	d8, d0
 800909c:	2d46      	cmp	r5, #70	; 0x46
 800909e:	460c      	mov	r4, r1
 80090a0:	701a      	strb	r2, [r3, #0]
 80090a2:	d004      	beq.n	80090ae <__cvt+0x38>
 80090a4:	2d45      	cmp	r5, #69	; 0x45
 80090a6:	d100      	bne.n	80090aa <__cvt+0x34>
 80090a8:	3401      	adds	r4, #1
 80090aa:	2102      	movs	r1, #2
 80090ac:	e000      	b.n	80090b0 <__cvt+0x3a>
 80090ae:	2103      	movs	r1, #3
 80090b0:	ab03      	add	r3, sp, #12
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	ab02      	add	r3, sp, #8
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	4622      	mov	r2, r4
 80090ba:	4633      	mov	r3, r6
 80090bc:	eeb0 0b48 	vmov.f64	d0, d8
 80090c0:	f000 fdda 	bl	8009c78 <_dtoa_r>
 80090c4:	2d47      	cmp	r5, #71	; 0x47
 80090c6:	d101      	bne.n	80090cc <__cvt+0x56>
 80090c8:	07fb      	lsls	r3, r7, #31
 80090ca:	d51e      	bpl.n	800910a <__cvt+0x94>
 80090cc:	2d46      	cmp	r5, #70	; 0x46
 80090ce:	eb00 0304 	add.w	r3, r0, r4
 80090d2:	d10c      	bne.n	80090ee <__cvt+0x78>
 80090d4:	7802      	ldrb	r2, [r0, #0]
 80090d6:	2a30      	cmp	r2, #48	; 0x30
 80090d8:	d107      	bne.n	80090ea <__cvt+0x74>
 80090da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80090de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e2:	bf1c      	itt	ne
 80090e4:	f1c4 0401 	rsbne	r4, r4, #1
 80090e8:	6034      	strne	r4, [r6, #0]
 80090ea:	6832      	ldr	r2, [r6, #0]
 80090ec:	4413      	add	r3, r2
 80090ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80090f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f6:	d007      	beq.n	8009108 <__cvt+0x92>
 80090f8:	2130      	movs	r1, #48	; 0x30
 80090fa:	9a03      	ldr	r2, [sp, #12]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d204      	bcs.n	800910a <__cvt+0x94>
 8009100:	1c54      	adds	r4, r2, #1
 8009102:	9403      	str	r4, [sp, #12]
 8009104:	7011      	strb	r1, [r2, #0]
 8009106:	e7f8      	b.n	80090fa <__cvt+0x84>
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800910e:	1a1b      	subs	r3, r3, r0
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	b005      	add	sp, #20
 8009114:	ecbd 8b02 	vpop	{d8}
 8009118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800911a <__exponent>:
 800911a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800911c:	2900      	cmp	r1, #0
 800911e:	4604      	mov	r4, r0
 8009120:	bfba      	itte	lt
 8009122:	4249      	neglt	r1, r1
 8009124:	232d      	movlt	r3, #45	; 0x2d
 8009126:	232b      	movge	r3, #43	; 0x2b
 8009128:	2909      	cmp	r1, #9
 800912a:	f804 2b02 	strb.w	r2, [r4], #2
 800912e:	7043      	strb	r3, [r0, #1]
 8009130:	dd20      	ble.n	8009174 <__exponent+0x5a>
 8009132:	f10d 0307 	add.w	r3, sp, #7
 8009136:	461f      	mov	r7, r3
 8009138:	260a      	movs	r6, #10
 800913a:	fb91 f5f6 	sdiv	r5, r1, r6
 800913e:	fb06 1115 	mls	r1, r6, r5, r1
 8009142:	3130      	adds	r1, #48	; 0x30
 8009144:	2d09      	cmp	r5, #9
 8009146:	f803 1c01 	strb.w	r1, [r3, #-1]
 800914a:	f103 32ff 	add.w	r2, r3, #4294967295
 800914e:	4629      	mov	r1, r5
 8009150:	dc09      	bgt.n	8009166 <__exponent+0x4c>
 8009152:	3130      	adds	r1, #48	; 0x30
 8009154:	3b02      	subs	r3, #2
 8009156:	f802 1c01 	strb.w	r1, [r2, #-1]
 800915a:	42bb      	cmp	r3, r7
 800915c:	4622      	mov	r2, r4
 800915e:	d304      	bcc.n	800916a <__exponent+0x50>
 8009160:	1a10      	subs	r0, r2, r0
 8009162:	b003      	add	sp, #12
 8009164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009166:	4613      	mov	r3, r2
 8009168:	e7e7      	b.n	800913a <__exponent+0x20>
 800916a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916e:	f804 2b01 	strb.w	r2, [r4], #1
 8009172:	e7f2      	b.n	800915a <__exponent+0x40>
 8009174:	2330      	movs	r3, #48	; 0x30
 8009176:	4419      	add	r1, r3
 8009178:	7083      	strb	r3, [r0, #2]
 800917a:	1d02      	adds	r2, r0, #4
 800917c:	70c1      	strb	r1, [r0, #3]
 800917e:	e7ef      	b.n	8009160 <__exponent+0x46>

08009180 <_printf_float>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	b08d      	sub	sp, #52	; 0x34
 8009186:	460c      	mov	r4, r1
 8009188:	4616      	mov	r6, r2
 800918a:	461f      	mov	r7, r3
 800918c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009190:	4605      	mov	r5, r0
 8009192:	f001 fc37 	bl	800aa04 <_localeconv_r>
 8009196:	f8d0 b000 	ldr.w	fp, [r0]
 800919a:	4658      	mov	r0, fp
 800919c:	f7f7 f850 	bl	8000240 <strlen>
 80091a0:	2300      	movs	r3, #0
 80091a2:	930a      	str	r3, [sp, #40]	; 0x28
 80091a4:	f8d8 3000 	ldr.w	r3, [r8]
 80091a8:	9005      	str	r0, [sp, #20]
 80091aa:	3307      	adds	r3, #7
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	f103 0108 	add.w	r1, r3, #8
 80091b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	f8c8 1000 	str.w	r1, [r8]
 80091be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80091c6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009450 <_printf_float+0x2d0>
 80091ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80091ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80091d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80091d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091da:	dd24      	ble.n	8009226 <_printf_float+0xa6>
 80091dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80091e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e4:	d502      	bpl.n	80091ec <_printf_float+0x6c>
 80091e6:	232d      	movs	r3, #45	; 0x2d
 80091e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ec:	499a      	ldr	r1, [pc, #616]	; (8009458 <_printf_float+0x2d8>)
 80091ee:	4b9b      	ldr	r3, [pc, #620]	; (800945c <_printf_float+0x2dc>)
 80091f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80091f4:	bf8c      	ite	hi
 80091f6:	4688      	movhi	r8, r1
 80091f8:	4698      	movls	r8, r3
 80091fa:	f022 0204 	bic.w	r2, r2, #4
 80091fe:	2303      	movs	r3, #3
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	f04f 0a00 	mov.w	sl, #0
 8009208:	9700      	str	r7, [sp, #0]
 800920a:	4633      	mov	r3, r6
 800920c:	aa0b      	add	r2, sp, #44	; 0x2c
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f9e1 	bl	80095d8 <_printf_common>
 8009216:	3001      	adds	r0, #1
 8009218:	f040 8089 	bne.w	800932e <_printf_float+0x1ae>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b00d      	add	sp, #52	; 0x34
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	eeb4 0b40 	vcmp.f64	d0, d0
 800922a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922e:	d702      	bvc.n	8009236 <_printf_float+0xb6>
 8009230:	498b      	ldr	r1, [pc, #556]	; (8009460 <_printf_float+0x2e0>)
 8009232:	4b8c      	ldr	r3, [pc, #560]	; (8009464 <_printf_float+0x2e4>)
 8009234:	e7dc      	b.n	80091f0 <_printf_float+0x70>
 8009236:	6861      	ldr	r1, [r4, #4]
 8009238:	1c4b      	adds	r3, r1, #1
 800923a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800923e:	ab0a      	add	r3, sp, #40	; 0x28
 8009240:	a809      	add	r0, sp, #36	; 0x24
 8009242:	d13b      	bne.n	80092bc <_printf_float+0x13c>
 8009244:	2106      	movs	r1, #6
 8009246:	6061      	str	r1, [r4, #4]
 8009248:	f04f 0c00 	mov.w	ip, #0
 800924c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009250:	e9cd 0900 	strd	r0, r9, [sp]
 8009254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	6861      	ldr	r1, [r4, #4]
 800925c:	4628      	mov	r0, r5
 800925e:	f7ff ff0a 	bl	8009076 <__cvt>
 8009262:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8009266:	2b47      	cmp	r3, #71	; 0x47
 8009268:	4680      	mov	r8, r0
 800926a:	d109      	bne.n	8009280 <_printf_float+0x100>
 800926c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926e:	1cd8      	adds	r0, r3, #3
 8009270:	db02      	blt.n	8009278 <_printf_float+0xf8>
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	4293      	cmp	r3, r2
 8009276:	dd47      	ble.n	8009308 <_printf_float+0x188>
 8009278:	f1a9 0902 	sub.w	r9, r9, #2
 800927c:	fa5f f989 	uxtb.w	r9, r9
 8009280:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009286:	d824      	bhi.n	80092d2 <_printf_float+0x152>
 8009288:	3901      	subs	r1, #1
 800928a:	464a      	mov	r2, r9
 800928c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009290:	9109      	str	r1, [sp, #36]	; 0x24
 8009292:	f7ff ff42 	bl	800911a <__exponent>
 8009296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009298:	1813      	adds	r3, r2, r0
 800929a:	2a01      	cmp	r2, #1
 800929c:	4682      	mov	sl, r0
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	dc02      	bgt.n	80092a8 <_printf_float+0x128>
 80092a2:	6822      	ldr	r2, [r4, #0]
 80092a4:	07d1      	lsls	r1, r2, #31
 80092a6:	d501      	bpl.n	80092ac <_printf_float+0x12c>
 80092a8:	3301      	adds	r3, #1
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0a9      	beq.n	8009208 <_printf_float+0x88>
 80092b4:	232d      	movs	r3, #45	; 0x2d
 80092b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ba:	e7a5      	b.n	8009208 <_printf_float+0x88>
 80092bc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80092c0:	f000 8178 	beq.w	80095b4 <_printf_float+0x434>
 80092c4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092c8:	d1be      	bne.n	8009248 <_printf_float+0xc8>
 80092ca:	2900      	cmp	r1, #0
 80092cc:	d1bc      	bne.n	8009248 <_printf_float+0xc8>
 80092ce:	2101      	movs	r1, #1
 80092d0:	e7b9      	b.n	8009246 <_printf_float+0xc6>
 80092d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80092d6:	d119      	bne.n	800930c <_printf_float+0x18c>
 80092d8:	2900      	cmp	r1, #0
 80092da:	6863      	ldr	r3, [r4, #4]
 80092dc:	dd0c      	ble.n	80092f8 <_printf_float+0x178>
 80092de:	6121      	str	r1, [r4, #16]
 80092e0:	b913      	cbnz	r3, 80092e8 <_printf_float+0x168>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	07d2      	lsls	r2, r2, #31
 80092e6:	d502      	bpl.n	80092ee <_printf_float+0x16e>
 80092e8:	3301      	adds	r3, #1
 80092ea:	440b      	add	r3, r1
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80092f2:	f04f 0a00 	mov.w	sl, #0
 80092f6:	e7d9      	b.n	80092ac <_printf_float+0x12c>
 80092f8:	b913      	cbnz	r3, 8009300 <_printf_float+0x180>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	07d0      	lsls	r0, r2, #31
 80092fe:	d501      	bpl.n	8009304 <_printf_float+0x184>
 8009300:	3302      	adds	r3, #2
 8009302:	e7f3      	b.n	80092ec <_printf_float+0x16c>
 8009304:	2301      	movs	r3, #1
 8009306:	e7f1      	b.n	80092ec <_printf_float+0x16c>
 8009308:	f04f 0967 	mov.w	r9, #103	; 0x67
 800930c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009310:	4293      	cmp	r3, r2
 8009312:	db05      	blt.n	8009320 <_printf_float+0x1a0>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	07d1      	lsls	r1, r2, #31
 800931a:	d5e8      	bpl.n	80092ee <_printf_float+0x16e>
 800931c:	3301      	adds	r3, #1
 800931e:	e7e5      	b.n	80092ec <_printf_float+0x16c>
 8009320:	2b00      	cmp	r3, #0
 8009322:	bfd4      	ite	le
 8009324:	f1c3 0302 	rsble	r3, r3, #2
 8009328:	2301      	movgt	r3, #1
 800932a:	4413      	add	r3, r2
 800932c:	e7de      	b.n	80092ec <_printf_float+0x16c>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	055a      	lsls	r2, r3, #21
 8009332:	d407      	bmi.n	8009344 <_printf_float+0x1c4>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	4642      	mov	r2, r8
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	d12a      	bne.n	8009398 <_printf_float+0x218>
 8009342:	e76b      	b.n	800921c <_printf_float+0x9c>
 8009344:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009348:	f240 80de 	bls.w	8009508 <_printf_float+0x388>
 800934c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009350:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009358:	d133      	bne.n	80093c2 <_printf_float+0x242>
 800935a:	2301      	movs	r3, #1
 800935c:	4a42      	ldr	r2, [pc, #264]	; (8009468 <_printf_float+0x2e8>)
 800935e:	4631      	mov	r1, r6
 8009360:	4628      	mov	r0, r5
 8009362:	47b8      	blx	r7
 8009364:	3001      	adds	r0, #1
 8009366:	f43f af59 	beq.w	800921c <_printf_float+0x9c>
 800936a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800936e:	429a      	cmp	r2, r3
 8009370:	db02      	blt.n	8009378 <_printf_float+0x1f8>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	07d8      	lsls	r0, r3, #31
 8009376:	d50f      	bpl.n	8009398 <_printf_float+0x218>
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	465a      	mov	r2, fp
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af4a 	beq.w	800921c <_printf_float+0x9c>
 8009388:	f04f 0800 	mov.w	r8, #0
 800938c:	f104 091a 	add.w	r9, r4, #26
 8009390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009392:	3b01      	subs	r3, #1
 8009394:	4543      	cmp	r3, r8
 8009396:	dc09      	bgt.n	80093ac <_printf_float+0x22c>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	079b      	lsls	r3, r3, #30
 800939c:	f100 8105 	bmi.w	80095aa <_printf_float+0x42a>
 80093a0:	68e0      	ldr	r0, [r4, #12]
 80093a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a4:	4298      	cmp	r0, r3
 80093a6:	bfb8      	it	lt
 80093a8:	4618      	movlt	r0, r3
 80093aa:	e739      	b.n	8009220 <_printf_float+0xa0>
 80093ac:	2301      	movs	r3, #1
 80093ae:	464a      	mov	r2, r9
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f af30 	beq.w	800921c <_printf_float+0x9c>
 80093bc:	f108 0801 	add.w	r8, r8, #1
 80093c0:	e7e6      	b.n	8009390 <_printf_float+0x210>
 80093c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dc2b      	bgt.n	8009420 <_printf_float+0x2a0>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4a27      	ldr	r2, [pc, #156]	; (8009468 <_printf_float+0x2e8>)
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f af22 	beq.w	800921c <_printf_float+0x9c>
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	b923      	cbnz	r3, 80093e6 <_printf_float+0x266>
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	b913      	cbnz	r3, 80093e6 <_printf_float+0x266>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	07d9      	lsls	r1, r3, #31
 80093e4:	d5d8      	bpl.n	8009398 <_printf_float+0x218>
 80093e6:	9b05      	ldr	r3, [sp, #20]
 80093e8:	465a      	mov	r2, fp
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f af13 	beq.w	800921c <_printf_float+0x9c>
 80093f6:	f04f 0900 	mov.w	r9, #0
 80093fa:	f104 0a1a 	add.w	sl, r4, #26
 80093fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009400:	425b      	negs	r3, r3
 8009402:	454b      	cmp	r3, r9
 8009404:	dc01      	bgt.n	800940a <_printf_float+0x28a>
 8009406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009408:	e795      	b.n	8009336 <_printf_float+0x1b6>
 800940a:	2301      	movs	r3, #1
 800940c:	4652      	mov	r2, sl
 800940e:	4631      	mov	r1, r6
 8009410:	4628      	mov	r0, r5
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	f43f af01 	beq.w	800921c <_printf_float+0x9c>
 800941a:	f109 0901 	add.w	r9, r9, #1
 800941e:	e7ee      	b.n	80093fe <_printf_float+0x27e>
 8009420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009424:	429a      	cmp	r2, r3
 8009426:	bfa8      	it	ge
 8009428:	461a      	movge	r2, r3
 800942a:	2a00      	cmp	r2, #0
 800942c:	4691      	mov	r9, r2
 800942e:	dd07      	ble.n	8009440 <_printf_float+0x2c0>
 8009430:	4613      	mov	r3, r2
 8009432:	4631      	mov	r1, r6
 8009434:	4642      	mov	r2, r8
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f aeee 	beq.w	800921c <_printf_float+0x9c>
 8009440:	f104 031a 	add.w	r3, r4, #26
 8009444:	f04f 0a00 	mov.w	sl, #0
 8009448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800944c:	9307      	str	r3, [sp, #28]
 800944e:	e017      	b.n	8009480 <_printf_float+0x300>
 8009450:	ffffffff 	.word	0xffffffff
 8009454:	7fefffff 	.word	0x7fefffff
 8009458:	0800b8e0 	.word	0x0800b8e0
 800945c:	0800b8dc 	.word	0x0800b8dc
 8009460:	0800b8e8 	.word	0x0800b8e8
 8009464:	0800b8e4 	.word	0x0800b8e4
 8009468:	0800b8ec 	.word	0x0800b8ec
 800946c:	2301      	movs	r3, #1
 800946e:	9a07      	ldr	r2, [sp, #28]
 8009470:	4631      	mov	r1, r6
 8009472:	4628      	mov	r0, r5
 8009474:	47b8      	blx	r7
 8009476:	3001      	adds	r0, #1
 8009478:	f43f aed0 	beq.w	800921c <_printf_float+0x9c>
 800947c:	f10a 0a01 	add.w	sl, sl, #1
 8009480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009482:	9306      	str	r3, [sp, #24]
 8009484:	eba3 0309 	sub.w	r3, r3, r9
 8009488:	4553      	cmp	r3, sl
 800948a:	dcef      	bgt.n	800946c <_printf_float+0x2ec>
 800948c:	9b06      	ldr	r3, [sp, #24]
 800948e:	4498      	add	r8, r3
 8009490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009494:	429a      	cmp	r2, r3
 8009496:	db15      	blt.n	80094c4 <_printf_float+0x344>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	07da      	lsls	r2, r3, #31
 800949c:	d412      	bmi.n	80094c4 <_printf_float+0x344>
 800949e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a0:	9a06      	ldr	r2, [sp, #24]
 80094a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094a4:	1a9a      	subs	r2, r3, r2
 80094a6:	eba3 0a01 	sub.w	sl, r3, r1
 80094aa:	4592      	cmp	sl, r2
 80094ac:	bfa8      	it	ge
 80094ae:	4692      	movge	sl, r2
 80094b0:	f1ba 0f00 	cmp.w	sl, #0
 80094b4:	dc0e      	bgt.n	80094d4 <_printf_float+0x354>
 80094b6:	f04f 0800 	mov.w	r8, #0
 80094ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094be:	f104 091a 	add.w	r9, r4, #26
 80094c2:	e019      	b.n	80094f8 <_printf_float+0x378>
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	465a      	mov	r2, fp
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	d1e5      	bne.n	800949e <_printf_float+0x31e>
 80094d2:	e6a3      	b.n	800921c <_printf_float+0x9c>
 80094d4:	4653      	mov	r3, sl
 80094d6:	4642      	mov	r2, r8
 80094d8:	4631      	mov	r1, r6
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	d1e9      	bne.n	80094b6 <_printf_float+0x336>
 80094e2:	e69b      	b.n	800921c <_printf_float+0x9c>
 80094e4:	2301      	movs	r3, #1
 80094e6:	464a      	mov	r2, r9
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f ae94 	beq.w	800921c <_printf_float+0x9c>
 80094f4:	f108 0801 	add.w	r8, r8, #1
 80094f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	eba3 030a 	sub.w	r3, r3, sl
 8009502:	4543      	cmp	r3, r8
 8009504:	dcee      	bgt.n	80094e4 <_printf_float+0x364>
 8009506:	e747      	b.n	8009398 <_printf_float+0x218>
 8009508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800950a:	2a01      	cmp	r2, #1
 800950c:	dc01      	bgt.n	8009512 <_printf_float+0x392>
 800950e:	07db      	lsls	r3, r3, #31
 8009510:	d539      	bpl.n	8009586 <_printf_float+0x406>
 8009512:	2301      	movs	r3, #1
 8009514:	4642      	mov	r2, r8
 8009516:	4631      	mov	r1, r6
 8009518:	4628      	mov	r0, r5
 800951a:	47b8      	blx	r7
 800951c:	3001      	adds	r0, #1
 800951e:	f43f ae7d 	beq.w	800921c <_printf_float+0x9c>
 8009522:	9b05      	ldr	r3, [sp, #20]
 8009524:	465a      	mov	r2, fp
 8009526:	4631      	mov	r1, r6
 8009528:	4628      	mov	r0, r5
 800952a:	47b8      	blx	r7
 800952c:	3001      	adds	r0, #1
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	f43f ae73 	beq.w	800921c <_printf_float+0x9c>
 8009536:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800953a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800953c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009544:	f103 33ff 	add.w	r3, r3, #4294967295
 8009548:	d018      	beq.n	800957c <_printf_float+0x3fc>
 800954a:	4642      	mov	r2, r8
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	d10e      	bne.n	8009574 <_printf_float+0x3f4>
 8009556:	e661      	b.n	800921c <_printf_float+0x9c>
 8009558:	2301      	movs	r3, #1
 800955a:	464a      	mov	r2, r9
 800955c:	4631      	mov	r1, r6
 800955e:	4628      	mov	r0, r5
 8009560:	47b8      	blx	r7
 8009562:	3001      	adds	r0, #1
 8009564:	f43f ae5a 	beq.w	800921c <_printf_float+0x9c>
 8009568:	f108 0801 	add.w	r8, r8, #1
 800956c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956e:	3b01      	subs	r3, #1
 8009570:	4543      	cmp	r3, r8
 8009572:	dcf1      	bgt.n	8009558 <_printf_float+0x3d8>
 8009574:	4653      	mov	r3, sl
 8009576:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800957a:	e6dd      	b.n	8009338 <_printf_float+0x1b8>
 800957c:	f04f 0800 	mov.w	r8, #0
 8009580:	f104 091a 	add.w	r9, r4, #26
 8009584:	e7f2      	b.n	800956c <_printf_float+0x3ec>
 8009586:	2301      	movs	r3, #1
 8009588:	e7df      	b.n	800954a <_printf_float+0x3ca>
 800958a:	2301      	movs	r3, #1
 800958c:	464a      	mov	r2, r9
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	47b8      	blx	r7
 8009594:	3001      	adds	r0, #1
 8009596:	f43f ae41 	beq.w	800921c <_printf_float+0x9c>
 800959a:	f108 0801 	add.w	r8, r8, #1
 800959e:	68e3      	ldr	r3, [r4, #12]
 80095a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	4543      	cmp	r3, r8
 80095a6:	dcf0      	bgt.n	800958a <_printf_float+0x40a>
 80095a8:	e6fa      	b.n	80093a0 <_printf_float+0x220>
 80095aa:	f04f 0800 	mov.w	r8, #0
 80095ae:	f104 0919 	add.w	r9, r4, #25
 80095b2:	e7f4      	b.n	800959e <_printf_float+0x41e>
 80095b4:	2900      	cmp	r1, #0
 80095b6:	f43f ae8a 	beq.w	80092ce <_printf_float+0x14e>
 80095ba:	f04f 0c00 	mov.w	ip, #0
 80095be:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80095c2:	e9cd 0900 	strd	r0, r9, [sp]
 80095c6:	6022      	str	r2, [r4, #0]
 80095c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7ff fd52 	bl	8009076 <__cvt>
 80095d2:	4680      	mov	r8, r0
 80095d4:	e64a      	b.n	800926c <_printf_float+0xec>
 80095d6:	bf00      	nop

080095d8 <_printf_common>:
 80095d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	4691      	mov	r9, r2
 80095de:	461f      	mov	r7, r3
 80095e0:	688a      	ldr	r2, [r1, #8]
 80095e2:	690b      	ldr	r3, [r1, #16]
 80095e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e8:	4293      	cmp	r3, r2
 80095ea:	bfb8      	it	lt
 80095ec:	4613      	movlt	r3, r2
 80095ee:	f8c9 3000 	str.w	r3, [r9]
 80095f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f6:	4606      	mov	r6, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	b112      	cbz	r2, 8009602 <_printf_common+0x2a>
 80095fc:	3301      	adds	r3, #1
 80095fe:	f8c9 3000 	str.w	r3, [r9]
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	0699      	lsls	r1, r3, #26
 8009606:	bf42      	ittt	mi
 8009608:	f8d9 3000 	ldrmi.w	r3, [r9]
 800960c:	3302      	addmi	r3, #2
 800960e:	f8c9 3000 	strmi.w	r3, [r9]
 8009612:	6825      	ldr	r5, [r4, #0]
 8009614:	f015 0506 	ands.w	r5, r5, #6
 8009618:	d107      	bne.n	800962a <_printf_common+0x52>
 800961a:	f104 0a19 	add.w	sl, r4, #25
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	f8d9 2000 	ldr.w	r2, [r9]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	42ab      	cmp	r3, r5
 8009628:	dc28      	bgt.n	800967c <_printf_common+0xa4>
 800962a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800962e:	6822      	ldr	r2, [r4, #0]
 8009630:	3300      	adds	r3, #0
 8009632:	bf18      	it	ne
 8009634:	2301      	movne	r3, #1
 8009636:	0692      	lsls	r2, r2, #26
 8009638:	d42d      	bmi.n	8009696 <_printf_common+0xbe>
 800963a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800963e:	4639      	mov	r1, r7
 8009640:	4630      	mov	r0, r6
 8009642:	47c0      	blx	r8
 8009644:	3001      	adds	r0, #1
 8009646:	d020      	beq.n	800968a <_printf_common+0xb2>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	68e5      	ldr	r5, [r4, #12]
 800964c:	f8d9 2000 	ldr.w	r2, [r9]
 8009650:	f003 0306 	and.w	r3, r3, #6
 8009654:	2b04      	cmp	r3, #4
 8009656:	bf08      	it	eq
 8009658:	1aad      	subeq	r5, r5, r2
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	6922      	ldr	r2, [r4, #16]
 800965e:	bf0c      	ite	eq
 8009660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009664:	2500      	movne	r5, #0
 8009666:	4293      	cmp	r3, r2
 8009668:	bfc4      	itt	gt
 800966a:	1a9b      	subgt	r3, r3, r2
 800966c:	18ed      	addgt	r5, r5, r3
 800966e:	f04f 0900 	mov.w	r9, #0
 8009672:	341a      	adds	r4, #26
 8009674:	454d      	cmp	r5, r9
 8009676:	d11a      	bne.n	80096ae <_printf_common+0xd6>
 8009678:	2000      	movs	r0, #0
 800967a:	e008      	b.n	800968e <_printf_common+0xb6>
 800967c:	2301      	movs	r3, #1
 800967e:	4652      	mov	r2, sl
 8009680:	4639      	mov	r1, r7
 8009682:	4630      	mov	r0, r6
 8009684:	47c0      	blx	r8
 8009686:	3001      	adds	r0, #1
 8009688:	d103      	bne.n	8009692 <_printf_common+0xba>
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	3501      	adds	r5, #1
 8009694:	e7c3      	b.n	800961e <_printf_common+0x46>
 8009696:	18e1      	adds	r1, r4, r3
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	2030      	movs	r0, #48	; 0x30
 800969c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096a0:	4422      	add	r2, r4
 80096a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096aa:	3302      	adds	r3, #2
 80096ac:	e7c5      	b.n	800963a <_printf_common+0x62>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4622      	mov	r2, r4
 80096b2:	4639      	mov	r1, r7
 80096b4:	4630      	mov	r0, r6
 80096b6:	47c0      	blx	r8
 80096b8:	3001      	adds	r0, #1
 80096ba:	d0e6      	beq.n	800968a <_printf_common+0xb2>
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e7d8      	b.n	8009674 <_printf_common+0x9c>
	...

080096c4 <_printf_i>:
 80096c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096cc:	460c      	mov	r4, r1
 80096ce:	7e09      	ldrb	r1, [r1, #24]
 80096d0:	b085      	sub	sp, #20
 80096d2:	296e      	cmp	r1, #110	; 0x6e
 80096d4:	4617      	mov	r7, r2
 80096d6:	4606      	mov	r6, r0
 80096d8:	4698      	mov	r8, r3
 80096da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096dc:	f000 80b3 	beq.w	8009846 <_printf_i+0x182>
 80096e0:	d822      	bhi.n	8009728 <_printf_i+0x64>
 80096e2:	2963      	cmp	r1, #99	; 0x63
 80096e4:	d036      	beq.n	8009754 <_printf_i+0x90>
 80096e6:	d80a      	bhi.n	80096fe <_printf_i+0x3a>
 80096e8:	2900      	cmp	r1, #0
 80096ea:	f000 80b9 	beq.w	8009860 <_printf_i+0x19c>
 80096ee:	2958      	cmp	r1, #88	; 0x58
 80096f0:	f000 8083 	beq.w	80097fa <_printf_i+0x136>
 80096f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80096fc:	e032      	b.n	8009764 <_printf_i+0xa0>
 80096fe:	2964      	cmp	r1, #100	; 0x64
 8009700:	d001      	beq.n	8009706 <_printf_i+0x42>
 8009702:	2969      	cmp	r1, #105	; 0x69
 8009704:	d1f6      	bne.n	80096f4 <_printf_i+0x30>
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	6813      	ldr	r3, [r2, #0]
 800970a:	0605      	lsls	r5, r0, #24
 800970c:	f103 0104 	add.w	r1, r3, #4
 8009710:	d52a      	bpl.n	8009768 <_printf_i+0xa4>
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	da03      	bge.n	8009722 <_printf_i+0x5e>
 800971a:	222d      	movs	r2, #45	; 0x2d
 800971c:	425b      	negs	r3, r3
 800971e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009722:	486f      	ldr	r0, [pc, #444]	; (80098e0 <_printf_i+0x21c>)
 8009724:	220a      	movs	r2, #10
 8009726:	e039      	b.n	800979c <_printf_i+0xd8>
 8009728:	2973      	cmp	r1, #115	; 0x73
 800972a:	f000 809d 	beq.w	8009868 <_printf_i+0x1a4>
 800972e:	d808      	bhi.n	8009742 <_printf_i+0x7e>
 8009730:	296f      	cmp	r1, #111	; 0x6f
 8009732:	d020      	beq.n	8009776 <_printf_i+0xb2>
 8009734:	2970      	cmp	r1, #112	; 0x70
 8009736:	d1dd      	bne.n	80096f4 <_printf_i+0x30>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	f043 0320 	orr.w	r3, r3, #32
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	e003      	b.n	800974a <_printf_i+0x86>
 8009742:	2975      	cmp	r1, #117	; 0x75
 8009744:	d017      	beq.n	8009776 <_printf_i+0xb2>
 8009746:	2978      	cmp	r1, #120	; 0x78
 8009748:	d1d4      	bne.n	80096f4 <_printf_i+0x30>
 800974a:	2378      	movs	r3, #120	; 0x78
 800974c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009750:	4864      	ldr	r0, [pc, #400]	; (80098e4 <_printf_i+0x220>)
 8009752:	e055      	b.n	8009800 <_printf_i+0x13c>
 8009754:	6813      	ldr	r3, [r2, #0]
 8009756:	1d19      	adds	r1, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6011      	str	r1, [r2, #0]
 800975c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009764:	2301      	movs	r3, #1
 8009766:	e08c      	b.n	8009882 <_printf_i+0x1be>
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6011      	str	r1, [r2, #0]
 800976c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009770:	bf18      	it	ne
 8009772:	b21b      	sxthne	r3, r3
 8009774:	e7cf      	b.n	8009716 <_printf_i+0x52>
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	6825      	ldr	r5, [r4, #0]
 800977a:	1d18      	adds	r0, r3, #4
 800977c:	6010      	str	r0, [r2, #0]
 800977e:	0628      	lsls	r0, r5, #24
 8009780:	d501      	bpl.n	8009786 <_printf_i+0xc2>
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	e002      	b.n	800978c <_printf_i+0xc8>
 8009786:	0668      	lsls	r0, r5, #25
 8009788:	d5fb      	bpl.n	8009782 <_printf_i+0xbe>
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	4854      	ldr	r0, [pc, #336]	; (80098e0 <_printf_i+0x21c>)
 800978e:	296f      	cmp	r1, #111	; 0x6f
 8009790:	bf14      	ite	ne
 8009792:	220a      	movne	r2, #10
 8009794:	2208      	moveq	r2, #8
 8009796:	2100      	movs	r1, #0
 8009798:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800979c:	6865      	ldr	r5, [r4, #4]
 800979e:	60a5      	str	r5, [r4, #8]
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	f2c0 8095 	blt.w	80098d0 <_printf_i+0x20c>
 80097a6:	6821      	ldr	r1, [r4, #0]
 80097a8:	f021 0104 	bic.w	r1, r1, #4
 80097ac:	6021      	str	r1, [r4, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d13d      	bne.n	800982e <_printf_i+0x16a>
 80097b2:	2d00      	cmp	r5, #0
 80097b4:	f040 808e 	bne.w	80098d4 <_printf_i+0x210>
 80097b8:	4665      	mov	r5, ip
 80097ba:	2a08      	cmp	r2, #8
 80097bc:	d10b      	bne.n	80097d6 <_printf_i+0x112>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	07db      	lsls	r3, r3, #31
 80097c2:	d508      	bpl.n	80097d6 <_printf_i+0x112>
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	6862      	ldr	r2, [r4, #4]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	bfde      	ittt	le
 80097cc:	2330      	movle	r3, #48	; 0x30
 80097ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097d6:	ebac 0305 	sub.w	r3, ip, r5
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	f8cd 8000 	str.w	r8, [sp]
 80097e0:	463b      	mov	r3, r7
 80097e2:	aa03      	add	r2, sp, #12
 80097e4:	4621      	mov	r1, r4
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff fef6 	bl	80095d8 <_printf_common>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d14d      	bne.n	800988c <_printf_i+0x1c8>
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	b005      	add	sp, #20
 80097f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097fa:	4839      	ldr	r0, [pc, #228]	; (80098e0 <_printf_i+0x21c>)
 80097fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009800:	6813      	ldr	r3, [r2, #0]
 8009802:	6821      	ldr	r1, [r4, #0]
 8009804:	1d1d      	adds	r5, r3, #4
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6015      	str	r5, [r2, #0]
 800980a:	060a      	lsls	r2, r1, #24
 800980c:	d50b      	bpl.n	8009826 <_printf_i+0x162>
 800980e:	07ca      	lsls	r2, r1, #31
 8009810:	bf44      	itt	mi
 8009812:	f041 0120 	orrmi.w	r1, r1, #32
 8009816:	6021      	strmi	r1, [r4, #0]
 8009818:	b91b      	cbnz	r3, 8009822 <_printf_i+0x15e>
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	f022 0220 	bic.w	r2, r2, #32
 8009820:	6022      	str	r2, [r4, #0]
 8009822:	2210      	movs	r2, #16
 8009824:	e7b7      	b.n	8009796 <_printf_i+0xd2>
 8009826:	064d      	lsls	r5, r1, #25
 8009828:	bf48      	it	mi
 800982a:	b29b      	uxthmi	r3, r3
 800982c:	e7ef      	b.n	800980e <_printf_i+0x14a>
 800982e:	4665      	mov	r5, ip
 8009830:	fbb3 f1f2 	udiv	r1, r3, r2
 8009834:	fb02 3311 	mls	r3, r2, r1, r3
 8009838:	5cc3      	ldrb	r3, [r0, r3]
 800983a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800983e:	460b      	mov	r3, r1
 8009840:	2900      	cmp	r1, #0
 8009842:	d1f5      	bne.n	8009830 <_printf_i+0x16c>
 8009844:	e7b9      	b.n	80097ba <_printf_i+0xf6>
 8009846:	6813      	ldr	r3, [r2, #0]
 8009848:	6825      	ldr	r5, [r4, #0]
 800984a:	6961      	ldr	r1, [r4, #20]
 800984c:	1d18      	adds	r0, r3, #4
 800984e:	6010      	str	r0, [r2, #0]
 8009850:	0628      	lsls	r0, r5, #24
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	d501      	bpl.n	800985a <_printf_i+0x196>
 8009856:	6019      	str	r1, [r3, #0]
 8009858:	e002      	b.n	8009860 <_printf_i+0x19c>
 800985a:	066a      	lsls	r2, r5, #25
 800985c:	d5fb      	bpl.n	8009856 <_printf_i+0x192>
 800985e:	8019      	strh	r1, [r3, #0]
 8009860:	2300      	movs	r3, #0
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	4665      	mov	r5, ip
 8009866:	e7b9      	b.n	80097dc <_printf_i+0x118>
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	1d19      	adds	r1, r3, #4
 800986c:	6011      	str	r1, [r2, #0]
 800986e:	681d      	ldr	r5, [r3, #0]
 8009870:	6862      	ldr	r2, [r4, #4]
 8009872:	2100      	movs	r1, #0
 8009874:	4628      	mov	r0, r5
 8009876:	f7f6 fceb 	bl	8000250 <memchr>
 800987a:	b108      	cbz	r0, 8009880 <_printf_i+0x1bc>
 800987c:	1b40      	subs	r0, r0, r5
 800987e:	6060      	str	r0, [r4, #4]
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	6123      	str	r3, [r4, #16]
 8009884:	2300      	movs	r3, #0
 8009886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800988a:	e7a7      	b.n	80097dc <_printf_i+0x118>
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	462a      	mov	r2, r5
 8009890:	4639      	mov	r1, r7
 8009892:	4630      	mov	r0, r6
 8009894:	47c0      	blx	r8
 8009896:	3001      	adds	r0, #1
 8009898:	d0aa      	beq.n	80097f0 <_printf_i+0x12c>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	079b      	lsls	r3, r3, #30
 800989e:	d413      	bmi.n	80098c8 <_printf_i+0x204>
 80098a0:	68e0      	ldr	r0, [r4, #12]
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	4298      	cmp	r0, r3
 80098a6:	bfb8      	it	lt
 80098a8:	4618      	movlt	r0, r3
 80098aa:	e7a3      	b.n	80097f4 <_printf_i+0x130>
 80098ac:	2301      	movs	r3, #1
 80098ae:	464a      	mov	r2, r9
 80098b0:	4639      	mov	r1, r7
 80098b2:	4630      	mov	r0, r6
 80098b4:	47c0      	blx	r8
 80098b6:	3001      	adds	r0, #1
 80098b8:	d09a      	beq.n	80097f0 <_printf_i+0x12c>
 80098ba:	3501      	adds	r5, #1
 80098bc:	68e3      	ldr	r3, [r4, #12]
 80098be:	9a03      	ldr	r2, [sp, #12]
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	42ab      	cmp	r3, r5
 80098c4:	dcf2      	bgt.n	80098ac <_printf_i+0x1e8>
 80098c6:	e7eb      	b.n	80098a0 <_printf_i+0x1dc>
 80098c8:	2500      	movs	r5, #0
 80098ca:	f104 0919 	add.w	r9, r4, #25
 80098ce:	e7f5      	b.n	80098bc <_printf_i+0x1f8>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1ac      	bne.n	800982e <_printf_i+0x16a>
 80098d4:	7803      	ldrb	r3, [r0, #0]
 80098d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098de:	e76c      	b.n	80097ba <_printf_i+0xf6>
 80098e0:	0800b8ee 	.word	0x0800b8ee
 80098e4:	0800b8ff 	.word	0x0800b8ff

080098e8 <iprintf>:
 80098e8:	b40f      	push	{r0, r1, r2, r3}
 80098ea:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <iprintf+0x2c>)
 80098ec:	b513      	push	{r0, r1, r4, lr}
 80098ee:	681c      	ldr	r4, [r3, #0]
 80098f0:	b124      	cbz	r4, 80098fc <iprintf+0x14>
 80098f2:	69a3      	ldr	r3, [r4, #24]
 80098f4:	b913      	cbnz	r3, 80098fc <iprintf+0x14>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fffa 	bl	800a8f0 <__sinit>
 80098fc:	ab05      	add	r3, sp, #20
 80098fe:	9a04      	ldr	r2, [sp, #16]
 8009900:	68a1      	ldr	r1, [r4, #8]
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	4620      	mov	r0, r4
 8009906:	f001 fcb3 	bl	800b270 <_vfiprintf_r>
 800990a:	b002      	add	sp, #8
 800990c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009910:	b004      	add	sp, #16
 8009912:	4770      	bx	lr
 8009914:	20000024 	.word	0x20000024

08009918 <_puts_r>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	460e      	mov	r6, r1
 800991c:	4605      	mov	r5, r0
 800991e:	b118      	cbz	r0, 8009928 <_puts_r+0x10>
 8009920:	6983      	ldr	r3, [r0, #24]
 8009922:	b90b      	cbnz	r3, 8009928 <_puts_r+0x10>
 8009924:	f000 ffe4 	bl	800a8f0 <__sinit>
 8009928:	69ab      	ldr	r3, [r5, #24]
 800992a:	68ac      	ldr	r4, [r5, #8]
 800992c:	b913      	cbnz	r3, 8009934 <_puts_r+0x1c>
 800992e:	4628      	mov	r0, r5
 8009930:	f000 ffde 	bl	800a8f0 <__sinit>
 8009934:	4b23      	ldr	r3, [pc, #140]	; (80099c4 <_puts_r+0xac>)
 8009936:	429c      	cmp	r4, r3
 8009938:	d117      	bne.n	800996a <_puts_r+0x52>
 800993a:	686c      	ldr	r4, [r5, #4]
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	071b      	lsls	r3, r3, #28
 8009940:	d51d      	bpl.n	800997e <_puts_r+0x66>
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	b1db      	cbz	r3, 800997e <_puts_r+0x66>
 8009946:	3e01      	subs	r6, #1
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800994e:	3b01      	subs	r3, #1
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	b9e9      	cbnz	r1, 8009990 <_puts_r+0x78>
 8009954:	2b00      	cmp	r3, #0
 8009956:	da2e      	bge.n	80099b6 <_puts_r+0x9e>
 8009958:	4622      	mov	r2, r4
 800995a:	210a      	movs	r1, #10
 800995c:	4628      	mov	r0, r5
 800995e:	f000 f83f 	bl	80099e0 <__swbuf_r>
 8009962:	3001      	adds	r0, #1
 8009964:	d011      	beq.n	800998a <_puts_r+0x72>
 8009966:	200a      	movs	r0, #10
 8009968:	e011      	b.n	800998e <_puts_r+0x76>
 800996a:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <_puts_r+0xb0>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d101      	bne.n	8009974 <_puts_r+0x5c>
 8009970:	68ac      	ldr	r4, [r5, #8]
 8009972:	e7e3      	b.n	800993c <_puts_r+0x24>
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <_puts_r+0xb4>)
 8009976:	429c      	cmp	r4, r3
 8009978:	bf08      	it	eq
 800997a:	68ec      	ldreq	r4, [r5, #12]
 800997c:	e7de      	b.n	800993c <_puts_r+0x24>
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f000 f87f 	bl	8009a84 <__swsetup_r>
 8009986:	2800      	cmp	r0, #0
 8009988:	d0dd      	beq.n	8009946 <_puts_r+0x2e>
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	2b00      	cmp	r3, #0
 8009992:	da04      	bge.n	800999e <_puts_r+0x86>
 8009994:	69a2      	ldr	r2, [r4, #24]
 8009996:	429a      	cmp	r2, r3
 8009998:	dc06      	bgt.n	80099a8 <_puts_r+0x90>
 800999a:	290a      	cmp	r1, #10
 800999c:	d004      	beq.n	80099a8 <_puts_r+0x90>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	6022      	str	r2, [r4, #0]
 80099a4:	7019      	strb	r1, [r3, #0]
 80099a6:	e7cf      	b.n	8009948 <_puts_r+0x30>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 f818 	bl	80099e0 <__swbuf_r>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d1c9      	bne.n	8009948 <_puts_r+0x30>
 80099b4:	e7e9      	b.n	800998a <_puts_r+0x72>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	200a      	movs	r0, #10
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	6022      	str	r2, [r4, #0]
 80099be:	7018      	strb	r0, [r3, #0]
 80099c0:	e7e5      	b.n	800998e <_puts_r+0x76>
 80099c2:	bf00      	nop
 80099c4:	0800b940 	.word	0x0800b940
 80099c8:	0800b960 	.word	0x0800b960
 80099cc:	0800b920 	.word	0x0800b920

080099d0 <puts>:
 80099d0:	4b02      	ldr	r3, [pc, #8]	; (80099dc <puts+0xc>)
 80099d2:	4601      	mov	r1, r0
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	f7ff bf9f 	b.w	8009918 <_puts_r>
 80099da:	bf00      	nop
 80099dc:	20000024 	.word	0x20000024

080099e0 <__swbuf_r>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	460e      	mov	r6, r1
 80099e4:	4614      	mov	r4, r2
 80099e6:	4605      	mov	r5, r0
 80099e8:	b118      	cbz	r0, 80099f2 <__swbuf_r+0x12>
 80099ea:	6983      	ldr	r3, [r0, #24]
 80099ec:	b90b      	cbnz	r3, 80099f2 <__swbuf_r+0x12>
 80099ee:	f000 ff7f 	bl	800a8f0 <__sinit>
 80099f2:	4b21      	ldr	r3, [pc, #132]	; (8009a78 <__swbuf_r+0x98>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	d12a      	bne.n	8009a4e <__swbuf_r+0x6e>
 80099f8:	686c      	ldr	r4, [r5, #4]
 80099fa:	69a3      	ldr	r3, [r4, #24]
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	071a      	lsls	r2, r3, #28
 8009a02:	d52e      	bpl.n	8009a62 <__swbuf_r+0x82>
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	b363      	cbz	r3, 8009a62 <__swbuf_r+0x82>
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	6820      	ldr	r0, [r4, #0]
 8009a0c:	1ac0      	subs	r0, r0, r3
 8009a0e:	6963      	ldr	r3, [r4, #20]
 8009a10:	b2f6      	uxtb	r6, r6
 8009a12:	4283      	cmp	r3, r0
 8009a14:	4637      	mov	r7, r6
 8009a16:	dc04      	bgt.n	8009a22 <__swbuf_r+0x42>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 fefe 	bl	800a81c <_fflush_r>
 8009a20:	bb28      	cbnz	r0, 8009a6e <__swbuf_r+0x8e>
 8009a22:	68a3      	ldr	r3, [r4, #8]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	701e      	strb	r6, [r3, #0]
 8009a30:	6963      	ldr	r3, [r4, #20]
 8009a32:	3001      	adds	r0, #1
 8009a34:	4283      	cmp	r3, r0
 8009a36:	d004      	beq.n	8009a42 <__swbuf_r+0x62>
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d519      	bpl.n	8009a72 <__swbuf_r+0x92>
 8009a3e:	2e0a      	cmp	r6, #10
 8009a40:	d117      	bne.n	8009a72 <__swbuf_r+0x92>
 8009a42:	4621      	mov	r1, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	f000 fee9 	bl	800a81c <_fflush_r>
 8009a4a:	b190      	cbz	r0, 8009a72 <__swbuf_r+0x92>
 8009a4c:	e00f      	b.n	8009a6e <__swbuf_r+0x8e>
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <__swbuf_r+0x9c>)
 8009a50:	429c      	cmp	r4, r3
 8009a52:	d101      	bne.n	8009a58 <__swbuf_r+0x78>
 8009a54:	68ac      	ldr	r4, [r5, #8]
 8009a56:	e7d0      	b.n	80099fa <__swbuf_r+0x1a>
 8009a58:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <__swbuf_r+0xa0>)
 8009a5a:	429c      	cmp	r4, r3
 8009a5c:	bf08      	it	eq
 8009a5e:	68ec      	ldreq	r4, [r5, #12]
 8009a60:	e7cb      	b.n	80099fa <__swbuf_r+0x1a>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 f80d 	bl	8009a84 <__swsetup_r>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d0cc      	beq.n	8009a08 <__swbuf_r+0x28>
 8009a6e:	f04f 37ff 	mov.w	r7, #4294967295
 8009a72:	4638      	mov	r0, r7
 8009a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a76:	bf00      	nop
 8009a78:	0800b940 	.word	0x0800b940
 8009a7c:	0800b960 	.word	0x0800b960
 8009a80:	0800b920 	.word	0x0800b920

08009a84 <__swsetup_r>:
 8009a84:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <__swsetup_r+0xcc>)
 8009a86:	b570      	push	{r4, r5, r6, lr}
 8009a88:	681d      	ldr	r5, [r3, #0]
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	b125      	cbz	r5, 8009a9a <__swsetup_r+0x16>
 8009a90:	69ab      	ldr	r3, [r5, #24]
 8009a92:	b913      	cbnz	r3, 8009a9a <__swsetup_r+0x16>
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 ff2b 	bl	800a8f0 <__sinit>
 8009a9a:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <__swsetup_r+0xd0>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d10f      	bne.n	8009ac0 <__swsetup_r+0x3c>
 8009aa0:	686c      	ldr	r4, [r5, #4]
 8009aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	0715      	lsls	r5, r2, #28
 8009aaa:	d42c      	bmi.n	8009b06 <__swsetup_r+0x82>
 8009aac:	06d0      	lsls	r0, r2, #27
 8009aae:	d411      	bmi.n	8009ad4 <__swsetup_r+0x50>
 8009ab0:	2209      	movs	r2, #9
 8009ab2:	6032      	str	r2, [r6, #0]
 8009ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	e03e      	b.n	8009b3e <__swsetup_r+0xba>
 8009ac0:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <__swsetup_r+0xd4>)
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d101      	bne.n	8009aca <__swsetup_r+0x46>
 8009ac6:	68ac      	ldr	r4, [r5, #8]
 8009ac8:	e7eb      	b.n	8009aa2 <__swsetup_r+0x1e>
 8009aca:	4b24      	ldr	r3, [pc, #144]	; (8009b5c <__swsetup_r+0xd8>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	bf08      	it	eq
 8009ad0:	68ec      	ldreq	r4, [r5, #12]
 8009ad2:	e7e6      	b.n	8009aa2 <__swsetup_r+0x1e>
 8009ad4:	0751      	lsls	r1, r2, #29
 8009ad6:	d512      	bpl.n	8009afe <__swsetup_r+0x7a>
 8009ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ada:	b141      	cbz	r1, 8009aee <__swsetup_r+0x6a>
 8009adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	d002      	beq.n	8009aea <__swsetup_r+0x66>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f001 faf1 	bl	800b0cc <_free_r>
 8009aea:	2300      	movs	r3, #0
 8009aec:	6363      	str	r3, [r4, #52]	; 0x34
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	2300      	movs	r3, #0
 8009af8:	6063      	str	r3, [r4, #4]
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	f043 0308 	orr.w	r3, r3, #8
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	b94b      	cbnz	r3, 8009b1e <__swsetup_r+0x9a>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b14:	d003      	beq.n	8009b1e <__swsetup_r+0x9a>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 ffa5 	bl	800aa68 <__smakebuf_r>
 8009b1e:	89a2      	ldrh	r2, [r4, #12]
 8009b20:	f012 0301 	ands.w	r3, r2, #1
 8009b24:	d00c      	beq.n	8009b40 <__swsetup_r+0xbc>
 8009b26:	2300      	movs	r3, #0
 8009b28:	60a3      	str	r3, [r4, #8]
 8009b2a:	6963      	ldr	r3, [r4, #20]
 8009b2c:	425b      	negs	r3, r3
 8009b2e:	61a3      	str	r3, [r4, #24]
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	b953      	cbnz	r3, 8009b4a <__swsetup_r+0xc6>
 8009b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009b3c:	d1ba      	bne.n	8009ab4 <__swsetup_r+0x30>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	0792      	lsls	r2, r2, #30
 8009b42:	bf58      	it	pl
 8009b44:	6963      	ldrpl	r3, [r4, #20]
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	e7f2      	b.n	8009b30 <__swsetup_r+0xac>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e7f7      	b.n	8009b3e <__swsetup_r+0xba>
 8009b4e:	bf00      	nop
 8009b50:	20000024 	.word	0x20000024
 8009b54:	0800b940 	.word	0x0800b940
 8009b58:	0800b960 	.word	0x0800b960
 8009b5c:	0800b920 	.word	0x0800b920

08009b60 <quorem>:
 8009b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	6903      	ldr	r3, [r0, #16]
 8009b66:	690c      	ldr	r4, [r1, #16]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	f2c0 8082 	blt.w	8009c74 <quorem+0x114>
 8009b70:	3c01      	subs	r4, #1
 8009b72:	f101 0714 	add.w	r7, r1, #20
 8009b76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b7a:	f100 0614 	add.w	r6, r0, #20
 8009b7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b86:	eb06 030c 	add.w	r3, r6, ip
 8009b8a:	3501      	adds	r5, #1
 8009b8c:	eb07 090c 	add.w	r9, r7, ip
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	fbb0 f5f5 	udiv	r5, r0, r5
 8009b96:	b395      	cbz	r5, 8009bfe <quorem+0x9e>
 8009b98:	f04f 0a00 	mov.w	sl, #0
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	46b6      	mov	lr, r6
 8009ba0:	46d3      	mov	fp, sl
 8009ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ba6:	b293      	uxth	r3, r2
 8009ba8:	fb05 a303 	mla	r3, r5, r3, sl
 8009bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	ebab 0303 	sub.w	r3, fp, r3
 8009bb6:	0c12      	lsrs	r2, r2, #16
 8009bb8:	f8de b000 	ldr.w	fp, [lr]
 8009bbc:	fb05 a202 	mla	r2, r5, r2, sl
 8009bc0:	fa13 f38b 	uxtah	r3, r3, fp
 8009bc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009bc8:	fa1f fb82 	uxth.w	fp, r2
 8009bcc:	f8de 2000 	ldr.w	r2, [lr]
 8009bd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bde:	4581      	cmp	r9, r0
 8009be0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009be4:	f84e 3b04 	str.w	r3, [lr], #4
 8009be8:	d2db      	bcs.n	8009ba2 <quorem+0x42>
 8009bea:	f856 300c 	ldr.w	r3, [r6, ip]
 8009bee:	b933      	cbnz	r3, 8009bfe <quorem+0x9e>
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	3b04      	subs	r3, #4
 8009bf4:	429e      	cmp	r6, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	d330      	bcc.n	8009c5c <quorem+0xfc>
 8009bfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bfe:	4640      	mov	r0, r8
 8009c00:	f001 f990 	bl	800af24 <__mcmp>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	db25      	blt.n	8009c54 <quorem+0xf4>
 8009c08:	3501      	adds	r5, #1
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f04f 0c00 	mov.w	ip, #0
 8009c10:	f857 2b04 	ldr.w	r2, [r7], #4
 8009c14:	f8d0 e000 	ldr.w	lr, [r0]
 8009c18:	b293      	uxth	r3, r2
 8009c1a:	ebac 0303 	sub.w	r3, ip, r3
 8009c1e:	0c12      	lsrs	r2, r2, #16
 8009c20:	fa13 f38e 	uxtah	r3, r3, lr
 8009c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c32:	45b9      	cmp	r9, r7
 8009c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c38:	f840 3b04 	str.w	r3, [r0], #4
 8009c3c:	d2e8      	bcs.n	8009c10 <quorem+0xb0>
 8009c3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009c42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009c46:	b92a      	cbnz	r2, 8009c54 <quorem+0xf4>
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	429e      	cmp	r6, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	d30b      	bcc.n	8009c68 <quorem+0x108>
 8009c50:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c54:	4628      	mov	r0, r5
 8009c56:	b003      	add	sp, #12
 8009c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	3b04      	subs	r3, #4
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	d1ca      	bne.n	8009bfa <quorem+0x9a>
 8009c64:	3c01      	subs	r4, #1
 8009c66:	e7c5      	b.n	8009bf4 <quorem+0x94>
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	3b04      	subs	r3, #4
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	d1ef      	bne.n	8009c50 <quorem+0xf0>
 8009c70:	3c01      	subs	r4, #1
 8009c72:	e7ea      	b.n	8009c4a <quorem+0xea>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7ee      	b.n	8009c56 <quorem+0xf6>

08009c78 <_dtoa_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	ec57 6b10 	vmov	r6, r7, d0
 8009c80:	b095      	sub	sp, #84	; 0x54
 8009c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c84:	9108      	str	r1, [sp, #32]
 8009c86:	4604      	mov	r4, r0
 8009c88:	920a      	str	r2, [sp, #40]	; 0x28
 8009c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c8c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009c90:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009c94:	b93d      	cbnz	r5, 8009ca6 <_dtoa_r+0x2e>
 8009c96:	2010      	movs	r0, #16
 8009c98:	f000 ff26 	bl	800aae8 <malloc>
 8009c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ca2:	6005      	str	r5, [r0, #0]
 8009ca4:	60c5      	str	r5, [r0, #12]
 8009ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ca8:	6819      	ldr	r1, [r3, #0]
 8009caa:	b151      	cbz	r1, 8009cc2 <_dtoa_r+0x4a>
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	604a      	str	r2, [r1, #4]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4093      	lsls	r3, r2
 8009cb4:	608b      	str	r3, [r1, #8]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 ff52 	bl	800ab60 <_Bfree>
 8009cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	1e3b      	subs	r3, r7, #0
 8009cc4:	bfb9      	ittee	lt
 8009cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cca:	9303      	strlt	r3, [sp, #12]
 8009ccc:	2300      	movge	r3, #0
 8009cce:	f8c8 3000 	strge.w	r3, [r8]
 8009cd2:	9d03      	ldr	r5, [sp, #12]
 8009cd4:	4bac      	ldr	r3, [pc, #688]	; (8009f88 <_dtoa_r+0x310>)
 8009cd6:	bfbc      	itt	lt
 8009cd8:	2201      	movlt	r2, #1
 8009cda:	f8c8 2000 	strlt.w	r2, [r8]
 8009cde:	43ab      	bics	r3, r5
 8009ce0:	d11b      	bne.n	8009d1a <_dtoa_r+0xa2>
 8009ce2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ce4:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	9b02      	ldr	r3, [sp, #8]
 8009cec:	b923      	cbnz	r3, 8009cf8 <_dtoa_r+0x80>
 8009cee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	f000 84dd 	beq.w	800a6b2 <_dtoa_r+0xa3a>
 8009cf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cfa:	b953      	cbnz	r3, 8009d12 <_dtoa_r+0x9a>
 8009cfc:	4ba3      	ldr	r3, [pc, #652]	; (8009f8c <_dtoa_r+0x314>)
 8009cfe:	e020      	b.n	8009d42 <_dtoa_r+0xca>
 8009d00:	4ba3      	ldr	r3, [pc, #652]	; (8009f90 <_dtoa_r+0x318>)
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	3308      	adds	r3, #8
 8009d06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	9804      	ldr	r0, [sp, #16]
 8009d0c:	b015      	add	sp, #84	; 0x54
 8009d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d12:	4b9e      	ldr	r3, [pc, #632]	; (8009f8c <_dtoa_r+0x314>)
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	3303      	adds	r3, #3
 8009d18:	e7f5      	b.n	8009d06 <_dtoa_r+0x8e>
 8009d1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d26:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d2a:	d10c      	bne.n	8009d46 <_dtoa_r+0xce>
 8009d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d2e:	2301      	movs	r3, #1
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 84b9 	beq.w	800a6ac <_dtoa_r+0xa34>
 8009d3a:	4b96      	ldr	r3, [pc, #600]	; (8009f94 <_dtoa_r+0x31c>)
 8009d3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	e7e1      	b.n	8009d0a <_dtoa_r+0x92>
 8009d46:	a913      	add	r1, sp, #76	; 0x4c
 8009d48:	aa12      	add	r2, sp, #72	; 0x48
 8009d4a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 f95f 	bl	800b012 <__d2b>
 8009d54:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8009d58:	9001      	str	r0, [sp, #4]
 8009d5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	d046      	beq.n	8009dee <_dtoa_r+0x176>
 8009d60:	9805      	ldr	r0, [sp, #20]
 8009d62:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d6a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8009d6e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d72:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8009d76:	2700      	movs	r7, #0
 8009d78:	ee07 aa90 	vmov	s15, sl
 8009d7c:	ec43 2b16 	vmov	d6, r2, r3
 8009d80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009d84:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8009f70 <_dtoa_r+0x2f8>
 8009d88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009d90:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8009f78 <_dtoa_r+0x300>
 8009d94:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009d98:	eeb0 7b46 	vmov.f64	d7, d6
 8009d9c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8009f80 <_dtoa_r+0x308>
 8009da0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009da4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009da8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db0:	ee16 ba90 	vmov	fp, s13
 8009db4:	d508      	bpl.n	8009dc8 <_dtoa_r+0x150>
 8009db6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009dba:	eeb4 6b47 	vcmp.f64	d6, d7
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	bf18      	it	ne
 8009dc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009dc8:	f1bb 0f16 	cmp.w	fp, #22
 8009dcc:	d834      	bhi.n	8009e38 <_dtoa_r+0x1c0>
 8009dce:	4b72      	ldr	r3, [pc, #456]	; (8009f98 <_dtoa_r+0x320>)
 8009dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009dd4:	ed93 7b00 	vldr	d7, [r3]
 8009dd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ddc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de4:	dd01      	ble.n	8009dea <_dtoa_r+0x172>
 8009de6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dea:	2300      	movs	r3, #0
 8009dec:	e025      	b.n	8009e3a <_dtoa_r+0x1c2>
 8009dee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009df0:	eb01 0a03 	add.w	sl, r1, r3
 8009df4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	dd17      	ble.n	8009e2c <_dtoa_r+0x1b4>
 8009dfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009e00:	9a02      	ldr	r2, [sp, #8]
 8009e02:	409d      	lsls	r5, r3
 8009e04:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8009e08:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0c:	432b      	orrs	r3, r5
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e1e:	9805      	ldr	r0, [sp, #20]
 8009e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e24:	2701      	movs	r7, #1
 8009e26:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8009e2a:	e7a5      	b.n	8009d78 <_dtoa_r+0x100>
 8009e2c:	9a02      	ldr	r2, [sp, #8]
 8009e2e:	f1c3 0320 	rsb	r3, r3, #32
 8009e32:	fa02 f303 	lsl.w	r3, r2, r3
 8009e36:	e7ea      	b.n	8009e0e <_dtoa_r+0x196>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	eba1 0a0a 	sub.w	sl, r1, sl
 8009e3e:	9310      	str	r3, [sp, #64]	; 0x40
 8009e40:	f1ba 0301 	subs.w	r3, sl, #1
 8009e44:	9307      	str	r3, [sp, #28]
 8009e46:	bf43      	ittte	mi
 8009e48:	2300      	movmi	r3, #0
 8009e4a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8009e4e:	9307      	strmi	r3, [sp, #28]
 8009e50:	f04f 0a00 	movpl.w	sl, #0
 8009e54:	f1bb 0f00 	cmp.w	fp, #0
 8009e58:	db19      	blt.n	8009e8e <_dtoa_r+0x216>
 8009e5a:	9b07      	ldr	r3, [sp, #28]
 8009e5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009e60:	445b      	add	r3, fp
 8009e62:	9307      	str	r3, [sp, #28]
 8009e64:	f04f 0800 	mov.w	r8, #0
 8009e68:	9b08      	ldr	r3, [sp, #32]
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	d866      	bhi.n	8009f3c <_dtoa_r+0x2c4>
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	bfc4      	itt	gt
 8009e72:	3b04      	subgt	r3, #4
 8009e74:	9308      	strgt	r3, [sp, #32]
 8009e76:	9b08      	ldr	r3, [sp, #32]
 8009e78:	f1a3 0302 	sub.w	r3, r3, #2
 8009e7c:	bfcc      	ite	gt
 8009e7e:	2500      	movgt	r5, #0
 8009e80:	2501      	movle	r5, #1
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d866      	bhi.n	8009f54 <_dtoa_r+0x2dc>
 8009e86:	e8df f003 	tbb	[pc, r3]
 8009e8a:	5755      	.short	0x5755
 8009e8c:	4909      	.short	0x4909
 8009e8e:	2300      	movs	r3, #0
 8009e90:	ebaa 0a0b 	sub.w	sl, sl, fp
 8009e94:	f1cb 0800 	rsb	r8, fp, #0
 8009e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e9a:	e7e5      	b.n	8009e68 <_dtoa_r+0x1f0>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dd59      	ble.n	8009f5a <_dtoa_r+0x2e2>
 8009ea6:	9306      	str	r3, [sp, #24]
 8009ea8:	4699      	mov	r9, r3
 8009eaa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009eac:	2200      	movs	r2, #0
 8009eae:	6072      	str	r2, [r6, #4]
 8009eb0:	2204      	movs	r2, #4
 8009eb2:	f102 0014 	add.w	r0, r2, #20
 8009eb6:	4298      	cmp	r0, r3
 8009eb8:	6871      	ldr	r1, [r6, #4]
 8009eba:	d953      	bls.n	8009f64 <_dtoa_r+0x2ec>
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 fe1b 	bl	800aaf8 <_Balloc>
 8009ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ec4:	6030      	str	r0, [r6, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	f1b9 0f0e 	cmp.w	r9, #14
 8009ece:	f200 80c2 	bhi.w	800a056 <_dtoa_r+0x3de>
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	f000 80bf 	beq.w	800a056 <_dtoa_r+0x3de>
 8009ed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009edc:	f1bb 0f00 	cmp.w	fp, #0
 8009ee0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8009ee4:	f340 80e6 	ble.w	800a0b4 <_dtoa_r+0x43c>
 8009ee8:	4a2b      	ldr	r2, [pc, #172]	; (8009f98 <_dtoa_r+0x320>)
 8009eea:	f00b 030f 	and.w	r3, fp, #15
 8009eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ef2:	ed93 7b00 	vldr	d7, [r3]
 8009ef6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8009efa:	06da      	lsls	r2, r3, #27
 8009efc:	f140 80d8 	bpl.w	800a0b0 <_dtoa_r+0x438>
 8009f00:	4a26      	ldr	r2, [pc, #152]	; (8009f9c <_dtoa_r+0x324>)
 8009f02:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8009f06:	ed92 6b08 	vldr	d6, [r2, #32]
 8009f0a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009f0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	2203      	movs	r2, #3
 8009f18:	4920      	ldr	r1, [pc, #128]	; (8009f9c <_dtoa_r+0x324>)
 8009f1a:	e04a      	b.n	8009fb2 <_dtoa_r+0x33a>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f22:	445b      	add	r3, fp
 8009f24:	f103 0901 	add.w	r9, r3, #1
 8009f28:	9306      	str	r3, [sp, #24]
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	bfb8      	it	lt
 8009f30:	2301      	movlt	r3, #1
 8009f32:	e7ba      	b.n	8009eaa <_dtoa_r+0x232>
 8009f34:	2300      	movs	r3, #0
 8009f36:	e7b2      	b.n	8009e9e <_dtoa_r+0x226>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e7f0      	b.n	8009f1e <_dtoa_r+0x2a6>
 8009f3c:	2501      	movs	r5, #1
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
 8009f48:	9306      	str	r3, [sp, #24]
 8009f4a:	4699      	mov	r9, r3
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2312      	movs	r3, #18
 8009f50:	920a      	str	r2, [sp, #40]	; 0x28
 8009f52:	e7aa      	b.n	8009eaa <_dtoa_r+0x232>
 8009f54:	2301      	movs	r3, #1
 8009f56:	9309      	str	r3, [sp, #36]	; 0x24
 8009f58:	e7f4      	b.n	8009f44 <_dtoa_r+0x2cc>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	9306      	str	r3, [sp, #24]
 8009f5e:	4699      	mov	r9, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	e7f5      	b.n	8009f50 <_dtoa_r+0x2d8>
 8009f64:	3101      	adds	r1, #1
 8009f66:	6071      	str	r1, [r6, #4]
 8009f68:	0052      	lsls	r2, r2, #1
 8009f6a:	e7a2      	b.n	8009eb2 <_dtoa_r+0x23a>
 8009f6c:	f3af 8000 	nop.w
 8009f70:	636f4361 	.word	0x636f4361
 8009f74:	3fd287a7 	.word	0x3fd287a7
 8009f78:	8b60c8b3 	.word	0x8b60c8b3
 8009f7c:	3fc68a28 	.word	0x3fc68a28
 8009f80:	509f79fb 	.word	0x509f79fb
 8009f84:	3fd34413 	.word	0x3fd34413
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	0800b919 	.word	0x0800b919
 8009f90:	0800b910 	.word	0x0800b910
 8009f94:	0800b8ed 	.word	0x0800b8ed
 8009f98:	0800b9a8 	.word	0x0800b9a8
 8009f9c:	0800b980 	.word	0x0800b980
 8009fa0:	07de      	lsls	r6, r3, #31
 8009fa2:	d504      	bpl.n	8009fae <_dtoa_r+0x336>
 8009fa4:	ed91 6b00 	vldr	d6, [r1]
 8009fa8:	3201      	adds	r2, #1
 8009faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fae:	105b      	asrs	r3, r3, #1
 8009fb0:	3108      	adds	r1, #8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f4      	bne.n	8009fa0 <_dtoa_r+0x328>
 8009fb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009fba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009fbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 80a7 	beq.w	800a118 <_dtoa_r+0x4a0>
 8009fca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fda:	f140 809d 	bpl.w	800a118 <_dtoa_r+0x4a0>
 8009fde:	f1b9 0f00 	cmp.w	r9, #0
 8009fe2:	f000 8099 	beq.w	800a118 <_dtoa_r+0x4a0>
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dd30      	ble.n	800a04e <_dtoa_r+0x3d6>
 8009fec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009ff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ff4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ff8:	9d06      	ldr	r5, [sp, #24]
 8009ffa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009ffe:	3201      	adds	r2, #1
 800a000:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a004:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a008:	ee07 2a90 	vmov	s15, r2
 800a00c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a010:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a014:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a018:	9a03      	ldr	r2, [sp, #12]
 800a01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a01e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800a022:	2d00      	cmp	r5, #0
 800a024:	d17b      	bne.n	800a11e <_dtoa_r+0x4a6>
 800a026:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a02a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a02e:	ec41 0b17 	vmov	d7, r0, r1
 800a032:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03a:	f300 8253 	bgt.w	800a4e4 <_dtoa_r+0x86c>
 800a03e:	eeb1 7b47 	vneg.f64	d7, d7
 800a042:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04a:	f100 8249 	bmi.w	800a4e0 <_dtoa_r+0x868>
 800a04e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a052:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f2c0 8119 	blt.w	800a290 <_dtoa_r+0x618>
 800a05e:	f1bb 0f0e 	cmp.w	fp, #14
 800a062:	f300 8115 	bgt.w	800a290 <_dtoa_r+0x618>
 800a066:	4bc3      	ldr	r3, [pc, #780]	; (800a374 <_dtoa_r+0x6fc>)
 800a068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a06c:	ed93 6b00 	vldr	d6, [r3]
 800a070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a072:	2b00      	cmp	r3, #0
 800a074:	f280 80ba 	bge.w	800a1ec <_dtoa_r+0x574>
 800a078:	f1b9 0f00 	cmp.w	r9, #0
 800a07c:	f300 80b6 	bgt.w	800a1ec <_dtoa_r+0x574>
 800a080:	f040 822d 	bne.w	800a4de <_dtoa_r+0x866>
 800a084:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a088:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a08c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a098:	464d      	mov	r5, r9
 800a09a:	464f      	mov	r7, r9
 800a09c:	f280 8204 	bge.w	800a4a8 <_dtoa_r+0x830>
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	9a04      	ldr	r2, [sp, #16]
 800a0a4:	1c5e      	adds	r6, r3, #1
 800a0a6:	2331      	movs	r3, #49	; 0x31
 800a0a8:	7013      	strb	r3, [r2, #0]
 800a0aa:	f10b 0b01 	add.w	fp, fp, #1
 800a0ae:	e1ff      	b.n	800a4b0 <_dtoa_r+0x838>
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	e731      	b.n	8009f18 <_dtoa_r+0x2a0>
 800a0b4:	d02e      	beq.n	800a114 <_dtoa_r+0x49c>
 800a0b6:	f1cb 0300 	rsb	r3, fp, #0
 800a0ba:	4aae      	ldr	r2, [pc, #696]	; (800a374 <_dtoa_r+0x6fc>)
 800a0bc:	f003 010f 	and.w	r1, r3, #15
 800a0c0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a0c4:	ed92 7b00 	vldr	d7, [r2]
 800a0c8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800a0cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a0d0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a0d4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800a0d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a0dc:	49a6      	ldr	r1, [pc, #664]	; (800a378 <_dtoa_r+0x700>)
 800a0de:	111b      	asrs	r3, r3, #4
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	b93b      	cbnz	r3, 800a0f6 <_dtoa_r+0x47e>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f43f af6b 	beq.w	8009fc2 <_dtoa_r+0x34a>
 800a0ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0f4:	e765      	b.n	8009fc2 <_dtoa_r+0x34a>
 800a0f6:	07dd      	lsls	r5, r3, #31
 800a0f8:	d509      	bpl.n	800a10e <_dtoa_r+0x496>
 800a0fa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a0fe:	ed91 7b00 	vldr	d7, [r1]
 800a102:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a106:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a10a:	3201      	adds	r2, #1
 800a10c:	2001      	movs	r0, #1
 800a10e:	105b      	asrs	r3, r3, #1
 800a110:	3108      	adds	r1, #8
 800a112:	e7e7      	b.n	800a0e4 <_dtoa_r+0x46c>
 800a114:	2202      	movs	r2, #2
 800a116:	e754      	b.n	8009fc2 <_dtoa_r+0x34a>
 800a118:	465b      	mov	r3, fp
 800a11a:	464d      	mov	r5, r9
 800a11c:	e770      	b.n	800a000 <_dtoa_r+0x388>
 800a11e:	4a95      	ldr	r2, [pc, #596]	; (800a374 <_dtoa_r+0x6fc>)
 800a120:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800a124:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a12a:	ec41 0b17 	vmov	d7, r0, r1
 800a12e:	b35a      	cbz	r2, 800a188 <_dtoa_r+0x510>
 800a130:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a134:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a138:	9e04      	ldr	r6, [sp, #16]
 800a13a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a13e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a142:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a146:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a14a:	ee14 2a90 	vmov	r2, s9
 800a14e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a152:	3230      	adds	r2, #48	; 0x30
 800a154:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a160:	f806 2b01 	strb.w	r2, [r6], #1
 800a164:	d43b      	bmi.n	800a1de <_dtoa_r+0x566>
 800a166:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a16a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a172:	d472      	bmi.n	800a25a <_dtoa_r+0x5e2>
 800a174:	9a04      	ldr	r2, [sp, #16]
 800a176:	1ab2      	subs	r2, r6, r2
 800a178:	4295      	cmp	r5, r2
 800a17a:	f77f af68 	ble.w	800a04e <_dtoa_r+0x3d6>
 800a17e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a182:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a186:	e7de      	b.n	800a146 <_dtoa_r+0x4ce>
 800a188:	9a04      	ldr	r2, [sp, #16]
 800a18a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a18e:	1956      	adds	r6, r2, r5
 800a190:	4611      	mov	r1, r2
 800a192:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a196:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a19a:	ee14 2a90 	vmov	r2, s9
 800a19e:	3230      	adds	r2, #48	; 0x30
 800a1a0:	f801 2b01 	strb.w	r2, [r1], #1
 800a1a4:	42b1      	cmp	r1, r6
 800a1a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a1aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a1ae:	d11a      	bne.n	800a1e6 <_dtoa_r+0x56e>
 800a1b0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a1b4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a1b8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c0:	dc4b      	bgt.n	800a25a <_dtoa_r+0x5e2>
 800a1c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a1c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ce:	f57f af3e 	bpl.w	800a04e <_dtoa_r+0x3d6>
 800a1d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1d6:	2a30      	cmp	r2, #48	; 0x30
 800a1d8:	f106 31ff 	add.w	r1, r6, #4294967295
 800a1dc:	d001      	beq.n	800a1e2 <_dtoa_r+0x56a>
 800a1de:	469b      	mov	fp, r3
 800a1e0:	e02a      	b.n	800a238 <_dtoa_r+0x5c0>
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	e7f5      	b.n	800a1d2 <_dtoa_r+0x55a>
 800a1e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a1ea:	e7d4      	b.n	800a196 <_dtoa_r+0x51e>
 800a1ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1f0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a1f4:	9e04      	ldr	r6, [sp, #16]
 800a1f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a1fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a1fe:	ee15 3a10 	vmov	r3, s10
 800a202:	3330      	adds	r3, #48	; 0x30
 800a204:	f806 3b01 	strb.w	r3, [r6], #1
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	1af3      	subs	r3, r6, r3
 800a20c:	4599      	cmp	r9, r3
 800a20e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a212:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a216:	d133      	bne.n	800a280 <_dtoa_r+0x608>
 800a218:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a21c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a224:	dc18      	bgt.n	800a258 <_dtoa_r+0x5e0>
 800a226:	eeb4 7b46 	vcmp.f64	d7, d6
 800a22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22e:	d103      	bne.n	800a238 <_dtoa_r+0x5c0>
 800a230:	ee15 3a10 	vmov	r3, s10
 800a234:	07db      	lsls	r3, r3, #31
 800a236:	d40f      	bmi.n	800a258 <_dtoa_r+0x5e0>
 800a238:	9901      	ldr	r1, [sp, #4]
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 fc90 	bl	800ab60 <_Bfree>
 800a240:	2300      	movs	r3, #0
 800a242:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a244:	7033      	strb	r3, [r6, #0]
 800a246:	f10b 0301 	add.w	r3, fp, #1
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f43f ad5b 	beq.w	8009d0a <_dtoa_r+0x92>
 800a254:	601e      	str	r6, [r3, #0]
 800a256:	e558      	b.n	8009d0a <_dtoa_r+0x92>
 800a258:	465b      	mov	r3, fp
 800a25a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a25e:	2939      	cmp	r1, #57	; 0x39
 800a260:	f106 32ff 	add.w	r2, r6, #4294967295
 800a264:	d106      	bne.n	800a274 <_dtoa_r+0x5fc>
 800a266:	9904      	ldr	r1, [sp, #16]
 800a268:	4291      	cmp	r1, r2
 800a26a:	d107      	bne.n	800a27c <_dtoa_r+0x604>
 800a26c:	2230      	movs	r2, #48	; 0x30
 800a26e:	700a      	strb	r2, [r1, #0]
 800a270:	3301      	adds	r3, #1
 800a272:	460a      	mov	r2, r1
 800a274:	7811      	ldrb	r1, [r2, #0]
 800a276:	3101      	adds	r1, #1
 800a278:	7011      	strb	r1, [r2, #0]
 800a27a:	e7b0      	b.n	800a1de <_dtoa_r+0x566>
 800a27c:	4616      	mov	r6, r2
 800a27e:	e7ec      	b.n	800a25a <_dtoa_r+0x5e2>
 800a280:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28c:	d1b3      	bne.n	800a1f6 <_dtoa_r+0x57e>
 800a28e:	e7d3      	b.n	800a238 <_dtoa_r+0x5c0>
 800a290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a292:	2a00      	cmp	r2, #0
 800a294:	f000 808d 	beq.w	800a3b2 <_dtoa_r+0x73a>
 800a298:	9a08      	ldr	r2, [sp, #32]
 800a29a:	2a01      	cmp	r2, #1
 800a29c:	dc72      	bgt.n	800a384 <_dtoa_r+0x70c>
 800a29e:	2f00      	cmp	r7, #0
 800a2a0:	d06c      	beq.n	800a37c <_dtoa_r+0x704>
 800a2a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2a6:	4645      	mov	r5, r8
 800a2a8:	4656      	mov	r6, sl
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	441a      	add	r2, r3
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	449a      	add	sl, r3
 800a2b4:	9207      	str	r2, [sp, #28]
 800a2b6:	f000 fcf3 	bl	800aca0 <__i2b>
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	2e00      	cmp	r6, #0
 800a2be:	dd0b      	ble.n	800a2d8 <_dtoa_r+0x660>
 800a2c0:	9b07      	ldr	r3, [sp, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dd08      	ble.n	800a2d8 <_dtoa_r+0x660>
 800a2c6:	42b3      	cmp	r3, r6
 800a2c8:	9a07      	ldr	r2, [sp, #28]
 800a2ca:	bfa8      	it	ge
 800a2cc:	4633      	movge	r3, r6
 800a2ce:	ebaa 0a03 	sub.w	sl, sl, r3
 800a2d2:	1af6      	subs	r6, r6, r3
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	9307      	str	r3, [sp, #28]
 800a2d8:	f1b8 0f00 	cmp.w	r8, #0
 800a2dc:	d01d      	beq.n	800a31a <_dtoa_r+0x6a2>
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d06a      	beq.n	800a3ba <_dtoa_r+0x742>
 800a2e4:	b18d      	cbz	r5, 800a30a <_dtoa_r+0x692>
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 fd78 	bl	800ade0 <__pow5mult>
 800a2f0:	9a01      	ldr	r2, [sp, #4]
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f000 fcdb 	bl	800acb2 <__multiply>
 800a2fc:	9901      	ldr	r1, [sp, #4]
 800a2fe:	900c      	str	r0, [sp, #48]	; 0x30
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fc2d 	bl	800ab60 <_Bfree>
 800a306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	ebb8 0205 	subs.w	r2, r8, r5
 800a30e:	d004      	beq.n	800a31a <_dtoa_r+0x6a2>
 800a310:	9901      	ldr	r1, [sp, #4]
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fd64 	bl	800ade0 <__pow5mult>
 800a318:	9001      	str	r0, [sp, #4]
 800a31a:	2101      	movs	r1, #1
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fcbf 	bl	800aca0 <__i2b>
 800a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a324:	4605      	mov	r5, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 81ca 	beq.w	800a6c0 <_dtoa_r+0xa48>
 800a32c:	461a      	mov	r2, r3
 800a32e:	4601      	mov	r1, r0
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fd55 	bl	800ade0 <__pow5mult>
 800a336:	9b08      	ldr	r3, [sp, #32]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	4605      	mov	r5, r0
 800a33c:	dc44      	bgt.n	800a3c8 <_dtoa_r+0x750>
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d13c      	bne.n	800a3be <_dtoa_r+0x746>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d137      	bne.n	800a3be <_dtoa_r+0x746>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a354:	0d1b      	lsrs	r3, r3, #20
 800a356:	051b      	lsls	r3, r3, #20
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d033      	beq.n	800a3c4 <_dtoa_r+0x74c>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	3301      	adds	r3, #1
 800a360:	f10a 0a01 	add.w	sl, sl, #1
 800a364:	9307      	str	r3, [sp, #28]
 800a366:	f04f 0801 	mov.w	r8, #1
 800a36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36c:	bb73      	cbnz	r3, 800a3cc <_dtoa_r+0x754>
 800a36e:	2001      	movs	r0, #1
 800a370:	e034      	b.n	800a3dc <_dtoa_r+0x764>
 800a372:	bf00      	nop
 800a374:	0800b9a8 	.word	0x0800b9a8
 800a378:	0800b980 	.word	0x0800b980
 800a37c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a37e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a382:	e790      	b.n	800a2a6 <_dtoa_r+0x62e>
 800a384:	f109 35ff 	add.w	r5, r9, #4294967295
 800a388:	45a8      	cmp	r8, r5
 800a38a:	bfbf      	itttt	lt
 800a38c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800a38e:	eba5 0808 	sublt.w	r8, r5, r8
 800a392:	4443      	addlt	r3, r8
 800a394:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800a396:	bfb6      	itet	lt
 800a398:	46a8      	movlt	r8, r5
 800a39a:	eba8 0505 	subge.w	r5, r8, r5
 800a39e:	2500      	movlt	r5, #0
 800a3a0:	f1b9 0f00 	cmp.w	r9, #0
 800a3a4:	bfb9      	ittee	lt
 800a3a6:	ebaa 0609 	sublt.w	r6, sl, r9
 800a3aa:	2300      	movlt	r3, #0
 800a3ac:	4656      	movge	r6, sl
 800a3ae:	464b      	movge	r3, r9
 800a3b0:	e77b      	b.n	800a2aa <_dtoa_r+0x632>
 800a3b2:	4645      	mov	r5, r8
 800a3b4:	4656      	mov	r6, sl
 800a3b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3b8:	e780      	b.n	800a2bc <_dtoa_r+0x644>
 800a3ba:	4642      	mov	r2, r8
 800a3bc:	e7a8      	b.n	800a310 <_dtoa_r+0x698>
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	e7d2      	b.n	800a36a <_dtoa_r+0x6f2>
 800a3c4:	4698      	mov	r8, r3
 800a3c6:	e7d0      	b.n	800a36a <_dtoa_r+0x6f2>
 800a3c8:	f04f 0800 	mov.w	r8, #0
 800a3cc:	692b      	ldr	r3, [r5, #16]
 800a3ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a3d2:	6918      	ldr	r0, [r3, #16]
 800a3d4:	f000 fc16 	bl	800ac04 <__hi0bits>
 800a3d8:	f1c0 0020 	rsb	r0, r0, #32
 800a3dc:	9b07      	ldr	r3, [sp, #28]
 800a3de:	4418      	add	r0, r3
 800a3e0:	f010 001f 	ands.w	r0, r0, #31
 800a3e4:	d047      	beq.n	800a476 <_dtoa_r+0x7fe>
 800a3e6:	f1c0 0320 	rsb	r3, r0, #32
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	dd3b      	ble.n	800a466 <_dtoa_r+0x7ee>
 800a3ee:	9b07      	ldr	r3, [sp, #28]
 800a3f0:	f1c0 001c 	rsb	r0, r0, #28
 800a3f4:	4482      	add	sl, r0
 800a3f6:	4406      	add	r6, r0
 800a3f8:	4403      	add	r3, r0
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	f1ba 0f00 	cmp.w	sl, #0
 800a400:	dd05      	ble.n	800a40e <_dtoa_r+0x796>
 800a402:	4652      	mov	r2, sl
 800a404:	9901      	ldr	r1, [sp, #4]
 800a406:	4620      	mov	r0, r4
 800a408:	f000 fd38 	bl	800ae7c <__lshift>
 800a40c:	9001      	str	r0, [sp, #4]
 800a40e:	9b07      	ldr	r3, [sp, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	dd05      	ble.n	800a420 <_dtoa_r+0x7a8>
 800a414:	4629      	mov	r1, r5
 800a416:	461a      	mov	r2, r3
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fd2f 	bl	800ae7c <__lshift>
 800a41e:	4605      	mov	r5, r0
 800a420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a422:	b353      	cbz	r3, 800a47a <_dtoa_r+0x802>
 800a424:	4629      	mov	r1, r5
 800a426:	9801      	ldr	r0, [sp, #4]
 800a428:	f000 fd7c 	bl	800af24 <__mcmp>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	da24      	bge.n	800a47a <_dtoa_r+0x802>
 800a430:	2300      	movs	r3, #0
 800a432:	220a      	movs	r2, #10
 800a434:	9901      	ldr	r1, [sp, #4]
 800a436:	4620      	mov	r0, r4
 800a438:	f000 fba9 	bl	800ab8e <__multadd>
 800a43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43e:	9001      	str	r0, [sp, #4]
 800a440:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8142 	beq.w	800a6ce <_dtoa_r+0xa56>
 800a44a:	2300      	movs	r3, #0
 800a44c:	4639      	mov	r1, r7
 800a44e:	220a      	movs	r2, #10
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fb9c 	bl	800ab8e <__multadd>
 800a456:	9b06      	ldr	r3, [sp, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	4607      	mov	r7, r0
 800a45c:	dc4b      	bgt.n	800a4f6 <_dtoa_r+0x87e>
 800a45e:	9b08      	ldr	r3, [sp, #32]
 800a460:	2b02      	cmp	r3, #2
 800a462:	dd48      	ble.n	800a4f6 <_dtoa_r+0x87e>
 800a464:	e011      	b.n	800a48a <_dtoa_r+0x812>
 800a466:	d0c9      	beq.n	800a3fc <_dtoa_r+0x784>
 800a468:	9a07      	ldr	r2, [sp, #28]
 800a46a:	331c      	adds	r3, #28
 800a46c:	441a      	add	r2, r3
 800a46e:	449a      	add	sl, r3
 800a470:	441e      	add	r6, r3
 800a472:	4613      	mov	r3, r2
 800a474:	e7c1      	b.n	800a3fa <_dtoa_r+0x782>
 800a476:	4603      	mov	r3, r0
 800a478:	e7f6      	b.n	800a468 <_dtoa_r+0x7f0>
 800a47a:	f1b9 0f00 	cmp.w	r9, #0
 800a47e:	dc34      	bgt.n	800a4ea <_dtoa_r+0x872>
 800a480:	9b08      	ldr	r3, [sp, #32]
 800a482:	2b02      	cmp	r3, #2
 800a484:	dd31      	ble.n	800a4ea <_dtoa_r+0x872>
 800a486:	f8cd 9018 	str.w	r9, [sp, #24]
 800a48a:	9b06      	ldr	r3, [sp, #24]
 800a48c:	b963      	cbnz	r3, 800a4a8 <_dtoa_r+0x830>
 800a48e:	4629      	mov	r1, r5
 800a490:	2205      	movs	r2, #5
 800a492:	4620      	mov	r0, r4
 800a494:	f000 fb7b 	bl	800ab8e <__multadd>
 800a498:	4601      	mov	r1, r0
 800a49a:	4605      	mov	r5, r0
 800a49c:	9801      	ldr	r0, [sp, #4]
 800a49e:	f000 fd41 	bl	800af24 <__mcmp>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	f73f adfc 	bgt.w	800a0a0 <_dtoa_r+0x428>
 800a4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4aa:	9e04      	ldr	r6, [sp, #16]
 800a4ac:	ea6f 0b03 	mvn.w	fp, r3
 800a4b0:	f04f 0900 	mov.w	r9, #0
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fb52 	bl	800ab60 <_Bfree>
 800a4bc:	2f00      	cmp	r7, #0
 800a4be:	f43f aebb 	beq.w	800a238 <_dtoa_r+0x5c0>
 800a4c2:	f1b9 0f00 	cmp.w	r9, #0
 800a4c6:	d005      	beq.n	800a4d4 <_dtoa_r+0x85c>
 800a4c8:	45b9      	cmp	r9, r7
 800a4ca:	d003      	beq.n	800a4d4 <_dtoa_r+0x85c>
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 fb46 	bl	800ab60 <_Bfree>
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fb42 	bl	800ab60 <_Bfree>
 800a4dc:	e6ac      	b.n	800a238 <_dtoa_r+0x5c0>
 800a4de:	2500      	movs	r5, #0
 800a4e0:	462f      	mov	r7, r5
 800a4e2:	e7e1      	b.n	800a4a8 <_dtoa_r+0x830>
 800a4e4:	469b      	mov	fp, r3
 800a4e6:	462f      	mov	r7, r5
 800a4e8:	e5da      	b.n	800a0a0 <_dtoa_r+0x428>
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	f8cd 9018 	str.w	r9, [sp, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 80f3 	beq.w	800a6dc <_dtoa_r+0xa64>
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	dd05      	ble.n	800a506 <_dtoa_r+0x88e>
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 fcbc 	bl	800ae7c <__lshift>
 800a504:	4607      	mov	r7, r0
 800a506:	f1b8 0f00 	cmp.w	r8, #0
 800a50a:	d04c      	beq.n	800a5a6 <_dtoa_r+0x92e>
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 faf2 	bl	800aaf8 <_Balloc>
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	3202      	adds	r2, #2
 800a518:	4606      	mov	r6, r0
 800a51a:	0092      	lsls	r2, r2, #2
 800a51c:	f107 010c 	add.w	r1, r7, #12
 800a520:	300c      	adds	r0, #12
 800a522:	f7fe fd95 	bl	8009050 <memcpy>
 800a526:	2201      	movs	r2, #1
 800a528:	4631      	mov	r1, r6
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 fca6 	bl	800ae7c <__lshift>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	46b9      	mov	r9, r7
 800a53c:	9307      	str	r3, [sp, #28]
 800a53e:	4607      	mov	r7, r0
 800a540:	4629      	mov	r1, r5
 800a542:	9801      	ldr	r0, [sp, #4]
 800a544:	f7ff fb0c 	bl	8009b60 <quorem>
 800a548:	4649      	mov	r1, r9
 800a54a:	4606      	mov	r6, r0
 800a54c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a550:	9801      	ldr	r0, [sp, #4]
 800a552:	f000 fce7 	bl	800af24 <__mcmp>
 800a556:	463a      	mov	r2, r7
 800a558:	9002      	str	r0, [sp, #8]
 800a55a:	4629      	mov	r1, r5
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 fcfb 	bl	800af58 <__mdiff>
 800a562:	68c3      	ldr	r3, [r0, #12]
 800a564:	4602      	mov	r2, r0
 800a566:	bb03      	cbnz	r3, 800a5aa <_dtoa_r+0x932>
 800a568:	4601      	mov	r1, r0
 800a56a:	9009      	str	r0, [sp, #36]	; 0x24
 800a56c:	9801      	ldr	r0, [sp, #4]
 800a56e:	f000 fcd9 	bl	800af24 <__mcmp>
 800a572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a574:	4603      	mov	r3, r0
 800a576:	4611      	mov	r1, r2
 800a578:	4620      	mov	r0, r4
 800a57a:	9309      	str	r3, [sp, #36]	; 0x24
 800a57c:	f000 faf0 	bl	800ab60 <_Bfree>
 800a580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a582:	b9a3      	cbnz	r3, 800a5ae <_dtoa_r+0x936>
 800a584:	9a08      	ldr	r2, [sp, #32]
 800a586:	b992      	cbnz	r2, 800a5ae <_dtoa_r+0x936>
 800a588:	9a07      	ldr	r2, [sp, #28]
 800a58a:	b982      	cbnz	r2, 800a5ae <_dtoa_r+0x936>
 800a58c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a590:	d029      	beq.n	800a5e6 <_dtoa_r+0x96e>
 800a592:	9b02      	ldr	r3, [sp, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd01      	ble.n	800a59c <_dtoa_r+0x924>
 800a598:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800a59c:	f10a 0601 	add.w	r6, sl, #1
 800a5a0:	f88a 8000 	strb.w	r8, [sl]
 800a5a4:	e786      	b.n	800a4b4 <_dtoa_r+0x83c>
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	e7c2      	b.n	800a530 <_dtoa_r+0x8b8>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e7e3      	b.n	800a576 <_dtoa_r+0x8fe>
 800a5ae:	9a02      	ldr	r2, [sp, #8]
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	db04      	blt.n	800a5be <_dtoa_r+0x946>
 800a5b4:	d124      	bne.n	800a600 <_dtoa_r+0x988>
 800a5b6:	9a08      	ldr	r2, [sp, #32]
 800a5b8:	bb12      	cbnz	r2, 800a600 <_dtoa_r+0x988>
 800a5ba:	9a07      	ldr	r2, [sp, #28]
 800a5bc:	bb02      	cbnz	r2, 800a600 <_dtoa_r+0x988>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	ddec      	ble.n	800a59c <_dtoa_r+0x924>
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	9901      	ldr	r1, [sp, #4]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fc58 	bl	800ae7c <__lshift>
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	9001      	str	r0, [sp, #4]
 800a5d0:	f000 fca8 	bl	800af24 <__mcmp>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	dc03      	bgt.n	800a5e0 <_dtoa_r+0x968>
 800a5d8:	d1e0      	bne.n	800a59c <_dtoa_r+0x924>
 800a5da:	f018 0f01 	tst.w	r8, #1
 800a5de:	d0dd      	beq.n	800a59c <_dtoa_r+0x924>
 800a5e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a5e4:	d1d8      	bne.n	800a598 <_dtoa_r+0x920>
 800a5e6:	2339      	movs	r3, #57	; 0x39
 800a5e8:	f10a 0601 	add.w	r6, sl, #1
 800a5ec:	f88a 3000 	strb.w	r3, [sl]
 800a5f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5f4:	2b39      	cmp	r3, #57	; 0x39
 800a5f6:	f106 32ff 	add.w	r2, r6, #4294967295
 800a5fa:	d04c      	beq.n	800a696 <_dtoa_r+0xa1e>
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	e051      	b.n	800a6a4 <_dtoa_r+0xa2c>
 800a600:	2b00      	cmp	r3, #0
 800a602:	f10a 0601 	add.w	r6, sl, #1
 800a606:	dd05      	ble.n	800a614 <_dtoa_r+0x99c>
 800a608:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a60c:	d0eb      	beq.n	800a5e6 <_dtoa_r+0x96e>
 800a60e:	f108 0801 	add.w	r8, r8, #1
 800a612:	e7c5      	b.n	800a5a0 <_dtoa_r+0x928>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	9a06      	ldr	r2, [sp, #24]
 800a618:	f806 8c01 	strb.w	r8, [r6, #-1]
 800a61c:	1af3      	subs	r3, r6, r3
 800a61e:	4293      	cmp	r3, r2
 800a620:	d021      	beq.n	800a666 <_dtoa_r+0x9ee>
 800a622:	2300      	movs	r3, #0
 800a624:	220a      	movs	r2, #10
 800a626:	9901      	ldr	r1, [sp, #4]
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fab0 	bl	800ab8e <__multadd>
 800a62e:	45b9      	cmp	r9, r7
 800a630:	9001      	str	r0, [sp, #4]
 800a632:	f04f 0300 	mov.w	r3, #0
 800a636:	f04f 020a 	mov.w	r2, #10
 800a63a:	4649      	mov	r1, r9
 800a63c:	4620      	mov	r0, r4
 800a63e:	d105      	bne.n	800a64c <_dtoa_r+0x9d4>
 800a640:	f000 faa5 	bl	800ab8e <__multadd>
 800a644:	4681      	mov	r9, r0
 800a646:	4607      	mov	r7, r0
 800a648:	46b2      	mov	sl, r6
 800a64a:	e779      	b.n	800a540 <_dtoa_r+0x8c8>
 800a64c:	f000 fa9f 	bl	800ab8e <__multadd>
 800a650:	4639      	mov	r1, r7
 800a652:	4681      	mov	r9, r0
 800a654:	2300      	movs	r3, #0
 800a656:	220a      	movs	r2, #10
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fa98 	bl	800ab8e <__multadd>
 800a65e:	4607      	mov	r7, r0
 800a660:	e7f2      	b.n	800a648 <_dtoa_r+0x9d0>
 800a662:	f04f 0900 	mov.w	r9, #0
 800a666:	2201      	movs	r2, #1
 800a668:	9901      	ldr	r1, [sp, #4]
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fc06 	bl	800ae7c <__lshift>
 800a670:	4629      	mov	r1, r5
 800a672:	9001      	str	r0, [sp, #4]
 800a674:	f000 fc56 	bl	800af24 <__mcmp>
 800a678:	2800      	cmp	r0, #0
 800a67a:	dcb9      	bgt.n	800a5f0 <_dtoa_r+0x978>
 800a67c:	d102      	bne.n	800a684 <_dtoa_r+0xa0c>
 800a67e:	f018 0f01 	tst.w	r8, #1
 800a682:	d1b5      	bne.n	800a5f0 <_dtoa_r+0x978>
 800a684:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a688:	2b30      	cmp	r3, #48	; 0x30
 800a68a:	f106 32ff 	add.w	r2, r6, #4294967295
 800a68e:	f47f af11 	bne.w	800a4b4 <_dtoa_r+0x83c>
 800a692:	4616      	mov	r6, r2
 800a694:	e7f6      	b.n	800a684 <_dtoa_r+0xa0c>
 800a696:	9b04      	ldr	r3, [sp, #16]
 800a698:	4293      	cmp	r3, r2
 800a69a:	d105      	bne.n	800a6a8 <_dtoa_r+0xa30>
 800a69c:	9a04      	ldr	r2, [sp, #16]
 800a69e:	f10b 0b01 	add.w	fp, fp, #1
 800a6a2:	2331      	movs	r3, #49	; 0x31
 800a6a4:	7013      	strb	r3, [r2, #0]
 800a6a6:	e705      	b.n	800a4b4 <_dtoa_r+0x83c>
 800a6a8:	4616      	mov	r6, r2
 800a6aa:	e7a1      	b.n	800a5f0 <_dtoa_r+0x978>
 800a6ac:	4b16      	ldr	r3, [pc, #88]	; (800a708 <_dtoa_r+0xa90>)
 800a6ae:	f7ff bb48 	b.w	8009d42 <_dtoa_r+0xca>
 800a6b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f47f ab23 	bne.w	8009d00 <_dtoa_r+0x88>
 800a6ba:	4b14      	ldr	r3, [pc, #80]	; (800a70c <_dtoa_r+0xa94>)
 800a6bc:	f7ff bb41 	b.w	8009d42 <_dtoa_r+0xca>
 800a6c0:	9b08      	ldr	r3, [sp, #32]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	f77f ae3b 	ble.w	800a33e <_dtoa_r+0x6c6>
 800a6c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a6cc:	e64f      	b.n	800a36e <_dtoa_r+0x6f6>
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dc03      	bgt.n	800a6dc <_dtoa_r+0xa64>
 800a6d4:	9b08      	ldr	r3, [sp, #32]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	f73f aed7 	bgt.w	800a48a <_dtoa_r+0x812>
 800a6dc:	9e04      	ldr	r6, [sp, #16]
 800a6de:	9801      	ldr	r0, [sp, #4]
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	f7ff fa3d 	bl	8009b60 <quorem>
 800a6e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a6ea:	f806 8b01 	strb.w	r8, [r6], #1
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	9a06      	ldr	r2, [sp, #24]
 800a6f2:	1af3      	subs	r3, r6, r3
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	ddb4      	ble.n	800a662 <_dtoa_r+0x9ea>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	220a      	movs	r2, #10
 800a6fc:	9901      	ldr	r1, [sp, #4]
 800a6fe:	4620      	mov	r0, r4
 800a700:	f000 fa45 	bl	800ab8e <__multadd>
 800a704:	9001      	str	r0, [sp, #4]
 800a706:	e7ea      	b.n	800a6de <_dtoa_r+0xa66>
 800a708:	0800b8ec 	.word	0x0800b8ec
 800a70c:	0800b910 	.word	0x0800b910

0800a710 <__sflush_r>:
 800a710:	898a      	ldrh	r2, [r1, #12]
 800a712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	4605      	mov	r5, r0
 800a718:	0710      	lsls	r0, r2, #28
 800a71a:	460c      	mov	r4, r1
 800a71c:	d458      	bmi.n	800a7d0 <__sflush_r+0xc0>
 800a71e:	684b      	ldr	r3, [r1, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc05      	bgt.n	800a730 <__sflush_r+0x20>
 800a724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	dc02      	bgt.n	800a730 <__sflush_r+0x20>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a732:	2e00      	cmp	r6, #0
 800a734:	d0f9      	beq.n	800a72a <__sflush_r+0x1a>
 800a736:	2300      	movs	r3, #0
 800a738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a73c:	682f      	ldr	r7, [r5, #0]
 800a73e:	6a21      	ldr	r1, [r4, #32]
 800a740:	602b      	str	r3, [r5, #0]
 800a742:	d032      	beq.n	800a7aa <__sflush_r+0x9a>
 800a744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	075a      	lsls	r2, r3, #29
 800a74a:	d505      	bpl.n	800a758 <__sflush_r+0x48>
 800a74c:	6863      	ldr	r3, [r4, #4]
 800a74e:	1ac0      	subs	r0, r0, r3
 800a750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a752:	b10b      	cbz	r3, 800a758 <__sflush_r+0x48>
 800a754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a756:	1ac0      	subs	r0, r0, r3
 800a758:	2300      	movs	r3, #0
 800a75a:	4602      	mov	r2, r0
 800a75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a75e:	6a21      	ldr	r1, [r4, #32]
 800a760:	4628      	mov	r0, r5
 800a762:	47b0      	blx	r6
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	d106      	bne.n	800a778 <__sflush_r+0x68>
 800a76a:	6829      	ldr	r1, [r5, #0]
 800a76c:	291d      	cmp	r1, #29
 800a76e:	d848      	bhi.n	800a802 <__sflush_r+0xf2>
 800a770:	4a29      	ldr	r2, [pc, #164]	; (800a818 <__sflush_r+0x108>)
 800a772:	40ca      	lsrs	r2, r1
 800a774:	07d6      	lsls	r6, r2, #31
 800a776:	d544      	bpl.n	800a802 <__sflush_r+0xf2>
 800a778:	2200      	movs	r2, #0
 800a77a:	6062      	str	r2, [r4, #4]
 800a77c:	04d9      	lsls	r1, r3, #19
 800a77e:	6922      	ldr	r2, [r4, #16]
 800a780:	6022      	str	r2, [r4, #0]
 800a782:	d504      	bpl.n	800a78e <__sflush_r+0x7e>
 800a784:	1c42      	adds	r2, r0, #1
 800a786:	d101      	bne.n	800a78c <__sflush_r+0x7c>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b903      	cbnz	r3, 800a78e <__sflush_r+0x7e>
 800a78c:	6560      	str	r0, [r4, #84]	; 0x54
 800a78e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a790:	602f      	str	r7, [r5, #0]
 800a792:	2900      	cmp	r1, #0
 800a794:	d0c9      	beq.n	800a72a <__sflush_r+0x1a>
 800a796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a79a:	4299      	cmp	r1, r3
 800a79c:	d002      	beq.n	800a7a4 <__sflush_r+0x94>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 fc94 	bl	800b0cc <_free_r>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	6360      	str	r0, [r4, #52]	; 0x34
 800a7a8:	e7c0      	b.n	800a72c <__sflush_r+0x1c>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b0      	blx	r6
 800a7b0:	1c41      	adds	r1, r0, #1
 800a7b2:	d1c8      	bne.n	800a746 <__sflush_r+0x36>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0c5      	beq.n	800a746 <__sflush_r+0x36>
 800a7ba:	2b1d      	cmp	r3, #29
 800a7bc:	d001      	beq.n	800a7c2 <__sflush_r+0xb2>
 800a7be:	2b16      	cmp	r3, #22
 800a7c0:	d101      	bne.n	800a7c6 <__sflush_r+0xb6>
 800a7c2:	602f      	str	r7, [r5, #0]
 800a7c4:	e7b1      	b.n	800a72a <__sflush_r+0x1a>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	e7ad      	b.n	800a72c <__sflush_r+0x1c>
 800a7d0:	690f      	ldr	r7, [r1, #16]
 800a7d2:	2f00      	cmp	r7, #0
 800a7d4:	d0a9      	beq.n	800a72a <__sflush_r+0x1a>
 800a7d6:	0793      	lsls	r3, r2, #30
 800a7d8:	680e      	ldr	r6, [r1, #0]
 800a7da:	bf08      	it	eq
 800a7dc:	694b      	ldreq	r3, [r1, #20]
 800a7de:	600f      	str	r7, [r1, #0]
 800a7e0:	bf18      	it	ne
 800a7e2:	2300      	movne	r3, #0
 800a7e4:	eba6 0807 	sub.w	r8, r6, r7
 800a7e8:	608b      	str	r3, [r1, #8]
 800a7ea:	f1b8 0f00 	cmp.w	r8, #0
 800a7ee:	dd9c      	ble.n	800a72a <__sflush_r+0x1a>
 800a7f0:	4643      	mov	r3, r8
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	6a21      	ldr	r1, [r4, #32]
 800a7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b0      	blx	r6
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dc06      	bgt.n	800a80e <__sflush_r+0xfe>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	e78e      	b.n	800a72c <__sflush_r+0x1c>
 800a80e:	4407      	add	r7, r0
 800a810:	eba8 0800 	sub.w	r8, r8, r0
 800a814:	e7e9      	b.n	800a7ea <__sflush_r+0xda>
 800a816:	bf00      	nop
 800a818:	20400001 	.word	0x20400001

0800a81c <_fflush_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	690b      	ldr	r3, [r1, #16]
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	b1db      	cbz	r3, 800a85e <_fflush_r+0x42>
 800a826:	b118      	cbz	r0, 800a830 <_fflush_r+0x14>
 800a828:	6983      	ldr	r3, [r0, #24]
 800a82a:	b90b      	cbnz	r3, 800a830 <_fflush_r+0x14>
 800a82c:	f000 f860 	bl	800a8f0 <__sinit>
 800a830:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <_fflush_r+0x48>)
 800a832:	429c      	cmp	r4, r3
 800a834:	d109      	bne.n	800a84a <_fflush_r+0x2e>
 800a836:	686c      	ldr	r4, [r5, #4]
 800a838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83c:	b17b      	cbz	r3, 800a85e <_fflush_r+0x42>
 800a83e:	4621      	mov	r1, r4
 800a840:	4628      	mov	r0, r5
 800a842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a846:	f7ff bf63 	b.w	800a710 <__sflush_r>
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <_fflush_r+0x4c>)
 800a84c:	429c      	cmp	r4, r3
 800a84e:	d101      	bne.n	800a854 <_fflush_r+0x38>
 800a850:	68ac      	ldr	r4, [r5, #8]
 800a852:	e7f1      	b.n	800a838 <_fflush_r+0x1c>
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <_fflush_r+0x50>)
 800a856:	429c      	cmp	r4, r3
 800a858:	bf08      	it	eq
 800a85a:	68ec      	ldreq	r4, [r5, #12]
 800a85c:	e7ec      	b.n	800a838 <_fflush_r+0x1c>
 800a85e:	2000      	movs	r0, #0
 800a860:	bd38      	pop	{r3, r4, r5, pc}
 800a862:	bf00      	nop
 800a864:	0800b940 	.word	0x0800b940
 800a868:	0800b960 	.word	0x0800b960
 800a86c:	0800b920 	.word	0x0800b920

0800a870 <std>:
 800a870:	2300      	movs	r3, #0
 800a872:	b510      	push	{r4, lr}
 800a874:	4604      	mov	r4, r0
 800a876:	e9c0 3300 	strd	r3, r3, [r0]
 800a87a:	6083      	str	r3, [r0, #8]
 800a87c:	8181      	strh	r1, [r0, #12]
 800a87e:	6643      	str	r3, [r0, #100]	; 0x64
 800a880:	81c2      	strh	r2, [r0, #14]
 800a882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a886:	6183      	str	r3, [r0, #24]
 800a888:	4619      	mov	r1, r3
 800a88a:	2208      	movs	r2, #8
 800a88c:	305c      	adds	r0, #92	; 0x5c
 800a88e:	f7fe fbea 	bl	8009066 <memset>
 800a892:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <std+0x38>)
 800a894:	6263      	str	r3, [r4, #36]	; 0x24
 800a896:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <std+0x3c>)
 800a898:	62a3      	str	r3, [r4, #40]	; 0x28
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <std+0x40>)
 800a89c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <std+0x44>)
 800a8a0:	6224      	str	r4, [r4, #32]
 800a8a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800b4bd 	.word	0x0800b4bd
 800a8ac:	0800b4df 	.word	0x0800b4df
 800a8b0:	0800b517 	.word	0x0800b517
 800a8b4:	0800b53b 	.word	0x0800b53b

0800a8b8 <_cleanup_r>:
 800a8b8:	4901      	ldr	r1, [pc, #4]	; (800a8c0 <_cleanup_r+0x8>)
 800a8ba:	f000 b885 	b.w	800a9c8 <_fwalk_reent>
 800a8be:	bf00      	nop
 800a8c0:	0800a81d 	.word	0x0800a81d

0800a8c4 <__sfmoreglue>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	1e4a      	subs	r2, r1, #1
 800a8c8:	2568      	movs	r5, #104	; 0x68
 800a8ca:	4355      	muls	r5, r2
 800a8cc:	460e      	mov	r6, r1
 800a8ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8d2:	f000 fc49 	bl	800b168 <_malloc_r>
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	b140      	cbz	r0, 800a8ec <__sfmoreglue+0x28>
 800a8da:	2100      	movs	r1, #0
 800a8dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a8e0:	300c      	adds	r0, #12
 800a8e2:	60a0      	str	r0, [r4, #8]
 800a8e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8e8:	f7fe fbbd 	bl	8009066 <memset>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}

0800a8f0 <__sinit>:
 800a8f0:	6983      	ldr	r3, [r0, #24]
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	bb33      	cbnz	r3, 800a946 <__sinit+0x56>
 800a8f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a8fc:	6503      	str	r3, [r0, #80]	; 0x50
 800a8fe:	4b12      	ldr	r3, [pc, #72]	; (800a948 <__sinit+0x58>)
 800a900:	4a12      	ldr	r2, [pc, #72]	; (800a94c <__sinit+0x5c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6282      	str	r2, [r0, #40]	; 0x28
 800a906:	4298      	cmp	r0, r3
 800a908:	bf04      	itt	eq
 800a90a:	2301      	moveq	r3, #1
 800a90c:	6183      	streq	r3, [r0, #24]
 800a90e:	f000 f81f 	bl	800a950 <__sfp>
 800a912:	6060      	str	r0, [r4, #4]
 800a914:	4620      	mov	r0, r4
 800a916:	f000 f81b 	bl	800a950 <__sfp>
 800a91a:	60a0      	str	r0, [r4, #8]
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 f817 	bl	800a950 <__sfp>
 800a922:	2200      	movs	r2, #0
 800a924:	60e0      	str	r0, [r4, #12]
 800a926:	2104      	movs	r1, #4
 800a928:	6860      	ldr	r0, [r4, #4]
 800a92a:	f7ff ffa1 	bl	800a870 <std>
 800a92e:	2201      	movs	r2, #1
 800a930:	2109      	movs	r1, #9
 800a932:	68a0      	ldr	r0, [r4, #8]
 800a934:	f7ff ff9c 	bl	800a870 <std>
 800a938:	2202      	movs	r2, #2
 800a93a:	2112      	movs	r1, #18
 800a93c:	68e0      	ldr	r0, [r4, #12]
 800a93e:	f7ff ff97 	bl	800a870 <std>
 800a942:	2301      	movs	r3, #1
 800a944:	61a3      	str	r3, [r4, #24]
 800a946:	bd10      	pop	{r4, pc}
 800a948:	0800b8d8 	.word	0x0800b8d8
 800a94c:	0800a8b9 	.word	0x0800a8b9

0800a950 <__sfp>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <__sfp+0x70>)
 800a954:	681e      	ldr	r6, [r3, #0]
 800a956:	69b3      	ldr	r3, [r6, #24]
 800a958:	4607      	mov	r7, r0
 800a95a:	b913      	cbnz	r3, 800a962 <__sfp+0x12>
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff ffc7 	bl	800a8f0 <__sinit>
 800a962:	3648      	adds	r6, #72	; 0x48
 800a964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a968:	3b01      	subs	r3, #1
 800a96a:	d503      	bpl.n	800a974 <__sfp+0x24>
 800a96c:	6833      	ldr	r3, [r6, #0]
 800a96e:	b133      	cbz	r3, 800a97e <__sfp+0x2e>
 800a970:	6836      	ldr	r6, [r6, #0]
 800a972:	e7f7      	b.n	800a964 <__sfp+0x14>
 800a974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a978:	b16d      	cbz	r5, 800a996 <__sfp+0x46>
 800a97a:	3468      	adds	r4, #104	; 0x68
 800a97c:	e7f4      	b.n	800a968 <__sfp+0x18>
 800a97e:	2104      	movs	r1, #4
 800a980:	4638      	mov	r0, r7
 800a982:	f7ff ff9f 	bl	800a8c4 <__sfmoreglue>
 800a986:	6030      	str	r0, [r6, #0]
 800a988:	2800      	cmp	r0, #0
 800a98a:	d1f1      	bne.n	800a970 <__sfp+0x20>
 800a98c:	230c      	movs	r3, #12
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4604      	mov	r4, r0
 800a992:	4620      	mov	r0, r4
 800a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a996:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <__sfp+0x74>)
 800a998:	6665      	str	r5, [r4, #100]	; 0x64
 800a99a:	e9c4 5500 	strd	r5, r5, [r4]
 800a99e:	60a5      	str	r5, [r4, #8]
 800a9a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a9a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a9a8:	2208      	movs	r2, #8
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9b0:	f7fe fb59 	bl	8009066 <memset>
 800a9b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9bc:	e7e9      	b.n	800a992 <__sfp+0x42>
 800a9be:	bf00      	nop
 800a9c0:	0800b8d8 	.word	0x0800b8d8
 800a9c4:	ffff0001 	.word	0xffff0001

0800a9c8 <_fwalk_reent>:
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	4689      	mov	r9, r1
 800a9d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	b914      	cbnz	r4, 800a9de <_fwalk_reent+0x16>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a9e2:	3f01      	subs	r7, #1
 800a9e4:	d501      	bpl.n	800a9ea <_fwalk_reent+0x22>
 800a9e6:	6824      	ldr	r4, [r4, #0]
 800a9e8:	e7f5      	b.n	800a9d6 <_fwalk_reent+0xe>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d907      	bls.n	800aa00 <_fwalk_reent+0x38>
 800a9f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	d003      	beq.n	800aa00 <_fwalk_reent+0x38>
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	47c8      	blx	r9
 800a9fe:	4306      	orrs	r6, r0
 800aa00:	3568      	adds	r5, #104	; 0x68
 800aa02:	e7ee      	b.n	800a9e2 <_fwalk_reent+0x1a>

0800aa04 <_localeconv_r>:
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <_localeconv_r+0x14>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6a18      	ldr	r0, [r3, #32]
 800aa0a:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <_localeconv_r+0x18>)
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	bf08      	it	eq
 800aa10:	4618      	moveq	r0, r3
 800aa12:	30f0      	adds	r0, #240	; 0xf0
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	20000024 	.word	0x20000024
 800aa1c:	20000088 	.word	0x20000088

0800aa20 <__swhatbuf_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	460e      	mov	r6, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	b096      	sub	sp, #88	; 0x58
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	461d      	mov	r5, r3
 800aa30:	da07      	bge.n	800aa42 <__swhatbuf_r+0x22>
 800aa32:	2300      	movs	r3, #0
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	89b3      	ldrh	r3, [r6, #12]
 800aa38:	061a      	lsls	r2, r3, #24
 800aa3a:	d410      	bmi.n	800aa5e <__swhatbuf_r+0x3e>
 800aa3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa40:	e00e      	b.n	800aa60 <__swhatbuf_r+0x40>
 800aa42:	466a      	mov	r2, sp
 800aa44:	f000 fda0 	bl	800b588 <_fstat_r>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	dbf2      	blt.n	800aa32 <__swhatbuf_r+0x12>
 800aa4c:	9a01      	ldr	r2, [sp, #4]
 800aa4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa56:	425a      	negs	r2, r3
 800aa58:	415a      	adcs	r2, r3
 800aa5a:	602a      	str	r2, [r5, #0]
 800aa5c:	e7ee      	b.n	800aa3c <__swhatbuf_r+0x1c>
 800aa5e:	2340      	movs	r3, #64	; 0x40
 800aa60:	2000      	movs	r0, #0
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	b016      	add	sp, #88	; 0x58
 800aa66:	bd70      	pop	{r4, r5, r6, pc}

0800aa68 <__smakebuf_r>:
 800aa68:	898b      	ldrh	r3, [r1, #12]
 800aa6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa6c:	079d      	lsls	r5, r3, #30
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460c      	mov	r4, r1
 800aa72:	d507      	bpl.n	800aa84 <__smakebuf_r+0x1c>
 800aa74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	6163      	str	r3, [r4, #20]
 800aa80:	b002      	add	sp, #8
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	ab01      	add	r3, sp, #4
 800aa86:	466a      	mov	r2, sp
 800aa88:	f7ff ffca 	bl	800aa20 <__swhatbuf_r>
 800aa8c:	9900      	ldr	r1, [sp, #0]
 800aa8e:	4605      	mov	r5, r0
 800aa90:	4630      	mov	r0, r6
 800aa92:	f000 fb69 	bl	800b168 <_malloc_r>
 800aa96:	b948      	cbnz	r0, 800aaac <__smakebuf_r+0x44>
 800aa98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa9c:	059a      	lsls	r2, r3, #22
 800aa9e:	d4ef      	bmi.n	800aa80 <__smakebuf_r+0x18>
 800aaa0:	f023 0303 	bic.w	r3, r3, #3
 800aaa4:	f043 0302 	orr.w	r3, r3, #2
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	e7e3      	b.n	800aa74 <__smakebuf_r+0xc>
 800aaac:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <__smakebuf_r+0x7c>)
 800aaae:	62b3      	str	r3, [r6, #40]	; 0x28
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	6020      	str	r0, [r4, #0]
 800aab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	9b00      	ldr	r3, [sp, #0]
 800aabc:	6163      	str	r3, [r4, #20]
 800aabe:	9b01      	ldr	r3, [sp, #4]
 800aac0:	6120      	str	r0, [r4, #16]
 800aac2:	b15b      	cbz	r3, 800aadc <__smakebuf_r+0x74>
 800aac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aac8:	4630      	mov	r0, r6
 800aaca:	f000 fd6f 	bl	800b5ac <_isatty_r>
 800aace:	b128      	cbz	r0, 800aadc <__smakebuf_r+0x74>
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	f043 0301 	orr.w	r3, r3, #1
 800aada:	81a3      	strh	r3, [r4, #12]
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	431d      	orrs	r5, r3
 800aae0:	81a5      	strh	r5, [r4, #12]
 800aae2:	e7cd      	b.n	800aa80 <__smakebuf_r+0x18>
 800aae4:	0800a8b9 	.word	0x0800a8b9

0800aae8 <malloc>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <malloc+0xc>)
 800aaea:	4601      	mov	r1, r0
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	f000 bb3b 	b.w	800b168 <_malloc_r>
 800aaf2:	bf00      	nop
 800aaf4:	20000024 	.word	0x20000024

0800aaf8 <_Balloc>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aafc:	4604      	mov	r4, r0
 800aafe:	460e      	mov	r6, r1
 800ab00:	b93d      	cbnz	r5, 800ab12 <_Balloc+0x1a>
 800ab02:	2010      	movs	r0, #16
 800ab04:	f7ff fff0 	bl	800aae8 <malloc>
 800ab08:	6260      	str	r0, [r4, #36]	; 0x24
 800ab0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab0e:	6005      	str	r5, [r0, #0]
 800ab10:	60c5      	str	r5, [r0, #12]
 800ab12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab14:	68eb      	ldr	r3, [r5, #12]
 800ab16:	b183      	cbz	r3, 800ab3a <_Balloc+0x42>
 800ab18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab20:	b9b8      	cbnz	r0, 800ab52 <_Balloc+0x5a>
 800ab22:	2101      	movs	r1, #1
 800ab24:	fa01 f506 	lsl.w	r5, r1, r6
 800ab28:	1d6a      	adds	r2, r5, #5
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f000 fabf 	bl	800b0b0 <_calloc_r>
 800ab32:	b160      	cbz	r0, 800ab4e <_Balloc+0x56>
 800ab34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ab38:	e00e      	b.n	800ab58 <_Balloc+0x60>
 800ab3a:	2221      	movs	r2, #33	; 0x21
 800ab3c:	2104      	movs	r1, #4
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 fab6 	bl	800b0b0 <_calloc_r>
 800ab44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab46:	60e8      	str	r0, [r5, #12]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e4      	bne.n	800ab18 <_Balloc+0x20>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	bd70      	pop	{r4, r5, r6, pc}
 800ab52:	6802      	ldr	r2, [r0, #0]
 800ab54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab5e:	e7f7      	b.n	800ab50 <_Balloc+0x58>

0800ab60 <_Bfree>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab64:	4606      	mov	r6, r0
 800ab66:	460d      	mov	r5, r1
 800ab68:	b93c      	cbnz	r4, 800ab7a <_Bfree+0x1a>
 800ab6a:	2010      	movs	r0, #16
 800ab6c:	f7ff ffbc 	bl	800aae8 <malloc>
 800ab70:	6270      	str	r0, [r6, #36]	; 0x24
 800ab72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab76:	6004      	str	r4, [r0, #0]
 800ab78:	60c4      	str	r4, [r0, #12]
 800ab7a:	b13d      	cbz	r5, 800ab8c <_Bfree+0x2c>
 800ab7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab7e:	686a      	ldr	r2, [r5, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab86:	6029      	str	r1, [r5, #0]
 800ab88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}

0800ab8e <__multadd>:
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	690d      	ldr	r5, [r1, #16]
 800ab94:	461f      	mov	r7, r3
 800ab96:	4606      	mov	r6, r0
 800ab98:	460c      	mov	r4, r1
 800ab9a:	f101 0c14 	add.w	ip, r1, #20
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f8dc 0000 	ldr.w	r0, [ip]
 800aba4:	b281      	uxth	r1, r0
 800aba6:	fb02 7101 	mla	r1, r2, r1, r7
 800abaa:	0c0f      	lsrs	r7, r1, #16
 800abac:	0c00      	lsrs	r0, r0, #16
 800abae:	fb02 7000 	mla	r0, r2, r0, r7
 800abb2:	b289      	uxth	r1, r1
 800abb4:	3301      	adds	r3, #1
 800abb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800abba:	429d      	cmp	r5, r3
 800abbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800abc0:	f84c 1b04 	str.w	r1, [ip], #4
 800abc4:	dcec      	bgt.n	800aba0 <__multadd+0x12>
 800abc6:	b1d7      	cbz	r7, 800abfe <__multadd+0x70>
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	42ab      	cmp	r3, r5
 800abcc:	dc12      	bgt.n	800abf4 <__multadd+0x66>
 800abce:	6861      	ldr	r1, [r4, #4]
 800abd0:	4630      	mov	r0, r6
 800abd2:	3101      	adds	r1, #1
 800abd4:	f7ff ff90 	bl	800aaf8 <_Balloc>
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	3202      	adds	r2, #2
 800abdc:	f104 010c 	add.w	r1, r4, #12
 800abe0:	4680      	mov	r8, r0
 800abe2:	0092      	lsls	r2, r2, #2
 800abe4:	300c      	adds	r0, #12
 800abe6:	f7fe fa33 	bl	8009050 <memcpy>
 800abea:	4621      	mov	r1, r4
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff ffb7 	bl	800ab60 <_Bfree>
 800abf2:	4644      	mov	r4, r8
 800abf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abf8:	3501      	adds	r5, #1
 800abfa:	615f      	str	r7, [r3, #20]
 800abfc:	6125      	str	r5, [r4, #16]
 800abfe:	4620      	mov	r0, r4
 800ac00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac04 <__hi0bits>:
 800ac04:	0c02      	lsrs	r2, r0, #16
 800ac06:	0412      	lsls	r2, r2, #16
 800ac08:	4603      	mov	r3, r0
 800ac0a:	b9b2      	cbnz	r2, 800ac3a <__hi0bits+0x36>
 800ac0c:	0403      	lsls	r3, r0, #16
 800ac0e:	2010      	movs	r0, #16
 800ac10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac14:	bf04      	itt	eq
 800ac16:	021b      	lsleq	r3, r3, #8
 800ac18:	3008      	addeq	r0, #8
 800ac1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac1e:	bf04      	itt	eq
 800ac20:	011b      	lsleq	r3, r3, #4
 800ac22:	3004      	addeq	r0, #4
 800ac24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac28:	bf04      	itt	eq
 800ac2a:	009b      	lsleq	r3, r3, #2
 800ac2c:	3002      	addeq	r0, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	db06      	blt.n	800ac40 <__hi0bits+0x3c>
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	d503      	bpl.n	800ac3e <__hi0bits+0x3a>
 800ac36:	3001      	adds	r0, #1
 800ac38:	4770      	bx	lr
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	e7e8      	b.n	800ac10 <__hi0bits+0xc>
 800ac3e:	2020      	movs	r0, #32
 800ac40:	4770      	bx	lr

0800ac42 <__lo0bits>:
 800ac42:	6803      	ldr	r3, [r0, #0]
 800ac44:	f013 0207 	ands.w	r2, r3, #7
 800ac48:	4601      	mov	r1, r0
 800ac4a:	d00b      	beq.n	800ac64 <__lo0bits+0x22>
 800ac4c:	07da      	lsls	r2, r3, #31
 800ac4e:	d423      	bmi.n	800ac98 <__lo0bits+0x56>
 800ac50:	0798      	lsls	r0, r3, #30
 800ac52:	bf49      	itett	mi
 800ac54:	085b      	lsrmi	r3, r3, #1
 800ac56:	089b      	lsrpl	r3, r3, #2
 800ac58:	2001      	movmi	r0, #1
 800ac5a:	600b      	strmi	r3, [r1, #0]
 800ac5c:	bf5c      	itt	pl
 800ac5e:	600b      	strpl	r3, [r1, #0]
 800ac60:	2002      	movpl	r0, #2
 800ac62:	4770      	bx	lr
 800ac64:	b298      	uxth	r0, r3
 800ac66:	b9a8      	cbnz	r0, 800ac94 <__lo0bits+0x52>
 800ac68:	0c1b      	lsrs	r3, r3, #16
 800ac6a:	2010      	movs	r0, #16
 800ac6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac70:	bf04      	itt	eq
 800ac72:	0a1b      	lsreq	r3, r3, #8
 800ac74:	3008      	addeq	r0, #8
 800ac76:	071a      	lsls	r2, r3, #28
 800ac78:	bf04      	itt	eq
 800ac7a:	091b      	lsreq	r3, r3, #4
 800ac7c:	3004      	addeq	r0, #4
 800ac7e:	079a      	lsls	r2, r3, #30
 800ac80:	bf04      	itt	eq
 800ac82:	089b      	lsreq	r3, r3, #2
 800ac84:	3002      	addeq	r0, #2
 800ac86:	07da      	lsls	r2, r3, #31
 800ac88:	d402      	bmi.n	800ac90 <__lo0bits+0x4e>
 800ac8a:	085b      	lsrs	r3, r3, #1
 800ac8c:	d006      	beq.n	800ac9c <__lo0bits+0x5a>
 800ac8e:	3001      	adds	r0, #1
 800ac90:	600b      	str	r3, [r1, #0]
 800ac92:	4770      	bx	lr
 800ac94:	4610      	mov	r0, r2
 800ac96:	e7e9      	b.n	800ac6c <__lo0bits+0x2a>
 800ac98:	2000      	movs	r0, #0
 800ac9a:	4770      	bx	lr
 800ac9c:	2020      	movs	r0, #32
 800ac9e:	4770      	bx	lr

0800aca0 <__i2b>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	2101      	movs	r1, #1
 800aca6:	f7ff ff27 	bl	800aaf8 <_Balloc>
 800acaa:	2201      	movs	r2, #1
 800acac:	6144      	str	r4, [r0, #20]
 800acae:	6102      	str	r2, [r0, #16]
 800acb0:	bd10      	pop	{r4, pc}

0800acb2 <__multiply>:
 800acb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb6:	4614      	mov	r4, r2
 800acb8:	690a      	ldr	r2, [r1, #16]
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	bfb8      	it	lt
 800acc0:	460b      	movlt	r3, r1
 800acc2:	4688      	mov	r8, r1
 800acc4:	bfbc      	itt	lt
 800acc6:	46a0      	movlt	r8, r4
 800acc8:	461c      	movlt	r4, r3
 800acca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800acd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acda:	eb07 0609 	add.w	r6, r7, r9
 800acde:	42b3      	cmp	r3, r6
 800ace0:	bfb8      	it	lt
 800ace2:	3101      	addlt	r1, #1
 800ace4:	f7ff ff08 	bl	800aaf8 <_Balloc>
 800ace8:	f100 0514 	add.w	r5, r0, #20
 800acec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800acf0:	462b      	mov	r3, r5
 800acf2:	2200      	movs	r2, #0
 800acf4:	4573      	cmp	r3, lr
 800acf6:	d316      	bcc.n	800ad26 <__multiply+0x74>
 800acf8:	f104 0214 	add.w	r2, r4, #20
 800acfc:	f108 0114 	add.w	r1, r8, #20
 800ad00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	9b00      	ldr	r3, [sp, #0]
 800ad0c:	9201      	str	r2, [sp, #4]
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d80c      	bhi.n	800ad2c <__multiply+0x7a>
 800ad12:	2e00      	cmp	r6, #0
 800ad14:	dd03      	ble.n	800ad1e <__multiply+0x6c>
 800ad16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d05d      	beq.n	800adda <__multiply+0x128>
 800ad1e:	6106      	str	r6, [r0, #16]
 800ad20:	b003      	add	sp, #12
 800ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad26:	f843 2b04 	str.w	r2, [r3], #4
 800ad2a:	e7e3      	b.n	800acf4 <__multiply+0x42>
 800ad2c:	f8b2 b000 	ldrh.w	fp, [r2]
 800ad30:	f1bb 0f00 	cmp.w	fp, #0
 800ad34:	d023      	beq.n	800ad7e <__multiply+0xcc>
 800ad36:	4689      	mov	r9, r1
 800ad38:	46ac      	mov	ip, r5
 800ad3a:	f04f 0800 	mov.w	r8, #0
 800ad3e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad42:	f8dc a000 	ldr.w	sl, [ip]
 800ad46:	b2a3      	uxth	r3, r4
 800ad48:	fa1f fa8a 	uxth.w	sl, sl
 800ad4c:	fb0b a303 	mla	r3, fp, r3, sl
 800ad50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad54:	f8dc 4000 	ldr.w	r4, [ip]
 800ad58:	4443      	add	r3, r8
 800ad5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad5e:	fb0b 840a 	mla	r4, fp, sl, r8
 800ad62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ad66:	46e2      	mov	sl, ip
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad6e:	454f      	cmp	r7, r9
 800ad70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad74:	f84a 3b04 	str.w	r3, [sl], #4
 800ad78:	d82b      	bhi.n	800add2 <__multiply+0x120>
 800ad7a:	f8cc 8004 	str.w	r8, [ip, #4]
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ad84:	3204      	adds	r2, #4
 800ad86:	f1ba 0f00 	cmp.w	sl, #0
 800ad8a:	d020      	beq.n	800adce <__multiply+0x11c>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	4689      	mov	r9, r1
 800ad90:	46a8      	mov	r8, r5
 800ad92:	f04f 0b00 	mov.w	fp, #0
 800ad96:	f8b9 c000 	ldrh.w	ip, [r9]
 800ad9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ad9e:	fb0a 440c 	mla	r4, sl, ip, r4
 800ada2:	445c      	add	r4, fp
 800ada4:	46c4      	mov	ip, r8
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800adac:	f84c 3b04 	str.w	r3, [ip], #4
 800adb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800adb4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800adb8:	0c1b      	lsrs	r3, r3, #16
 800adba:	fb0a b303 	mla	r3, sl, r3, fp
 800adbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800adc2:	454f      	cmp	r7, r9
 800adc4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800adc8:	d805      	bhi.n	800add6 <__multiply+0x124>
 800adca:	f8c8 3004 	str.w	r3, [r8, #4]
 800adce:	3504      	adds	r5, #4
 800add0:	e79b      	b.n	800ad0a <__multiply+0x58>
 800add2:	46d4      	mov	ip, sl
 800add4:	e7b3      	b.n	800ad3e <__multiply+0x8c>
 800add6:	46e0      	mov	r8, ip
 800add8:	e7dd      	b.n	800ad96 <__multiply+0xe4>
 800adda:	3e01      	subs	r6, #1
 800addc:	e799      	b.n	800ad12 <__multiply+0x60>
	...

0800ade0 <__pow5mult>:
 800ade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade4:	4615      	mov	r5, r2
 800ade6:	f012 0203 	ands.w	r2, r2, #3
 800adea:	4606      	mov	r6, r0
 800adec:	460f      	mov	r7, r1
 800adee:	d007      	beq.n	800ae00 <__pow5mult+0x20>
 800adf0:	3a01      	subs	r2, #1
 800adf2:	4c21      	ldr	r4, [pc, #132]	; (800ae78 <__pow5mult+0x98>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adfa:	f7ff fec8 	bl	800ab8e <__multadd>
 800adfe:	4607      	mov	r7, r0
 800ae00:	10ad      	asrs	r5, r5, #2
 800ae02:	d035      	beq.n	800ae70 <__pow5mult+0x90>
 800ae04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae06:	b93c      	cbnz	r4, 800ae18 <__pow5mult+0x38>
 800ae08:	2010      	movs	r0, #16
 800ae0a:	f7ff fe6d 	bl	800aae8 <malloc>
 800ae0e:	6270      	str	r0, [r6, #36]	; 0x24
 800ae10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae14:	6004      	str	r4, [r0, #0]
 800ae16:	60c4      	str	r4, [r0, #12]
 800ae18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae20:	b94c      	cbnz	r4, 800ae36 <__pow5mult+0x56>
 800ae22:	f240 2171 	movw	r1, #625	; 0x271
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7ff ff3a 	bl	800aca0 <__i2b>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae32:	4604      	mov	r4, r0
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	f04f 0800 	mov.w	r8, #0
 800ae3a:	07eb      	lsls	r3, r5, #31
 800ae3c:	d50a      	bpl.n	800ae54 <__pow5mult+0x74>
 800ae3e:	4639      	mov	r1, r7
 800ae40:	4622      	mov	r2, r4
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ff35 	bl	800acb2 <__multiply>
 800ae48:	4639      	mov	r1, r7
 800ae4a:	4681      	mov	r9, r0
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7ff fe87 	bl	800ab60 <_Bfree>
 800ae52:	464f      	mov	r7, r9
 800ae54:	106d      	asrs	r5, r5, #1
 800ae56:	d00b      	beq.n	800ae70 <__pow5mult+0x90>
 800ae58:	6820      	ldr	r0, [r4, #0]
 800ae5a:	b938      	cbnz	r0, 800ae6c <__pow5mult+0x8c>
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff ff26 	bl	800acb2 <__multiply>
 800ae66:	6020      	str	r0, [r4, #0]
 800ae68:	f8c0 8000 	str.w	r8, [r0]
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	e7e4      	b.n	800ae3a <__pow5mult+0x5a>
 800ae70:	4638      	mov	r0, r7
 800ae72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae76:	bf00      	nop
 800ae78:	0800ba70 	.word	0x0800ba70

0800ae7c <__lshift>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	460c      	mov	r4, r1
 800ae82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	6849      	ldr	r1, [r1, #4]
 800ae8a:	eb0a 0903 	add.w	r9, sl, r3
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	4607      	mov	r7, r0
 800ae92:	4616      	mov	r6, r2
 800ae94:	f109 0501 	add.w	r5, r9, #1
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	db32      	blt.n	800af02 <__lshift+0x86>
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7ff fe2b 	bl	800aaf8 <_Balloc>
 800aea2:	2300      	movs	r3, #0
 800aea4:	4680      	mov	r8, r0
 800aea6:	f100 0114 	add.w	r1, r0, #20
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4553      	cmp	r3, sl
 800aeae:	db2b      	blt.n	800af08 <__lshift+0x8c>
 800aeb0:	6920      	ldr	r0, [r4, #16]
 800aeb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aeb6:	f104 0314 	add.w	r3, r4, #20
 800aeba:	f016 021f 	ands.w	r2, r6, #31
 800aebe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aec2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aec6:	d025      	beq.n	800af14 <__lshift+0x98>
 800aec8:	f1c2 0e20 	rsb	lr, r2, #32
 800aecc:	2000      	movs	r0, #0
 800aece:	681e      	ldr	r6, [r3, #0]
 800aed0:	468a      	mov	sl, r1
 800aed2:	4096      	lsls	r6, r2
 800aed4:	4330      	orrs	r0, r6
 800aed6:	f84a 0b04 	str.w	r0, [sl], #4
 800aeda:	f853 0b04 	ldr.w	r0, [r3], #4
 800aede:	459c      	cmp	ip, r3
 800aee0:	fa20 f00e 	lsr.w	r0, r0, lr
 800aee4:	d814      	bhi.n	800af10 <__lshift+0x94>
 800aee6:	6048      	str	r0, [r1, #4]
 800aee8:	b108      	cbz	r0, 800aeee <__lshift+0x72>
 800aeea:	f109 0502 	add.w	r5, r9, #2
 800aeee:	3d01      	subs	r5, #1
 800aef0:	4638      	mov	r0, r7
 800aef2:	f8c8 5010 	str.w	r5, [r8, #16]
 800aef6:	4621      	mov	r1, r4
 800aef8:	f7ff fe32 	bl	800ab60 <_Bfree>
 800aefc:	4640      	mov	r0, r8
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	3101      	adds	r1, #1
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	e7c7      	b.n	800ae98 <__lshift+0x1c>
 800af08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af0c:	3301      	adds	r3, #1
 800af0e:	e7cd      	b.n	800aeac <__lshift+0x30>
 800af10:	4651      	mov	r1, sl
 800af12:	e7dc      	b.n	800aece <__lshift+0x52>
 800af14:	3904      	subs	r1, #4
 800af16:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1a:	f841 2f04 	str.w	r2, [r1, #4]!
 800af1e:	459c      	cmp	ip, r3
 800af20:	d8f9      	bhi.n	800af16 <__lshift+0x9a>
 800af22:	e7e4      	b.n	800aeee <__lshift+0x72>

0800af24 <__mcmp>:
 800af24:	6903      	ldr	r3, [r0, #16]
 800af26:	690a      	ldr	r2, [r1, #16]
 800af28:	1a9b      	subs	r3, r3, r2
 800af2a:	b530      	push	{r4, r5, lr}
 800af2c:	d10c      	bne.n	800af48 <__mcmp+0x24>
 800af2e:	0092      	lsls	r2, r2, #2
 800af30:	3014      	adds	r0, #20
 800af32:	3114      	adds	r1, #20
 800af34:	1884      	adds	r4, r0, r2
 800af36:	4411      	add	r1, r2
 800af38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af40:	4295      	cmp	r5, r2
 800af42:	d003      	beq.n	800af4c <__mcmp+0x28>
 800af44:	d305      	bcc.n	800af52 <__mcmp+0x2e>
 800af46:	2301      	movs	r3, #1
 800af48:	4618      	mov	r0, r3
 800af4a:	bd30      	pop	{r4, r5, pc}
 800af4c:	42a0      	cmp	r0, r4
 800af4e:	d3f3      	bcc.n	800af38 <__mcmp+0x14>
 800af50:	e7fa      	b.n	800af48 <__mcmp+0x24>
 800af52:	f04f 33ff 	mov.w	r3, #4294967295
 800af56:	e7f7      	b.n	800af48 <__mcmp+0x24>

0800af58 <__mdiff>:
 800af58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af5c:	460d      	mov	r5, r1
 800af5e:	4607      	mov	r7, r0
 800af60:	4611      	mov	r1, r2
 800af62:	4628      	mov	r0, r5
 800af64:	4614      	mov	r4, r2
 800af66:	f7ff ffdd 	bl	800af24 <__mcmp>
 800af6a:	1e06      	subs	r6, r0, #0
 800af6c:	d108      	bne.n	800af80 <__mdiff+0x28>
 800af6e:	4631      	mov	r1, r6
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff fdc1 	bl	800aaf8 <_Balloc>
 800af76:	2301      	movs	r3, #1
 800af78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af80:	bfa4      	itt	ge
 800af82:	4623      	movge	r3, r4
 800af84:	462c      	movge	r4, r5
 800af86:	4638      	mov	r0, r7
 800af88:	6861      	ldr	r1, [r4, #4]
 800af8a:	bfa6      	itte	ge
 800af8c:	461d      	movge	r5, r3
 800af8e:	2600      	movge	r6, #0
 800af90:	2601      	movlt	r6, #1
 800af92:	f7ff fdb1 	bl	800aaf8 <_Balloc>
 800af96:	692b      	ldr	r3, [r5, #16]
 800af98:	60c6      	str	r6, [r0, #12]
 800af9a:	6926      	ldr	r6, [r4, #16]
 800af9c:	f105 0914 	add.w	r9, r5, #20
 800afa0:	f104 0214 	add.w	r2, r4, #20
 800afa4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800afa8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800afac:	f100 0514 	add.w	r5, r0, #20
 800afb0:	f04f 0e00 	mov.w	lr, #0
 800afb4:	f852 ab04 	ldr.w	sl, [r2], #4
 800afb8:	f859 4b04 	ldr.w	r4, [r9], #4
 800afbc:	fa1e f18a 	uxtah	r1, lr, sl
 800afc0:	b2a3      	uxth	r3, r4
 800afc2:	1ac9      	subs	r1, r1, r3
 800afc4:	0c23      	lsrs	r3, r4, #16
 800afc6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800afca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800afce:	b289      	uxth	r1, r1
 800afd0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800afd4:	45c8      	cmp	r8, r9
 800afd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800afda:	4694      	mov	ip, r2
 800afdc:	f845 3b04 	str.w	r3, [r5], #4
 800afe0:	d8e8      	bhi.n	800afb4 <__mdiff+0x5c>
 800afe2:	45bc      	cmp	ip, r7
 800afe4:	d304      	bcc.n	800aff0 <__mdiff+0x98>
 800afe6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800afea:	b183      	cbz	r3, 800b00e <__mdiff+0xb6>
 800afec:	6106      	str	r6, [r0, #16]
 800afee:	e7c5      	b.n	800af7c <__mdiff+0x24>
 800aff0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aff4:	fa1e f381 	uxtah	r3, lr, r1
 800aff8:	141a      	asrs	r2, r3, #16
 800affa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800affe:	b29b      	uxth	r3, r3
 800b000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b004:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b008:	f845 3b04 	str.w	r3, [r5], #4
 800b00c:	e7e9      	b.n	800afe2 <__mdiff+0x8a>
 800b00e:	3e01      	subs	r6, #1
 800b010:	e7e9      	b.n	800afe6 <__mdiff+0x8e>

0800b012 <__d2b>:
 800b012:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b016:	460e      	mov	r6, r1
 800b018:	2101      	movs	r1, #1
 800b01a:	ec59 8b10 	vmov	r8, r9, d0
 800b01e:	4615      	mov	r5, r2
 800b020:	f7ff fd6a 	bl	800aaf8 <_Balloc>
 800b024:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b028:	4607      	mov	r7, r0
 800b02a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b02e:	bb34      	cbnz	r4, 800b07e <__d2b+0x6c>
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	f1b8 0300 	subs.w	r3, r8, #0
 800b036:	d027      	beq.n	800b088 <__d2b+0x76>
 800b038:	a802      	add	r0, sp, #8
 800b03a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b03e:	f7ff fe00 	bl	800ac42 <__lo0bits>
 800b042:	9900      	ldr	r1, [sp, #0]
 800b044:	b1f0      	cbz	r0, 800b084 <__d2b+0x72>
 800b046:	9a01      	ldr	r2, [sp, #4]
 800b048:	f1c0 0320 	rsb	r3, r0, #32
 800b04c:	fa02 f303 	lsl.w	r3, r2, r3
 800b050:	430b      	orrs	r3, r1
 800b052:	40c2      	lsrs	r2, r0
 800b054:	617b      	str	r3, [r7, #20]
 800b056:	9201      	str	r2, [sp, #4]
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	61bb      	str	r3, [r7, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bf14      	ite	ne
 800b060:	2102      	movne	r1, #2
 800b062:	2101      	moveq	r1, #1
 800b064:	6139      	str	r1, [r7, #16]
 800b066:	b1c4      	cbz	r4, 800b09a <__d2b+0x88>
 800b068:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b06c:	4404      	add	r4, r0
 800b06e:	6034      	str	r4, [r6, #0]
 800b070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b074:	6028      	str	r0, [r5, #0]
 800b076:	4638      	mov	r0, r7
 800b078:	b003      	add	sp, #12
 800b07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b07e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b082:	e7d5      	b.n	800b030 <__d2b+0x1e>
 800b084:	6179      	str	r1, [r7, #20]
 800b086:	e7e7      	b.n	800b058 <__d2b+0x46>
 800b088:	a801      	add	r0, sp, #4
 800b08a:	f7ff fdda 	bl	800ac42 <__lo0bits>
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	2101      	movs	r1, #1
 800b094:	6139      	str	r1, [r7, #16]
 800b096:	3020      	adds	r0, #32
 800b098:	e7e5      	b.n	800b066 <__d2b+0x54>
 800b09a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b09e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0a2:	6030      	str	r0, [r6, #0]
 800b0a4:	6918      	ldr	r0, [r3, #16]
 800b0a6:	f7ff fdad 	bl	800ac04 <__hi0bits>
 800b0aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b0ae:	e7e1      	b.n	800b074 <__d2b+0x62>

0800b0b0 <_calloc_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	fb02 f401 	mul.w	r4, r2, r1
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	f000 f856 	bl	800b168 <_malloc_r>
 800b0bc:	4605      	mov	r5, r0
 800b0be:	b118      	cbz	r0, 800b0c8 <_calloc_r+0x18>
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	f7fd ffcf 	bl	8009066 <memset>
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}

0800b0cc <_free_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	d045      	beq.n	800b160 <_free_r+0x94>
 800b0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d8:	1f0c      	subs	r4, r1, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfb8      	it	lt
 800b0de:	18e4      	addlt	r4, r4, r3
 800b0e0:	f000 fa98 	bl	800b614 <__malloc_lock>
 800b0e4:	4a1f      	ldr	r2, [pc, #124]	; (800b164 <_free_r+0x98>)
 800b0e6:	6813      	ldr	r3, [r2, #0]
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	b933      	cbnz	r3, 800b0fa <_free_r+0x2e>
 800b0ec:	6063      	str	r3, [r4, #4]
 800b0ee:	6014      	str	r4, [r2, #0]
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f6:	f000 ba8e 	b.w	800b616 <__malloc_unlock>
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	d90c      	bls.n	800b118 <_free_r+0x4c>
 800b0fe:	6821      	ldr	r1, [r4, #0]
 800b100:	1862      	adds	r2, r4, r1
 800b102:	4293      	cmp	r3, r2
 800b104:	bf04      	itt	eq
 800b106:	681a      	ldreq	r2, [r3, #0]
 800b108:	685b      	ldreq	r3, [r3, #4]
 800b10a:	6063      	str	r3, [r4, #4]
 800b10c:	bf04      	itt	eq
 800b10e:	1852      	addeq	r2, r2, r1
 800b110:	6022      	streq	r2, [r4, #0]
 800b112:	6004      	str	r4, [r0, #0]
 800b114:	e7ec      	b.n	800b0f0 <_free_r+0x24>
 800b116:	4613      	mov	r3, r2
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	b10a      	cbz	r2, 800b120 <_free_r+0x54>
 800b11c:	42a2      	cmp	r2, r4
 800b11e:	d9fa      	bls.n	800b116 <_free_r+0x4a>
 800b120:	6819      	ldr	r1, [r3, #0]
 800b122:	1858      	adds	r0, r3, r1
 800b124:	42a0      	cmp	r0, r4
 800b126:	d10b      	bne.n	800b140 <_free_r+0x74>
 800b128:	6820      	ldr	r0, [r4, #0]
 800b12a:	4401      	add	r1, r0
 800b12c:	1858      	adds	r0, r3, r1
 800b12e:	4282      	cmp	r2, r0
 800b130:	6019      	str	r1, [r3, #0]
 800b132:	d1dd      	bne.n	800b0f0 <_free_r+0x24>
 800b134:	6810      	ldr	r0, [r2, #0]
 800b136:	6852      	ldr	r2, [r2, #4]
 800b138:	605a      	str	r2, [r3, #4]
 800b13a:	4401      	add	r1, r0
 800b13c:	6019      	str	r1, [r3, #0]
 800b13e:	e7d7      	b.n	800b0f0 <_free_r+0x24>
 800b140:	d902      	bls.n	800b148 <_free_r+0x7c>
 800b142:	230c      	movs	r3, #12
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	e7d3      	b.n	800b0f0 <_free_r+0x24>
 800b148:	6820      	ldr	r0, [r4, #0]
 800b14a:	1821      	adds	r1, r4, r0
 800b14c:	428a      	cmp	r2, r1
 800b14e:	bf04      	itt	eq
 800b150:	6811      	ldreq	r1, [r2, #0]
 800b152:	6852      	ldreq	r2, [r2, #4]
 800b154:	6062      	str	r2, [r4, #4]
 800b156:	bf04      	itt	eq
 800b158:	1809      	addeq	r1, r1, r0
 800b15a:	6021      	streq	r1, [r4, #0]
 800b15c:	605c      	str	r4, [r3, #4]
 800b15e:	e7c7      	b.n	800b0f0 <_free_r+0x24>
 800b160:	bd38      	pop	{r3, r4, r5, pc}
 800b162:	bf00      	nop
 800b164:	200468f4 	.word	0x200468f4

0800b168 <_malloc_r>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	1ccd      	adds	r5, r1, #3
 800b16c:	f025 0503 	bic.w	r5, r5, #3
 800b170:	3508      	adds	r5, #8
 800b172:	2d0c      	cmp	r5, #12
 800b174:	bf38      	it	cc
 800b176:	250c      	movcc	r5, #12
 800b178:	2d00      	cmp	r5, #0
 800b17a:	4606      	mov	r6, r0
 800b17c:	db01      	blt.n	800b182 <_malloc_r+0x1a>
 800b17e:	42a9      	cmp	r1, r5
 800b180:	d903      	bls.n	800b18a <_malloc_r+0x22>
 800b182:	230c      	movs	r3, #12
 800b184:	6033      	str	r3, [r6, #0]
 800b186:	2000      	movs	r0, #0
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	f000 fa43 	bl	800b614 <__malloc_lock>
 800b18e:	4a21      	ldr	r2, [pc, #132]	; (800b214 <_malloc_r+0xac>)
 800b190:	6814      	ldr	r4, [r2, #0]
 800b192:	4621      	mov	r1, r4
 800b194:	b991      	cbnz	r1, 800b1bc <_malloc_r+0x54>
 800b196:	4c20      	ldr	r4, [pc, #128]	; (800b218 <_malloc_r+0xb0>)
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	b91b      	cbnz	r3, 800b1a4 <_malloc_r+0x3c>
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 f97d 	bl	800b49c <_sbrk_r>
 800b1a2:	6020      	str	r0, [r4, #0]
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f978 	bl	800b49c <_sbrk_r>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d124      	bne.n	800b1fa <_malloc_r+0x92>
 800b1b0:	230c      	movs	r3, #12
 800b1b2:	6033      	str	r3, [r6, #0]
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f000 fa2e 	bl	800b616 <__malloc_unlock>
 800b1ba:	e7e4      	b.n	800b186 <_malloc_r+0x1e>
 800b1bc:	680b      	ldr	r3, [r1, #0]
 800b1be:	1b5b      	subs	r3, r3, r5
 800b1c0:	d418      	bmi.n	800b1f4 <_malloc_r+0x8c>
 800b1c2:	2b0b      	cmp	r3, #11
 800b1c4:	d90f      	bls.n	800b1e6 <_malloc_r+0x7e>
 800b1c6:	600b      	str	r3, [r1, #0]
 800b1c8:	50cd      	str	r5, [r1, r3]
 800b1ca:	18cc      	adds	r4, r1, r3
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f000 fa22 	bl	800b616 <__malloc_unlock>
 800b1d2:	f104 000b 	add.w	r0, r4, #11
 800b1d6:	1d23      	adds	r3, r4, #4
 800b1d8:	f020 0007 	bic.w	r0, r0, #7
 800b1dc:	1ac3      	subs	r3, r0, r3
 800b1de:	d0d3      	beq.n	800b188 <_malloc_r+0x20>
 800b1e0:	425a      	negs	r2, r3
 800b1e2:	50e2      	str	r2, [r4, r3]
 800b1e4:	e7d0      	b.n	800b188 <_malloc_r+0x20>
 800b1e6:	428c      	cmp	r4, r1
 800b1e8:	684b      	ldr	r3, [r1, #4]
 800b1ea:	bf16      	itet	ne
 800b1ec:	6063      	strne	r3, [r4, #4]
 800b1ee:	6013      	streq	r3, [r2, #0]
 800b1f0:	460c      	movne	r4, r1
 800b1f2:	e7eb      	b.n	800b1cc <_malloc_r+0x64>
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	6849      	ldr	r1, [r1, #4]
 800b1f8:	e7cc      	b.n	800b194 <_malloc_r+0x2c>
 800b1fa:	1cc4      	adds	r4, r0, #3
 800b1fc:	f024 0403 	bic.w	r4, r4, #3
 800b200:	42a0      	cmp	r0, r4
 800b202:	d005      	beq.n	800b210 <_malloc_r+0xa8>
 800b204:	1a21      	subs	r1, r4, r0
 800b206:	4630      	mov	r0, r6
 800b208:	f000 f948 	bl	800b49c <_sbrk_r>
 800b20c:	3001      	adds	r0, #1
 800b20e:	d0cf      	beq.n	800b1b0 <_malloc_r+0x48>
 800b210:	6025      	str	r5, [r4, #0]
 800b212:	e7db      	b.n	800b1cc <_malloc_r+0x64>
 800b214:	200468f4 	.word	0x200468f4
 800b218:	200468f8 	.word	0x200468f8

0800b21c <__sfputc_r>:
 800b21c:	6893      	ldr	r3, [r2, #8]
 800b21e:	3b01      	subs	r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	b410      	push	{r4}
 800b224:	6093      	str	r3, [r2, #8]
 800b226:	da08      	bge.n	800b23a <__sfputc_r+0x1e>
 800b228:	6994      	ldr	r4, [r2, #24]
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	db01      	blt.n	800b232 <__sfputc_r+0x16>
 800b22e:	290a      	cmp	r1, #10
 800b230:	d103      	bne.n	800b23a <__sfputc_r+0x1e>
 800b232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b236:	f7fe bbd3 	b.w	80099e0 <__swbuf_r>
 800b23a:	6813      	ldr	r3, [r2, #0]
 800b23c:	1c58      	adds	r0, r3, #1
 800b23e:	6010      	str	r0, [r2, #0]
 800b240:	7019      	strb	r1, [r3, #0]
 800b242:	4608      	mov	r0, r1
 800b244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <__sfputs_r>:
 800b24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	4614      	mov	r4, r2
 800b252:	18d5      	adds	r5, r2, r3
 800b254:	42ac      	cmp	r4, r5
 800b256:	d101      	bne.n	800b25c <__sfputs_r+0x12>
 800b258:	2000      	movs	r0, #0
 800b25a:	e007      	b.n	800b26c <__sfputs_r+0x22>
 800b25c:	463a      	mov	r2, r7
 800b25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b262:	4630      	mov	r0, r6
 800b264:	f7ff ffda 	bl	800b21c <__sfputc_r>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d1f3      	bne.n	800b254 <__sfputs_r+0xa>
 800b26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b270 <_vfiprintf_r>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	460c      	mov	r4, r1
 800b276:	b09d      	sub	sp, #116	; 0x74
 800b278:	4617      	mov	r7, r2
 800b27a:	461d      	mov	r5, r3
 800b27c:	4606      	mov	r6, r0
 800b27e:	b118      	cbz	r0, 800b288 <_vfiprintf_r+0x18>
 800b280:	6983      	ldr	r3, [r0, #24]
 800b282:	b90b      	cbnz	r3, 800b288 <_vfiprintf_r+0x18>
 800b284:	f7ff fb34 	bl	800a8f0 <__sinit>
 800b288:	4b7c      	ldr	r3, [pc, #496]	; (800b47c <_vfiprintf_r+0x20c>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d158      	bne.n	800b340 <_vfiprintf_r+0xd0>
 800b28e:	6874      	ldr	r4, [r6, #4]
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	0718      	lsls	r0, r3, #28
 800b294:	d55e      	bpl.n	800b354 <_vfiprintf_r+0xe4>
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d05b      	beq.n	800b354 <_vfiprintf_r+0xe4>
 800b29c:	2300      	movs	r3, #0
 800b29e:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a0:	2320      	movs	r3, #32
 800b2a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2a6:	2330      	movs	r3, #48	; 0x30
 800b2a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ac:	9503      	str	r5, [sp, #12]
 800b2ae:	f04f 0b01 	mov.w	fp, #1
 800b2b2:	46b8      	mov	r8, r7
 800b2b4:	4645      	mov	r5, r8
 800b2b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2ba:	b10b      	cbz	r3, 800b2c0 <_vfiprintf_r+0x50>
 800b2bc:	2b25      	cmp	r3, #37	; 0x25
 800b2be:	d154      	bne.n	800b36a <_vfiprintf_r+0xfa>
 800b2c0:	ebb8 0a07 	subs.w	sl, r8, r7
 800b2c4:	d00b      	beq.n	800b2de <_vfiprintf_r+0x6e>
 800b2c6:	4653      	mov	r3, sl
 800b2c8:	463a      	mov	r2, r7
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff ffbc 	bl	800b24a <__sfputs_r>
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	f000 80c2 	beq.w	800b45c <_vfiprintf_r+0x1ec>
 800b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2da:	4453      	add	r3, sl
 800b2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2de:	f898 3000 	ldrb.w	r3, [r8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 80ba 	beq.w	800b45c <_vfiprintf_r+0x1ec>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	9307      	str	r3, [sp, #28]
 800b2f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2fa:	931a      	str	r3, [sp, #104]	; 0x68
 800b2fc:	46a8      	mov	r8, r5
 800b2fe:	2205      	movs	r2, #5
 800b300:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b304:	485e      	ldr	r0, [pc, #376]	; (800b480 <_vfiprintf_r+0x210>)
 800b306:	f7f4 ffa3 	bl	8000250 <memchr>
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	bb78      	cbnz	r0, 800b36e <_vfiprintf_r+0xfe>
 800b30e:	06d9      	lsls	r1, r3, #27
 800b310:	bf44      	itt	mi
 800b312:	2220      	movmi	r2, #32
 800b314:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b318:	071a      	lsls	r2, r3, #28
 800b31a:	bf44      	itt	mi
 800b31c:	222b      	movmi	r2, #43	; 0x2b
 800b31e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b322:	782a      	ldrb	r2, [r5, #0]
 800b324:	2a2a      	cmp	r2, #42	; 0x2a
 800b326:	d02a      	beq.n	800b37e <_vfiprintf_r+0x10e>
 800b328:	9a07      	ldr	r2, [sp, #28]
 800b32a:	46a8      	mov	r8, r5
 800b32c:	2000      	movs	r0, #0
 800b32e:	250a      	movs	r5, #10
 800b330:	4641      	mov	r1, r8
 800b332:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b336:	3b30      	subs	r3, #48	; 0x30
 800b338:	2b09      	cmp	r3, #9
 800b33a:	d969      	bls.n	800b410 <_vfiprintf_r+0x1a0>
 800b33c:	b360      	cbz	r0, 800b398 <_vfiprintf_r+0x128>
 800b33e:	e024      	b.n	800b38a <_vfiprintf_r+0x11a>
 800b340:	4b50      	ldr	r3, [pc, #320]	; (800b484 <_vfiprintf_r+0x214>)
 800b342:	429c      	cmp	r4, r3
 800b344:	d101      	bne.n	800b34a <_vfiprintf_r+0xda>
 800b346:	68b4      	ldr	r4, [r6, #8]
 800b348:	e7a2      	b.n	800b290 <_vfiprintf_r+0x20>
 800b34a:	4b4f      	ldr	r3, [pc, #316]	; (800b488 <_vfiprintf_r+0x218>)
 800b34c:	429c      	cmp	r4, r3
 800b34e:	bf08      	it	eq
 800b350:	68f4      	ldreq	r4, [r6, #12]
 800b352:	e79d      	b.n	800b290 <_vfiprintf_r+0x20>
 800b354:	4621      	mov	r1, r4
 800b356:	4630      	mov	r0, r6
 800b358:	f7fe fb94 	bl	8009a84 <__swsetup_r>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d09d      	beq.n	800b29c <_vfiprintf_r+0x2c>
 800b360:	f04f 30ff 	mov.w	r0, #4294967295
 800b364:	b01d      	add	sp, #116	; 0x74
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	46a8      	mov	r8, r5
 800b36c:	e7a2      	b.n	800b2b4 <_vfiprintf_r+0x44>
 800b36e:	4a44      	ldr	r2, [pc, #272]	; (800b480 <_vfiprintf_r+0x210>)
 800b370:	1a80      	subs	r0, r0, r2
 800b372:	fa0b f000 	lsl.w	r0, fp, r0
 800b376:	4318      	orrs	r0, r3
 800b378:	9004      	str	r0, [sp, #16]
 800b37a:	4645      	mov	r5, r8
 800b37c:	e7be      	b.n	800b2fc <_vfiprintf_r+0x8c>
 800b37e:	9a03      	ldr	r2, [sp, #12]
 800b380:	1d11      	adds	r1, r2, #4
 800b382:	6812      	ldr	r2, [r2, #0]
 800b384:	9103      	str	r1, [sp, #12]
 800b386:	2a00      	cmp	r2, #0
 800b388:	db01      	blt.n	800b38e <_vfiprintf_r+0x11e>
 800b38a:	9207      	str	r2, [sp, #28]
 800b38c:	e004      	b.n	800b398 <_vfiprintf_r+0x128>
 800b38e:	4252      	negs	r2, r2
 800b390:	f043 0302 	orr.w	r3, r3, #2
 800b394:	9207      	str	r2, [sp, #28]
 800b396:	9304      	str	r3, [sp, #16]
 800b398:	f898 3000 	ldrb.w	r3, [r8]
 800b39c:	2b2e      	cmp	r3, #46	; 0x2e
 800b39e:	d10e      	bne.n	800b3be <_vfiprintf_r+0x14e>
 800b3a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b3a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b3a6:	d138      	bne.n	800b41a <_vfiprintf_r+0x1aa>
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	1d1a      	adds	r2, r3, #4
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	9203      	str	r2, [sp, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bfb8      	it	lt
 800b3b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3b8:	f108 0802 	add.w	r8, r8, #2
 800b3bc:	9305      	str	r3, [sp, #20]
 800b3be:	4d33      	ldr	r5, [pc, #204]	; (800b48c <_vfiprintf_r+0x21c>)
 800b3c0:	f898 1000 	ldrb.w	r1, [r8]
 800b3c4:	2203      	movs	r2, #3
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f7f4 ff42 	bl	8000250 <memchr>
 800b3cc:	b140      	cbz	r0, 800b3e0 <_vfiprintf_r+0x170>
 800b3ce:	2340      	movs	r3, #64	; 0x40
 800b3d0:	1b40      	subs	r0, r0, r5
 800b3d2:	fa03 f000 	lsl.w	r0, r3, r0
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	4303      	orrs	r3, r0
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	9304      	str	r3, [sp, #16]
 800b3e0:	f898 1000 	ldrb.w	r1, [r8]
 800b3e4:	482a      	ldr	r0, [pc, #168]	; (800b490 <_vfiprintf_r+0x220>)
 800b3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ea:	2206      	movs	r2, #6
 800b3ec:	f108 0701 	add.w	r7, r8, #1
 800b3f0:	f7f4 ff2e 	bl	8000250 <memchr>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d037      	beq.n	800b468 <_vfiprintf_r+0x1f8>
 800b3f8:	4b26      	ldr	r3, [pc, #152]	; (800b494 <_vfiprintf_r+0x224>)
 800b3fa:	bb1b      	cbnz	r3, 800b444 <_vfiprintf_r+0x1d4>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	3307      	adds	r3, #7
 800b400:	f023 0307 	bic.w	r3, r3, #7
 800b404:	3308      	adds	r3, #8
 800b406:	9303      	str	r3, [sp, #12]
 800b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40a:	444b      	add	r3, r9
 800b40c:	9309      	str	r3, [sp, #36]	; 0x24
 800b40e:	e750      	b.n	800b2b2 <_vfiprintf_r+0x42>
 800b410:	fb05 3202 	mla	r2, r5, r2, r3
 800b414:	2001      	movs	r0, #1
 800b416:	4688      	mov	r8, r1
 800b418:	e78a      	b.n	800b330 <_vfiprintf_r+0xc0>
 800b41a:	2300      	movs	r3, #0
 800b41c:	f108 0801 	add.w	r8, r8, #1
 800b420:	9305      	str	r3, [sp, #20]
 800b422:	4619      	mov	r1, r3
 800b424:	250a      	movs	r5, #10
 800b426:	4640      	mov	r0, r8
 800b428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b42c:	3a30      	subs	r2, #48	; 0x30
 800b42e:	2a09      	cmp	r2, #9
 800b430:	d903      	bls.n	800b43a <_vfiprintf_r+0x1ca>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0c3      	beq.n	800b3be <_vfiprintf_r+0x14e>
 800b436:	9105      	str	r1, [sp, #20]
 800b438:	e7c1      	b.n	800b3be <_vfiprintf_r+0x14e>
 800b43a:	fb05 2101 	mla	r1, r5, r1, r2
 800b43e:	2301      	movs	r3, #1
 800b440:	4680      	mov	r8, r0
 800b442:	e7f0      	b.n	800b426 <_vfiprintf_r+0x1b6>
 800b444:	ab03      	add	r3, sp, #12
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	4622      	mov	r2, r4
 800b44a:	4b13      	ldr	r3, [pc, #76]	; (800b498 <_vfiprintf_r+0x228>)
 800b44c:	a904      	add	r1, sp, #16
 800b44e:	4630      	mov	r0, r6
 800b450:	f7fd fe96 	bl	8009180 <_printf_float>
 800b454:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b458:	4681      	mov	r9, r0
 800b45a:	d1d5      	bne.n	800b408 <_vfiprintf_r+0x198>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	065b      	lsls	r3, r3, #25
 800b460:	f53f af7e 	bmi.w	800b360 <_vfiprintf_r+0xf0>
 800b464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b466:	e77d      	b.n	800b364 <_vfiprintf_r+0xf4>
 800b468:	ab03      	add	r3, sp, #12
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	4622      	mov	r2, r4
 800b46e:	4b0a      	ldr	r3, [pc, #40]	; (800b498 <_vfiprintf_r+0x228>)
 800b470:	a904      	add	r1, sp, #16
 800b472:	4630      	mov	r0, r6
 800b474:	f7fe f926 	bl	80096c4 <_printf_i>
 800b478:	e7ec      	b.n	800b454 <_vfiprintf_r+0x1e4>
 800b47a:	bf00      	nop
 800b47c:	0800b940 	.word	0x0800b940
 800b480:	0800ba7c 	.word	0x0800ba7c
 800b484:	0800b960 	.word	0x0800b960
 800b488:	0800b920 	.word	0x0800b920
 800b48c:	0800ba82 	.word	0x0800ba82
 800b490:	0800ba86 	.word	0x0800ba86
 800b494:	08009181 	.word	0x08009181
 800b498:	0800b24b 	.word	0x0800b24b

0800b49c <_sbrk_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4c06      	ldr	r4, [pc, #24]	; (800b4b8 <_sbrk_r+0x1c>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	f7f9 f98e 	bl	80047c8 <_sbrk>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_sbrk_r+0x1a>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_sbrk_r+0x1a>
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	20047020 	.word	0x20047020

0800b4bc <__sread>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	460c      	mov	r4, r1
 800b4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c4:	f000 f8a8 	bl	800b618 <_read_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	bfab      	itete	ge
 800b4cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b4d0:	181b      	addge	r3, r3, r0
 800b4d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4d6:	bfac      	ite	ge
 800b4d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4da:	81a3      	strhlt	r3, [r4, #12]
 800b4dc:	bd10      	pop	{r4, pc}

0800b4de <__swrite>:
 800b4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e2:	461f      	mov	r7, r3
 800b4e4:	898b      	ldrh	r3, [r1, #12]
 800b4e6:	05db      	lsls	r3, r3, #23
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	4616      	mov	r6, r2
 800b4ee:	d505      	bpl.n	800b4fc <__swrite+0x1e>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f8:	f000 f868 	bl	800b5cc <_lseek_r>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	4632      	mov	r2, r6
 800b50a:	463b      	mov	r3, r7
 800b50c:	4628      	mov	r0, r5
 800b50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b512:	f000 b817 	b.w	800b544 <_write_r>

0800b516 <__sseek>:
 800b516:	b510      	push	{r4, lr}
 800b518:	460c      	mov	r4, r1
 800b51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51e:	f000 f855 	bl	800b5cc <_lseek_r>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	bf15      	itete	ne
 800b528:	6560      	strne	r0, [r4, #84]	; 0x54
 800b52a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b52e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b532:	81a3      	strheq	r3, [r4, #12]
 800b534:	bf18      	it	ne
 800b536:	81a3      	strhne	r3, [r4, #12]
 800b538:	bd10      	pop	{r4, pc}

0800b53a <__sclose>:
 800b53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53e:	f000 b813 	b.w	800b568 <_close_r>
	...

0800b544 <_write_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4c07      	ldr	r4, [pc, #28]	; (800b564 <_write_r+0x20>)
 800b548:	4605      	mov	r5, r0
 800b54a:	4608      	mov	r0, r1
 800b54c:	4611      	mov	r1, r2
 800b54e:	2200      	movs	r2, #0
 800b550:	6022      	str	r2, [r4, #0]
 800b552:	461a      	mov	r2, r3
 800b554:	f7f9 f8e7 	bl	8004726 <_write>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_write_r+0x1e>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_write_r+0x1e>
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	20047020 	.word	0x20047020

0800b568 <_close_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4c06      	ldr	r4, [pc, #24]	; (800b584 <_close_r+0x1c>)
 800b56c:	2300      	movs	r3, #0
 800b56e:	4605      	mov	r5, r0
 800b570:	4608      	mov	r0, r1
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	f7f9 f8f3 	bl	800475e <_close>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_close_r+0x1a>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_close_r+0x1a>
 800b580:	602b      	str	r3, [r5, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	20047020 	.word	0x20047020

0800b588 <_fstat_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4c07      	ldr	r4, [pc, #28]	; (800b5a8 <_fstat_r+0x20>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4605      	mov	r5, r0
 800b590:	4608      	mov	r0, r1
 800b592:	4611      	mov	r1, r2
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	f7f9 f8ee 	bl	8004776 <_fstat>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d102      	bne.n	800b5a4 <_fstat_r+0x1c>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	b103      	cbz	r3, 800b5a4 <_fstat_r+0x1c>
 800b5a2:	602b      	str	r3, [r5, #0]
 800b5a4:	bd38      	pop	{r3, r4, r5, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20047020 	.word	0x20047020

0800b5ac <_isatty_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4c06      	ldr	r4, [pc, #24]	; (800b5c8 <_isatty_r+0x1c>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	f7f9 f8ed 	bl	8004796 <_isatty>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_isatty_r+0x1a>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_isatty_r+0x1a>
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20047020 	.word	0x20047020

0800b5cc <_lseek_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4c07      	ldr	r4, [pc, #28]	; (800b5ec <_lseek_r+0x20>)
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	4608      	mov	r0, r1
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	6022      	str	r2, [r4, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f7f9 f8e6 	bl	80047ac <_lseek>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_lseek_r+0x1e>
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_lseek_r+0x1e>
 800b5e8:	602b      	str	r3, [r5, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20047020 	.word	0x20047020

0800b5f0 <__ascii_mbtowc>:
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	b901      	cbnz	r1, 800b5f6 <__ascii_mbtowc+0x6>
 800b5f4:	a901      	add	r1, sp, #4
 800b5f6:	b142      	cbz	r2, 800b60a <__ascii_mbtowc+0x1a>
 800b5f8:	b14b      	cbz	r3, 800b60e <__ascii_mbtowc+0x1e>
 800b5fa:	7813      	ldrb	r3, [r2, #0]
 800b5fc:	600b      	str	r3, [r1, #0]
 800b5fe:	7812      	ldrb	r2, [r2, #0]
 800b600:	1c10      	adds	r0, r2, #0
 800b602:	bf18      	it	ne
 800b604:	2001      	movne	r0, #1
 800b606:	b002      	add	sp, #8
 800b608:	4770      	bx	lr
 800b60a:	4610      	mov	r0, r2
 800b60c:	e7fb      	b.n	800b606 <__ascii_mbtowc+0x16>
 800b60e:	f06f 0001 	mvn.w	r0, #1
 800b612:	e7f8      	b.n	800b606 <__ascii_mbtowc+0x16>

0800b614 <__malloc_lock>:
 800b614:	4770      	bx	lr

0800b616 <__malloc_unlock>:
 800b616:	4770      	bx	lr

0800b618 <_read_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4c07      	ldr	r4, [pc, #28]	; (800b638 <_read_r+0x20>)
 800b61c:	4605      	mov	r5, r0
 800b61e:	4608      	mov	r0, r1
 800b620:	4611      	mov	r1, r2
 800b622:	2200      	movs	r2, #0
 800b624:	6022      	str	r2, [r4, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f7f9 f860 	bl	80046ec <_read>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_read_r+0x1e>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	b103      	cbz	r3, 800b636 <_read_r+0x1e>
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20047020 	.word	0x20047020

0800b63c <__ascii_wctomb>:
 800b63c:	b149      	cbz	r1, 800b652 <__ascii_wctomb+0x16>
 800b63e:	2aff      	cmp	r2, #255	; 0xff
 800b640:	bf85      	ittet	hi
 800b642:	238a      	movhi	r3, #138	; 0x8a
 800b644:	6003      	strhi	r3, [r0, #0]
 800b646:	700a      	strbls	r2, [r1, #0]
 800b648:	f04f 30ff 	movhi.w	r0, #4294967295
 800b64c:	bf98      	it	ls
 800b64e:	2001      	movls	r0, #1
 800b650:	4770      	bx	lr
 800b652:	4608      	mov	r0, r1
 800b654:	4770      	bx	lr
	...

0800b658 <_init>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	bf00      	nop
 800b65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65e:	bc08      	pop	{r3}
 800b660:	469e      	mov	lr, r3
 800b662:	4770      	bx	lr

0800b664 <_fini>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	bf00      	nop
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr
