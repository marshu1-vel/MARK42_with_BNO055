
1124_MARK42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800a0d8  0800a0d8  0001a0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c8  0800a3c8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c8  0800a3c8  0001a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d0  0800a3d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a3d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005fb9c  200001e8  0800a5c0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005fd84  0800a5c0  0002fd84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013db2  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269e  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029909  00000000  00000000  000387c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d26a  00000000  00000000  000620c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe98c  00000000  00000000  0006f333  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016dcbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e4  00000000  00000000  0016dd3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a0bc 	.word	0x0800a0bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800a0bc 	.word	0x0800a0bc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fe:	2201      	movs	r2, #1
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <__io_putchar+0x20>)
 8000602:	f006 fadf 	bl	8006bc4 <HAL_UART_Transmit>

  return ch;
 8000606:	687b      	ldr	r3, [r7, #4]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2005f7b4 	.word	0x2005f7b4
 8000614:	00000000 	.word	0x00000000

08000618 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	f041 86fd 	bne.w	8002426 <HAL_TIM_PeriodElapsedCallback+0x1e0e>
		// TIM2 task
    switch(mode){
 800062c:	4b65      	ldr	r3, [pc, #404]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d031      	beq.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000634:	2b02      	cmp	r3, #2
 8000636:	f001 86f5 	beq.w	8002424 <HAL_TIM_PeriodElapsedCallback+0x1e0c>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x2a>

        break;
    }

		}
}
 800063e:	f001 bef2 	b.w	8002426 <HAL_TIM_PeriodElapsedCallback+0x1e0e>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4860      	ldr	r0, [pc, #384]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000648:	f003 feac 	bl	80043a4 <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800064e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000652:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000654:	4b5e      	ldr	r3, [pc, #376]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000656:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800065a:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 800065c:	4b5d      	ldr	r3, [pc, #372]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800065e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000662:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000664:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000666:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800066a:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800066c:	4b57      	ldr	r3, [pc, #348]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	4b58      	ldr	r3, [pc, #352]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000680:	4b54      	ldr	r3, [pc, #336]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000682:	881a      	ldrh	r2, [r3, #0]
 8000684:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 800068a:	4b53      	ldr	r3, [pc, #332]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000694:	f001 bec7 	b.w	8002426 <HAL_TIM_PeriodElapsedCallback+0x1e0e>
        cnt1 = TIM1->CNT;
 8000698:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800069a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006a0:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006aa:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 80006ac:	4b51      	ldr	r3, [pc, #324]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006b4:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 80006b6:	4b51      	ldr	r3, [pc, #324]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b50      	ldr	r3, [pc, #320]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80006be:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 80006c0:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006d0:	dd09      	ble.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xce>
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006d4:	f993 3000 	ldrsb.w	r3, [r3]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b01      	subs	r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b25a      	sxtb	r2, r3
 80006e0:	4b49      	ldr	r3, [pc, #292]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e011      	b.n	800070a <HAL_TIM_PeriodElapsedCallback+0xf2>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006f6:	dd08      	ble.n	800070a <HAL_TIM_PeriodElapsedCallback+0xf2>
 80006f8:	4b43      	ldr	r3, [pc, #268]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006fa:	f993 3000 	ldrsb.w	r3, [r3]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000708:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b3e      	ldr	r3, [pc, #248]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800071a:	dd09      	ble.n	8000730 <HAL_TIM_PeriodElapsedCallback+0x118>
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800071e:	f993 3000 	ldrsb.w	r3, [r3]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	3b01      	subs	r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25a      	sxtb	r2, r3
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e011      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x13c>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000740:	dd08      	ble.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000744:	f993 3000 	ldrsb.w	r3, [r3]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	b25a      	sxtb	r2, r3
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000752:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000764:	dd09      	ble.n	800077a <HAL_TIM_PeriodElapsedCallback+0x162>
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000768:	f993 3000 	ldrsb.w	r3, [r3]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b25a      	sxtb	r2, r3
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e011      	b.n	800079e <HAL_TIM_PeriodElapsedCallback+0x186>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078a:	dd08      	ble.n	800079e <HAL_TIM_PeriodElapsedCallback+0x186>
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800078e:	f993 3000 	ldrsb.w	r3, [r3]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	3301      	adds	r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	b25a      	sxtb	r2, r3
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800079c:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007ae:	dd39      	ble.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x20c>
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007b2:	f993 3000 	ldrsb.w	r3, [r3]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e041      	b.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x230>
 80007c4:	2000020a 	.word	0x2000020a
 80007c8:	40020400 	.word	0x40020400
 80007cc:	200002c4 	.word	0x200002c4
 80007d0:	200002c6 	.word	0x200002c6
 80007d4:	200002c8 	.word	0x200002c8
 80007d8:	200002ca 	.word	0x200002ca
 80007dc:	2005fc38 	.word	0x2005fc38
 80007e0:	2005fcf8 	.word	0x2005fcf8
 80007e4:	40010000 	.word	0x40010000
 80007e8:	2000020c 	.word	0x2000020c
 80007ec:	40000400 	.word	0x40000400
 80007f0:	2000020e 	.word	0x2000020e
 80007f4:	40010400 	.word	0x40010400
 80007f8:	20000210 	.word	0x20000210
 80007fc:	40000800 	.word	0x40000800
 8000800:	20000212 	.word	0x20000212
 8000804:	20000214 	.word	0x20000214
 8000808:	2000021c 	.word	0x2000021c
 800080c:	20000216 	.word	0x20000216
 8000810:	2000021d 	.word	0x2000021d
 8000814:	20000218 	.word	0x20000218
 8000818:	2000021e 	.word	0x2000021e
 800081c:	2000021a 	.word	0x2000021a
 8000820:	2000021f 	.word	0x2000021f
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000824:	4be0      	ldr	r3, [pc, #896]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4be0      	ldr	r3, [pc, #896]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x594>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000834:	dd08      	ble.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000836:	4bde      	ldr	r3, [pc, #888]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000838:	f993 3000 	ldrsb.w	r3, [r3]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	3301      	adds	r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	b25a      	sxtb	r2, r3
 8000844:	4bda      	ldr	r3, [pc, #872]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000846:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000848:	4bda      	ldr	r3, [pc, #872]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4bda      	ldr	r3, [pc, #872]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	4bd9      	ldr	r3, [pc, #868]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000858:	f993 3000 	ldrsb.w	r3, [r3]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	4413      	add	r3, r2
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000868:	4bd5      	ldr	r3, [pc, #852]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000872:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800087a:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 800087e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000882:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000886:	ee37 6b07 	vadd.f64	d6, d7, d7
 800088a:	eddf 7ace 	vldr	s15, [pc, #824]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 800088e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000892:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	4bcb      	ldr	r3, [pc, #812]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800089c:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 80008a0:	4bca      	ldr	r3, [pc, #808]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4bc4      	ldr	r3, [pc, #784]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	1ad2      	subs	r2, r2, r3
 80008ae:	4bc8      	ldr	r3, [pc, #800]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80008b0:	f993 3000 	ldrsb.w	r3, [r3]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	4413      	add	r3, r2
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008c0:	4bbf      	ldr	r3, [pc, #764]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ca:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80008ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008d2:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 80008d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80008e2:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 80008e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f2:	4bb8      	ldr	r3, [pc, #736]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80008f4:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 80008f8:	4bb7      	ldr	r3, [pc, #732]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4bae      	ldr	r3, [pc, #696]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	1ad2      	subs	r2, r2, r3
 8000906:	4bb5      	ldr	r3, [pc, #724]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8000908:	f993 3000 	ldrsb.w	r3, [r3]
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	4413      	add	r3, r2
 8000910:	ee07 3a90 	vmov	s15, r3
 8000914:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000918:	4ba9      	ldr	r3, [pc, #676]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000922:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800092a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 800092e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000932:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000936:	ee37 6b07 	vadd.f64	d6, d7, d7
 800093a:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 800093e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000942:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000946:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094a:	4ba5      	ldr	r3, [pc, #660]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000950:	4b96      	ldr	r3, [pc, #600]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b98      	ldr	r3, [pc, #608]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	1ad2      	subs	r2, r2, r3
 800095e:	4b94      	ldr	r3, [pc, #592]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	4413      	add	r3, r2
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000970:	4b93      	ldr	r3, [pc, #588]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800097a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800097e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000982:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 8000986:	ee27 6b06 	vmul.f64	d6, d7, d6
 800098a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800098e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000992:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8000996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800099a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800099e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a2:	4b90      	ldr	r3, [pc, #576]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80009a4:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res_raw = ( theta1_res - theta1_res_pre )/dt;
 80009a8:	4b87      	ldr	r3, [pc, #540]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80009aa:	ed93 7a00 	vldr	s14, [r3]
 80009ae:	4b8e      	ldr	r3, [pc, #568]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009b8:	eddf 6a99 	vldr	s13, [pc, #612]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 80009bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c0:	4b8a      	ldr	r3, [pc, #552]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80009c2:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res_raw = ( theta2_res - theta2_res_pre )/dt;
 80009c6:	4b83      	ldr	r3, [pc, #524]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80009c8:	ed93 7a00 	vldr	s14, [r3]
 80009cc:	4b88      	ldr	r3, [pc, #544]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009d6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 80009da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009de:	4b85      	ldr	r3, [pc, #532]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80009e0:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res_raw = ( theta3_res - theta3_res_pre )/dt;
 80009e4:	4b7e      	ldr	r3, [pc, #504]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80009e6:	ed93 7a00 	vldr	s14, [r3]
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009f4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 80009f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fc:	4b7f      	ldr	r3, [pc, #508]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80009fe:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res_raw = ( theta4_res - theta4_res_pre )/dt;
 8000a02:	4b78      	ldr	r3, [pc, #480]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8000a04:	ed93 7a00 	vldr	s14, [r3]
 8000a08:	4b7d      	ldr	r3, [pc, #500]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a12:	eddf 6a83 	vldr	s13, [pc, #524]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1a:	4b7a      	ldr	r3, [pc, #488]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000a1c:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 8000a20:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a24:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a30:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a38:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000a3c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a40:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a44:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a54:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000a58:	4b6b      	ldr	r3, [pc, #428]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000a5a:	edd3 7a00 	vldr	s15, [r3]
 8000a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a62:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000a66:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000a68:	ed93 7a00 	vldr	s14, [r3]
 8000a6c:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a7a:	ed9f 4b49 	vldr	d4, [pc, #292]	; 8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000a7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000a82:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000a86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a8e:	4b5f      	ldr	r3, [pc, #380]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8000a90:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 8000a94:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a98:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000aa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000ab0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ab4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000ab8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ac8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000acc:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000ace:	edd3 7a00 	vldr	s15, [r3]
 8000ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000adc:	ed93 7a00 	vldr	s14, [r3]
 8000ae0:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000ae2:	edd3 7a00 	vldr	s15, [r3]
 8000ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aee:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000af2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000af6:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000afa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000afe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8000b04:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 8000b08:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000b0c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000b1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b20:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000b24:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b28:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000b2c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000b3c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8000b50:	ed93 7a00 	vldr	s14, [r3]
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b62:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000b66:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000b6a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000b6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8000b78:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 8000b7c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000b80:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000b90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b94:	e046      	b.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x60c>
 8000b96:	bf00      	nop
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	40500000 	.word	0x40500000
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	40440000 	.word	0x40440000
 8000ba8:	2000021a 	.word	0x2000021a
 8000bac:	20000212 	.word	0x20000212
 8000bb0:	2000021f 	.word	0x2000021f
 8000bb4:	2000020c 	.word	0x2000020c
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	2000021c 	.word	0x2000021c
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	40490fdb 	.word	0x40490fdb
 8000bc8:	20000224 	.word	0x20000224
 8000bcc:	2000020e 	.word	0x2000020e
 8000bd0:	2000021d 	.word	0x2000021d
 8000bd4:	20000228 	.word	0x20000228
 8000bd8:	20000210 	.word	0x20000210
 8000bdc:	2000021e 	.word	0x2000021e
 8000be0:	2000022c 	.word	0x2000022c
 8000be4:	20000230 	.word	0x20000230
 8000be8:	20000234 	.word	0x20000234
 8000bec:	20000264 	.word	0x20000264
 8000bf0:	20000238 	.word	0x20000238
 8000bf4:	20000268 	.word	0x20000268
 8000bf8:	2000023c 	.word	0x2000023c
 8000bfc:	2000026c 	.word	0x2000026c
 8000c00:	20000240 	.word	0x20000240
 8000c04:	20000270 	.word	0x20000270
 8000c08:	20000254 	.word	0x20000254
 8000c0c:	20000244 	.word	0x20000244
 8000c10:	20000258 	.word	0x20000258
 8000c14:	20000248 	.word	0x20000248
 8000c18:	2000025c 	.word	0x2000025c
 8000c1c:	2000024c 	.word	0x2000024c
 8000c20:	3a83126f 	.word	0x3a83126f
 8000c24:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000c28:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c2c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000c30:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c40:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c44:	4b72      	ldr	r3, [pc, #456]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000c52:	4b70      	ldr	r3, [pc, #448]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8000c54:	ed93 7a00 	vldr	s14, [r3]
 8000c58:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c66:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x7e8>
 8000c6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c7a:	4b68      	ldr	r3, [pc, #416]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 8000c80:	4b67      	ldr	r3, [pc, #412]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8000c82:	ed93 7a00 	vldr	s14, [r3]
 8000c86:	4b67      	ldr	r3, [pc, #412]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c90:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c9a:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000c9c:	edd3 7a00 	vldr	s15, [r3]
 8000ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000e2c <HAL_TIM_PeriodElapsedCallback+0x814>
 8000ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cac:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8000cae:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8000cb4:	ed93 7a00 	vldr	s14, [r3]
 8000cb8:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc2:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000cce:	edd3 7a00 	vldr	s15, [r3]
 8000cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000e2c <HAL_TIM_PeriodElapsedCallback+0x814>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8000ce0:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = (Rw / 4.0) / (W + L) * ( - dtheta1_res - dtheta2_res + dtheta3_res + dtheta4_res);// [rad/sec]
 8000ce4:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	eeb1 7a67 	vneg.f32	s14, s15
 8000cee:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf8:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d10:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000e08 <HAL_TIM_PeriodElapsedCallback+0x7f0>
 8000d14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8000d1e:	edc3 7a00 	vstr	s15, [r3]
        x_res   += vx_res   * dt;// [m]
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000e3c <HAL_TIM_PeriodElapsedCallback+0x824>
 8000d2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8000d32:	edd3 7a00 	vldr	s15, [r3]
 8000d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3a:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000e3c <HAL_TIM_PeriodElapsedCallback+0x824>
 8000d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8000d50:	edd3 7a00 	vldr	s15, [r3]
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8000d5a:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000e3c <HAL_TIM_PeriodElapsedCallback+0x824>
 8000d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d6e:	edd3 7a00 	vldr	s15, [r3]
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d78:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	2b10      	cmp	r3, #16
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8000d94:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8000dae:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b10      	cmp	r3, #16
 8000dbc:	bf0c      	ite	eq
 8000dbe:	2301      	moveq	r3, #1
 8000dc0:	2300      	movne	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8000dc8:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b10      	cmp	r3, #16
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	b25a      	sxtb	r2, r3
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000de2:	701a      	strb	r2, [r3, #0]
        if(t < 25.0){
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df6:	d53f      	bpl.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x860>
        vy_cmd = 0.3;// 0.4
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e051      	b.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x88c>
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40440000 	.word	0x40440000
 8000e08:	4c71c722 	.word	0x4c71c722
 8000e0c:	3fa55555 	.word	0x3fa55555
 8000e10:	20000260 	.word	0x20000260
 8000e14:	20000230 	.word	0x20000230
 8000e18:	20000240 	.word	0x20000240
 8000e1c:	20000250 	.word	0x20000250
 8000e20:	20000244 	.word	0x20000244
 8000e24:	20000248 	.word	0x20000248
 8000e28:	2000024c 	.word	0x2000024c
 8000e2c:	3c4ccccd 	.word	0x3c4ccccd
 8000e30:	200002d8 	.word	0x200002d8
 8000e34:	200002dc 	.word	0x200002dc
 8000e38:	200002e0 	.word	0x200002e0
 8000e3c:	3a83126f 	.word	0x3a83126f
 8000e40:	200002e4 	.word	0x200002e4
 8000e44:	200002e8 	.word	0x200002e8
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	2005fcb8 	.word	0x2005fcb8
 8000e50:	20000220 	.word	0x20000220
 8000e54:	2005fc78 	.word	0x2005fc78
 8000e58:	20000221 	.word	0x20000221
 8000e5c:	2005f734 	.word	0x2005f734
 8000e60:	20000222 	.word	0x20000222
 8000e64:	2005f774 	.word	0x2005f774
 8000e68:	20000223 	.word	0x20000223
 8000e6c:	20000204 	.word	0x20000204
 8000e70:	200002d0 	.word	0x200002d0
 8000e74:	3e99999a 	.word	0x3e99999a
        }else if(t >= 25.0){
 8000e78:	4bce      	ldr	r3, [pc, #824]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8a:	db0b      	blt.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x88c>
          vx_cmd = 0.0;
 8000e8c:	4bca      	ldr	r3, [pc, #808]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
          vy_cmd = 0.0;
 8000e94:	4bc9      	ldr	r3, [pc, #804]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
          dphi_cmd = 0.0;
 8000e9c:	4bc8      	ldr	r3, [pc, #800]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
        ddx_ref   = Kp_df_x   * (vx_cmd   -   vx_res);
 8000ea4:	4bc4      	ldr	r3, [pc, #784]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8000ea6:	ed93 7a00 	vldr	s14, [r3]
 8000eaa:	4bc6      	ldr	r3, [pc, #792]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb4:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80011c8 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 8000eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebc:	4bc3      	ldr	r3, [pc, #780]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8000ebe:	edc3 7a00 	vstr	s15, [r3]
        ddy_ref   = Kp_df_y   * (vy_cmd   -   vy_res);
 8000ec2:	4bbe      	ldr	r3, [pc, #760]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8000ec4:	ed93 7a00 	vldr	s14, [r3]
 8000ec8:	4bc1      	ldr	r3, [pc, #772]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 8000eca:	edd3 7a00 	vldr	s15, [r3]
 8000ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed2:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80011c8 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 8000ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eda:	4bbe      	ldr	r3, [pc, #760]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8000edc:	edc3 7a00 	vstr	s15, [r3]
        ddphi_ref = Kp_df_phi * (dphi_cmd - dphi_res);
 8000ee0:	4bb7      	ldr	r3, [pc, #732]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	4bbc      	ldr	r3, [pc, #752]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0xbc0>)
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef0:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80011dc <HAL_TIM_PeriodElapsedCallback+0xbc4>
 8000ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef8:	4bb9      	ldr	r3, [pc, #740]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0xbc8>)
 8000efa:	edc3 7a00 	vstr	s15, [r3]
        fx_ref = Mass * ddx_ref;
 8000efe:	4bb3      	ldr	r3, [pc, #716]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8000f00:	edd3 7a00 	vldr	s15, [r3]
 8000f04:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80011e4 <HAL_TIM_PeriodElapsedCallback+0xbcc>
 8000f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0c:	4bb6      	ldr	r3, [pc, #728]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
        fy_ref = Mass * ddy_ref;
 8000f12:	4bb0      	ldr	r3, [pc, #704]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80011e4 <HAL_TIM_PeriodElapsedCallback+0xbcc>
 8000f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f20:	4bb2      	ldr	r3, [pc, #712]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8000f22:	edc3 7a00 	vstr	s15, [r3]
        Mz_ref = Jz * ddphi_ref;
 8000f26:	4bae      	ldr	r3, [pc, #696]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0xbc8>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80011f0 <HAL_TIM_PeriodElapsedCallback+0xbd8>
 8000f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f34:	4baf      	ldr	r3, [pc, #700]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8000f36:	edc3 7a00 	vstr	s15, [r3]
        fd1_ref = 1.0 / 4.0 * (   fx_ref + fy_ref - ( L + W ) * Mz_ref );// Cancel Rw term
 8000f3a:	4bab      	ldr	r3, [pc, #684]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8000f3c:	ed93 7a00 	vldr	s14, [r3]
 8000f40:	4baa      	ldr	r3, [pc, #680]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f4a:	4baa      	ldr	r3, [pc, #680]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eddf 6aa9 	vldr	s13, [pc, #676]	; 80011f8 <HAL_TIM_PeriodElapsedCallback+0xbe0>
 8000f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	4ba5      	ldr	r3, [pc, #660]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8000f66:	edc3 7a00 	vstr	s15, [r3]
        fd2_ref = 1.0 / 4.0 * ( - fx_ref + fy_ref - ( L + W ) * Mz_ref );
 8000f6a:	4ba0      	ldr	r3, [pc, #640]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8000f6c:	ed93 7a00 	vldr	s14, [r3]
 8000f70:	4b9d      	ldr	r3, [pc, #628]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f7a:	4b9e      	ldr	r3, [pc, #632]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	eddf 6a9d 	vldr	s13, [pc, #628]	; 80011f8 <HAL_TIM_PeriodElapsedCallback+0xbe0>
 8000f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	4b9a      	ldr	r3, [pc, #616]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8000f96:	edc3 7a00 	vstr	s15, [r3]
        fd3_ref = 1.0 / 4.0 * (   fx_ref + fy_ref + ( L + W ) * Mz_ref );
 8000f9a:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	4b92      	ldr	r3, [pc, #584]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000faa:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	eddf 6a91 	vldr	s13, [pc, #580]	; 80011f8 <HAL_TIM_PeriodElapsedCallback+0xbe0>
 8000fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0xbec>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
        fd4_ref = 1.0 / 4.0 * ( - fx_ref + fy_ref + ( L + W ) * Mz_ref );
 8000fca:	4b88      	ldr	r3, [pc, #544]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	4b85      	ldr	r3, [pc, #532]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	4b86      	ldr	r3, [pc, #536]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eddf 6a85 	vldr	s13, [pc, #532]	; 80011f8 <HAL_TIM_PeriodElapsedCallback+0xbe0>
 8000fe4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff4:	4b84      	ldr	r3, [pc, #528]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral1 = Ki_df_integral1 + Ki_df * dt * ( fd1_ref - fd_hat1 );
 8000ffa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>
 8000ffe:	eddf 7a84 	vldr	s15, [pc, #528]	; 8001210 <HAL_TIM_PeriodElapsedCallback+0xbf8>
 8001002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001006:	4b7d      	ldr	r3, [pc, #500]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8001008:	edd3 6a00 	vldr	s13, [r3]
 800100c:	4b81      	ldr	r3, [pc, #516]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8001026:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral2 = Ki_df_integral2 + Ki_df * dt * ( fd2_ref - fd_hat2 );
 800102a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>
 800102e:	eddf 7a78 	vldr	s15, [pc, #480]	; 8001210 <HAL_TIM_PeriodElapsedCallback+0xbf8>
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	4b72      	ldr	r3, [pc, #456]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8001038:	edd3 6a00 	vldr	s13, [r3]
 800103c:	4b77      	ldr	r3, [pc, #476]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	4b75      	ldr	r3, [pc, #468]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	4b72      	ldr	r3, [pc, #456]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral3 = Ki_df_integral3 + Ki_df * dt * ( fd3_ref - fd_hat3 );
 800105a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>
 800105e:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001210 <HAL_TIM_PeriodElapsedCallback+0xbf8>
 8001062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0xbec>)
 8001068:	edd3 6a00 	vldr	s13, [r3]
 800106c:	4b6d      	ldr	r3, [pc, #436]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107a:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8001086:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral4 = Ki_df_integral4 + Ki_df * dt * ( fd4_ref - fd_hat4 );
 800108a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>
 800108e:	eddf 7a60 	vldr	s15, [pc, #384]	; 8001210 <HAL_TIM_PeriodElapsedCallback+0xbf8>
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8001098:	edd3 6a00 	vldr	s13, [r3]
 800109c:	4b63      	ldr	r3, [pc, #396]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	4b61      	ldr	r3, [pc, #388]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b4:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]
        vel1_ref_new = Ki_df_integral1;
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a5d      	ldr	r2, [pc, #372]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80010c0:	6013      	str	r3, [r2, #0]
        vel2_ref_new = Ki_df_integral2;
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80010c8:	6013      	str	r3, [r2, #0]
        vel3_ref_new = Ki_df_integral3;
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a5b      	ldr	r2, [pc, #364]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80010d0:	6013      	str	r3, [r2, #0]
        vel4_ref_new = Ki_df_integral4;
 80010d2:	4b57      	ldr	r3, [pc, #348]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a5a      	ldr	r2, [pc, #360]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80010d8:	6013      	str	r3, [r2, #0]
        dtheta1_cmd = vel1_ref_new / Rw;
 80010da:	4b56      	ldr	r3, [pc, #344]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80010dc:	ed93 7a00 	vldr	s14, [r3]
 80010e0:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 80010e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e8:	4b57      	ldr	r3, [pc, #348]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80010ea:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_cmd = vel2_ref_new / Rw;
 80010ee:	4b52      	ldr	r3, [pc, #328]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_cmd = vel3_ref_new / Rw;
 8001102:	4b4e      	ldr	r3, [pc, #312]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 800110c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_cmd = vel4_ref_new / Rw;
 8001116:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 8001120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_ref = Kp_av * (dtheta1_cmd - dtheta1_res);
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	4b46      	ldr	r3, [pc, #280]	; (800125c <HAL_TIM_PeriodElapsedCallback+0xc44>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_ref = Kp_av * (dtheta2_cmd - dtheta2_res);
 8001148:	4b40      	ldr	r3, [pc, #256]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref = Kp_av * (dtheta3_cmd - dtheta3_res);
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800117a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8001180:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_ref = Kp_av * (dtheta4_cmd - dtheta4_res);
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800119e:	edc3 7a00 	vstr	s15, [r3]
        i1_ref = (M11*ddtheta1_ref + M12*ddtheta2_ref + M13*ddtheta3_ref + M14*ddtheta4_ref)/( Gear * Ktn );
 80011a2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001278 <HAL_TIM_PeriodElapsedCallback+0xc60>
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b0:	e066      	b.n	8001280 <HAL_TIM_PeriodElapsedCallback+0xc68>
 80011b2:	bf00      	nop
 80011b4:	20000204 	.word	0x20000204
 80011b8:	200002cc 	.word	0x200002cc
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	200002d4 	.word	0x200002d4
 80011c4:	200002d8 	.word	0x200002d8
 80011c8:	42c80000 	.word	0x42c80000
 80011cc:	200002ec 	.word	0x200002ec
 80011d0:	200002dc 	.word	0x200002dc
 80011d4:	200002f0 	.word	0x200002f0
 80011d8:	200002e0 	.word	0x200002e0
 80011dc:	461c4000 	.word	0x461c4000
 80011e0:	200002f4 	.word	0x200002f4
 80011e4:	40b147ae 	.word	0x40b147ae
 80011e8:	200002f8 	.word	0x200002f8
 80011ec:	200002fc 	.word	0x200002fc
 80011f0:	3db645a2 	.word	0x3db645a2
 80011f4:	20000300 	.word	0x20000300
 80011f8:	3e99999a 	.word	0x3e99999a
 80011fc:	20000304 	.word	0x20000304
 8001200:	20000308 	.word	0x20000308
 8001204:	2000030c 	.word	0x2000030c
 8001208:	20000310 	.word	0x20000310
 800120c:	3a83126f 	.word	0x3a83126f
 8001210:	3c23d70a 	.word	0x3c23d70a
 8001214:	20000394 	.word	0x20000394
 8001218:	20000314 	.word	0x20000314
 800121c:	20000398 	.word	0x20000398
 8001220:	20000318 	.word	0x20000318
 8001224:	2000039c 	.word	0x2000039c
 8001228:	2000031c 	.word	0x2000031c
 800122c:	200003a0 	.word	0x200003a0
 8001230:	20000320 	.word	0x20000320
 8001234:	20000324 	.word	0x20000324
 8001238:	20000328 	.word	0x20000328
 800123c:	2000032c 	.word	0x2000032c
 8001240:	20000330 	.word	0x20000330
 8001244:	3d4ccccd 	.word	0x3d4ccccd
 8001248:	20000284 	.word	0x20000284
 800124c:	20000288 	.word	0x20000288
 8001250:	2000028c 	.word	0x2000028c
 8001254:	20000290 	.word	0x20000290
 8001258:	20000244 	.word	0x20000244
 800125c:	20000274 	.word	0x20000274
 8001260:	20000248 	.word	0x20000248
 8001264:	20000278 	.word	0x20000278
 8001268:	2000024c 	.word	0x2000024c
 800126c:	2000027c 	.word	0x2000027c
 8001270:	20000250 	.word	0x20000250
 8001274:	20000280 	.word	0x20000280
 8001278:	3b8a4bfc 	.word	0x3b8a4bfc
 800127c:	39220502 	.word	0x39220502
 8001280:	ed5f 6a02 	vldr	s13, [pc, #-8]	; 800127c <HAL_TIM_PeriodElapsedCallback+0xc64>
 8001284:	4bde      	ldr	r3, [pc, #888]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001292:	eddf 6adc 	vldr	s13, [pc, #880]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0xfec>
 8001296:	4bdc      	ldr	r3, [pc, #880]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a4:	eddf 6ad9 	vldr	s13, [pc, #868]	; 800160c <HAL_TIM_PeriodElapsedCallback+0xff4>
 80012a8:	4bd9      	ldr	r3, [pc, #868]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b6:	eddf 6ad7 	vldr	s13, [pc, #860]	; 8001614 <HAL_TIM_PeriodElapsedCallback+0xffc>
 80012ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012be:	4bd6      	ldr	r3, [pc, #856]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 80012c0:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = (M21*ddtheta1_ref + M22*ddtheta2_ref + M23*ddtheta3_ref + M24*ddtheta4_ref)/( Gear * Ktn );
 80012c4:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x1004>
 80012c8:	4bd5      	ldr	r3, [pc, #852]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x1008>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	eddf 6ad4 	vldr	s13, [pc, #848]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 80012d6:	4bca      	ldr	r3, [pc, #808]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	eddf 6ac9 	vldr	s13, [pc, #804]	; 800160c <HAL_TIM_PeriodElapsedCallback+0xff4>
 80012e8:	4bc7      	ldr	r3, [pc, #796]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f6:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0xfec>
 80012fa:	4bc5      	ldr	r3, [pc, #788]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001308:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8001614 <HAL_TIM_PeriodElapsedCallback+0xffc>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	4bc5      	ldr	r3, [pc, #788]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8001312:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = (M31*ddtheta1_ref + M32*ddtheta2_ref + M33*ddtheta3_ref + M34*ddtheta4_ref)/( Gear * Ktn );
 8001316:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0xfec>
 800131a:	4bc1      	ldr	r3, [pc, #772]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x1008>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001324:	eddf 6ab9 	vldr	s13, [pc, #740]	; 800160c <HAL_TIM_PeriodElapsedCallback+0xff4>
 8001328:	4bb5      	ldr	r3, [pc, #724]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001336:	eddf 6abb 	vldr	s13, [pc, #748]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 800133a:	4bb3      	ldr	r3, [pc, #716]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001348:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x1004>
 800134c:	4bb0      	ldr	r3, [pc, #704]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	eddf 6aae 	vldr	s13, [pc, #696]	; 8001614 <HAL_TIM_PeriodElapsedCallback+0xffc>
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	4bb2      	ldr	r3, [pc, #712]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = (M41*ddtheta1_ref + M42*ddtheta2_ref + M43*ddtheta3_ref + M44*ddtheta4_ref)/( Gear * Ktn );
 8001368:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800160c <HAL_TIM_PeriodElapsedCallback+0xff4>
 800136c:	4bac      	ldr	r3, [pc, #688]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x1008>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001376:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0xfec>
 800137a:	4ba1      	ldr	r3, [pc, #644]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001388:	eddf 6aa4 	vldr	s13, [pc, #656]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x1004>
 800138c:	4b9e      	ldr	r3, [pc, #632]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139a:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 800139e:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ac:	eddf 6a99 	vldr	s13, [pc, #612]	; 8001614 <HAL_TIM_PeriodElapsedCallback+0xffc>
 80013b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b4:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 80013b6:	edc3 7a00 	vstr	s15, [r3]
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 80013ba:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 80013be:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013d2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80013d6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80013da:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 80013de:	eddf 7a96 	vldr	s15, [pc, #600]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800163c <HAL_TIM_PeriodElapsedCallback+0x1024>
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>
 80013f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f6:	4b93      	ldr	r3, [pc, #588]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x102c>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	4b91      	ldr	r3, [pc, #580]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1030>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 800140e:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 8001412:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001416:	4b8d      	ldr	r3, [pc, #564]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x1034>)
 8001418:	ed93 5a00 	vldr	s10, [r3]
 800141c:	4b8c      	ldr	r3, [pc, #560]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001426:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800142a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001432:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001436:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800143a:	4b86      	ldr	r3, [pc, #536]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 8001440:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 8001444:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001450:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001454:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001458:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800145c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001460:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 8001464:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800163c <HAL_TIM_PeriodElapsedCallback+0x1024>
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>
 8001478:	ee27 7a87 	vmul.f32	s14, s15, s14
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x1040>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001486:	4b75      	ldr	r3, [pc, #468]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001490:	eddf 5a64 	vldr	s11, [pc, #400]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 8001494:	eddf 7a68 	vldr	s15, [pc, #416]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 8001498:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800149c:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 800149e:	ed93 5a00 	vldr	s10, [r3]
 80014a2:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x104c>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80014ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 80014c6:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 80014ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014de:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80014e2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014e6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 80014ea:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800163c <HAL_TIM_PeriodElapsedCallback+0x1024>
 80014f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fa:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>
 80014fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x1054>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x1058>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001516:	eddf 5a43 	vldr	s11, [pc, #268]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 800151a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 800151e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001522:	4b54      	ldr	r3, [pc, #336]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x105c>)
 8001524:	ed93 5a00 	vldr	s10, [r3]
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x1060>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001532:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001542:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8001548:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 800154c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 8001550:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800155c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001560:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001564:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001568:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800156c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>
 8001570:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 8001574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001578:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800163c <HAL_TIM_PeriodElapsedCallback+0x1024>
 800157c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001580:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>
 8001584:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001588:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x1068>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x106c>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159c:	eddf 5a21 	vldr	s11, [pc, #132]	; 8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>
 80015a0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>
 80015a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x1070>)
 80015aa:	ed93 5a00 	vldr	s10, [r3]
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x1074>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80015b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 80015ce:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1030>)
 80015d8:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1f      	ldr	r2, [pc, #124]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x1044>)
 80015e0:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x1058>)
 80015e8:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x106c>)
 80015f0:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x102c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 80015f8:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x1040>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	e04b      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001600:	20000278 	.word	0x20000278
 8001604:	3aceaa7d 	.word	0x3aceaa7d
 8001608:	2000027c 	.word	0x2000027c
 800160c:	b9220502 	.word	0xb9220502
 8001610:	20000280 	.word	0x20000280
 8001614:	3f5b8bac 	.word	0x3f5b8bac
 8001618:	20000294 	.word	0x20000294
 800161c:	39220502 	.word	0x39220502
 8001620:	20000274 	.word	0x20000274
 8001624:	3b8a4bfc 	.word	0x3b8a4bfc
 8001628:	20000298 	.word	0x20000298
 800162c:	2000029c 	.word	0x2000029c
 8001630:	200002a0 	.word	0x200002a0
 8001634:	3a83126f 	.word	0x3a83126f
 8001638:	42480000 	.word	0x42480000
 800163c:	42800000 	.word	0x42800000
 8001640:	3c5b8bac 	.word	0x3c5b8bac
 8001644:	200002a4 	.word	0x200002a4
 8001648:	20000344 	.word	0x20000344
 800164c:	20000244 	.word	0x20000244
 8001650:	20000254 	.word	0x20000254
 8001654:	20000334 	.word	0x20000334
 8001658:	200002a8 	.word	0x200002a8
 800165c:	20000348 	.word	0x20000348
 8001660:	20000248 	.word	0x20000248
 8001664:	20000258 	.word	0x20000258
 8001668:	20000338 	.word	0x20000338
 800166c:	200002ac 	.word	0x200002ac
 8001670:	2000034c 	.word	0x2000034c
 8001674:	2000024c 	.word	0x2000024c
 8001678:	2000025c 	.word	0x2000025c
 800167c:	2000033c 	.word	0x2000033c
 8001680:	200002b0 	.word	0x200002b0
 8001684:	20000350 	.word	0x20000350
 8001688:	20000250 	.word	0x20000250
 800168c:	20000260 	.word	0x20000260
 8001690:	20000340 	.word	0x20000340
 8001694:	200002b4 	.word	0x200002b4
 8001698:	4ad4      	ldr	r2, [pc, #848]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x13d4>)
 800169a:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 800169c:	4bd4      	ldr	r3, [pc, #848]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4ad4      	ldr	r2, [pc, #848]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 80016a2:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 80016a4:	4bd4      	ldr	r3, [pc, #848]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x13e0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4ad4      	ldr	r2, [pc, #848]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 80016aa:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 80016ac:	4bd4      	ldr	r3, [pc, #848]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x13e8>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	eddf 6ad4 	vldr	s13, [pc, #848]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 80016b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ba:	4bd3      	ldr	r3, [pc, #844]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x13f0>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 80016c0:	4bd2      	ldr	r3, [pc, #840]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x13f4>)
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	eddf 6acf 	vldr	s13, [pc, #828]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	4bd0      	ldr	r3, [pc, #832]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x13f8>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 80016d4:	4bcf      	ldr	r3, [pc, #828]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x13fc>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	eddf 6aca 	vldr	s13, [pc, #808]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 80016de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e2:	4bcd      	ldr	r3, [pc, #820]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x1400>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 80016e8:	4bcc      	ldr	r3, [pc, #816]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x1404>)
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 80016f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f6:	4bca      	ldr	r3, [pc, #808]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res;// * Continuous
 80016fc:	4bc9      	ldr	r3, [pc, #804]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 8001706:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800170a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800170e:	4bc7      	ldr	r3, [pc, #796]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	4bc4      	ldr	r3, [pc, #784]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x1418>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob2 = integral_tau_dfob2 - M22 * G_DFOB * dtheta2_res;// * Continuous
 8001722:	4bc4      	ldr	r3, [pc, #784]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 800172c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001730:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001734:	4bc0      	ldr	r3, [pc, #768]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001742:	4bbe      	ldr	r3, [pc, #760]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x1424>)
 8001744:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M33 * G_DFOB * dtheta3_res;// * Continuous
 8001748:	4bbd      	ldr	r3, [pc, #756]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 8001752:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001756:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800175a:	4bba      	ldr	r3, [pc, #744]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x142c>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	4bb7      	ldr	r3, [pc, #732]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x1430>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M44 * G_DFOB * dtheta4_res;// * Continuous
 800176e:	4bb7      	ldr	r3, [pc, #732]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1434>)
 8001770:	ed93 7a00 	vldr	s14, [r3]
 8001774:	eddf 6aac 	vldr	s13, [pc, #688]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 8001778:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800177c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001780:	4bb3      	ldr	r3, [pc, #716]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	4bb1      	ldr	r3, [pc, #708]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x143c>)
 8001790:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 8001794:	4bb0      	ldr	r3, [pc, #704]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1440>)
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x118c>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d037      	beq.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x11fa>
 80017a2:	e06d      	b.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x1268>
            integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - F1_plus  - D1_plus  * dtheta1_res - integral_tau_dfob1) * G_DFOB * dt;// * Continuous
 80017a4:	4bad      	ldr	r3, [pc, #692]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1444>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 80017ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b2:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 80017b6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80017ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017be:	4b9b      	ldr	r3, [pc, #620]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x1414>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0x1448>
 80017d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017d4:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0x144c>
 80017d8:	4b94      	ldr	r3, [pc, #592]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x1414>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017e6:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x1450>
 80017fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001800:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	4b86      	ldr	r3, [pc, #536]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 800180c:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001810:	e036      	b.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x1268>
            integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - F1_minus  - D1_minus  * dtheta1_res - integral_tau_dfob1) * G_DFOB * dt;// * Continuous
 8001812:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1444>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 800181c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001820:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 8001824:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182c:	4b7f      	ldr	r3, [pc, #508]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x1414>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0x1448>
 800183e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001842:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001a6c <HAL_TIM_PeriodElapsedCallback+0x1454>
 8001846:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001854:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001866:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x1450>
 800186a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800186e:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x140c>)
 800187a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800187e:	bf00      	nop
        switch(direc2){
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001882:	f993 3000 	ldrsb.w	r3, [r3]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x1278>
 800188a:	2b01      	cmp	r3, #1
 800188c:	d037      	beq.n	80018fe <HAL_TIM_PeriodElapsedCallback+0x12e6>
 800188e:	e06d      	b.n	800196c <HAL_TIM_PeriodElapsedCallback+0x1354>
            integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - F2_plus  - D2_plus  * dtheta2_res - integral_tau_dfob2) * G_DFOB * dt;// * Continuous
 8001890:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x145c>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 800189a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800189e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 80018a2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80018a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018aa:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0x1448>
 80018bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018c0:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001a78 <HAL_TIM_PeriodElapsedCallback+0x1460>
 80018c4:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d2:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x1450>
 80018e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ec:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f6:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
            break;
 80018fc:	e036      	b.n	800196c <HAL_TIM_PeriodElapsedCallback+0x1354>
            integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - F2_minus  - D2_minus  * dtheta2_res - integral_tau_dfob2) * G_DFOB * dt;// * Continuous
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x145c>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 8001908:	ee27 7a87 	vmul.f32	s14, s15, s14
 800190c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 8001910:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001914:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0x1448>
 800192a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800192e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001a7c <HAL_TIM_PeriodElapsedCallback+0x1464>
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001940:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x1450>
 8001956:	ee27 7a87 	vmul.f32	s14, s15, s14
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x141c>)
 8001966:	edc3 7a00 	vstr	s15, [r3]
            break;
 800196a:	bf00      	nop
        switch(direc3){
 800196c:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1468>)
 800196e:	f993 3000 	ldrsb.w	r3, [r3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_TIM_PeriodElapsedCallback+0x1366>
 8001976:	2b01      	cmp	r3, #1
 8001978:	f000 8086 	beq.w	8001a88 <HAL_TIM_PeriodElapsedCallback+0x1470>
 800197c:	e0bb      	b.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0x14de>
            integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - F3_plus  - D3_plus  * dtheta3_res - integral_tau_dfob3) * G_DFOB * dt;// * Continuous
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x13ec>
 8001988:	ee27 7a87 	vmul.f32	s14, s15, s14
 800198c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x1410>
 8001990:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001994:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x142c>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0x1448>
 80019aa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019ae:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001a84 <HAL_TIM_PeriodElapsedCallback+0x146c>
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x142c>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80019ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x1450>
 80019d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 80019e6:	edc3 7a00 	vstr	s15, [r3]
            break;
 80019ea:	e084      	b.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0x14de>
 80019ec:	200002b8 	.word	0x200002b8
 80019f0:	200002ac 	.word	0x200002ac
 80019f4:	200002bc 	.word	0x200002bc
 80019f8:	200002b0 	.word	0x200002b0
 80019fc:	200002c0 	.word	0x200002c0
 8001a00:	20000334 	.word	0x20000334
 8001a04:	3f5b8bac 	.word	0x3f5b8bac
 8001a08:	20000354 	.word	0x20000354
 8001a0c:	20000338 	.word	0x20000338
 8001a10:	20000358 	.word	0x20000358
 8001a14:	2000033c 	.word	0x2000033c
 8001a18:	2000035c 	.word	0x2000035c
 8001a1c:	20000340 	.word	0x20000340
 8001a20:	20000360 	.word	0x20000360
 8001a24:	20000384 	.word	0x20000384
 8001a28:	3b8a4bfc 	.word	0x3b8a4bfc
 8001a2c:	20000244 	.word	0x20000244
 8001a30:	20000364 	.word	0x20000364
 8001a34:	20000388 	.word	0x20000388
 8001a38:	20000248 	.word	0x20000248
 8001a3c:	20000368 	.word	0x20000368
 8001a40:	2000038c 	.word	0x2000038c
 8001a44:	2000024c 	.word	0x2000024c
 8001a48:	2000036c 	.word	0x2000036c
 8001a4c:	20000390 	.word	0x20000390
 8001a50:	20000250 	.word	0x20000250
 8001a54:	20000370 	.word	0x20000370
 8001a58:	20000220 	.word	0x20000220
 8001a5c:	200002a4 	.word	0x200002a4
 8001a60:	00000000 	.word	0x00000000
 8001a64:	39d1b717 	.word	0x39d1b717
 8001a68:	3a83126f 	.word	0x3a83126f
 8001a6c:	399d4952 	.word	0x399d4952
 8001a70:	20000221 	.word	0x20000221
 8001a74:	200002a8 	.word	0x200002a8
 8001a78:	ba1d4952 	.word	0xba1d4952
 8001a7c:	b99d4952 	.word	0xb99d4952
 8001a80:	20000222 	.word	0x20000222
 8001a84:	3b89a027 	.word	0x3b89a027
            integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - F3_minus  - D3_minus  * dtheta3_res - integral_tau_dfob3) * G_DFOB * dt;// * Continuous
 8001a88:	4bcd      	ldr	r3, [pc, #820]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x17a8>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8001dc4 <HAL_TIM_PeriodElapsedCallback+0x17ac>
 8001a92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a96:	eddf 6acc 	vldr	s13, [pc, #816]	; 8001dc8 <HAL_TIM_PeriodElapsedCallback+0x17b0>
 8001a9a:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001a9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa2:	4bca      	ldr	r3, [pc, #808]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x17b4>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001dd0 <HAL_TIM_PeriodElapsedCallback+0x17b8>
 8001ab4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ab8:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8001dd4 <HAL_TIM_PeriodElapsedCallback+0x17bc>
 8001abc:	4bc3      	ldr	r3, [pc, #780]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x17b4>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aca:	4bc3      	ldr	r3, [pc, #780]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x17c0>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001adc:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001ddc <HAL_TIM_PeriodElapsedCallback+0x17c4>
 8001ae0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ae4:	4bbc      	ldr	r3, [pc, #752]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x17c0>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aee:	4bba      	ldr	r3, [pc, #744]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x17c0>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001af4:	bf00      	nop
        switch(direc4){
 8001af6:	4bba      	ldr	r3, [pc, #744]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x17c8>)
 8001af8:	f993 3000 	ldrsb.w	r3, [r3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0x14ee>
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d037      	beq.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x155c>
 8001b04:	e06d      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x15ca>
            integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - F4_plus  - D4_plus  * dtheta4_res - integral_tau_dfob4) * G_DFOB * dt;// * Continuous
 8001b06:	4bb7      	ldr	r3, [pc, #732]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x17cc>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001dc4 <HAL_TIM_PeriodElapsedCallback+0x17ac>
 8001b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b14:	eddf 6aac 	vldr	s13, [pc, #688]	; 8001dc8 <HAL_TIM_PeriodElapsedCallback+0x17b0>
 8001b18:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001b1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b20:	4bb1      	ldr	r3, [pc, #708]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x17d0>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001dd0 <HAL_TIM_PeriodElapsedCallback+0x17b8>
 8001b32:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b36:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001dec <HAL_TIM_PeriodElapsedCallback+0x17d4>
 8001b3a:	4bab      	ldr	r3, [pc, #684]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x17d0>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b48:	4ba9      	ldr	r3, [pc, #676]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x17d8>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001ddc <HAL_TIM_PeriodElapsedCallback+0x17c4>
 8001b5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b62:	4ba3      	ldr	r3, [pc, #652]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x17d8>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6c:	4ba0      	ldr	r3, [pc, #640]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x17d8>)
 8001b6e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001b72:	e036      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x15ca>
            integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - F4_minus  - D4_minus  * dtheta4_res - integral_tau_dfob4) * G_DFOB * dt;// * Continuous
 8001b74:	4b9b      	ldr	r3, [pc, #620]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x17cc>)
 8001b76:	edd3 7a00 	vldr	s15, [r3]
 8001b7a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001dc4 <HAL_TIM_PeriodElapsedCallback+0x17ac>
 8001b7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b82:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001dc8 <HAL_TIM_PeriodElapsedCallback+0x17b0>
 8001b86:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001b8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b8e:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x17d0>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001dd0 <HAL_TIM_PeriodElapsedCallback+0x17b8>
 8001ba0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ba4:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001df4 <HAL_TIM_PeriodElapsedCallback+0x17dc>
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x17d0>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb6:	4b8e      	ldr	r3, [pc, #568]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x17d8>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001ddc <HAL_TIM_PeriodElapsedCallback+0x17c4>
 8001bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd0:	4b87      	ldr	r3, [pc, #540]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x17d8>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x17d8>)
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001be0:	bf00      	nop
          tau_dfob1_pre = tau_dfob1;
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x17e0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a85      	ldr	r2, [pc, #532]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x17e4>)
 8001be8:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x17e8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a85      	ldr	r2, [pc, #532]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x17ec>)
 8001bf0:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 8001bf2:	4b85      	ldr	r3, [pc, #532]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x17f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a85      	ldr	r2, [pc, #532]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x17f4>)
 8001bf8:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 8001bfa:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x17f8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a85      	ldr	r2, [pc, #532]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x17fc>)
 8001c00:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw;// [N] Element of fd's wheel rotation direction
 8001c02:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x17e0>)
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001e18 <HAL_TIM_PeriodElapsedCallback+0x1800>
 8001c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c10:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1804>)
 8001c12:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw;
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x17e8>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001e18 <HAL_TIM_PeriodElapsedCallback+0x1800>
 8001c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1808>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw;
 8001c2a:	4b77      	ldr	r3, [pc, #476]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x17f0>)
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001e18 <HAL_TIM_PeriodElapsedCallback+0x1800>
 8001c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c38:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x180c>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw;
 8001c3e:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x17f8>)
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001e18 <HAL_TIM_PeriodElapsedCallback+0x1800>
 8001c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4c:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x1810>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]
        fx_hat = 1.0 / Rw             * (   tau_dfob1 - tau_dfob2 + tau_dfob3 - tau_dfob4 );
 8001c52:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x17e0>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x17e8>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x17f0>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x17f8>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c7a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001db0 <HAL_TIM_PeriodElapsedCallback+0x1798>
 8001c7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c86:	4b69      	ldr	r3, [pc, #420]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x1814>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
        fy_hat = 1.0 / Rw             * (   tau_dfob1 + tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x17e0>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x17e8>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x17f0>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x17f8>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001db0 <HAL_TIM_PeriodElapsedCallback+0x1798>
 8001cb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc0:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x1818>)
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
        Mz_hat = 1.0 / Rw * ( L + W ) * ( - tau_dfob1 - tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x17e0>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb1 7a67 	vneg.f32	s14, s15
 8001cd0:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x17e8>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cda:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x17f0>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x17f8>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8001db8 <HAL_TIM_PeriodElapsedCallback+0x17a0>
 8001cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cfe:	4b4d      	ldr	r3, [pc, #308]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x181c>)
 8001d00:	edc3 7a00 	vstr	s15, [r3]
        ia1_ref = i1_ref + i1_comp;
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x1820>)
 8001d06:	ed93 7a00 	vldr	s14, [r3]
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x1824>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1828>)
 8001d16:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x182c>)
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x1830>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1834>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x1838>)
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x183c>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x17a8>)
 8001d42:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x1844>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x17cc>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1828>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001e60 <HAL_TIM_PeriodElapsedCallback+0x1848>
 8001d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	dd03      	ble.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x1760>
 8001d70:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1828>)
 8001d72:	4a3c      	ldr	r2, [pc, #240]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x184c>)
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e00c      	b.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x177a>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1828>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001e68 <HAL_TIM_PeriodElapsedCallback+0x1850>
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	d502      	bpl.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x177a>
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1828>)
 8001d8e:	4a37      	ldr	r2, [pc, #220]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1854>)
 8001d90:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1834>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001e60 <HAL_TIM_PeriodElapsedCallback+0x1848>
 8001d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	dd64      	ble.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x1858>
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1834>)
 8001da8:	4a2e      	ldr	r2, [pc, #184]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x184c>)
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e06d      	b.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x1872>
 8001dae:	bf00      	nop
 8001db0:	fb000001 	.word	0xfb000001
 8001db4:	4033ffff 	.word	0x4033ffff
 8001db8:	09fffffd 	.word	0x09fffffd
 8001dbc:	40180000 	.word	0x40180000
 8001dc0:	200002ac 	.word	0x200002ac
 8001dc4:	3f5b8bac 	.word	0x3f5b8bac
 8001dc8:	3b8a4bfc 	.word	0x3b8a4bfc
 8001dcc:	2000024c 	.word	0x2000024c
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	3b30f27c 	.word	0x3b30f27c
 8001dd8:	2000038c 	.word	0x2000038c
 8001ddc:	3a83126f 	.word	0x3a83126f
 8001de0:	20000223 	.word	0x20000223
 8001de4:	200002b0 	.word	0x200002b0
 8001de8:	20000250 	.word	0x20000250
 8001dec:	ba03126f 	.word	0xba03126f
 8001df0:	20000390 	.word	0x20000390
 8001df4:	b68637bd 	.word	0xb68637bd
 8001df8:	20000364 	.word	0x20000364
 8001dfc:	20000374 	.word	0x20000374
 8001e00:	20000368 	.word	0x20000368
 8001e04:	20000378 	.word	0x20000378
 8001e08:	2000036c 	.word	0x2000036c
 8001e0c:	2000037c 	.word	0x2000037c
 8001e10:	20000370 	.word	0x20000370
 8001e14:	20000380 	.word	0x20000380
 8001e18:	3d4ccccd 	.word	0x3d4ccccd
 8001e1c:	20000394 	.word	0x20000394
 8001e20:	20000398 	.word	0x20000398
 8001e24:	2000039c 	.word	0x2000039c
 8001e28:	200003a0 	.word	0x200003a0
 8001e2c:	200003a4 	.word	0x200003a4
 8001e30:	200003a8 	.word	0x200003a8
 8001e34:	200003ac 	.word	0x200003ac
 8001e38:	20000294 	.word	0x20000294
 8001e3c:	20000354 	.word	0x20000354
 8001e40:	200002a4 	.word	0x200002a4
 8001e44:	20000298 	.word	0x20000298
 8001e48:	20000358 	.word	0x20000358
 8001e4c:	200002a8 	.word	0x200002a8
 8001e50:	2000029c 	.word	0x2000029c
 8001e54:	2000035c 	.word	0x2000035c
 8001e58:	200002a0 	.word	0x200002a0
 8001e5c:	20000360 	.word	0x20000360
 8001e60:	3fb33333 	.word	0x3fb33333
 8001e64:	3fb33333 	.word	0x3fb33333
 8001e68:	bfb33333 	.word	0xbfb33333
 8001e6c:	bfb33333 	.word	0xbfb33333
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x18c4>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ee0 <HAL_TIM_PeriodElapsedCallback+0x18c8>
 8001e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d502      	bpl.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x1872>
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x18c4>)
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 8001e88:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001eec <HAL_TIM_PeriodElapsedCallback+0x18d4>
 8001e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	dd03      	ble.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0x188e>
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e00c      	b.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x18a8>
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001ee0 <HAL_TIM_PeriodElapsedCallback+0x18c8>
 8001eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb8:	d502      	bpl.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x18a8>
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 8001ebc:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 8001ebe:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001eec <HAL_TIM_PeriodElapsedCallback+0x18d4>
 8001eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	dd11      	ble.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x18e0>
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 8001ed6:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e01a      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x18fa>
 8001edc:	200002a8 	.word	0x200002a8
 8001ee0:	bfb33333 	.word	0xbfb33333
 8001ee4:	bfb33333 	.word	0xbfb33333
 8001ee8:	200002ac 	.word	0x200002ac
 8001eec:	3fb33333 	.word	0x3fb33333
 8001ef0:	3fb33333 	.word	0x3fb33333
 8001ef4:	200002b0 	.word	0x200002b0
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 8001ef8:	4b9d      	ldr	r3, [pc, #628]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002174 <HAL_TIM_PeriodElapsedCallback+0x1b5c>
 8001f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	d502      	bpl.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x18fa>
 8001f0c:	4b98      	ldr	r3, [pc, #608]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 8001f0e:	4a9a      	ldr	r2, [pc, #616]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x1b60>)
 8001f10:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8001f12:	4b9a      	ldr	r3, [pc, #616]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f1c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002160 <HAL_TIM_PeriodElapsedCallback+0x1b48>
 8001f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f24:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002168 <HAL_TIM_PeriodElapsedCallback+0x1b50>
 8001f28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f30:	ee17 3a90 	vmov	r3, s15
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x1b68>)
 8001f38:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 8001f3a:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x1b6c>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f44:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8002160 <HAL_TIM_PeriodElapsedCallback+0x1b48>
 8001f48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f4c:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8002168 <HAL_TIM_PeriodElapsedCallback+0x1b50>
 8001f50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f58:	ee17 3a90 	vmov	r3, s15
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b8a      	ldr	r3, [pc, #552]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x1b70>)
 8001f60:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8001f62:	4b8a      	ldr	r3, [pc, #552]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1b74>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f6c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002160 <HAL_TIM_PeriodElapsedCallback+0x1b48>
 8001f70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f74:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002168 <HAL_TIM_PeriodElapsedCallback+0x1b50>
 8001f78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f80:	ee17 3a90 	vmov	r3, s15
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b82      	ldr	r3, [pc, #520]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1b78>)
 8001f88:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 8001f8a:	4b79      	ldr	r3, [pc, #484]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f94:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002160 <HAL_TIM_PeriodElapsedCallback+0x1b48>
 8001f98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f9c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002168 <HAL_TIM_PeriodElapsedCallback+0x1b50>
 8001fa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b79      	ldr	r3, [pc, #484]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1b7c>)
 8001fb0:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x1b68>)
 8001fb4:	881a      	ldrh	r2, [r3, #0]
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1b80>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8001fbc:	4b72      	ldr	r3, [pc, #456]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x1b70>)
 8001fbe:	881a      	ldrh	r2, [r3, #0]
 8001fc0:	4b75      	ldr	r3, [pc, #468]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1b80>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8001fc6:	4b72      	ldr	r3, [pc, #456]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1b78>)
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1b84>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8001fd0:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1b7c>)
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	4b71      	ldr	r3, [pc, #452]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1b84>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 8001fda:	4b71      	ldr	r3, [pc, #452]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1b88>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a71      	ldr	r2, [pc, #452]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1b8c>)
 8001fe0:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 8001fe2:	4b71      	ldr	r3, [pc, #452]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1b90>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a71      	ldr	r2, [pc, #452]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1b94>)
 8001fe8:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1b98>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x1b9c>)
 8001ff0:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 8001ff2:	4b71      	ldr	r3, [pc, #452]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x1ba4>)
 8001ff8:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 8001ffa:	4b71      	ldr	r3, [pc, #452]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x1ba8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a71      	ldr	r2, [pc, #452]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x1bac>)
 8002000:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 8002002:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x1bb0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x1bb4>)
 8002008:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 800200a:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x1bb8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a71      	ldr	r2, [pc, #452]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x1bbc>)
 8002010:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 8002012:	4b71      	ldr	r3, [pc, #452]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x1bc0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a71      	ldr	r2, [pc, #452]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x1bc4>)
 8002018:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 800201a:	4b71      	ldr	r3, [pc, #452]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x1bc8>)
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	4b71      	ldr	r3, [pc, #452]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1bcc>)
 8002020:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 8002022:	4b71      	ldr	r3, [pc, #452]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	4b71      	ldr	r3, [pc, #452]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x1bd4>)
 8002028:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 800202a:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x1bd8>)
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x1bdc>)
 8002030:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 8002032:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x1be0>)
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x1be4>)
 8002038:	801a      	strh	r2, [r3, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 800203a:	4b71      	ldr	r3, [pc, #452]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1be8>)
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	4b71      	ldr	r3, [pc, #452]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x1bec>)
 8002040:	fba3 1302 	umull	r1, r3, r3, r2
 8002044:	08d9      	lsrs	r1, r3, #3
 8002046:	460b      	mov	r3, r1
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 81d5 	bne.w	8002402 <HAL_TIM_PeriodElapsedCallback+0x1dea>
 8002058:	4b6b      	ldr	r3, [pc, #428]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002060:	4293      	cmp	r3, r2
 8002062:	f300 81ce 	bgt.w	8002402 <HAL_TIM_PeriodElapsedCallback+0x1dea>
          t_SRAM[i_save] = t;
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a68      	ldr	r2, [pc, #416]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x1bf4>)
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4968      	ldr	r1, [pc, #416]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x1bf8>)
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x1ba8>)
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	4965      	ldr	r1, [pc, #404]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x1bfc>)
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x1bb0>)
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4962      	ldr	r1, [pc, #392]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x1bb8>)
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	495f      	ldr	r1, [pc, #380]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x1c04>)
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x1bc0>)
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	495c      	ldr	r1, [pc, #368]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x1c08>)
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	601a      	str	r2, [r3, #0]
          theta1_res_SRAM[i_save] = theta1_res;
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1b88>)
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4959      	ldr	r1, [pc, #356]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x1c0c>)
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 80020c6:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a37      	ldr	r2, [pc, #220]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1b90>)
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	4956      	ldr	r1, [pc, #344]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 80020d6:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1b98>)
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4953      	ldr	r1, [pc, #332]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a33      	ldr	r2, [pc, #204]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4950      	ldr	r1, [pc, #320]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	601a      	str	r2, [r3, #0]
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x1c1c>)
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	494e      	ldr	r1, [pc, #312]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	494c      	ldr	r1, [pc, #304]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c28>)
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a4a      	ldr	r2, [pc, #296]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1c2c>)
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	494a      	ldr	r1, [pc, #296]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c30>)
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a48      	ldr	r2, [pc, #288]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1c34>)
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4948      	ldr	r1, [pc, #288]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1c38>)
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	601a      	str	r2, [r3, #0]
          i1_ref_SRAM[i_save] = i1_ref;
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a46      	ldr	r2, [pc, #280]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1c3c>)
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	4946      	ldr	r1, [pc, #280]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1c40>)
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	601a      	str	r2, [r3, #0]
          i2_ref_SRAM[i_save] = i2_ref;
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a44      	ldr	r2, [pc, #272]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1c44>)
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4944      	ldr	r1, [pc, #272]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	601a      	str	r2, [r3, #0]
          i3_ref_SRAM[i_save] = i3_ref;
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a42      	ldr	r2, [pc, #264]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1c4c>)
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	e083      	b.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x1c50>
 8002160:	bbf58d11 	.word	0xbbf58d11
 8002164:	4091db6d 	.word	0x4091db6d
 8002168:	00000000 	.word	0x00000000
 800216c:	409f4000 	.word	0x409f4000
 8002170:	200002b0 	.word	0x200002b0
 8002174:	bfb33333 	.word	0xbfb33333
 8002178:	bfb33333 	.word	0xbfb33333
 800217c:	200002a4 	.word	0x200002a4
 8002180:	200002c4 	.word	0x200002c4
 8002184:	200002a8 	.word	0x200002a8
 8002188:	200002c6 	.word	0x200002c6
 800218c:	200002ac 	.word	0x200002ac
 8002190:	200002c8 	.word	0x200002c8
 8002194:	200002ca 	.word	0x200002ca
 8002198:	2005fc38 	.word	0x2005fc38
 800219c:	2005fcf8 	.word	0x2005fcf8
 80021a0:	20000224 	.word	0x20000224
 80021a4:	20000234 	.word	0x20000234
 80021a8:	20000228 	.word	0x20000228
 80021ac:	20000238 	.word	0x20000238
 80021b0:	2000022c 	.word	0x2000022c
 80021b4:	2000023c 	.word	0x2000023c
 80021b8:	20000230 	.word	0x20000230
 80021bc:	20000240 	.word	0x20000240
 80021c0:	20000244 	.word	0x20000244
 80021c4:	20000254 	.word	0x20000254
 80021c8:	20000248 	.word	0x20000248
 80021cc:	20000258 	.word	0x20000258
 80021d0:	2000024c 	.word	0x2000024c
 80021d4:	2000025c 	.word	0x2000025c
 80021d8:	20000250 	.word	0x20000250
 80021dc:	20000260 	.word	0x20000260
 80021e0:	2000020c 	.word	0x2000020c
 80021e4:	20000214 	.word	0x20000214
 80021e8:	2000020e 	.word	0x2000020e
 80021ec:	20000216 	.word	0x20000216
 80021f0:	20000210 	.word	0x20000210
 80021f4:	20000218 	.word	0x20000218
 80021f8:	20000212 	.word	0x20000212
 80021fc:	2000021a 	.word	0x2000021a
 8002200:	20000208 	.word	0x20000208
 8002204:	cccccccd 	.word	0xcccccccd
 8002208:	200003b0 	.word	0x200003b0
 800220c:	20000204 	.word	0x20000204
 8002210:	200003b8 	.word	0x200003b8
 8002214:	20002ac8 	.word	0x20002ac8
 8002218:	200051d8 	.word	0x200051d8
 800221c:	200078e8 	.word	0x200078e8
 8002220:	20009ff8 	.word	0x20009ff8
 8002224:	2000c708 	.word	0x2000c708
 8002228:	2000ee18 	.word	0x2000ee18
 800222c:	20011528 	.word	0x20011528
 8002230:	20013c38 	.word	0x20013c38
 8002234:	20000274 	.word	0x20000274
 8002238:	20016348 	.word	0x20016348
 800223c:	20000278 	.word	0x20000278
 8002240:	20018a58 	.word	0x20018a58
 8002244:	2000027c 	.word	0x2000027c
 8002248:	2001b168 	.word	0x2001b168
 800224c:	20000280 	.word	0x20000280
 8002250:	2001d878 	.word	0x2001d878
 8002254:	20000294 	.word	0x20000294
 8002258:	2001ff88 	.word	0x2001ff88
 800225c:	20000298 	.word	0x20000298
 8002260:	20022698 	.word	0x20022698
 8002264:	2000029c 	.word	0x2000029c
 8002268:	4971      	ldr	r1, [pc, #452]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x1e18>)
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	601a      	str	r2, [r3, #0]
          i4_ref_SRAM[i_save] = i4_ref;
 8002270:	4b70      	ldr	r3, [pc, #448]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a70      	ldr	r2, [pc, #448]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x1e20>)
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	4970      	ldr	r1, [pc, #448]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x1e24>)
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 8002280:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1e28>)
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	496e      	ldr	r1, [pc, #440]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x1e2c>)
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1e30>)
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	496c      	ldr	r1, [pc, #432]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x1e34>)
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 80022a0:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1e38>)
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	496a      	ldr	r1, [pc, #424]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1e3c>)
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 80022b0:	4b60      	ldr	r3, [pc, #384]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a68      	ldr	r2, [pc, #416]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1e40>)
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4968      	ldr	r1, [pc, #416]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 80022c0:	4b5c      	ldr	r3, [pc, #368]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1e48>)
 80022c6:	8811      	ldrh	r1, [r2, #0]
 80022c8:	4a66      	ldr	r2, [pc, #408]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1e4c>)
 80022ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 80022ce:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1e50>)
 80022d4:	8811      	ldrh	r1, [r2, #0]
 80022d6:	4a65      	ldr	r2, [pc, #404]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1e54>)
 80022d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 80022dc:	4b55      	ldr	r3, [pc, #340]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a63      	ldr	r2, [pc, #396]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x1e58>)
 80022e2:	8811      	ldrh	r1, [r2, #0]
 80022e4:	4a63      	ldr	r2, [pc, #396]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 80022e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 80022ea:	4b52      	ldr	r3, [pc, #328]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a62      	ldr	r2, [pc, #392]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x1e60>)
 80022f0:	8811      	ldrh	r1, [r2, #0]
 80022f2:	4a62      	ldr	r2, [pc, #392]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x1e64>)
 80022f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          fd1_ref_SRAM[i_save] = fd1_ref;
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a60      	ldr	r2, [pc, #384]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x1e68>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4960      	ldr	r1, [pc, #384]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x1e6c>)
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	601a      	str	r2, [r3, #0]
          fd2_ref_SRAM[i_save] = fd2_ref;
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5e      	ldr	r2, [pc, #376]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x1e70>)
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	495e      	ldr	r1, [pc, #376]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x1e74>)
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	601a      	str	r2, [r3, #0]
          fd3_ref_SRAM[i_save] = fd3_ref;
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x1e78>)
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	495c      	ldr	r1, [pc, #368]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x1e7c>)
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	601a      	str	r2, [r3, #0]
          fd4_ref_SRAM[i_save] = fd4_ref;
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x1e80>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	495a      	ldr	r1, [pc, #360]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x1e84>)
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	601a      	str	r2, [r3, #0]
          Ki_df_integral1_SRAM[i_save] = Ki_df_integral1;
 8002338:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x1e88>)
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4958      	ldr	r1, [pc, #352]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x1e8c>)
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	601a      	str	r2, [r3, #0]
          Ki_df_integral2_SRAM[i_save] = Ki_df_integral2;
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a56      	ldr	r2, [pc, #344]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x1e90>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4956      	ldr	r1, [pc, #344]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x1e94>)
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	601a      	str	r2, [r3, #0]
          Ki_df_integral3_SRAM[i_save] = Ki_df_integral3;
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x1e98>)
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	4954      	ldr	r1, [pc, #336]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x1e9c>)
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	601a      	str	r2, [r3, #0]
          Ki_df_integral4_SRAM[i_save] = Ki_df_integral4;
 8002368:	4b32      	ldr	r3, [pc, #200]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x1ea0>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4952      	ldr	r1, [pc, #328]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x1ea4>)
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a50      	ldr	r2, [pc, #320]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x1ea8>)
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	4950      	ldr	r1, [pc, #320]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x1eac>)
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a4e      	ldr	r2, [pc, #312]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x1eb0>)
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	494e      	ldr	r1, [pc, #312]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x1eb4>)
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 8002398:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a4c      	ldr	r2, [pc, #304]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x1eb8>)
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	494c      	ldr	r1, [pc, #304]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x1ebc>)
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a4a      	ldr	r2, [pc, #296]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x1ec0>)
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	494a      	ldr	r1, [pc, #296]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x1ec4>)
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a48      	ldr	r2, [pc, #288]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x1ec8>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4948      	ldr	r1, [pc, #288]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x1ecc>)
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a46      	ldr	r2, [pc, #280]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x1ed0>)
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4946      	ldr	r1, [pc, #280]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x1ed4>)
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	601a      	str	r2, [r3, #0]
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x1ed8>)
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4944      	ldr	r1, [pc, #272]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x1edc>)
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x1ee0>)
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4942      	ldr	r1, [pc, #264]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x1ee4>)
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	601a      	str	r2, [r3, #0]
          i_save++;
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1e1c>)
 8002400:	6013      	str	r3, [r2, #0]
        loop = loop + 1;
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x1ee8>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x1ee8>)
 800240c:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x1eec>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002508 <HAL_TIM_PeriodElapsedCallback+0x1ef0>
 8002418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x1eec>)
 800241e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8002422:	e000      	b.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x1e0e>
        break;
 8002424:	bf00      	nop
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20024da8 	.word	0x20024da8
 8002434:	200003b0 	.word	0x200003b0
 8002438:	200002a0 	.word	0x200002a0
 800243c:	200274b8 	.word	0x200274b8
 8002440:	200002a4 	.word	0x200002a4
 8002444:	20029bc8 	.word	0x20029bc8
 8002448:	200002a8 	.word	0x200002a8
 800244c:	2002c2d8 	.word	0x2002c2d8
 8002450:	200002ac 	.word	0x200002ac
 8002454:	2002e9e8 	.word	0x2002e9e8
 8002458:	200002b0 	.word	0x200002b0
 800245c:	200310f8 	.word	0x200310f8
 8002460:	200002c4 	.word	0x200002c4
 8002464:	20033808 	.word	0x20033808
 8002468:	200002c6 	.word	0x200002c6
 800246c:	20034b90 	.word	0x20034b90
 8002470:	200002c8 	.word	0x200002c8
 8002474:	20035f18 	.word	0x20035f18
 8002478:	200002ca 	.word	0x200002ca
 800247c:	200372a0 	.word	0x200372a0
 8002480:	20000304 	.word	0x20000304
 8002484:	20038628 	.word	0x20038628
 8002488:	20000308 	.word	0x20000308
 800248c:	2003ad38 	.word	0x2003ad38
 8002490:	2000030c 	.word	0x2000030c
 8002494:	2003d448 	.word	0x2003d448
 8002498:	20000310 	.word	0x20000310
 800249c:	2003fb58 	.word	0x2003fb58
 80024a0:	20000314 	.word	0x20000314
 80024a4:	20042268 	.word	0x20042268
 80024a8:	20000318 	.word	0x20000318
 80024ac:	20044978 	.word	0x20044978
 80024b0:	2000031c 	.word	0x2000031c
 80024b4:	20047088 	.word	0x20047088
 80024b8:	20000320 	.word	0x20000320
 80024bc:	20049798 	.word	0x20049798
 80024c0:	20000334 	.word	0x20000334
 80024c4:	2004bea8 	.word	0x2004bea8
 80024c8:	20000338 	.word	0x20000338
 80024cc:	2004e5b8 	.word	0x2004e5b8
 80024d0:	2000033c 	.word	0x2000033c
 80024d4:	20050cc8 	.word	0x20050cc8
 80024d8:	20000340 	.word	0x20000340
 80024dc:	200533d8 	.word	0x200533d8
 80024e0:	20000364 	.word	0x20000364
 80024e4:	20055ae8 	.word	0x20055ae8
 80024e8:	20000368 	.word	0x20000368
 80024ec:	200581f8 	.word	0x200581f8
 80024f0:	2000036c 	.word	0x2000036c
 80024f4:	2005a908 	.word	0x2005a908
 80024f8:	20000370 	.word	0x20000370
 80024fc:	2005d018 	.word	0x2005d018
 8002500:	20000208 	.word	0x20000208
 8002504:	20000204 	.word	0x20000204
 8002508:	3a83126f 	.word	0x3a83126f

0800250c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251c:	f040 8343 	bne.w	8002ba6 <HAL_GPIO_EXTI_Callback+0x69a>
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }

		mode++;
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_GPIO_EXTI_Callback+0x150>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_GPIO_EXTI_Callback+0x150>)
 800252a:	701a      	strb	r2, [r3, #0]
		printf("%d, ", mode);
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_GPIO_EXTI_Callback+0x150>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	484b      	ldr	r0, [pc, #300]	; (8002660 <HAL_GPIO_EXTI_Callback+0x154>)
 8002534:	f005 ff00 	bl	8008338 <iprintf>
		printf("\r\n");
 8002538:	484a      	ldr	r0, [pc, #296]	; (8002664 <HAL_GPIO_EXTI_Callback+0x158>)
 800253a:	f005 ff71 	bl	8008420 <puts>

    divide = mode % 3;
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_GPIO_EXTI_Callback+0x150>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	0859      	lsrs	r1, r3, #1
 800254a:	460b      	mov	r3, r1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	440b      	add	r3, r1
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b45      	ldr	r3, [pc, #276]	; (800266c <HAL_GPIO_EXTI_Callback+0x160>)
 8002556:	701a      	strb	r2, [r3, #0]

    switch(divide){
 8002558:	4b44      	ldr	r3, [pc, #272]	; (800266c <HAL_GPIO_EXTI_Callback+0x160>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00f      	beq.n	8002580 <HAL_GPIO_EXTI_Callback+0x74>
 8002560:	2b02      	cmp	r3, #2
 8002562:	d018      	beq.n	8002596 <HAL_GPIO_EXTI_Callback+0x8a>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d127      	bne.n	80025b8 <HAL_GPIO_EXTI_Callback+0xac>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800256e:	4840      	ldr	r0, [pc, #256]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 8002570:	f001 ff18 	bl	80043a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8002574:	2201      	movs	r2, #1
 8002576:	2101      	movs	r1, #1
 8002578:	483d      	ldr	r0, [pc, #244]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 800257a:	f001 ff13 	bl	80043a4 <HAL_GPIO_WritePin>
        break;
 800257e:	e01b      	b.n	80025b8 <HAL_GPIO_EXTI_Callback+0xac>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	2101      	movs	r1, #1
 8002584:	483a      	ldr	r0, [pc, #232]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 8002586:	f001 ff0d 	bl	80043a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 800258a:	2201      	movs	r2, #1
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	4838      	ldr	r0, [pc, #224]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 8002590:	f001 ff08 	bl	80043a4 <HAL_GPIO_WritePin>
        break;
 8002594:	e010      	b.n	80025b8 <HAL_GPIO_EXTI_Callback+0xac>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	2101      	movs	r1, #1
 800259a:	4835      	ldr	r0, [pc, #212]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 800259c:	f001 ff02 	bl	80043a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	4832      	ldr	r0, [pc, #200]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 80025a6:	f001 fefd 	bl	80043a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025b0:	482f      	ldr	r0, [pc, #188]	; (8002670 <HAL_GPIO_EXTI_Callback+0x164>)
 80025b2:	f001 fef7 	bl	80043a4 <HAL_GPIO_WritePin>
        break;
 80025b6:	bf00      	nop
    }

    switch(mode){
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_GPIO_EXTI_Callback+0x150>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_EXTI_Callback+0xbc>
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d022      	beq.n	800260a <HAL_GPIO_EXTI_Callback+0xfe>
 80025c4:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 80025c6:	e2ee      	b.n	8002ba6 <HAL_GPIO_EXTI_Callback+0x69a>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        tau_dfob1 = 0.0;
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_GPIO_EXTI_Callback+0x168>)
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
        tau_dfob2 = 0.0;
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_GPIO_EXTI_Callback+0x16c>)
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
        tau_dfob3 = 0.0;
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_GPIO_EXTI_Callback+0x170>)
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
        tau_dfob4 = 0.0;
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_GPIO_EXTI_Callback+0x174>)
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        tau_dfob1_pre = 0.0;
 80025e8:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_GPIO_EXTI_Callback+0x178>)
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_GPIO_EXTI_Callback+0x178>)
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_GPIO_EXTI_Callback+0x178>)
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_GPIO_EXTI_Callback+0x178>)
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        break;
 8002608:	e2cd      	b.n	8002ba6 <HAL_GPIO_EXTI_Callback+0x69a>
      // }
      // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
      // fprintf(outputfile, "abc");
      // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_GPIO_EXTI_Callback+0x17c>)
 800260c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002610:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_GPIO_EXTI_Callback+0x180>)
 8002614:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002618:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_GPIO_EXTI_Callback+0x184>)
 800261c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002620:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_GPIO_EXTI_Callback+0x188>)
 8002624:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002628:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_GPIO_EXTI_Callback+0x17c>)
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_GPIO_EXTI_Callback+0x180>)
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_GPIO_EXTI_Callback+0x18c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_GPIO_EXTI_Callback+0x184>)
 8002640:	881a      	ldrh	r2, [r3, #0]
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_GPIO_EXTI_Callback+0x190>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_GPIO_EXTI_Callback+0x188>)
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_GPIO_EXTI_Callback+0x190>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x194>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e29d      	b.n	8002b96 <HAL_GPIO_EXTI_Callback+0x68a>
 800265a:	bf00      	nop
 800265c:	2000020a 	.word	0x2000020a
 8002660:	0800a0d8 	.word	0x0800a0d8
 8002664:	0800a0e0 	.word	0x0800a0e0
 8002668:	aaaaaaab 	.word	0xaaaaaaab
 800266c:	2000020b 	.word	0x2000020b
 8002670:	40020400 	.word	0x40020400
 8002674:	20000364 	.word	0x20000364
 8002678:	20000368 	.word	0x20000368
 800267c:	2000036c 	.word	0x2000036c
 8002680:	20000370 	.word	0x20000370
 8002684:	20000374 	.word	0x20000374
 8002688:	200002c4 	.word	0x200002c4
 800268c:	200002c6 	.word	0x200002c6
 8002690:	200002c8 	.word	0x200002c8
 8002694:	200002ca 	.word	0x200002ca
 8002698:	2005fc38 	.word	0x2005fc38
 800269c:	2005fcf8 	.word	0x2005fcf8
 80026a0:	200003b4 	.word	0x200003b4
          printf("%d, ", i_output);
 80026a4:	4bc2      	ldr	r3, [pc, #776]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	48c2      	ldr	r0, [pc, #776]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80026ac:	f005 fe44 	bl	8008338 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 80026b0:	4bbf      	ldr	r3, [pc, #764]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4ac0      	ldr	r2, [pc, #768]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x4ac>)
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c2:	ec53 2b17 	vmov	r2, r3, d7
 80026c6:	48bd      	ldr	r0, [pc, #756]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80026c8:	f005 fe36 	bl	8008338 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 80026cc:	4bb8      	ldr	r3, [pc, #736]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4abb      	ldr	r2, [pc, #748]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026de:	ec53 2b17 	vmov	r2, r3, d7
 80026e2:	48b6      	ldr	r0, [pc, #728]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80026e4:	f005 fe28 	bl	8008338 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 80026e8:	4bb1      	ldr	r3, [pc, #708]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4ab5      	ldr	r2, [pc, #724]	; (80029c4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026fa:	ec53 2b17 	vmov	r2, r3, d7
 80026fe:	48af      	ldr	r0, [pc, #700]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002700:	f005 fe1a 	bl	8008338 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 8002704:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4aaf      	ldr	r2, [pc, #700]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x4bc>)
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002716:	ec53 2b17 	vmov	r2, r3, d7
 800271a:	48a8      	ldr	r0, [pc, #672]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 800271c:	f005 fe0c 	bl	8008338 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 8002720:	4ba3      	ldr	r3, [pc, #652]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4aa9      	ldr	r2, [pc, #676]	; (80029cc <HAL_GPIO_EXTI_Callback+0x4c0>)
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002732:	ec53 2b17 	vmov	r2, r3, d7
 8002736:	48a1      	ldr	r0, [pc, #644]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002738:	f005 fdfe 	bl	8008338 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 800273c:	4b9c      	ldr	r3, [pc, #624]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4aa3      	ldr	r2, [pc, #652]	; (80029d0 <HAL_GPIO_EXTI_Callback+0x4c4>)
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800274e:	ec53 2b17 	vmov	r2, r3, d7
 8002752:	489a      	ldr	r0, [pc, #616]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002754:	f005 fdf0 	bl	8008338 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 8002758:	4b95      	ldr	r3, [pc, #596]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a9d      	ldr	r2, [pc, #628]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800276a:	ec53 2b17 	vmov	r2, r3, d7
 800276e:	4893      	ldr	r0, [pc, #588]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002770:	f005 fde2 	bl	8008338 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 8002774:	4b8e      	ldr	r3, [pc, #568]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a97      	ldr	r2, [pc, #604]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002786:	ec53 2b17 	vmov	r2, r3, d7
 800278a:	488c      	ldr	r0, [pc, #560]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 800278c:	f005 fdd4 	bl	8008338 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 8002790:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a91      	ldr	r2, [pc, #580]	; (80029dc <HAL_GPIO_EXTI_Callback+0x4d0>)
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027a2:	ec53 2b17 	vmov	r2, r3, d7
 80027a6:	4885      	ldr	r0, [pc, #532]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80027a8:	f005 fdc6 	bl	8008338 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 80027ac:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a8b      	ldr	r2, [pc, #556]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027be:	ec53 2b17 	vmov	r2, r3, d7
 80027c2:	487e      	ldr	r0, [pc, #504]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80027c4:	f005 fdb8 	bl	8008338 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 80027c8:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a85      	ldr	r2, [pc, #532]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027da:	ec53 2b17 	vmov	r2, r3, d7
 80027de:	4877      	ldr	r0, [pc, #476]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80027e0:	f005 fdaa 	bl	8008338 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 80027e4:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a7f      	ldr	r2, [pc, #508]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027f6:	ec53 2b17 	vmov	r2, r3, d7
 80027fa:	4870      	ldr	r0, [pc, #448]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80027fc:	f005 fd9c 	bl	8008338 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 8002800:	4b6b      	ldr	r3, [pc, #428]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a79      	ldr	r2, [pc, #484]	; (80029ec <HAL_GPIO_EXTI_Callback+0x4e0>)
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002812:	ec53 2b17 	vmov	r2, r3, d7
 8002816:	4869      	ldr	r0, [pc, #420]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002818:	f005 fd8e 	bl	8008338 <iprintf>

          printf("%f, ", i1_ref_SRAM[i_output]);
 800281c:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a73      	ldr	r2, [pc, #460]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800282e:	ec53 2b17 	vmov	r2, r3, d7
 8002832:	4862      	ldr	r0, [pc, #392]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002834:	f005 fd80 	bl	8008338 <iprintf>
          printf("%f, ", i2_ref_SRAM[i_output]);
 8002838:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6d      	ldr	r2, [pc, #436]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x4e8>)
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800284a:	ec53 2b17 	vmov	r2, r3, d7
 800284e:	485b      	ldr	r0, [pc, #364]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002850:	f005 fd72 	bl	8008338 <iprintf>
          printf("%f, ", i3_ref_SRAM[i_output]);
 8002854:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a67      	ldr	r2, [pc, #412]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002866:	ec53 2b17 	vmov	r2, r3, d7
 800286a:	4854      	ldr	r0, [pc, #336]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 800286c:	f005 fd64 	bl	8008338 <iprintf>
          printf("%f, ", i4_ref_SRAM[i_output]);
 8002870:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a61      	ldr	r2, [pc, #388]	; (80029fc <HAL_GPIO_EXTI_Callback+0x4f0>)
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002882:	ec53 2b17 	vmov	r2, r3, d7
 8002886:	484d      	ldr	r0, [pc, #308]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002888:	f005 fd56 	bl	8008338 <iprintf>

          printf("%f, ", ia1_ref_SRAM[i_output]);
 800288c:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800289e:	ec53 2b17 	vmov	r2, r3, d7
 80028a2:	4846      	ldr	r0, [pc, #280]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80028a4:	f005 fd48 	bl	8008338 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 80028a8:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x4f8>)
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028ba:	ec53 2b17 	vmov	r2, r3, d7
 80028be:	483f      	ldr	r0, [pc, #252]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80028c0:	f005 fd3a 	bl	8008338 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 80028c4:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028d6:	ec53 2b17 	vmov	r2, r3, d7
 80028da:	4838      	ldr	r0, [pc, #224]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80028dc:	f005 fd2c 	bl	8008338 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x500>)
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028f2:	ec53 2b17 	vmov	r2, r3, d7
 80028f6:	4831      	ldr	r0, [pc, #196]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 80028f8:	f005 fd1e 	bl	8008338 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a43      	ldr	r2, [pc, #268]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x504>)
 8002902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002906:	4619      	mov	r1, r3
 8002908:	482a      	ldr	r0, [pc, #168]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x4a8>)
 800290a:	f005 fd15 	bl	8008338 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a40      	ldr	r2, [pc, #256]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x508>)
 8002914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002918:	4619      	mov	r1, r3
 800291a:	4826      	ldr	r0, [pc, #152]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x4a8>)
 800291c:	f005 fd0c 	bl	8008338 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x50c>)
 8002926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800292a:	4619      	mov	r1, r3
 800292c:	4821      	ldr	r0, [pc, #132]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x4a8>)
 800292e:	f005 fd03 	bl	8008338 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a39      	ldr	r2, [pc, #228]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x510>)
 8002938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293c:	4619      	mov	r1, r3
 800293e:	481d      	ldr	r0, [pc, #116]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002940:	f005 fcfa 	bl	8008338 <iprintf>
          // printf("%f, ", tau_dis1_raw_SRAM[i_output]);
          // printf("%f, ", tau_dis2_raw_SRAM[i_output]);
          // printf("%f, ", tau_dis3_raw_SRAM[i_output]);
          // printf("%f, ", tau_dis4_raw_SRAM[i_output]);

          printf("%f, ", fd1_ref_SRAM[i_output]);
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x514>)
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002956:	ec53 2b17 	vmov	r2, r3, d7
 800295a:	4818      	ldr	r0, [pc, #96]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 800295c:	f005 fcec 	bl	8008338 <iprintf>
          printf("%f, ", fd2_ref_SRAM[i_output]);
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x518>)
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002972:	ec53 2b17 	vmov	r2, r3, d7
 8002976:	4811      	ldr	r0, [pc, #68]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002978:	f005 fcde 	bl	8008338 <iprintf>
          printf("%f, ", fd3_ref_SRAM[i_output]);
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x51c>)
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800298e:	ec53 2b17 	vmov	r2, r3, d7
 8002992:	480a      	ldr	r0, [pc, #40]	; (80029bc <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002994:	f005 fcd0 	bl	8008338 <iprintf>
          printf("%f, ", fd4_ref_SRAM[i_output]);
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x520>)
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029aa:	ec53 2b17 	vmov	r2, r3, d7
 80029ae:	e03f      	b.n	8002a30 <HAL_GPIO_EXTI_Callback+0x524>
 80029b0:	200003b4 	.word	0x200003b4
 80029b4:	0800a0d8 	.word	0x0800a0d8
 80029b8:	200003b8 	.word	0x200003b8
 80029bc:	0800a0e4 	.word	0x0800a0e4
 80029c0:	20002ac8 	.word	0x20002ac8
 80029c4:	200051d8 	.word	0x200051d8
 80029c8:	200078e8 	.word	0x200078e8
 80029cc:	20009ff8 	.word	0x20009ff8
 80029d0:	2000c708 	.word	0x2000c708
 80029d4:	2000ee18 	.word	0x2000ee18
 80029d8:	20011528 	.word	0x20011528
 80029dc:	20013c38 	.word	0x20013c38
 80029e0:	20016348 	.word	0x20016348
 80029e4:	20018a58 	.word	0x20018a58
 80029e8:	2001b168 	.word	0x2001b168
 80029ec:	2001d878 	.word	0x2001d878
 80029f0:	2001ff88 	.word	0x2001ff88
 80029f4:	20022698 	.word	0x20022698
 80029f8:	20024da8 	.word	0x20024da8
 80029fc:	200274b8 	.word	0x200274b8
 8002a00:	20029bc8 	.word	0x20029bc8
 8002a04:	2002c2d8 	.word	0x2002c2d8
 8002a08:	2002e9e8 	.word	0x2002e9e8
 8002a0c:	200310f8 	.word	0x200310f8
 8002a10:	20033808 	.word	0x20033808
 8002a14:	20034b90 	.word	0x20034b90
 8002a18:	20035f18 	.word	0x20035f18
 8002a1c:	200372a0 	.word	0x200372a0
 8002a20:	20038628 	.word	0x20038628
 8002a24:	2003ad38 	.word	0x2003ad38
 8002a28:	2003d448 	.word	0x2003d448
 8002a2c:	2003fb58 	.word	0x2003fb58
 8002a30:	485f      	ldr	r0, [pc, #380]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002a32:	f005 fc81 	bl	8008338 <iprintf>
          
          printf("%f, ", Ki_df_integral1_SRAM[i_output]);
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a48:	ec53 2b17 	vmov	r2, r3, d7
 8002a4c:	4858      	ldr	r0, [pc, #352]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002a4e:	f005 fc73 	bl	8008338 <iprintf>
          printf("%f, ", Ki_df_integral2_SRAM[i_output]);
 8002a52:	4b58      	ldr	r3, [pc, #352]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a64:	ec53 2b17 	vmov	r2, r3, d7
 8002a68:	4851      	ldr	r0, [pc, #324]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002a6a:	f005 fc65 	bl	8008338 <iprintf>
          printf("%f, ", Ki_df_integral3_SRAM[i_output]);
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a53      	ldr	r2, [pc, #332]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a80:	ec53 2b17 	vmov	r2, r3, d7
 8002a84:	484a      	ldr	r0, [pc, #296]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002a86:	f005 fc57 	bl	8008338 <iprintf>
          printf("%f, ", Ki_df_integral4_SRAM[i_output]);
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x6b8>)
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a9c:	ec53 2b17 	vmov	r2, r3, d7
 8002aa0:	4843      	ldr	r0, [pc, #268]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002aa2:	f005 fc49 	bl	8008338 <iprintf>
          
          printf("%f, ", tau_dob1_SRAM[i_output]);
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x6bc>)
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab8:	ec53 2b17 	vmov	r2, r3, d7
 8002abc:	483c      	ldr	r0, [pc, #240]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002abe:	f005 fc3b 	bl	8008338 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 8002ac2:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a41      	ldr	r2, [pc, #260]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x6c0>)
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ad4:	ec53 2b17 	vmov	r2, r3, d7
 8002ad8:	4835      	ldr	r0, [pc, #212]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002ada:	f005 fc2d 	bl	8008338 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x6c4>)
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002af0:	ec53 2b17 	vmov	r2, r3, d7
 8002af4:	482e      	ldr	r0, [pc, #184]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002af6:	f005 fc1f 	bl	8008338 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b0c:	ec53 2b17 	vmov	r2, r3, d7
 8002b10:	4827      	ldr	r0, [pc, #156]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002b12:	f005 fc11 	bl	8008338 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <HAL_GPIO_EXTI_Callback+0x6cc>)
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b28:	ec53 2b17 	vmov	r2, r3, d7
 8002b2c:	4820      	ldr	r0, [pc, #128]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002b2e:	f005 fc03 	bl	8008338 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <HAL_GPIO_EXTI_Callback+0x6d0>)
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b44:	ec53 2b17 	vmov	r2, r3, d7
 8002b48:	4819      	ldr	r0, [pc, #100]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002b4a:	f005 fbf5 	bl	8008338 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_GPIO_EXTI_Callback+0x6d4>)
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b60:	ec53 2b17 	vmov	r2, r3, d7
 8002b64:	4812      	ldr	r0, [pc, #72]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002b66:	f005 fbe7 	bl	8008338 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b7c:	ec53 2b17 	vmov	r2, r3, d7
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002b82:	f005 fbd9 	bl	8008338 <iprintf>

          printf("\r\n");
 8002b86:	4818      	ldr	r0, [pc, #96]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x6dc>)
 8002b88:	f005 fc4a 	bl	8008420 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	f77f ad80 	ble.w	80026a4 <HAL_GPIO_EXTI_Callback+0x198>
        }
        break;
 8002ba4:	bf00      	nop
    }


	}
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	0800a0e4 	.word	0x0800a0e4
 8002bb4:	200003b4 	.word	0x200003b4
 8002bb8:	20042268 	.word	0x20042268
 8002bbc:	20044978 	.word	0x20044978
 8002bc0:	20047088 	.word	0x20047088
 8002bc4:	20049798 	.word	0x20049798
 8002bc8:	2004bea8 	.word	0x2004bea8
 8002bcc:	2004e5b8 	.word	0x2004e5b8
 8002bd0:	20050cc8 	.word	0x20050cc8
 8002bd4:	200533d8 	.word	0x200533d8
 8002bd8:	20055ae8 	.word	0x20055ae8
 8002bdc:	200581f8 	.word	0x200581f8
 8002be0:	2005a908 	.word	0x2005a908
 8002be4:	2005d018 	.word	0x2005d018
 8002be8:	0800a0e0 	.word	0x0800a0e0

08002bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf0:	f001 f89d 	bl	8003d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bf4:	f000 f86c 	bl	8002cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bf8:	f000 fbfc 	bl	80033f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002bfc:	f000 fb9c 	bl	8003338 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002c00:	f000 fbca 	bl	8003398 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8002c04:	f000 f954 	bl	8002eb0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002c08:	f000 f8f8 	bl	8002dfc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002c0c:	f000 f99e 	bl	8002f4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c10:	f000 f9f2 	bl	8002ff8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002c14:	f000 fac8 	bl	80031a8 <MX_TIM8_Init>
  MX_TIM5_Init();
 8002c18:	f000 fa44 	bl	80030a4 <MX_TIM5_Init>
  MX_TIM9_Init();
 8002c1c:	f000 fb1e 	bl	800325c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002c20:	481e      	ldr	r0, [pc, #120]	; (8002c9c <main+0xb0>)
 8002c22:	f002 fe91 	bl	8005948 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002c26:	213c      	movs	r1, #60	; 0x3c
 8002c28:	481d      	ldr	r0, [pc, #116]	; (8002ca0 <main+0xb4>)
 8002c2a:	f002 ffc3 	bl	8005bb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002c2e:	213c      	movs	r1, #60	; 0x3c
 8002c30:	481c      	ldr	r0, [pc, #112]	; (8002ca4 <main+0xb8>)
 8002c32:	f002 ffbf 	bl	8005bb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002c36:	213c      	movs	r1, #60	; 0x3c
 8002c38:	481b      	ldr	r0, [pc, #108]	; (8002ca8 <main+0xbc>)
 8002c3a:	f002 ffbb 	bl	8005bb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002c3e:	213c      	movs	r1, #60	; 0x3c
 8002c40:	481a      	ldr	r0, [pc, #104]	; (8002cac <main+0xc0>)
 8002c42:	f002 ffb7 	bl	8005bb4 <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <main+0xc4>)
 8002c48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <main+0xc8>)
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <main+0xc4>)
 8002c52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <main+0xcc>)
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <main+0xc4>)
 8002c5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <main+0xd0>)
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <main+0xc4>)
 8002c66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <main+0xd4>)
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4814      	ldr	r0, [pc, #80]	; (8002cc4 <main+0xd8>)
 8002c72:	f002 fec9 	bl	8005a08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002c76:	210c      	movs	r1, #12
 8002c78:	4812      	ldr	r0, [pc, #72]	; (8002cc4 <main+0xd8>)
 8002c7a:	f002 fec5 	bl	8005a08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4811      	ldr	r0, [pc, #68]	; (8002cc8 <main+0xdc>)
 8002c82:	f002 fec1 	bl	8005a08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002c86:	2104      	movs	r1, #4
 8002c88:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <main+0xdc>)
 8002c8a:	f002 febd 	bl	8005a08 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2101      	movs	r1, #1
 8002c92:	480e      	ldr	r0, [pc, #56]	; (8002ccc <main+0xe0>)
 8002c94:	f001 fb86 	bl	80043a4 <HAL_GPIO_WritePin>
//  printf("\r\n initialized Success!!\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <main+0xac>
 8002c9a:	bf00      	nop
 8002c9c:	2005fd38 	.word	0x2005fd38
 8002ca0:	2005fcb8 	.word	0x2005fcb8
 8002ca4:	2005fc78 	.word	0x2005fc78
 8002ca8:	2005f774 	.word	0x2005f774
 8002cac:	2005f734 	.word	0x2005f734
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40010400 	.word	0x40010400
 8002cc4:	2005fc38 	.word	0x2005fc38
 8002cc8:	2005fcf8 	.word	0x2005fcf8
 8002ccc:	40020400 	.word	0x40020400

08002cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b0b8      	sub	sp, #224	; 0xe0
 8002cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002cda:	2234      	movs	r2, #52	; 0x34
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 fee8 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf4:	f107 0308 	add.w	r3, r7, #8
 8002cf8:	2290      	movs	r2, #144	; 0x90
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 fed9 	bl	8007ab4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d02:	f001 fcc9 	bl	8004698 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <SystemClock_Config+0x120>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a39      	ldr	r2, [pc, #228]	; (8002df0 <SystemClock_Config+0x120>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <SystemClock_Config+0x120>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d1e:	4b35      	ldr	r3, [pc, #212]	; (8002df4 <SystemClock_Config+0x124>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d26:	4a33      	ldr	r2, [pc, #204]	; (8002df4 <SystemClock_Config+0x124>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <SystemClock_Config+0x124>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d56:	2304      	movs	r3, #4
 8002d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002d5c:	2360      	movs	r3, #96	; 0x60
 8002d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d62:	2302      	movs	r3, #2
 8002d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d68:	2304      	movs	r3, #4
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fcf0 	bl	8004758 <HAL_RCC_OscConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002d7e:	f000 fc43 	bl	8003608 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d82:	f001 fc99 	bl	80046b8 <HAL_PWREx_EnableOverDrive>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d8c:	f000 fc3c 	bl	8003608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d90:	230f      	movs	r3, #15
 8002d92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002db0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 ff7c 	bl	8004cb4 <HAL_RCC_ClockConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002dc2:	f000 fc21 	bl	8003608 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <SystemClock_Config+0x128>)
 8002dc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 f963 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8002de4:	f000 fc10 	bl	8003608 <Error_Handler>
  }
}
 8002de8:	bf00      	nop
 8002dea:	37e0      	adds	r7, #224	; 0xe0
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
 8002df8:	00200100 	.word	0x00200100

08002dfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fe52 	bl	8007ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	463b      	mov	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e1c:	4a23      	ldr	r2, [pc, #140]	; (8002eac <MX_TIM1_Init+0xb0>)
 8002e1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e46:	2303      	movs	r3, #3
 8002e48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e72:	f002 fe0d 	bl	8005a90 <HAL_TIM_Encoder_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002e7c:	f000 fbc4 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_TIM1_Init+0xac>)
 8002e92:	f003 fd9d 	bl	80069d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002e9c:	f000 fbb4 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	3730      	adds	r7, #48	; 0x30
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2005fcb8 	.word	0x2005fcb8
 8002eac:	40010000 	.word	0x40010000

08002eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002ed8:	225f      	movs	r2, #95	; 0x5f
 8002eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ef6:	4814      	ldr	r0, [pc, #80]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002ef8:	f002 fcfa 	bl	80058f0 <HAL_TIM_Base_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002f02:	f000 fb81 	bl	8003608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4619      	mov	r1, r3
 8002f12:	480d      	ldr	r0, [pc, #52]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002f14:	f003 f8bc 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002f1e:	f000 fb73 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4806      	ldr	r0, [pc, #24]	; (8002f48 <MX_TIM2_Init+0x98>)
 8002f30:	f003 fd4e 	bl	80069d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002f3a:	f000 fb65 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2005fd38 	.word	0x2005fd38

08002f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	; 0x30
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fdaa 	bl	8007ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f60:	463b      	mov	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <MX_TIM3_Init+0xa8>)
 8002f6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f90:	2303      	movs	r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	4619      	mov	r1, r3
 8002fba:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002fbc:	f002 fd68 	bl	8005a90 <HAL_TIM_Encoder_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002fc6:	f000 fb1f 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4806      	ldr	r0, [pc, #24]	; (8002ff0 <MX_TIM3_Init+0xa4>)
 8002fd8:	f003 fcfa 	bl	80069d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002fe2:	f000 fb11 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	3730      	adds	r7, #48	; 0x30
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2005fc78 	.word	0x2005fc78
 8002ff4:	40000400 	.word	0x40000400

08002ff8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fd54 	bl	8007ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	463b      	mov	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <MX_TIM4_Init+0xa4>)
 8003018:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <MX_TIM4_Init+0xa8>)
 800301a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800301c:	4b1f      	ldr	r3, [pc, #124]	; (800309c <MX_TIM4_Init+0xa4>)
 800301e:	2200      	movs	r2, #0
 8003020:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <MX_TIM4_Init+0xa4>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003028:	4b1c      	ldr	r3, [pc, #112]	; (800309c <MX_TIM4_Init+0xa4>)
 800302a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <MX_TIM4_Init+0xa4>)
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <MX_TIM4_Init+0xa4>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800303c:	2303      	movs	r3, #3
 800303e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003044:	2301      	movs	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	4619      	mov	r1, r3
 8003066:	480d      	ldr	r0, [pc, #52]	; (800309c <MX_TIM4_Init+0xa4>)
 8003068:	f002 fd12 	bl	8005a90 <HAL_TIM_Encoder_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003072:	f000 fac9 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800307e:	463b      	mov	r3, r7
 8003080:	4619      	mov	r1, r3
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <MX_TIM4_Init+0xa4>)
 8003084:	f003 fca4 	bl	80069d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800308e:	f000 fabb 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	3730      	adds	r7, #48	; 0x30
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2005f774 	.word	0x2005f774
 80030a0:	40000800 	.word	0x40000800

080030a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08e      	sub	sp, #56	; 0x38
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030c4:	463b      	mov	r3, r7
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	60da      	str	r2, [r3, #12]
 80030d0:	611a      	str	r2, [r3, #16]
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030d8:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <MX_TIM5_Init+0x100>)
 80030da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 80030dc:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000-1;
 80030e8:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030ea:	f640 729f 	movw	r2, #3999	; 0xf9f
 80030ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80030fc:	4828      	ldr	r0, [pc, #160]	; (80031a0 <MX_TIM5_Init+0xfc>)
 80030fe:	f002 fbf7 	bl	80058f0 <HAL_TIM_Base_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003108:	f000 fa7e 	bl	8003608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800310c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003116:	4619      	mov	r1, r3
 8003118:	4821      	ldr	r0, [pc, #132]	; (80031a0 <MX_TIM5_Init+0xfc>)
 800311a:	f002 ffb9 	bl	8006090 <HAL_TIM_ConfigClockSource>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003124:	f000 fa70 	bl	8003608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003128:	481d      	ldr	r0, [pc, #116]	; (80031a0 <MX_TIM5_Init+0xfc>)
 800312a:	f002 fc37 	bl	800599c <HAL_TIM_PWM_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003134:	f000 fa68 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4816      	ldr	r0, [pc, #88]	; (80031a0 <MX_TIM5_Init+0xfc>)
 8003148:	f003 fc42 	bl	80069d0 <HAL_TIMEx_MasterConfigSynchronization>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003152:	f000 fa59 	bl	8003608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003156:	2360      	movs	r3, #96	; 0x60
 8003158:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003166:	463b      	mov	r3, r7
 8003168:	2200      	movs	r2, #0
 800316a:	4619      	mov	r1, r3
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <MX_TIM5_Init+0xfc>)
 800316e:	f002 fe77 	bl	8005e60 <HAL_TIM_PWM_ConfigChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003178:	f000 fa46 	bl	8003608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800317c:	463b      	mov	r3, r7
 800317e:	220c      	movs	r2, #12
 8003180:	4619      	mov	r1, r3
 8003182:	4807      	ldr	r0, [pc, #28]	; (80031a0 <MX_TIM5_Init+0xfc>)
 8003184:	f002 fe6c 	bl	8005e60 <HAL_TIM_PWM_ConfigChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800318e:	f000 fa3b 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003192:	4803      	ldr	r0, [pc, #12]	; (80031a0 <MX_TIM5_Init+0xfc>)
 8003194:	f000 fbaa 	bl	80038ec <HAL_TIM_MspPostInit>

}
 8003198:	bf00      	nop
 800319a:	3738      	adds	r7, #56	; 0x38
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	2005fc38 	.word	0x2005fc38
 80031a4:	40000c00 	.word	0x40000c00

080031a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 fc7c 	bl	8007ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	463b      	mov	r3, r7
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <MX_TIM8_Init+0xac>)
 80031c8:	4a23      	ldr	r2, [pc, #140]	; (8003258 <MX_TIM8_Init+0xb0>)
 80031ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <MX_TIM8_Init+0xac>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <MX_TIM8_Init+0xac>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <MX_TIM8_Init+0xac>)
 80031da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <MX_TIM8_Init+0xac>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <MX_TIM8_Init+0xac>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <MX_TIM8_Init+0xac>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031f2:	2303      	movs	r3, #3
 80031f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031fa:	2301      	movs	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003206:	2300      	movs	r3, #0
 8003208:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800320a:	2301      	movs	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800320e:	2300      	movs	r3, #0
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4619      	mov	r1, r3
 800321c:	480d      	ldr	r0, [pc, #52]	; (8003254 <MX_TIM8_Init+0xac>)
 800321e:	f002 fc37 	bl	8005a90 <HAL_TIM_Encoder_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003228:	f000 f9ee 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003238:	463b      	mov	r3, r7
 800323a:	4619      	mov	r1, r3
 800323c:	4805      	ldr	r0, [pc, #20]	; (8003254 <MX_TIM8_Init+0xac>)
 800323e:	f003 fbc7 	bl	80069d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003248:	f000 f9de 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	3730      	adds	r7, #48	; 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2005f734 	.word	0x2005f734
 8003258:	40010400 	.word	0x40010400

0800325c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003262:	f107 0320 	add.w	r3, r7, #32
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	615a      	str	r2, [r3, #20]
 8003280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003282:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <MX_TIM9_Init+0xd4>)
 8003284:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <MX_TIM9_Init+0xd8>)
 8003286:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8003288:	4b29      	ldr	r3, [pc, #164]	; (8003330 <MX_TIM9_Init+0xd4>)
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <MX_TIM9_Init+0xd4>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4000-1;
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <MX_TIM9_Init+0xd4>)
 8003296:	f640 729f 	movw	r2, #3999	; 0xf9f
 800329a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329c:	4b24      	ldr	r3, [pc, #144]	; (8003330 <MX_TIM9_Init+0xd4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <MX_TIM9_Init+0xd4>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80032a8:	4821      	ldr	r0, [pc, #132]	; (8003330 <MX_TIM9_Init+0xd4>)
 80032aa:	f002 fb21 	bl	80058f0 <HAL_TIM_Base_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80032b4:	f000 f9a8 	bl	8003608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80032be:	f107 0320 	add.w	r3, r7, #32
 80032c2:	4619      	mov	r1, r3
 80032c4:	481a      	ldr	r0, [pc, #104]	; (8003330 <MX_TIM9_Init+0xd4>)
 80032c6:	f002 fee3 	bl	8006090 <HAL_TIM_ConfigClockSource>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80032d0:	f000 f99a 	bl	8003608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80032d4:	4816      	ldr	r0, [pc, #88]	; (8003330 <MX_TIM9_Init+0xd4>)
 80032d6:	f002 fb61 	bl	800599c <HAL_TIM_PWM_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80032e0:	f000 f992 	bl	8003608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e4:	2360      	movs	r3, #96	; 0x60
 80032e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	2200      	movs	r2, #0
 80032f8:	4619      	mov	r1, r3
 80032fa:	480d      	ldr	r0, [pc, #52]	; (8003330 <MX_TIM9_Init+0xd4>)
 80032fc:	f002 fdb0 	bl	8005e60 <HAL_TIM_PWM_ConfigChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003306:	f000 f97f 	bl	8003608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2204      	movs	r2, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4807      	ldr	r0, [pc, #28]	; (8003330 <MX_TIM9_Init+0xd4>)
 8003312:	f002 fda5 	bl	8005e60 <HAL_TIM_PWM_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 800331c:	f000 f974 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003320:	4803      	ldr	r0, [pc, #12]	; (8003330 <MX_TIM9_Init+0xd4>)
 8003322:	f000 fae3 	bl	80038ec <HAL_TIM_MspPostInit>

}
 8003326:	bf00      	nop
 8003328:	3730      	adds	r7, #48	; 0x30
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2005fcf8 	.word	0x2005fcf8
 8003334:	40014000 	.word	0x40014000

08003338 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <MX_USART3_UART_Init+0x58>)
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <MX_USART3_UART_Init+0x5c>)
 8003340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <MX_USART3_UART_Init+0x58>)
 8003344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_USART3_UART_Init+0x58>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_USART3_UART_Init+0x58>)
 8003352:	2200      	movs	r2, #0
 8003354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <MX_USART3_UART_Init+0x58>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_USART3_UART_Init+0x58>)
 800335e:	2208      	movs	r2, #8
 8003360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <MX_USART3_UART_Init+0x58>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <MX_USART3_UART_Init+0x58>)
 800336a:	2200      	movs	r2, #0
 800336c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <MX_USART3_UART_Init+0x58>)
 8003370:	2200      	movs	r2, #0
 8003372:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_USART3_UART_Init+0x58>)
 8003376:	2200      	movs	r2, #0
 8003378:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800337a:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_USART3_UART_Init+0x58>)
 800337c:	f003 fbd4 	bl	8006b28 <HAL_UART_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003386:	f000 f93f 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2005f7b4 	.word	0x2005f7b4
 8003394:	40004800 	.word	0x40004800

08003398 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800339e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80033a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033a6:	2206      	movs	r2, #6
 80033a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033ac:	2202      	movs	r2, #2
 80033ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033b8:	2202      	movs	r2, #2
 80033ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033be:	2201      	movs	r2, #1
 80033c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033dc:	f001 f814 	bl	8004408 <HAL_PCD_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80033e6:	f000 f90f 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2005f834 	.word	0x2005f834

080033f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	f107 031c 	add.w	r3, r7, #28
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800340a:	4b78      	ldr	r3, [pc, #480]	; (80035ec <MX_GPIO_Init+0x1f8>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a77      	ldr	r2, [pc, #476]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003410:	f043 0310 	orr.w	r3, r3, #16
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b75      	ldr	r3, [pc, #468]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a71      	ldr	r2, [pc, #452]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800343a:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <MX_GPIO_Init+0x1f8>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a6b      	ldr	r2, [pc, #428]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b69      	ldr	r3, [pc, #420]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800346a:	4b60      	ldr	r3, [pc, #384]	; (80035ec <MX_GPIO_Init+0x1f8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003482:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a59      	ldr	r2, [pc, #356]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <MX_GPIO_Init+0x1f8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800349a:	4b54      	ldr	r3, [pc, #336]	; (80035ec <MX_GPIO_Init+0x1f8>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a53      	ldr	r2, [pc, #332]	; (80035ec <MX_GPIO_Init+0x1f8>)
 80034a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <MX_GPIO_Init+0x1f8>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80034b2:	2200      	movs	r2, #0
 80034b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80034b8:	484d      	ldr	r0, [pc, #308]	; (80035f0 <MX_GPIO_Init+0x1fc>)
 80034ba:	f000 ff73 	bl	80043a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80034be:	2200      	movs	r2, #0
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	484c      	ldr	r0, [pc, #304]	; (80035f4 <MX_GPIO_Init+0x200>)
 80034c4:	f000 ff6e 	bl	80043a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80034c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <MX_GPIO_Init+0x204>)
 80034d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80034d6:	f107 031c 	add.w	r3, r7, #28
 80034da:	4619      	mov	r1, r3
 80034dc:	4847      	ldr	r0, [pc, #284]	; (80035fc <MX_GPIO_Init+0x208>)
 80034de:	f000 fdb7 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80034e2:	2332      	movs	r3, #50	; 0x32
 80034e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034f2:	230b      	movs	r3, #11
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	483f      	ldr	r0, [pc, #252]	; (80035fc <MX_GPIO_Init+0x208>)
 80034fe:	f000 fda7 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003502:	2386      	movs	r3, #134	; 0x86
 8003504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350e:	2303      	movs	r3, #3
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003512:	230b      	movs	r3, #11
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003516:	f107 031c 	add.w	r3, r7, #28
 800351a:	4619      	mov	r1, r3
 800351c:	4838      	ldr	r0, [pc, #224]	; (8003600 <MX_GPIO_Init+0x20c>)
 800351e:	f000 fd97 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003522:	f244 0381 	movw	r3, #16513	; 0x4081
 8003526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003528:	2301      	movs	r3, #1
 800352a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	2300      	movs	r3, #0
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	4619      	mov	r1, r3
 800353a:	482d      	ldr	r0, [pc, #180]	; (80035f0 <MX_GPIO_Init+0x1fc>)
 800353c:	f000 fd88 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003552:	230b      	movs	r3, #11
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	4619      	mov	r1, r3
 800355c:	4824      	ldr	r0, [pc, #144]	; (80035f0 <MX_GPIO_Init+0x1fc>)
 800355e:	f000 fd77 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003562:	2340      	movs	r3, #64	; 0x40
 8003564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003566:	2301      	movs	r3, #1
 8003568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003572:	f107 031c 	add.w	r3, r7, #28
 8003576:	4619      	mov	r1, r3
 8003578:	481e      	ldr	r0, [pc, #120]	; (80035f4 <MX_GPIO_Init+0x200>)
 800357a:	f000 fd69 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	4619      	mov	r1, r3
 8003590:	4818      	ldr	r0, [pc, #96]	; (80035f4 <MX_GPIO_Init+0x200>)
 8003592:	f000 fd5d 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <MX_GPIO_Init+0x210>)
 800359e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	4619      	mov	r1, r3
 80035aa:	4814      	ldr	r0, [pc, #80]	; (80035fc <MX_GPIO_Init+0x208>)
 80035ac:	f000 fd50 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80035b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80035b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035c2:	230b      	movs	r3, #11
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	4619      	mov	r1, r3
 80035cc:	4809      	ldr	r0, [pc, #36]	; (80035f4 <MX_GPIO_Init+0x200>)
 80035ce:	f000 fd3f 	bl	8004050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2017      	movs	r0, #23
 80035d8:	f000 fd03 	bl	8003fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80035dc:	2017      	movs	r0, #23
 80035de:	f000 fd1c 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 80035e2:	bf00      	nop
 80035e4:	3730      	adds	r7, #48	; 0x30
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020400 	.word	0x40020400
 80035f4:	40021800 	.word	0x40021800
 80035f8:	10110000 	.word	0x10110000
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020000 	.word	0x40020000
 8003604:	10310000 	.word	0x10310000

08003608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_MspInit+0x44>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_MspInit+0x44>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_MspInit+0x44>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_MspInit+0x44>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x44>)
 800363c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x44>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b090      	sub	sp, #64	; 0x40
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6b      	ldr	r2, [pc, #428]	; (800382c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d129      	bne.n	80036d6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003682:	4b6b      	ldr	r3, [pc, #428]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6453      	str	r3, [r2, #68]	; 0x44
 800368e:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a64      	ldr	r2, [pc, #400]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036a0:	f043 0310 	orr.w	r3, r3, #16
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80036b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036c4:	2301      	movs	r3, #1
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036cc:	4619      	mov	r1, r3
 80036ce:	4859      	ldr	r0, [pc, #356]	; (8003834 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80036d0:	f000 fcbe 	bl	8004050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80036d4:	e0a5      	b.n	8003822 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a57      	ldr	r2, [pc, #348]	; (8003838 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d144      	bne.n	800376a <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e0:	4b53      	ldr	r3, [pc, #332]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	4a52      	ldr	r2, [pc, #328]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	6413      	str	r3, [r2, #64]	; 0x40
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4a4c      	ldr	r2, [pc, #304]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6313      	str	r3, [r2, #48]	; 0x30
 8003704:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003710:	4b47      	ldr	r3, [pc, #284]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	6313      	str	r3, [r2, #48]	; 0x30
 800371c:	4b44      	ldr	r3, [pc, #272]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003728:	2340      	movs	r3, #64	; 0x40
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2302      	movs	r3, #2
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003738:	2302      	movs	r3, #2
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003740:	4619      	mov	r1, r3
 8003742:	483e      	ldr	r0, [pc, #248]	; (800383c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003744:	f000 fc84 	bl	8004050 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003748:	2320      	movs	r3, #32
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003758:	2302      	movs	r3, #2
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003760:	4619      	mov	r1, r3
 8003762:	4837      	ldr	r0, [pc, #220]	; (8003840 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003764:	f000 fc74 	bl	8004050 <HAL_GPIO_Init>
}
 8003768:	e05b      	b.n	8003822 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a35      	ldr	r2, [pc, #212]	; (8003844 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d129      	bne.n	80037c8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800378c:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80037a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037b6:	2302      	movs	r3, #2
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	4821      	ldr	r0, [pc, #132]	; (8003848 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80037c2:	f000 fc45 	bl	8004050 <HAL_GPIO_Init>
}
 80037c6:	e02c      	b.n	8003822 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d127      	bne.n	8003822 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a10      	ldr	r2, [pc, #64]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003802:	23c0      	movs	r3, #192	; 0xc0
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003812:	2303      	movs	r3, #3
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800381a:	4619      	mov	r1, r3
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800381e:	f000 fc17 	bl	8004050 <HAL_GPIO_Init>
}
 8003822:	bf00      	nop
 8003824:	3740      	adds	r7, #64	; 0x40
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40023800 	.word	0x40023800
 8003834:	40021000 	.word	0x40021000
 8003838:	40000400 	.word	0x40000400
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40000800 	.word	0x40000800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40010400 	.word	0x40010400
 8003850:	40020800 	.word	0x40020800

08003854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d114      	bne.n	8003890 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800387e:	2200      	movs	r2, #0
 8003880:	2100      	movs	r1, #0
 8003882:	201c      	movs	r0, #28
 8003884:	f000 fbad 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003888:	201c      	movs	r0, #28
 800388a:	f000 fbc6 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800388e:	e022      	b.n	80038d6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <HAL_TIM_Base_MspInit+0x90>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10c      	bne.n	80038b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
}
 80038b2:	e010      	b.n	80038d6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <HAL_TIM_Base_MspInit+0x94>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10b      	bne.n	80038d6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_TIM_Base_MspInit+0x8c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	40014000 	.word	0x40014000

080038ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <HAL_TIM_MspPostInit+0xa8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d11c      	bne.n	8003948 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_TIM_MspPostInit+0xac>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a21      	ldr	r2, [pc, #132]	; (8003998 <HAL_TIM_MspPostInit+0xac>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <HAL_TIM_MspPostInit+0xac>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003926:	2309      	movs	r3, #9
 8003928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003936:	2302      	movs	r3, #2
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4619      	mov	r1, r3
 8003940:	4816      	ldr	r0, [pc, #88]	; (800399c <HAL_TIM_MspPostInit+0xb0>)
 8003942:	f000 fb85 	bl	8004050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003946:	e020      	b.n	800398a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_TIM_MspPostInit+0xb4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d11b      	bne.n	800398a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_TIM_MspPostInit+0xac>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <HAL_TIM_MspPostInit+0xac>)
 8003958:	f043 0310 	orr.w	r3, r3, #16
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_TIM_MspPostInit+0xac>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800396a:	2360      	movs	r3, #96	; 0x60
 800396c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800397a:	2303      	movs	r3, #3
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	4619      	mov	r1, r3
 8003984:	4807      	ldr	r0, [pc, #28]	; (80039a4 <HAL_TIM_MspPostInit+0xb8>)
 8003986:	f000 fb63 	bl	8004050 <HAL_GPIO_Init>
}
 800398a:	bf00      	nop
 800398c:	3728      	adds	r7, #40	; 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40023800 	.word	0x40023800
 800399c:	40020000 	.word	0x40020000
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_UART_MspInit+0x7c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d128      	bne.n	8003a1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_UART_MspInit+0x80>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_UART_MspInit+0x80>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_UART_MspInit+0x80>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_UART_MspInit+0x80>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <HAL_UART_MspInit+0x80>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_UART_MspInit+0x80>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80039fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a0c:	2307      	movs	r3, #7
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	4619      	mov	r1, r3
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <HAL_UART_MspInit+0x84>)
 8003a18:	f000 fb1a 	bl	8004050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a1c:	bf00      	nop
 8003a1e:	3728      	adds	r7, #40	; 0x28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40004800 	.word	0x40004800
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020c00 	.word	0x40020c00

08003a30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a50:	d141      	bne.n	8003ad6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003a6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a7c:	230a      	movs	r3, #10
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4619      	mov	r1, r3
 8003a86:	4817      	ldr	r0, [pc, #92]	; (8003ae4 <HAL_PCD_MspInit+0xb4>)
 8003a88:	f000 fae2 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4810      	ldr	r0, [pc, #64]	; (8003ae4 <HAL_PCD_MspInit+0xb4>)
 8003aa2:	f000 fad5 	bl	8004050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	4a0d      	ldr	r2, [pc, #52]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_PCD_MspInit+0xb0>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003ad6:	bf00      	nop
 8003ad8:	3728      	adds	r7, #40	; 0x28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40020000 	.word	0x40020000

08003ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <HardFault_Handler+0x4>

08003afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <MemManage_Handler+0x4>

08003b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <BusFault_Handler+0x4>

08003b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <UsageFault_Handler+0x4>

08003b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b3c:	f000 f934 	bl	8003da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b4c:	f000 fc44 	bl	80043d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <TIM2_IRQHandler+0x10>)
 8003b5a:	f002 f862 	bl	8005c22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	2005fd38 	.word	0x2005fd38

08003b68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e00a      	b.n	8003b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b7a:	f3af 8000 	nop.w
 8003b7e:	4601      	mov	r1, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	60ba      	str	r2, [r7, #8]
 8003b86:	b2ca      	uxtb	r2, r1
 8003b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	dbf0      	blt.n	8003b7a <_read+0x12>
	}

return len;
 8003b98:	687b      	ldr	r3, [r7, #4]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e009      	b.n	8003bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	60ba      	str	r2, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fd17 	bl	80005f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	dbf1      	blt.n	8003bb4 <_write+0x12>
	}
	return len;
 8003bd0:	687b      	ldr	r3, [r7, #4]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_close>:

int _close(int file)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	return -1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c02:	605a      	str	r2, [r3, #4]
	return 0;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_isatty>:

int _isatty(int file)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
	return 1;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c4c:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <_sbrk+0x5c>)
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <_sbrk+0x60>)
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <_sbrk+0x64>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <_sbrk+0x64>)
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <_sbrk+0x68>)
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <_sbrk+0x64>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d207      	bcs.n	8003c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c74:	f003 fef4 	bl	8007a60 <__errno>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	e009      	b.n	8003c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <_sbrk+0x64>)
 8003c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20080000 	.word	0x20080000
 8003ca4:	00000400 	.word	0x00000400
 8003ca8:	2005f728 	.word	0x2005f728
 8003cac:	2005fd88 	.word	0x2005fd88

08003cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <SystemInit+0x28>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <SystemInit+0x28>)
 8003cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <SystemInit+0x28>)
 8003cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cca:	609a      	str	r2, [r3, #8]
#endif
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ce0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ce2:	e003      	b.n	8003cec <LoopCopyDataInit>

08003ce4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ce6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ce8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cea:	3104      	adds	r1, #4

08003cec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003cec:	480b      	ldr	r0, [pc, #44]	; (8003d1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cf4:	d3f6      	bcc.n	8003ce4 <CopyDataInit>
  ldr  r2, =_sbss
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cf8:	e002      	b.n	8003d00 <LoopFillZerobss>

08003cfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cfc:	f842 3b04 	str.w	r3, [r2], #4

08003d00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d04:	d3f9      	bcc.n	8003cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d06:	f7ff ffd3 	bl	8003cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d0a:	f003 feaf 	bl	8007a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d0e:	f7fe ff6d 	bl	8002bec <main>
  bx  lr    
 8003d12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d14:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003d18:	0800a3d8 	.word	0x0800a3d8
  ldr  r0, =_sdata
 8003d1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d20:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8003d24:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8003d28:	2005fd84 	.word	0x2005fd84

08003d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d2c:	e7fe      	b.n	8003d2c <ADC_IRQHandler>

08003d2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d32:	2003      	movs	r0, #3
 8003d34:	f000 f94a 	bl	8003fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f000 f805 	bl	8003d48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d3e:	f7ff fc6b 	bl	8003618 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_InitTick+0x54>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_InitTick+0x58>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f965 	bl	8004036 <HAL_SYSTICK_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00e      	b.n	8003d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b0f      	cmp	r3, #15
 8003d7a:	d80a      	bhi.n	8003d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f000 f92d 	bl	8003fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d88:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <HAL_InitTick+0x5c>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e000      	b.n	8003d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	20000014 	.word	0x20000014
 8003da4:	20000010 	.word	0x20000010

08003da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_IncTick+0x20>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_IncTick+0x24>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4413      	add	r3, r2
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_IncTick+0x24>)
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000014 	.word	0x20000014
 8003dcc:	2005fd7c 	.word	0x2005fd7c

08003dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_GetTick+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	2005fd7c 	.word	0x2005fd7c

08003de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7ff ffee 	bl	8003dd0 <HAL_GetTick>
 8003df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d005      	beq.n	8003e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_Delay+0x40>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e0e:	bf00      	nop
 8003e10:	f7ff ffde 	bl	8003dd0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d8f7      	bhi.n	8003e10 <HAL_Delay+0x28>
  {
  }
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000014 	.word	0x20000014

08003e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <__NVIC_SetPriorityGrouping+0x40>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5a:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <__NVIC_SetPriorityGrouping+0x40>)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	60d3      	str	r3, [r2, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00
 8003e70:	05fa0000 	.word	0x05fa0000

08003e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <__NVIC_GetPriorityGrouping+0x18>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0307 	and.w	r3, r3, #7
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db0b      	blt.n	8003eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <__NVIC_EnableIRQ+0x38>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f98:	d301      	bcc.n	8003f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00f      	b.n	8003fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <SysTick_Config+0x40>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	f7ff ff8e 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb8:	2207      	movs	r2, #7
 8003fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	e000e010 	.word	0xe000e010

08003fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff29 	bl	8003e2c <__NVIC_SetPriorityGrouping>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff4:	f7ff ff3e 	bl	8003e74 <__NVIC_GetPriorityGrouping>
 8003ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff ff8e 	bl	8003f20 <NVIC_EncodePriority>
 8004004:	4602      	mov	r2, r0
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff5d 	bl	8003ecc <__NVIC_SetPriority>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff31 	bl	8003e90 <__NVIC_EnableIRQ>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffa2 	bl	8003f88 <SysTick_Config>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004050:	b480      	push	{r7}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e175      	b.n	800435c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004070:	2201      	movs	r2, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	429a      	cmp	r2, r3
 800408a:	f040 8164 	bne.w	8004356 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d00b      	beq.n	80040ae <HAL_GPIO_Init+0x5e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d007      	beq.n	80040ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a2:	2b11      	cmp	r3, #17
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b12      	cmp	r3, #18
 80040ac:	d130      	bne.n	8004110 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 0201 	and.w	r2, r3, #1
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2203      	movs	r2, #3
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x100>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b12      	cmp	r3, #18
 800414e:	d123      	bne.n	8004198 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	08da      	lsrs	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3208      	adds	r2, #8
 8004158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	220f      	movs	r2, #15
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	08da      	lsrs	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3208      	adds	r2, #8
 8004192:	69b9      	ldr	r1, [r7, #24]
 8004194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80be 	beq.w	8004356 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_GPIO_Init+0x320>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	4a64      	ldr	r2, [pc, #400]	; (8004370 <HAL_GPIO_Init+0x320>)
 80041e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041e4:	6453      	str	r3, [r2, #68]	; 0x44
 80041e6:	4b62      	ldr	r3, [pc, #392]	; (8004370 <HAL_GPIO_Init+0x320>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041f2:	4a60      	ldr	r2, [pc, #384]	; (8004374 <HAL_GPIO_Init+0x324>)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	3302      	adds	r3, #2
 80041fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	220f      	movs	r2, #15
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_GPIO_Init+0x328>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d037      	beq.n	800428e <HAL_GPIO_Init+0x23e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a56      	ldr	r2, [pc, #344]	; (800437c <HAL_GPIO_Init+0x32c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d031      	beq.n	800428a <HAL_GPIO_Init+0x23a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a55      	ldr	r2, [pc, #340]	; (8004380 <HAL_GPIO_Init+0x330>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d02b      	beq.n	8004286 <HAL_GPIO_Init+0x236>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a54      	ldr	r2, [pc, #336]	; (8004384 <HAL_GPIO_Init+0x334>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d025      	beq.n	8004282 <HAL_GPIO_Init+0x232>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a53      	ldr	r2, [pc, #332]	; (8004388 <HAL_GPIO_Init+0x338>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01f      	beq.n	800427e <HAL_GPIO_Init+0x22e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_Init+0x33c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d019      	beq.n	800427a <HAL_GPIO_Init+0x22a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_GPIO_Init+0x340>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_GPIO_Init+0x226>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_GPIO_Init+0x344>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00d      	beq.n	8004272 <HAL_GPIO_Init+0x222>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4f      	ldr	r2, [pc, #316]	; (8004398 <HAL_GPIO_Init+0x348>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <HAL_GPIO_Init+0x21e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_GPIO_Init+0x34c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_GPIO_Init+0x21a>
 8004266:	2309      	movs	r3, #9
 8004268:	e012      	b.n	8004290 <HAL_GPIO_Init+0x240>
 800426a:	230a      	movs	r3, #10
 800426c:	e010      	b.n	8004290 <HAL_GPIO_Init+0x240>
 800426e:	2308      	movs	r3, #8
 8004270:	e00e      	b.n	8004290 <HAL_GPIO_Init+0x240>
 8004272:	2307      	movs	r3, #7
 8004274:	e00c      	b.n	8004290 <HAL_GPIO_Init+0x240>
 8004276:	2306      	movs	r3, #6
 8004278:	e00a      	b.n	8004290 <HAL_GPIO_Init+0x240>
 800427a:	2305      	movs	r3, #5
 800427c:	e008      	b.n	8004290 <HAL_GPIO_Init+0x240>
 800427e:	2304      	movs	r3, #4
 8004280:	e006      	b.n	8004290 <HAL_GPIO_Init+0x240>
 8004282:	2303      	movs	r3, #3
 8004284:	e004      	b.n	8004290 <HAL_GPIO_Init+0x240>
 8004286:	2302      	movs	r3, #2
 8004288:	e002      	b.n	8004290 <HAL_GPIO_Init+0x240>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_GPIO_Init+0x240>
 800428e:	2300      	movs	r3, #0
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	f002 0203 	and.w	r2, r2, #3
 8004296:	0092      	lsls	r2, r2, #2
 8004298:	4093      	lsls	r3, r2
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042a0:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_GPIO_Init+0x324>)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	3302      	adds	r3, #2
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ae:	4b3c      	ldr	r3, [pc, #240]	; (80043a0 <HAL_GPIO_Init+0x350>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d2:	4a33      	ldr	r2, [pc, #204]	; (80043a0 <HAL_GPIO_Init+0x350>)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042d8:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_GPIO_Init+0x350>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <HAL_GPIO_Init+0x350>)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_GPIO_Init+0x350>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004326:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <HAL_GPIO_Init+0x350>)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_GPIO_Init+0x350>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004350:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <HAL_GPIO_Init+0x350>)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	f67f ae86 	bls.w	8004070 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004364:	bf00      	nop
 8004366:	3724      	adds	r7, #36	; 0x24
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40023800 	.word	0x40023800
 8004374:	40013800 	.word	0x40013800
 8004378:	40020000 	.word	0x40020000
 800437c:	40020400 	.word	0x40020400
 8004380:	40020800 	.word	0x40020800
 8004384:	40020c00 	.word	0x40020c00
 8004388:	40021000 	.word	0x40021000
 800438c:	40021400 	.word	0x40021400
 8004390:	40021800 	.word	0x40021800
 8004394:	40021c00 	.word	0x40021c00
 8004398:	40022000 	.word	0x40022000
 800439c:	40022400 	.word	0x40022400
 80043a0:	40013c00 	.word	0x40013c00

080043a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
 80043b0:	4613      	mov	r3, r2
 80043b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b4:	787b      	ldrb	r3, [r7, #1]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043c0:	e003      	b.n	80043ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	619a      	str	r2, [r3, #24]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ee:	4a05      	ldr	r2, [pc, #20]	; (8004404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe f888 	bl	800250c <HAL_GPIO_EXTI_Callback>
  }
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40013c00 	.word	0x40013c00

08004408 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440a:	b08f      	sub	sp, #60	; 0x3c
 800440c:	af0a      	add	r7, sp, #40	; 0x28
 800440e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e116      	b.n	8004648 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fafb 	bl	8003a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f003 f8a9 	bl	80075b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	687e      	ldr	r6, [r7, #4]
 8004466:	466d      	mov	r5, sp
 8004468:	f106 0410 	add.w	r4, r6, #16
 800446c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004478:	e885 0003 	stmia.w	r5, {r0, r1}
 800447c:	1d33      	adds	r3, r6, #4
 800447e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004480:	6838      	ldr	r0, [r7, #0]
 8004482:	f003 f83d 	bl	8007500 <USB_CoreInit>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d7      	b.n	8004648 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f003 f897 	bl	80075d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e04a      	b.n	8004540 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	333d      	adds	r3, #61	; 0x3d
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	333c      	adds	r3, #60	; 0x3c
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	b298      	uxth	r0, r3
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3342      	adds	r3, #66	; 0x42
 80044e6:	4602      	mov	r2, r0
 80044e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044ea:	7bfa      	ldrb	r2, [r7, #15]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	333f      	adds	r3, #63	; 0x3f
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	3344      	adds	r3, #68	; 0x44
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3348      	adds	r3, #72	; 0x48
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	3350      	adds	r3, #80	; 0x50
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	3301      	adds	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3af      	bcc.n	80044aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e044      	b.n	80045da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004592:	7bfa      	ldrb	r2, [r7, #15]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	3301      	adds	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3b5      	bcc.n	8004550 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	687e      	ldr	r6, [r7, #4]
 80045ec:	466d      	mov	r5, sp
 80045ee:	f106 0410 	add.w	r4, r6, #16
 80045f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004602:	1d33      	adds	r3, r6, #4
 8004604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004606:	6838      	ldr	r0, [r7, #0]
 8004608:	f003 f80e 	bl	8007628 <USB_DevInit>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e014      	b.n	8004648 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b01      	cmp	r3, #1
 8004634:	d102      	bne.n	800463c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f80a 	bl	8004650 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f003 f9c0 	bl	80079c6 <USB_DevDisconnect>

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004650 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_PCDEx_ActivateLPM+0x44>)
 8004680:	4313      	orrs	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	10000003 	.word	0x10000003

08004698 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40007000 	.word	0x40007000

080046b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	4b23      	ldr	r3, [pc, #140]	; (8004750 <HAL_PWREx_EnableOverDrive+0x98>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_PWREx_EnableOverDrive+0x98>)
 80046c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6413      	str	r3, [r2, #64]	; 0x40
 80046ce:	4b20      	ldr	r3, [pc, #128]	; (8004750 <HAL_PWREx_EnableOverDrive+0x98>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e6:	f7ff fb73 	bl	8003dd0 <HAL_GetTick>
 80046ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ec:	e009      	b.n	8004702 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046ee:	f7ff fb6f 	bl	8003dd0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046fc:	d901      	bls.n	8004702 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e022      	b.n	8004748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d1ee      	bne.n	80046ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800471c:	f7ff fb58 	bl	8003dd0 <HAL_GetTick>
 8004720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004722:	e009      	b.n	8004738 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004724:	f7ff fb54 	bl	8003dd0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004732:	d901      	bls.n	8004738 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e007      	b.n	8004748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_PWREx_EnableOverDrive+0x9c>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004744:	d1ee      	bne.n	8004724 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	40007000 	.word	0x40007000

08004758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004760:	2300      	movs	r3, #0
 8004762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e29b      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8087 	beq.w	800488a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800477c:	4b96      	ldr	r3, [pc, #600]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b04      	cmp	r3, #4
 8004786:	d00c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004788:	4b93      	ldr	r3, [pc, #588]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	2b08      	cmp	r3, #8
 8004792:	d112      	bne.n	80047ba <HAL_RCC_OscConfig+0x62>
 8004794:	4b90      	ldr	r3, [pc, #576]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a0:	d10b      	bne.n	80047ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a2:	4b8d      	ldr	r3, [pc, #564]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d06c      	beq.n	8004888 <HAL_RCC_OscConfig+0x130>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d168      	bne.n	8004888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e275      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x7a>
 80047c4:	4b84      	ldr	r3, [pc, #528]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a83      	ldr	r2, [pc, #524]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e02e      	b.n	8004830 <HAL_RCC_OscConfig+0xd8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x9c>
 80047da:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7e      	ldr	r2, [pc, #504]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b7c      	ldr	r3, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7b      	ldr	r2, [pc, #492]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80047ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xd8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0xc0>
 80047fe:	4b76      	ldr	r3, [pc, #472]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a75      	ldr	r2, [pc, #468]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a72      	ldr	r2, [pc, #456]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xd8>
 8004818:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b6c      	ldr	r3, [pc, #432]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a6b      	ldr	r2, [pc, #428]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7ff faca 	bl	8003dd0 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7ff fac6 	bl	8003dd0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e229      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xe8>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7ff fab6 	bl	8003dd0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7ff fab2 	bl	8003dd0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e215      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x110>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d069      	beq.n	800496a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004896:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x190>
 80048ae:	4b4a      	ldr	r3, [pc, #296]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x17a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1e9      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	493d      	ldr	r1, [pc, #244]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e040      	b.n	800496a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d023      	beq.n	8004938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a38      	ldr	r2, [pc, #224]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7ff fa68 	bl	8003dd0 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004904:	f7ff fa64 	bl	8003dd0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1c7      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4929      	ldr	r1, [pc, #164]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
 8004936:	e018      	b.n	800496a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004938:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7ff fa44 	bl	8003dd0 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494c:	f7ff fa40 	bl	8003dd0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1a3      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d038      	beq.n	80049e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d019      	beq.n	80049b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7ff fa21 	bl	8003dd0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004992:	f7ff fa1d 	bl	8003dd0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e180      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x23a>
 80049b0:	e01a      	b.n	80049e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80049b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7ff fa07 	bl	8003dd0 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c6:	f7ff fa03 	bl	8003dd0 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d903      	bls.n	80049dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e166      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
 80049d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	4b92      	ldr	r3, [pc, #584]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 80049de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ee      	bne.n	80049c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a4 	beq.w	8004b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f6:	4b8c      	ldr	r3, [pc, #560]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a02:	4b89      	ldr	r3, [pc, #548]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a88      	ldr	r2, [pc, #544]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0e:	4b86      	ldr	r3, [pc, #536]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1e:	4b83      	ldr	r3, [pc, #524]	; (8004c2c <HAL_RCC_OscConfig+0x4d4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d118      	bne.n	8004a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a2a:	4b80      	ldr	r3, [pc, #512]	; (8004c2c <HAL_RCC_OscConfig+0x4d4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a7f      	ldr	r2, [pc, #508]	; (8004c2c <HAL_RCC_OscConfig+0x4d4>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a36:	f7ff f9cb 	bl	8003dd0 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7ff f9c7 	bl	8003dd0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	; 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e12a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a50:	4b76      	ldr	r3, [pc, #472]	; (8004c2c <HAL_RCC_OscConfig+0x4d4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x31a>
 8004a64:	4b70      	ldr	r3, [pc, #448]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a6f      	ldr	r2, [pc, #444]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	e02d      	b.n	8004ace <HAL_RCC_OscConfig+0x376>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x33c>
 8004a7a:	4b6b      	ldr	r3, [pc, #428]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a6a      	ldr	r2, [pc, #424]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
 8004a86:	4b68      	ldr	r3, [pc, #416]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a67      	ldr	r2, [pc, #412]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	e01c      	b.n	8004ace <HAL_RCC_OscConfig+0x376>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x35e>
 8004a9c:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a61      	ldr	r2, [pc, #388]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004aa2:	f043 0304 	orr.w	r3, r3, #4
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa8:	4b5f      	ldr	r3, [pc, #380]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a5e      	ldr	r2, [pc, #376]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab4:	e00b      	b.n	8004ace <HAL_RCC_OscConfig+0x376>
 8004ab6:	4b5c      	ldr	r3, [pc, #368]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a5b      	ldr	r2, [pc, #364]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac2:	4b59      	ldr	r3, [pc, #356]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a58      	ldr	r2, [pc, #352]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004ac8:	f023 0304 	bic.w	r3, r3, #4
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d015      	beq.n	8004b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7ff f97b 	bl	8003dd0 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7ff f977 	bl	8003dd0 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e0d8      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af4:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ee      	beq.n	8004ade <HAL_RCC_OscConfig+0x386>
 8004b00:	e014      	b.n	8004b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7ff f965 	bl	8003dd0 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7ff f961 	bl	8003dd0 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e0c2      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b20:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ee      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80ae 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	4b37      	ldr	r3, [pc, #220]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d06d      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d14b      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a31      	ldr	r2, [pc, #196]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7ff f932 	bl	8003dd0 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7ff f92e 	bl	8003dd0 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e091      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	491b      	ldr	r1, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7ff f900 	bl	8003dd0 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7ff f8fc 	bl	8003dd0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e05f      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x47c>
 8004bf2:	e057      	b.n	8004ca4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7ff f8e6 	bl	8003dd0 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c08:	f7ff f8e2 	bl	8003dd0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e045      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_RCC_OscConfig+0x4d0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4b0>
 8004c26:	e03d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x54c>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c30:	4b1f      	ldr	r3, [pc, #124]	; (8004cb0 <HAL_RCC_OscConfig+0x558>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d030      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d129      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d122      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d119      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800

08004cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0d0      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b6a      	ldr	r3, [pc, #424]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d910      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b67      	ldr	r3, [pc, #412]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 020f 	bic.w	r2, r3, #15
 8004ce2:	4965      	ldr	r1, [pc, #404]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0b8      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d020      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d14:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a58      	ldr	r2, [pc, #352]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d38:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	494d      	ldr	r1, [pc, #308]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d040      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d115      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e07f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e073      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e06b      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4936      	ldr	r1, [pc, #216]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da8:	f7ff f812 	bl	8003dd0 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db0:	f7ff f80e 	bl	8003dd0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e053      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 020c 	and.w	r2, r3, #12
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d1eb      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d210      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	4922      	ldr	r1, [pc, #136]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e032      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e14:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4916      	ldr	r1, [pc, #88]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	490e      	ldr	r1, [pc, #56]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e46:	f000 f821 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x1cc>)
 8004e58:	5cd3      	ldrb	r3, [r2, r3]
 8004e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1d0>)
 8004e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x1d4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe ff6e 	bl	8003d48 <HAL_InitTick>

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023c00 	.word	0x40023c00
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0800a0ec 	.word	0x0800a0ec
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	20000010 	.word	0x20000010

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ea2:	4b63      	ldr	r3, [pc, #396]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d007      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x32>
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x38>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 80b4 	bne.w	8005020 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b5e      	ldr	r3, [pc, #376]	; (8005034 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004eba:	60bb      	str	r3, [r7, #8]
      break;
 8004ebc:	e0b3      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ebe:	4b5e      	ldr	r3, [pc, #376]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ec0:	60bb      	str	r3, [r7, #8]
      break;
 8004ec2:	e0b0      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec4:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ecc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ece:	4b58      	ldr	r3, [pc, #352]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04a      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b55      	ldr	r3, [pc, #340]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	f04f 0400 	mov.w	r4, #0
 8004ee4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	ea03 0501 	and.w	r5, r3, r1
 8004ef0:	ea04 0602 	and.w	r6, r4, r2
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	0154      	lsls	r4, r2, #5
 8004f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f06:	014b      	lsls	r3, r1, #5
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	1b49      	subs	r1, r1, r5
 8004f0e:	eb62 0206 	sbc.w	r2, r2, r6
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	0194      	lsls	r4, r2, #6
 8004f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f20:	018b      	lsls	r3, r1, #6
 8004f22:	1a5b      	subs	r3, r3, r1
 8004f24:	eb64 0402 	sbc.w	r4, r4, r2
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	00e2      	lsls	r2, r4, #3
 8004f32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f36:	00d9      	lsls	r1, r3, #3
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	195b      	adds	r3, r3, r5
 8004f3e:	eb44 0406 	adc.w	r4, r4, r6
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	0262      	lsls	r2, r4, #9
 8004f4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f50:	0259      	lsls	r1, r3, #9
 8004f52:	460b      	mov	r3, r1
 8004f54:	4614      	mov	r4, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	4621      	mov	r1, r4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	461a      	mov	r2, r3
 8004f62:	4623      	mov	r3, r4
 8004f64:	f7fb f9c4 	bl	80002f0 <__aeabi_uldivmod>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e049      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	ea03 0501 	and.w	r5, r3, r1
 8004f86:	ea04 0602 	and.w	r6, r4, r2
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	0154      	lsls	r4, r2, #5
 8004f98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f9c:	014b      	lsls	r3, r1, #5
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	1b49      	subs	r1, r1, r5
 8004fa4:	eb62 0206 	sbc.w	r2, r2, r6
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	0194      	lsls	r4, r2, #6
 8004fb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fb6:	018b      	lsls	r3, r1, #6
 8004fb8:	1a5b      	subs	r3, r3, r1
 8004fba:	eb64 0402 	sbc.w	r4, r4, r2
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	00e2      	lsls	r2, r4, #3
 8004fc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fcc:	00d9      	lsls	r1, r3, #3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	195b      	adds	r3, r3, r5
 8004fd4:	eb44 0406 	adc.w	r4, r4, r6
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	02a2      	lsls	r2, r4, #10
 8004fe2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fe6:	0299      	lsls	r1, r3, #10
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4614      	mov	r4, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	4621      	mov	r1, r4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f04f 0400 	mov.w	r4, #0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	f7fb f979 	bl	80002f0 <__aeabi_uldivmod>
 8004ffe:	4603      	mov	r3, r0
 8005000:	460c      	mov	r4, r1
 8005002:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0c1b      	lsrs	r3, r3, #16
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	3301      	adds	r3, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	60bb      	str	r3, [r7, #8]
      break;
 800501e:	e002      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005022:	60bb      	str	r3, [r7, #8]
      break;
 8005024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005026:	68bb      	ldr	r3, [r7, #8]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005030:	40023800 	.word	0x40023800
 8005034:	00f42400 	.word	0x00f42400
 8005038:	007a1200 	.word	0x007a1200

0800503c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_GetHCLKFreq+0x14>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005058:	f7ff fff0 	bl	800503c <HAL_RCC_GetHCLKFreq>
 800505c:	4601      	mov	r1, r0
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	0a9b      	lsrs	r3, r3, #10
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4a03      	ldr	r2, [pc, #12]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023800 	.word	0x40023800
 8005078:	0800a0fc 	.word	0x0800a0fc

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005080:	f7ff ffdc 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8005084:	4601      	mov	r1, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0b5b      	lsrs	r3, r3, #13
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4a03      	ldr	r2, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005092:	5cd3      	ldrb	r3, [r2, r3]
 8005094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800a0fc 	.word	0x0800a0fc

080050a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d012      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050cc:	4b69      	ldr	r3, [pc, #420]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a68      	ldr	r2, [pc, #416]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050d6:	6093      	str	r3, [r2, #8]
 80050d8:	4b66      	ldr	r3, [pc, #408]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	4964      	ldr	r1, [pc, #400]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d017      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050fe:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510c:	4959      	ldr	r1, [pc, #356]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511c:	d101      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800512a:	2301      	movs	r3, #1
 800512c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800513a:	4b4e      	ldr	r3, [pc, #312]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	494a      	ldr	r1, [pc, #296]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005158:	d101      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800515a:	2301      	movs	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005166:	2301      	movs	r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005176:	2301      	movs	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 808b 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005188:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	4a39      	ldr	r2, [pc, #228]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005192:	6413      	str	r3, [r2, #64]	; 0x40
 8005194:	4b37      	ldr	r3, [pc, #220]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a34      	ldr	r2, [pc, #208]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fe fe10 	bl	8003dd0 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b4:	f7fe fe0c 	bl	8003dd0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	; 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e38d      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051c6:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051d2:	4b28      	ldr	r3, [pc, #160]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d035      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d02e      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051f0:	4b20      	ldr	r3, [pc, #128]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051fa:	4b1e      	ldr	r3, [pc, #120]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005206:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005212:	4a18      	ldr	r2, [pc, #96]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d114      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fe fdd4 	bl	8003dd0 <HAL_GetTick>
 8005228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522a:	e00a      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522c:	f7fe fdd0 	bl	8003dd0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	; 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e34f      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0ee      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525a:	d111      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800526a:	400b      	ands	r3, r1
 800526c:	4901      	ldr	r1, [pc, #4]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
 8005272:	e00b      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005274:	40023800 	.word	0x40023800
 8005278:	40007000 	.word	0x40007000
 800527c:	0ffffcff 	.word	0x0ffffcff
 8005280:	4bb3      	ldr	r3, [pc, #716]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4ab2      	ldr	r2, [pc, #712]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005286:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800528a:	6093      	str	r3, [r2, #8]
 800528c:	4bb0      	ldr	r3, [pc, #704]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800528e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005298:	49ad      	ldr	r1, [pc, #692]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800529a:	4313      	orrs	r3, r2
 800529c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d010      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052aa:	4ba9      	ldr	r3, [pc, #676]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b0:	4aa7      	ldr	r2, [pc, #668]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052ba:	4ba5      	ldr	r3, [pc, #660]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	49a2      	ldr	r1, [pc, #648]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052d8:	4b9d      	ldr	r3, [pc, #628]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e6:	499a      	ldr	r1, [pc, #616]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052fa:	4b95      	ldr	r3, [pc, #596]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005308:	4991      	ldr	r1, [pc, #580]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800531c:	4b8c      	ldr	r3, [pc, #560]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532a:	4989      	ldr	r1, [pc, #548]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800533e:	4b84      	ldr	r3, [pc, #528]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4980      	ldr	r1, [pc, #512]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005360:	4b7b      	ldr	r3, [pc, #492]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f023 0203 	bic.w	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	4978      	ldr	r1, [pc, #480]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005382:	4b73      	ldr	r3, [pc, #460]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	f023 020c 	bic.w	r2, r3, #12
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005390:	496f      	ldr	r1, [pc, #444]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053a4:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b2:	4967      	ldr	r1, [pc, #412]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053c6:	4b62      	ldr	r3, [pc, #392]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	495e      	ldr	r1, [pc, #376]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053e8:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	4956      	ldr	r1, [pc, #344]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800540a:	4b51      	ldr	r3, [pc, #324]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	494d      	ldr	r1, [pc, #308]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800542c:	4b48      	ldr	r3, [pc, #288]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	4945      	ldr	r1, [pc, #276]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545c:	493c      	ldr	r1, [pc, #240]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005470:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547e:	4934      	ldr	r1, [pc, #208]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d011      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005492:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a0:	492b      	ldr	r1, [pc, #172]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b0:	d101      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054d2:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e0:	491b      	ldr	r1, [pc, #108]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00b      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054f4:	4b16      	ldr	r3, [pc, #88]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005504:	4912      	ldr	r1, [pc, #72]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005528:	4909      	ldr	r1, [pc, #36]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800553e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005542:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800
 8005554:	4985      	ldr	r1, [pc, #532]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005568:	4b80      	ldr	r3, [pc, #512]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800556a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005578:	497c      	ldr	r1, [pc, #496]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d005      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800558e:	f040 80d6 	bne.w	800573e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005592:	4b76      	ldr	r3, [pc, #472]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a75      	ldr	r2, [pc, #468]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005598:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800559c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559e:	f7fe fc17 	bl	8003dd0 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a6:	f7fe fc13 	bl	8003dd0 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b64      	cmp	r3, #100	; 0x64
 80055b2:	d901      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e194      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b8:	4b6c      	ldr	r3, [pc, #432]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d021      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11d      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055d8:	4b64      	ldr	r3, [pc, #400]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055e6:	4b61      	ldr	r3, [pc, #388]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ec:	0e1b      	lsrs	r3, r3, #24
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	019a      	lsls	r2, r3, #6
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	061b      	lsls	r3, r3, #24
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	071b      	lsls	r3, r3, #28
 800560c:	4957      	ldr	r1, [pc, #348]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005632:	2b00      	cmp	r3, #0
 8005634:	d02e      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563e:	d129      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005640:	4b4a      	ldr	r3, [pc, #296]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800564e:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005654:	0f1b      	lsrs	r3, r3, #28
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	019a      	lsls	r2, r3, #6
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	431a      	orrs	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	071b      	lsls	r3, r3, #28
 8005674:	493d      	ldr	r1, [pc, #244]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800567c:	4b3b      	ldr	r3, [pc, #236]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800567e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005682:	f023 021f 	bic.w	r2, r3, #31
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	3b01      	subs	r3, #1
 800568c:	4937      	ldr	r1, [pc, #220]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01d      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056a0:	4b32      	ldr	r3, [pc, #200]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a6:	0e1b      	lsrs	r3, r3, #24
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ae:	4b2f      	ldr	r3, [pc, #188]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b4:	0f1b      	lsrs	r3, r3, #28
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	019a      	lsls	r2, r3, #6
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	431a      	orrs	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	4925      	ldr	r1, [pc, #148]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d011      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	019a      	lsls	r2, r3, #6
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	071b      	lsls	r3, r3, #28
 8005704:	4919      	ldr	r1, [pc, #100]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800570c:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005718:	f7fe fb5a 	bl	8003dd0 <HAL_GetTick>
 800571c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005720:	f7fe fb56 	bl	8003dd0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0d7      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 80cd 	bne.w	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a08      	ldr	r2, [pc, #32]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800574c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005752:	f7fe fb3d 	bl	8003dd0 <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800575a:	f7fe fb39 	bl	8003dd0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b64      	cmp	r3, #100	; 0x64
 8005766:	d903      	bls.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e0ba      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800576c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005770:	4b5e      	ldr	r3, [pc, #376]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577c:	d0ed      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02e      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d12a      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057a6:	4b51      	ldr	r3, [pc, #324]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057b4:	4b4d      	ldr	r3, [pc, #308]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	0f1b      	lsrs	r3, r3, #28
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	019a      	lsls	r2, r3, #6
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	061b      	lsls	r3, r3, #24
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	071b      	lsls	r3, r3, #28
 80057da:	4944      	ldr	r1, [pc, #272]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057e2:	4b42      	ldr	r3, [pc, #264]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	3b01      	subs	r3, #1
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	493d      	ldr	r1, [pc, #244]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d022      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005810:	d11d      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	0e1b      	lsrs	r3, r3, #24
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	0f1b      	lsrs	r3, r3, #28
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	019a      	lsls	r2, r3, #6
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	041b      	lsls	r3, r3, #16
 800583a:	431a      	orrs	r2, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	071b      	lsls	r3, r3, #28
 8005846:	4929      	ldr	r1, [pc, #164]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d028      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800585a:	4b24      	ldr	r3, [pc, #144]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	0e1b      	lsrs	r3, r3, #24
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	019a      	lsls	r2, r3, #6
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	071b      	lsls	r3, r3, #28
 800588e:	4917      	ldr	r1, [pc, #92]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	4911      	ldr	r1, [pc, #68]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0e      	ldr	r2, [pc, #56]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b8:	f7fe fa8a 	bl	8003dd0 <HAL_GetTick>
 80058bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058c0:	f7fe fa86 	bl	8003dd0 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e007      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058de:	d1ef      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800

080058f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e01d      	b.n	800593e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fd ff9c 	bl	8003854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fc90 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <HAL_TIM_Base_Start_IT+0x50>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d00b      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x42>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d007      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	00010007 	.word	0x00010007

0800599c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e01d      	b.n	80059ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f815 	bl	80059f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f000 fc3a 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 ffb2 	bl	8006984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <HAL_TIM_PWM_Start+0x7c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIM_PWM_Start+0x2c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_TIM_PWM_Start+0x80>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_PWM_Start+0x30>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_TIM_PWM_Start+0x32>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <HAL_TIM_PWM_Start+0x84>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b06      	cmp	r3, #6
 8005a5e:	d00b      	beq.n	8005a78 <HAL_TIM_PWM_Start+0x70>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d007      	beq.n	8005a78 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	00010007 	.word	0x00010007

08005a90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e07b      	b.n	8005b9c <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d106      	bne.n	8005abe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fd fdd1 	bl	8003660 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <HAL_TIM_Encoder_Init+0x114>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f000 fbb7 	bl	8006254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <HAL_TIM_Encoder_Init+0x118>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <HAL_TIM_Encoder_Init+0x11c>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_TIM_Encoder_Init+0x120>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	011a      	lsls	r2, r3, #4
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	031b      	lsls	r3, r3, #12
 8005b50:	4313      	orrs	r3, r2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	4313      	orrs	r3, r2
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	fffebff8 	.word	0xfffebff8
 8005ba8:	fffffcfc 	.word	0xfffffcfc
 8005bac:	fffff3f3 	.word	0xfffff3f3
 8005bb0:	ffff0f0f 	.word	0xffff0f0f

08005bb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_TIM_Encoder_Start+0x16>
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d008      	beq.n	8005bda <HAL_TIM_Encoder_Start+0x26>
 8005bc8:	e00f      	b.n	8005bea <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fed6 	bl	8006984 <TIM_CCxChannelCmd>
      break;
 8005bd8:	e016      	b.n	8005c08 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2201      	movs	r2, #1
 8005be0:	2104      	movs	r1, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fece 	bl	8006984 <TIM_CCxChannelCmd>
      break;
 8005be8:	e00e      	b.n	8005c08 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fec6 	bl	8006984 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	2104      	movs	r1, #4
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 febf 	bl	8006984 <TIM_CCxChannelCmd>
      break;
 8005c06:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d122      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d11b      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0202 	mvn.w	r2, #2
 8005c4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fad7 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005c6a:	e005      	b.n	8005c78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fac9 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fada 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d122      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d11b      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0204 	mvn.w	r2, #4
 8005ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 faad 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005cbe:	e005      	b.n	8005ccc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fa9f 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fab0 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d122      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d11b      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0208 	mvn.w	r2, #8
 8005cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fa83 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005d12:	e005      	b.n	8005d20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fa75 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa86 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d122      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d11b      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0210 	mvn.w	r2, #16
 8005d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fa59 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005d66:	e005      	b.n	8005d74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa4b 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa5c 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10e      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0201 	mvn.w	r2, #1
 8005d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fa fc39 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d10e      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d107      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fe97 	bl	8006b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de0:	d10e      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d107      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fe8a 	bl	8006b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d10e      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa0a 	bl	8006240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d10e      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d107      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0220 	mvn.w	r2, #32
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fe4a 	bl	8006aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e105      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b14      	cmp	r3, #20
 8005e8e:	f200 80f0 	bhi.w	8006072 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eed 	.word	0x08005eed
 8005e9c:	08006073 	.word	0x08006073
 8005ea0:	08006073 	.word	0x08006073
 8005ea4:	08006073 	.word	0x08006073
 8005ea8:	08005f2d 	.word	0x08005f2d
 8005eac:	08006073 	.word	0x08006073
 8005eb0:	08006073 	.word	0x08006073
 8005eb4:	08006073 	.word	0x08006073
 8005eb8:	08005f6f 	.word	0x08005f6f
 8005ebc:	08006073 	.word	0x08006073
 8005ec0:	08006073 	.word	0x08006073
 8005ec4:	08006073 	.word	0x08006073
 8005ec8:	08005faf 	.word	0x08005faf
 8005ecc:	08006073 	.word	0x08006073
 8005ed0:	08006073 	.word	0x08006073
 8005ed4:	08006073 	.word	0x08006073
 8005ed8:	08005ff1 	.word	0x08005ff1
 8005edc:	08006073 	.word	0x08006073
 8005ee0:	08006073 	.word	0x08006073
 8005ee4:	08006073 	.word	0x08006073
 8005ee8:	08006031 	.word	0x08006031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fa4e 	bl	8006394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0208 	orr.w	r2, r2, #8
 8005f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6999      	ldr	r1, [r3, #24]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	619a      	str	r2, [r3, #24]
      break;
 8005f2a:	e0a3      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 faa0 	bl	8006478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	021a      	lsls	r2, r3, #8
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	619a      	str	r2, [r3, #24]
      break;
 8005f6c:	e082      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 faf7 	bl	8006568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0208 	orr.w	r2, r2, #8
 8005f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0204 	bic.w	r2, r2, #4
 8005f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69d9      	ldr	r1, [r3, #28]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	61da      	str	r2, [r3, #28]
      break;
 8005fac:	e062      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb4d 	bl	8006654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69d9      	ldr	r1, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	021a      	lsls	r2, r3, #8
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	61da      	str	r2, [r3, #28]
      break;
 8005fee:	e041      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fb84 	bl	8006704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0208 	orr.w	r2, r2, #8
 800600a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0204 	bic.w	r2, r2, #4
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800602e:	e021      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fbb6 	bl	80067a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006070:	e000      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006072:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_ConfigClockSource+0x18>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e0a6      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x166>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4b4f      	ldr	r3, [pc, #316]	; (8006200 <HAL_TIM_ConfigClockSource+0x170>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d067      	beq.n	80061b0 <HAL_TIM_ConfigClockSource+0x120>
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	d80b      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x6c>
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d073      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x140>
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d802      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x62>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d06f      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060f0:	e078      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d06c      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x140>
 80060f6:	2b30      	cmp	r3, #48	; 0x30
 80060f8:	d06a      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060fa:	e073      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d00d      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x8c>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d804      	bhi.n	800610e <HAL_TIM_ConfigClockSource+0x7e>
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	d033      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0xe0>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d041      	beq.n	8006190 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800610c:	e06a      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d066      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x152>
 8006114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006118:	d017      	beq.n	800614a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800611a:	e063      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6899      	ldr	r1, [r3, #8]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f000 fc0a 	bl	8006944 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800613e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
      break;
 8006148:	e04c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f000 fbf3 	bl	8006944 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800616c:	609a      	str	r2, [r3, #8]
      break;
 800616e:	e039      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	461a      	mov	r2, r3
 800617e:	f000 fb67 	bl	8006850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2150      	movs	r1, #80	; 0x50
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fbc0 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 800618e:	e029      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6859      	ldr	r1, [r3, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	461a      	mov	r2, r3
 800619e:	f000 fb86 	bl	80068ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2160      	movs	r1, #96	; 0x60
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fbb0 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 80061ae:	e019      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6859      	ldr	r1, [r3, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	461a      	mov	r2, r3
 80061be:	f000 fb47 	bl	8006850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2140      	movs	r1, #64	; 0x40
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fba0 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 80061ce:	e009      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 fb97 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 80061e0:	e000      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	fffeff88 	.word	0xfffeff88

08006204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a40      	ldr	r2, [pc, #256]	; (8006368 <TIM_Base_SetConfig+0x114>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3d      	ldr	r2, [pc, #244]	; (800636c <TIM_Base_SetConfig+0x118>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3c      	ldr	r2, [pc, #240]	; (8006370 <TIM_Base_SetConfig+0x11c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3b      	ldr	r2, [pc, #236]	; (8006374 <TIM_Base_SetConfig+0x120>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3a      	ldr	r2, [pc, #232]	; (8006378 <TIM_Base_SetConfig+0x124>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d108      	bne.n	80062a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <TIM_Base_SetConfig+0x114>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b4:	d027      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2c      	ldr	r2, [pc, #176]	; (800636c <TIM_Base_SetConfig+0x118>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d023      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	; (8006370 <TIM_Base_SetConfig+0x11c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <TIM_Base_SetConfig+0x120>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <TIM_Base_SetConfig+0x124>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a28      	ldr	r2, [pc, #160]	; (800637c <TIM_Base_SetConfig+0x128>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a27      	ldr	r2, [pc, #156]	; (8006380 <TIM_Base_SetConfig+0x12c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a26      	ldr	r2, [pc, #152]	; (8006384 <TIM_Base_SetConfig+0x130>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <TIM_Base_SetConfig+0x134>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a24      	ldr	r2, [pc, #144]	; (800638c <TIM_Base_SetConfig+0x138>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a23      	ldr	r2, [pc, #140]	; (8006390 <TIM_Base_SetConfig+0x13c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <TIM_Base_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <TIM_Base_SetConfig+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40010400 	.word	0x40010400
 800637c:	40014000 	.word	0x40014000
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800
 8006388:	40001800 	.word	0x40001800
 800638c:	40001c00 	.word	0x40001c00
 8006390:	40002000 	.word	0x40002000

08006394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4b2b      	ldr	r3, [pc, #172]	; (800646c <TIM_OC1_SetConfig+0xd8>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0302 	bic.w	r3, r3, #2
 80063dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <TIM_OC1_SetConfig+0xdc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_OC1_SetConfig+0x64>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a20      	ldr	r2, [pc, #128]	; (8006474 <TIM_OC1_SetConfig+0xe0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d10c      	bne.n	8006412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f023 0308 	bic.w	r3, r3, #8
 80063fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 0304 	bic.w	r3, r3, #4
 8006410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a16      	ldr	r2, [pc, #88]	; (8006470 <TIM_OC1_SetConfig+0xdc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_OC1_SetConfig+0x8e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a15      	ldr	r2, [pc, #84]	; (8006474 <TIM_OC1_SetConfig+0xe0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d111      	bne.n	8006446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	fffeff8f 	.word	0xfffeff8f
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400

08006478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0210 	bic.w	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4b2e      	ldr	r3, [pc, #184]	; (800655c <TIM_OC2_SetConfig+0xe4>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0320 	bic.w	r3, r3, #32
 80064c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a23      	ldr	r2, [pc, #140]	; (8006560 <TIM_OC2_SetConfig+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC2_SetConfig+0x68>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a22      	ldr	r2, [pc, #136]	; (8006564 <TIM_OC2_SetConfig+0xec>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10d      	bne.n	80064fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <TIM_OC2_SetConfig+0xe8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC2_SetConfig+0x94>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a17      	ldr	r2, [pc, #92]	; (8006564 <TIM_OC2_SetConfig+0xec>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d113      	bne.n	8006534 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	feff8fff 	.word	0xfeff8fff
 8006560:	40010000 	.word	0x40010000
 8006564:	40010400 	.word	0x40010400

08006568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4b2d      	ldr	r3, [pc, #180]	; (8006648 <TIM_OC3_SetConfig+0xe0>)
 8006594:	4013      	ands	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <TIM_OC3_SetConfig+0xe4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC3_SetConfig+0x66>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a21      	ldr	r2, [pc, #132]	; (8006650 <TIM_OC3_SetConfig+0xe8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10d      	bne.n	80065ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a17      	ldr	r2, [pc, #92]	; (800664c <TIM_OC3_SetConfig+0xe4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC3_SetConfig+0x92>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <TIM_OC3_SetConfig+0xe8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d113      	bne.n	8006622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	621a      	str	r2, [r3, #32]
}
 800663c:	bf00      	nop
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	fffeff8f 	.word	0xfffeff8f
 800664c:	40010000 	.word	0x40010000
 8006650:	40010400 	.word	0x40010400

08006654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <TIM_OC4_SetConfig+0xa4>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800669e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	031b      	lsls	r3, r3, #12
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a13      	ldr	r2, [pc, #76]	; (80066fc <TIM_OC4_SetConfig+0xa8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC4_SetConfig+0x68>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a12      	ldr	r2, [pc, #72]	; (8006700 <TIM_OC4_SetConfig+0xac>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d109      	bne.n	80066d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	feff8fff 	.word	0xfeff8fff
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400

08006704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4b1b      	ldr	r3, [pc, #108]	; (800679c <TIM_OC5_SetConfig+0x98>)
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a12      	ldr	r2, [pc, #72]	; (80067a0 <TIM_OC5_SetConfig+0x9c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_OC5_SetConfig+0x5e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <TIM_OC5_SetConfig+0xa0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d109      	bne.n	8006776 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	fffeff8f 	.word	0xfffeff8f
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40010400 	.word	0x40010400

080067a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <TIM_OC6_SetConfig+0x9c>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	051b      	lsls	r3, r3, #20
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a13      	ldr	r2, [pc, #76]	; (8006848 <TIM_OC6_SetConfig+0xa0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC6_SetConfig+0x60>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a12      	ldr	r2, [pc, #72]	; (800684c <TIM_OC6_SetConfig+0xa4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d109      	bne.n	800681c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	029b      	lsls	r3, r3, #10
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	feff8fff 	.word	0xfeff8fff
 8006848:	40010000 	.word	0x40010000
 800684c:	40010400 	.word	0x40010400

08006850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0201 	bic.w	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800687a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 030a 	bic.w	r3, r3, #10
 800688c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0210 	bic.w	r2, r3, #16
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	f043 0307 	orr.w	r3, r3, #7
 8006930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	021a      	lsls	r2, r3, #8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	431a      	orrs	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4313      	orrs	r3, r2
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	609a      	str	r2, [r3, #8]
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2201      	movs	r2, #1
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1a      	ldr	r2, [r3, #32]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	fa01 f303 	lsl.w	r3, r1, r3
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e06d      	b.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a30      	ldr	r2, [pc, #192]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2f      	ldr	r2, [pc, #188]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d022      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	d01d      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d018      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d013      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1a      	ldr	r2, [pc, #104]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00e      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d009      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10c      	bne.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40010400 	.word	0x40010400
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	40000c00 	.word	0x40000c00
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40001800 	.word	0x40001800

08006aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e040      	b.n	8006bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fc ff2c 	bl	80039a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2224      	movs	r2, #36	; 0x24
 8006b54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8be 	bl	8006ce8 <UART_SetConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e022      	b.n	8006bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fb5c 	bl	800723c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fbe3 	bl	8007380 <UART_CheckIdleState>
 8006bba:	4603      	mov	r3, r0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d17f      	bne.n	8006cdc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Transmit+0x24>
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e078      	b.n	8006cde <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Transmit+0x36>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e071      	b.n	8006cde <HAL_UART_Transmit+0x11a>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2221      	movs	r2, #33	; 0x21
 8006c0c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006c0e:	f7fd f8df 	bl	8003dd0 <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2c:	d108      	bne.n	8006c40 <HAL_UART_Transmit+0x7c>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	e003      	b.n	8006c48 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006c50:	e02c      	b.n	8006cac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2180      	movs	r1, #128	; 0x80
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fbd4 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e038      	b.n	8006cde <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	3302      	adds	r3, #2
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	e007      	b.n	8006c9a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	3301      	adds	r3, #1
 8006c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1cc      	bne.n	8006c52 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2140      	movs	r1, #64	; 0x40
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fba1 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e005      	b.n	8006cde <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
  }
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3720      	adds	r7, #32
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4bb1      	ldr	r3, [pc, #708]	; (8006fdc <UART_SetConfig+0x2f4>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	6939      	ldr	r1, [r7, #16]
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a9f      	ldr	r2, [pc, #636]	; (8006fe0 <UART_SetConfig+0x2f8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d121      	bne.n	8006dac <UART_SetConfig+0xc4>
 8006d68:	4b9e      	ldr	r3, [pc, #632]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d816      	bhi.n	8006da4 <UART_SetConfig+0xbc>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x94>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006d99 	.word	0x08006d99
 8006d84:	08006d93 	.word	0x08006d93
 8006d88:	08006d9f 	.word	0x08006d9f
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e151      	b.n	8007036 <UART_SetConfig+0x34e>
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e14e      	b.n	8007036 <UART_SetConfig+0x34e>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e14b      	b.n	8007036 <UART_SetConfig+0x34e>
 8006d9e:	2308      	movs	r3, #8
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e148      	b.n	8007036 <UART_SetConfig+0x34e>
 8006da4:	2310      	movs	r3, #16
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	bf00      	nop
 8006daa:	e144      	b.n	8007036 <UART_SetConfig+0x34e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a8d      	ldr	r2, [pc, #564]	; (8006fe8 <UART_SetConfig+0x300>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d134      	bne.n	8006e20 <UART_SetConfig+0x138>
 8006db6:	4b8b      	ldr	r3, [pc, #556]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbc:	f003 030c 	and.w	r3, r3, #12
 8006dc0:	2b0c      	cmp	r3, #12
 8006dc2:	d829      	bhi.n	8006e18 <UART_SetConfig+0x130>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <UART_SetConfig+0xe4>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006e01 	.word	0x08006e01
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e19 	.word	0x08006e19
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e0d 	.word	0x08006e0d
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e19 	.word	0x08006e19
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006e07 	.word	0x08006e07
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e13 	.word	0x08006e13
 8006e00:	2300      	movs	r3, #0
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e117      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e06:	2302      	movs	r3, #2
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e114      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e111      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e12:	2308      	movs	r3, #8
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	e10e      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	77fb      	strb	r3, [r7, #31]
 8006e1c:	bf00      	nop
 8006e1e:	e10a      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a71      	ldr	r2, [pc, #452]	; (8006fec <UART_SetConfig+0x304>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d120      	bne.n	8006e6c <UART_SetConfig+0x184>
 8006e2a:	4b6e      	ldr	r3, [pc, #440]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d00f      	beq.n	8006e58 <UART_SetConfig+0x170>
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d802      	bhi.n	8006e42 <UART_SetConfig+0x15a>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <UART_SetConfig+0x164>
 8006e40:	e010      	b.n	8006e64 <UART_SetConfig+0x17c>
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d005      	beq.n	8006e52 <UART_SetConfig+0x16a>
 8006e46:	2b30      	cmp	r3, #48	; 0x30
 8006e48:	d009      	beq.n	8006e5e <UART_SetConfig+0x176>
 8006e4a:	e00b      	b.n	8006e64 <UART_SetConfig+0x17c>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e0f1      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e52:	2302      	movs	r3, #2
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e0ee      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e58:	2304      	movs	r3, #4
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	e0eb      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e0e8      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e64:	2310      	movs	r3, #16
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	bf00      	nop
 8006e6a:	e0e4      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5f      	ldr	r2, [pc, #380]	; (8006ff0 <UART_SetConfig+0x308>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d120      	bne.n	8006eb8 <UART_SetConfig+0x1d0>
 8006e76:	4b5b      	ldr	r3, [pc, #364]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d00f      	beq.n	8006ea4 <UART_SetConfig+0x1bc>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d802      	bhi.n	8006e8e <UART_SetConfig+0x1a6>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <UART_SetConfig+0x1b0>
 8006e8c:	e010      	b.n	8006eb0 <UART_SetConfig+0x1c8>
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	d005      	beq.n	8006e9e <UART_SetConfig+0x1b6>
 8006e92:	2bc0      	cmp	r3, #192	; 0xc0
 8006e94:	d009      	beq.n	8006eaa <UART_SetConfig+0x1c2>
 8006e96:	e00b      	b.n	8006eb0 <UART_SetConfig+0x1c8>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e0cb      	b.n	8007036 <UART_SetConfig+0x34e>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	77fb      	strb	r3, [r7, #31]
 8006ea2:	e0c8      	b.n	8007036 <UART_SetConfig+0x34e>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e0c5      	b.n	8007036 <UART_SetConfig+0x34e>
 8006eaa:	2308      	movs	r3, #8
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e0c2      	b.n	8007036 <UART_SetConfig+0x34e>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	bf00      	nop
 8006eb6:	e0be      	b.n	8007036 <UART_SetConfig+0x34e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a4d      	ldr	r2, [pc, #308]	; (8006ff4 <UART_SetConfig+0x30c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d124      	bne.n	8006f0c <UART_SetConfig+0x224>
 8006ec2:	4b48      	ldr	r3, [pc, #288]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed0:	d012      	beq.n	8006ef8 <UART_SetConfig+0x210>
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	d802      	bhi.n	8006ede <UART_SetConfig+0x1f6>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <UART_SetConfig+0x204>
 8006edc:	e012      	b.n	8006f04 <UART_SetConfig+0x21c>
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee2:	d006      	beq.n	8006ef2 <UART_SetConfig+0x20a>
 8006ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee8:	d009      	beq.n	8006efe <UART_SetConfig+0x216>
 8006eea:	e00b      	b.n	8006f04 <UART_SetConfig+0x21c>
 8006eec:	2300      	movs	r3, #0
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e0a1      	b.n	8007036 <UART_SetConfig+0x34e>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e09e      	b.n	8007036 <UART_SetConfig+0x34e>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e09b      	b.n	8007036 <UART_SetConfig+0x34e>
 8006efe:	2308      	movs	r3, #8
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e098      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f04:	2310      	movs	r3, #16
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	bf00      	nop
 8006f0a:	e094      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a39      	ldr	r2, [pc, #228]	; (8006ff8 <UART_SetConfig+0x310>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d124      	bne.n	8006f60 <UART_SetConfig+0x278>
 8006f16:	4b33      	ldr	r3, [pc, #204]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f24:	d012      	beq.n	8006f4c <UART_SetConfig+0x264>
 8006f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2a:	d802      	bhi.n	8006f32 <UART_SetConfig+0x24a>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <UART_SetConfig+0x258>
 8006f30:	e012      	b.n	8006f58 <UART_SetConfig+0x270>
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f36:	d006      	beq.n	8006f46 <UART_SetConfig+0x25e>
 8006f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f3c:	d009      	beq.n	8006f52 <UART_SetConfig+0x26a>
 8006f3e:	e00b      	b.n	8006f58 <UART_SetConfig+0x270>
 8006f40:	2301      	movs	r3, #1
 8006f42:	77fb      	strb	r3, [r7, #31]
 8006f44:	e077      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f46:	2302      	movs	r3, #2
 8006f48:	77fb      	strb	r3, [r7, #31]
 8006f4a:	e074      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e071      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f52:	2308      	movs	r3, #8
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e06e      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	bf00      	nop
 8006f5e:	e06a      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a25      	ldr	r2, [pc, #148]	; (8006ffc <UART_SetConfig+0x314>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d124      	bne.n	8006fb4 <UART_SetConfig+0x2cc>
 8006f6a:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f78:	d012      	beq.n	8006fa0 <UART_SetConfig+0x2b8>
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	d802      	bhi.n	8006f86 <UART_SetConfig+0x29e>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <UART_SetConfig+0x2ac>
 8006f84:	e012      	b.n	8006fac <UART_SetConfig+0x2c4>
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d006      	beq.n	8006f9a <UART_SetConfig+0x2b2>
 8006f8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f90:	d009      	beq.n	8006fa6 <UART_SetConfig+0x2be>
 8006f92:	e00b      	b.n	8006fac <UART_SetConfig+0x2c4>
 8006f94:	2300      	movs	r3, #0
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e04d      	b.n	8007036 <UART_SetConfig+0x34e>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	77fb      	strb	r3, [r7, #31]
 8006f9e:	e04a      	b.n	8007036 <UART_SetConfig+0x34e>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e047      	b.n	8007036 <UART_SetConfig+0x34e>
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e044      	b.n	8007036 <UART_SetConfig+0x34e>
 8006fac:	2310      	movs	r3, #16
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	bf00      	nop
 8006fb2:	e040      	b.n	8007036 <UART_SetConfig+0x34e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a11      	ldr	r2, [pc, #68]	; (8007000 <UART_SetConfig+0x318>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d139      	bne.n	8007032 <UART_SetConfig+0x34a>
 8006fbe:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <UART_SetConfig+0x2fc>)
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fcc:	d027      	beq.n	800701e <UART_SetConfig+0x336>
 8006fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fd2:	d817      	bhi.n	8007004 <UART_SetConfig+0x31c>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01c      	beq.n	8007012 <UART_SetConfig+0x32a>
 8006fd8:	e027      	b.n	800702a <UART_SetConfig+0x342>
 8006fda:	bf00      	nop
 8006fdc:	efff69f3 	.word	0xefff69f3
 8006fe0:	40011000 	.word	0x40011000
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40004400 	.word	0x40004400
 8006fec:	40004800 	.word	0x40004800
 8006ff0:	40004c00 	.word	0x40004c00
 8006ff4:	40005000 	.word	0x40005000
 8006ff8:	40011400 	.word	0x40011400
 8006ffc:	40007800 	.word	0x40007800
 8007000:	40007c00 	.word	0x40007c00
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007008:	d006      	beq.n	8007018 <UART_SetConfig+0x330>
 800700a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800700e:	d009      	beq.n	8007024 <UART_SetConfig+0x33c>
 8007010:	e00b      	b.n	800702a <UART_SetConfig+0x342>
 8007012:	2300      	movs	r3, #0
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e00e      	b.n	8007036 <UART_SetConfig+0x34e>
 8007018:	2302      	movs	r3, #2
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e00b      	b.n	8007036 <UART_SetConfig+0x34e>
 800701e:	2304      	movs	r3, #4
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e008      	b.n	8007036 <UART_SetConfig+0x34e>
 8007024:	2308      	movs	r3, #8
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e005      	b.n	8007036 <UART_SetConfig+0x34e>
 800702a:	2310      	movs	r3, #16
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	bf00      	nop
 8007030:	e001      	b.n	8007036 <UART_SetConfig+0x34e>
 8007032:	2310      	movs	r3, #16
 8007034:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703e:	d17f      	bne.n	8007140 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007040:	7ffb      	ldrb	r3, [r7, #31]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d85c      	bhi.n	8007100 <UART_SetConfig+0x418>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x364>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007071 	.word	0x08007071
 8007050:	08007091 	.word	0x08007091
 8007054:	080070b1 	.word	0x080070b1
 8007058:	08007101 	.word	0x08007101
 800705c:	080070c9 	.word	0x080070c9
 8007060:	08007101 	.word	0x08007101
 8007064:	08007101 	.word	0x08007101
 8007068:	08007101 	.word	0x08007101
 800706c:	080070e9 	.word	0x080070e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fd fff0 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007074:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	005a      	lsls	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	61bb      	str	r3, [r7, #24]
        break;
 800708e:	e03a      	b.n	8007106 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007090:	f7fd fff4 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8007094:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	005a      	lsls	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	441a      	add	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	61bb      	str	r3, [r7, #24]
        break;
 80070ae:	e02a      	b.n	8007106 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	085a      	lsrs	r2, r3, #1
 80070b6:	4b5f      	ldr	r3, [pc, #380]	; (8007234 <UART_SetConfig+0x54c>)
 80070b8:	4413      	add	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6852      	ldr	r2, [r2, #4]
 80070be:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	61bb      	str	r3, [r7, #24]
        break;
 80070c6:	e01e      	b.n	8007106 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c8:	f7fd fee0 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 80070cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	005a      	lsls	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	441a      	add	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	61bb      	str	r3, [r7, #24]
        break;
 80070e6:	e00e      	b.n	8007106 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	61bb      	str	r3, [r7, #24]
        break;
 80070fe:	e002      	b.n	8007106 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
        break;
 8007104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d916      	bls.n	800713a <UART_SetConfig+0x452>
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007112:	d212      	bcs.n	800713a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f023 030f 	bic.w	r3, r3, #15
 800711c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	b29a      	uxth	r2, r3
 800712a:	897b      	ldrh	r3, [r7, #10]
 800712c:	4313      	orrs	r3, r2
 800712e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	897a      	ldrh	r2, [r7, #10]
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e070      	b.n	800721c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	75fb      	strb	r3, [r7, #23]
 800713e:	e06d      	b.n	800721c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007140:	7ffb      	ldrb	r3, [r7, #31]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d859      	bhi.n	80071fa <UART_SetConfig+0x512>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <UART_SetConfig+0x464>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007171 	.word	0x08007171
 8007150:	0800718f 	.word	0x0800718f
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071fb 	.word	0x080071fb
 800715c:	080071c5 	.word	0x080071c5
 8007160:	080071fb 	.word	0x080071fb
 8007164:	080071fb 	.word	0x080071fb
 8007168:	080071fb 	.word	0x080071fb
 800716c:	080071e3 	.word	0x080071e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd ff70 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007174:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	085a      	lsrs	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	441a      	add	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	b29b      	uxth	r3, r3
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e038      	b.n	8007200 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718e:	f7fd ff75 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8007192:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	085a      	lsrs	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	441a      	add	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	61bb      	str	r3, [r7, #24]
        break;
 80071aa:	e029      	b.n	8007200 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	085a      	lsrs	r2, r3, #1
 80071b2:	4b21      	ldr	r3, [pc, #132]	; (8007238 <UART_SetConfig+0x550>)
 80071b4:	4413      	add	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6852      	ldr	r2, [r2, #4]
 80071ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	61bb      	str	r3, [r7, #24]
        break;
 80071c2:	e01d      	b.n	8007200 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c4:	f7fd fe62 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 80071c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	085a      	lsrs	r2, r3, #1
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	441a      	add	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	b29b      	uxth	r3, r3
 80071de:	61bb      	str	r3, [r7, #24]
        break;
 80071e0:	e00e      	b.n	8007200 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	61bb      	str	r3, [r7, #24]
        break;
 80071f8:	e002      	b.n	8007200 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
        break;
 80071fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b0f      	cmp	r3, #15
 8007204:	d908      	bls.n	8007218 <UART_SetConfig+0x530>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720c:	d204      	bcs.n	8007218 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e001      	b.n	800721c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	01e84800 	.word	0x01e84800
 8007238:	00f42400 	.word	0x00f42400

0800723c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800733a:	d10a      	bne.n	8007352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800738e:	f7fc fd1f 	bl	8003dd0 <HAL_GetTick>
 8007392:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d10e      	bne.n	80073c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f82a 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e020      	b.n	8007402 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d10e      	bne.n	80073ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f814 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e00a      	b.n	8007402 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741a:	e05d      	b.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d059      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007424:	f7fc fcd4 	bl	8003dd0 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	429a      	cmp	r2, r3
 8007432:	d302      	bcc.n	800743a <UART_WaitOnFlagUntilTimeout+0x30>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11b      	bne.n	8007472 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007448:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e042      	b.n	80074f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02b      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748e:	d123      	bne.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007498:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e00f      	b.n	80074f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4013      	ands	r3, r2
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d092      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007500:	b084      	sub	sp, #16
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	f107 001c 	add.w	r0, r7, #28
 800750e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b01      	cmp	r3, #1
 8007516:	d120      	bne.n	800755a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	4b20      	ldr	r3, [pc, #128]	; (80075ac <USB_CoreInit+0xac>)
 800752a:	4013      	ands	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800753c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753e:	2b01      	cmp	r3, #1
 8007540:	d105      	bne.n	800754e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa52 	bl	80079f8 <USB_CoreReset>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
 8007558:	e010      	b.n	800757c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa46 	bl	80079f8 <USB_CoreReset>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10b      	bne.n	800759a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f043 0206 	orr.w	r2, r3, #6
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a6:	b004      	add	sp, #16
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	ffbdffbf 	.word	0xffbdffbf

080075b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f023 0201 	bic.w	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d106      	bne.n	80075fe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
 80075fc:	e00b      	b.n	8007616 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e001      	b.n	8007616 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e003      	b.n	800761e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007616:	2032      	movs	r0, #50	; 0x32
 8007618:	f7fc fbe6 	bl	8003de8 <HAL_Delay>

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007628:	b084      	sub	sp, #16
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	e009      	b.n	800765c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	3340      	adds	r3, #64	; 0x40
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	2200      	movs	r2, #0
 8007654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3301      	adds	r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2b0e      	cmp	r3, #14
 8007660:	d9f2      	bls.n	8007648 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11c      	bne.n	80076a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007676:	f043 0302 	orr.w	r3, r3, #2
 800767a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e005      	b.n	80076ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b4:	461a      	mov	r2, r3
 80076b6:	2300      	movs	r3, #0
 80076b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c0:	4619      	mov	r1, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c8:	461a      	mov	r2, r3
 80076ca:	680b      	ldr	r3, [r1, #0]
 80076cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10c      	bne.n	80076ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076da:	2100      	movs	r1, #0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f959 	bl	8007994 <USB_SetDevSpeed>
 80076e2:	e018      	b.n	8007716 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076e4:	2101      	movs	r1, #1
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f954 	bl	8007994 <USB_SetDevSpeed>
 80076ec:	e013      	b.n	8007716 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d10c      	bne.n	800770e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076fa:	2100      	movs	r1, #0
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f949 	bl	8007994 <USB_SetDevSpeed>
 8007702:	e008      	b.n	8007716 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007704:	2101      	movs	r1, #1
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f944 	bl	8007994 <USB_SetDevSpeed>
 800770c:	e003      	b.n	8007716 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800770e:	2103      	movs	r1, #3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f93f 	bl	8007994 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007716:	2110      	movs	r1, #16
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8f3 	bl	8007904 <USB_FlushTxFifo>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f911 	bl	8007950 <USB_FlushRxFifo>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	461a      	mov	r2, r3
 8007740:	2300      	movs	r3, #0
 8007742:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774a:	461a      	mov	r2, r3
 800774c:	2300      	movs	r3, #0
 800774e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	461a      	mov	r2, r3
 8007758:	2300      	movs	r3, #0
 800775a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	e043      	b.n	80077ea <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007778:	d118      	bne.n	80077ac <USB_DevInit+0x184>
    {
      if (i == 0U)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778c:	461a      	mov	r2, r3
 800778e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e013      	b.n	80077be <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a2:	461a      	mov	r2, r3
 80077a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	e008      	b.n	80077be <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b8:	461a      	mov	r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	461a      	mov	r2, r3
 80077cc:	2300      	movs	r3, #0
 80077ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	461a      	mov	r2, r3
 80077de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	3301      	adds	r3, #1
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d3b7      	bcc.n	8007762 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	e043      	b.n	8007880 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800780e:	d118      	bne.n	8007842 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007822:	461a      	mov	r2, r3
 8007824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e013      	b.n	8007854 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	461a      	mov	r2, r3
 800783a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e008      	b.n	8007854 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784e:	461a      	mov	r2, r3
 8007850:	2300      	movs	r3, #0
 8007852:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	461a      	mov	r2, r3
 8007862:	2300      	movs	r3, #0
 8007864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007872:	461a      	mov	r2, r3
 8007874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3301      	adds	r3, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	429a      	cmp	r2, r3
 8007886:	d3b7      	bcc.n	80077f8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d105      	bne.n	80078bc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f043 0210 	orr.w	r2, r3, #16
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <USB_DevInit+0x2d4>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f043 0208 	orr.w	r2, r3, #8
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d105      	bne.n	80078ec <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699a      	ldr	r2, [r3, #24]
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <USB_DevInit+0x2d8>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f8:	b004      	add	sp, #16
 80078fa:	4770      	bx	lr
 80078fc:	803c3800 	.word	0x803c3800
 8007900:	40000004 	.word	0x40000004

08007904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	019b      	lsls	r3, r3, #6
 8007916:	f043 0220 	orr.w	r2, r3, #32
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <USB_FlushTxFifo+0x48>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e006      	b.n	800793e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b20      	cmp	r3, #32
 800793a:	d0f0      	beq.n	800791e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	00030d40 	.word	0x00030d40

08007950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2210      	movs	r2, #16
 8007960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <USB_FlushRxFifo+0x40>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d901      	bls.n	8007974 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e006      	b.n	8007982 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b10      	cmp	r3, #16
 800797e:	d0f0      	beq.n	8007962 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	00030d40 	.word	0x00030d40

08007994 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b4:	4313      	orrs	r3, r2
 80079b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e0:	f043 0302 	orr.w	r3, r3, #2
 80079e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80079e6:	2003      	movs	r0, #3
 80079e8:	f7fc f9fe 	bl	8003de8 <HAL_Delay>

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <USB_CoreReset+0x64>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d901      	bls.n	8007a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e01b      	b.n	8007a4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	daf2      	bge.n	8007a04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f043 0201 	orr.w	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <USB_CoreReset+0x64>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d901      	bls.n	8007a40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e006      	b.n	8007a4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d0f0      	beq.n	8007a2e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	00030d40 	.word	0x00030d40

08007a60 <__errno>:
 8007a60:	4b01      	ldr	r3, [pc, #4]	; (8007a68 <__errno+0x8>)
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20000018 	.word	0x20000018

08007a6c <__libc_init_array>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4e0d      	ldr	r6, [pc, #52]	; (8007aa4 <__libc_init_array+0x38>)
 8007a70:	4c0d      	ldr	r4, [pc, #52]	; (8007aa8 <__libc_init_array+0x3c>)
 8007a72:	1ba4      	subs	r4, r4, r6
 8007a74:	10a4      	asrs	r4, r4, #2
 8007a76:	2500      	movs	r5, #0
 8007a78:	42a5      	cmp	r5, r4
 8007a7a:	d109      	bne.n	8007a90 <__libc_init_array+0x24>
 8007a7c:	4e0b      	ldr	r6, [pc, #44]	; (8007aac <__libc_init_array+0x40>)
 8007a7e:	4c0c      	ldr	r4, [pc, #48]	; (8007ab0 <__libc_init_array+0x44>)
 8007a80:	f002 fb1c 	bl	800a0bc <_init>
 8007a84:	1ba4      	subs	r4, r4, r6
 8007a86:	10a4      	asrs	r4, r4, #2
 8007a88:	2500      	movs	r5, #0
 8007a8a:	42a5      	cmp	r5, r4
 8007a8c:	d105      	bne.n	8007a9a <__libc_init_array+0x2e>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a94:	4798      	blx	r3
 8007a96:	3501      	adds	r5, #1
 8007a98:	e7ee      	b.n	8007a78 <__libc_init_array+0xc>
 8007a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a9e:	4798      	blx	r3
 8007aa0:	3501      	adds	r5, #1
 8007aa2:	e7f2      	b.n	8007a8a <__libc_init_array+0x1e>
 8007aa4:	0800a3d0 	.word	0x0800a3d0
 8007aa8:	0800a3d0 	.word	0x0800a3d0
 8007aac:	0800a3d0 	.word	0x0800a3d0
 8007ab0:	0800a3d4 	.word	0x0800a3d4

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <__cvt>:
 8007ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac6:	ed2d 8b02 	vpush	{d8}
 8007aca:	eeb0 8b40 	vmov.f64	d8, d0
 8007ace:	b085      	sub	sp, #20
 8007ad0:	4617      	mov	r7, r2
 8007ad2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007ad4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ad6:	ee18 2a90 	vmov	r2, s17
 8007ada:	f025 0520 	bic.w	r5, r5, #32
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	bfb6      	itet	lt
 8007ae2:	222d      	movlt	r2, #45	; 0x2d
 8007ae4:	2200      	movge	r2, #0
 8007ae6:	eeb1 8b40 	vneglt.f64	d8, d0
 8007aea:	2d46      	cmp	r5, #70	; 0x46
 8007aec:	460c      	mov	r4, r1
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	d004      	beq.n	8007afc <__cvt+0x38>
 8007af2:	2d45      	cmp	r5, #69	; 0x45
 8007af4:	d100      	bne.n	8007af8 <__cvt+0x34>
 8007af6:	3401      	adds	r4, #1
 8007af8:	2102      	movs	r1, #2
 8007afa:	e000      	b.n	8007afe <__cvt+0x3a>
 8007afc:	2103      	movs	r1, #3
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	ab02      	add	r3, sp, #8
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4622      	mov	r2, r4
 8007b08:	4633      	mov	r3, r6
 8007b0a:	eeb0 0b48 	vmov.f64	d0, d8
 8007b0e:	f000 fddb 	bl	80086c8 <_dtoa_r>
 8007b12:	2d47      	cmp	r5, #71	; 0x47
 8007b14:	d101      	bne.n	8007b1a <__cvt+0x56>
 8007b16:	07fb      	lsls	r3, r7, #31
 8007b18:	d51e      	bpl.n	8007b58 <__cvt+0x94>
 8007b1a:	2d46      	cmp	r5, #70	; 0x46
 8007b1c:	eb00 0304 	add.w	r3, r0, r4
 8007b20:	d10c      	bne.n	8007b3c <__cvt+0x78>
 8007b22:	7802      	ldrb	r2, [r0, #0]
 8007b24:	2a30      	cmp	r2, #48	; 0x30
 8007b26:	d107      	bne.n	8007b38 <__cvt+0x74>
 8007b28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b30:	bf1c      	itt	ne
 8007b32:	f1c4 0401 	rsbne	r4, r4, #1
 8007b36:	6034      	strne	r4, [r6, #0]
 8007b38:	6832      	ldr	r2, [r6, #0]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b44:	d007      	beq.n	8007b56 <__cvt+0x92>
 8007b46:	2130      	movs	r1, #48	; 0x30
 8007b48:	9a03      	ldr	r2, [sp, #12]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d204      	bcs.n	8007b58 <__cvt+0x94>
 8007b4e:	1c54      	adds	r4, r2, #1
 8007b50:	9403      	str	r4, [sp, #12]
 8007b52:	7011      	strb	r1, [r2, #0]
 8007b54:	e7f8      	b.n	8007b48 <__cvt+0x84>
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b5c:	1a1b      	subs	r3, r3, r0
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	b005      	add	sp, #20
 8007b62:	ecbd 8b02 	vpop	{d8}
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b68 <__exponent>:
 8007b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	bfba      	itte	lt
 8007b70:	4249      	neglt	r1, r1
 8007b72:	232d      	movlt	r3, #45	; 0x2d
 8007b74:	232b      	movge	r3, #43	; 0x2b
 8007b76:	2909      	cmp	r1, #9
 8007b78:	f804 2b02 	strb.w	r2, [r4], #2
 8007b7c:	7043      	strb	r3, [r0, #1]
 8007b7e:	dd20      	ble.n	8007bc2 <__exponent+0x5a>
 8007b80:	f10d 0307 	add.w	r3, sp, #7
 8007b84:	461f      	mov	r7, r3
 8007b86:	260a      	movs	r6, #10
 8007b88:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b8c:	fb06 1115 	mls	r1, r6, r5, r1
 8007b90:	3130      	adds	r1, #48	; 0x30
 8007b92:	2d09      	cmp	r5, #9
 8007b94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b98:	f103 32ff 	add.w	r2, r3, #4294967295
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	dc09      	bgt.n	8007bb4 <__exponent+0x4c>
 8007ba0:	3130      	adds	r1, #48	; 0x30
 8007ba2:	3b02      	subs	r3, #2
 8007ba4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ba8:	42bb      	cmp	r3, r7
 8007baa:	4622      	mov	r2, r4
 8007bac:	d304      	bcc.n	8007bb8 <__exponent+0x50>
 8007bae:	1a10      	subs	r0, r2, r0
 8007bb0:	b003      	add	sp, #12
 8007bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	e7e7      	b.n	8007b88 <__exponent+0x20>
 8007bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bbc:	f804 2b01 	strb.w	r2, [r4], #1
 8007bc0:	e7f2      	b.n	8007ba8 <__exponent+0x40>
 8007bc2:	2330      	movs	r3, #48	; 0x30
 8007bc4:	4419      	add	r1, r3
 8007bc6:	7083      	strb	r3, [r0, #2]
 8007bc8:	1d02      	adds	r2, r0, #4
 8007bca:	70c1      	strb	r1, [r0, #3]
 8007bcc:	e7ef      	b.n	8007bae <__exponent+0x46>
	...

08007bd0 <_printf_float>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	b08d      	sub	sp, #52	; 0x34
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	4616      	mov	r6, r2
 8007bda:	461f      	mov	r7, r3
 8007bdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007be0:	4605      	mov	r5, r0
 8007be2:	f001 fc37 	bl	8009454 <_localeconv_r>
 8007be6:	f8d0 b000 	ldr.w	fp, [r0]
 8007bea:	4658      	mov	r0, fp
 8007bec:	f7f8 fb28 	bl	8000240 <strlen>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf8:	9005      	str	r0, [sp, #20]
 8007bfa:	3307      	adds	r3, #7
 8007bfc:	f023 0307 	bic.w	r3, r3, #7
 8007c00:	f103 0108 	add.w	r1, r3, #8
 8007c04:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c08:	6822      	ldr	r2, [r4, #0]
 8007c0a:	f8c8 1000 	str.w	r1, [r8]
 8007c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007c16:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007ea0 <_printf_float+0x2d0>
 8007c1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007c1e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007c22:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2a:	dd24      	ble.n	8007c76 <_printf_float+0xa6>
 8007c2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c34:	d502      	bpl.n	8007c3c <_printf_float+0x6c>
 8007c36:	232d      	movs	r3, #45	; 0x2d
 8007c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c3c:	499a      	ldr	r1, [pc, #616]	; (8007ea8 <_printf_float+0x2d8>)
 8007c3e:	4b9b      	ldr	r3, [pc, #620]	; (8007eac <_printf_float+0x2dc>)
 8007c40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007c44:	bf8c      	ite	hi
 8007c46:	4688      	movhi	r8, r1
 8007c48:	4698      	movls	r8, r3
 8007c4a:	f022 0204 	bic.w	r2, r2, #4
 8007c4e:	2303      	movs	r3, #3
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	6022      	str	r2, [r4, #0]
 8007c54:	f04f 0a00 	mov.w	sl, #0
 8007c58:	9700      	str	r7, [sp, #0]
 8007c5a:	4633      	mov	r3, r6
 8007c5c:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 f9e1 	bl	8008028 <_printf_common>
 8007c66:	3001      	adds	r0, #1
 8007c68:	f040 8089 	bne.w	8007d7e <_printf_float+0x1ae>
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	b00d      	add	sp, #52	; 0x34
 8007c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c76:	eeb4 0b40 	vcmp.f64	d0, d0
 8007c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7e:	d702      	bvc.n	8007c86 <_printf_float+0xb6>
 8007c80:	498b      	ldr	r1, [pc, #556]	; (8007eb0 <_printf_float+0x2e0>)
 8007c82:	4b8c      	ldr	r3, [pc, #560]	; (8007eb4 <_printf_float+0x2e4>)
 8007c84:	e7dc      	b.n	8007c40 <_printf_float+0x70>
 8007c86:	6861      	ldr	r1, [r4, #4]
 8007c88:	1c4b      	adds	r3, r1, #1
 8007c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8e:	ab0a      	add	r3, sp, #40	; 0x28
 8007c90:	a809      	add	r0, sp, #36	; 0x24
 8007c92:	d13b      	bne.n	8007d0c <_printf_float+0x13c>
 8007c94:	2106      	movs	r1, #6
 8007c96:	6061      	str	r1, [r4, #4]
 8007c98:	f04f 0c00 	mov.w	ip, #0
 8007c9c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007ca0:	e9cd 0900 	strd	r0, r9, [sp]
 8007ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ca8:	6022      	str	r2, [r4, #0]
 8007caa:	6861      	ldr	r1, [r4, #4]
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff ff09 	bl	8007ac4 <__cvt>
 8007cb2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007cb6:	2b47      	cmp	r3, #71	; 0x47
 8007cb8:	4680      	mov	r8, r0
 8007cba:	d109      	bne.n	8007cd0 <_printf_float+0x100>
 8007cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbe:	1cd8      	adds	r0, r3, #3
 8007cc0:	db02      	blt.n	8007cc8 <_printf_float+0xf8>
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	dd47      	ble.n	8007d58 <_printf_float+0x188>
 8007cc8:	f1a9 0902 	sub.w	r9, r9, #2
 8007ccc:	fa5f f989 	uxtb.w	r9, r9
 8007cd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cd6:	d824      	bhi.n	8007d22 <_printf_float+0x152>
 8007cd8:	3901      	subs	r1, #1
 8007cda:	464a      	mov	r2, r9
 8007cdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ce0:	9109      	str	r1, [sp, #36]	; 0x24
 8007ce2:	f7ff ff41 	bl	8007b68 <__exponent>
 8007ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce8:	1813      	adds	r3, r2, r0
 8007cea:	2a01      	cmp	r2, #1
 8007cec:	4682      	mov	sl, r0
 8007cee:	6123      	str	r3, [r4, #16]
 8007cf0:	dc02      	bgt.n	8007cf8 <_printf_float+0x128>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	07d1      	lsls	r1, r2, #31
 8007cf6:	d501      	bpl.n	8007cfc <_printf_float+0x12c>
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	6123      	str	r3, [r4, #16]
 8007cfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0a9      	beq.n	8007c58 <_printf_float+0x88>
 8007d04:	232d      	movs	r3, #45	; 0x2d
 8007d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d0a:	e7a5      	b.n	8007c58 <_printf_float+0x88>
 8007d0c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007d10:	f000 8178 	beq.w	8008004 <_printf_float+0x434>
 8007d14:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d18:	d1be      	bne.n	8007c98 <_printf_float+0xc8>
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	d1bc      	bne.n	8007c98 <_printf_float+0xc8>
 8007d1e:	2101      	movs	r1, #1
 8007d20:	e7b9      	b.n	8007c96 <_printf_float+0xc6>
 8007d22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007d26:	d119      	bne.n	8007d5c <_printf_float+0x18c>
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	dd0c      	ble.n	8007d48 <_printf_float+0x178>
 8007d2e:	6121      	str	r1, [r4, #16]
 8007d30:	b913      	cbnz	r3, 8007d38 <_printf_float+0x168>
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	07d2      	lsls	r2, r2, #31
 8007d36:	d502      	bpl.n	8007d3e <_printf_float+0x16e>
 8007d38:	3301      	adds	r3, #1
 8007d3a:	440b      	add	r3, r1
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d42:	f04f 0a00 	mov.w	sl, #0
 8007d46:	e7d9      	b.n	8007cfc <_printf_float+0x12c>
 8007d48:	b913      	cbnz	r3, 8007d50 <_printf_float+0x180>
 8007d4a:	6822      	ldr	r2, [r4, #0]
 8007d4c:	07d0      	lsls	r0, r2, #31
 8007d4e:	d501      	bpl.n	8007d54 <_printf_float+0x184>
 8007d50:	3302      	adds	r3, #2
 8007d52:	e7f3      	b.n	8007d3c <_printf_float+0x16c>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e7f1      	b.n	8007d3c <_printf_float+0x16c>
 8007d58:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007d5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d60:	4293      	cmp	r3, r2
 8007d62:	db05      	blt.n	8007d70 <_printf_float+0x1a0>
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	07d1      	lsls	r1, r2, #31
 8007d6a:	d5e8      	bpl.n	8007d3e <_printf_float+0x16e>
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	e7e5      	b.n	8007d3c <_printf_float+0x16c>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bfd4      	ite	le
 8007d74:	f1c3 0302 	rsble	r3, r3, #2
 8007d78:	2301      	movgt	r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	e7de      	b.n	8007d3c <_printf_float+0x16c>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	055a      	lsls	r2, r3, #21
 8007d82:	d407      	bmi.n	8007d94 <_printf_float+0x1c4>
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	4642      	mov	r2, r8
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d12a      	bne.n	8007de8 <_printf_float+0x218>
 8007d92:	e76b      	b.n	8007c6c <_printf_float+0x9c>
 8007d94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d98:	f240 80de 	bls.w	8007f58 <_printf_float+0x388>
 8007d9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	d133      	bne.n	8007e12 <_printf_float+0x242>
 8007daa:	2301      	movs	r3, #1
 8007dac:	4a42      	ldr	r2, [pc, #264]	; (8007eb8 <_printf_float+0x2e8>)
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	f43f af59 	beq.w	8007c6c <_printf_float+0x9c>
 8007dba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	db02      	blt.n	8007dc8 <_printf_float+0x1f8>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	07d8      	lsls	r0, r3, #31
 8007dc6:	d50f      	bpl.n	8007de8 <_printf_float+0x218>
 8007dc8:	9b05      	ldr	r3, [sp, #20]
 8007dca:	465a      	mov	r2, fp
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f43f af4a 	beq.w	8007c6c <_printf_float+0x9c>
 8007dd8:	f04f 0800 	mov.w	r8, #0
 8007ddc:	f104 091a 	add.w	r9, r4, #26
 8007de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de2:	3b01      	subs	r3, #1
 8007de4:	4543      	cmp	r3, r8
 8007de6:	dc09      	bgt.n	8007dfc <_printf_float+0x22c>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	079b      	lsls	r3, r3, #30
 8007dec:	f100 8105 	bmi.w	8007ffa <_printf_float+0x42a>
 8007df0:	68e0      	ldr	r0, [r4, #12]
 8007df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df4:	4298      	cmp	r0, r3
 8007df6:	bfb8      	it	lt
 8007df8:	4618      	movlt	r0, r3
 8007dfa:	e739      	b.n	8007c70 <_printf_float+0xa0>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	464a      	mov	r2, r9
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af30 	beq.w	8007c6c <_printf_float+0x9c>
 8007e0c:	f108 0801 	add.w	r8, r8, #1
 8007e10:	e7e6      	b.n	8007de0 <_printf_float+0x210>
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dc2b      	bgt.n	8007e70 <_printf_float+0x2a0>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4a27      	ldr	r2, [pc, #156]	; (8007eb8 <_printf_float+0x2e8>)
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b8      	blx	r7
 8007e22:	3001      	adds	r0, #1
 8007e24:	f43f af22 	beq.w	8007c6c <_printf_float+0x9c>
 8007e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2a:	b923      	cbnz	r3, 8007e36 <_printf_float+0x266>
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	b913      	cbnz	r3, 8007e36 <_printf_float+0x266>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	07d9      	lsls	r1, r3, #31
 8007e34:	d5d8      	bpl.n	8007de8 <_printf_float+0x218>
 8007e36:	9b05      	ldr	r3, [sp, #20]
 8007e38:	465a      	mov	r2, fp
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	f43f af13 	beq.w	8007c6c <_printf_float+0x9c>
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	f104 0a1a 	add.w	sl, r4, #26
 8007e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e50:	425b      	negs	r3, r3
 8007e52:	454b      	cmp	r3, r9
 8007e54:	dc01      	bgt.n	8007e5a <_printf_float+0x28a>
 8007e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e58:	e795      	b.n	8007d86 <_printf_float+0x1b6>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	4631      	mov	r1, r6
 8007e60:	4628      	mov	r0, r5
 8007e62:	47b8      	blx	r7
 8007e64:	3001      	adds	r0, #1
 8007e66:	f43f af01 	beq.w	8007c6c <_printf_float+0x9c>
 8007e6a:	f109 0901 	add.w	r9, r9, #1
 8007e6e:	e7ee      	b.n	8007e4e <_printf_float+0x27e>
 8007e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e74:	429a      	cmp	r2, r3
 8007e76:	bfa8      	it	ge
 8007e78:	461a      	movge	r2, r3
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	4691      	mov	r9, r2
 8007e7e:	dd07      	ble.n	8007e90 <_printf_float+0x2c0>
 8007e80:	4613      	mov	r3, r2
 8007e82:	4631      	mov	r1, r6
 8007e84:	4642      	mov	r2, r8
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b8      	blx	r7
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	f43f aeee 	beq.w	8007c6c <_printf_float+0x9c>
 8007e90:	f104 031a 	add.w	r3, r4, #26
 8007e94:	f04f 0a00 	mov.w	sl, #0
 8007e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e9c:	9307      	str	r3, [sp, #28]
 8007e9e:	e017      	b.n	8007ed0 <_printf_float+0x300>
 8007ea0:	ffffffff 	.word	0xffffffff
 8007ea4:	7fefffff 	.word	0x7fefffff
 8007ea8:	0800a10c 	.word	0x0800a10c
 8007eac:	0800a108 	.word	0x0800a108
 8007eb0:	0800a114 	.word	0x0800a114
 8007eb4:	0800a110 	.word	0x0800a110
 8007eb8:	0800a118 	.word	0x0800a118
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	9a07      	ldr	r2, [sp, #28]
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f43f aed0 	beq.w	8007c6c <_printf_float+0x9c>
 8007ecc:	f10a 0a01 	add.w	sl, sl, #1
 8007ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	eba3 0309 	sub.w	r3, r3, r9
 8007ed8:	4553      	cmp	r3, sl
 8007eda:	dcef      	bgt.n	8007ebc <_printf_float+0x2ec>
 8007edc:	9b06      	ldr	r3, [sp, #24]
 8007ede:	4498      	add	r8, r3
 8007ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	db15      	blt.n	8007f14 <_printf_float+0x344>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	07da      	lsls	r2, r3, #31
 8007eec:	d412      	bmi.n	8007f14 <_printf_float+0x344>
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	9a06      	ldr	r2, [sp, #24]
 8007ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ef4:	1a9a      	subs	r2, r3, r2
 8007ef6:	eba3 0a01 	sub.w	sl, r3, r1
 8007efa:	4592      	cmp	sl, r2
 8007efc:	bfa8      	it	ge
 8007efe:	4692      	movge	sl, r2
 8007f00:	f1ba 0f00 	cmp.w	sl, #0
 8007f04:	dc0e      	bgt.n	8007f24 <_printf_float+0x354>
 8007f06:	f04f 0800 	mov.w	r8, #0
 8007f0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f0e:	f104 091a 	add.w	r9, r4, #26
 8007f12:	e019      	b.n	8007f48 <_printf_float+0x378>
 8007f14:	9b05      	ldr	r3, [sp, #20]
 8007f16:	465a      	mov	r2, fp
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d1e5      	bne.n	8007eee <_printf_float+0x31e>
 8007f22:	e6a3      	b.n	8007c6c <_printf_float+0x9c>
 8007f24:	4653      	mov	r3, sl
 8007f26:	4642      	mov	r2, r8
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d1e9      	bne.n	8007f06 <_printf_float+0x336>
 8007f32:	e69b      	b.n	8007c6c <_printf_float+0x9c>
 8007f34:	2301      	movs	r3, #1
 8007f36:	464a      	mov	r2, r9
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	47b8      	blx	r7
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f43f ae94 	beq.w	8007c6c <_printf_float+0x9c>
 8007f44:	f108 0801 	add.w	r8, r8, #1
 8007f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	eba3 030a 	sub.w	r3, r3, sl
 8007f52:	4543      	cmp	r3, r8
 8007f54:	dcee      	bgt.n	8007f34 <_printf_float+0x364>
 8007f56:	e747      	b.n	8007de8 <_printf_float+0x218>
 8007f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f5a:	2a01      	cmp	r2, #1
 8007f5c:	dc01      	bgt.n	8007f62 <_printf_float+0x392>
 8007f5e:	07db      	lsls	r3, r3, #31
 8007f60:	d539      	bpl.n	8007fd6 <_printf_float+0x406>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4642      	mov	r2, r8
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f ae7d 	beq.w	8007c6c <_printf_float+0x9c>
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	465a      	mov	r2, fp
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	f108 0801 	add.w	r8, r8, #1
 8007f82:	f43f ae73 	beq.w	8007c6c <_printf_float+0x9c>
 8007f86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f94:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f98:	d018      	beq.n	8007fcc <_printf_float+0x3fc>
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d10e      	bne.n	8007fc4 <_printf_float+0x3f4>
 8007fa6:	e661      	b.n	8007c6c <_printf_float+0x9c>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	464a      	mov	r2, r9
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae5a 	beq.w	8007c6c <_printf_float+0x9c>
 8007fb8:	f108 0801 	add.w	r8, r8, #1
 8007fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	4543      	cmp	r3, r8
 8007fc2:	dcf1      	bgt.n	8007fa8 <_printf_float+0x3d8>
 8007fc4:	4653      	mov	r3, sl
 8007fc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fca:	e6dd      	b.n	8007d88 <_printf_float+0x1b8>
 8007fcc:	f04f 0800 	mov.w	r8, #0
 8007fd0:	f104 091a 	add.w	r9, r4, #26
 8007fd4:	e7f2      	b.n	8007fbc <_printf_float+0x3ec>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e7df      	b.n	8007f9a <_printf_float+0x3ca>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	464a      	mov	r2, r9
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	f43f ae41 	beq.w	8007c6c <_printf_float+0x9c>
 8007fea:	f108 0801 	add.w	r8, r8, #1
 8007fee:	68e3      	ldr	r3, [r4, #12]
 8007ff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	4543      	cmp	r3, r8
 8007ff6:	dcf0      	bgt.n	8007fda <_printf_float+0x40a>
 8007ff8:	e6fa      	b.n	8007df0 <_printf_float+0x220>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	f104 0919 	add.w	r9, r4, #25
 8008002:	e7f4      	b.n	8007fee <_printf_float+0x41e>
 8008004:	2900      	cmp	r1, #0
 8008006:	f43f ae8a 	beq.w	8007d1e <_printf_float+0x14e>
 800800a:	f04f 0c00 	mov.w	ip, #0
 800800e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8008012:	e9cd 0900 	strd	r0, r9, [sp]
 8008016:	6022      	str	r2, [r4, #0]
 8008018:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800801c:	4628      	mov	r0, r5
 800801e:	f7ff fd51 	bl	8007ac4 <__cvt>
 8008022:	4680      	mov	r8, r0
 8008024:	e64a      	b.n	8007cbc <_printf_float+0xec>
 8008026:	bf00      	nop

08008028 <_printf_common>:
 8008028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	4691      	mov	r9, r2
 800802e:	461f      	mov	r7, r3
 8008030:	688a      	ldr	r2, [r1, #8]
 8008032:	690b      	ldr	r3, [r1, #16]
 8008034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008038:	4293      	cmp	r3, r2
 800803a:	bfb8      	it	lt
 800803c:	4613      	movlt	r3, r2
 800803e:	f8c9 3000 	str.w	r3, [r9]
 8008042:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008046:	4606      	mov	r6, r0
 8008048:	460c      	mov	r4, r1
 800804a:	b112      	cbz	r2, 8008052 <_printf_common+0x2a>
 800804c:	3301      	adds	r3, #1
 800804e:	f8c9 3000 	str.w	r3, [r9]
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	0699      	lsls	r1, r3, #26
 8008056:	bf42      	ittt	mi
 8008058:	f8d9 3000 	ldrmi.w	r3, [r9]
 800805c:	3302      	addmi	r3, #2
 800805e:	f8c9 3000 	strmi.w	r3, [r9]
 8008062:	6825      	ldr	r5, [r4, #0]
 8008064:	f015 0506 	ands.w	r5, r5, #6
 8008068:	d107      	bne.n	800807a <_printf_common+0x52>
 800806a:	f104 0a19 	add.w	sl, r4, #25
 800806e:	68e3      	ldr	r3, [r4, #12]
 8008070:	f8d9 2000 	ldr.w	r2, [r9]
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	42ab      	cmp	r3, r5
 8008078:	dc28      	bgt.n	80080cc <_printf_common+0xa4>
 800807a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	3300      	adds	r3, #0
 8008082:	bf18      	it	ne
 8008084:	2301      	movne	r3, #1
 8008086:	0692      	lsls	r2, r2, #26
 8008088:	d42d      	bmi.n	80080e6 <_printf_common+0xbe>
 800808a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800808e:	4639      	mov	r1, r7
 8008090:	4630      	mov	r0, r6
 8008092:	47c0      	blx	r8
 8008094:	3001      	adds	r0, #1
 8008096:	d020      	beq.n	80080da <_printf_common+0xb2>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	68e5      	ldr	r5, [r4, #12]
 800809c:	f8d9 2000 	ldr.w	r2, [r9]
 80080a0:	f003 0306 	and.w	r3, r3, #6
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	bf08      	it	eq
 80080a8:	1aad      	subeq	r5, r5, r2
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	6922      	ldr	r2, [r4, #16]
 80080ae:	bf0c      	ite	eq
 80080b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b4:	2500      	movne	r5, #0
 80080b6:	4293      	cmp	r3, r2
 80080b8:	bfc4      	itt	gt
 80080ba:	1a9b      	subgt	r3, r3, r2
 80080bc:	18ed      	addgt	r5, r5, r3
 80080be:	f04f 0900 	mov.w	r9, #0
 80080c2:	341a      	adds	r4, #26
 80080c4:	454d      	cmp	r5, r9
 80080c6:	d11a      	bne.n	80080fe <_printf_common+0xd6>
 80080c8:	2000      	movs	r0, #0
 80080ca:	e008      	b.n	80080de <_printf_common+0xb6>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4652      	mov	r2, sl
 80080d0:	4639      	mov	r1, r7
 80080d2:	4630      	mov	r0, r6
 80080d4:	47c0      	blx	r8
 80080d6:	3001      	adds	r0, #1
 80080d8:	d103      	bne.n	80080e2 <_printf_common+0xba>
 80080da:	f04f 30ff 	mov.w	r0, #4294967295
 80080de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e2:	3501      	adds	r5, #1
 80080e4:	e7c3      	b.n	800806e <_printf_common+0x46>
 80080e6:	18e1      	adds	r1, r4, r3
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	2030      	movs	r0, #48	; 0x30
 80080ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080f0:	4422      	add	r2, r4
 80080f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080fa:	3302      	adds	r3, #2
 80080fc:	e7c5      	b.n	800808a <_printf_common+0x62>
 80080fe:	2301      	movs	r3, #1
 8008100:	4622      	mov	r2, r4
 8008102:	4639      	mov	r1, r7
 8008104:	4630      	mov	r0, r6
 8008106:	47c0      	blx	r8
 8008108:	3001      	adds	r0, #1
 800810a:	d0e6      	beq.n	80080da <_printf_common+0xb2>
 800810c:	f109 0901 	add.w	r9, r9, #1
 8008110:	e7d8      	b.n	80080c4 <_printf_common+0x9c>
	...

08008114 <_printf_i>:
 8008114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008118:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800811c:	460c      	mov	r4, r1
 800811e:	7e09      	ldrb	r1, [r1, #24]
 8008120:	b085      	sub	sp, #20
 8008122:	296e      	cmp	r1, #110	; 0x6e
 8008124:	4617      	mov	r7, r2
 8008126:	4606      	mov	r6, r0
 8008128:	4698      	mov	r8, r3
 800812a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800812c:	f000 80b3 	beq.w	8008296 <_printf_i+0x182>
 8008130:	d822      	bhi.n	8008178 <_printf_i+0x64>
 8008132:	2963      	cmp	r1, #99	; 0x63
 8008134:	d036      	beq.n	80081a4 <_printf_i+0x90>
 8008136:	d80a      	bhi.n	800814e <_printf_i+0x3a>
 8008138:	2900      	cmp	r1, #0
 800813a:	f000 80b9 	beq.w	80082b0 <_printf_i+0x19c>
 800813e:	2958      	cmp	r1, #88	; 0x58
 8008140:	f000 8083 	beq.w	800824a <_printf_i+0x136>
 8008144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008148:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800814c:	e032      	b.n	80081b4 <_printf_i+0xa0>
 800814e:	2964      	cmp	r1, #100	; 0x64
 8008150:	d001      	beq.n	8008156 <_printf_i+0x42>
 8008152:	2969      	cmp	r1, #105	; 0x69
 8008154:	d1f6      	bne.n	8008144 <_printf_i+0x30>
 8008156:	6820      	ldr	r0, [r4, #0]
 8008158:	6813      	ldr	r3, [r2, #0]
 800815a:	0605      	lsls	r5, r0, #24
 800815c:	f103 0104 	add.w	r1, r3, #4
 8008160:	d52a      	bpl.n	80081b8 <_printf_i+0xa4>
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6011      	str	r1, [r2, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	da03      	bge.n	8008172 <_printf_i+0x5e>
 800816a:	222d      	movs	r2, #45	; 0x2d
 800816c:	425b      	negs	r3, r3
 800816e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008172:	486f      	ldr	r0, [pc, #444]	; (8008330 <_printf_i+0x21c>)
 8008174:	220a      	movs	r2, #10
 8008176:	e039      	b.n	80081ec <_printf_i+0xd8>
 8008178:	2973      	cmp	r1, #115	; 0x73
 800817a:	f000 809d 	beq.w	80082b8 <_printf_i+0x1a4>
 800817e:	d808      	bhi.n	8008192 <_printf_i+0x7e>
 8008180:	296f      	cmp	r1, #111	; 0x6f
 8008182:	d020      	beq.n	80081c6 <_printf_i+0xb2>
 8008184:	2970      	cmp	r1, #112	; 0x70
 8008186:	d1dd      	bne.n	8008144 <_printf_i+0x30>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	f043 0320 	orr.w	r3, r3, #32
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	e003      	b.n	800819a <_printf_i+0x86>
 8008192:	2975      	cmp	r1, #117	; 0x75
 8008194:	d017      	beq.n	80081c6 <_printf_i+0xb2>
 8008196:	2978      	cmp	r1, #120	; 0x78
 8008198:	d1d4      	bne.n	8008144 <_printf_i+0x30>
 800819a:	2378      	movs	r3, #120	; 0x78
 800819c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081a0:	4864      	ldr	r0, [pc, #400]	; (8008334 <_printf_i+0x220>)
 80081a2:	e055      	b.n	8008250 <_printf_i+0x13c>
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	1d19      	adds	r1, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6011      	str	r1, [r2, #0]
 80081ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081b4:	2301      	movs	r3, #1
 80081b6:	e08c      	b.n	80082d2 <_printf_i+0x1be>
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6011      	str	r1, [r2, #0]
 80081bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081c0:	bf18      	it	ne
 80081c2:	b21b      	sxthne	r3, r3
 80081c4:	e7cf      	b.n	8008166 <_printf_i+0x52>
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	6825      	ldr	r5, [r4, #0]
 80081ca:	1d18      	adds	r0, r3, #4
 80081cc:	6010      	str	r0, [r2, #0]
 80081ce:	0628      	lsls	r0, r5, #24
 80081d0:	d501      	bpl.n	80081d6 <_printf_i+0xc2>
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	e002      	b.n	80081dc <_printf_i+0xc8>
 80081d6:	0668      	lsls	r0, r5, #25
 80081d8:	d5fb      	bpl.n	80081d2 <_printf_i+0xbe>
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	4854      	ldr	r0, [pc, #336]	; (8008330 <_printf_i+0x21c>)
 80081de:	296f      	cmp	r1, #111	; 0x6f
 80081e0:	bf14      	ite	ne
 80081e2:	220a      	movne	r2, #10
 80081e4:	2208      	moveq	r2, #8
 80081e6:	2100      	movs	r1, #0
 80081e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081ec:	6865      	ldr	r5, [r4, #4]
 80081ee:	60a5      	str	r5, [r4, #8]
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	f2c0 8095 	blt.w	8008320 <_printf_i+0x20c>
 80081f6:	6821      	ldr	r1, [r4, #0]
 80081f8:	f021 0104 	bic.w	r1, r1, #4
 80081fc:	6021      	str	r1, [r4, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d13d      	bne.n	800827e <_printf_i+0x16a>
 8008202:	2d00      	cmp	r5, #0
 8008204:	f040 808e 	bne.w	8008324 <_printf_i+0x210>
 8008208:	4665      	mov	r5, ip
 800820a:	2a08      	cmp	r2, #8
 800820c:	d10b      	bne.n	8008226 <_printf_i+0x112>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	07db      	lsls	r3, r3, #31
 8008212:	d508      	bpl.n	8008226 <_printf_i+0x112>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	6862      	ldr	r2, [r4, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	bfde      	ittt	le
 800821c:	2330      	movle	r3, #48	; 0x30
 800821e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008222:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008226:	ebac 0305 	sub.w	r3, ip, r5
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	f8cd 8000 	str.w	r8, [sp]
 8008230:	463b      	mov	r3, r7
 8008232:	aa03      	add	r2, sp, #12
 8008234:	4621      	mov	r1, r4
 8008236:	4630      	mov	r0, r6
 8008238:	f7ff fef6 	bl	8008028 <_printf_common>
 800823c:	3001      	adds	r0, #1
 800823e:	d14d      	bne.n	80082dc <_printf_i+0x1c8>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	b005      	add	sp, #20
 8008246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800824a:	4839      	ldr	r0, [pc, #228]	; (8008330 <_printf_i+0x21c>)
 800824c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008250:	6813      	ldr	r3, [r2, #0]
 8008252:	6821      	ldr	r1, [r4, #0]
 8008254:	1d1d      	adds	r5, r3, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6015      	str	r5, [r2, #0]
 800825a:	060a      	lsls	r2, r1, #24
 800825c:	d50b      	bpl.n	8008276 <_printf_i+0x162>
 800825e:	07ca      	lsls	r2, r1, #31
 8008260:	bf44      	itt	mi
 8008262:	f041 0120 	orrmi.w	r1, r1, #32
 8008266:	6021      	strmi	r1, [r4, #0]
 8008268:	b91b      	cbnz	r3, 8008272 <_printf_i+0x15e>
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	f022 0220 	bic.w	r2, r2, #32
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	2210      	movs	r2, #16
 8008274:	e7b7      	b.n	80081e6 <_printf_i+0xd2>
 8008276:	064d      	lsls	r5, r1, #25
 8008278:	bf48      	it	mi
 800827a:	b29b      	uxthmi	r3, r3
 800827c:	e7ef      	b.n	800825e <_printf_i+0x14a>
 800827e:	4665      	mov	r5, ip
 8008280:	fbb3 f1f2 	udiv	r1, r3, r2
 8008284:	fb02 3311 	mls	r3, r2, r1, r3
 8008288:	5cc3      	ldrb	r3, [r0, r3]
 800828a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800828e:	460b      	mov	r3, r1
 8008290:	2900      	cmp	r1, #0
 8008292:	d1f5      	bne.n	8008280 <_printf_i+0x16c>
 8008294:	e7b9      	b.n	800820a <_printf_i+0xf6>
 8008296:	6813      	ldr	r3, [r2, #0]
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	6961      	ldr	r1, [r4, #20]
 800829c:	1d18      	adds	r0, r3, #4
 800829e:	6010      	str	r0, [r2, #0]
 80082a0:	0628      	lsls	r0, r5, #24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	d501      	bpl.n	80082aa <_printf_i+0x196>
 80082a6:	6019      	str	r1, [r3, #0]
 80082a8:	e002      	b.n	80082b0 <_printf_i+0x19c>
 80082aa:	066a      	lsls	r2, r5, #25
 80082ac:	d5fb      	bpl.n	80082a6 <_printf_i+0x192>
 80082ae:	8019      	strh	r1, [r3, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	6123      	str	r3, [r4, #16]
 80082b4:	4665      	mov	r5, ip
 80082b6:	e7b9      	b.n	800822c <_printf_i+0x118>
 80082b8:	6813      	ldr	r3, [r2, #0]
 80082ba:	1d19      	adds	r1, r3, #4
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	681d      	ldr	r5, [r3, #0]
 80082c0:	6862      	ldr	r2, [r4, #4]
 80082c2:	2100      	movs	r1, #0
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7f7 ffc3 	bl	8000250 <memchr>
 80082ca:	b108      	cbz	r0, 80082d0 <_printf_i+0x1bc>
 80082cc:	1b40      	subs	r0, r0, r5
 80082ce:	6060      	str	r0, [r4, #4]
 80082d0:	6863      	ldr	r3, [r4, #4]
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	2300      	movs	r3, #0
 80082d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082da:	e7a7      	b.n	800822c <_printf_i+0x118>
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	462a      	mov	r2, r5
 80082e0:	4639      	mov	r1, r7
 80082e2:	4630      	mov	r0, r6
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0aa      	beq.n	8008240 <_printf_i+0x12c>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	079b      	lsls	r3, r3, #30
 80082ee:	d413      	bmi.n	8008318 <_printf_i+0x204>
 80082f0:	68e0      	ldr	r0, [r4, #12]
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	4298      	cmp	r0, r3
 80082f6:	bfb8      	it	lt
 80082f8:	4618      	movlt	r0, r3
 80082fa:	e7a3      	b.n	8008244 <_printf_i+0x130>
 80082fc:	2301      	movs	r3, #1
 80082fe:	464a      	mov	r2, r9
 8008300:	4639      	mov	r1, r7
 8008302:	4630      	mov	r0, r6
 8008304:	47c0      	blx	r8
 8008306:	3001      	adds	r0, #1
 8008308:	d09a      	beq.n	8008240 <_printf_i+0x12c>
 800830a:	3501      	adds	r5, #1
 800830c:	68e3      	ldr	r3, [r4, #12]
 800830e:	9a03      	ldr	r2, [sp, #12]
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	42ab      	cmp	r3, r5
 8008314:	dcf2      	bgt.n	80082fc <_printf_i+0x1e8>
 8008316:	e7eb      	b.n	80082f0 <_printf_i+0x1dc>
 8008318:	2500      	movs	r5, #0
 800831a:	f104 0919 	add.w	r9, r4, #25
 800831e:	e7f5      	b.n	800830c <_printf_i+0x1f8>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ac      	bne.n	800827e <_printf_i+0x16a>
 8008324:	7803      	ldrb	r3, [r0, #0]
 8008326:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800832a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800832e:	e76c      	b.n	800820a <_printf_i+0xf6>
 8008330:	0800a11a 	.word	0x0800a11a
 8008334:	0800a12b 	.word	0x0800a12b

08008338 <iprintf>:
 8008338:	b40f      	push	{r0, r1, r2, r3}
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <iprintf+0x2c>)
 800833c:	b513      	push	{r0, r1, r4, lr}
 800833e:	681c      	ldr	r4, [r3, #0]
 8008340:	b124      	cbz	r4, 800834c <iprintf+0x14>
 8008342:	69a3      	ldr	r3, [r4, #24]
 8008344:	b913      	cbnz	r3, 800834c <iprintf+0x14>
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fffa 	bl	8009340 <__sinit>
 800834c:	ab05      	add	r3, sp, #20
 800834e:	9a04      	ldr	r2, [sp, #16]
 8008350:	68a1      	ldr	r1, [r4, #8]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	4620      	mov	r0, r4
 8008356:	f001 fcbd 	bl	8009cd4 <_vfiprintf_r>
 800835a:	b002      	add	sp, #8
 800835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008360:	b004      	add	sp, #16
 8008362:	4770      	bx	lr
 8008364:	20000018 	.word	0x20000018

08008368 <_puts_r>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	460e      	mov	r6, r1
 800836c:	4605      	mov	r5, r0
 800836e:	b118      	cbz	r0, 8008378 <_puts_r+0x10>
 8008370:	6983      	ldr	r3, [r0, #24]
 8008372:	b90b      	cbnz	r3, 8008378 <_puts_r+0x10>
 8008374:	f000 ffe4 	bl	8009340 <__sinit>
 8008378:	69ab      	ldr	r3, [r5, #24]
 800837a:	68ac      	ldr	r4, [r5, #8]
 800837c:	b913      	cbnz	r3, 8008384 <_puts_r+0x1c>
 800837e:	4628      	mov	r0, r5
 8008380:	f000 ffde 	bl	8009340 <__sinit>
 8008384:	4b23      	ldr	r3, [pc, #140]	; (8008414 <_puts_r+0xac>)
 8008386:	429c      	cmp	r4, r3
 8008388:	d117      	bne.n	80083ba <_puts_r+0x52>
 800838a:	686c      	ldr	r4, [r5, #4]
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	071b      	lsls	r3, r3, #28
 8008390:	d51d      	bpl.n	80083ce <_puts_r+0x66>
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	b1db      	cbz	r3, 80083ce <_puts_r+0x66>
 8008396:	3e01      	subs	r6, #1
 8008398:	68a3      	ldr	r3, [r4, #8]
 800839a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800839e:	3b01      	subs	r3, #1
 80083a0:	60a3      	str	r3, [r4, #8]
 80083a2:	b9e9      	cbnz	r1, 80083e0 <_puts_r+0x78>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da2e      	bge.n	8008406 <_puts_r+0x9e>
 80083a8:	4622      	mov	r2, r4
 80083aa:	210a      	movs	r1, #10
 80083ac:	4628      	mov	r0, r5
 80083ae:	f000 f83f 	bl	8008430 <__swbuf_r>
 80083b2:	3001      	adds	r0, #1
 80083b4:	d011      	beq.n	80083da <_puts_r+0x72>
 80083b6:	200a      	movs	r0, #10
 80083b8:	e011      	b.n	80083de <_puts_r+0x76>
 80083ba:	4b17      	ldr	r3, [pc, #92]	; (8008418 <_puts_r+0xb0>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	d101      	bne.n	80083c4 <_puts_r+0x5c>
 80083c0:	68ac      	ldr	r4, [r5, #8]
 80083c2:	e7e3      	b.n	800838c <_puts_r+0x24>
 80083c4:	4b15      	ldr	r3, [pc, #84]	; (800841c <_puts_r+0xb4>)
 80083c6:	429c      	cmp	r4, r3
 80083c8:	bf08      	it	eq
 80083ca:	68ec      	ldreq	r4, [r5, #12]
 80083cc:	e7de      	b.n	800838c <_puts_r+0x24>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f87f 	bl	80084d4 <__swsetup_r>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d0dd      	beq.n	8008396 <_puts_r+0x2e>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da04      	bge.n	80083ee <_puts_r+0x86>
 80083e4:	69a2      	ldr	r2, [r4, #24]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	dc06      	bgt.n	80083f8 <_puts_r+0x90>
 80083ea:	290a      	cmp	r1, #10
 80083ec:	d004      	beq.n	80083f8 <_puts_r+0x90>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	7019      	strb	r1, [r3, #0]
 80083f6:	e7cf      	b.n	8008398 <_puts_r+0x30>
 80083f8:	4622      	mov	r2, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f818 	bl	8008430 <__swbuf_r>
 8008400:	3001      	adds	r0, #1
 8008402:	d1c9      	bne.n	8008398 <_puts_r+0x30>
 8008404:	e7e9      	b.n	80083da <_puts_r+0x72>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	200a      	movs	r0, #10
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	6022      	str	r2, [r4, #0]
 800840e:	7018      	strb	r0, [r3, #0]
 8008410:	e7e5      	b.n	80083de <_puts_r+0x76>
 8008412:	bf00      	nop
 8008414:	0800a16c 	.word	0x0800a16c
 8008418:	0800a18c 	.word	0x0800a18c
 800841c:	0800a14c 	.word	0x0800a14c

08008420 <puts>:
 8008420:	4b02      	ldr	r3, [pc, #8]	; (800842c <puts+0xc>)
 8008422:	4601      	mov	r1, r0
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	f7ff bf9f 	b.w	8008368 <_puts_r>
 800842a:	bf00      	nop
 800842c:	20000018 	.word	0x20000018

08008430 <__swbuf_r>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	460e      	mov	r6, r1
 8008434:	4614      	mov	r4, r2
 8008436:	4605      	mov	r5, r0
 8008438:	b118      	cbz	r0, 8008442 <__swbuf_r+0x12>
 800843a:	6983      	ldr	r3, [r0, #24]
 800843c:	b90b      	cbnz	r3, 8008442 <__swbuf_r+0x12>
 800843e:	f000 ff7f 	bl	8009340 <__sinit>
 8008442:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <__swbuf_r+0x98>)
 8008444:	429c      	cmp	r4, r3
 8008446:	d12a      	bne.n	800849e <__swbuf_r+0x6e>
 8008448:	686c      	ldr	r4, [r5, #4]
 800844a:	69a3      	ldr	r3, [r4, #24]
 800844c:	60a3      	str	r3, [r4, #8]
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	071a      	lsls	r2, r3, #28
 8008452:	d52e      	bpl.n	80084b2 <__swbuf_r+0x82>
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	b363      	cbz	r3, 80084b2 <__swbuf_r+0x82>
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	6820      	ldr	r0, [r4, #0]
 800845c:	1ac0      	subs	r0, r0, r3
 800845e:	6963      	ldr	r3, [r4, #20]
 8008460:	b2f6      	uxtb	r6, r6
 8008462:	4283      	cmp	r3, r0
 8008464:	4637      	mov	r7, r6
 8008466:	dc04      	bgt.n	8008472 <__swbuf_r+0x42>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fefe 	bl	800926c <_fflush_r>
 8008470:	bb28      	cbnz	r0, 80084be <__swbuf_r+0x8e>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	60a3      	str	r3, [r4, #8]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	701e      	strb	r6, [r3, #0]
 8008480:	6963      	ldr	r3, [r4, #20]
 8008482:	3001      	adds	r0, #1
 8008484:	4283      	cmp	r3, r0
 8008486:	d004      	beq.n	8008492 <__swbuf_r+0x62>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	07db      	lsls	r3, r3, #31
 800848c:	d519      	bpl.n	80084c2 <__swbuf_r+0x92>
 800848e:	2e0a      	cmp	r6, #10
 8008490:	d117      	bne.n	80084c2 <__swbuf_r+0x92>
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f000 fee9 	bl	800926c <_fflush_r>
 800849a:	b190      	cbz	r0, 80084c2 <__swbuf_r+0x92>
 800849c:	e00f      	b.n	80084be <__swbuf_r+0x8e>
 800849e:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <__swbuf_r+0x9c>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	d101      	bne.n	80084a8 <__swbuf_r+0x78>
 80084a4:	68ac      	ldr	r4, [r5, #8]
 80084a6:	e7d0      	b.n	800844a <__swbuf_r+0x1a>
 80084a8:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <__swbuf_r+0xa0>)
 80084aa:	429c      	cmp	r4, r3
 80084ac:	bf08      	it	eq
 80084ae:	68ec      	ldreq	r4, [r5, #12]
 80084b0:	e7cb      	b.n	800844a <__swbuf_r+0x1a>
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 f80d 	bl	80084d4 <__swsetup_r>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d0cc      	beq.n	8008458 <__swbuf_r+0x28>
 80084be:	f04f 37ff 	mov.w	r7, #4294967295
 80084c2:	4638      	mov	r0, r7
 80084c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c6:	bf00      	nop
 80084c8:	0800a16c 	.word	0x0800a16c
 80084cc:	0800a18c 	.word	0x0800a18c
 80084d0:	0800a14c 	.word	0x0800a14c

080084d4 <__swsetup_r>:
 80084d4:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <__swsetup_r+0xcc>)
 80084d6:	b570      	push	{r4, r5, r6, lr}
 80084d8:	681d      	ldr	r5, [r3, #0]
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	b125      	cbz	r5, 80084ea <__swsetup_r+0x16>
 80084e0:	69ab      	ldr	r3, [r5, #24]
 80084e2:	b913      	cbnz	r3, 80084ea <__swsetup_r+0x16>
 80084e4:	4628      	mov	r0, r5
 80084e6:	f000 ff2b 	bl	8009340 <__sinit>
 80084ea:	4b2e      	ldr	r3, [pc, #184]	; (80085a4 <__swsetup_r+0xd0>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	d10f      	bne.n	8008510 <__swsetup_r+0x3c>
 80084f0:	686c      	ldr	r4, [r5, #4]
 80084f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	0715      	lsls	r5, r2, #28
 80084fa:	d42c      	bmi.n	8008556 <__swsetup_r+0x82>
 80084fc:	06d0      	lsls	r0, r2, #27
 80084fe:	d411      	bmi.n	8008524 <__swsetup_r+0x50>
 8008500:	2209      	movs	r2, #9
 8008502:	6032      	str	r2, [r6, #0]
 8008504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	f04f 30ff 	mov.w	r0, #4294967295
 800850e:	e03e      	b.n	800858e <__swsetup_r+0xba>
 8008510:	4b25      	ldr	r3, [pc, #148]	; (80085a8 <__swsetup_r+0xd4>)
 8008512:	429c      	cmp	r4, r3
 8008514:	d101      	bne.n	800851a <__swsetup_r+0x46>
 8008516:	68ac      	ldr	r4, [r5, #8]
 8008518:	e7eb      	b.n	80084f2 <__swsetup_r+0x1e>
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <__swsetup_r+0xd8>)
 800851c:	429c      	cmp	r4, r3
 800851e:	bf08      	it	eq
 8008520:	68ec      	ldreq	r4, [r5, #12]
 8008522:	e7e6      	b.n	80084f2 <__swsetup_r+0x1e>
 8008524:	0751      	lsls	r1, r2, #29
 8008526:	d512      	bpl.n	800854e <__swsetup_r+0x7a>
 8008528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852a:	b141      	cbz	r1, 800853e <__swsetup_r+0x6a>
 800852c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008530:	4299      	cmp	r1, r3
 8008532:	d002      	beq.n	800853a <__swsetup_r+0x66>
 8008534:	4630      	mov	r0, r6
 8008536:	f001 fafb 	bl	8009b30 <_free_r>
 800853a:	2300      	movs	r3, #0
 800853c:	6363      	str	r3, [r4, #52]	; 0x34
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	2300      	movs	r3, #0
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f043 0308 	orr.w	r3, r3, #8
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	b94b      	cbnz	r3, 800856e <__swsetup_r+0x9a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008564:	d003      	beq.n	800856e <__swsetup_r+0x9a>
 8008566:	4621      	mov	r1, r4
 8008568:	4630      	mov	r0, r6
 800856a:	f000 ffa5 	bl	80094b8 <__smakebuf_r>
 800856e:	89a2      	ldrh	r2, [r4, #12]
 8008570:	f012 0301 	ands.w	r3, r2, #1
 8008574:	d00c      	beq.n	8008590 <__swsetup_r+0xbc>
 8008576:	2300      	movs	r3, #0
 8008578:	60a3      	str	r3, [r4, #8]
 800857a:	6963      	ldr	r3, [r4, #20]
 800857c:	425b      	negs	r3, r3
 800857e:	61a3      	str	r3, [r4, #24]
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	b953      	cbnz	r3, 800859a <__swsetup_r+0xc6>
 8008584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008588:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800858c:	d1ba      	bne.n	8008504 <__swsetup_r+0x30>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	0792      	lsls	r2, r2, #30
 8008592:	bf58      	it	pl
 8008594:	6963      	ldrpl	r3, [r4, #20]
 8008596:	60a3      	str	r3, [r4, #8]
 8008598:	e7f2      	b.n	8008580 <__swsetup_r+0xac>
 800859a:	2000      	movs	r0, #0
 800859c:	e7f7      	b.n	800858e <__swsetup_r+0xba>
 800859e:	bf00      	nop
 80085a0:	20000018 	.word	0x20000018
 80085a4:	0800a16c 	.word	0x0800a16c
 80085a8:	0800a18c 	.word	0x0800a18c
 80085ac:	0800a14c 	.word	0x0800a14c

080085b0 <quorem>:
 80085b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	6903      	ldr	r3, [r0, #16]
 80085b6:	690c      	ldr	r4, [r1, #16]
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	4680      	mov	r8, r0
 80085bc:	f2c0 8082 	blt.w	80086c4 <quorem+0x114>
 80085c0:	3c01      	subs	r4, #1
 80085c2:	f101 0714 	add.w	r7, r1, #20
 80085c6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80085ca:	f100 0614 	add.w	r6, r0, #20
 80085ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80085d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80085d6:	eb06 030c 	add.w	r3, r6, ip
 80085da:	3501      	adds	r5, #1
 80085dc:	eb07 090c 	add.w	r9, r7, ip
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	fbb0 f5f5 	udiv	r5, r0, r5
 80085e6:	b395      	cbz	r5, 800864e <quorem+0x9e>
 80085e8:	f04f 0a00 	mov.w	sl, #0
 80085ec:	4638      	mov	r0, r7
 80085ee:	46b6      	mov	lr, r6
 80085f0:	46d3      	mov	fp, sl
 80085f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80085f6:	b293      	uxth	r3, r2
 80085f8:	fb05 a303 	mla	r3, r5, r3, sl
 80085fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008600:	b29b      	uxth	r3, r3
 8008602:	ebab 0303 	sub.w	r3, fp, r3
 8008606:	0c12      	lsrs	r2, r2, #16
 8008608:	f8de b000 	ldr.w	fp, [lr]
 800860c:	fb05 a202 	mla	r2, r5, r2, sl
 8008610:	fa13 f38b 	uxtah	r3, r3, fp
 8008614:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008618:	fa1f fb82 	uxth.w	fp, r2
 800861c:	f8de 2000 	ldr.w	r2, [lr]
 8008620:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008628:	b29b      	uxth	r3, r3
 800862a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800862e:	4581      	cmp	r9, r0
 8008630:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008634:	f84e 3b04 	str.w	r3, [lr], #4
 8008638:	d2db      	bcs.n	80085f2 <quorem+0x42>
 800863a:	f856 300c 	ldr.w	r3, [r6, ip]
 800863e:	b933      	cbnz	r3, 800864e <quorem+0x9e>
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	3b04      	subs	r3, #4
 8008644:	429e      	cmp	r6, r3
 8008646:	461a      	mov	r2, r3
 8008648:	d330      	bcc.n	80086ac <quorem+0xfc>
 800864a:	f8c8 4010 	str.w	r4, [r8, #16]
 800864e:	4640      	mov	r0, r8
 8008650:	f001 f99a 	bl	8009988 <__mcmp>
 8008654:	2800      	cmp	r0, #0
 8008656:	db25      	blt.n	80086a4 <quorem+0xf4>
 8008658:	3501      	adds	r5, #1
 800865a:	4630      	mov	r0, r6
 800865c:	f04f 0c00 	mov.w	ip, #0
 8008660:	f857 2b04 	ldr.w	r2, [r7], #4
 8008664:	f8d0 e000 	ldr.w	lr, [r0]
 8008668:	b293      	uxth	r3, r2
 800866a:	ebac 0303 	sub.w	r3, ip, r3
 800866e:	0c12      	lsrs	r2, r2, #16
 8008670:	fa13 f38e 	uxtah	r3, r3, lr
 8008674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800867c:	b29b      	uxth	r3, r3
 800867e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008682:	45b9      	cmp	r9, r7
 8008684:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008688:	f840 3b04 	str.w	r3, [r0], #4
 800868c:	d2e8      	bcs.n	8008660 <quorem+0xb0>
 800868e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008692:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008696:	b92a      	cbnz	r2, 80086a4 <quorem+0xf4>
 8008698:	3b04      	subs	r3, #4
 800869a:	429e      	cmp	r6, r3
 800869c:	461a      	mov	r2, r3
 800869e:	d30b      	bcc.n	80086b8 <quorem+0x108>
 80086a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80086a4:	4628      	mov	r0, r5
 80086a6:	b003      	add	sp, #12
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	3b04      	subs	r3, #4
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	d1ca      	bne.n	800864a <quorem+0x9a>
 80086b4:	3c01      	subs	r4, #1
 80086b6:	e7c5      	b.n	8008644 <quorem+0x94>
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	3b04      	subs	r3, #4
 80086bc:	2a00      	cmp	r2, #0
 80086be:	d1ef      	bne.n	80086a0 <quorem+0xf0>
 80086c0:	3c01      	subs	r4, #1
 80086c2:	e7ea      	b.n	800869a <quorem+0xea>
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7ee      	b.n	80086a6 <quorem+0xf6>

080086c8 <_dtoa_r>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	ec57 6b10 	vmov	r6, r7, d0
 80086d0:	b095      	sub	sp, #84	; 0x54
 80086d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086d4:	9108      	str	r1, [sp, #32]
 80086d6:	4604      	mov	r4, r0
 80086d8:	920a      	str	r2, [sp, #40]	; 0x28
 80086da:	9311      	str	r3, [sp, #68]	; 0x44
 80086dc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80086e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80086e4:	b93d      	cbnz	r5, 80086f6 <_dtoa_r+0x2e>
 80086e6:	2010      	movs	r0, #16
 80086e8:	f000 ff26 	bl	8009538 <malloc>
 80086ec:	6260      	str	r0, [r4, #36]	; 0x24
 80086ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086f2:	6005      	str	r5, [r0, #0]
 80086f4:	60c5      	str	r5, [r0, #12]
 80086f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f8:	6819      	ldr	r1, [r3, #0]
 80086fa:	b151      	cbz	r1, 8008712 <_dtoa_r+0x4a>
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	604a      	str	r2, [r1, #4]
 8008700:	2301      	movs	r3, #1
 8008702:	4093      	lsls	r3, r2
 8008704:	608b      	str	r3, [r1, #8]
 8008706:	4620      	mov	r0, r4
 8008708:	f000 ff5d 	bl	80095c6 <_Bfree>
 800870c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	1e3b      	subs	r3, r7, #0
 8008714:	bfb9      	ittee	lt
 8008716:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800871a:	9303      	strlt	r3, [sp, #12]
 800871c:	2300      	movge	r3, #0
 800871e:	f8c8 3000 	strge.w	r3, [r8]
 8008722:	9d03      	ldr	r5, [sp, #12]
 8008724:	4bac      	ldr	r3, [pc, #688]	; (80089d8 <_dtoa_r+0x310>)
 8008726:	bfbc      	itt	lt
 8008728:	2201      	movlt	r2, #1
 800872a:	f8c8 2000 	strlt.w	r2, [r8]
 800872e:	43ab      	bics	r3, r5
 8008730:	d11b      	bne.n	800876a <_dtoa_r+0xa2>
 8008732:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008734:	f242 730f 	movw	r3, #9999	; 0x270f
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	9b02      	ldr	r3, [sp, #8]
 800873c:	b923      	cbnz	r3, 8008748 <_dtoa_r+0x80>
 800873e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008742:	2d00      	cmp	r5, #0
 8008744:	f000 84dd 	beq.w	8009102 <_dtoa_r+0xa3a>
 8008748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800874a:	b953      	cbnz	r3, 8008762 <_dtoa_r+0x9a>
 800874c:	4ba3      	ldr	r3, [pc, #652]	; (80089dc <_dtoa_r+0x314>)
 800874e:	e020      	b.n	8008792 <_dtoa_r+0xca>
 8008750:	4ba3      	ldr	r3, [pc, #652]	; (80089e0 <_dtoa_r+0x318>)
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	3308      	adds	r3, #8
 8008756:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	9804      	ldr	r0, [sp, #16]
 800875c:	b015      	add	sp, #84	; 0x54
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	4b9e      	ldr	r3, [pc, #632]	; (80089dc <_dtoa_r+0x314>)
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	3303      	adds	r3, #3
 8008768:	e7f5      	b.n	8008756 <_dtoa_r+0x8e>
 800876a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800876e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008776:	ed8d 7b04 	vstr	d7, [sp, #16]
 800877a:	d10c      	bne.n	8008796 <_dtoa_r+0xce>
 800877c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800877e:	2301      	movs	r3, #1
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 84b9 	beq.w	80090fc <_dtoa_r+0xa34>
 800878a:	4b96      	ldr	r3, [pc, #600]	; (80089e4 <_dtoa_r+0x31c>)
 800878c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	3b01      	subs	r3, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	e7e1      	b.n	800875a <_dtoa_r+0x92>
 8008796:	a913      	add	r1, sp, #76	; 0x4c
 8008798:	aa12      	add	r2, sp, #72	; 0x48
 800879a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 f969 	bl	8009a76 <__d2b>
 80087a4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80087a8:	9001      	str	r0, [sp, #4]
 80087aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	d046      	beq.n	800883e <_dtoa_r+0x176>
 80087b0:	9805      	ldr	r0, [sp, #20]
 80087b2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80087b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ba:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80087be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80087c2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80087c6:	2700      	movs	r7, #0
 80087c8:	ee07 aa90 	vmov	s15, sl
 80087cc:	ec43 2b16 	vmov	d6, r2, r3
 80087d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80087d4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80089c0 <_dtoa_r+0x2f8>
 80087d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80087dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087e0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80089c8 <_dtoa_r+0x300>
 80087e4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80087e8:	eeb0 7b46 	vmov.f64	d7, d6
 80087ec:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80089d0 <_dtoa_r+0x308>
 80087f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80087f4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80087f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80087fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008800:	ee16 ba90 	vmov	fp, s13
 8008804:	d508      	bpl.n	8008818 <_dtoa_r+0x150>
 8008806:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800880a:	eeb4 6b47 	vcmp.f64	d6, d7
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	bf18      	it	ne
 8008814:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008818:	f1bb 0f16 	cmp.w	fp, #22
 800881c:	d834      	bhi.n	8008888 <_dtoa_r+0x1c0>
 800881e:	4b72      	ldr	r3, [pc, #456]	; (80089e8 <_dtoa_r+0x320>)
 8008820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008824:	ed93 7b00 	vldr	d7, [r3]
 8008828:	ed9d 6b02 	vldr	d6, [sp, #8]
 800882c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008834:	dd01      	ble.n	800883a <_dtoa_r+0x172>
 8008836:	f10b 3bff 	add.w	fp, fp, #4294967295
 800883a:	2300      	movs	r3, #0
 800883c:	e025      	b.n	800888a <_dtoa_r+0x1c2>
 800883e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008840:	eb01 0a03 	add.w	sl, r1, r3
 8008844:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008848:	2b20      	cmp	r3, #32
 800884a:	dd17      	ble.n	800887c <_dtoa_r+0x1b4>
 800884c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008850:	9a02      	ldr	r2, [sp, #8]
 8008852:	409d      	lsls	r5, r3
 8008854:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	432b      	orrs	r3, r5
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800886a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800886e:	9805      	ldr	r0, [sp, #20]
 8008870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008874:	2701      	movs	r7, #1
 8008876:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800887a:	e7a5      	b.n	80087c8 <_dtoa_r+0x100>
 800887c:	9a02      	ldr	r2, [sp, #8]
 800887e:	f1c3 0320 	rsb	r3, r3, #32
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	e7ea      	b.n	800885e <_dtoa_r+0x196>
 8008888:	2301      	movs	r3, #1
 800888a:	eba1 0a0a 	sub.w	sl, r1, sl
 800888e:	9310      	str	r3, [sp, #64]	; 0x40
 8008890:	f1ba 0301 	subs.w	r3, sl, #1
 8008894:	9307      	str	r3, [sp, #28]
 8008896:	bf43      	ittte	mi
 8008898:	2300      	movmi	r3, #0
 800889a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800889e:	9307      	strmi	r3, [sp, #28]
 80088a0:	f04f 0a00 	movpl.w	sl, #0
 80088a4:	f1bb 0f00 	cmp.w	fp, #0
 80088a8:	db19      	blt.n	80088de <_dtoa_r+0x216>
 80088aa:	9b07      	ldr	r3, [sp, #28]
 80088ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80088b0:	445b      	add	r3, fp
 80088b2:	9307      	str	r3, [sp, #28]
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	9b08      	ldr	r3, [sp, #32]
 80088ba:	2b09      	cmp	r3, #9
 80088bc:	d866      	bhi.n	800898c <_dtoa_r+0x2c4>
 80088be:	2b05      	cmp	r3, #5
 80088c0:	bfc4      	itt	gt
 80088c2:	3b04      	subgt	r3, #4
 80088c4:	9308      	strgt	r3, [sp, #32]
 80088c6:	9b08      	ldr	r3, [sp, #32]
 80088c8:	f1a3 0302 	sub.w	r3, r3, #2
 80088cc:	bfcc      	ite	gt
 80088ce:	2500      	movgt	r5, #0
 80088d0:	2501      	movle	r5, #1
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d866      	bhi.n	80089a4 <_dtoa_r+0x2dc>
 80088d6:	e8df f003 	tbb	[pc, r3]
 80088da:	5755      	.short	0x5755
 80088dc:	4909      	.short	0x4909
 80088de:	2300      	movs	r3, #0
 80088e0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80088e4:	f1cb 0800 	rsb	r8, fp, #0
 80088e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ea:	e7e5      	b.n	80088b8 <_dtoa_r+0x1f0>
 80088ec:	2301      	movs	r3, #1
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dd59      	ble.n	80089aa <_dtoa_r+0x2e2>
 80088f6:	9306      	str	r3, [sp, #24]
 80088f8:	4699      	mov	r9, r3
 80088fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088fc:	2200      	movs	r2, #0
 80088fe:	6072      	str	r2, [r6, #4]
 8008900:	2204      	movs	r2, #4
 8008902:	f102 0014 	add.w	r0, r2, #20
 8008906:	4298      	cmp	r0, r3
 8008908:	6871      	ldr	r1, [r6, #4]
 800890a:	d953      	bls.n	80089b4 <_dtoa_r+0x2ec>
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fe26 	bl	800955e <_Balloc>
 8008912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008914:	6030      	str	r0, [r6, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	f1b9 0f0e 	cmp.w	r9, #14
 800891e:	f200 80c2 	bhi.w	8008aa6 <_dtoa_r+0x3de>
 8008922:	2d00      	cmp	r5, #0
 8008924:	f000 80bf 	beq.w	8008aa6 <_dtoa_r+0x3de>
 8008928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800892c:	f1bb 0f00 	cmp.w	fp, #0
 8008930:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008934:	f340 80e6 	ble.w	8008b04 <_dtoa_r+0x43c>
 8008938:	4a2b      	ldr	r2, [pc, #172]	; (80089e8 <_dtoa_r+0x320>)
 800893a:	f00b 030f 	and.w	r3, fp, #15
 800893e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008942:	ed93 7b00 	vldr	d7, [r3]
 8008946:	ea4f 132b 	mov.w	r3, fp, asr #4
 800894a:	06da      	lsls	r2, r3, #27
 800894c:	f140 80d8 	bpl.w	8008b00 <_dtoa_r+0x438>
 8008950:	4a26      	ldr	r2, [pc, #152]	; (80089ec <_dtoa_r+0x324>)
 8008952:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8008956:	ed92 6b08 	vldr	d6, [r2, #32]
 800895a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800895e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	2203      	movs	r2, #3
 8008968:	4920      	ldr	r1, [pc, #128]	; (80089ec <_dtoa_r+0x324>)
 800896a:	e04a      	b.n	8008a02 <_dtoa_r+0x33a>
 800896c:	2301      	movs	r3, #1
 800896e:	9309      	str	r3, [sp, #36]	; 0x24
 8008970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008972:	445b      	add	r3, fp
 8008974:	f103 0901 	add.w	r9, r3, #1
 8008978:	9306      	str	r3, [sp, #24]
 800897a:	464b      	mov	r3, r9
 800897c:	2b01      	cmp	r3, #1
 800897e:	bfb8      	it	lt
 8008980:	2301      	movlt	r3, #1
 8008982:	e7ba      	b.n	80088fa <_dtoa_r+0x232>
 8008984:	2300      	movs	r3, #0
 8008986:	e7b2      	b.n	80088ee <_dtoa_r+0x226>
 8008988:	2300      	movs	r3, #0
 800898a:	e7f0      	b.n	800896e <_dtoa_r+0x2a6>
 800898c:	2501      	movs	r5, #1
 800898e:	2300      	movs	r3, #0
 8008990:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8008994:	f04f 33ff 	mov.w	r3, #4294967295
 8008998:	9306      	str	r3, [sp, #24]
 800899a:	4699      	mov	r9, r3
 800899c:	2200      	movs	r2, #0
 800899e:	2312      	movs	r3, #18
 80089a0:	920a      	str	r2, [sp, #40]	; 0x28
 80089a2:	e7aa      	b.n	80088fa <_dtoa_r+0x232>
 80089a4:	2301      	movs	r3, #1
 80089a6:	9309      	str	r3, [sp, #36]	; 0x24
 80089a8:	e7f4      	b.n	8008994 <_dtoa_r+0x2cc>
 80089aa:	2301      	movs	r3, #1
 80089ac:	9306      	str	r3, [sp, #24]
 80089ae:	4699      	mov	r9, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	e7f5      	b.n	80089a0 <_dtoa_r+0x2d8>
 80089b4:	3101      	adds	r1, #1
 80089b6:	6071      	str	r1, [r6, #4]
 80089b8:	0052      	lsls	r2, r2, #1
 80089ba:	e7a2      	b.n	8008902 <_dtoa_r+0x23a>
 80089bc:	f3af 8000 	nop.w
 80089c0:	636f4361 	.word	0x636f4361
 80089c4:	3fd287a7 	.word	0x3fd287a7
 80089c8:	8b60c8b3 	.word	0x8b60c8b3
 80089cc:	3fc68a28 	.word	0x3fc68a28
 80089d0:	509f79fb 	.word	0x509f79fb
 80089d4:	3fd34413 	.word	0x3fd34413
 80089d8:	7ff00000 	.word	0x7ff00000
 80089dc:	0800a145 	.word	0x0800a145
 80089e0:	0800a13c 	.word	0x0800a13c
 80089e4:	0800a119 	.word	0x0800a119
 80089e8:	0800a1d8 	.word	0x0800a1d8
 80089ec:	0800a1b0 	.word	0x0800a1b0
 80089f0:	07de      	lsls	r6, r3, #31
 80089f2:	d504      	bpl.n	80089fe <_dtoa_r+0x336>
 80089f4:	ed91 6b00 	vldr	d6, [r1]
 80089f8:	3201      	adds	r2, #1
 80089fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089fe:	105b      	asrs	r3, r3, #1
 8008a00:	3108      	adds	r1, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f4      	bne.n	80089f0 <_dtoa_r+0x328>
 8008a06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 80a7 	beq.w	8008b68 <_dtoa_r+0x4a0>
 8008a1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008a1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2a:	f140 809d 	bpl.w	8008b68 <_dtoa_r+0x4a0>
 8008a2e:	f1b9 0f00 	cmp.w	r9, #0
 8008a32:	f000 8099 	beq.w	8008b68 <_dtoa_r+0x4a0>
 8008a36:	9b06      	ldr	r3, [sp, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dd30      	ble.n	8008a9e <_dtoa_r+0x3d6>
 8008a3c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008a40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a48:	9d06      	ldr	r5, [sp, #24]
 8008a4a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008a4e:	3201      	adds	r2, #1
 8008a50:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a54:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008a58:	ee07 2a90 	vmov	s15, r2
 8008a5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a60:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008a64:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008a68:	9a03      	ldr	r2, [sp, #12]
 8008a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	d17b      	bne.n	8008b6e <_dtoa_r+0x4a6>
 8008a76:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a7a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008a7e:	ec41 0b17 	vmov	d7, r0, r1
 8008a82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8a:	f300 8253 	bgt.w	8008f34 <_dtoa_r+0x86c>
 8008a8e:	eeb1 7b47 	vneg.f64	d7, d7
 8008a92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9a:	f100 8249 	bmi.w	8008f30 <_dtoa_r+0x868>
 8008a9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008aa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f2c0 8119 	blt.w	8008ce0 <_dtoa_r+0x618>
 8008aae:	f1bb 0f0e 	cmp.w	fp, #14
 8008ab2:	f300 8115 	bgt.w	8008ce0 <_dtoa_r+0x618>
 8008ab6:	4bc3      	ldr	r3, [pc, #780]	; (8008dc4 <_dtoa_r+0x6fc>)
 8008ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008abc:	ed93 6b00 	vldr	d6, [r3]
 8008ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f280 80ba 	bge.w	8008c3c <_dtoa_r+0x574>
 8008ac8:	f1b9 0f00 	cmp.w	r9, #0
 8008acc:	f300 80b6 	bgt.w	8008c3c <_dtoa_r+0x574>
 8008ad0:	f040 822d 	bne.w	8008f2e <_dtoa_r+0x866>
 8008ad4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ad8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008adc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ae0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae8:	464d      	mov	r5, r9
 8008aea:	464f      	mov	r7, r9
 8008aec:	f280 8204 	bge.w	8008ef8 <_dtoa_r+0x830>
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	1c5e      	adds	r6, r3, #1
 8008af6:	2331      	movs	r3, #49	; 0x31
 8008af8:	7013      	strb	r3, [r2, #0]
 8008afa:	f10b 0b01 	add.w	fp, fp, #1
 8008afe:	e1ff      	b.n	8008f00 <_dtoa_r+0x838>
 8008b00:	2202      	movs	r2, #2
 8008b02:	e731      	b.n	8008968 <_dtoa_r+0x2a0>
 8008b04:	d02e      	beq.n	8008b64 <_dtoa_r+0x49c>
 8008b06:	f1cb 0300 	rsb	r3, fp, #0
 8008b0a:	4aae      	ldr	r2, [pc, #696]	; (8008dc4 <_dtoa_r+0x6fc>)
 8008b0c:	f003 010f 	and.w	r1, r3, #15
 8008b10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008b14:	ed92 7b00 	vldr	d7, [r2]
 8008b18:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8008b1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b20:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008b24:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8008b28:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008b2c:	49a6      	ldr	r1, [pc, #664]	; (8008dc8 <_dtoa_r+0x700>)
 8008b2e:	111b      	asrs	r3, r3, #4
 8008b30:	2000      	movs	r0, #0
 8008b32:	2202      	movs	r2, #2
 8008b34:	b93b      	cbnz	r3, 8008b46 <_dtoa_r+0x47e>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f af6b 	beq.w	8008a12 <_dtoa_r+0x34a>
 8008b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b44:	e765      	b.n	8008a12 <_dtoa_r+0x34a>
 8008b46:	07dd      	lsls	r5, r3, #31
 8008b48:	d509      	bpl.n	8008b5e <_dtoa_r+0x496>
 8008b4a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008b4e:	ed91 7b00 	vldr	d7, [r1]
 8008b52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b56:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	105b      	asrs	r3, r3, #1
 8008b60:	3108      	adds	r1, #8
 8008b62:	e7e7      	b.n	8008b34 <_dtoa_r+0x46c>
 8008b64:	2202      	movs	r2, #2
 8008b66:	e754      	b.n	8008a12 <_dtoa_r+0x34a>
 8008b68:	465b      	mov	r3, fp
 8008b6a:	464d      	mov	r5, r9
 8008b6c:	e770      	b.n	8008a50 <_dtoa_r+0x388>
 8008b6e:	4a95      	ldr	r2, [pc, #596]	; (8008dc4 <_dtoa_r+0x6fc>)
 8008b70:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8008b74:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b7a:	ec41 0b17 	vmov	d7, r0, r1
 8008b7e:	b35a      	cbz	r2, 8008bd8 <_dtoa_r+0x510>
 8008b80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008b84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008b88:	9e04      	ldr	r6, [sp, #16]
 8008b8a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008b8e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008b96:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b9a:	ee14 2a90 	vmov	r2, s9
 8008b9e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ba2:	3230      	adds	r2, #48	; 0x30
 8008ba4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ba8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb0:	f806 2b01 	strb.w	r2, [r6], #1
 8008bb4:	d43b      	bmi.n	8008c2e <_dtoa_r+0x566>
 8008bb6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008bba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc2:	d472      	bmi.n	8008caa <_dtoa_r+0x5e2>
 8008bc4:	9a04      	ldr	r2, [sp, #16]
 8008bc6:	1ab2      	subs	r2, r6, r2
 8008bc8:	4295      	cmp	r5, r2
 8008bca:	f77f af68 	ble.w	8008a9e <_dtoa_r+0x3d6>
 8008bce:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008bd2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008bd6:	e7de      	b.n	8008b96 <_dtoa_r+0x4ce>
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008bde:	1956      	adds	r6, r2, r5
 8008be0:	4611      	mov	r1, r2
 8008be2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008be6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008bea:	ee14 2a90 	vmov	r2, s9
 8008bee:	3230      	adds	r2, #48	; 0x30
 8008bf0:	f801 2b01 	strb.w	r2, [r1], #1
 8008bf4:	42b1      	cmp	r1, r6
 8008bf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008bfa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008bfe:	d11a      	bne.n	8008c36 <_dtoa_r+0x56e>
 8008c00:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008c04:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008c08:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	dc4b      	bgt.n	8008caa <_dtoa_r+0x5e2>
 8008c12:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008c16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1e:	f57f af3e 	bpl.w	8008a9e <_dtoa_r+0x3d6>
 8008c22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c26:	2a30      	cmp	r2, #48	; 0x30
 8008c28:	f106 31ff 	add.w	r1, r6, #4294967295
 8008c2c:	d001      	beq.n	8008c32 <_dtoa_r+0x56a>
 8008c2e:	469b      	mov	fp, r3
 8008c30:	e02a      	b.n	8008c88 <_dtoa_r+0x5c0>
 8008c32:	460e      	mov	r6, r1
 8008c34:	e7f5      	b.n	8008c22 <_dtoa_r+0x55a>
 8008c36:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008c3a:	e7d4      	b.n	8008be6 <_dtoa_r+0x51e>
 8008c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c40:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008c44:	9e04      	ldr	r6, [sp, #16]
 8008c46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008c4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008c4e:	ee15 3a10 	vmov	r3, s10
 8008c52:	3330      	adds	r3, #48	; 0x30
 8008c54:	f806 3b01 	strb.w	r3, [r6], #1
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	1af3      	subs	r3, r6, r3
 8008c5c:	4599      	cmp	r9, r3
 8008c5e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008c62:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008c66:	d133      	bne.n	8008cd0 <_dtoa_r+0x608>
 8008c68:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008c6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c74:	dc18      	bgt.n	8008ca8 <_dtoa_r+0x5e0>
 8008c76:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	d103      	bne.n	8008c88 <_dtoa_r+0x5c0>
 8008c80:	ee15 3a10 	vmov	r3, s10
 8008c84:	07db      	lsls	r3, r3, #31
 8008c86:	d40f      	bmi.n	8008ca8 <_dtoa_r+0x5e0>
 8008c88:	9901      	ldr	r1, [sp, #4]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fc9b 	bl	80095c6 <_Bfree>
 8008c90:	2300      	movs	r3, #0
 8008c92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c94:	7033      	strb	r3, [r6, #0]
 8008c96:	f10b 0301 	add.w	r3, fp, #1
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f43f ad5b 	beq.w	800875a <_dtoa_r+0x92>
 8008ca4:	601e      	str	r6, [r3, #0]
 8008ca6:	e558      	b.n	800875a <_dtoa_r+0x92>
 8008ca8:	465b      	mov	r3, fp
 8008caa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cae:	2939      	cmp	r1, #57	; 0x39
 8008cb0:	f106 32ff 	add.w	r2, r6, #4294967295
 8008cb4:	d106      	bne.n	8008cc4 <_dtoa_r+0x5fc>
 8008cb6:	9904      	ldr	r1, [sp, #16]
 8008cb8:	4291      	cmp	r1, r2
 8008cba:	d107      	bne.n	8008ccc <_dtoa_r+0x604>
 8008cbc:	2230      	movs	r2, #48	; 0x30
 8008cbe:	700a      	strb	r2, [r1, #0]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	460a      	mov	r2, r1
 8008cc4:	7811      	ldrb	r1, [r2, #0]
 8008cc6:	3101      	adds	r1, #1
 8008cc8:	7011      	strb	r1, [r2, #0]
 8008cca:	e7b0      	b.n	8008c2e <_dtoa_r+0x566>
 8008ccc:	4616      	mov	r6, r2
 8008cce:	e7ec      	b.n	8008caa <_dtoa_r+0x5e2>
 8008cd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008cd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	d1b3      	bne.n	8008c46 <_dtoa_r+0x57e>
 8008cde:	e7d3      	b.n	8008c88 <_dtoa_r+0x5c0>
 8008ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	f000 808d 	beq.w	8008e02 <_dtoa_r+0x73a>
 8008ce8:	9a08      	ldr	r2, [sp, #32]
 8008cea:	2a01      	cmp	r2, #1
 8008cec:	dc72      	bgt.n	8008dd4 <_dtoa_r+0x70c>
 8008cee:	2f00      	cmp	r7, #0
 8008cf0:	d06c      	beq.n	8008dcc <_dtoa_r+0x704>
 8008cf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cf6:	4645      	mov	r5, r8
 8008cf8:	4656      	mov	r6, sl
 8008cfa:	9a07      	ldr	r2, [sp, #28]
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	441a      	add	r2, r3
 8008d00:	4620      	mov	r0, r4
 8008d02:	449a      	add	sl, r3
 8008d04:	9207      	str	r2, [sp, #28]
 8008d06:	f000 fcfe 	bl	8009706 <__i2b>
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	2e00      	cmp	r6, #0
 8008d0e:	dd0b      	ble.n	8008d28 <_dtoa_r+0x660>
 8008d10:	9b07      	ldr	r3, [sp, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dd08      	ble.n	8008d28 <_dtoa_r+0x660>
 8008d16:	42b3      	cmp	r3, r6
 8008d18:	9a07      	ldr	r2, [sp, #28]
 8008d1a:	bfa8      	it	ge
 8008d1c:	4633      	movge	r3, r6
 8008d1e:	ebaa 0a03 	sub.w	sl, sl, r3
 8008d22:	1af6      	subs	r6, r6, r3
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f1b8 0f00 	cmp.w	r8, #0
 8008d2c:	d01d      	beq.n	8008d6a <_dtoa_r+0x6a2>
 8008d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d06a      	beq.n	8008e0a <_dtoa_r+0x742>
 8008d34:	b18d      	cbz	r5, 8008d5a <_dtoa_r+0x692>
 8008d36:	4639      	mov	r1, r7
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 fd82 	bl	8009844 <__pow5mult>
 8008d40:	9a01      	ldr	r2, [sp, #4]
 8008d42:	4601      	mov	r1, r0
 8008d44:	4607      	mov	r7, r0
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fce6 	bl	8009718 <__multiply>
 8008d4c:	9901      	ldr	r1, [sp, #4]
 8008d4e:	900c      	str	r0, [sp, #48]	; 0x30
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fc38 	bl	80095c6 <_Bfree>
 8008d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	ebb8 0205 	subs.w	r2, r8, r5
 8008d5e:	d004      	beq.n	8008d6a <_dtoa_r+0x6a2>
 8008d60:	9901      	ldr	r1, [sp, #4]
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fd6e 	bl	8009844 <__pow5mult>
 8008d68:	9001      	str	r0, [sp, #4]
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fcca 	bl	8009706 <__i2b>
 8008d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d74:	4605      	mov	r5, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 81ca 	beq.w	8009110 <_dtoa_r+0xa48>
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4601      	mov	r1, r0
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fd5f 	bl	8009844 <__pow5mult>
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	dc44      	bgt.n	8008e18 <_dtoa_r+0x750>
 8008d8e:	9b02      	ldr	r3, [sp, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d13c      	bne.n	8008e0e <_dtoa_r+0x746>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d137      	bne.n	8008e0e <_dtoa_r+0x746>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008da4:	0d1b      	lsrs	r3, r3, #20
 8008da6:	051b      	lsls	r3, r3, #20
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d033      	beq.n	8008e14 <_dtoa_r+0x74c>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	3301      	adds	r3, #1
 8008db0:	f10a 0a01 	add.w	sl, sl, #1
 8008db4:	9307      	str	r3, [sp, #28]
 8008db6:	f04f 0801 	mov.w	r8, #1
 8008dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dbc:	bb73      	cbnz	r3, 8008e1c <_dtoa_r+0x754>
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	e034      	b.n	8008e2c <_dtoa_r+0x764>
 8008dc2:	bf00      	nop
 8008dc4:	0800a1d8 	.word	0x0800a1d8
 8008dc8:	0800a1b0 	.word	0x0800a1b0
 8008dcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dd2:	e790      	b.n	8008cf6 <_dtoa_r+0x62e>
 8008dd4:	f109 35ff 	add.w	r5, r9, #4294967295
 8008dd8:	45a8      	cmp	r8, r5
 8008dda:	bfbf      	itttt	lt
 8008ddc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008dde:	eba5 0808 	sublt.w	r8, r5, r8
 8008de2:	4443      	addlt	r3, r8
 8008de4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008de6:	bfb6      	itet	lt
 8008de8:	46a8      	movlt	r8, r5
 8008dea:	eba8 0505 	subge.w	r5, r8, r5
 8008dee:	2500      	movlt	r5, #0
 8008df0:	f1b9 0f00 	cmp.w	r9, #0
 8008df4:	bfb9      	ittee	lt
 8008df6:	ebaa 0609 	sublt.w	r6, sl, r9
 8008dfa:	2300      	movlt	r3, #0
 8008dfc:	4656      	movge	r6, sl
 8008dfe:	464b      	movge	r3, r9
 8008e00:	e77b      	b.n	8008cfa <_dtoa_r+0x632>
 8008e02:	4645      	mov	r5, r8
 8008e04:	4656      	mov	r6, sl
 8008e06:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e08:	e780      	b.n	8008d0c <_dtoa_r+0x644>
 8008e0a:	4642      	mov	r2, r8
 8008e0c:	e7a8      	b.n	8008d60 <_dtoa_r+0x698>
 8008e0e:	f04f 0800 	mov.w	r8, #0
 8008e12:	e7d2      	b.n	8008dba <_dtoa_r+0x6f2>
 8008e14:	4698      	mov	r8, r3
 8008e16:	e7d0      	b.n	8008dba <_dtoa_r+0x6f2>
 8008e18:	f04f 0800 	mov.w	r8, #0
 8008e1c:	692b      	ldr	r3, [r5, #16]
 8008e1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e22:	6918      	ldr	r0, [r3, #16]
 8008e24:	f000 fc21 	bl	800966a <__hi0bits>
 8008e28:	f1c0 0020 	rsb	r0, r0, #32
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	4418      	add	r0, r3
 8008e30:	f010 001f 	ands.w	r0, r0, #31
 8008e34:	d047      	beq.n	8008ec6 <_dtoa_r+0x7fe>
 8008e36:	f1c0 0320 	rsb	r3, r0, #32
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	dd3b      	ble.n	8008eb6 <_dtoa_r+0x7ee>
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	f1c0 001c 	rsb	r0, r0, #28
 8008e44:	4482      	add	sl, r0
 8008e46:	4406      	add	r6, r0
 8008e48:	4403      	add	r3, r0
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	f1ba 0f00 	cmp.w	sl, #0
 8008e50:	dd05      	ble.n	8008e5e <_dtoa_r+0x796>
 8008e52:	4652      	mov	r2, sl
 8008e54:	9901      	ldr	r1, [sp, #4]
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 fd42 	bl	80098e0 <__lshift>
 8008e5c:	9001      	str	r0, [sp, #4]
 8008e5e:	9b07      	ldr	r3, [sp, #28]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dd05      	ble.n	8008e70 <_dtoa_r+0x7a8>
 8008e64:	4629      	mov	r1, r5
 8008e66:	461a      	mov	r2, r3
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 fd39 	bl	80098e0 <__lshift>
 8008e6e:	4605      	mov	r5, r0
 8008e70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e72:	b353      	cbz	r3, 8008eca <_dtoa_r+0x802>
 8008e74:	4629      	mov	r1, r5
 8008e76:	9801      	ldr	r0, [sp, #4]
 8008e78:	f000 fd86 	bl	8009988 <__mcmp>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	da24      	bge.n	8008eca <_dtoa_r+0x802>
 8008e80:	2300      	movs	r3, #0
 8008e82:	220a      	movs	r2, #10
 8008e84:	9901      	ldr	r1, [sp, #4]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 fbb4 	bl	80095f4 <__multadd>
 8008e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8e:	9001      	str	r0, [sp, #4]
 8008e90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8142 	beq.w	800911e <_dtoa_r+0xa56>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	220a      	movs	r2, #10
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fba7 	bl	80095f4 <__multadd>
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	4607      	mov	r7, r0
 8008eac:	dc4b      	bgt.n	8008f46 <_dtoa_r+0x87e>
 8008eae:	9b08      	ldr	r3, [sp, #32]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	dd48      	ble.n	8008f46 <_dtoa_r+0x87e>
 8008eb4:	e011      	b.n	8008eda <_dtoa_r+0x812>
 8008eb6:	d0c9      	beq.n	8008e4c <_dtoa_r+0x784>
 8008eb8:	9a07      	ldr	r2, [sp, #28]
 8008eba:	331c      	adds	r3, #28
 8008ebc:	441a      	add	r2, r3
 8008ebe:	449a      	add	sl, r3
 8008ec0:	441e      	add	r6, r3
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	e7c1      	b.n	8008e4a <_dtoa_r+0x782>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	e7f6      	b.n	8008eb8 <_dtoa_r+0x7f0>
 8008eca:	f1b9 0f00 	cmp.w	r9, #0
 8008ece:	dc34      	bgt.n	8008f3a <_dtoa_r+0x872>
 8008ed0:	9b08      	ldr	r3, [sp, #32]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	dd31      	ble.n	8008f3a <_dtoa_r+0x872>
 8008ed6:	f8cd 9018 	str.w	r9, [sp, #24]
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	b963      	cbnz	r3, 8008ef8 <_dtoa_r+0x830>
 8008ede:	4629      	mov	r1, r5
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fb86 	bl	80095f4 <__multadd>
 8008ee8:	4601      	mov	r1, r0
 8008eea:	4605      	mov	r5, r0
 8008eec:	9801      	ldr	r0, [sp, #4]
 8008eee:	f000 fd4b 	bl	8009988 <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f73f adfc 	bgt.w	8008af0 <_dtoa_r+0x428>
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efa:	9e04      	ldr	r6, [sp, #16]
 8008efc:	ea6f 0b03 	mvn.w	fp, r3
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	4629      	mov	r1, r5
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 fb5d 	bl	80095c6 <_Bfree>
 8008f0c:	2f00      	cmp	r7, #0
 8008f0e:	f43f aebb 	beq.w	8008c88 <_dtoa_r+0x5c0>
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	d005      	beq.n	8008f24 <_dtoa_r+0x85c>
 8008f18:	45b9      	cmp	r9, r7
 8008f1a:	d003      	beq.n	8008f24 <_dtoa_r+0x85c>
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fb51 	bl	80095c6 <_Bfree>
 8008f24:	4639      	mov	r1, r7
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 fb4d 	bl	80095c6 <_Bfree>
 8008f2c:	e6ac      	b.n	8008c88 <_dtoa_r+0x5c0>
 8008f2e:	2500      	movs	r5, #0
 8008f30:	462f      	mov	r7, r5
 8008f32:	e7e1      	b.n	8008ef8 <_dtoa_r+0x830>
 8008f34:	469b      	mov	fp, r3
 8008f36:	462f      	mov	r7, r5
 8008f38:	e5da      	b.n	8008af0 <_dtoa_r+0x428>
 8008f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3c:	f8cd 9018 	str.w	r9, [sp, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80f3 	beq.w	800912c <_dtoa_r+0xa64>
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	dd05      	ble.n	8008f56 <_dtoa_r+0x88e>
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fcc6 	bl	80098e0 <__lshift>
 8008f54:	4607      	mov	r7, r0
 8008f56:	f1b8 0f00 	cmp.w	r8, #0
 8008f5a:	d04c      	beq.n	8008ff6 <_dtoa_r+0x92e>
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 fafd 	bl	800955e <_Balloc>
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	3202      	adds	r2, #2
 8008f68:	4606      	mov	r6, r0
 8008f6a:	0092      	lsls	r2, r2, #2
 8008f6c:	f107 010c 	add.w	r1, r7, #12
 8008f70:	300c      	adds	r0, #12
 8008f72:	f000 fae9 	bl	8009548 <memcpy>
 8008f76:	2201      	movs	r2, #1
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fcb0 	bl	80098e0 <__lshift>
 8008f80:	9b02      	ldr	r3, [sp, #8]
 8008f82:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	46b9      	mov	r9, r7
 8008f8c:	9307      	str	r3, [sp, #28]
 8008f8e:	4607      	mov	r7, r0
 8008f90:	4629      	mov	r1, r5
 8008f92:	9801      	ldr	r0, [sp, #4]
 8008f94:	f7ff fb0c 	bl	80085b0 <quorem>
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008fa0:	9801      	ldr	r0, [sp, #4]
 8008fa2:	f000 fcf1 	bl	8009988 <__mcmp>
 8008fa6:	463a      	mov	r2, r7
 8008fa8:	9002      	str	r0, [sp, #8]
 8008faa:	4629      	mov	r1, r5
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 fd05 	bl	80099bc <__mdiff>
 8008fb2:	68c3      	ldr	r3, [r0, #12]
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	bb03      	cbnz	r3, 8008ffa <_dtoa_r+0x932>
 8008fb8:	4601      	mov	r1, r0
 8008fba:	9009      	str	r0, [sp, #36]	; 0x24
 8008fbc:	9801      	ldr	r0, [sp, #4]
 8008fbe:	f000 fce3 	bl	8009988 <__mcmp>
 8008fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	4620      	mov	r0, r4
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	f000 fafb 	bl	80095c6 <_Bfree>
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	b9a3      	cbnz	r3, 8008ffe <_dtoa_r+0x936>
 8008fd4:	9a08      	ldr	r2, [sp, #32]
 8008fd6:	b992      	cbnz	r2, 8008ffe <_dtoa_r+0x936>
 8008fd8:	9a07      	ldr	r2, [sp, #28]
 8008fda:	b982      	cbnz	r2, 8008ffe <_dtoa_r+0x936>
 8008fdc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008fe0:	d029      	beq.n	8009036 <_dtoa_r+0x96e>
 8008fe2:	9b02      	ldr	r3, [sp, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd01      	ble.n	8008fec <_dtoa_r+0x924>
 8008fe8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008fec:	f10a 0601 	add.w	r6, sl, #1
 8008ff0:	f88a 8000 	strb.w	r8, [sl]
 8008ff4:	e786      	b.n	8008f04 <_dtoa_r+0x83c>
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	e7c2      	b.n	8008f80 <_dtoa_r+0x8b8>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e7e3      	b.n	8008fc6 <_dtoa_r+0x8fe>
 8008ffe:	9a02      	ldr	r2, [sp, #8]
 8009000:	2a00      	cmp	r2, #0
 8009002:	db04      	blt.n	800900e <_dtoa_r+0x946>
 8009004:	d124      	bne.n	8009050 <_dtoa_r+0x988>
 8009006:	9a08      	ldr	r2, [sp, #32]
 8009008:	bb12      	cbnz	r2, 8009050 <_dtoa_r+0x988>
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	bb02      	cbnz	r2, 8009050 <_dtoa_r+0x988>
 800900e:	2b00      	cmp	r3, #0
 8009010:	ddec      	ble.n	8008fec <_dtoa_r+0x924>
 8009012:	2201      	movs	r2, #1
 8009014:	9901      	ldr	r1, [sp, #4]
 8009016:	4620      	mov	r0, r4
 8009018:	f000 fc62 	bl	80098e0 <__lshift>
 800901c:	4629      	mov	r1, r5
 800901e:	9001      	str	r0, [sp, #4]
 8009020:	f000 fcb2 	bl	8009988 <__mcmp>
 8009024:	2800      	cmp	r0, #0
 8009026:	dc03      	bgt.n	8009030 <_dtoa_r+0x968>
 8009028:	d1e0      	bne.n	8008fec <_dtoa_r+0x924>
 800902a:	f018 0f01 	tst.w	r8, #1
 800902e:	d0dd      	beq.n	8008fec <_dtoa_r+0x924>
 8009030:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009034:	d1d8      	bne.n	8008fe8 <_dtoa_r+0x920>
 8009036:	2339      	movs	r3, #57	; 0x39
 8009038:	f10a 0601 	add.w	r6, sl, #1
 800903c:	f88a 3000 	strb.w	r3, [sl]
 8009040:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009044:	2b39      	cmp	r3, #57	; 0x39
 8009046:	f106 32ff 	add.w	r2, r6, #4294967295
 800904a:	d04c      	beq.n	80090e6 <_dtoa_r+0xa1e>
 800904c:	3301      	adds	r3, #1
 800904e:	e051      	b.n	80090f4 <_dtoa_r+0xa2c>
 8009050:	2b00      	cmp	r3, #0
 8009052:	f10a 0601 	add.w	r6, sl, #1
 8009056:	dd05      	ble.n	8009064 <_dtoa_r+0x99c>
 8009058:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800905c:	d0eb      	beq.n	8009036 <_dtoa_r+0x96e>
 800905e:	f108 0801 	add.w	r8, r8, #1
 8009062:	e7c5      	b.n	8008ff0 <_dtoa_r+0x928>
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	9a06      	ldr	r2, [sp, #24]
 8009068:	f806 8c01 	strb.w	r8, [r6, #-1]
 800906c:	1af3      	subs	r3, r6, r3
 800906e:	4293      	cmp	r3, r2
 8009070:	d021      	beq.n	80090b6 <_dtoa_r+0x9ee>
 8009072:	2300      	movs	r3, #0
 8009074:	220a      	movs	r2, #10
 8009076:	9901      	ldr	r1, [sp, #4]
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fabb 	bl	80095f4 <__multadd>
 800907e:	45b9      	cmp	r9, r7
 8009080:	9001      	str	r0, [sp, #4]
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	f04f 020a 	mov.w	r2, #10
 800908a:	4649      	mov	r1, r9
 800908c:	4620      	mov	r0, r4
 800908e:	d105      	bne.n	800909c <_dtoa_r+0x9d4>
 8009090:	f000 fab0 	bl	80095f4 <__multadd>
 8009094:	4681      	mov	r9, r0
 8009096:	4607      	mov	r7, r0
 8009098:	46b2      	mov	sl, r6
 800909a:	e779      	b.n	8008f90 <_dtoa_r+0x8c8>
 800909c:	f000 faaa 	bl	80095f4 <__multadd>
 80090a0:	4639      	mov	r1, r7
 80090a2:	4681      	mov	r9, r0
 80090a4:	2300      	movs	r3, #0
 80090a6:	220a      	movs	r2, #10
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 faa3 	bl	80095f4 <__multadd>
 80090ae:	4607      	mov	r7, r0
 80090b0:	e7f2      	b.n	8009098 <_dtoa_r+0x9d0>
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	2201      	movs	r2, #1
 80090b8:	9901      	ldr	r1, [sp, #4]
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 fc10 	bl	80098e0 <__lshift>
 80090c0:	4629      	mov	r1, r5
 80090c2:	9001      	str	r0, [sp, #4]
 80090c4:	f000 fc60 	bl	8009988 <__mcmp>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	dcb9      	bgt.n	8009040 <_dtoa_r+0x978>
 80090cc:	d102      	bne.n	80090d4 <_dtoa_r+0xa0c>
 80090ce:	f018 0f01 	tst.w	r8, #1
 80090d2:	d1b5      	bne.n	8009040 <_dtoa_r+0x978>
 80090d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090d8:	2b30      	cmp	r3, #48	; 0x30
 80090da:	f106 32ff 	add.w	r2, r6, #4294967295
 80090de:	f47f af11 	bne.w	8008f04 <_dtoa_r+0x83c>
 80090e2:	4616      	mov	r6, r2
 80090e4:	e7f6      	b.n	80090d4 <_dtoa_r+0xa0c>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d105      	bne.n	80090f8 <_dtoa_r+0xa30>
 80090ec:	9a04      	ldr	r2, [sp, #16]
 80090ee:	f10b 0b01 	add.w	fp, fp, #1
 80090f2:	2331      	movs	r3, #49	; 0x31
 80090f4:	7013      	strb	r3, [r2, #0]
 80090f6:	e705      	b.n	8008f04 <_dtoa_r+0x83c>
 80090f8:	4616      	mov	r6, r2
 80090fa:	e7a1      	b.n	8009040 <_dtoa_r+0x978>
 80090fc:	4b16      	ldr	r3, [pc, #88]	; (8009158 <_dtoa_r+0xa90>)
 80090fe:	f7ff bb48 	b.w	8008792 <_dtoa_r+0xca>
 8009102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009104:	2b00      	cmp	r3, #0
 8009106:	f47f ab23 	bne.w	8008750 <_dtoa_r+0x88>
 800910a:	4b14      	ldr	r3, [pc, #80]	; (800915c <_dtoa_r+0xa94>)
 800910c:	f7ff bb41 	b.w	8008792 <_dtoa_r+0xca>
 8009110:	9b08      	ldr	r3, [sp, #32]
 8009112:	2b01      	cmp	r3, #1
 8009114:	f77f ae3b 	ble.w	8008d8e <_dtoa_r+0x6c6>
 8009118:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800911c:	e64f      	b.n	8008dbe <_dtoa_r+0x6f6>
 800911e:	9b06      	ldr	r3, [sp, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	dc03      	bgt.n	800912c <_dtoa_r+0xa64>
 8009124:	9b08      	ldr	r3, [sp, #32]
 8009126:	2b02      	cmp	r3, #2
 8009128:	f73f aed7 	bgt.w	8008eda <_dtoa_r+0x812>
 800912c:	9e04      	ldr	r6, [sp, #16]
 800912e:	9801      	ldr	r0, [sp, #4]
 8009130:	4629      	mov	r1, r5
 8009132:	f7ff fa3d 	bl	80085b0 <quorem>
 8009136:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800913a:	f806 8b01 	strb.w	r8, [r6], #1
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	9a06      	ldr	r2, [sp, #24]
 8009142:	1af3      	subs	r3, r6, r3
 8009144:	429a      	cmp	r2, r3
 8009146:	ddb4      	ble.n	80090b2 <_dtoa_r+0x9ea>
 8009148:	2300      	movs	r3, #0
 800914a:	220a      	movs	r2, #10
 800914c:	9901      	ldr	r1, [sp, #4]
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fa50 	bl	80095f4 <__multadd>
 8009154:	9001      	str	r0, [sp, #4]
 8009156:	e7ea      	b.n	800912e <_dtoa_r+0xa66>
 8009158:	0800a118 	.word	0x0800a118
 800915c:	0800a13c 	.word	0x0800a13c

08009160 <__sflush_r>:
 8009160:	898a      	ldrh	r2, [r1, #12]
 8009162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009166:	4605      	mov	r5, r0
 8009168:	0710      	lsls	r0, r2, #28
 800916a:	460c      	mov	r4, r1
 800916c:	d458      	bmi.n	8009220 <__sflush_r+0xc0>
 800916e:	684b      	ldr	r3, [r1, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	dc05      	bgt.n	8009180 <__sflush_r+0x20>
 8009174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	dc02      	bgt.n	8009180 <__sflush_r+0x20>
 800917a:	2000      	movs	r0, #0
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009182:	2e00      	cmp	r6, #0
 8009184:	d0f9      	beq.n	800917a <__sflush_r+0x1a>
 8009186:	2300      	movs	r3, #0
 8009188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800918c:	682f      	ldr	r7, [r5, #0]
 800918e:	6a21      	ldr	r1, [r4, #32]
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	d032      	beq.n	80091fa <__sflush_r+0x9a>
 8009194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	075a      	lsls	r2, r3, #29
 800919a:	d505      	bpl.n	80091a8 <__sflush_r+0x48>
 800919c:	6863      	ldr	r3, [r4, #4]
 800919e:	1ac0      	subs	r0, r0, r3
 80091a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091a2:	b10b      	cbz	r3, 80091a8 <__sflush_r+0x48>
 80091a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091a6:	1ac0      	subs	r0, r0, r3
 80091a8:	2300      	movs	r3, #0
 80091aa:	4602      	mov	r2, r0
 80091ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ae:	6a21      	ldr	r1, [r4, #32]
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b0      	blx	r6
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	d106      	bne.n	80091c8 <__sflush_r+0x68>
 80091ba:	6829      	ldr	r1, [r5, #0]
 80091bc:	291d      	cmp	r1, #29
 80091be:	d848      	bhi.n	8009252 <__sflush_r+0xf2>
 80091c0:	4a29      	ldr	r2, [pc, #164]	; (8009268 <__sflush_r+0x108>)
 80091c2:	40ca      	lsrs	r2, r1
 80091c4:	07d6      	lsls	r6, r2, #31
 80091c6:	d544      	bpl.n	8009252 <__sflush_r+0xf2>
 80091c8:	2200      	movs	r2, #0
 80091ca:	6062      	str	r2, [r4, #4]
 80091cc:	04d9      	lsls	r1, r3, #19
 80091ce:	6922      	ldr	r2, [r4, #16]
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	d504      	bpl.n	80091de <__sflush_r+0x7e>
 80091d4:	1c42      	adds	r2, r0, #1
 80091d6:	d101      	bne.n	80091dc <__sflush_r+0x7c>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b903      	cbnz	r3, 80091de <__sflush_r+0x7e>
 80091dc:	6560      	str	r0, [r4, #84]	; 0x54
 80091de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e0:	602f      	str	r7, [r5, #0]
 80091e2:	2900      	cmp	r1, #0
 80091e4:	d0c9      	beq.n	800917a <__sflush_r+0x1a>
 80091e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d002      	beq.n	80091f4 <__sflush_r+0x94>
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 fc9e 	bl	8009b30 <_free_r>
 80091f4:	2000      	movs	r0, #0
 80091f6:	6360      	str	r0, [r4, #52]	; 0x34
 80091f8:	e7c0      	b.n	800917c <__sflush_r+0x1c>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b0      	blx	r6
 8009200:	1c41      	adds	r1, r0, #1
 8009202:	d1c8      	bne.n	8009196 <__sflush_r+0x36>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0c5      	beq.n	8009196 <__sflush_r+0x36>
 800920a:	2b1d      	cmp	r3, #29
 800920c:	d001      	beq.n	8009212 <__sflush_r+0xb2>
 800920e:	2b16      	cmp	r3, #22
 8009210:	d101      	bne.n	8009216 <__sflush_r+0xb6>
 8009212:	602f      	str	r7, [r5, #0]
 8009214:	e7b1      	b.n	800917a <__sflush_r+0x1a>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	e7ad      	b.n	800917c <__sflush_r+0x1c>
 8009220:	690f      	ldr	r7, [r1, #16]
 8009222:	2f00      	cmp	r7, #0
 8009224:	d0a9      	beq.n	800917a <__sflush_r+0x1a>
 8009226:	0793      	lsls	r3, r2, #30
 8009228:	680e      	ldr	r6, [r1, #0]
 800922a:	bf08      	it	eq
 800922c:	694b      	ldreq	r3, [r1, #20]
 800922e:	600f      	str	r7, [r1, #0]
 8009230:	bf18      	it	ne
 8009232:	2300      	movne	r3, #0
 8009234:	eba6 0807 	sub.w	r8, r6, r7
 8009238:	608b      	str	r3, [r1, #8]
 800923a:	f1b8 0f00 	cmp.w	r8, #0
 800923e:	dd9c      	ble.n	800917a <__sflush_r+0x1a>
 8009240:	4643      	mov	r3, r8
 8009242:	463a      	mov	r2, r7
 8009244:	6a21      	ldr	r1, [r4, #32]
 8009246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009248:	4628      	mov	r0, r5
 800924a:	47b0      	blx	r6
 800924c:	2800      	cmp	r0, #0
 800924e:	dc06      	bgt.n	800925e <__sflush_r+0xfe>
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009256:	81a3      	strh	r3, [r4, #12]
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	e78e      	b.n	800917c <__sflush_r+0x1c>
 800925e:	4407      	add	r7, r0
 8009260:	eba8 0800 	sub.w	r8, r8, r0
 8009264:	e7e9      	b.n	800923a <__sflush_r+0xda>
 8009266:	bf00      	nop
 8009268:	20400001 	.word	0x20400001

0800926c <_fflush_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	690b      	ldr	r3, [r1, #16]
 8009270:	4605      	mov	r5, r0
 8009272:	460c      	mov	r4, r1
 8009274:	b1db      	cbz	r3, 80092ae <_fflush_r+0x42>
 8009276:	b118      	cbz	r0, 8009280 <_fflush_r+0x14>
 8009278:	6983      	ldr	r3, [r0, #24]
 800927a:	b90b      	cbnz	r3, 8009280 <_fflush_r+0x14>
 800927c:	f000 f860 	bl	8009340 <__sinit>
 8009280:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <_fflush_r+0x48>)
 8009282:	429c      	cmp	r4, r3
 8009284:	d109      	bne.n	800929a <_fflush_r+0x2e>
 8009286:	686c      	ldr	r4, [r5, #4]
 8009288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928c:	b17b      	cbz	r3, 80092ae <_fflush_r+0x42>
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009296:	f7ff bf63 	b.w	8009160 <__sflush_r>
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <_fflush_r+0x4c>)
 800929c:	429c      	cmp	r4, r3
 800929e:	d101      	bne.n	80092a4 <_fflush_r+0x38>
 80092a0:	68ac      	ldr	r4, [r5, #8]
 80092a2:	e7f1      	b.n	8009288 <_fflush_r+0x1c>
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <_fflush_r+0x50>)
 80092a6:	429c      	cmp	r4, r3
 80092a8:	bf08      	it	eq
 80092aa:	68ec      	ldreq	r4, [r5, #12]
 80092ac:	e7ec      	b.n	8009288 <_fflush_r+0x1c>
 80092ae:	2000      	movs	r0, #0
 80092b0:	bd38      	pop	{r3, r4, r5, pc}
 80092b2:	bf00      	nop
 80092b4:	0800a16c 	.word	0x0800a16c
 80092b8:	0800a18c 	.word	0x0800a18c
 80092bc:	0800a14c 	.word	0x0800a14c

080092c0 <std>:
 80092c0:	2300      	movs	r3, #0
 80092c2:	b510      	push	{r4, lr}
 80092c4:	4604      	mov	r4, r0
 80092c6:	e9c0 3300 	strd	r3, r3, [r0]
 80092ca:	6083      	str	r3, [r0, #8]
 80092cc:	8181      	strh	r1, [r0, #12]
 80092ce:	6643      	str	r3, [r0, #100]	; 0x64
 80092d0:	81c2      	strh	r2, [r0, #14]
 80092d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d6:	6183      	str	r3, [r0, #24]
 80092d8:	4619      	mov	r1, r3
 80092da:	2208      	movs	r2, #8
 80092dc:	305c      	adds	r0, #92	; 0x5c
 80092de:	f7fe fbe9 	bl	8007ab4 <memset>
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <std+0x38>)
 80092e4:	6263      	str	r3, [r4, #36]	; 0x24
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <std+0x3c>)
 80092e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x40>)
 80092ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x44>)
 80092f0:	6224      	str	r4, [r4, #32]
 80092f2:	6323      	str	r3, [r4, #48]	; 0x30
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	bf00      	nop
 80092f8:	08009f21 	.word	0x08009f21
 80092fc:	08009f43 	.word	0x08009f43
 8009300:	08009f7b 	.word	0x08009f7b
 8009304:	08009f9f 	.word	0x08009f9f

08009308 <_cleanup_r>:
 8009308:	4901      	ldr	r1, [pc, #4]	; (8009310 <_cleanup_r+0x8>)
 800930a:	f000 b885 	b.w	8009418 <_fwalk_reent>
 800930e:	bf00      	nop
 8009310:	0800926d 	.word	0x0800926d

08009314 <__sfmoreglue>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	1e4a      	subs	r2, r1, #1
 8009318:	2568      	movs	r5, #104	; 0x68
 800931a:	4355      	muls	r5, r2
 800931c:	460e      	mov	r6, r1
 800931e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009322:	f000 fc53 	bl	8009bcc <_malloc_r>
 8009326:	4604      	mov	r4, r0
 8009328:	b140      	cbz	r0, 800933c <__sfmoreglue+0x28>
 800932a:	2100      	movs	r1, #0
 800932c:	e9c0 1600 	strd	r1, r6, [r0]
 8009330:	300c      	adds	r0, #12
 8009332:	60a0      	str	r0, [r4, #8]
 8009334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009338:	f7fe fbbc 	bl	8007ab4 <memset>
 800933c:	4620      	mov	r0, r4
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <__sinit>:
 8009340:	6983      	ldr	r3, [r0, #24]
 8009342:	b510      	push	{r4, lr}
 8009344:	4604      	mov	r4, r0
 8009346:	bb33      	cbnz	r3, 8009396 <__sinit+0x56>
 8009348:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800934c:	6503      	str	r3, [r0, #80]	; 0x50
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <__sinit+0x58>)
 8009350:	4a12      	ldr	r2, [pc, #72]	; (800939c <__sinit+0x5c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6282      	str	r2, [r0, #40]	; 0x28
 8009356:	4298      	cmp	r0, r3
 8009358:	bf04      	itt	eq
 800935a:	2301      	moveq	r3, #1
 800935c:	6183      	streq	r3, [r0, #24]
 800935e:	f000 f81f 	bl	80093a0 <__sfp>
 8009362:	6060      	str	r0, [r4, #4]
 8009364:	4620      	mov	r0, r4
 8009366:	f000 f81b 	bl	80093a0 <__sfp>
 800936a:	60a0      	str	r0, [r4, #8]
 800936c:	4620      	mov	r0, r4
 800936e:	f000 f817 	bl	80093a0 <__sfp>
 8009372:	2200      	movs	r2, #0
 8009374:	60e0      	str	r0, [r4, #12]
 8009376:	2104      	movs	r1, #4
 8009378:	6860      	ldr	r0, [r4, #4]
 800937a:	f7ff ffa1 	bl	80092c0 <std>
 800937e:	2201      	movs	r2, #1
 8009380:	2109      	movs	r1, #9
 8009382:	68a0      	ldr	r0, [r4, #8]
 8009384:	f7ff ff9c 	bl	80092c0 <std>
 8009388:	2202      	movs	r2, #2
 800938a:	2112      	movs	r1, #18
 800938c:	68e0      	ldr	r0, [r4, #12]
 800938e:	f7ff ff97 	bl	80092c0 <std>
 8009392:	2301      	movs	r3, #1
 8009394:	61a3      	str	r3, [r4, #24]
 8009396:	bd10      	pop	{r4, pc}
 8009398:	0800a104 	.word	0x0800a104
 800939c:	08009309 	.word	0x08009309

080093a0 <__sfp>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <__sfp+0x70>)
 80093a4:	681e      	ldr	r6, [r3, #0]
 80093a6:	69b3      	ldr	r3, [r6, #24]
 80093a8:	4607      	mov	r7, r0
 80093aa:	b913      	cbnz	r3, 80093b2 <__sfp+0x12>
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff ffc7 	bl	8009340 <__sinit>
 80093b2:	3648      	adds	r6, #72	; 0x48
 80093b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	d503      	bpl.n	80093c4 <__sfp+0x24>
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	b133      	cbz	r3, 80093ce <__sfp+0x2e>
 80093c0:	6836      	ldr	r6, [r6, #0]
 80093c2:	e7f7      	b.n	80093b4 <__sfp+0x14>
 80093c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093c8:	b16d      	cbz	r5, 80093e6 <__sfp+0x46>
 80093ca:	3468      	adds	r4, #104	; 0x68
 80093cc:	e7f4      	b.n	80093b8 <__sfp+0x18>
 80093ce:	2104      	movs	r1, #4
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff ff9f 	bl	8009314 <__sfmoreglue>
 80093d6:	6030      	str	r0, [r6, #0]
 80093d8:	2800      	cmp	r0, #0
 80093da:	d1f1      	bne.n	80093c0 <__sfp+0x20>
 80093dc:	230c      	movs	r3, #12
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	4604      	mov	r4, r0
 80093e2:	4620      	mov	r0, r4
 80093e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <__sfp+0x74>)
 80093e8:	6665      	str	r5, [r4, #100]	; 0x64
 80093ea:	e9c4 5500 	strd	r5, r5, [r4]
 80093ee:	60a5      	str	r5, [r4, #8]
 80093f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80093f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80093f8:	2208      	movs	r2, #8
 80093fa:	4629      	mov	r1, r5
 80093fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009400:	f7fe fb58 	bl	8007ab4 <memset>
 8009404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800940c:	e7e9      	b.n	80093e2 <__sfp+0x42>
 800940e:	bf00      	nop
 8009410:	0800a104 	.word	0x0800a104
 8009414:	ffff0001 	.word	0xffff0001

08009418 <_fwalk_reent>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	4680      	mov	r8, r0
 800941e:	4689      	mov	r9, r1
 8009420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009424:	2600      	movs	r6, #0
 8009426:	b914      	cbnz	r4, 800942e <_fwalk_reent+0x16>
 8009428:	4630      	mov	r0, r6
 800942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009432:	3f01      	subs	r7, #1
 8009434:	d501      	bpl.n	800943a <_fwalk_reent+0x22>
 8009436:	6824      	ldr	r4, [r4, #0]
 8009438:	e7f5      	b.n	8009426 <_fwalk_reent+0xe>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d907      	bls.n	8009450 <_fwalk_reent+0x38>
 8009440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009444:	3301      	adds	r3, #1
 8009446:	d003      	beq.n	8009450 <_fwalk_reent+0x38>
 8009448:	4629      	mov	r1, r5
 800944a:	4640      	mov	r0, r8
 800944c:	47c8      	blx	r9
 800944e:	4306      	orrs	r6, r0
 8009450:	3568      	adds	r5, #104	; 0x68
 8009452:	e7ee      	b.n	8009432 <_fwalk_reent+0x1a>

08009454 <_localeconv_r>:
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <_localeconv_r+0x14>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a18      	ldr	r0, [r3, #32]
 800945a:	4b04      	ldr	r3, [pc, #16]	; (800946c <_localeconv_r+0x18>)
 800945c:	2800      	cmp	r0, #0
 800945e:	bf08      	it	eq
 8009460:	4618      	moveq	r0, r3
 8009462:	30f0      	adds	r0, #240	; 0xf0
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20000018 	.word	0x20000018
 800946c:	2000007c 	.word	0x2000007c

08009470 <__swhatbuf_r>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	460e      	mov	r6, r1
 8009474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009478:	2900      	cmp	r1, #0
 800947a:	b096      	sub	sp, #88	; 0x58
 800947c:	4614      	mov	r4, r2
 800947e:	461d      	mov	r5, r3
 8009480:	da07      	bge.n	8009492 <__swhatbuf_r+0x22>
 8009482:	2300      	movs	r3, #0
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	89b3      	ldrh	r3, [r6, #12]
 8009488:	061a      	lsls	r2, r3, #24
 800948a:	d410      	bmi.n	80094ae <__swhatbuf_r+0x3e>
 800948c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009490:	e00e      	b.n	80094b0 <__swhatbuf_r+0x40>
 8009492:	466a      	mov	r2, sp
 8009494:	f000 fdaa 	bl	8009fec <_fstat_r>
 8009498:	2800      	cmp	r0, #0
 800949a:	dbf2      	blt.n	8009482 <__swhatbuf_r+0x12>
 800949c:	9a01      	ldr	r2, [sp, #4]
 800949e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094a6:	425a      	negs	r2, r3
 80094a8:	415a      	adcs	r2, r3
 80094aa:	602a      	str	r2, [r5, #0]
 80094ac:	e7ee      	b.n	800948c <__swhatbuf_r+0x1c>
 80094ae:	2340      	movs	r3, #64	; 0x40
 80094b0:	2000      	movs	r0, #0
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	b016      	add	sp, #88	; 0x58
 80094b6:	bd70      	pop	{r4, r5, r6, pc}

080094b8 <__smakebuf_r>:
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094bc:	079d      	lsls	r5, r3, #30
 80094be:	4606      	mov	r6, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	d507      	bpl.n	80094d4 <__smakebuf_r+0x1c>
 80094c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	2301      	movs	r3, #1
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	b002      	add	sp, #8
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	ab01      	add	r3, sp, #4
 80094d6:	466a      	mov	r2, sp
 80094d8:	f7ff ffca 	bl	8009470 <__swhatbuf_r>
 80094dc:	9900      	ldr	r1, [sp, #0]
 80094de:	4605      	mov	r5, r0
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 fb73 	bl	8009bcc <_malloc_r>
 80094e6:	b948      	cbnz	r0, 80094fc <__smakebuf_r+0x44>
 80094e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ec:	059a      	lsls	r2, r3, #22
 80094ee:	d4ef      	bmi.n	80094d0 <__smakebuf_r+0x18>
 80094f0:	f023 0303 	bic.w	r3, r3, #3
 80094f4:	f043 0302 	orr.w	r3, r3, #2
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e7e3      	b.n	80094c4 <__smakebuf_r+0xc>
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <__smakebuf_r+0x7c>)
 80094fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	6020      	str	r0, [r4, #0]
 8009504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	6163      	str	r3, [r4, #20]
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	6120      	str	r0, [r4, #16]
 8009512:	b15b      	cbz	r3, 800952c <__smakebuf_r+0x74>
 8009514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009518:	4630      	mov	r0, r6
 800951a:	f000 fd79 	bl	800a010 <_isatty_r>
 800951e:	b128      	cbz	r0, 800952c <__smakebuf_r+0x74>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	431d      	orrs	r5, r3
 8009530:	81a5      	strh	r5, [r4, #12]
 8009532:	e7cd      	b.n	80094d0 <__smakebuf_r+0x18>
 8009534:	08009309 	.word	0x08009309

08009538 <malloc>:
 8009538:	4b02      	ldr	r3, [pc, #8]	; (8009544 <malloc+0xc>)
 800953a:	4601      	mov	r1, r0
 800953c:	6818      	ldr	r0, [r3, #0]
 800953e:	f000 bb45 	b.w	8009bcc <_malloc_r>
 8009542:	bf00      	nop
 8009544:	20000018 	.word	0x20000018

08009548 <memcpy>:
 8009548:	b510      	push	{r4, lr}
 800954a:	1e43      	subs	r3, r0, #1
 800954c:	440a      	add	r2, r1
 800954e:	4291      	cmp	r1, r2
 8009550:	d100      	bne.n	8009554 <memcpy+0xc>
 8009552:	bd10      	pop	{r4, pc}
 8009554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800955c:	e7f7      	b.n	800954e <memcpy+0x6>

0800955e <_Balloc>:
 800955e:	b570      	push	{r4, r5, r6, lr}
 8009560:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009562:	4604      	mov	r4, r0
 8009564:	460e      	mov	r6, r1
 8009566:	b93d      	cbnz	r5, 8009578 <_Balloc+0x1a>
 8009568:	2010      	movs	r0, #16
 800956a:	f7ff ffe5 	bl	8009538 <malloc>
 800956e:	6260      	str	r0, [r4, #36]	; 0x24
 8009570:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009574:	6005      	str	r5, [r0, #0]
 8009576:	60c5      	str	r5, [r0, #12]
 8009578:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800957a:	68eb      	ldr	r3, [r5, #12]
 800957c:	b183      	cbz	r3, 80095a0 <_Balloc+0x42>
 800957e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009586:	b9b8      	cbnz	r0, 80095b8 <_Balloc+0x5a>
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f506 	lsl.w	r5, r1, r6
 800958e:	1d6a      	adds	r2, r5, #5
 8009590:	0092      	lsls	r2, r2, #2
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fabe 	bl	8009b14 <_calloc_r>
 8009598:	b160      	cbz	r0, 80095b4 <_Balloc+0x56>
 800959a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800959e:	e00e      	b.n	80095be <_Balloc+0x60>
 80095a0:	2221      	movs	r2, #33	; 0x21
 80095a2:	2104      	movs	r1, #4
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fab5 	bl	8009b14 <_calloc_r>
 80095aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ac:	60e8      	str	r0, [r5, #12]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e4      	bne.n	800957e <_Balloc+0x20>
 80095b4:	2000      	movs	r0, #0
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	6802      	ldr	r2, [r0, #0]
 80095ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80095be:	2300      	movs	r3, #0
 80095c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095c4:	e7f7      	b.n	80095b6 <_Balloc+0x58>

080095c6 <_Bfree>:
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80095ca:	4606      	mov	r6, r0
 80095cc:	460d      	mov	r5, r1
 80095ce:	b93c      	cbnz	r4, 80095e0 <_Bfree+0x1a>
 80095d0:	2010      	movs	r0, #16
 80095d2:	f7ff ffb1 	bl	8009538 <malloc>
 80095d6:	6270      	str	r0, [r6, #36]	; 0x24
 80095d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095dc:	6004      	str	r4, [r0, #0]
 80095de:	60c4      	str	r4, [r0, #12]
 80095e0:	b13d      	cbz	r5, 80095f2 <_Bfree+0x2c>
 80095e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095e4:	686a      	ldr	r2, [r5, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095ec:	6029      	str	r1, [r5, #0]
 80095ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80095f2:	bd70      	pop	{r4, r5, r6, pc}

080095f4 <__multadd>:
 80095f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f8:	690d      	ldr	r5, [r1, #16]
 80095fa:	461f      	mov	r7, r3
 80095fc:	4606      	mov	r6, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	f101 0c14 	add.w	ip, r1, #20
 8009604:	2300      	movs	r3, #0
 8009606:	f8dc 0000 	ldr.w	r0, [ip]
 800960a:	b281      	uxth	r1, r0
 800960c:	fb02 7101 	mla	r1, r2, r1, r7
 8009610:	0c0f      	lsrs	r7, r1, #16
 8009612:	0c00      	lsrs	r0, r0, #16
 8009614:	fb02 7000 	mla	r0, r2, r0, r7
 8009618:	b289      	uxth	r1, r1
 800961a:	3301      	adds	r3, #1
 800961c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009620:	429d      	cmp	r5, r3
 8009622:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009626:	f84c 1b04 	str.w	r1, [ip], #4
 800962a:	dcec      	bgt.n	8009606 <__multadd+0x12>
 800962c:	b1d7      	cbz	r7, 8009664 <__multadd+0x70>
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	42ab      	cmp	r3, r5
 8009632:	dc12      	bgt.n	800965a <__multadd+0x66>
 8009634:	6861      	ldr	r1, [r4, #4]
 8009636:	4630      	mov	r0, r6
 8009638:	3101      	adds	r1, #1
 800963a:	f7ff ff90 	bl	800955e <_Balloc>
 800963e:	6922      	ldr	r2, [r4, #16]
 8009640:	3202      	adds	r2, #2
 8009642:	f104 010c 	add.w	r1, r4, #12
 8009646:	4680      	mov	r8, r0
 8009648:	0092      	lsls	r2, r2, #2
 800964a:	300c      	adds	r0, #12
 800964c:	f7ff ff7c 	bl	8009548 <memcpy>
 8009650:	4621      	mov	r1, r4
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ffb7 	bl	80095c6 <_Bfree>
 8009658:	4644      	mov	r4, r8
 800965a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800965e:	3501      	adds	r5, #1
 8009660:	615f      	str	r7, [r3, #20]
 8009662:	6125      	str	r5, [r4, #16]
 8009664:	4620      	mov	r0, r4
 8009666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800966a <__hi0bits>:
 800966a:	0c02      	lsrs	r2, r0, #16
 800966c:	0412      	lsls	r2, r2, #16
 800966e:	4603      	mov	r3, r0
 8009670:	b9b2      	cbnz	r2, 80096a0 <__hi0bits+0x36>
 8009672:	0403      	lsls	r3, r0, #16
 8009674:	2010      	movs	r0, #16
 8009676:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800967a:	bf04      	itt	eq
 800967c:	021b      	lsleq	r3, r3, #8
 800967e:	3008      	addeq	r0, #8
 8009680:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009684:	bf04      	itt	eq
 8009686:	011b      	lsleq	r3, r3, #4
 8009688:	3004      	addeq	r0, #4
 800968a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800968e:	bf04      	itt	eq
 8009690:	009b      	lsleq	r3, r3, #2
 8009692:	3002      	addeq	r0, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	db06      	blt.n	80096a6 <__hi0bits+0x3c>
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	d503      	bpl.n	80096a4 <__hi0bits+0x3a>
 800969c:	3001      	adds	r0, #1
 800969e:	4770      	bx	lr
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7e8      	b.n	8009676 <__hi0bits+0xc>
 80096a4:	2020      	movs	r0, #32
 80096a6:	4770      	bx	lr

080096a8 <__lo0bits>:
 80096a8:	6803      	ldr	r3, [r0, #0]
 80096aa:	f013 0207 	ands.w	r2, r3, #7
 80096ae:	4601      	mov	r1, r0
 80096b0:	d00b      	beq.n	80096ca <__lo0bits+0x22>
 80096b2:	07da      	lsls	r2, r3, #31
 80096b4:	d423      	bmi.n	80096fe <__lo0bits+0x56>
 80096b6:	0798      	lsls	r0, r3, #30
 80096b8:	bf49      	itett	mi
 80096ba:	085b      	lsrmi	r3, r3, #1
 80096bc:	089b      	lsrpl	r3, r3, #2
 80096be:	2001      	movmi	r0, #1
 80096c0:	600b      	strmi	r3, [r1, #0]
 80096c2:	bf5c      	itt	pl
 80096c4:	600b      	strpl	r3, [r1, #0]
 80096c6:	2002      	movpl	r0, #2
 80096c8:	4770      	bx	lr
 80096ca:	b298      	uxth	r0, r3
 80096cc:	b9a8      	cbnz	r0, 80096fa <__lo0bits+0x52>
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	2010      	movs	r0, #16
 80096d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096d6:	bf04      	itt	eq
 80096d8:	0a1b      	lsreq	r3, r3, #8
 80096da:	3008      	addeq	r0, #8
 80096dc:	071a      	lsls	r2, r3, #28
 80096de:	bf04      	itt	eq
 80096e0:	091b      	lsreq	r3, r3, #4
 80096e2:	3004      	addeq	r0, #4
 80096e4:	079a      	lsls	r2, r3, #30
 80096e6:	bf04      	itt	eq
 80096e8:	089b      	lsreq	r3, r3, #2
 80096ea:	3002      	addeq	r0, #2
 80096ec:	07da      	lsls	r2, r3, #31
 80096ee:	d402      	bmi.n	80096f6 <__lo0bits+0x4e>
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	d006      	beq.n	8009702 <__lo0bits+0x5a>
 80096f4:	3001      	adds	r0, #1
 80096f6:	600b      	str	r3, [r1, #0]
 80096f8:	4770      	bx	lr
 80096fa:	4610      	mov	r0, r2
 80096fc:	e7e9      	b.n	80096d2 <__lo0bits+0x2a>
 80096fe:	2000      	movs	r0, #0
 8009700:	4770      	bx	lr
 8009702:	2020      	movs	r0, #32
 8009704:	4770      	bx	lr

08009706 <__i2b>:
 8009706:	b510      	push	{r4, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	2101      	movs	r1, #1
 800970c:	f7ff ff27 	bl	800955e <_Balloc>
 8009710:	2201      	movs	r2, #1
 8009712:	6144      	str	r4, [r0, #20]
 8009714:	6102      	str	r2, [r0, #16]
 8009716:	bd10      	pop	{r4, pc}

08009718 <__multiply>:
 8009718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	4614      	mov	r4, r2
 800971e:	690a      	ldr	r2, [r1, #16]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	429a      	cmp	r2, r3
 8009724:	bfb8      	it	lt
 8009726:	460b      	movlt	r3, r1
 8009728:	4688      	mov	r8, r1
 800972a:	bfbc      	itt	lt
 800972c:	46a0      	movlt	r8, r4
 800972e:	461c      	movlt	r4, r3
 8009730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009734:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009738:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800973c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009740:	eb07 0609 	add.w	r6, r7, r9
 8009744:	42b3      	cmp	r3, r6
 8009746:	bfb8      	it	lt
 8009748:	3101      	addlt	r1, #1
 800974a:	f7ff ff08 	bl	800955e <_Balloc>
 800974e:	f100 0514 	add.w	r5, r0, #20
 8009752:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009756:	462b      	mov	r3, r5
 8009758:	2200      	movs	r2, #0
 800975a:	4573      	cmp	r3, lr
 800975c:	d316      	bcc.n	800978c <__multiply+0x74>
 800975e:	f104 0214 	add.w	r2, r4, #20
 8009762:	f108 0114 	add.w	r1, r8, #20
 8009766:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800976a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	9b00      	ldr	r3, [sp, #0]
 8009772:	9201      	str	r2, [sp, #4]
 8009774:	4293      	cmp	r3, r2
 8009776:	d80c      	bhi.n	8009792 <__multiply+0x7a>
 8009778:	2e00      	cmp	r6, #0
 800977a:	dd03      	ble.n	8009784 <__multiply+0x6c>
 800977c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009780:	2b00      	cmp	r3, #0
 8009782:	d05d      	beq.n	8009840 <__multiply+0x128>
 8009784:	6106      	str	r6, [r0, #16]
 8009786:	b003      	add	sp, #12
 8009788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978c:	f843 2b04 	str.w	r2, [r3], #4
 8009790:	e7e3      	b.n	800975a <__multiply+0x42>
 8009792:	f8b2 b000 	ldrh.w	fp, [r2]
 8009796:	f1bb 0f00 	cmp.w	fp, #0
 800979a:	d023      	beq.n	80097e4 <__multiply+0xcc>
 800979c:	4689      	mov	r9, r1
 800979e:	46ac      	mov	ip, r5
 80097a0:	f04f 0800 	mov.w	r8, #0
 80097a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80097a8:	f8dc a000 	ldr.w	sl, [ip]
 80097ac:	b2a3      	uxth	r3, r4
 80097ae:	fa1f fa8a 	uxth.w	sl, sl
 80097b2:	fb0b a303 	mla	r3, fp, r3, sl
 80097b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097ba:	f8dc 4000 	ldr.w	r4, [ip]
 80097be:	4443      	add	r3, r8
 80097c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80097c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80097c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80097cc:	46e2      	mov	sl, ip
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80097d4:	454f      	cmp	r7, r9
 80097d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80097da:	f84a 3b04 	str.w	r3, [sl], #4
 80097de:	d82b      	bhi.n	8009838 <__multiply+0x120>
 80097e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80097ea:	3204      	adds	r2, #4
 80097ec:	f1ba 0f00 	cmp.w	sl, #0
 80097f0:	d020      	beq.n	8009834 <__multiply+0x11c>
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	4689      	mov	r9, r1
 80097f6:	46a8      	mov	r8, r5
 80097f8:	f04f 0b00 	mov.w	fp, #0
 80097fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8009800:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009804:	fb0a 440c 	mla	r4, sl, ip, r4
 8009808:	445c      	add	r4, fp
 800980a:	46c4      	mov	ip, r8
 800980c:	b29b      	uxth	r3, r3
 800980e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009812:	f84c 3b04 	str.w	r3, [ip], #4
 8009816:	f859 3b04 	ldr.w	r3, [r9], #4
 800981a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800981e:	0c1b      	lsrs	r3, r3, #16
 8009820:	fb0a b303 	mla	r3, sl, r3, fp
 8009824:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009828:	454f      	cmp	r7, r9
 800982a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800982e:	d805      	bhi.n	800983c <__multiply+0x124>
 8009830:	f8c8 3004 	str.w	r3, [r8, #4]
 8009834:	3504      	adds	r5, #4
 8009836:	e79b      	b.n	8009770 <__multiply+0x58>
 8009838:	46d4      	mov	ip, sl
 800983a:	e7b3      	b.n	80097a4 <__multiply+0x8c>
 800983c:	46e0      	mov	r8, ip
 800983e:	e7dd      	b.n	80097fc <__multiply+0xe4>
 8009840:	3e01      	subs	r6, #1
 8009842:	e799      	b.n	8009778 <__multiply+0x60>

08009844 <__pow5mult>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	4615      	mov	r5, r2
 800984a:	f012 0203 	ands.w	r2, r2, #3
 800984e:	4606      	mov	r6, r0
 8009850:	460f      	mov	r7, r1
 8009852:	d007      	beq.n	8009864 <__pow5mult+0x20>
 8009854:	3a01      	subs	r2, #1
 8009856:	4c21      	ldr	r4, [pc, #132]	; (80098dc <__pow5mult+0x98>)
 8009858:	2300      	movs	r3, #0
 800985a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800985e:	f7ff fec9 	bl	80095f4 <__multadd>
 8009862:	4607      	mov	r7, r0
 8009864:	10ad      	asrs	r5, r5, #2
 8009866:	d035      	beq.n	80098d4 <__pow5mult+0x90>
 8009868:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800986a:	b93c      	cbnz	r4, 800987c <__pow5mult+0x38>
 800986c:	2010      	movs	r0, #16
 800986e:	f7ff fe63 	bl	8009538 <malloc>
 8009872:	6270      	str	r0, [r6, #36]	; 0x24
 8009874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009878:	6004      	str	r4, [r0, #0]
 800987a:	60c4      	str	r4, [r0, #12]
 800987c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009884:	b94c      	cbnz	r4, 800989a <__pow5mult+0x56>
 8009886:	f240 2171 	movw	r1, #625	; 0x271
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ff3b 	bl	8009706 <__i2b>
 8009890:	2300      	movs	r3, #0
 8009892:	f8c8 0008 	str.w	r0, [r8, #8]
 8009896:	4604      	mov	r4, r0
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	07eb      	lsls	r3, r5, #31
 80098a0:	d50a      	bpl.n	80098b8 <__pow5mult+0x74>
 80098a2:	4639      	mov	r1, r7
 80098a4:	4622      	mov	r2, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ff36 	bl	8009718 <__multiply>
 80098ac:	4639      	mov	r1, r7
 80098ae:	4681      	mov	r9, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff fe88 	bl	80095c6 <_Bfree>
 80098b6:	464f      	mov	r7, r9
 80098b8:	106d      	asrs	r5, r5, #1
 80098ba:	d00b      	beq.n	80098d4 <__pow5mult+0x90>
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	b938      	cbnz	r0, 80098d0 <__pow5mult+0x8c>
 80098c0:	4622      	mov	r2, r4
 80098c2:	4621      	mov	r1, r4
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff ff27 	bl	8009718 <__multiply>
 80098ca:	6020      	str	r0, [r4, #0]
 80098cc:	f8c0 8000 	str.w	r8, [r0]
 80098d0:	4604      	mov	r4, r0
 80098d2:	e7e4      	b.n	800989e <__pow5mult+0x5a>
 80098d4:	4638      	mov	r0, r7
 80098d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098da:	bf00      	nop
 80098dc:	0800a2a0 	.word	0x0800a2a0

080098e0 <__lshift>:
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	460c      	mov	r4, r1
 80098e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	6849      	ldr	r1, [r1, #4]
 80098ee:	eb0a 0903 	add.w	r9, sl, r3
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	4607      	mov	r7, r0
 80098f6:	4616      	mov	r6, r2
 80098f8:	f109 0501 	add.w	r5, r9, #1
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	db32      	blt.n	8009966 <__lshift+0x86>
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff fe2c 	bl	800955e <_Balloc>
 8009906:	2300      	movs	r3, #0
 8009908:	4680      	mov	r8, r0
 800990a:	f100 0114 	add.w	r1, r0, #20
 800990e:	461a      	mov	r2, r3
 8009910:	4553      	cmp	r3, sl
 8009912:	db2b      	blt.n	800996c <__lshift+0x8c>
 8009914:	6920      	ldr	r0, [r4, #16]
 8009916:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800991a:	f104 0314 	add.w	r3, r4, #20
 800991e:	f016 021f 	ands.w	r2, r6, #31
 8009922:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009926:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800992a:	d025      	beq.n	8009978 <__lshift+0x98>
 800992c:	f1c2 0e20 	rsb	lr, r2, #32
 8009930:	2000      	movs	r0, #0
 8009932:	681e      	ldr	r6, [r3, #0]
 8009934:	468a      	mov	sl, r1
 8009936:	4096      	lsls	r6, r2
 8009938:	4330      	orrs	r0, r6
 800993a:	f84a 0b04 	str.w	r0, [sl], #4
 800993e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009942:	459c      	cmp	ip, r3
 8009944:	fa20 f00e 	lsr.w	r0, r0, lr
 8009948:	d814      	bhi.n	8009974 <__lshift+0x94>
 800994a:	6048      	str	r0, [r1, #4]
 800994c:	b108      	cbz	r0, 8009952 <__lshift+0x72>
 800994e:	f109 0502 	add.w	r5, r9, #2
 8009952:	3d01      	subs	r5, #1
 8009954:	4638      	mov	r0, r7
 8009956:	f8c8 5010 	str.w	r5, [r8, #16]
 800995a:	4621      	mov	r1, r4
 800995c:	f7ff fe33 	bl	80095c6 <_Bfree>
 8009960:	4640      	mov	r0, r8
 8009962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009966:	3101      	adds	r1, #1
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	e7c7      	b.n	80098fc <__lshift+0x1c>
 800996c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009970:	3301      	adds	r3, #1
 8009972:	e7cd      	b.n	8009910 <__lshift+0x30>
 8009974:	4651      	mov	r1, sl
 8009976:	e7dc      	b.n	8009932 <__lshift+0x52>
 8009978:	3904      	subs	r1, #4
 800997a:	f853 2b04 	ldr.w	r2, [r3], #4
 800997e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009982:	459c      	cmp	ip, r3
 8009984:	d8f9      	bhi.n	800997a <__lshift+0x9a>
 8009986:	e7e4      	b.n	8009952 <__lshift+0x72>

08009988 <__mcmp>:
 8009988:	6903      	ldr	r3, [r0, #16]
 800998a:	690a      	ldr	r2, [r1, #16]
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	b530      	push	{r4, r5, lr}
 8009990:	d10c      	bne.n	80099ac <__mcmp+0x24>
 8009992:	0092      	lsls	r2, r2, #2
 8009994:	3014      	adds	r0, #20
 8009996:	3114      	adds	r1, #20
 8009998:	1884      	adds	r4, r0, r2
 800999a:	4411      	add	r1, r2
 800999c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099a4:	4295      	cmp	r5, r2
 80099a6:	d003      	beq.n	80099b0 <__mcmp+0x28>
 80099a8:	d305      	bcc.n	80099b6 <__mcmp+0x2e>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4618      	mov	r0, r3
 80099ae:	bd30      	pop	{r4, r5, pc}
 80099b0:	42a0      	cmp	r0, r4
 80099b2:	d3f3      	bcc.n	800999c <__mcmp+0x14>
 80099b4:	e7fa      	b.n	80099ac <__mcmp+0x24>
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ba:	e7f7      	b.n	80099ac <__mcmp+0x24>

080099bc <__mdiff>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	460d      	mov	r5, r1
 80099c2:	4607      	mov	r7, r0
 80099c4:	4611      	mov	r1, r2
 80099c6:	4628      	mov	r0, r5
 80099c8:	4614      	mov	r4, r2
 80099ca:	f7ff ffdd 	bl	8009988 <__mcmp>
 80099ce:	1e06      	subs	r6, r0, #0
 80099d0:	d108      	bne.n	80099e4 <__mdiff+0x28>
 80099d2:	4631      	mov	r1, r6
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff fdc2 	bl	800955e <_Balloc>
 80099da:	2301      	movs	r3, #1
 80099dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80099e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e4:	bfa4      	itt	ge
 80099e6:	4623      	movge	r3, r4
 80099e8:	462c      	movge	r4, r5
 80099ea:	4638      	mov	r0, r7
 80099ec:	6861      	ldr	r1, [r4, #4]
 80099ee:	bfa6      	itte	ge
 80099f0:	461d      	movge	r5, r3
 80099f2:	2600      	movge	r6, #0
 80099f4:	2601      	movlt	r6, #1
 80099f6:	f7ff fdb2 	bl	800955e <_Balloc>
 80099fa:	692b      	ldr	r3, [r5, #16]
 80099fc:	60c6      	str	r6, [r0, #12]
 80099fe:	6926      	ldr	r6, [r4, #16]
 8009a00:	f105 0914 	add.w	r9, r5, #20
 8009a04:	f104 0214 	add.w	r2, r4, #20
 8009a08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a10:	f100 0514 	add.w	r5, r0, #20
 8009a14:	f04f 0e00 	mov.w	lr, #0
 8009a18:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a20:	fa1e f18a 	uxtah	r1, lr, sl
 8009a24:	b2a3      	uxth	r3, r4
 8009a26:	1ac9      	subs	r1, r1, r3
 8009a28:	0c23      	lsrs	r3, r4, #16
 8009a2a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a32:	b289      	uxth	r1, r1
 8009a34:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009a38:	45c8      	cmp	r8, r9
 8009a3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a3e:	4694      	mov	ip, r2
 8009a40:	f845 3b04 	str.w	r3, [r5], #4
 8009a44:	d8e8      	bhi.n	8009a18 <__mdiff+0x5c>
 8009a46:	45bc      	cmp	ip, r7
 8009a48:	d304      	bcc.n	8009a54 <__mdiff+0x98>
 8009a4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009a4e:	b183      	cbz	r3, 8009a72 <__mdiff+0xb6>
 8009a50:	6106      	str	r6, [r0, #16]
 8009a52:	e7c5      	b.n	80099e0 <__mdiff+0x24>
 8009a54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a58:	fa1e f381 	uxtah	r3, lr, r1
 8009a5c:	141a      	asrs	r2, r3, #16
 8009a5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009a6c:	f845 3b04 	str.w	r3, [r5], #4
 8009a70:	e7e9      	b.n	8009a46 <__mdiff+0x8a>
 8009a72:	3e01      	subs	r6, #1
 8009a74:	e7e9      	b.n	8009a4a <__mdiff+0x8e>

08009a76 <__d2b>:
 8009a76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a7a:	460e      	mov	r6, r1
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	ec59 8b10 	vmov	r8, r9, d0
 8009a82:	4615      	mov	r5, r2
 8009a84:	f7ff fd6b 	bl	800955e <_Balloc>
 8009a88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a92:	bb34      	cbnz	r4, 8009ae2 <__d2b+0x6c>
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	f1b8 0300 	subs.w	r3, r8, #0
 8009a9a:	d027      	beq.n	8009aec <__d2b+0x76>
 8009a9c:	a802      	add	r0, sp, #8
 8009a9e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009aa2:	f7ff fe01 	bl	80096a8 <__lo0bits>
 8009aa6:	9900      	ldr	r1, [sp, #0]
 8009aa8:	b1f0      	cbz	r0, 8009ae8 <__d2b+0x72>
 8009aaa:	9a01      	ldr	r2, [sp, #4]
 8009aac:	f1c0 0320 	rsb	r3, r0, #32
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	430b      	orrs	r3, r1
 8009ab6:	40c2      	lsrs	r2, r0
 8009ab8:	617b      	str	r3, [r7, #20]
 8009aba:	9201      	str	r2, [sp, #4]
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bf14      	ite	ne
 8009ac4:	2102      	movne	r1, #2
 8009ac6:	2101      	moveq	r1, #1
 8009ac8:	6139      	str	r1, [r7, #16]
 8009aca:	b1c4      	cbz	r4, 8009afe <__d2b+0x88>
 8009acc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ad0:	4404      	add	r4, r0
 8009ad2:	6034      	str	r4, [r6, #0]
 8009ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ad8:	6028      	str	r0, [r5, #0]
 8009ada:	4638      	mov	r0, r7
 8009adc:	b003      	add	sp, #12
 8009ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ae6:	e7d5      	b.n	8009a94 <__d2b+0x1e>
 8009ae8:	6179      	str	r1, [r7, #20]
 8009aea:	e7e7      	b.n	8009abc <__d2b+0x46>
 8009aec:	a801      	add	r0, sp, #4
 8009aee:	f7ff fddb 	bl	80096a8 <__lo0bits>
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	2101      	movs	r1, #1
 8009af8:	6139      	str	r1, [r7, #16]
 8009afa:	3020      	adds	r0, #32
 8009afc:	e7e5      	b.n	8009aca <__d2b+0x54>
 8009afe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b06:	6030      	str	r0, [r6, #0]
 8009b08:	6918      	ldr	r0, [r3, #16]
 8009b0a:	f7ff fdae 	bl	800966a <__hi0bits>
 8009b0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b12:	e7e1      	b.n	8009ad8 <__d2b+0x62>

08009b14 <_calloc_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	fb02 f401 	mul.w	r4, r2, r1
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f000 f856 	bl	8009bcc <_malloc_r>
 8009b20:	4605      	mov	r5, r0
 8009b22:	b118      	cbz	r0, 8009b2c <_calloc_r+0x18>
 8009b24:	4622      	mov	r2, r4
 8009b26:	2100      	movs	r1, #0
 8009b28:	f7fd ffc4 	bl	8007ab4 <memset>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}

08009b30 <_free_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4605      	mov	r5, r0
 8009b34:	2900      	cmp	r1, #0
 8009b36:	d045      	beq.n	8009bc4 <_free_r+0x94>
 8009b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b3c:	1f0c      	subs	r4, r1, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfb8      	it	lt
 8009b42:	18e4      	addlt	r4, r4, r3
 8009b44:	f000 fa98 	bl	800a078 <__malloc_lock>
 8009b48:	4a1f      	ldr	r2, [pc, #124]	; (8009bc8 <_free_r+0x98>)
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	b933      	cbnz	r3, 8009b5e <_free_r+0x2e>
 8009b50:	6063      	str	r3, [r4, #4]
 8009b52:	6014      	str	r4, [r2, #0]
 8009b54:	4628      	mov	r0, r5
 8009b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b5a:	f000 ba8e 	b.w	800a07a <__malloc_unlock>
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	d90c      	bls.n	8009b7c <_free_r+0x4c>
 8009b62:	6821      	ldr	r1, [r4, #0]
 8009b64:	1862      	adds	r2, r4, r1
 8009b66:	4293      	cmp	r3, r2
 8009b68:	bf04      	itt	eq
 8009b6a:	681a      	ldreq	r2, [r3, #0]
 8009b6c:	685b      	ldreq	r3, [r3, #4]
 8009b6e:	6063      	str	r3, [r4, #4]
 8009b70:	bf04      	itt	eq
 8009b72:	1852      	addeq	r2, r2, r1
 8009b74:	6022      	streq	r2, [r4, #0]
 8009b76:	6004      	str	r4, [r0, #0]
 8009b78:	e7ec      	b.n	8009b54 <_free_r+0x24>
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	b10a      	cbz	r2, 8009b84 <_free_r+0x54>
 8009b80:	42a2      	cmp	r2, r4
 8009b82:	d9fa      	bls.n	8009b7a <_free_r+0x4a>
 8009b84:	6819      	ldr	r1, [r3, #0]
 8009b86:	1858      	adds	r0, r3, r1
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d10b      	bne.n	8009ba4 <_free_r+0x74>
 8009b8c:	6820      	ldr	r0, [r4, #0]
 8009b8e:	4401      	add	r1, r0
 8009b90:	1858      	adds	r0, r3, r1
 8009b92:	4282      	cmp	r2, r0
 8009b94:	6019      	str	r1, [r3, #0]
 8009b96:	d1dd      	bne.n	8009b54 <_free_r+0x24>
 8009b98:	6810      	ldr	r0, [r2, #0]
 8009b9a:	6852      	ldr	r2, [r2, #4]
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	4401      	add	r1, r0
 8009ba0:	6019      	str	r1, [r3, #0]
 8009ba2:	e7d7      	b.n	8009b54 <_free_r+0x24>
 8009ba4:	d902      	bls.n	8009bac <_free_r+0x7c>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	e7d3      	b.n	8009b54 <_free_r+0x24>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	1821      	adds	r1, r4, r0
 8009bb0:	428a      	cmp	r2, r1
 8009bb2:	bf04      	itt	eq
 8009bb4:	6811      	ldreq	r1, [r2, #0]
 8009bb6:	6852      	ldreq	r2, [r2, #4]
 8009bb8:	6062      	str	r2, [r4, #4]
 8009bba:	bf04      	itt	eq
 8009bbc:	1809      	addeq	r1, r1, r0
 8009bbe:	6021      	streq	r1, [r4, #0]
 8009bc0:	605c      	str	r4, [r3, #4]
 8009bc2:	e7c7      	b.n	8009b54 <_free_r+0x24>
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	2005f72c 	.word	0x2005f72c

08009bcc <_malloc_r>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	1ccd      	adds	r5, r1, #3
 8009bd0:	f025 0503 	bic.w	r5, r5, #3
 8009bd4:	3508      	adds	r5, #8
 8009bd6:	2d0c      	cmp	r5, #12
 8009bd8:	bf38      	it	cc
 8009bda:	250c      	movcc	r5, #12
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	4606      	mov	r6, r0
 8009be0:	db01      	blt.n	8009be6 <_malloc_r+0x1a>
 8009be2:	42a9      	cmp	r1, r5
 8009be4:	d903      	bls.n	8009bee <_malloc_r+0x22>
 8009be6:	230c      	movs	r3, #12
 8009be8:	6033      	str	r3, [r6, #0]
 8009bea:	2000      	movs	r0, #0
 8009bec:	bd70      	pop	{r4, r5, r6, pc}
 8009bee:	f000 fa43 	bl	800a078 <__malloc_lock>
 8009bf2:	4a21      	ldr	r2, [pc, #132]	; (8009c78 <_malloc_r+0xac>)
 8009bf4:	6814      	ldr	r4, [r2, #0]
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	b991      	cbnz	r1, 8009c20 <_malloc_r+0x54>
 8009bfa:	4c20      	ldr	r4, [pc, #128]	; (8009c7c <_malloc_r+0xb0>)
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	b91b      	cbnz	r3, 8009c08 <_malloc_r+0x3c>
 8009c00:	4630      	mov	r0, r6
 8009c02:	f000 f97d 	bl	8009f00 <_sbrk_r>
 8009c06:	6020      	str	r0, [r4, #0]
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 f978 	bl	8009f00 <_sbrk_r>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d124      	bne.n	8009c5e <_malloc_r+0x92>
 8009c14:	230c      	movs	r3, #12
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f000 fa2e 	bl	800a07a <__malloc_unlock>
 8009c1e:	e7e4      	b.n	8009bea <_malloc_r+0x1e>
 8009c20:	680b      	ldr	r3, [r1, #0]
 8009c22:	1b5b      	subs	r3, r3, r5
 8009c24:	d418      	bmi.n	8009c58 <_malloc_r+0x8c>
 8009c26:	2b0b      	cmp	r3, #11
 8009c28:	d90f      	bls.n	8009c4a <_malloc_r+0x7e>
 8009c2a:	600b      	str	r3, [r1, #0]
 8009c2c:	50cd      	str	r5, [r1, r3]
 8009c2e:	18cc      	adds	r4, r1, r3
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 fa22 	bl	800a07a <__malloc_unlock>
 8009c36:	f104 000b 	add.w	r0, r4, #11
 8009c3a:	1d23      	adds	r3, r4, #4
 8009c3c:	f020 0007 	bic.w	r0, r0, #7
 8009c40:	1ac3      	subs	r3, r0, r3
 8009c42:	d0d3      	beq.n	8009bec <_malloc_r+0x20>
 8009c44:	425a      	negs	r2, r3
 8009c46:	50e2      	str	r2, [r4, r3]
 8009c48:	e7d0      	b.n	8009bec <_malloc_r+0x20>
 8009c4a:	428c      	cmp	r4, r1
 8009c4c:	684b      	ldr	r3, [r1, #4]
 8009c4e:	bf16      	itet	ne
 8009c50:	6063      	strne	r3, [r4, #4]
 8009c52:	6013      	streq	r3, [r2, #0]
 8009c54:	460c      	movne	r4, r1
 8009c56:	e7eb      	b.n	8009c30 <_malloc_r+0x64>
 8009c58:	460c      	mov	r4, r1
 8009c5a:	6849      	ldr	r1, [r1, #4]
 8009c5c:	e7cc      	b.n	8009bf8 <_malloc_r+0x2c>
 8009c5e:	1cc4      	adds	r4, r0, #3
 8009c60:	f024 0403 	bic.w	r4, r4, #3
 8009c64:	42a0      	cmp	r0, r4
 8009c66:	d005      	beq.n	8009c74 <_malloc_r+0xa8>
 8009c68:	1a21      	subs	r1, r4, r0
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 f948 	bl	8009f00 <_sbrk_r>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d0cf      	beq.n	8009c14 <_malloc_r+0x48>
 8009c74:	6025      	str	r5, [r4, #0]
 8009c76:	e7db      	b.n	8009c30 <_malloc_r+0x64>
 8009c78:	2005f72c 	.word	0x2005f72c
 8009c7c:	2005f730 	.word	0x2005f730

08009c80 <__sfputc_r>:
 8009c80:	6893      	ldr	r3, [r2, #8]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	b410      	push	{r4}
 8009c88:	6093      	str	r3, [r2, #8]
 8009c8a:	da08      	bge.n	8009c9e <__sfputc_r+0x1e>
 8009c8c:	6994      	ldr	r4, [r2, #24]
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	db01      	blt.n	8009c96 <__sfputc_r+0x16>
 8009c92:	290a      	cmp	r1, #10
 8009c94:	d103      	bne.n	8009c9e <__sfputc_r+0x1e>
 8009c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9a:	f7fe bbc9 	b.w	8008430 <__swbuf_r>
 8009c9e:	6813      	ldr	r3, [r2, #0]
 8009ca0:	1c58      	adds	r0, r3, #1
 8009ca2:	6010      	str	r0, [r2, #0]
 8009ca4:	7019      	strb	r1, [r3, #0]
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <__sfputs_r>:
 8009cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	18d5      	adds	r5, r2, r3
 8009cb8:	42ac      	cmp	r4, r5
 8009cba:	d101      	bne.n	8009cc0 <__sfputs_r+0x12>
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e007      	b.n	8009cd0 <__sfputs_r+0x22>
 8009cc0:	463a      	mov	r2, r7
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7ff ffda 	bl	8009c80 <__sfputc_r>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d1f3      	bne.n	8009cb8 <__sfputs_r+0xa>
 8009cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cd4 <_vfiprintf_r>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	460c      	mov	r4, r1
 8009cda:	b09d      	sub	sp, #116	; 0x74
 8009cdc:	4617      	mov	r7, r2
 8009cde:	461d      	mov	r5, r3
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	b118      	cbz	r0, 8009cec <_vfiprintf_r+0x18>
 8009ce4:	6983      	ldr	r3, [r0, #24]
 8009ce6:	b90b      	cbnz	r3, 8009cec <_vfiprintf_r+0x18>
 8009ce8:	f7ff fb2a 	bl	8009340 <__sinit>
 8009cec:	4b7c      	ldr	r3, [pc, #496]	; (8009ee0 <_vfiprintf_r+0x20c>)
 8009cee:	429c      	cmp	r4, r3
 8009cf0:	d158      	bne.n	8009da4 <_vfiprintf_r+0xd0>
 8009cf2:	6874      	ldr	r4, [r6, #4]
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	0718      	lsls	r0, r3, #28
 8009cf8:	d55e      	bpl.n	8009db8 <_vfiprintf_r+0xe4>
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d05b      	beq.n	8009db8 <_vfiprintf_r+0xe4>
 8009d00:	2300      	movs	r3, #0
 8009d02:	9309      	str	r3, [sp, #36]	; 0x24
 8009d04:	2320      	movs	r3, #32
 8009d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d0a:	2330      	movs	r3, #48	; 0x30
 8009d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d10:	9503      	str	r5, [sp, #12]
 8009d12:	f04f 0b01 	mov.w	fp, #1
 8009d16:	46b8      	mov	r8, r7
 8009d18:	4645      	mov	r5, r8
 8009d1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d1e:	b10b      	cbz	r3, 8009d24 <_vfiprintf_r+0x50>
 8009d20:	2b25      	cmp	r3, #37	; 0x25
 8009d22:	d154      	bne.n	8009dce <_vfiprintf_r+0xfa>
 8009d24:	ebb8 0a07 	subs.w	sl, r8, r7
 8009d28:	d00b      	beq.n	8009d42 <_vfiprintf_r+0x6e>
 8009d2a:	4653      	mov	r3, sl
 8009d2c:	463a      	mov	r2, r7
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff ffbc 	bl	8009cae <__sfputs_r>
 8009d36:	3001      	adds	r0, #1
 8009d38:	f000 80c2 	beq.w	8009ec0 <_vfiprintf_r+0x1ec>
 8009d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3e:	4453      	add	r3, sl
 8009d40:	9309      	str	r3, [sp, #36]	; 0x24
 8009d42:	f898 3000 	ldrb.w	r3, [r8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 80ba 	beq.w	8009ec0 <_vfiprintf_r+0x1ec>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d56:	9304      	str	r3, [sp, #16]
 8009d58:	9307      	str	r3, [sp, #28]
 8009d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d60:	46a8      	mov	r8, r5
 8009d62:	2205      	movs	r2, #5
 8009d64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009d68:	485e      	ldr	r0, [pc, #376]	; (8009ee4 <_vfiprintf_r+0x210>)
 8009d6a:	f7f6 fa71 	bl	8000250 <memchr>
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	bb78      	cbnz	r0, 8009dd2 <_vfiprintf_r+0xfe>
 8009d72:	06d9      	lsls	r1, r3, #27
 8009d74:	bf44      	itt	mi
 8009d76:	2220      	movmi	r2, #32
 8009d78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d7c:	071a      	lsls	r2, r3, #28
 8009d7e:	bf44      	itt	mi
 8009d80:	222b      	movmi	r2, #43	; 0x2b
 8009d82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d86:	782a      	ldrb	r2, [r5, #0]
 8009d88:	2a2a      	cmp	r2, #42	; 0x2a
 8009d8a:	d02a      	beq.n	8009de2 <_vfiprintf_r+0x10e>
 8009d8c:	9a07      	ldr	r2, [sp, #28]
 8009d8e:	46a8      	mov	r8, r5
 8009d90:	2000      	movs	r0, #0
 8009d92:	250a      	movs	r5, #10
 8009d94:	4641      	mov	r1, r8
 8009d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d9a:	3b30      	subs	r3, #48	; 0x30
 8009d9c:	2b09      	cmp	r3, #9
 8009d9e:	d969      	bls.n	8009e74 <_vfiprintf_r+0x1a0>
 8009da0:	b360      	cbz	r0, 8009dfc <_vfiprintf_r+0x128>
 8009da2:	e024      	b.n	8009dee <_vfiprintf_r+0x11a>
 8009da4:	4b50      	ldr	r3, [pc, #320]	; (8009ee8 <_vfiprintf_r+0x214>)
 8009da6:	429c      	cmp	r4, r3
 8009da8:	d101      	bne.n	8009dae <_vfiprintf_r+0xda>
 8009daa:	68b4      	ldr	r4, [r6, #8]
 8009dac:	e7a2      	b.n	8009cf4 <_vfiprintf_r+0x20>
 8009dae:	4b4f      	ldr	r3, [pc, #316]	; (8009eec <_vfiprintf_r+0x218>)
 8009db0:	429c      	cmp	r4, r3
 8009db2:	bf08      	it	eq
 8009db4:	68f4      	ldreq	r4, [r6, #12]
 8009db6:	e79d      	b.n	8009cf4 <_vfiprintf_r+0x20>
 8009db8:	4621      	mov	r1, r4
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7fe fb8a 	bl	80084d4 <__swsetup_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d09d      	beq.n	8009d00 <_vfiprintf_r+0x2c>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	b01d      	add	sp, #116	; 0x74
 8009dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dce:	46a8      	mov	r8, r5
 8009dd0:	e7a2      	b.n	8009d18 <_vfiprintf_r+0x44>
 8009dd2:	4a44      	ldr	r2, [pc, #272]	; (8009ee4 <_vfiprintf_r+0x210>)
 8009dd4:	1a80      	subs	r0, r0, r2
 8009dd6:	fa0b f000 	lsl.w	r0, fp, r0
 8009dda:	4318      	orrs	r0, r3
 8009ddc:	9004      	str	r0, [sp, #16]
 8009dde:	4645      	mov	r5, r8
 8009de0:	e7be      	b.n	8009d60 <_vfiprintf_r+0x8c>
 8009de2:	9a03      	ldr	r2, [sp, #12]
 8009de4:	1d11      	adds	r1, r2, #4
 8009de6:	6812      	ldr	r2, [r2, #0]
 8009de8:	9103      	str	r1, [sp, #12]
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	db01      	blt.n	8009df2 <_vfiprintf_r+0x11e>
 8009dee:	9207      	str	r2, [sp, #28]
 8009df0:	e004      	b.n	8009dfc <_vfiprintf_r+0x128>
 8009df2:	4252      	negs	r2, r2
 8009df4:	f043 0302 	orr.w	r3, r3, #2
 8009df8:	9207      	str	r2, [sp, #28]
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	f898 3000 	ldrb.w	r3, [r8]
 8009e00:	2b2e      	cmp	r3, #46	; 0x2e
 8009e02:	d10e      	bne.n	8009e22 <_vfiprintf_r+0x14e>
 8009e04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e08:	2b2a      	cmp	r3, #42	; 0x2a
 8009e0a:	d138      	bne.n	8009e7e <_vfiprintf_r+0x1aa>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	1d1a      	adds	r2, r3, #4
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	9203      	str	r2, [sp, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	bfb8      	it	lt
 8009e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e1c:	f108 0802 	add.w	r8, r8, #2
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4d33      	ldr	r5, [pc, #204]	; (8009ef0 <_vfiprintf_r+0x21c>)
 8009e24:	f898 1000 	ldrb.w	r1, [r8]
 8009e28:	2203      	movs	r2, #3
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7f6 fa10 	bl	8000250 <memchr>
 8009e30:	b140      	cbz	r0, 8009e44 <_vfiprintf_r+0x170>
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	1b40      	subs	r0, r0, r5
 8009e36:	fa03 f000 	lsl.w	r0, r3, r0
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	4303      	orrs	r3, r0
 8009e3e:	f108 0801 	add.w	r8, r8, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	f898 1000 	ldrb.w	r1, [r8]
 8009e48:	482a      	ldr	r0, [pc, #168]	; (8009ef4 <_vfiprintf_r+0x220>)
 8009e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e4e:	2206      	movs	r2, #6
 8009e50:	f108 0701 	add.w	r7, r8, #1
 8009e54:	f7f6 f9fc 	bl	8000250 <memchr>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d037      	beq.n	8009ecc <_vfiprintf_r+0x1f8>
 8009e5c:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <_vfiprintf_r+0x224>)
 8009e5e:	bb1b      	cbnz	r3, 8009ea8 <_vfiprintf_r+0x1d4>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	3307      	adds	r3, #7
 8009e64:	f023 0307 	bic.w	r3, r3, #7
 8009e68:	3308      	adds	r3, #8
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6e:	444b      	add	r3, r9
 8009e70:	9309      	str	r3, [sp, #36]	; 0x24
 8009e72:	e750      	b.n	8009d16 <_vfiprintf_r+0x42>
 8009e74:	fb05 3202 	mla	r2, r5, r2, r3
 8009e78:	2001      	movs	r0, #1
 8009e7a:	4688      	mov	r8, r1
 8009e7c:	e78a      	b.n	8009d94 <_vfiprintf_r+0xc0>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f108 0801 	add.w	r8, r8, #1
 8009e84:	9305      	str	r3, [sp, #20]
 8009e86:	4619      	mov	r1, r3
 8009e88:	250a      	movs	r5, #10
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e90:	3a30      	subs	r2, #48	; 0x30
 8009e92:	2a09      	cmp	r2, #9
 8009e94:	d903      	bls.n	8009e9e <_vfiprintf_r+0x1ca>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0c3      	beq.n	8009e22 <_vfiprintf_r+0x14e>
 8009e9a:	9105      	str	r1, [sp, #20]
 8009e9c:	e7c1      	b.n	8009e22 <_vfiprintf_r+0x14e>
 8009e9e:	fb05 2101 	mla	r1, r5, r1, r2
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	e7f0      	b.n	8009e8a <_vfiprintf_r+0x1b6>
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	4622      	mov	r2, r4
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <_vfiprintf_r+0x228>)
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7fd fe8c 	bl	8007bd0 <_printf_float>
 8009eb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ebc:	4681      	mov	r9, r0
 8009ebe:	d1d5      	bne.n	8009e6c <_vfiprintf_r+0x198>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	065b      	lsls	r3, r3, #25
 8009ec4:	f53f af7e 	bmi.w	8009dc4 <_vfiprintf_r+0xf0>
 8009ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eca:	e77d      	b.n	8009dc8 <_vfiprintf_r+0xf4>
 8009ecc:	ab03      	add	r3, sp, #12
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <_vfiprintf_r+0x228>)
 8009ed4:	a904      	add	r1, sp, #16
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7fe f91c 	bl	8008114 <_printf_i>
 8009edc:	e7ec      	b.n	8009eb8 <_vfiprintf_r+0x1e4>
 8009ede:	bf00      	nop
 8009ee0:	0800a16c 	.word	0x0800a16c
 8009ee4:	0800a2ac 	.word	0x0800a2ac
 8009ee8:	0800a18c 	.word	0x0800a18c
 8009eec:	0800a14c 	.word	0x0800a14c
 8009ef0:	0800a2b2 	.word	0x0800a2b2
 8009ef4:	0800a2b6 	.word	0x0800a2b6
 8009ef8:	08007bd1 	.word	0x08007bd1
 8009efc:	08009caf 	.word	0x08009caf

08009f00 <_sbrk_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4c06      	ldr	r4, [pc, #24]	; (8009f1c <_sbrk_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4605      	mov	r5, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	f7f9 fe9a 	bl	8003c44 <_sbrk>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_sbrk_r+0x1a>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_sbrk_r+0x1a>
 8009f18:	602b      	str	r3, [r5, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	2005fd80 	.word	0x2005fd80

08009f20 <__sread>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	460c      	mov	r4, r1
 8009f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f28:	f000 f8a8 	bl	800a07c <_read_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	bfab      	itete	ge
 8009f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f32:	89a3      	ldrhlt	r3, [r4, #12]
 8009f34:	181b      	addge	r3, r3, r0
 8009f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f3a:	bfac      	ite	ge
 8009f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f3e:	81a3      	strhlt	r3, [r4, #12]
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <__swrite>:
 8009f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f46:	461f      	mov	r7, r3
 8009f48:	898b      	ldrh	r3, [r1, #12]
 8009f4a:	05db      	lsls	r3, r3, #23
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	4616      	mov	r6, r2
 8009f52:	d505      	bpl.n	8009f60 <__swrite+0x1e>
 8009f54:	2302      	movs	r3, #2
 8009f56:	2200      	movs	r2, #0
 8009f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5c:	f000 f868 	bl	800a030 <_lseek_r>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	4628      	mov	r0, r5
 8009f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f76:	f000 b817 	b.w	8009fa8 <_write_r>

08009f7a <__sseek>:
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f82:	f000 f855 	bl	800a030 <_lseek_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	bf15      	itete	ne
 8009f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f96:	81a3      	strheq	r3, [r4, #12]
 8009f98:	bf18      	it	ne
 8009f9a:	81a3      	strhne	r3, [r4, #12]
 8009f9c:	bd10      	pop	{r4, pc}

08009f9e <__sclose>:
 8009f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa2:	f000 b813 	b.w	8009fcc <_close_r>
	...

08009fa8 <_write_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4c07      	ldr	r4, [pc, #28]	; (8009fc8 <_write_r+0x20>)
 8009fac:	4605      	mov	r5, r0
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	6022      	str	r2, [r4, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f7f9 fdf3 	bl	8003ba2 <_write>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_write_r+0x1e>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_write_r+0x1e>
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	2005fd80 	.word	0x2005fd80

08009fcc <_close_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4c06      	ldr	r4, [pc, #24]	; (8009fe8 <_close_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	f7f9 fdff 	bl	8003bda <_close>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_close_r+0x1a>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_close_r+0x1a>
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	2005fd80 	.word	0x2005fd80

08009fec <_fstat_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4c07      	ldr	r4, [pc, #28]	; (800a00c <_fstat_r+0x20>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	f7f9 fdfa 	bl	8003bf2 <_fstat>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d102      	bne.n	800a008 <_fstat_r+0x1c>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	b103      	cbz	r3, 800a008 <_fstat_r+0x1c>
 800a006:	602b      	str	r3, [r5, #0]
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	bf00      	nop
 800a00c:	2005fd80 	.word	0x2005fd80

0800a010 <_isatty_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4c06      	ldr	r4, [pc, #24]	; (800a02c <_isatty_r+0x1c>)
 800a014:	2300      	movs	r3, #0
 800a016:	4605      	mov	r5, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	f7f9 fdf9 	bl	8003c12 <_isatty>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_isatty_r+0x1a>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	b103      	cbz	r3, 800a02a <_isatty_r+0x1a>
 800a028:	602b      	str	r3, [r5, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	2005fd80 	.word	0x2005fd80

0800a030 <_lseek_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4c07      	ldr	r4, [pc, #28]	; (800a050 <_lseek_r+0x20>)
 800a034:	4605      	mov	r5, r0
 800a036:	4608      	mov	r0, r1
 800a038:	4611      	mov	r1, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	6022      	str	r2, [r4, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	f7f9 fdf2 	bl	8003c28 <_lseek>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_lseek_r+0x1e>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_lseek_r+0x1e>
 800a04c:	602b      	str	r3, [r5, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	2005fd80 	.word	0x2005fd80

0800a054 <__ascii_mbtowc>:
 800a054:	b082      	sub	sp, #8
 800a056:	b901      	cbnz	r1, 800a05a <__ascii_mbtowc+0x6>
 800a058:	a901      	add	r1, sp, #4
 800a05a:	b142      	cbz	r2, 800a06e <__ascii_mbtowc+0x1a>
 800a05c:	b14b      	cbz	r3, 800a072 <__ascii_mbtowc+0x1e>
 800a05e:	7813      	ldrb	r3, [r2, #0]
 800a060:	600b      	str	r3, [r1, #0]
 800a062:	7812      	ldrb	r2, [r2, #0]
 800a064:	1c10      	adds	r0, r2, #0
 800a066:	bf18      	it	ne
 800a068:	2001      	movne	r0, #1
 800a06a:	b002      	add	sp, #8
 800a06c:	4770      	bx	lr
 800a06e:	4610      	mov	r0, r2
 800a070:	e7fb      	b.n	800a06a <__ascii_mbtowc+0x16>
 800a072:	f06f 0001 	mvn.w	r0, #1
 800a076:	e7f8      	b.n	800a06a <__ascii_mbtowc+0x16>

0800a078 <__malloc_lock>:
 800a078:	4770      	bx	lr

0800a07a <__malloc_unlock>:
 800a07a:	4770      	bx	lr

0800a07c <_read_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4c07      	ldr	r4, [pc, #28]	; (800a09c <_read_r+0x20>)
 800a080:	4605      	mov	r5, r0
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	2200      	movs	r2, #0
 800a088:	6022      	str	r2, [r4, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f7f9 fd6c 	bl	8003b68 <_read>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_read_r+0x1e>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	b103      	cbz	r3, 800a09a <_read_r+0x1e>
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	2005fd80 	.word	0x2005fd80

0800a0a0 <__ascii_wctomb>:
 800a0a0:	b149      	cbz	r1, 800a0b6 <__ascii_wctomb+0x16>
 800a0a2:	2aff      	cmp	r2, #255	; 0xff
 800a0a4:	bf85      	ittet	hi
 800a0a6:	238a      	movhi	r3, #138	; 0x8a
 800a0a8:	6003      	strhi	r3, [r0, #0]
 800a0aa:	700a      	strbls	r2, [r1, #0]
 800a0ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0b0:	bf98      	it	ls
 800a0b2:	2001      	movls	r0, #1
 800a0b4:	4770      	bx	lr
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4770      	bx	lr
	...

0800a0bc <_init>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <_fini>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	bf00      	nop
 800a0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ce:	bc08      	pop	{r3}
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4770      	bx	lr
