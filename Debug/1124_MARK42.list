
1124_MARK42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e41c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800e620  0800e620  0001e620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed40  0800ed40  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed40  0800ed40  0001ed40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed48  0800ed48  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed48  0800ed48  0001ed48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed4c  0800ed4c  0001ed4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800ed50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00072e6c  20000218  0800ef64  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20073084  0800ef64  00023084  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187d9  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d29  00000000  00000000  00038a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003cc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a5e0  00000000  00000000  0003e050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000100b5  00000000  00000000  00068630  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010144e  00000000  00000000  000786e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006928  00000000  00000000  00179bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000218 	.word	0x20000218
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e604 	.word	0x0800e604

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000021c 	.word	0x2000021c
 800023c:	0800e604 	.word	0x0800e604

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 fa44 	bl	8000a8c <bno055_writeData>
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	203d      	movs	r0, #61	; 0x3d
 800061c:	f000 fa36 	bl	8000a8c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000626:	2013      	movs	r0, #19
 8000628:	f000 fa24 	bl	8000a74 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800062c:	e002      	b.n	8000634 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 fa20 	bl	8000a74 <bno055_delay>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffe3 	bl	800060c <bno055_setOperationMode>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800064e:	200c      	movs	r0, #12
 8000650:	f7ff ffdc 	bl	800060c <bno055_setOperationMode>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800065c:	2120      	movs	r1, #32
 800065e:	203f      	movs	r0, #63	; 0x3f
 8000660:	f000 fa14 	bl	8000a8c <bno055_writeData>
  bno055_delay(700);
 8000664:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000668:	f000 fa04 	bl	8000a74 <bno055_delay>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  bno055_reset();
 8000676:	f7ff ffef 	bl	8000658 <bno055_reset>

  uint8_t id = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	2000      	movs	r0, #0
 8000686:	f000 faed 	bl	8000c64 <bno055_readData>
  if (id != BNO055_ID) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2ba0      	cmp	r3, #160	; 0xa0
 800068e:	d004      	beq.n	800069a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <bno055_setup+0x4c>)
 8000696:	f00b f94f 	bl	800b938 <iprintf>
  }
  bno055_setPage(0);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffa8 	bl	80005f0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	203f      	movs	r0, #63	; 0x3f
 80006a4:	f000 f9f2 	bl	8000a8c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80006a8:	f7ff ffc8 	bl	800063c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 f9e1 	bl	8000a74 <bno055_delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	0800e620 	.word	0x0800e620

080006c0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c4:	b09f      	sub	sp, #124	; 0x7c
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff8e 	bl	80005f0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d108      	bne.n	80006ee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e4:	2208      	movs	r2, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fabc 	bl	8000c64 <bno055_readData>
 80006ec:	e007      	b.n	80006fe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f6:	2206      	movs	r2, #6
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fab3 	bl	8000c64 <bno055_readData>

  double scale = 1;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	4c81      	ldr	r4, [pc, #516]	; (8000908 <bno055_getVector+0x248>)
 8000704:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	2b0e      	cmp	r3, #14
 800070e:	d108      	bne.n	8000722 <bno055_getVector+0x62>
    scale = magScale;
 8000710:	4b7e      	ldr	r3, [pc, #504]	; (800090c <bno055_getVector+0x24c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800071c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000720:	e03a      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000726:	2b08      	cmp	r3, #8
 8000728:	d007      	beq.n	800073a <bno055_getVector+0x7a>
 800072a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072e:	2b28      	cmp	r3, #40	; 0x28
 8000730:	d003      	beq.n	800073a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000736:	2b2e      	cmp	r3, #46	; 0x2e
 8000738:	d108      	bne.n	800074c <bno055_getVector+0x8c>
    scale = accelScale;
 800073a:	4b75      	ldr	r3, [pc, #468]	; (8000910 <bno055_getVector+0x250>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000746:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800074a:	e025      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800074c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000750:	2b14      	cmp	r3, #20
 8000752:	d108      	bne.n	8000766 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000754:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <bno055_getVector+0x254>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000760:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000764:	e018      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800076a:	2b1a      	cmp	r3, #26
 800076c:	d108      	bne.n	8000780 <bno055_getVector+0xc0>
    scale = eulerScale;
 800076e:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <bno055_getVector+0x258>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800077a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800077e:	e00b      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000784:	2b20      	cmp	r3, #32
 8000786:	d107      	bne.n	8000798 <bno055_getVector+0xd8>
    scale = quaScale;
 8000788:	4b64      	ldr	r3, [pc, #400]	; (800091c <bno055_getVector+0x25c>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000794:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00a fc86 	bl	800b0b2 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80007a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d14c      	bne.n	8000848 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80007ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007c8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21a      	sxth	r2, r3
 80007dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007ee:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000814:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000818:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800082c:	b21b      	sxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b21b      	sxth	r3, r3
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800083a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800083e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000842:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000846:	e038      	b.n	80008ba <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000848:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000862:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000866:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800086e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800087a:	b21b      	sxth	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b21b      	sxth	r3, r3
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000888:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800088c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000890:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000894:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008ae:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80008b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80008ba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80008be:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80008d2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80008d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80008da:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80008de:	ec49 8b14 	vmov	d4, r8, r9
 80008e2:	ec46 5b15 	vmov	d5, r5, r6
 80008e6:	ec42 1b16 	vmov	d6, r1, r2
 80008ea:	ec44 3b17 	vmov	d7, r3, r4
}
 80008ee:	eeb0 0b44 	vmov.f64	d0, d4
 80008f2:	eeb0 1b45 	vmov.f64	d1, d5
 80008f6:	eeb0 2b46 	vmov.f64	d2, d6
 80008fa:	eeb0 3b47 	vmov.f64	d3, d7
 80008fe:	377c      	adds	r7, #124	; 0x7c
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000906:	bf00      	nop
 8000908:	3ff00000 	.word	0x3ff00000
 800090c:	20000006 	.word	0x20000006
 8000910:	20000000 	.word	0x20000000
 8000914:	20000002 	.word	0x20000002
 8000918:	20000004 	.word	0x20000004
 800091c:	20000008 	.word	0x20000008

08000920 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8000920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000924:	b091      	sub	sp, #68	; 0x44
 8000926:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff fec9 	bl	80006c0 <bno055_getVector>
 800092e:	eeb0 4b40 	vmov.f64	d4, d0
 8000932:	eeb0 5b41 	vmov.f64	d5, d1
 8000936:	eeb0 6b42 	vmov.f64	d6, d2
 800093a:	eeb0 7b43 	vmov.f64	d7, d3
 800093e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000942:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000946:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800094a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800094e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000952:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000956:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800095a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800095e:	ec49 8b14 	vmov	d4, r8, r9
 8000962:	ec46 5b15 	vmov	d5, r5, r6
 8000966:	ec42 1b16 	vmov	d6, r1, r2
 800096a:	ec44 3b17 	vmov	d7, r3, r4
}
 800096e:	eeb0 0b44 	vmov.f64	d0, d4
 8000972:	eeb0 1b45 	vmov.f64	d1, d5
 8000976:	eeb0 2b46 	vmov.f64	d2, d6
 800097a:	eeb0 3b47 	vmov.f64	d3, d7
 800097e:	3744      	adds	r7, #68	; 0x44
 8000980:	46bd      	mov	sp, r7
 8000982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000986 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8000986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098a:	b091      	sub	sp, #68	; 0x44
 800098c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800098e:	2014      	movs	r0, #20
 8000990:	f7ff fe96 	bl	80006c0 <bno055_getVector>
 8000994:	eeb0 4b40 	vmov.f64	d4, d0
 8000998:	eeb0 5b41 	vmov.f64	d5, d1
 800099c:	eeb0 6b42 	vmov.f64	d6, d2
 80009a0:	eeb0 7b43 	vmov.f64	d7, d3
 80009a4:	ed87 4b08 	vstr	d4, [r7, #32]
 80009a8:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80009ac:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80009b0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80009b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80009b8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80009bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80009c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80009c4:	ec49 8b14 	vmov	d4, r8, r9
 80009c8:	ec46 5b15 	vmov	d5, r5, r6
 80009cc:	ec42 1b16 	vmov	d6, r1, r2
 80009d0:	ec44 3b17 	vmov	d7, r3, r4
}
 80009d4:	eeb0 0b44 	vmov.f64	d0, d4
 80009d8:	eeb0 1b45 	vmov.f64	d1, d5
 80009dc:	eeb0 2b46 	vmov.f64	d2, d6
 80009e0:	eeb0 3b47 	vmov.f64	d3, d7
 80009e4:	3744      	adds	r7, #68	; 0x44
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080009ec <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80009ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009f0:	b091      	sub	sp, #68	; 0x44
 80009f2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80009f4:	201a      	movs	r0, #26
 80009f6:	f7ff fe63 	bl	80006c0 <bno055_getVector>
 80009fa:	eeb0 4b40 	vmov.f64	d4, d0
 80009fe:	eeb0 5b41 	vmov.f64	d5, d1
 8000a02:	eeb0 6b42 	vmov.f64	d6, d2
 8000a06:	eeb0 7b43 	vmov.f64	d7, d3
 8000a0a:	ed87 4b08 	vstr	d4, [r7, #32]
 8000a0e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000a12:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000a16:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000a1a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000a1e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000a22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000a26:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000a2a:	ec49 8b14 	vmov	d4, r8, r9
 8000a2e:	ec46 5b15 	vmov	d5, r5, r6
 8000a32:	ec42 1b16 	vmov	d6, r1, r2
 8000a36:	ec44 3b17 	vmov	d7, r3, r4
}
 8000a3a:	eeb0 0b44 	vmov.f64	d0, d4
 8000a3e:	eeb0 1b45 	vmov.f64	d1, d5
 8000a42:	eeb0 2b46 	vmov.f64	d2, d6
 8000a46:	eeb0 3b47 	vmov.f64	d3, d7
 8000a4a:	3744      	adds	r7, #68	; 0x44
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000a54 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <bno055_assignI2C+0x1c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20072eb0 	.word	0x20072eb0

08000a74 <bno055_delay>:

void bno055_delay(int time) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 ff9a 	bl	80069b8 <HAL_Delay>
#endif
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	733b      	strb	r3, [r7, #12]
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <bno055_writeData+0x184>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	230a      	movs	r3, #10
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2150      	movs	r1, #80	; 0x50
 8000ab4:	f006 fb20 	bl	80070f8 <HAL_I2C_Master_Transmit>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80a0 	beq.w	8000c04 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d103      	bne.n	8000ad2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000aca:	4852      	ldr	r0, [pc, #328]	; (8000c14 <bno055_writeData+0x188>)
 8000acc:	f00a ffa8 	bl	800ba20 <puts>
 8000ad0:	e012      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d103      	bne.n	8000ae0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ad8:	484f      	ldr	r0, [pc, #316]	; (8000c18 <bno055_writeData+0x18c>)
 8000ada:	f00a ffa1 	bl	800ba20 <puts>
 8000ade:	e00b      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d103      	bne.n	8000aee <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ae6:	484d      	ldr	r0, [pc, #308]	; (8000c1c <bno055_writeData+0x190>)
 8000ae8:	f00a ff9a 	bl	800ba20 <puts>
 8000aec:	e004      	b.n	8000af8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	4619      	mov	r1, r3
 8000af2:	484b      	ldr	r0, [pc, #300]	; (8000c20 <bno055_writeData+0x194>)
 8000af4:	f00a ff20 	bl	800b938 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <bno055_writeData+0x184>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fcf3 	bl	80074e8 <HAL_I2C_GetError>
 8000b02:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d07e      	beq.n	8000c08 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d103      	bne.n	8000b18 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000b10:	4844      	ldr	r0, [pc, #272]	; (8000c24 <bno055_writeData+0x198>)
 8000b12:	f00a ff85 	bl	800ba20 <puts>
 8000b16:	e021      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d103      	bne.n	8000b26 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <bno055_writeData+0x19c>)
 8000b20:	f00a ff7e 	bl	800ba20 <puts>
 8000b24:	e01a      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d103      	bne.n	8000b34 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000b2c:	483f      	ldr	r0, [pc, #252]	; (8000c2c <bno055_writeData+0x1a0>)
 8000b2e:	f00a ff77 	bl	800ba20 <puts>
 8000b32:	e013      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d103      	bne.n	8000b42 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000b3a:	483d      	ldr	r0, [pc, #244]	; (8000c30 <bno055_writeData+0x1a4>)
 8000b3c:	f00a ff70 	bl	800ba20 <puts>
 8000b40:	e00c      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b10      	cmp	r3, #16
 8000b46:	d103      	bne.n	8000b50 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <bno055_writeData+0x1a8>)
 8000b4a:	f00a ff69 	bl	800ba20 <puts>
 8000b4e:	e005      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	d102      	bne.n	8000b5c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000b56:	4838      	ldr	r0, [pc, #224]	; (8000c38 <bno055_writeData+0x1ac>)
 8000b58:	f00a ff62 	bl	800ba20 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <bno055_writeData+0x184>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f006 fcb3 	bl	80074cc <HAL_I2C_GetState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b70:	4832      	ldr	r0, [pc, #200]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b72:	f00a ff55 	bl	800ba20 <puts>
 8000b76:	e048      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d103      	bne.n	8000b86 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b80:	f00a ff4e 	bl	800ba20 <puts>
 8000b84:	e041      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b24      	cmp	r3, #36	; 0x24
 8000b8a:	d103      	bne.n	8000b94 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000b8c:	482c      	ldr	r0, [pc, #176]	; (8000c40 <bno055_writeData+0x1b4>)
 8000b8e:	f00a ff47 	bl	800ba20 <puts>
 8000b92:	e03a      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b21      	cmp	r3, #33	; 0x21
 8000b98:	d103      	bne.n	8000ba2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000b9a:	482a      	ldr	r0, [pc, #168]	; (8000c44 <bno055_writeData+0x1b8>)
 8000b9c:	f00a ff40 	bl	800ba20 <puts>
 8000ba0:	e033      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b22      	cmp	r3, #34	; 0x22
 8000ba6:	d103      	bne.n	8000bb0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ba8:	4827      	ldr	r0, [pc, #156]	; (8000c48 <bno055_writeData+0x1bc>)
 8000baa:	f00a ff39 	bl	800ba20 <puts>
 8000bae:	e02c      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b28      	cmp	r3, #40	; 0x28
 8000bb4:	d103      	bne.n	8000bbe <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <bno055_writeData+0x1c0>)
 8000bb8:	f00a ff32 	bl	800ba20 <puts>
 8000bbc:	e025      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b29      	cmp	r3, #41	; 0x29
 8000bc2:	d103      	bne.n	8000bcc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <bno055_writeData+0x1c4>)
 8000bc6:	f00a ff2b 	bl	800ba20 <puts>
 8000bca:	e01e      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd0:	d103      	bne.n	8000bda <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <bno055_writeData+0x1c8>)
 8000bd4:	f00a ff24 	bl	800ba20 <puts>
 8000bd8:	e017      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b60      	cmp	r3, #96	; 0x60
 8000bde:	d103      	bne.n	8000be8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000be0:	481d      	ldr	r0, [pc, #116]	; (8000c58 <bno055_writeData+0x1cc>)
 8000be2:	f00a ff1d 	bl	800ba20 <puts>
 8000be6:	e010      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2ba0      	cmp	r3, #160	; 0xa0
 8000bec:	d103      	bne.n	8000bf6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <bno055_writeData+0x1d0>)
 8000bf0:	f00a ff16 	bl	800ba20 <puts>
 8000bf4:	e009      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2be0      	cmp	r3, #224	; 0xe0
 8000bfa:	d106      	bne.n	8000c0a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <bno055_writeData+0x1d4>)
 8000bfe:	f00a ff0f 	bl	800ba20 <puts>
 8000c02:	e002      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c08:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20072eb0 	.word	0x20072eb0
 8000c14:	0800e65c 	.word	0x0800e65c
 8000c18:	0800e680 	.word	0x0800e680
 8000c1c:	0800e6a8 	.word	0x0800e6a8
 8000c20:	0800e6cc 	.word	0x0800e6cc
 8000c24:	0800e6e4 	.word	0x0800e6e4
 8000c28:	0800e6f8 	.word	0x0800e6f8
 8000c2c:	0800e70c 	.word	0x0800e70c
 8000c30:	0800e720 	.word	0x0800e720
 8000c34:	0800e734 	.word	0x0800e734
 8000c38:	0800e748 	.word	0x0800e748
 8000c3c:	0800e760 	.word	0x0800e760
 8000c40:	0800e778 	.word	0x0800e778
 8000c44:	0800e78c 	.word	0x0800e78c
 8000c48:	0800e7a4 	.word	0x0800e7a4
 8000c4c:	0800e7bc 	.word	0x0800e7bc
 8000c50:	0800e7d4 	.word	0x0800e7d4
 8000c54:	0800e7f4 	.word	0x0800e7f4
 8000c58:	0800e814 	.word	0x0800e814
 8000c5c:	0800e82c 	.word	0x0800e82c
 8000c60:	0800e844 	.word	0x0800e844

08000c64 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <bno055_readData+0x40>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	1dfa      	adds	r2, r7, #7
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2150      	movs	r1, #80	; 0x50
 8000c82:	f006 fa39 	bl	80070f8 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <bno055_readData+0x40>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4613      	mov	r3, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	2150      	movs	r1, #80	; 0x50
 8000c98:	f006 fb22 	bl	80072e0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20072eb0 	.word	0x20072eb0

08000ca8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <__io_putchar+0x20>)
 8000cba:	f009 fa77 	bl	800a1ac <HAL_UART_Transmit>

  return ch;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200729e0 	.word	0x200729e0
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	ed2d 8b04 	vpush	{d8-d9}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	f043 8671 	bne.w	80049ca <HAL_TIM_PeriodElapsedCallback+0x3cfa>
		// TIM2 task
    switch(mode){
 8000ce8:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d031      	beq.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	f003 8669 	beq.w	80049c8 <HAL_TIM_PeriodElapsedCallback+0x3cf8>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x2e>

        break;
    }

		}
}
 8000cfa:	f003 be66 	b.w	80049ca <HAL_TIM_PeriodElapsedCallback+0x3cfa>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2101      	movs	r1, #1
 8000d02:	4860      	ldr	r0, [pc, #384]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d04:	f006 f936 	bl	8006f74 <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 8000d08:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d0e:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000d10:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d16:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8000d18:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d1e:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000d20:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d26:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8000d28:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000d32:	4b56      	ldr	r3, [pc, #344]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000d50:	f003 be3b 	b.w	80049ca <HAL_TIM_PeriodElapsedCallback+0x3cfa>
        cnt1 = TIM1->CNT;
 8000d54:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d5c:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d66:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d70:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d7a:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 8000d7c:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d8c:	dd09      	ble.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d90:	f993 3000 	ldrsb.w	r3, [r3]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3b01      	subs	r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e011      	b.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db2:	dd08      	ble.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000db6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000dc4:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dd6:	dd09      	ble.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000dda:	f993 3000 	ldrsb.w	r3, [r3]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e011      	b.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x140>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dfc:	dd08      	ble.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e00:	f993 3000 	ldrsb.w	r3, [r3]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b25a      	sxtb	r2, r3
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e0e:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e20:	dd09      	ble.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x166>
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e24:	f993 3000 	ldrsb.w	r3, [r3]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e011      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x18a>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e46:	dd08      	ble.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x18a>
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e58:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e6a:	dd39      	ble.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x210>
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e041      	b.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000e80:	2000023a 	.word	0x2000023a
 8000e84:	40020400 	.word	0x40020400
 8000e88:	20000308 	.word	0x20000308
 8000e8c:	2000030a 	.word	0x2000030a
 8000e90:	2000030c 	.word	0x2000030c
 8000e94:	2000030e 	.word	0x2000030e
 8000e98:	20072eb4 	.word	0x20072eb4
 8000e9c:	20072f98 	.word	0x20072f98
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	2000023e 	.word	0x2000023e
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	20000240 	.word	0x20000240
 8000eb0:	40010400 	.word	0x40010400
 8000eb4:	20000242 	.word	0x20000242
 8000eb8:	40000800 	.word	0x40000800
 8000ebc:	20000244 	.word	0x20000244
 8000ec0:	20000246 	.word	0x20000246
 8000ec4:	2000024e 	.word	0x2000024e
 8000ec8:	20000248 	.word	0x20000248
 8000ecc:	2000024f 	.word	0x2000024f
 8000ed0:	2000024a 	.word	0x2000024a
 8000ed4:	20000250 	.word	0x20000250
 8000ed8:	2000024c 	.word	0x2000024c
 8000edc:	20000251 	.word	0x20000251
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000ee0:	4bdb      	ldr	r3, [pc, #876]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4bdb      	ldr	r3, [pc, #876]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef0:	dd08      	ble.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000ef2:	4bd9      	ldr	r3, [pc, #868]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	4bd5      	ldr	r3, [pc, #852]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000f02:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000f04:	4bd5      	ldr	r3, [pc, #852]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4bd5      	ldr	r3, [pc, #852]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	1ad2      	subs	r2, r2, r3
 8000f12:	4bd4      	ldr	r3, [pc, #848]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000f14:	f993 3000 	ldrsb.w	r3, [r3]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4413      	add	r3, r2
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f24:	4bd0      	ldr	r3, [pc, #832]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f36:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000f3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f46:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f52:	4bc6      	ldr	r3, [pc, #792]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000f58:	4bc5      	ldr	r3, [pc, #788]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4bc0      	ldr	r3, [pc, #768]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	4bc3      	ldr	r3, [pc, #780]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f68:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	4413      	add	r3, r2
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f78:	4bbb      	ldr	r3, [pc, #748]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8a:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000f8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f9a:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa6:	4bb4      	ldr	r3, [pc, #720]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000fac:	4bb3      	ldr	r3, [pc, #716]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4bab      	ldr	r3, [pc, #684]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	4bb1      	ldr	r3, [pc, #708]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	4413      	add	r3, r2
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000fda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fde:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000fe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fee:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000ff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ff6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8001000:	4b94      	ldr	r3, [pc, #592]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001010:	f993 3000 	ldrsb.w	r3, [r3]
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	4413      	add	r3, r2
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001020:	4b91      	ldr	r3, [pc, #580]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800102e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001032:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8001036:	ee27 6b06 	vmul.f64	d6, d7, d6
 800103a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800103e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001042:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800104a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800104e:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
        yaw   = Euler.x;// [degree]
 8001054:	4b8d      	ldr	r3, [pc, #564]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001056:	ed93 7b02 	vldr	d7, [r3, #8]
 800105a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105e:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001060:	edc3 7a00 	vstr	s15, [r3]
        roll  = Euler.y;
 8001064:	4b89      	ldr	r3, [pc, #548]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001066:	ed93 7b04 	vldr	d7, [r3, #16]
 800106a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
        pitch = Euler.z;
 8001074:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001076:	ed93 7b06 	vldr	d7, [r3, #24]
 800107a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800107e:	4b86      	ldr	r3, [pc, #536]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate   = Gyro.z;// [dps : degree/sec]
 8001084:	4b85      	ldr	r3, [pc, #532]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001086:	ed93 7b06 	vldr	d7, [r3, #24]
 800108a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108e:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
        roll_rate  = Gyro.y;//Gyro.x;
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001096:	ed93 7b04 	vldr	d7, [r3, #16]
 800109a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109e:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80010a0:	edc3 7a00 	vstr	s15, [r3]
        pitch_rate = Gyro.x;//Gyro.y;
 80010a4:	4b7d      	ldr	r3, [pc, #500]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80010a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80010aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ae:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
        Acc_x = -Acc.x;// Adjust these values to Vehicle coordinate system of modeling
 80010b4:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80010ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010be:	eef1 7a67 	vneg.f32	s15, s15
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
        Acc_y = -Acc.y;// Direction is opposite, due to inertial force
 80010c8:	4b78      	ldr	r3, [pc, #480]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010ca:	ed93 7b04 	vldr	d7, [r3, #16]
 80010ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d2:	eef1 7a67 	vneg.f32	s15, s15
 80010d6:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
        Acc_z = -Acc.z;// Add minus - : as of 2021/01/09
 80010dc:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010de:	ed93 7b06 	vldr	d7, [r3, #24]
 80010e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e6:	eef1 7a67 	vneg.f32	s15, s15
 80010ea:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
        yaw   = -yaw   * 2.0 * pi / 360.0;// [rad] Convert degree to rad
 80010f0:	4b67      	ldr	r3, [pc, #412]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eef1 7a67 	vneg.f32	s15, s15
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001102:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001106:	ee27 6b06 	vmul.f64	d6, d7, d6
 800110a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800110e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001112:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
        roll  = -roll  * 2.0 * pi / 360.0;
 800111c:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eef1 7a67 	vneg.f32	s15, s15
 8001126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800112e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001132:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001136:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800113a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800113e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
        pitch = -pitch * 2.0 * pi / 360.0;
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eef1 7a67 	vneg.f32	s15, s15
 8001152:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001156:	ee37 7b07 	vadd.f64	d7, d7, d7
 800115a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 800115e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001162:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 8001166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800116e:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate   = yaw_rate   * 2.0 * pi / 360.0;// [rad/sec] // ! Direction is not confirmed yet.
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001182:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001186:	ee27 6b06 	vmul.f64	d6, d7, d6
 800118a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800118e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001192:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001198:	edc3 7a00 	vstr	s15, [r3]
        roll_rate  = roll_rate  * 2.0 * pi / 360.0;
 800119c:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011aa:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
        pitch_rate = pitch_rate * 2.0 * pi / 360.0;
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011d2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 80011d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011da:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 80011de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
        Acc_y_correct = cos(roll)*cos(pitch)                                *Acc_y + sin(roll)*cos(pitch)                                *(-Acc_x) - sin(pitch)         *Acc_z;
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f6:	eeb0 0b47 	vmov.f64	d0, d7
 80011fa:	f00c fa55 	bl	800d6a8 <cos>
 80011fe:	eeb0 8b40 	vmov.f64	d8, d0
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120c:	eeb0 0b47 	vmov.f64	d0, d7
 8001210:	f00c fa4a 	bl	800d6a8 <cos>
 8001214:	eeb0 7b40 	vmov.f64	d7, d0
 8001218:	ee28 6b07 	vmul.f64	d6, d8, d7
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001226:	ee26 8b07 	vmul.f64	d8, d6, d7
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001234:	e042      	b.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x5ec>
 8001236:	bf00      	nop
 8001238:	00000000 	.word	0x00000000
 800123c:	40500000 	.word	0x40500000
 8001240:	60000000 	.word	0x60000000
 8001244:	400921fb 	.word	0x400921fb
 8001248:	00000000 	.word	0x00000000
 800124c:	40768000 	.word	0x40768000
 8001250:	2000024c 	.word	0x2000024c
 8001254:	20000244 	.word	0x20000244
 8001258:	20000251 	.word	0x20000251
 800125c:	2000023e 	.word	0x2000023e
 8001260:	2000000a 	.word	0x2000000a
 8001264:	2000024e 	.word	0x2000024e
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000258 	.word	0x20000258
 8001270:	20000240 	.word	0x20000240
 8001274:	2000024f 	.word	0x2000024f
 8001278:	2000025c 	.word	0x2000025c
 800127c:	20000242 	.word	0x20000242
 8001280:	20000250 	.word	0x20000250
 8001284:	20000260 	.word	0x20000260
 8001288:	20000264 	.word	0x20000264
 800128c:	20072f38 	.word	0x20072f38
 8001290:	200004ac 	.word	0x200004ac
 8001294:	200004b0 	.word	0x200004b0
 8001298:	200004b4 	.word	0x200004b4
 800129c:	20073038 	.word	0x20073038
 80012a0:	200004c0 	.word	0x200004c0
 80012a4:	200004c4 	.word	0x200004c4
 80012a8:	200004c8 	.word	0x200004c8
 80012ac:	20072fd8 	.word	0x20072fd8
 80012b0:	200004d8 	.word	0x200004d8
 80012b4:	200004dc 	.word	0x200004dc
 80012b8:	200004e0 	.word	0x200004e0
 80012bc:	eeb0 0b47 	vmov.f64	d0, d7
 80012c0:	f00c fa2e 	bl	800d720 <sin>
 80012c4:	eeb0 9b40 	vmov.f64	d9, d0
 80012c8:	4bdd      	ldr	r3, [pc, #884]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d2:	eeb0 0b47 	vmov.f64	d0, d7
 80012d6:	f00c f9e7 	bl	800d6a8 <cos>
 80012da:	eeb0 7b40 	vmov.f64	d7, d0
 80012de:	ee29 6b07 	vmul.f64	d6, d9, d7
 80012e2:	4bd8      	ldr	r3, [pc, #864]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x974>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eef1 7a67 	vneg.f32	s15, s15
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012f4:	ee38 8b07 	vadd.f64	d8, d8, d7
 80012f8:	4bd1      	ldr	r3, [pc, #836]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001302:	eeb0 0b47 	vmov.f64	d0, d7
 8001306:	f00c fa0b 	bl	800d720 <sin>
 800130a:	eeb0 6b40 	vmov.f64	d6, d0
 800130e:	4bce      	ldr	r3, [pc, #824]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001318:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001320:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001324:	4bc9      	ldr	r3, [pc, #804]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_correct = -sin(roll)*Acc_y +  cos(roll)*(-Acc_x);
 800132a:	4bc9      	ldr	r3, [pc, #804]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001334:	eeb0 0b47 	vmov.f64	d0, d7
 8001338:	f00c f9f2 	bl	800d720 <sin>
 800133c:	eeb0 7b40 	vmov.f64	d7, d0
 8001340:	eeb1 6b47 	vneg.f64	d6, d7
 8001344:	4bc3      	ldr	r3, [pc, #780]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001352:	4bbf      	ldr	r3, [pc, #764]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800135c:	eeb0 0b47 	vmov.f64	d0, d7
 8001360:	f00c f9a2 	bl	800d6a8 <cos>
 8001364:	eeb0 6b40 	vmov.f64	d6, d0
 8001368:	4bb6      	ldr	r3, [pc, #728]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eef1 7a67 	vneg.f32	s15, s15
 8001372:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001376:	ee26 7b07 	vmul.f64	d7, d6, d7
 800137a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800137e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001382:	4bb5      	ldr	r3, [pc, #724]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_correct = - Acc_x_correct;
 8001388:	4bb3      	ldr	r3, [pc, #716]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eef1 7a67 	vneg.f32	s15, s15
 8001392:	4bb1      	ldr	r3, [pc, #708]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
        Acc_z_correct = cos(roll)*sin(pitch)*Acc_y + sin(roll)*sin(pitch)*(-Acc_x) + cos(pitch)*Acc_z;
 8001398:	4bad      	ldr	r3, [pc, #692]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a2:	eeb0 0b47 	vmov.f64	d0, d7
 80013a6:	f00c f97f 	bl	800d6a8 <cos>
 80013aa:	eeb0 8b40 	vmov.f64	d8, d0
 80013ae:	4ba4      	ldr	r3, [pc, #656]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b8:	eeb0 0b47 	vmov.f64	d0, d7
 80013bc:	f00c f9b0 	bl	800d720 <sin>
 80013c0:	eeb0 7b40 	vmov.f64	d7, d0
 80013c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80013c8:	4ba2      	ldr	r3, [pc, #648]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x984>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80013d6:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x980>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e0:	eeb0 0b47 	vmov.f64	d0, d7
 80013e4:	f00c f99c 	bl	800d720 <sin>
 80013e8:	eeb0 9b40 	vmov.f64	d9, d0
 80013ec:	4b94      	ldr	r3, [pc, #592]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f6:	eeb0 0b47 	vmov.f64	d0, d7
 80013fa:	f00c f991 	bl	800d720 <sin>
 80013fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001402:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001406:	4b8f      	ldr	r3, [pc, #572]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eef1 7a67 	vneg.f32	s15, s15
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001418:	ee38 8b07 	vadd.f64	d8, d8, d7
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001426:	eeb0 0b47 	vmov.f64	d0, d7
 800142a:	f00c f93d 	bl	800d6a8 <cos>
 800142e:	eeb0 6b40 	vmov.f64	d6, d0
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001440:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001444:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001448:	4b84      	ldr	r3, [pc, #528]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800144a:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_LPF = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * Acc_x_LPF_pre + G_LPF_acc * dt * ( Acc_x_correct + Acc_x_correct_pre ) );// LPF
 800144e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 8001452:	eddf 7a84 	vldr	s15, [pc, #528]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x994>
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001462:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001466:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800146a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800146e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 8001472:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x994>
 8001476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001482:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001490:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001494:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 8001498:	eddf 7a72 	vldr	s15, [pc, #456]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x994>
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80014a2:	edd3 4a00 	vldr	s9, [r3]
 80014a6:	4b71      	ldr	r3, [pc, #452]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee74 7aa7 	vadd.f32	s15, s9, s15
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80014bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c4:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
        Acc_y_LPF = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * Acc_y_LPF_pre + G_LPF_acc * dt * ( Acc_y_correct + Acc_y_correct_pre ) );// LPF
 80014ca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 80014ce:	eddf 7a65 	vldr	s15, [pc, #404]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x994>
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014da:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80014de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80014e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014ea:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 80014ee:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x994>
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014fe:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001502:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800150c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001510:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 8001514:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x994>
 8001518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800151e:	edd3 4a00 	vldr	s9, [r3]
 8001522:	4b55      	ldr	r3, [pc, #340]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee74 7aa7 	vadd.f32	s15, s9, s15
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001534:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001538:	ee26 7b07 	vmul.f64	d7, d6, d7
 800153c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001540:	4b4e      	ldr	r3, [pc, #312]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
        d_yawrate = 1.0 / (2.0 + G_LPF_gyro * dt) * ( (2.0 - G_LPF_gyro * dt) * d_yawrate_pre + 2.0 * G_LPF_gyro * (yaw_rate - yaw_rate_pre) );// Pseudo Derivative : ddphi_res
 8001546:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 800154a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001556:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800155a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800155e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001562:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001566:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x990>
 800156a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001576:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800157a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001588:	ee25 5b07 	vmul.f64	d5, d5, d7
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8001628 <HAL_TIM_PeriodElapsedCallback+0x958>
 80015a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80015a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 80015b6:	edc3 7a00 	vstr	s15, [r3]
        yaw   = yaw   * 2.0 * pi / 360.0 + yaw_initial;// [rad] Convert this value to definition in modeling 
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015c8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001630 <HAL_TIM_PeriodElapsedCallback+0x960>
 80015cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015d0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001638 <HAL_TIM_PeriodElapsedCallback+0x968>
 80015d4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
        if     ( yaw - yaw_pre > 2.0*pi/2.0 ) yaw_digit--;
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	dd4c      	ble.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
 8001622:	e05a      	b.n	80016da <HAL_TIM_PeriodElapsedCallback+0xa0a>
 8001624:	f3af 8000 	nop.w
 8001628:	00000000 	.word	0x00000000
 800162c:	40590000 	.word	0x40590000
 8001630:	60000000 	.word	0x60000000
 8001634:	400921fb 	.word	0x400921fb
 8001638:	00000000 	.word	0x00000000
 800163c:	40768000 	.word	0x40768000
 8001640:	200004b4 	.word	0x200004b4
 8001644:	200004d8 	.word	0x200004d8
 8001648:	200004e0 	.word	0x200004e0
 800164c:	200004e8 	.word	0x200004e8
 8001650:	200004b0 	.word	0x200004b0
 8001654:	200004dc 	.word	0x200004dc
 8001658:	200004e4 	.word	0x200004e4
 800165c:	200004ec 	.word	0x200004ec
 8001660:	3a83126f 	.word	0x3a83126f
 8001664:	43960000 	.word	0x43960000
 8001668:	20000500 	.word	0x20000500
 800166c:	200004f0 	.word	0x200004f0
 8001670:	200004f8 	.word	0x200004f8
 8001674:	20000504 	.word	0x20000504
 8001678:	200004f4 	.word	0x200004f4
 800167c:	200004fc 	.word	0x200004fc
 8001680:	42480000 	.word	0x42480000
 8001684:	200004d4 	.word	0x200004d4
 8001688:	200004c0 	.word	0x200004c0
 800168c:	200004cc 	.word	0x200004cc
 8001690:	200004d0 	.word	0x200004d0
 8001694:	200004ac 	.word	0x200004ac
 8001698:	20000034 	.word	0x20000034
 800169c:	200004b8 	.word	0x200004b8
 80016a0:	40490fdb 	.word	0x40490fdb
 80016a4:	200004bc 	.word	0x200004bc
        else if( yaw_pre - yaw > 2.0*pi/2.0 ) yaw_digit++;
 80016a8:	4be9      	ldr	r3, [pc, #932]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	4be9      	ldr	r3, [pc, #932]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	ed9f 7ae7 	vldr	s14, [pc, #924]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	dd09      	ble.n	80016da <HAL_TIM_PeriodElapsedCallback+0xa0a>
 80016c6:	4be5      	ldr	r3, [pc, #916]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016d4:	4be1      	ldr	r3, [pc, #900]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]
        yaw_pre = yaw;
 80016da:	4bde      	ldr	r3, [pc, #888]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4adc      	ldr	r2, [pc, #880]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80016e0:	6013      	str	r3, [r2, #0]
        yaw = (yaw + yaw_digit * 2.0 * pi);// :* 2.0 * pi / 360.0;
 80016e2:	4bdc      	ldr	r3, [pc, #880]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016ec:	4bdb      	ldr	r3, [pc, #876]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016fa:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0xd68>
 80016fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001702:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001706:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170a:	4bd2      	ldr	r3, [pc, #840]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 800170c:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 8001710:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001714:	eddf 7ad3 	vldr	s15, [pc, #844]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001720:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001724:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001728:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800172c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001730:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001734:	eddf 7acb 	vldr	s15, [pc, #812]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001740:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001744:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001748:	4bc7      	ldr	r3, [pc, #796]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001752:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001756:	4bc5      	ldr	r3, [pc, #788]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001758:	ed93 7a00 	vldr	s14, [r3]
 800175c:	4bc4      	ldr	r3, [pc, #784]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176a:	ed9f 4bb5 	vldr	d4, [pc, #724]	; 8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>
 800176e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001772:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001776:	ee26 7b07 	vmul.f64	d7, d6, d7
 800177a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800177e:	4bbd      	ldr	r3, [pc, #756]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 8001784:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001788:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001798:	ee37 7b06 	vadd.f64	d7, d7, d6
 800179c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017a0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017a4:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 80017a8:	eddf 7aae 	vldr	s15, [pc, #696]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80017b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80017bc:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80017ca:	4bac      	ldr	r3, [pc, #688]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80017cc:	ed93 7a00 	vldr	s14, [r3]
 80017d0:	4bab      	ldr	r3, [pc, #684]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017de:	ed9f 4b98 	vldr	d4, [pc, #608]	; 8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>
 80017e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80017e6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017f2:	4ba4      	ldr	r3, [pc, #656]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 80017f8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 80017fc:	eddf 7a99 	vldr	s15, [pc, #612]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 8001800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001808:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800180c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001810:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001814:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001818:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 800181c:	eddf 7a91 	vldr	s15, [pc, #580]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 8001820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001828:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800182c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001830:	4b95      	ldr	r3, [pc, #596]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800183a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800183e:	4b93      	ldr	r3, [pc, #588]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8001840:	ed93 7a00 	vldr	s14, [r3]
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001852:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>
 8001856:	ee27 7b04 	vmul.f64	d7, d7, d4
 800185a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800185e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001866:	4b8b      	ldr	r3, [pc, #556]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 800186c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001870:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800187c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001880:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001884:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001888:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800188c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001890:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xd94>
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800189c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80018a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80018a4:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ae:	ee25 5b07 	vmul.f64	d5, d5, d7
 80018b2:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xdcc>)
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xdd0>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c6:	ed9f 4b5e 	vldr	d4, [pc, #376]	; 8001a40 <HAL_TIM_PeriodElapsedCallback+0xd70>
 80018ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80018ce:	ee35 7b07 	vadd.f64	d7, d5, d7
 80018d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018da:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta1_res_pre + 2.0 * G_LPF_ddth * (dtheta1_res - dtheta1_res_pre) );
 80018e0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 80018e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80018e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f0:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80018f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018f8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80018fc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001900:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001904:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001910:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001914:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001918:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001922:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001936:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800193a:	ed9f 4b43 	vldr	d4, [pc, #268]	; 8001a48 <HAL_TIM_PeriodElapsedCallback+0xd78>
 800193e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001942:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001946:	ee26 7b07 	vmul.f64	d7, d6, d7
 800194a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800194e:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0xddc>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta2_res_pre + 2.0 * G_LPF_ddth * (dtheta2_res - dtheta2_res_pre) );
 8001954:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001958:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001964:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001968:	ee37 7b06 	vadd.f64	d7, d7, d6
 800196c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001970:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001974:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8001978:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001984:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001988:	ee35 5b47 	vsub.f64	d5, d5, d7
 800198c:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xde0>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001996:	ee25 5b07 	vmul.f64	d5, d5, d7
 800199a:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ae:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8001a48 <HAL_TIM_PeriodElapsedCallback+0xd78>
 80019b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80019b6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80019ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0xde4>)
 80019c4:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta3_res_pre + 2.0 * G_LPF_ddth * (dtheta3_res - dtheta3_res_pre) );
 80019c8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 80019cc:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d8:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80019dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019e0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80019e4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80019e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a60 <HAL_TIM_PeriodElapsedCallback+0xd90>
 80019ec:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80019fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0xde8>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a0a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a22:	ed9f 4b09 	vldr	d4, [pc, #36]	; 8001a48 <HAL_TIM_PeriodElapsedCallback+0xd78>
 8001a26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001a2a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001a2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a36:	e041      	b.n	8001abc <HAL_TIM_PeriodElapsedCallback+0xdec>
 8001a38:	60000000 	.word	0x60000000
 8001a3c:	400921fb 	.word	0x400921fb
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40590000 	.word	0x40590000
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	404e0000 	.word	0x404e0000
 8001a50:	200004b8 	.word	0x200004b8
 8001a54:	200004ac 	.word	0x200004ac
 8001a58:	40490fdb 	.word	0x40490fdb
 8001a5c:	200004bc 	.word	0x200004bc
 8001a60:	3a83126f 	.word	0x3a83126f
 8001a64:	42480000 	.word	0x42480000
 8001a68:	20000288 	.word	0x20000288
 8001a6c:	20000258 	.word	0x20000258
 8001a70:	20000268 	.word	0x20000268
 8001a74:	20000278 	.word	0x20000278
 8001a78:	2000028c 	.word	0x2000028c
 8001a7c:	2000025c 	.word	0x2000025c
 8001a80:	2000026c 	.word	0x2000026c
 8001a84:	2000027c 	.word	0x2000027c
 8001a88:	20000290 	.word	0x20000290
 8001a8c:	20000260 	.word	0x20000260
 8001a90:	20000270 	.word	0x20000270
 8001a94:	20000280 	.word	0x20000280
 8001a98:	20000294 	.word	0x20000294
 8001a9c:	20000264 	.word	0x20000264
 8001aa0:	20000274 	.word	0x20000274
 8001aa4:	20000284 	.word	0x20000284
 8001aa8:	200002a8 	.word	0x200002a8
 8001aac:	20000298 	.word	0x20000298
 8001ab0:	200002ac 	.word	0x200002ac
 8001ab4:	2000029c 	.word	0x2000029c
 8001ab8:	200002b0 	.word	0x200002b0
 8001abc:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 8001abe:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta4_res_pre + 2.0 * G_LPF_ddth * (dtheta4_res - dtheta4_res_pre) );
 8001ac2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001d1c <HAL_TIM_PeriodElapsedCallback+0x104c>
 8001ac6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad2:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001ad6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ada:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001ade:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001ae2:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001d1c <HAL_TIM_PeriodElapsedCallback+0x104c>
 8001ae6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001af6:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001afa:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b04:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001b08:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x1054>)
 8001b0a:	ed93 7a00 	vldr	s14, [r3]
 8001b0e:	4b86      	ldr	r3, [pc, #536]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x1058>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b1c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8001d08 <HAL_TIM_PeriodElapsedCallback+0x1038>
 8001b20:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b24:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001b28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b30:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x105c>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
          ddtheta1_res_pre = ddtheta1_res;
 8001b36:	4b7e      	ldr	r3, [pc, #504]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x1060>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7e      	ldr	r2, [pc, #504]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8001b3c:	6013      	str	r3, [r2, #0]
          ddtheta2_res_pre = ddtheta2_res;
 8001b3e:	4b7e      	ldr	r3, [pc, #504]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x1068>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7e      	ldr	r2, [pc, #504]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x106c>)
 8001b44:	6013      	str	r3, [r2, #0]
          ddtheta3_res_pre = ddtheta3_res;
 8001b46:	4b74      	ldr	r3, [pc, #464]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7d      	ldr	r2, [pc, #500]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x1070>)
 8001b4c:	6013      	str	r3, [r2, #0]
          ddtheta4_res_pre = ddtheta4_res;
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x105c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a73      	ldr	r2, [pc, #460]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 8001b54:	6013      	str	r3, [r2, #0]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4b7a      	ldr	r3, [pc, #488]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b70:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x1054>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	4b74      	ldr	r3, [pc, #464]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x1084>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 8001b88:	4b6e      	ldr	r3, [pc, #440]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b98:	4b6c      	ldr	r3, [pc, #432]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba2:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x1054>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bac:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1088>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = yaw_rate;
 8001bba:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x108c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 8001bc0:	6013      	str	r3, [r2, #0]
        x_res   += vx_res   * dt;// [m]
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x1084>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d1c <HAL_TIM_PeriodElapsedCallback+0x104c>
 8001bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 8001be0:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1088>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001d1c <HAL_TIM_PeriodElapsedCallback+0x104c>
 8001bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bee:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 8001bfe:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001d1c <HAL_TIM_PeriodElapsedCallback+0x104c>
 8001c08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c0c:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 8001c18:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8001c1c:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	b25a      	sxtb	r2, r3
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>)
 8001c34:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x10a8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x10ac>)
 8001c4e:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 8001c50:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x10b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	b25a      	sxtb	r2, r3
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 8001c68:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	b25a      	sxtb	r2, r3
 8001c80:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x10bc>)
 8001c82:	701a      	strb	r2, [r3, #0]
        r = 0.6;//0.4;
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x10c0>)
 8001c86:	4a43      	ldr	r2, [pc, #268]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x10c4>)
 8001c88:	601a      	str	r2, [r3, #0]
        omega = 0.5;
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x10c8>)
 8001c8c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c90:	601a      	str	r2, [r3, #0]
        if( t < 6.0 ){
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x10cc>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	d50e      	bpl.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0xff4>
          r = 0.1 * t;
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x10cc>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001d10 <HAL_TIM_PeriodElapsedCallback+0x1040>
 8001cb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x10c0>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
 8001cc2:	e002      	b.n	8001cca <HAL_TIM_PeriodElapsedCallback+0xffa>
          r = 0.6;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x10c0>)
 8001cc6:	4a33      	ldr	r2, [pc, #204]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x10c4>)
 8001cc8:	601a      	str	r2, [r3, #0]
        if(t < t_experiment - 3.0){
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x10cc>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d566      	bpl.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x10dc>
          vx_cmd   = 0.0;
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x10d0>)
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
          vy_cmd   = r * omega;
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x10c0>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x10c8>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x10d4>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
          dphi_cmd = omega;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x10c8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x10d8>)
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e05e      	b.n	8001dc4 <HAL_TIM_PeriodElapsedCallback+0x10f4>
 8001d06:	bf00      	nop
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	404e0000 	.word	0x404e0000
 8001d10:	9999999a 	.word	0x9999999a
 8001d14:	3fb99999 	.word	0x3fb99999
 8001d18:	200002a0 	.word	0x200002a0
 8001d1c:	3a83126f 	.word	0x3a83126f
 8001d20:	200002b4 	.word	0x200002b4
 8001d24:	20000284 	.word	0x20000284
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	200002a4 	.word	0x200002a4
 8001d30:	20000298 	.word	0x20000298
 8001d34:	200002a8 	.word	0x200002a8
 8001d38:	2000029c 	.word	0x2000029c
 8001d3c:	200002ac 	.word	0x200002ac
 8001d40:	200002b0 	.word	0x200002b0
 8001d44:	20000278 	.word	0x20000278
 8001d48:	2000027c 	.word	0x2000027c
 8001d4c:	20000280 	.word	0x20000280
 8001d50:	3c4ccccd 	.word	0x3c4ccccd
 8001d54:	2000031c 	.word	0x2000031c
 8001d58:	20000320 	.word	0x20000320
 8001d5c:	200004c0 	.word	0x200004c0
 8001d60:	20000324 	.word	0x20000324
 8001d64:	2000032c 	.word	0x2000032c
 8001d68:	20000330 	.word	0x20000330
 8001d6c:	20000010 	.word	0x20000010
 8001d70:	20072f58 	.word	0x20072f58
 8001d74:	20000252 	.word	0x20000252
 8001d78:	20072ef4 	.word	0x20072ef4
 8001d7c:	20000253 	.word	0x20000253
 8001d80:	20072960 	.word	0x20072960
 8001d84:	20000254 	.word	0x20000254
 8001d88:	200729a0 	.word	0x200729a0
 8001d8c:	20000255 	.word	0x20000255
 8001d90:	2007294c 	.word	0x2007294c
 8001d94:	3f19999a 	.word	0x3f19999a
 8001d98:	20072948 	.word	0x20072948
 8001d9c:	20000234 	.word	0x20000234
 8001da0:	20000310 	.word	0x20000310
 8001da4:	20000314 	.word	0x20000314
 8001da8:	20000318 	.word	0x20000318
          vx_cmd   = 0.0;
 8001dac:	4bda      	ldr	r3, [pc, #872]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x1448>)
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
          vy_cmd   = 0.0;
 8001db4:	4bd9      	ldr	r3, [pc, #868]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x144c>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
          dphi_cmd = 0.0;
 8001dbc:	4bd8      	ldr	r3, [pc, #864]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x1450>)
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
        v1_x = vx_res - L * yaw_rate;
 8001dc4:	4bd7      	ldr	r3, [pc, #860]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	4bd7      	ldr	r3, [pc, #860]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eddf 6ad6 	vldr	s13, [pc, #856]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001dd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ddc:	4bd4      	ldr	r3, [pc, #848]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1460>)
 8001dde:	edc3 7a00 	vstr	s15, [r3]
        v2_x = vx_res + L * yaw_rate;
 8001de2:	4bd1      	ldr	r3, [pc, #836]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001dec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001df0:	4bcc      	ldr	r3, [pc, #816]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfa:	4bce      	ldr	r3, [pc, #824]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x1464>)
 8001dfc:	edc3 7a00 	vstr	s15, [r3]
        v3_x = vx_res + L * yaw_rate;
 8001e00:	4bc9      	ldr	r3, [pc, #804]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001e0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0e:	4bc5      	ldr	r3, [pc, #788]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	4bc7      	ldr	r3, [pc, #796]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x1468>)
 8001e1a:	edc3 7a00 	vstr	s15, [r3]
        v4_x = vx_res - L * yaw_rate;
 8001e1e:	4bc1      	ldr	r3, [pc, #772]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	4bc0      	ldr	r3, [pc, #768]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	eddf 6ac0 	vldr	s13, [pc, #768]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e36:	4bc1      	ldr	r3, [pc, #772]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x146c>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]
        v1_y = vy_res - W * yaw_rate;
 8001e3c:	4bc0      	ldr	r3, [pc, #768]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x1470>)
 8001e3e:	ed93 7a00 	vldr	s14, [r3]
 8001e42:	4bb9      	ldr	r3, [pc, #740]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	eddf 6ab8 	vldr	s13, [pc, #736]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e54:	4bbb      	ldr	r3, [pc, #748]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x1474>)
 8001e56:	edc3 7a00 	vstr	s15, [r3]
        v2_y = vy_res - W * yaw_rate;
 8001e5a:	4bb9      	ldr	r3, [pc, #740]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x1470>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	4bb1      	ldr	r3, [pc, #708]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	eddf 6ab1 	vldr	s13, [pc, #708]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001e6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e72:	4bb5      	ldr	r3, [pc, #724]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]
        v3_y = vy_res + W * yaw_rate;
 8001e78:	4bab      	ldr	r3, [pc, #684]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001e82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e86:	4bae      	ldr	r3, [pc, #696]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x1470>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	4bae      	ldr	r3, [pc, #696]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x147c>)
 8001e92:	edc3 7a00 	vstr	s15, [r3]
        v4_y = vy_res + W * yaw_rate;
 8001e96:	4ba4      	ldr	r3, [pc, #656]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800212c <HAL_TIM_PeriodElapsedCallback+0x145c>
 8001ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ea4:	4ba6      	ldr	r3, [pc, #664]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x1470>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	4ba8      	ldr	r3, [pc, #672]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x1480>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
        alpha_1 = atan2f( v1_y , v1_x );
 8001eb4:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x1474>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	4b9d      	ldr	r3, [pc, #628]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1460>)
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	eef0 0a47 	vmov.f32	s1, s14
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	f00b fc66 	bl	800d798 <atan2f>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	4ba0      	ldr	r3, [pc, #640]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x1484>)
 8001ed2:	edc3 7a00 	vstr	s15, [r3]
        alpha_2 = atan2f( v2_y , v2_x );
 8001ed6:	4b9c      	ldr	r3, [pc, #624]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	4b95      	ldr	r3, [pc, #596]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x1464>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	eef0 0a47 	vmov.f32	s1, s14
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	f00b fc55 	bl	800d798 <atan2f>
 8001eee:	eef0 7a40 	vmov.f32	s15, s0
 8001ef2:	4b99      	ldr	r3, [pc, #612]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
        alpha_3 = atan2f( v3_y , v3_x );
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x147c>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x1468>)
 8001f00:	ed93 7a00 	vldr	s14, [r3]
 8001f04:	eef0 0a47 	vmov.f32	s1, s14
 8001f08:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0c:	f00b fc44 	bl	800d798 <atan2f>
 8001f10:	eef0 7a40 	vmov.f32	s15, s0
 8001f14:	4b91      	ldr	r3, [pc, #580]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x148c>)
 8001f16:	edc3 7a00 	vstr	s15, [r3]
        alpha_4 = atan2f( v4_y , v4_x );
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x1480>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	4b86      	ldr	r3, [pc, #536]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x146c>)
 8001f22:	ed93 7a00 	vldr	s14, [r3]
 8001f26:	eef0 0a47 	vmov.f32	s1, s14
 8001f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2e:	f00b fc33 	bl	800d798 <atan2f>
 8001f32:	eef0 7a40 	vmov.f32	s15, s0
 8001f36:	4b8a      	ldr	r3, [pc, #552]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 8001f38:	edc3 7a00 	vstr	s15, [r3]
        w1 = cos( pi / 4.0 + alpha_1 ) * cos( pi / 4.0 + alpha_1 );
 8001f3c:	4b85      	ldr	r3, [pc, #532]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x1484>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f46:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001f4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f4e:	eeb0 0b47 	vmov.f64	d0, d7
 8001f52:	f00b fba9 	bl	800d6a8 <cos>
 8001f56:	eeb0 8b40 	vmov.f64	d8, d0
 8001f5a:	4b7e      	ldr	r3, [pc, #504]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x1484>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f64:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001f68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f70:	f00b fb9a 	bl	800d6a8 <cos>
 8001f74:	eeb0 7b40 	vmov.f64	d7, d0
 8001f78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001f7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f80:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x1494>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
        w2 = cos( pi / 4.0 - alpha_2 ) * cos( pi / 4.0 - alpha_2 );
 8001f86:	4b74      	ldr	r3, [pc, #464]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f90:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001f94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f98:	eeb0 0b47 	vmov.f64	d0, d7
 8001f9c:	f00b fb84 	bl	800d6a8 <cos>
 8001fa0:	eeb0 8b40 	vmov.f64	d8, d0
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fae:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001fb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fb6:	eeb0 0b47 	vmov.f64	d0, d7
 8001fba:	f00b fb75 	bl	800d6a8 <cos>
 8001fbe:	eeb0 7b40 	vmov.f64	d7, d0
 8001fc2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001fc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x1498>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
        w3 = cos( pi / 4.0 + alpha_3 ) * cos( pi / 4.0 + alpha_3 );
 8001fd0:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x148c>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fda:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001fde:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8001fe6:	f00b fb5f 	bl	800d6a8 <cos>
 8001fea:	eeb0 8b40 	vmov.f64	d8, d0
 8001fee:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x148c>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ff8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001ffc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002000:	eeb0 0b47 	vmov.f64	d0, d7
 8002004:	f00b fb50 	bl	800d6a8 <cos>
 8002008:	eeb0 7b40 	vmov.f64	d7, d0
 800200c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002010:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002014:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x149c>)
 8002016:	edc3 7a00 	vstr	s15, [r3]
        w4 = cos( pi / 4.0 - alpha_4 ) * cos( pi / 4.0 - alpha_4 );
 800201a:	4b51      	ldr	r3, [pc, #324]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002024:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8002028:	ee36 7b47 	vsub.f64	d7, d6, d7
 800202c:	eeb0 0b47 	vmov.f64	d0, d7
 8002030:	f00b fb3a 	bl	800d6a8 <cos>
 8002034:	eeb0 8b40 	vmov.f64	d8, d0
 8002038:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002042:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8002046:	ee36 7b47 	vsub.f64	d7, d6, d7
 800204a:	eeb0 0b47 	vmov.f64	d0, d7
 800204e:	f00b fb2b 	bl	800d6a8 <cos>
 8002052:	eeb0 7b40 	vmov.f64	d7, d0
 8002056:	ee28 7b07 	vmul.f64	d7, d8, d7
 800205a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x14a0>)
 8002060:	edc3 7a00 	vstr	s15, [r3]
          tan_beta_1_hat = tan_beta_1_hat_pre - P1_k_1 * v1_y / ( 1.0 + v1_y * P1_k_1 * v1_y ) * ( tan_beta_1_hat_pre * v1_y - v1_x );
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800206e:	4b42      	ldr	r3, [pc, #264]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x14a8>)
 8002070:	ed93 7a00 	vldr	s14, [r3]
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x1474>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x1474>)
 8002084:	ed93 7a00 	vldr	s14, [r3]
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x14a8>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x1474>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020a0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80020a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80020a8:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 80020ae:	ed93 7a00 	vldr	s14, [r3]
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x1474>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1460>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020d6:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 80020d8:	edc3 7a00 	vstr	s15, [r3]
          tan_beta_2_hat = tan_beta_2_hat_pre - P2_k_1 * v2_y / ( 1.0 + v2_y * P2_k_1 * v2_y ) * ( tan_beta_2_hat_pre * v2_y - v2_x );
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	e03d      	b.n	8002188 <HAL_TIM_PeriodElapsedCallback+0x14b8>
 800210c:	f3af 8000 	nop.w
 8002110:	60000000 	.word	0x60000000
 8002114:	3fe921fb 	.word	0x3fe921fb
 8002118:	20000310 	.word	0x20000310
 800211c:	20000314 	.word	0x20000314
 8002120:	20000318 	.word	0x20000318
 8002124:	2000031c 	.word	0x2000031c
 8002128:	200004c0 	.word	0x200004c0
 800212c:	3e19999a 	.word	0x3e19999a
 8002130:	2000043c 	.word	0x2000043c
 8002134:	20000440 	.word	0x20000440
 8002138:	20000444 	.word	0x20000444
 800213c:	20000448 	.word	0x20000448
 8002140:	20000320 	.word	0x20000320
 8002144:	2000044c 	.word	0x2000044c
 8002148:	20000450 	.word	0x20000450
 800214c:	20000454 	.word	0x20000454
 8002150:	20000458 	.word	0x20000458
 8002154:	2000042c 	.word	0x2000042c
 8002158:	20000430 	.word	0x20000430
 800215c:	20000434 	.word	0x20000434
 8002160:	20000438 	.word	0x20000438
 8002164:	2000041c 	.word	0x2000041c
 8002168:	20000420 	.word	0x20000420
 800216c:	20000424 	.word	0x20000424
 8002170:	20000428 	.word	0x20000428
 8002174:	2000048c 	.word	0x2000048c
 8002178:	20000024 	.word	0x20000024
 800217c:	2000047c 	.word	0x2000047c
 8002180:	20000490 	.word	0x20000490
 8002184:	20000028 	.word	0x20000028
 8002188:	4bdc      	ldr	r3, [pc, #880]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002196:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800219a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800219e:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80021a2:	4bd7      	ldr	r3, [pc, #860]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x1830>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	4bd4      	ldr	r3, [pc, #848]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b2:	4bd4      	ldr	r3, [pc, #848]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x1834>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021cc:	4bce      	ldr	r3, [pc, #824]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x1838>)
 80021ce:	edc3 7a00 	vstr	s15, [r3]
          tan_beta_3_hat = tan_beta_3_hat_pre - P3_k_1 * v3_y / ( 1.0 + v3_y * P3_k_1 * v3_y ) * ( tan_beta_3_hat_pre * v3_y - v3_x );
 80021d2:	4bce      	ldr	r3, [pc, #824]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x183c>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80021dc:	4bcc      	ldr	r3, [pc, #816]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 80021de:	ed93 7a00 	vldr	s14, [r3]
 80021e2:	4bcc      	ldr	r3, [pc, #816]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ec:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80021f0:	4bc8      	ldr	r3, [pc, #800]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	4bc6      	ldr	r3, [pc, #792]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	4bc4      	ldr	r3, [pc, #784]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800220e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002212:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002216:	ee84 5b07 	vdiv.f64	d5, d4, d7
 800221a:	4bbc      	ldr	r3, [pc, #752]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x183c>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	4bbc      	ldr	r3, [pc, #752]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222a:	4bbb      	ldr	r3, [pc, #748]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1848>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002234:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002238:	ee25 7b07 	vmul.f64	d7, d5, d7
 800223c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002240:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002244:	4bb5      	ldr	r3, [pc, #724]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x184c>)
 8002246:	edc3 7a00 	vstr	s15, [r3]
          tan_beta_4_hat = tan_beta_4_hat_pre - P4_k_1 * v4_y / ( 1.0 + v4_y * P4_k_1 * v4_y ) * ( tan_beta_4_hat_pre * v4_y - v4_x );
 800224a:	4bb5      	ldr	r3, [pc, #724]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x1850>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002254:	4bb3      	ldr	r3, [pc, #716]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x1854>)
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	4bb3      	ldr	r3, [pc, #716]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1858>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002264:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8002268:	4baf      	ldr	r3, [pc, #700]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1858>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	4bad      	ldr	r3, [pc, #692]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x1854>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	4bab      	ldr	r3, [pc, #684]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1858>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002286:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800228a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800228e:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8002292:	4ba3      	ldr	r3, [pc, #652]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x1850>)
 8002294:	ed93 7a00 	vldr	s14, [r3]
 8002298:	4ba3      	ldr	r3, [pc, #652]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1858>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	4ba2      	ldr	r3, [pc, #648]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x185c>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022bc:	4b9c      	ldr	r3, [pc, #624]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x1860>)
 80022be:	edc3 7a00 	vstr	s15, [r3]
          Kappa_1 = 1.0 / ( 1.0 + Gamma * ( v1_y * v1_y ) );
 80022c2:	4b9c      	ldr	r3, [pc, #624]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1864>)
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	4b9a      	ldr	r3, [pc, #616]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1864>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002538 <HAL_TIM_PeriodElapsedCallback+0x1868>
 80022d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80022e2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80022e6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80022ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f2:	4b92      	ldr	r3, [pc, #584]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x186c>)
 80022f4:	edc3 7a00 	vstr	s15, [r3]
          Kappa_2 = 1.0 / ( 1.0 + Gamma * ( v2_y * v2_y ) );
 80022f8:	4b80      	ldr	r3, [pc, #512]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002308:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002538 <HAL_TIM_PeriodElapsedCallback+0x1868>
 800230c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002310:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002314:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002318:	ee37 6b06 	vadd.f64	d6, d7, d6
 800231c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002320:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002324:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002328:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x1870>)
 800232a:	edc3 7a00 	vstr	s15, [r3]
          Kappa_3 = 1.0 / ( 1.0 + Gamma * ( v3_y * v3_y ) );
 800232e:	4b79      	ldr	r3, [pc, #484]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	4b77      	ldr	r3, [pc, #476]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002538 <HAL_TIM_PeriodElapsedCallback+0x1868>
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800234a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800234e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002352:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002356:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800235a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800235e:	4b79      	ldr	r3, [pc, #484]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x1874>)
 8002360:	edc3 7a00 	vstr	s15, [r3]
          Kappa_4 = 1.0 / ( 1.0 + Gamma * ( v4_y * v4_y ) );
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1858>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1858>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002538 <HAL_TIM_PeriodElapsedCallback+0x1868>
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002380:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002384:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002388:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800238c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002390:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002394:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x1878>)
 8002396:	edc3 7a00 	vstr	s15, [r3]
          P1_k = 1.0 / Kappa_1 * ( P1_k_1 - P1_k_1 * v1_y * v1_y * P1_k_1 / ( 1.0 + v1_y * P1_k_1 * v1_y ) );// ! Be careful of zero-division by Kappa's initial value!
 800239a:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x186c>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80023a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80023ac:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x187c>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x187c>)
 80023b8:	ed93 7a00 	vldr	s14, [r3]
 80023bc:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1864>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1864>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	4b5e      	ldr	r3, [pc, #376]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x187c>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023da:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80023de:	4b55      	ldr	r3, [pc, #340]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1864>)
 80023e0:	ed93 7a00 	vldr	s14, [r3]
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x187c>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x1864>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023fc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002400:	ee37 4b04 	vadd.f64	d4, d7, d4
 8002404:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8002408:	ee35 7b47 	vsub.f64	d7, d5, d7
 800240c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002410:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x1880>)
 8002416:	edc3 7a00 	vstr	s15, [r3]
          P2_k = 1.0 / Kappa_2 * ( P2_k_1 - P2_k_1 * v2_y * v2_y * P2_k_1 / ( 1.0 + v2_y * P2_k_1 * v2_y ) );
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x1870>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002424:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002428:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x1884>)
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x1884>)
 8002438:	ed93 7a00 	vldr	s14, [r3]
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x1884>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245a:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 800245e:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 8002460:	ed93 7a00 	vldr	s14, [r3]
 8002464:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x1884>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x182c>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800247c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002480:	ee37 4b04 	vadd.f64	d4, d7, d4
 8002484:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8002488:	ee35 7b47 	vsub.f64	d7, d5, d7
 800248c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002490:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x1888>)
 8002496:	edc3 7a00 	vstr	s15, [r3]
          P3_k = 1.0 / Kappa_3 * ( P3_k_1 - P3_k_1 * v3_y * v3_y * P3_k_1 / ( 1.0 + v3_y * P3_k_1 * v3_y ) );
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x1874>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80024a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x1840>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x1844>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f8:	e030      	b.n	800255c <HAL_TIM_PeriodElapsedCallback+0x188c>
 80024fa:	bf00      	nop
 80024fc:	20000450 	.word	0x20000450
 8002500:	20000490 	.word	0x20000490
 8002504:	20000440 	.word	0x20000440
 8002508:	20000480 	.word	0x20000480
 800250c:	20000494 	.word	0x20000494
 8002510:	2000002c 	.word	0x2000002c
 8002514:	20000454 	.word	0x20000454
 8002518:	20000444 	.word	0x20000444
 800251c:	20000484 	.word	0x20000484
 8002520:	20000498 	.word	0x20000498
 8002524:	20000030 	.word	0x20000030
 8002528:	20000458 	.word	0x20000458
 800252c:	20000448 	.word	0x20000448
 8002530:	20000488 	.word	0x20000488
 8002534:	2000044c 	.word	0x2000044c
 8002538:	3dcccccd 	.word	0x3dcccccd
 800253c:	2000049c 	.word	0x2000049c
 8002540:	200004a0 	.word	0x200004a0
 8002544:	200004a4 	.word	0x200004a4
 8002548:	200004a8 	.word	0x200004a8
 800254c:	20000024 	.word	0x20000024
 8002550:	20000014 	.word	0x20000014
 8002554:	20000028 	.word	0x20000028
 8002558:	20000018 	.word	0x20000018
 800255c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002560:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002564:	ee37 4b04 	vadd.f64	d4, d7, d4
 8002568:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800256c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002570:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002574:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002578:	4bc7      	ldr	r3, [pc, #796]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x1bc8>)
 800257a:	edc3 7a00 	vstr	s15, [r3]
          P4_k = 1.0 / Kappa_4 * ( P4_k_1 - P4_k_1 * v4_y * v4_y * P4_k_1 / ( 1.0 + v4_y * P4_k_1 * v4_y ) );
 800257e:	4bc7      	ldr	r3, [pc, #796]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x1bcc>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002588:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800258c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002590:	4bc3      	ldr	r3, [pc, #780]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800259a:	4bc1      	ldr	r3, [pc, #772]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	4bc0      	ldr	r3, [pc, #768]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x1bd4>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025aa:	4bbe      	ldr	r3, [pc, #760]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x1bd4>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b4:	4bba      	ldr	r3, [pc, #744]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80025c2:	4bb8      	ldr	r3, [pc, #736]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x1bd4>)
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	4bb5      	ldr	r3, [pc, #724]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d2:	4bb4      	ldr	r3, [pc, #720]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x1bd4>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80025e4:	ee37 4b04 	vadd.f64	d4, d7, d4
 80025e8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80025ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80025f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025f8:	4bab      	ldr	r3, [pc, #684]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x1bd8>)
 80025fa:	edc3 7a00 	vstr	s15, [r3]
          tan_alpha_1_hat = 1.0 / tan_beta_1_hat;
 80025fe:	4bab      	ldr	r3, [pc, #684]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x1bdc>)
 8002600:	ed93 7a00 	vldr	s14, [r3]
 8002604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260c:	4ba8      	ldr	r3, [pc, #672]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x1be0>)
 800260e:	edc3 7a00 	vstr	s15, [r3]
          tan_alpha_2_hat = 1.0 / tan_beta_2_hat;
 8002612:	4ba8      	ldr	r3, [pc, #672]	; (80028b4 <HAL_TIM_PeriodElapsedCallback+0x1be4>)
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800261c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002620:	4ba5      	ldr	r3, [pc, #660]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x1be8>)
 8002622:	edc3 7a00 	vstr	s15, [r3]
          tan_alpha_3_hat = 1.0 / tan_beta_3_hat;
 8002626:	4ba5      	ldr	r3, [pc, #660]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x1bec>)
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002634:	4ba2      	ldr	r3, [pc, #648]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002636:	edc3 7a00 	vstr	s15, [r3]
          tan_alpha_4_hat = 1.0 / tan_beta_4_hat;
 800263a:	4ba2      	ldr	r3, [pc, #648]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1bf4>)
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002648:	4b9f      	ldr	r3, [pc, #636]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x1bf8>)
 800264a:	edc3 7a00 	vstr	s15, [r3]
          alpha_1_hat = atan2f( tan_alpha_1_hat, 1.0 );// Argument Order : ( y, x )
 800264e:	4b98      	ldr	r3, [pc, #608]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x1be0>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	f00b f89c 	bl	800d798 <atan2f>
 8002660:	eef0 7a40 	vmov.f32	s15, s0
 8002664:	4b99      	ldr	r3, [pc, #612]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x1bfc>)
 8002666:	edc3 7a00 	vstr	s15, [r3]
          alpha_2_hat = atan2f( tan_alpha_2_hat, 1.0 );
 800266a:	4b93      	ldr	r3, [pc, #588]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x1be8>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	f00b f88e 	bl	800d798 <atan2f>
 800267c:	eef0 7a40 	vmov.f32	s15, s0
 8002680:	4b93      	ldr	r3, [pc, #588]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 8002682:	edc3 7a00 	vstr	s15, [r3]
          alpha_3_hat = atan2f( tan_alpha_3_hat, 1.0 );
 8002686:	4b8e      	ldr	r3, [pc, #568]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	f00b f880 	bl	800d798 <atan2f>
 8002698:	eef0 7a40 	vmov.f32	s15, s0
 800269c:	4b8d      	ldr	r3, [pc, #564]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1c04>)
 800269e:	edc3 7a00 	vstr	s15, [r3]
          alpha_4_hat = atan2f( tan_alpha_4_hat, 1.0 );
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x1bf8>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	f00b f872 	bl	800d798 <atan2f>
 80026b4:	eef0 7a40 	vmov.f32	s15, s0
 80026b8:	4b87      	ldr	r3, [pc, #540]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1c08>)
 80026ba:	edc3 7a00 	vstr	s15, [r3]
          if( vy_res < 0.1 ){
 80026be:	4b87      	ldr	r3, [pc, #540]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x1c0c>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c8:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002880 <HAL_TIM_PeriodElapsedCallback+0x1bb0>
 80026cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d50f      	bpl.n	80026f6 <HAL_TIM_PeriodElapsedCallback+0x1a26>
            alpha_1 = alpha_1_hat;
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x1bfc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a81      	ldr	r2, [pc, #516]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 80026dc:	6013      	str	r3, [r2, #0]
            alpha_2 = alpha_2_hat;
 80026de:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a80      	ldr	r2, [pc, #512]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80026e4:	6013      	str	r3, [r2, #0]
            alpha_3 = alpha_3_hat;
 80026e6:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1c04>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7f      	ldr	r2, [pc, #508]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 80026ec:	6013      	str	r3, [r2, #0]
            alpha_4 = alpha_4_hat;
 80026ee:	4b7a      	ldr	r3, [pc, #488]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1c08>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7e      	ldr	r2, [pc, #504]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x1c1c>)
 80026f4:	6013      	str	r3, [r2, #0]
          tan_beta_1_hat_pre = tan_beta_1_hat;
 80026f6:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x1bdc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7d      	ldr	r2, [pc, #500]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 80026fc:	6013      	str	r3, [r2, #0]
          tan_beta_2_hat_pre = tan_beta_2_hat;
 80026fe:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_TIM_PeriodElapsedCallback+0x1be4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a7c      	ldr	r2, [pc, #496]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 8002704:	6013      	str	r3, [r2, #0]
          tan_beta_3_hat_pre = tan_beta_3_hat;
 8002706:	4b6d      	ldr	r3, [pc, #436]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x1bec>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7b      	ldr	r2, [pc, #492]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x1c28>)
 800270c:	6013      	str	r3, [r2, #0]
          tan_beta_4_hat_pre = tan_beta_4_hat;
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1bf4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x1c2c>)
 8002714:	6013      	str	r3, [r2, #0]
          P1_k_1 = P1_k;
 8002716:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x1c30>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7a      	ldr	r2, [pc, #488]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x1c34>)
 800271c:	6013      	str	r3, [r2, #0]
          P2_k_1 = P2_k;
 800271e:	4b7a      	ldr	r3, [pc, #488]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x1c38>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7a      	ldr	r2, [pc, #488]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x1c3c>)
 8002724:	6013      	str	r3, [r2, #0]
          P3_k_1 = P3_k;
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x1bc8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a79      	ldr	r2, [pc, #484]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x1c40>)
 800272c:	6013      	str	r3, [r2, #0]
          P4_k_1 = P4_k;
 800272e:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x1bd8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5b      	ldr	r2, [pc, #364]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 8002734:	6013      	str	r3, [r2, #0]
        e_integral_phi += Ki_phi * (dphi_cmd - dphi_res);
 8002736:	4b77      	ldr	r3, [pc, #476]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x1c44>)
 8002738:	ed93 7a00 	vldr	s14, [r3]
 800273c:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002746:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800291c <HAL_TIM_PeriodElapsedCallback+0x1c4c>
 800274a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	4b71      	ldr	r3, [pc, #452]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
        ddphi_ref = Kp_df_phi * (dphi_cmd - dphi_res) + e_integral_phi;
 800275e:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x1c44>)
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002924 <HAL_TIM_PeriodElapsedCallback+0x1c54>
 8002772:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002776:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1c58>)
 8002782:	edc3 7a00 	vstr	s15, [r3]
        ddx_ref   = Kp_df_x   * (vx_cmd   -   vx_res) + WOB_FB * ddx_dis;
 8002786:	4b69      	ldr	r3, [pc, #420]	; (800292c <HAL_TIM_PeriodElapsedCallback+0x1c5c>)
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	4b68      	ldr	r3, [pc, #416]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1c60>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002934 <HAL_TIM_PeriodElapsedCallback+0x1c64>
 800279a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800279e:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1c68>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x1c6c>)
 80027aa:	edc3 7a00 	vstr	s15, [r3]
        ddy_ref   = Kp_df_y   * (vy_cmd   -   vy_res) + WOB_FB * ddy_dis;
 80027ae:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x1c70>)
 80027b0:	ed93 7a00 	vldr	s14, [r3]
 80027b4:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x1c0c>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002934 <HAL_TIM_PeriodElapsedCallback+0x1c64>
 80027c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x1c74>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d0:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c78>)
 80027d2:	edc3 7a00 	vstr	s15, [r3]
        fx_ref = Mass * ddx_ref;
 80027d6:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x1c6c>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800294c <HAL_TIM_PeriodElapsedCallback+0x1c7c>
 80027e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x1c80>)
 80027e6:	edc3 7a00 	vstr	s15, [r3]
        fy_ref = Mass * ddy_ref;
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c78>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800294c <HAL_TIM_PeriodElapsedCallback+0x1c7c>
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x1c84>)
 80027fa:	edc3 7a00 	vstr	s15, [r3]
        Mz_ref = Jz * ddphi_ref;
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1c58>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002958 <HAL_TIM_PeriodElapsedCallback+0x1c88>
 8002808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280c:	4b53      	ldr	r3, [pc, #332]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x1c8c>)
 800280e:	edc3 7a00 	vstr	s15, [r3]
        fd1_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * (   fx_ref + fy_ref ) - 1.0 / ( L + W ) * Mz_ref );// ! Coefficient *, / of L + W : as of 2021/01/16, related to Weighted Jacobi Matrix ( *, / L + W)
 8002812:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x1c80>)
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x1c84>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002822:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002960 <HAL_TIM_PeriodElapsedCallback+0x1c90>
 8002826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800282e:	4b4b      	ldr	r3, [pc, #300]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x1c8c>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002838:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002888 <HAL_TIM_PeriodElapsedCallback+0x1bb8>
 800283c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002840:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002844:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002890 <HAL_TIM_PeriodElapsedCallback+0x1bc0>
 8002848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800284c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002850:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x1c94>)
 8002852:	edc3 7a00 	vstr	s15, [r3]
        fd2_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * ( - fx_ref + fy_ref ) - 1.0 / ( L + W ) * Mz_ref );// ! For comparing fd before distributing process : as of 2021/01/16
 8002856:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x1c84>)
 8002858:	ed93 7a00 	vldr	s14, [r3]
 800285c:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x1c80>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002960 <HAL_TIM_PeriodElapsedCallback+0x1c90>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002872:	4b3a      	ldr	r3, [pc, #232]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x1c8c>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287c:	e074      	b.n	8002968 <HAL_TIM_PeriodElapsedCallback+0x1c98>
 800287e:	bf00      	nop
 8002880:	9999999a 	.word	0x9999999a
 8002884:	3fb99999 	.word	0x3fb99999
 8002888:	98e38e45 	.word	0x98e38e45
 800288c:	400aaaaa 	.word	0x400aaaaa
 8002890:	6cfe779b 	.word	0x6cfe779b
 8002894:	3fc6a09e 	.word	0x3fc6a09e
 8002898:	2000001c 	.word	0x2000001c
 800289c:	200004a8 	.word	0x200004a8
 80028a0:	20000030 	.word	0x20000030
 80028a4:	20000458 	.word	0x20000458
 80028a8:	20000020 	.word	0x20000020
 80028ac:	2000047c 	.word	0x2000047c
 80028b0:	2000046c 	.word	0x2000046c
 80028b4:	20000480 	.word	0x20000480
 80028b8:	20000470 	.word	0x20000470
 80028bc:	20000484 	.word	0x20000484
 80028c0:	20000474 	.word	0x20000474
 80028c4:	20000488 	.word	0x20000488
 80028c8:	20000478 	.word	0x20000478
 80028cc:	2000045c 	.word	0x2000045c
 80028d0:	20000460 	.word	0x20000460
 80028d4:	20000464 	.word	0x20000464
 80028d8:	20000468 	.word	0x20000468
 80028dc:	20000320 	.word	0x20000320
 80028e0:	2000042c 	.word	0x2000042c
 80028e4:	20000430 	.word	0x20000430
 80028e8:	20000434 	.word	0x20000434
 80028ec:	20000438 	.word	0x20000438
 80028f0:	2000048c 	.word	0x2000048c
 80028f4:	20000490 	.word	0x20000490
 80028f8:	20000494 	.word	0x20000494
 80028fc:	20000498 	.word	0x20000498
 8002900:	20000014 	.word	0x20000014
 8002904:	20000024 	.word	0x20000024
 8002908:	20000018 	.word	0x20000018
 800290c:	20000028 	.word	0x20000028
 8002910:	2000002c 	.word	0x2000002c
 8002914:	20000318 	.word	0x20000318
 8002918:	20000324 	.word	0x20000324
 800291c:	3c23d70a 	.word	0x3c23d70a
 8002920:	20000340 	.word	0x20000340
 8002924:	44610000 	.word	0x44610000
 8002928:	2000033c 	.word	0x2000033c
 800292c:	20000310 	.word	0x20000310
 8002930:	2000031c 	.word	0x2000031c
 8002934:	42a00000 	.word	0x42a00000
 8002938:	20000508 	.word	0x20000508
 800293c:	20000334 	.word	0x20000334
 8002940:	20000314 	.word	0x20000314
 8002944:	2000050c 	.word	0x2000050c
 8002948:	20000338 	.word	0x20000338
 800294c:	40b147ae 	.word	0x40b147ae
 8002950:	20000344 	.word	0x20000344
 8002954:	20000348 	.word	0x20000348
 8002958:	3db645a2 	.word	0x3db645a2
 800295c:	2000034c 	.word	0x2000034c
 8002960:	3fb504f3 	.word	0x3fb504f3
 8002964:	20000360 	.word	0x20000360
 8002968:	ed9f 5bdd 	vldr	d5, [pc, #884]	; 8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2010>
 800296c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002970:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002974:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2018>
 8002978:	ee27 7b06 	vmul.f64	d7, d7, d6
 800297c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002980:	4bdd      	ldr	r3, [pc, #884]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2028>)
 8002982:	edc3 7a00 	vstr	s15, [r3]
        fd3_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * (   fx_ref + fy_ref ) + 1.0 / ( L + W ) * Mz_ref );// Change place of sqrt(2.0) : as of 2021/01/17
 8002986:	4bdd      	ldr	r3, [pc, #884]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	4bdc      	ldr	r3, [pc, #880]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002996:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 800299a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029a2:	4bd9      	ldr	r3, [pc, #868]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029ac:	ed9f 5bcc 	vldr	d5, [pc, #816]	; 8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2010>
 80029b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029b8:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2018>
 80029bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029c4:	4bd1      	ldr	r3, [pc, #836]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x203c>)
 80029c6:	edc3 7a00 	vstr	s15, [r3]
        fd4_ref_normal = 1.0 / ( sqrtf(2.0) * 4.0 ) * ( sqrtf(2.0) * ( - fx_ref + fy_ref ) + 1.0 / ( L + W ) * Mz_ref );
 80029ca:	4bcd      	ldr	r3, [pc, #820]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 80029cc:	ed93 7a00 	vldr	s14, [r3]
 80029d0:	4bca      	ldr	r3, [pc, #808]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029da:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029e6:	4bc8      	ldr	r3, [pc, #800]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029f0:	ed9f 5bbb 	vldr	d5, [pc, #748]	; 8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2010>
 80029f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029fc:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2018>
 8002a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a08:	4bc1      	ldr	r3, [pc, #772]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x2040>)
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
        fd1_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * (   ( w3 + w4 ) * sqrtf(2.0) * fx_ref + ( w2 + w3 ) * sqrtf(2.0) * fy_ref - ( w2 + w4 ) / ( L + W ) * Mz_ref );// ! Coefficient *, / of L + W !! Check!!
 8002a0e:	4bc1      	ldr	r3, [pc, #772]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002a10:	ed93 7a00 	vldr	s14, [r3]
 8002a14:	4bc0      	ldr	r3, [pc, #768]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1e:	4bbf      	ldr	r3, [pc, #764]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a28:	4bbd      	ldr	r3, [pc, #756]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a36:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2020>
 8002a3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a3e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002a42:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a46:	4bb5      	ldr	r3, [pc, #724]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002a48:	ed93 7a00 	vldr	s14, [r3]
 8002a4c:	4bb4      	ldr	r3, [pc, #720]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a56:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002a5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a5e:	4ba7      	ldr	r3, [pc, #668]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a68:	4bab      	ldr	r3, [pc, #684]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002a6a:	edd3 5a00 	vldr	s11, [r3]
 8002a6e:	4bab      	ldr	r3, [pc, #684]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002a70:	edd3 7a00 	vldr	s15, [r3]
 8002a74:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002a78:	eddf 5aa2 	vldr	s11, [pc, #648]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002a7c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002a80:	4b9f      	ldr	r3, [pc, #636]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8e:	4ba2      	ldr	r3, [pc, #648]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002a90:	edd3 5a00 	vldr	s11, [r3]
 8002a94:	4ba2      	ldr	r3, [pc, #648]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002a9e:	ed9f 5aa1 	vldr	s10, [pc, #644]	; 8002d24 <HAL_TIM_PeriodElapsedCallback+0x2054>
 8002aa2:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002aa6:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ac0:	4b99      	ldr	r3, [pc, #612]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x2058>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
        fd2_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * ( - ( w3 + w4 ) * sqrtf(2.0) * fx_ref + ( w1 + w4 ) * sqrtf(2.0) * fy_ref - ( w1 + w3 ) / ( L + W ) * Mz_ref );// as of 2021/01/17
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad6:	4b91      	ldr	r3, [pc, #580]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002ad8:	edd3 7a00 	vldr	s15, [r3]
 8002adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aee:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2020>
 8002af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002af6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002afa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002afe:	4b87      	ldr	r3, [pc, #540]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002b00:	ed93 7a00 	vldr	s14, [r3]
 8002b04:	4b86      	ldr	r3, [pc, #536]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0e:	eef1 7a67 	vneg.f32	s15, s15
 8002b12:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002b16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b1a:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002b26:	edd3 5a00 	vldr	s11, [r3]
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002b34:	eddf 5a73 	vldr	s11, [pc, #460]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002b38:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002b3c:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b4a:	4b72      	ldr	r3, [pc, #456]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002b4c:	edd3 5a00 	vldr	s11, [r3]
 8002b50:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002b5a:	ed9f 5a72 	vldr	s10, [pc, #456]	; 8002d24 <HAL_TIM_PeriodElapsedCallback+0x2054>
 8002b5e:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002b62:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b7c:	4b6b      	ldr	r3, [pc, #428]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x205c>)
 8002b7e:	edc3 7a00 	vstr	s15, [r3]
        fd3_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * (   ( w1 + w2 ) * sqrtf(2.0) * fx_ref + ( w1 + w4 ) * sqrtf(2.0) * fy_ref + ( w2 + w4 ) / ( L + W ) * Mz_ref );
 8002b82:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002b84:	ed93 7a00 	vldr	s14, [r3]
 8002b88:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b92:	4b62      	ldr	r3, [pc, #392]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002baa:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2020>
 8002bae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bb2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002bb6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002bbc:	ed93 7a00 	vldr	s14, [r3]
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002bce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002bde:	edd3 5a00 	vldr	s11, [r3]
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002bec:	eddf 5a45 	vldr	s11, [pc, #276]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002bf0:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002bf4:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c02:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002c04:	edd3 5a00 	vldr	s11, [r3]
 8002c08:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002c12:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8002d24 <HAL_TIM_PeriodElapsedCallback+0x2054>
 8002c16:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c34:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x2060>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
        fd4_ref = 1.0 / ( sqrtf(2.0) * 2.0 * ( w1 + w2 + w3 + w4 ) ) * ( - ( w1 + w2 ) * sqrtf(2.0) * fx_ref + ( w2 + w3 ) * sqrtf(2.0) * fy_ref + ( w1 + w3 ) / ( L + W ) * Mz_ref );
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2050>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c62:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2020>
 8002c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c6a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002c6e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c82:	eef1 7a67 	vneg.f32	s15, s15
 8002c86:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002c8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x202c>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c98:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2048>)
 8002c9a:	edd3 5a00 	vldr	s11, [r3]
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002ca8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x2034>
 8002cac:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2030>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2044>)
 8002cc0:	edd3 5a00 	vldr	s11, [r3]
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x204c>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002cce:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8002d24 <HAL_TIM_PeriodElapsedCallback+0x2054>
 8002cd2:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2038>)
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	e02a      	b.n	8002d34 <HAL_TIM_PeriodElapsedCallback+0x2064>
 8002cde:	bf00      	nop
 8002ce0:	98e38e45 	.word	0x98e38e45
 8002ce4:	400aaaaa 	.word	0x400aaaaa
 8002ce8:	6cfe779b 	.word	0x6cfe779b
 8002cec:	3fc6a09e 	.word	0x3fc6a09e
 8002cf0:	60000000 	.word	0x60000000
 8002cf4:	4006a09e 	.word	0x4006a09e
 8002cf8:	20000364 	.word	0x20000364
 8002cfc:	20000344 	.word	0x20000344
 8002d00:	20000348 	.word	0x20000348
 8002d04:	3fb504f3 	.word	0x3fb504f3
 8002d08:	2000034c 	.word	0x2000034c
 8002d0c:	20000368 	.word	0x20000368
 8002d10:	2000036c 	.word	0x2000036c
 8002d14:	2000041c 	.word	0x2000041c
 8002d18:	20000420 	.word	0x20000420
 8002d1c:	20000424 	.word	0x20000424
 8002d20:	20000428 	.word	0x20000428
 8002d24:	3e99999a 	.word	0x3e99999a
 8002d28:	20000350 	.word	0x20000350
 8002d2c:	20000354 	.word	0x20000354
 8002d30:	20000358 	.word	0x20000358
 8002d34:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d48:	4bda      	ldr	r3, [pc, #872]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x23e4>)
 8002d4a:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral1 = Ki_df_integral1 + Ki_df * dt * ( fd1_ref - fd_hat1 );
 8002d4e:	ed9f 7ada 	vldr	s14, [pc, #872]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8002d52:	eddf 7ada 	vldr	s15, [pc, #872]	; 80030bc <HAL_TIM_PeriodElapsedCallback+0x23ec>
 8002d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5a:	4bd9      	ldr	r3, [pc, #868]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x23f0>)
 8002d5c:	edd3 6a00 	vldr	s13, [r3]
 8002d60:	4bd8      	ldr	r3, [pc, #864]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x23f4>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6e:	4bd6      	ldr	r3, [pc, #856]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x23f8>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	4bd3      	ldr	r3, [pc, #844]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x23f8>)
 8002d7a:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral2 = Ki_df_integral2 + Ki_df * dt * ( fd2_ref - fd_hat2 );
 8002d7e:	ed9f 7ace 	vldr	s14, [pc, #824]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8002d82:	eddf 7ace 	vldr	s15, [pc, #824]	; 80030bc <HAL_TIM_PeriodElapsedCallback+0x23ec>
 8002d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d8a:	4bd0      	ldr	r3, [pc, #832]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x23fc>)
 8002d8c:	edd3 6a00 	vldr	s13, [r3]
 8002d90:	4bcf      	ldr	r3, [pc, #828]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x2400>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d9e:	4bcd      	ldr	r3, [pc, #820]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x2404>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da8:	4bca      	ldr	r3, [pc, #808]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x2404>)
 8002daa:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral3 = Ki_df_integral3 + Ki_df * dt * ( fd3_ref - fd_hat3 );
 8002dae:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8002db2:	eddf 7ac2 	vldr	s15, [pc, #776]	; 80030bc <HAL_TIM_PeriodElapsedCallback+0x23ec>
 8002db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dba:	4bc7      	ldr	r3, [pc, #796]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x2408>)
 8002dbc:	edd3 6a00 	vldr	s13, [r3]
 8002dc0:	4bc6      	ldr	r3, [pc, #792]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x240c>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dce:	4bc4      	ldr	r3, [pc, #784]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x2410>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	4bc1      	ldr	r3, [pc, #772]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x2410>)
 8002dda:	edc3 7a00 	vstr	s15, [r3]
        Ki_df_integral4 = Ki_df_integral4 + Ki_df * dt * ( fd4_ref - fd_hat4 );
 8002dde:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8002de2:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80030bc <HAL_TIM_PeriodElapsedCallback+0x23ec>
 8002de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dea:	4bb2      	ldr	r3, [pc, #712]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x23e4>)
 8002dec:	edd3 6a00 	vldr	s13, [r3]
 8002df0:	4bbc      	ldr	r3, [pc, #752]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x2414>)
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dfe:	4bba      	ldr	r3, [pc, #744]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x2418>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	4bb7      	ldr	r3, [pc, #732]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x2418>)
 8002e0a:	edc3 7a00 	vstr	s15, [r3]
        vel1_ref_new = Kp_df * ( fd1_ref - fd_hat1 ) + Ki_df_integral1;
 8002e0e:	4bac      	ldr	r3, [pc, #688]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x23f0>)
 8002e10:	ed93 7a00 	vldr	s14, [r3]
 8002e14:	4bab      	ldr	r3, [pc, #684]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x23f4>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1e:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80030ec <HAL_TIM_PeriodElapsedCallback+0x241c>
 8002e22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e26:	4ba8      	ldr	r3, [pc, #672]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x23f8>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	4baf      	ldr	r3, [pc, #700]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x2420>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]
        vel2_ref_new = Kp_df * ( fd2_ref - fd_hat2 ) + Ki_df_integral2;
 8002e36:	4ba5      	ldr	r3, [pc, #660]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x23fc>)
 8002e38:	ed93 7a00 	vldr	s14, [r3]
 8002e3c:	4ba4      	ldr	r3, [pc, #656]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x2400>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e46:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80030ec <HAL_TIM_PeriodElapsedCallback+0x241c>
 8002e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e4e:	4ba1      	ldr	r3, [pc, #644]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x2404>)
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	4ba6      	ldr	r3, [pc, #664]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x2424>)
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
        vel3_ref_new = Kp_df * ( fd3_ref - fd_hat3 ) + Ki_df_integral3;
 8002e5e:	4b9e      	ldr	r3, [pc, #632]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x2408>)
 8002e60:	ed93 7a00 	vldr	s14, [r3]
 8002e64:	4b9d      	ldr	r3, [pc, #628]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x240c>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6e:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80030ec <HAL_TIM_PeriodElapsedCallback+0x241c>
 8002e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e76:	4b9a      	ldr	r3, [pc, #616]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x2410>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x2428>)
 8002e82:	edc3 7a00 	vstr	s15, [r3]
        vel4_ref_new = Kp_df * ( fd4_ref - fd_hat4 ) + Ki_df_integral4;
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x23e4>)
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	4b95      	ldr	r3, [pc, #596]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x2414>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80030ec <HAL_TIM_PeriodElapsedCallback+0x241c>
 8002e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e9e:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x2418>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	4b94      	ldr	r3, [pc, #592]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x242c>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_cmd = vel1_ref_new / Rw;
 8002eae:	4b90      	ldr	r3, [pc, #576]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x2420>)
 8002eb0:	ed93 7a00 	vldr	s14, [r3]
 8002eb4:	eddf 6a92 	vldr	s13, [pc, #584]	; 8003100 <HAL_TIM_PeriodElapsedCallback+0x2430>
 8002eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ebc:	4b91      	ldr	r3, [pc, #580]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x2434>)
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_cmd = vel2_ref_new / Rw;
 8002ec2:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x2424>)
 8002ec4:	ed93 7a00 	vldr	s14, [r3]
 8002ec8:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8003100 <HAL_TIM_PeriodElapsedCallback+0x2430>
 8002ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ed0:	4b8d      	ldr	r3, [pc, #564]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x2438>)
 8002ed2:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_cmd = vel3_ref_new / Rw;
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x2428>)
 8002ed8:	ed93 7a00 	vldr	s14, [r3]
 8002edc:	eddf 6a88 	vldr	s13, [pc, #544]	; 8003100 <HAL_TIM_PeriodElapsedCallback+0x2430>
 8002ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee4:	4b89      	ldr	r3, [pc, #548]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x243c>)
 8002ee6:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_cmd = vel4_ref_new / Rw;
 8002eea:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x242c>)
 8002eec:	ed93 7a00 	vldr	s14, [r3]
 8002ef0:	eddf 6a83 	vldr	s13, [pc, #524]	; 8003100 <HAL_TIM_PeriodElapsedCallback+0x2430>
 8002ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ef8:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x2440>)
 8002efa:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_ref = Kp_av_df * (dtheta1_cmd - dtheta1_res);
 8002efe:	4b81      	ldr	r3, [pc, #516]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x2434>)
 8002f00:	ed93 7a00 	vldr	s14, [r3]
 8002f04:	4b83      	ldr	r3, [pc, #524]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x2444>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f16:	4b80      	ldr	r3, [pc, #512]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x2448>)
 8002f18:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_ref = Kp_av_df * (dtheta2_cmd - dtheta2_res);
 8002f1c:	4b7a      	ldr	r3, [pc, #488]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x2438>)
 8002f1e:	ed93 7a00 	vldr	s14, [r3]
 8002f22:	4b7e      	ldr	r3, [pc, #504]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x244c>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f34:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x2450>)
 8002f36:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref = Kp_av_df * (dtheta3_cmd - dtheta3_res);
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x243c>)
 8002f3c:	ed93 7a00 	vldr	s14, [r3]
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x2454>)
 8002f42:	edd3 7a00 	vldr	s15, [r3]
 8002f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f52:	4b75      	ldr	r3, [pc, #468]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x2458>)
 8002f54:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_ref = Kp_av_df * (dtheta4_cmd - dtheta4_res);
 8002f58:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x2440>)
 8002f5a:	ed93 7a00 	vldr	s14, [r3]
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x245c>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f70:	4b6f      	ldr	r3, [pc, #444]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x2460>)
 8002f72:	edc3 7a00 	vstr	s15, [r3]
        i1_ref = M11*ddtheta1_ref / ( Gear * Ktn );
 8002f76:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 8002f7a:	4b67      	ldr	r3, [pc, #412]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x2448>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f84:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f8c:	4b6b      	ldr	r3, [pc, #428]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x246c>)
 8002f8e:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = M22*ddtheta2_ref / ( Gear * Ktn );
 8002f92:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 8002f96:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x2450>)
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa8:	4b65      	ldr	r3, [pc, #404]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x2470>)
 8002faa:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = M33*ddtheta3_ref / ( Gear * Ktn );
 8002fae:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x2458>)
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fbc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2474>)
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = M44*ddtheta4_ref / ( Gear * Ktn );
 8002fca:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 8002fce:	4b58      	ldr	r3, [pc, #352]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x2460>)
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003138 <HAL_TIM_PeriodElapsedCallback+0x2468>
 8002fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x2478>)
 8002fe2:	edc3 7a00 	vstr	s15, [r3]
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 8002fe6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8002fea:	eddf 7a58 	vldr	s15, [pc, #352]	; 800314c <HAL_TIM_PeriodElapsedCallback+0x247c>
 8002fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ffa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ffe:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003002:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003006:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 800300a:	eddf 7a50 	vldr	s15, [pc, #320]	; 800314c <HAL_TIM_PeriodElapsedCallback+0x247c>
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003150 <HAL_TIM_PeriodElapsedCallback+0x2480>
 8003016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003154 <HAL_TIM_PeriodElapsedCallback+0x2484>
 800301e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003022:	4b4d      	ldr	r3, [pc, #308]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x2488>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	4b4b      	ldr	r3, [pc, #300]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x248c>)
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003036:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003134 <HAL_TIM_PeriodElapsedCallback+0x2464>
 800303a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800314c <HAL_TIM_PeriodElapsedCallback+0x247c>
 800303e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003042:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x2444>)
 8003044:	ed93 5a00 	vldr	s10, [r3]
 8003048:	4b45      	ldr	r3, [pc, #276]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x2490>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003052:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800305e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003062:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x2494>)
 8003068:	edc3 7a00 	vstr	s15, [r3]
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 800306c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8003070:	eddf 7a36 	vldr	s15, [pc, #216]	; 800314c <HAL_TIM_PeriodElapsedCallback+0x247c>
 8003074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003078:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800307c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003080:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003084:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003088:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800308c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80030b8 <HAL_TIM_PeriodElapsedCallback+0x23e8>
 8003090:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800314c <HAL_TIM_PeriodElapsedCallback+0x247c>
 8003094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003098:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003150 <HAL_TIM_PeriodElapsedCallback+0x2480>
 800309c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003154 <HAL_TIM_PeriodElapsedCallback+0x2484>
 80030a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a8:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x2498>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	e05b      	b.n	800316c <HAL_TIM_PeriodElapsedCallback+0x249c>
 80030b4:	2000035c 	.word	0x2000035c
 80030b8:	3a83126f 	.word	0x3a83126f
 80030bc:	3c23d70a 	.word	0x3c23d70a
 80030c0:	20000350 	.word	0x20000350
 80030c4:	200003f0 	.word	0x200003f0
 80030c8:	20000370 	.word	0x20000370
 80030cc:	20000354 	.word	0x20000354
 80030d0:	200003f4 	.word	0x200003f4
 80030d4:	20000374 	.word	0x20000374
 80030d8:	20000358 	.word	0x20000358
 80030dc:	200003f8 	.word	0x200003f8
 80030e0:	20000378 	.word	0x20000378
 80030e4:	200003fc 	.word	0x200003fc
 80030e8:	2000037c 	.word	0x2000037c
 80030ec:	3ba3d70a 	.word	0x3ba3d70a
 80030f0:	20000380 	.word	0x20000380
 80030f4:	20000384 	.word	0x20000384
 80030f8:	20000388 	.word	0x20000388
 80030fc:	2000038c 	.word	0x2000038c
 8003100:	3d4ccccd 	.word	0x3d4ccccd
 8003104:	200002c8 	.word	0x200002c8
 8003108:	200002cc 	.word	0x200002cc
 800310c:	200002d0 	.word	0x200002d0
 8003110:	200002d4 	.word	0x200002d4
 8003114:	20000278 	.word	0x20000278
 8003118:	200002b8 	.word	0x200002b8
 800311c:	2000027c 	.word	0x2000027c
 8003120:	200002bc 	.word	0x200002bc
 8003124:	20000280 	.word	0x20000280
 8003128:	200002c0 	.word	0x200002c0
 800312c:	20000284 	.word	0x20000284
 8003130:	200002c4 	.word	0x200002c4
 8003134:	3b8a4bfc 	.word	0x3b8a4bfc
 8003138:	3f5b8bac 	.word	0x3f5b8bac
 800313c:	200002d8 	.word	0x200002d8
 8003140:	200002dc 	.word	0x200002dc
 8003144:	200002e0 	.word	0x200002e0
 8003148:	200002e4 	.word	0x200002e4
 800314c:	42480000 	.word	0x42480000
 8003150:	42800000 	.word	0x42800000
 8003154:	3c5b8bac 	.word	0x3c5b8bac
 8003158:	200002e8 	.word	0x200002e8
 800315c:	200003a0 	.word	0x200003a0
 8003160:	20000288 	.word	0x20000288
 8003164:	20000390 	.word	0x20000390
 8003168:	200002ec 	.word	0x200002ec
 800316c:	4bd7      	ldr	r3, [pc, #860]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x27fc>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003176:	eddf 5ad6 	vldr	s11, [pc, #856]	; 80034d0 <HAL_TIM_PeriodElapsedCallback+0x2800>
 800317a:	eddf 7ad6 	vldr	s15, [pc, #856]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800317e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003182:	4bd5      	ldr	r3, [pc, #852]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2808>)
 8003184:	ed93 5a00 	vldr	s10, [r3]
 8003188:	4bd4      	ldr	r3, [pc, #848]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x280c>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003192:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80031a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031a6:	4bce      	ldr	r3, [pc, #824]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2810>)
 80031a8:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 80031ac:	ed9f 7acd 	vldr	s14, [pc, #820]	; 80034e4 <HAL_TIM_PeriodElapsedCallback+0x2814>
 80031b0:	eddf 7ac8 	vldr	s15, [pc, #800]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80031b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80031c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031c4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80031c8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80031cc:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80034e4 <HAL_TIM_PeriodElapsedCallback+0x2814>
 80031d0:	eddf 7ac0 	vldr	s15, [pc, #768]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80031d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d8:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80034e8 <HAL_TIM_PeriodElapsedCallback+0x2818>
 80031dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031e0:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80034ec <HAL_TIM_PeriodElapsedCallback+0x281c>
 80031e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e8:	4bc1      	ldr	r3, [pc, #772]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2820>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f2:	4bc0      	ldr	r3, [pc, #768]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x2824>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031fc:	eddf 5ab4 	vldr	s11, [pc, #720]	; 80034d0 <HAL_TIM_PeriodElapsedCallback+0x2800>
 8003200:	eddf 7ab4 	vldr	s15, [pc, #720]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 8003204:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003208:	4bbb      	ldr	r3, [pc, #748]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2828>)
 800320a:	ed93 5a00 	vldr	s10, [r3]
 800320e:	4bbb      	ldr	r3, [pc, #748]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x282c>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003218:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003224:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003228:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800322c:	4bb4      	ldr	r3, [pc, #720]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2830>)
 800322e:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 8003232:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80034e4 <HAL_TIM_PeriodElapsedCallback+0x2814>
 8003236:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003242:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003246:	ee37 7b06 	vadd.f64	d7, d7, d6
 800324a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800324e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003252:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80034e4 <HAL_TIM_PeriodElapsedCallback+0x2814>
 8003256:	eddf 7a9f 	vldr	s15, [pc, #636]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80034e8 <HAL_TIM_PeriodElapsedCallback+0x2818>
 8003262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003266:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80034ec <HAL_TIM_PeriodElapsedCallback+0x281c>
 800326a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800326e:	4ba5      	ldr	r3, [pc, #660]	; (8003504 <HAL_TIM_PeriodElapsedCallback+0x2834>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003278:	4ba3      	ldr	r3, [pc, #652]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x2838>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003282:	eddf 5a93 	vldr	s11, [pc, #588]	; 80034d0 <HAL_TIM_PeriodElapsedCallback+0x2800>
 8003286:	eddf 7a93 	vldr	s15, [pc, #588]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800328a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800328e:	4b9f      	ldr	r3, [pc, #636]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x283c>)
 8003290:	ed93 5a00 	vldr	s10, [r3]
 8003294:	4b9e      	ldr	r3, [pc, #632]	; (8003510 <HAL_TIM_PeriodElapsedCallback+0x2840>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800329e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80032a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80032ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032b2:	4b98      	ldr	r3, [pc, #608]	; (8003514 <HAL_TIM_PeriodElapsedCallback+0x2844>)
 80032b4:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 80032b8:	4b97      	ldr	r3, [pc, #604]	; (8003518 <HAL_TIM_PeriodElapsedCallback+0x2848>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a97      	ldr	r2, [pc, #604]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x284c>)
 80032be:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 80032c0:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2810>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a81      	ldr	r2, [pc, #516]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x27fc>)
 80032c6:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 80032c8:	4b8d      	ldr	r3, [pc, #564]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2830>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a89      	ldr	r2, [pc, #548]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x2824>)
 80032ce:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 80032d0:	4b90      	ldr	r3, [pc, #576]	; (8003514 <HAL_TIM_PeriodElapsedCallback+0x2844>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a8c      	ldr	r2, [pc, #560]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x2838>)
 80032d6:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 80032d8:	4b91      	ldr	r3, [pc, #580]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x2850>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a91      	ldr	r2, [pc, #580]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x2854>)
 80032de:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 80032e0:	4b91      	ldr	r3, [pc, #580]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x2858>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a91      	ldr	r2, [pc, #580]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x285c>)
 80032e6:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 80032e8:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2820>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x2860>)
 80032ee:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 80032f0:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_TIM_PeriodElapsedCallback+0x2834>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8f      	ldr	r2, [pc, #572]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x2864>)
 80032f6:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 80032f8:	4b87      	ldr	r3, [pc, #540]	; (8003518 <HAL_TIM_PeriodElapsedCallback+0x2848>)
 80032fa:	ed93 7a00 	vldr	s14, [r3]
 80032fe:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8003538 <HAL_TIM_PeriodElapsedCallback+0x2868>
 8003302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x286c>)
 8003308:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 800330c:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2810>)
 800330e:	ed93 7a00 	vldr	s14, [r3]
 8003312:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003538 <HAL_TIM_PeriodElapsedCallback+0x2868>
 8003316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800331a:	4b89      	ldr	r3, [pc, #548]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x2870>)
 800331c:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 8003320:	4b77      	ldr	r3, [pc, #476]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2830>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	eddf 6a84 	vldr	s13, [pc, #528]	; 8003538 <HAL_TIM_PeriodElapsedCallback+0x2868>
 800332a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x2874>)
 8003330:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 8003334:	4b77      	ldr	r3, [pc, #476]	; (8003514 <HAL_TIM_PeriodElapsedCallback+0x2844>)
 8003336:	ed93 7a00 	vldr	s14, [r3]
 800333a:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003538 <HAL_TIM_PeriodElapsedCallback+0x2868>
 800333e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003342:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x2878>)
 8003344:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res - M12 * G_DFOB * dtheta2_res - M13 * G_DFOB * dtheta3_res - M14 * G_DFOB * dtheta4_res;// * Continuous
 8003348:	4b80      	ldr	r3, [pc, #512]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x287c>)
 800334a:	ed93 7a00 	vldr	s14, [r3]
 800334e:	eddf 6a60 	vldr	s13, [pc, #384]	; 80034d0 <HAL_TIM_PeriodElapsedCallback+0x2800>
 8003352:	eddf 7a60 	vldr	s15, [pc, #384]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 8003356:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800335a:	4b7d      	ldr	r3, [pc, #500]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003368:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x2884>
 800336c:	eddf 7a59 	vldr	s15, [pc, #356]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 8003370:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003374:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2808>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003382:	eddf 6a75 	vldr	s13, [pc, #468]	; 8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>
 8003386:	eddf 7a53 	vldr	s15, [pc, #332]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800338a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800338e:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2828>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800339c:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800355c <HAL_TIM_PeriodElapsedCallback+0x288c>
 80033a0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80033a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033a8:	4b58      	ldr	r3, [pc, #352]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x283c>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x2890>)
 80033b8:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob2 = integral_tau_dfob2 - M21 * G_DFOB * dtheta1_res - M22 * G_DFOB * dtheta2_res - M23 * G_DFOB * dtheta3_res - M24 * G_DFOB * dtheta4_res;// * Continuous
 80033bc:	4b69      	ldr	r3, [pc, #420]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x2894>)
 80033be:	ed93 7a00 	vldr	s14, [r3]
 80033c2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x2884>
 80033c6:	eddf 7a43 	vldr	s15, [pc, #268]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80033ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033ce:	4b60      	ldr	r3, [pc, #384]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80034d0 <HAL_TIM_PeriodElapsedCallback+0x2800>
 80033e0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80033e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2808>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033f6:	eddf 6a59 	vldr	s13, [pc, #356]	; 800355c <HAL_TIM_PeriodElapsedCallback+0x288c>
 80033fa:	eddf 7a36 	vldr	s15, [pc, #216]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80033fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2828>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003410:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>
 8003414:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 8003418:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x283c>)
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342a:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x2898>)
 800342c:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M31 * G_DFOB * dtheta1_res - M32 * G_DFOB * dtheta2_res - M33 * G_DFOB * dtheta3_res - M34 * G_DFOB * dtheta4_res;// * Continuous
 8003430:	4b4e      	ldr	r3, [pc, #312]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x289c>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>
 800343a:	eddf 7a26 	vldr	s15, [pc, #152]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800343e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003450:	eddf 6a42 	vldr	s13, [pc, #264]	; 800355c <HAL_TIM_PeriodElapsedCallback+0x288c>
 8003454:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 8003458:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800345c:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2808>)
 800345e:	edd3 7a00 	vldr	s15, [r3]
 8003462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800346a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80034d0 <HAL_TIM_PeriodElapsedCallback+0x2800>
 800346e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 8003472:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2828>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003484:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x2884>
 8003488:	eddf 7a12 	vldr	s15, [pc, #72]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 800348c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x283c>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x28a0>)
 80034a0:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M41 * G_DFOB * dtheta1_res - M42 * G_DFOB * dtheta2_res - M43 * G_DFOB * dtheta3_res - M44 * G_DFOB * dtheta4_res;// * Continuous
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x28a4>)
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800355c <HAL_TIM_PeriodElapsedCallback+0x288c>
 80034ae:	eddf 7a09 	vldr	s15, [pc, #36]	; 80034d4 <HAL_TIM_PeriodElapsedCallback+0x2804>
 80034b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x2880>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>
 80034c8:	e058      	b.n	800357c <HAL_TIM_PeriodElapsedCallback+0x28ac>
 80034ca:	bf00      	nop
 80034cc:	200003a4 	.word	0x200003a4
 80034d0:	3b8a4bfc 	.word	0x3b8a4bfc
 80034d4:	42480000 	.word	0x42480000
 80034d8:	2000027c 	.word	0x2000027c
 80034dc:	2000028c 	.word	0x2000028c
 80034e0:	20000394 	.word	0x20000394
 80034e4:	3a83126f 	.word	0x3a83126f
 80034e8:	42800000 	.word	0x42800000
 80034ec:	3c5b8bac 	.word	0x3c5b8bac
 80034f0:	200002f0 	.word	0x200002f0
 80034f4:	200003a8 	.word	0x200003a8
 80034f8:	20000280 	.word	0x20000280
 80034fc:	20000290 	.word	0x20000290
 8003500:	20000398 	.word	0x20000398
 8003504:	200002f4 	.word	0x200002f4
 8003508:	200003ac 	.word	0x200003ac
 800350c:	20000284 	.word	0x20000284
 8003510:	20000294 	.word	0x20000294
 8003514:	2000039c 	.word	0x2000039c
 8003518:	20000390 	.word	0x20000390
 800351c:	200003a0 	.word	0x200003a0
 8003520:	200002e8 	.word	0x200002e8
 8003524:	200002f8 	.word	0x200002f8
 8003528:	200002ec 	.word	0x200002ec
 800352c:	200002fc 	.word	0x200002fc
 8003530:	20000300 	.word	0x20000300
 8003534:	20000304 	.word	0x20000304
 8003538:	3f5b8bac 	.word	0x3f5b8bac
 800353c:	200003b0 	.word	0x200003b0
 8003540:	200003b4 	.word	0x200003b4
 8003544:	200003b8 	.word	0x200003b8
 8003548:	200003bc 	.word	0x200003bc
 800354c:	200003e0 	.word	0x200003e0
 8003550:	20000278 	.word	0x20000278
 8003554:	39220502 	.word	0x39220502
 8003558:	3aceaa7d 	.word	0x3aceaa7d
 800355c:	b9220502 	.word	0xb9220502
 8003560:	200003c0 	.word	0x200003c0
 8003564:	200003e4 	.word	0x200003e4
 8003568:	200003c4 	.word	0x200003c4
 800356c:	200003e8 	.word	0x200003e8
 8003570:	200003c8 	.word	0x200003c8
 8003574:	200003ec 	.word	0x200003ec
 8003578:	42480000 	.word	0x42480000
 800357c:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x28a8>
 8003580:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003584:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x2a10>)
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003592:	eddf 6a54 	vldr	s13, [pc, #336]	; 80036e4 <HAL_TIM_PeriodElapsedCallback+0x2a14>
 8003596:	eddf 7a54 	vldr	s15, [pc, #336]	; 80036e8 <HAL_TIM_PeriodElapsedCallback+0x2a18>
 800359a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800359e:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x2a1c>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ac:	eddf 6a50 	vldr	s13, [pc, #320]	; 80036f0 <HAL_TIM_PeriodElapsedCallback+0x2a20>
 80035b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80036e8 <HAL_TIM_PeriodElapsedCallback+0x2a18>
 80035b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035b8:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_TIM_PeriodElapsedCallback+0x2a24>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c6:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_TIM_PeriodElapsedCallback+0x2a28>)
 80035c8:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0x2a2c>)
 80035ce:	f993 3000 	ldrsb.w	r3, [r3]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_TIM_PeriodElapsedCallback+0x290c>
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d00f      	beq.n	80035fa <HAL_TIM_PeriodElapsedCallback+0x292a>
 80035da:	e01d      	b.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x2948>
            tau_fric1 = F1_plus + D1_plus * dtheta1_res;
 80035dc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003700 <HAL_TIM_PeriodElapsedCallback+0x2a30>
 80035e0:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x2a34>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003708 <HAL_TIM_PeriodElapsedCallback+0x2a38>
 80035ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035f2:	4b46      	ldr	r3, [pc, #280]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x2a3c>)
 80035f4:	edc3 7a00 	vstr	s15, [r3]
            break;
 80035f8:	e00e      	b.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x2948>
            tau_fric1 = F1_minus + D1_minus * dtheta1_res;
 80035fa:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003710 <HAL_TIM_PeriodElapsedCallback+0x2a40>
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x2a34>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003608:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003714 <HAL_TIM_PeriodElapsedCallback+0x2a44>
 800360c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003610:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x2a3c>)
 8003612:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003616:	bf00      	nop
        switch(direc2){
 8003618:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x2a48>)
 800361a:	f993 3000 	ldrsb.w	r3, [r3]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_TIM_PeriodElapsedCallback+0x2958>
 8003622:	2b01      	cmp	r3, #1
 8003624:	d00f      	beq.n	8003646 <HAL_TIM_PeriodElapsedCallback+0x2976>
 8003626:	e01d      	b.n	8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>
            tau_fric2 = F2_plus + D2_plus * dtheta2_res;
 8003628:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800371c <HAL_TIM_PeriodElapsedCallback+0x2a4c>
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x2a10>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003720 <HAL_TIM_PeriodElapsedCallback+0x2a50>
 800363a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x2a54>)
 8003640:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003644:	e00e      	b.n	8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>
            tau_fric2 = F2_minus + D2_minus * dtheta2_res;
 8003646:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003728 <HAL_TIM_PeriodElapsedCallback+0x2a58>
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x2a10>)
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003654:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800372c <HAL_TIM_PeriodElapsedCallback+0x2a5c>
 8003658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x2a54>)
 800365e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003662:	bf00      	nop
        switch(direc3){
 8003664:	4b32      	ldr	r3, [pc, #200]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x2a60>)
 8003666:	f993 3000 	ldrsb.w	r3, [r3]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x29a4>
 800366e:	2b01      	cmp	r3, #1
 8003670:	d00f      	beq.n	8003692 <HAL_TIM_PeriodElapsedCallback+0x29c2>
 8003672:	e01d      	b.n	80036b0 <HAL_TIM_PeriodElapsedCallback+0x29e0>
            tau_fric3 = F3_plus + D3_plus * dtheta3_res;
 8003674:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003734 <HAL_TIM_PeriodElapsedCallback+0x2a64>
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x2a1c>)
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x2a68>
 8003686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x2a6c>)
 800368c:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003690:	e00e      	b.n	80036b0 <HAL_TIM_PeriodElapsedCallback+0x29e0>
            tau_fric3 = F3_minus + D3_minus * dtheta3_res;
 8003692:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003740 <HAL_TIM_PeriodElapsedCallback+0x2a70>
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x2a1c>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003744 <HAL_TIM_PeriodElapsedCallback+0x2a74>
 80036a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x2a6c>)
 80036aa:	edc3 7a00 	vstr	s15, [r3]
            break;
 80036ae:	bf00      	nop
        switch(direc4){
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x2a78>)
 80036b2:	f993 3000 	ldrsb.w	r3, [r3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_TIM_PeriodElapsedCallback+0x29f0>
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d04e      	beq.n	800375c <HAL_TIM_PeriodElapsedCallback+0x2a8c>
 80036be:	e05c      	b.n	800377a <HAL_TIM_PeriodElapsedCallback+0x2aaa>
            tau_fric4 = F4_plus + D4_plus * dtheta4_res;
 80036c0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800374c <HAL_TIM_PeriodElapsedCallback+0x2a7c>
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_TIM_PeriodElapsedCallback+0x2a24>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003750 <HAL_TIM_PeriodElapsedCallback+0x2a80>
 80036d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x2a84>)
 80036d8:	edc3 7a00 	vstr	s15, [r3]
            break;
 80036dc:	e04d      	b.n	800377a <HAL_TIM_PeriodElapsedCallback+0x2aaa>
 80036de:	bf00      	nop
 80036e0:	2000027c 	.word	0x2000027c
 80036e4:	39220502 	.word	0x39220502
 80036e8:	42480000 	.word	0x42480000
 80036ec:	20000280 	.word	0x20000280
 80036f0:	3b8a4bfc 	.word	0x3b8a4bfc
 80036f4:	20000284 	.word	0x20000284
 80036f8:	200003cc 	.word	0x200003cc
 80036fc:	20000252 	.word	0x20000252
 8003700:	3a03126f 	.word	0x3a03126f
 8003704:	20000278 	.word	0x20000278
 8003708:	3c8db8bb 	.word	0x3c8db8bb
 800370c:	2000040c 	.word	0x2000040c
 8003710:	3a1d4952 	.word	0x3a1d4952
 8003714:	bd2dab9f 	.word	0xbd2dab9f
 8003718:	20000253 	.word	0x20000253
 800371c:	39d1b717 	.word	0x39d1b717
 8003720:	3ca8c155 	.word	0x3ca8c155
 8003724:	20000410 	.word	0x20000410
 8003728:	36eae18b 	.word	0x36eae18b
 800372c:	bd571d1d 	.word	0xbd571d1d
 8003730:	20000254 	.word	0x20000254
 8003734:	3a902de0 	.word	0x3a902de0
 8003738:	3d202752 	.word	0x3d202752
 800373c:	20000414 	.word	0x20000414
 8003740:	3b09a027 	.word	0x3b09a027
 8003744:	bd81a36e 	.word	0xbd81a36e
 8003748:	20000255 	.word	0x20000255
 800374c:	3a9d4952 	.word	0x3a9d4952
 8003750:	3ce21965 	.word	0x3ce21965
 8003754:	20000418 	.word	0x20000418
 8003758:	3a83126f 	.word	0x3a83126f
            tau_fric4 = F4_minus + D4_minus * dtheta4_res;
 800375c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8003758 <HAL_TIM_PeriodElapsedCallback+0x2a88>
 8003760:	4bde      	ldr	r3, [pc, #888]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	ed9f 7add 	vldr	s14, [pc, #884]	; 8003ae0 <HAL_TIM_PeriodElapsedCallback+0x2e10>
 800376e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003772:	4bdc      	ldr	r3, [pc, #880]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x2e14>)
 8003774:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003778:	bf00      	nop
        if( dtheta1_res < 0.5 && dtheta1_res > -0.5 ) tau_fric1 = 0.0;
 800377a:	4bdb      	ldr	r3, [pc, #876]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2e18>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378c:	d50d      	bpl.n	80037aa <HAL_TIM_PeriodElapsedCallback+0x2ada>
 800378e:	4bd6      	ldr	r3, [pc, #856]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2e18>)
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a0:	dd03      	ble.n	80037aa <HAL_TIM_PeriodElapsedCallback+0x2ada>
 80037a2:	4bd2      	ldr	r3, [pc, #840]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2e1c>)
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        if( dtheta2_res < 0.5 && dtheta2_res > -0.5 ) tau_fric2 = 0.0;
 80037aa:	4bd1      	ldr	r3, [pc, #836]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x2e20>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d50d      	bpl.n	80037da <HAL_TIM_PeriodElapsedCallback+0x2b0a>
 80037be:	4bcc      	ldr	r3, [pc, #816]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x2e20>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	dd03      	ble.n	80037da <HAL_TIM_PeriodElapsedCallback+0x2b0a>
 80037d2:	4bc8      	ldr	r3, [pc, #800]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x2e24>)
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
        if( dtheta3_res < 0.5 && dtheta3_res > -0.5 ) tau_fric3 = 0.0;
 80037da:	4bc7      	ldr	r3, [pc, #796]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x2e28>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	d50d      	bpl.n	800380a <HAL_TIM_PeriodElapsedCallback+0x2b3a>
 80037ee:	4bc2      	ldr	r3, [pc, #776]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x2e28>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80037f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	dd03      	ble.n	800380a <HAL_TIM_PeriodElapsedCallback+0x2b3a>
 8003802:	4bbe      	ldr	r3, [pc, #760]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x2e2c>)
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
        if( dtheta4_res < 0.5 && dtheta4_res > -0.5 ) tau_fric4 = 0.0;
 800380a:	4bb4      	ldr	r3, [pc, #720]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	d50d      	bpl.n	800383a <HAL_TIM_PeriodElapsedCallback+0x2b6a>
 800381e:	4baf      	ldr	r3, [pc, #700]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 8003820:	edd3 7a00 	vldr	s15, [r3]
 8003824:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	dd03      	ble.n	800383a <HAL_TIM_PeriodElapsedCallback+0x2b6a>
 8003832:	4bac      	ldr	r3, [pc, #688]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x2e14>)
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
        integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11*G_DFOB*dtheta1_res + M12*G_DFOB*dtheta2_res + M13*G_DFOB*dtheta3_res + M14*G_DFOB*dtheta4_res - tau_fric1 - integral_tau_dfob1) * G_DFOB * dt;
 800383a:	4bb1      	ldr	r3, [pc, #708]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x2e30>)
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003b04 <HAL_TIM_PeriodElapsedCallback+0x2e34>
 8003844:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003848:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2e38>
 800384c:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003850:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003854:	4ba4      	ldr	r3, [pc, #656]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2e18>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800385e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003862:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003b10 <HAL_TIM_PeriodElapsedCallback+0x2e40>
 8003866:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 800386a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800386e:	4ba0      	ldr	r3, [pc, #640]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x2e20>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800387c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8003b14 <HAL_TIM_PeriodElapsedCallback+0x2e44>
 8003880:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003888:	4b9b      	ldr	r3, [pc, #620]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x2e28>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003896:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003b18 <HAL_TIM_PeriodElapsedCallback+0x2e48>
 800389a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 800389e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038a2:	4b8e      	ldr	r3, [pc, #568]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b0:	4b8e      	ldr	r3, [pc, #568]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2e1c>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038ba:	4b98      	ldr	r3, [pc, #608]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x2e4c>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 80038c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038cc:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003b20 <HAL_TIM_PeriodElapsedCallback+0x2e50>
 80038d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038d4:	4b91      	ldr	r3, [pc, #580]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x2e4c>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x2e4c>)
 80038e0:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M21*G_DFOB*dtheta1_res + M22*G_DFOB*dtheta2_res + M23*G_DFOB*dtheta3_res + M24*G_DFOB*dtheta4_res - tau_fric2 - integral_tau_dfob2) * G_DFOB * dt;
 80038e4:	4b8f      	ldr	r3, [pc, #572]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x2e54>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003b04 <HAL_TIM_PeriodElapsedCallback+0x2e34>
 80038ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038f2:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003b10 <HAL_TIM_PeriodElapsedCallback+0x2e40>
 80038f6:	eddf 7a85 	vldr	s15, [pc, #532]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 80038fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038fe:	4b7a      	ldr	r3, [pc, #488]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2e18>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800390c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2e38>
 8003910:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003914:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003918:	4b75      	ldr	r3, [pc, #468]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x2e20>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003926:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003b18 <HAL_TIM_PeriodElapsedCallback+0x2e48>
 800392a:	eddf 7a78 	vldr	s15, [pc, #480]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 800392e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003932:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x2e28>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003940:	eddf 6a74 	vldr	s13, [pc, #464]	; 8003b14 <HAL_TIM_PeriodElapsedCallback+0x2e44>
 8003944:	eddf 7a71 	vldr	s15, [pc, #452]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003948:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800394c:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x2e24>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003964:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x2e58>)
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003976:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003b20 <HAL_TIM_PeriodElapsedCallback+0x2e50>
 800397a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x2e58>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003988:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x2e58>)
 800398a:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M31*G_DFOB*dtheta1_res + M32*G_DFOB*dtheta2_res + M33*G_DFOB*dtheta3_res + M34*G_DFOB*dtheta4_res - tau_fric3 - integral_tau_dfob3) * G_DFOB * dt;
 800398e:	4b67      	ldr	r3, [pc, #412]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x2e5c>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003b04 <HAL_TIM_PeriodElapsedCallback+0x2e34>
 8003998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800399c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003b14 <HAL_TIM_PeriodElapsedCallback+0x2e44>
 80039a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 80039a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039a8:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2e18>)
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b18 <HAL_TIM_PeriodElapsedCallback+0x2e48>
 80039ba:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 80039be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039c2:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x2e20>)
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039d0:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2e38>
 80039d4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 80039d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039dc:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x2e28>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ea:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003b10 <HAL_TIM_PeriodElapsedCallback+0x2e40>
 80039ee:	eddf 7a47 	vldr	s15, [pc, #284]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 80039f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a04:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x2e2c>)
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x2e60>)
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a18:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a20:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003b20 <HAL_TIM_PeriodElapsedCallback+0x2e50>
 8003a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x2e60>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x2e60>)
 8003a34:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M41*G_DFOB*dtheta1_res + M42*G_DFOB*dtheta2_res + M43*G_DFOB*dtheta3_res + M44*G_DFOB*dtheta4_res - tau_fric4 - integral_tau_dfob4) * G_DFOB * dt;
 8003a38:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x2e64>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003b04 <HAL_TIM_PeriodElapsedCallback+0x2e34>
 8003a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a46:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003b18 <HAL_TIM_PeriodElapsedCallback+0x2e48>
 8003a4a:	eddf 7a30 	vldr	s15, [pc, #192]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2e18>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a60:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003b14 <HAL_TIM_PeriodElapsedCallback+0x2e44>
 8003a64:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003a68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x2e20>)
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a7a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003b10 <HAL_TIM_PeriodElapsedCallback+0x2e40>
 8003a7e:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003a82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x2e28>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a94:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003b08 <HAL_TIM_PeriodElapsedCallback+0x2e38>
 8003a98:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003a9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2e0c>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x2e14>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x2e68>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003b0c <HAL_TIM_PeriodElapsedCallback+0x2e3c>
 8003ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003b20 <HAL_TIM_PeriodElapsedCallback+0x2e50>
 8003ace:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x2e68>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	e030      	b.n	8003b3c <HAL_TIM_PeriodElapsedCallback+0x2e6c>
 8003ada:	bf00      	nop
 8003adc:	20000284 	.word	0x20000284
 8003ae0:	bd87fcb9 	.word	0xbd87fcb9
 8003ae4:	20000418 	.word	0x20000418
 8003ae8:	20000278 	.word	0x20000278
 8003aec:	2000040c 	.word	0x2000040c
 8003af0:	2000027c 	.word	0x2000027c
 8003af4:	20000410 	.word	0x20000410
 8003af8:	20000280 	.word	0x20000280
 8003afc:	20000414 	.word	0x20000414
 8003b00:	200002e8 	.word	0x200002e8
 8003b04:	3f5b8bac 	.word	0x3f5b8bac
 8003b08:	3b8a4bfc 	.word	0x3b8a4bfc
 8003b0c:	42480000 	.word	0x42480000
 8003b10:	39220502 	.word	0x39220502
 8003b14:	3aceaa7d 	.word	0x3aceaa7d
 8003b18:	b9220502 	.word	0xb9220502
 8003b1c:	200003e0 	.word	0x200003e0
 8003b20:	3a83126f 	.word	0x3a83126f
 8003b24:	200002ec 	.word	0x200002ec
 8003b28:	200003e4 	.word	0x200003e4
 8003b2c:	200002f0 	.word	0x200002f0
 8003b30:	200003e8 	.word	0x200003e8
 8003b34:	200002f4 	.word	0x200002f4
 8003b38:	200003ec 	.word	0x200003ec
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	4bbd      	ldr	r3, [pc, #756]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x3168>)
 8003b42:	edc3 7a00 	vstr	s15, [r3]
          tau_dfob1_pre = tau_dfob1;
 8003b46:	4bbd      	ldr	r3, [pc, #756]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x316c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4abd      	ldr	r2, [pc, #756]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x3170>)
 8003b4c:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 8003b4e:	4bbd      	ldr	r3, [pc, #756]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x3174>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4abd      	ldr	r2, [pc, #756]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x3178>)
 8003b54:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 8003b56:	4bbd      	ldr	r3, [pc, #756]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x317c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4abd      	ldr	r2, [pc, #756]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x3180>)
 8003b5c:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 8003b5e:	4bbd      	ldr	r3, [pc, #756]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x3184>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4abd      	ldr	r2, [pc, #756]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x3188>)
 8003b64:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw;// [N] Element of fd's wheel rotation direction
 8003b66:	4bb5      	ldr	r3, [pc, #724]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x316c>)
 8003b68:	ed93 7a00 	vldr	s14, [r3]
 8003b6c:	eddf 6abb 	vldr	s13, [pc, #748]	; 8003e5c <HAL_TIM_PeriodElapsedCallback+0x318c>
 8003b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b74:	4bba      	ldr	r3, [pc, #744]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x3190>)
 8003b76:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw;
 8003b7a:	4bb2      	ldr	r3, [pc, #712]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x3174>)
 8003b7c:	ed93 7a00 	vldr	s14, [r3]
 8003b80:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8003e5c <HAL_TIM_PeriodElapsedCallback+0x318c>
 8003b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b88:	4bb6      	ldr	r3, [pc, #728]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x3194>)
 8003b8a:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw;
 8003b8e:	4baf      	ldr	r3, [pc, #700]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x317c>)
 8003b90:	ed93 7a00 	vldr	s14, [r3]
 8003b94:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8003e5c <HAL_TIM_PeriodElapsedCallback+0x318c>
 8003b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b9c:	4bb2      	ldr	r3, [pc, #712]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x3198>)
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw;
 8003ba2:	4bac      	ldr	r3, [pc, #688]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x3184>)
 8003ba4:	ed93 7a00 	vldr	s14, [r3]
 8003ba8:	eddf 6aac 	vldr	s13, [pc, #688]	; 8003e5c <HAL_TIM_PeriodElapsedCallback+0x318c>
 8003bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb0:	4bae      	ldr	r3, [pc, #696]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x319c>)
 8003bb2:	edc3 7a00 	vstr	s15, [r3]
        fx_hat = 1.0 / Rw             * (   tau_dfob1 - tau_dfob2 + tau_dfob3 - tau_dfob4 );// Substantially, 1.0 / sqrt(2.0) * fd : as of 2021/01/08
 8003bb6:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x316c>)
 8003bb8:	ed93 7a00 	vldr	s14, [r3]
 8003bbc:	4ba1      	ldr	r3, [pc, #644]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x3174>)
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bc6:	4ba1      	ldr	r3, [pc, #644]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x317c>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd0:	4ba0      	ldr	r3, [pc, #640]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x3184>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bde:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8003e28 <HAL_TIM_PeriodElapsedCallback+0x3158>
 8003be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003be6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bea:	4ba1      	ldr	r3, [pc, #644]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x31a0>)
 8003bec:	edc3 7a00 	vstr	s15, [r3]
        fy_hat = 1.0 / Rw             * (   tau_dfob1 + tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8003bf0:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x316c>)
 8003bf2:	ed93 7a00 	vldr	s14, [r3]
 8003bf6:	4b93      	ldr	r3, [pc, #588]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x3174>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c00:	4b92      	ldr	r3, [pc, #584]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x317c>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c0a:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x3184>)
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c18:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8003e28 <HAL_TIM_PeriodElapsedCallback+0x3158>
 8003c1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c24:	4b93      	ldr	r3, [pc, #588]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x31a4>)
 8003c26:	edc3 7a00 	vstr	s15, [r3]
        Mz_hat = 1.0 / Rw * ( L + W ) * ( - tau_dfob1 - tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8003c2a:	4b84      	ldr	r3, [pc, #528]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x316c>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	eeb1 7a67 	vneg.f32	s14, s15
 8003c34:	4b83      	ldr	r3, [pc, #524]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x3174>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c3e:	4b83      	ldr	r3, [pc, #524]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x317c>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c48:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x3184>)
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c56:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8003e30 <HAL_TIM_PeriodElapsedCallback+0x3160>
 8003c5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x31a8>)
 8003c64:	edc3 7a00 	vstr	s15, [r3]
        ddy_dis = 1.0 / (1.0 + G_WOB * dt) * ( ddy_dis_pre + G_WOB * dt * ( ddy_ref - Acc_y_correct ) );// LPF : Backward Difference
 8003c68:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003e7c <HAL_TIM_PeriodElapsedCallback+0x31ac>
 8003c6c:	eddf 7a84 	vldr	s15, [pc, #528]	; 8003e80 <HAL_TIM_PeriodElapsedCallback+0x31b0>
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c78:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003c7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c80:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003c84:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003c88:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003e7c <HAL_TIM_PeriodElapsedCallback+0x31ac>
 8003c8c:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8003e80 <HAL_TIM_PeriodElapsedCallback+0x31b0>
 8003c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c94:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x31b4>)
 8003c96:	edd3 5a00 	vldr	s11, [r3]
 8003c9a:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x31b8>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca8:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x31bc>)
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003cba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003cbe:	4b74      	ldr	r3, [pc, #464]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x31c0>)
 8003cc0:	edc3 7a00 	vstr	s15, [r3]
          ddy_dis_pre = ddy_dis;
 8003cc4:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x31c0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a70      	ldr	r2, [pc, #448]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x31bc>)
 8003cca:	6013      	str	r3, [r2, #0]
        M_YMO = 1.0 / (1.0 + G_YMO * dt) * ( M_YMO_pre + G_YMO * ( yaw_rate - yaw_rate_pre ) - G_YMO * dt * Mz_hat );// LPF + Pseudo Derivative : Backward Difference
 8003ccc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003e7c <HAL_TIM_PeriodElapsedCallback+0x31ac>
 8003cd0:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8003e80 <HAL_TIM_PeriodElapsedCallback+0x31b0>
 8003cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003ce0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ce4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003ce8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003cec:	4b69      	ldr	r3, [pc, #420]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x31c4>)
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x31c8>)
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfc:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003e80 <HAL_TIM_PeriodElapsedCallback+0x31b0>
 8003d00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d04:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x31cc>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d0e:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8003e7c <HAL_TIM_PeriodElapsedCallback+0x31ac>
 8003d12:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003e80 <HAL_TIM_PeriodElapsedCallback+0x31b0>
 8003d16:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d1a:	4b57      	ldr	r3, [pc, #348]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x31a8>)
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d34:	4b5a      	ldr	r3, [pc, #360]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x31d0>)
 8003d36:	edc3 7a00 	vstr	s15, [r3]
          M_YMO_pre     = M_YMO;
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x31d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x31cc>)
 8003d40:	6013      	str	r3, [r2, #0]
        ia1_ref = i1_ref + i1_comp;
 8003d42:	4b58      	ldr	r3, [pc, #352]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x31d4>)
 8003d44:	ed93 7a00 	vldr	s14, [r3]
 8003d48:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x31d8>)
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d52:	4b56      	ldr	r3, [pc, #344]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x31dc>)
 8003d54:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 8003d58:	4b55      	ldr	r3, [pc, #340]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x31e0>)
 8003d5a:	ed93 7a00 	vldr	s14, [r3]
 8003d5e:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x31e4>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x31e8>)
 8003d6a:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 8003d6e:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0x31ec>)
 8003d70:	ed93 7a00 	vldr	s14, [r3]
 8003d74:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x31f0>)
 8003d76:	edd3 7a00 	vldr	s15, [r3]
 8003d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7e:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x31f4>)
 8003d80:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0x31f8>)
 8003d86:	ed93 7a00 	vldr	s14, [r3]
 8003d8a:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0x31fc>)
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d94:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x3200>)
 8003d96:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 8003d9a:	4b44      	ldr	r3, [pc, #272]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x31dc>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003ed4 <HAL_TIM_PeriodElapsedCallback+0x3204>
 8003da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dac:	dd03      	ble.n	8003db6 <HAL_TIM_PeriodElapsedCallback+0x30e6>
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x31dc>)
 8003db0:	4a49      	ldr	r2, [pc, #292]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x3208>)
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e00c      	b.n	8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x31dc>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003edc <HAL_TIM_PeriodElapsedCallback+0x320c>
 8003dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc8:	d502      	bpl.n	8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>
 8003dca:	4b38      	ldr	r3, [pc, #224]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x31dc>)
 8003dcc:	4a44      	ldr	r2, [pc, #272]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x3210>)
 8003dce:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 8003dd0:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x31e8>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003ed4 <HAL_TIM_PeriodElapsedCallback+0x3204>
 8003dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	dd03      	ble.n	8003dec <HAL_TIM_PeriodElapsedCallback+0x311c>
 8003de4:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x31e8>)
 8003de6:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x3208>)
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e00c      	b.n	8003e06 <HAL_TIM_PeriodElapsedCallback+0x3136>
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x31e8>)
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003edc <HAL_TIM_PeriodElapsedCallback+0x320c>
 8003df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	d502      	bpl.n	8003e06 <HAL_TIM_PeriodElapsedCallback+0x3136>
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x31e8>)
 8003e02:	4a37      	ldr	r2, [pc, #220]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x3210>)
 8003e04:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8003e06:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x31f4>)
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003ed4 <HAL_TIM_PeriodElapsedCallback+0x3204>
 8003e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e18:	dd64      	ble.n	8003ee4 <HAL_TIM_PeriodElapsedCallback+0x3214>
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x31f4>)
 8003e1c:	4a2e      	ldr	r2, [pc, #184]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x3208>)
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e06d      	b.n	8003efe <HAL_TIM_PeriodElapsedCallback+0x322e>
 8003e22:	bf00      	nop
 8003e24:	f3af 8000 	nop.w
 8003e28:	fb000001 	.word	0xfb000001
 8003e2c:	4033ffff 	.word	0x4033ffff
 8003e30:	09fffffd 	.word	0x09fffffd
 8003e34:	40180000 	.word	0x40180000
 8003e38:	200003ec 	.word	0x200003ec
 8003e3c:	200003c0 	.word	0x200003c0
 8003e40:	200003d0 	.word	0x200003d0
 8003e44:	200003c4 	.word	0x200003c4
 8003e48:	200003d4 	.word	0x200003d4
 8003e4c:	200003c8 	.word	0x200003c8
 8003e50:	200003d8 	.word	0x200003d8
 8003e54:	200003cc 	.word	0x200003cc
 8003e58:	200003dc 	.word	0x200003dc
 8003e5c:	3d4ccccd 	.word	0x3d4ccccd
 8003e60:	200003f0 	.word	0x200003f0
 8003e64:	200003f4 	.word	0x200003f4
 8003e68:	200003f8 	.word	0x200003f8
 8003e6c:	200003fc 	.word	0x200003fc
 8003e70:	20000400 	.word	0x20000400
 8003e74:	20000404 	.word	0x20000404
 8003e78:	20000408 	.word	0x20000408
 8003e7c:	3a83126f 	.word	0x3a83126f
 8003e80:	42480000 	.word	0x42480000
 8003e84:	20000338 	.word	0x20000338
 8003e88:	200004e8 	.word	0x200004e8
 8003e8c:	20000514 	.word	0x20000514
 8003e90:	2000050c 	.word	0x2000050c
 8003e94:	200004c0 	.word	0x200004c0
 8003e98:	200004cc 	.word	0x200004cc
 8003e9c:	2000051c 	.word	0x2000051c
 8003ea0:	20000518 	.word	0x20000518
 8003ea4:	200002d8 	.word	0x200002d8
 8003ea8:	200003b0 	.word	0x200003b0
 8003eac:	200002e8 	.word	0x200002e8
 8003eb0:	200002dc 	.word	0x200002dc
 8003eb4:	200003b4 	.word	0x200003b4
 8003eb8:	200002ec 	.word	0x200002ec
 8003ebc:	200002e0 	.word	0x200002e0
 8003ec0:	200003b8 	.word	0x200003b8
 8003ec4:	200002f0 	.word	0x200002f0
 8003ec8:	200002e4 	.word	0x200002e4
 8003ecc:	200003bc 	.word	0x200003bc
 8003ed0:	200002f4 	.word	0x200002f4
 8003ed4:	3fb33333 	.word	0x3fb33333
 8003ed8:	3fb33333 	.word	0x3fb33333
 8003edc:	bfb33333 	.word	0xbfb33333
 8003ee0:	bfb33333 	.word	0xbfb33333
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x324c>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003f20 <HAL_TIM_PeriodElapsedCallback+0x3250>
 8003eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef6:	d502      	bpl.n	8003efe <HAL_TIM_PeriodElapsedCallback+0x322e>
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x324c>)
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x3254>)
 8003efc:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x3258>)
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003f2c <HAL_TIM_PeriodElapsedCallback+0x325c>
 8003f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f10:	dd10      	ble.n	8003f34 <HAL_TIM_PeriodElapsedCallback+0x3264>
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x3258>)
 8003f14:	4a06      	ldr	r2, [pc, #24]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0x3260>)
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e019      	b.n	8003f4e <HAL_TIM_PeriodElapsedCallback+0x327e>
 8003f1a:	bf00      	nop
 8003f1c:	200002f0 	.word	0x200002f0
 8003f20:	bfb33333 	.word	0xbfb33333
 8003f24:	bfb33333 	.word	0xbfb33333
 8003f28:	200002f4 	.word	0x200002f4
 8003f2c:	3fb33333 	.word	0x3fb33333
 8003f30:	3fb33333 	.word	0x3fb33333
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 8003f34:	4ba6      	ldr	r3, [pc, #664]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x3500>)
 8003f36:	edd3 7a00 	vldr	s15, [r3]
 8003f3a:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80041d4 <HAL_TIM_PeriodElapsedCallback+0x3504>
 8003f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	d502      	bpl.n	8003f4e <HAL_TIM_PeriodElapsedCallback+0x327e>
 8003f48:	4ba1      	ldr	r3, [pc, #644]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x3500>)
 8003f4a:	4aa3      	ldr	r2, [pc, #652]	; (80041d8 <HAL_TIM_PeriodElapsedCallback+0x3508>)
 8003f4c:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8003f4e:	4ba3      	ldr	r3, [pc, #652]	; (80041dc <HAL_TIM_PeriodElapsedCallback+0x350c>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f58:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80041b8 <HAL_TIM_PeriodElapsedCallback+0x34e8>
 8003f5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003f60:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80041c0 <HAL_TIM_PeriodElapsedCallback+0x34f0>
 8003f64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003f6c:	ee17 3a90 	vmov	r3, s15
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b9b      	ldr	r3, [pc, #620]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x3510>)
 8003f74:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 8003f76:	4b9b      	ldr	r3, [pc, #620]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x3514>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f80:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 80041b8 <HAL_TIM_PeriodElapsedCallback+0x34e8>
 8003f84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003f88:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 80041c0 <HAL_TIM_PeriodElapsedCallback+0x34f0>
 8003f8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003f94:	ee17 3a90 	vmov	r3, s15
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	4b93      	ldr	r3, [pc, #588]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x3518>)
 8003f9c:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8003f9e:	4b93      	ldr	r3, [pc, #588]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x351c>)
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fa8:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80041b8 <HAL_TIM_PeriodElapsedCallback+0x34e8>
 8003fac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003fb0:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80041c0 <HAL_TIM_PeriodElapsedCallback+0x34f0>
 8003fb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fb8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003fbc:	ee17 3a90 	vmov	r3, s15
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	4b8b      	ldr	r3, [pc, #556]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x3520>)
 8003fc4:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 8003fc6:	4b82      	ldr	r3, [pc, #520]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x3500>)
 8003fc8:	edd3 7a00 	vldr	s15, [r3]
 8003fcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fd0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80041b8 <HAL_TIM_PeriodElapsedCallback+0x34e8>
 8003fd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003fd8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80041c0 <HAL_TIM_PeriodElapsedCallback+0x34f0>
 8003fdc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fe0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003fe4:	ee17 3a90 	vmov	r3, s15
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	4b82      	ldr	r3, [pc, #520]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0x3524>)
 8003fec:	801a      	strh	r2, [r3, #0]
        if(PWM1 >= PWM_rsl * 0.9){
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x3510>)
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ffa:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80041c8 <HAL_TIM_PeriodElapsedCallback+0x34f8>
 8003ffe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	db03      	blt.n	8004010 <HAL_TIM_PeriodElapsedCallback+0x3340>
          PWM1 = PWM_rsl * 0.85;
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x3510>)
 800400a:	f640 5248 	movw	r2, #3400	; 0xd48
 800400e:	801a      	strh	r2, [r3, #0]
        if(PWM2 >= PWM_rsl * 0.9){
 8004010:	4b75      	ldr	r3, [pc, #468]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x3518>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800401c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80041c8 <HAL_TIM_PeriodElapsedCallback+0x34f8>
 8004020:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	db03      	blt.n	8004032 <HAL_TIM_PeriodElapsedCallback+0x3362>
          PWM2 = PWM_rsl * 0.85;
 800402a:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x3518>)
 800402c:	f640 5248 	movw	r2, #3400	; 0xd48
 8004030:	801a      	strh	r2, [r3, #0]
        if(PWM3 >= PWM_rsl * 0.9){
 8004032:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x3520>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800403e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80041c8 <HAL_TIM_PeriodElapsedCallback+0x34f8>
 8004042:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404a:	db03      	blt.n	8004054 <HAL_TIM_PeriodElapsedCallback+0x3384>
          PWM3 = PWM_rsl * 0.85;
 800404c:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x3520>)
 800404e:	f640 5248 	movw	r2, #3400	; 0xd48
 8004052:	801a      	strh	r2, [r3, #0]
        if(PWM4 >= PWM_rsl * 0.9){
 8004054:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0x3524>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004060:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80041c8 <HAL_TIM_PeriodElapsedCallback+0x34f8>
 8004064:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406c:	db03      	blt.n	8004076 <HAL_TIM_PeriodElapsedCallback+0x33a6>
          PWM4 = PWM_rsl * 0.85;
 800406e:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0x3524>)
 8004070:	f640 5248 	movw	r2, #3400	; 0xd48
 8004074:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8004076:	4b5a      	ldr	r3, [pc, #360]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x3510>)
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x3528>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x3518>)
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	4b5c      	ldr	r3, [pc, #368]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x3528>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 800408a:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x3520>)
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x352c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8004094:	4b57      	ldr	r3, [pc, #348]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0x3524>)
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x352c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 800409e:	4b58      	ldr	r3, [pc, #352]	; (8004200 <HAL_TIM_PeriodElapsedCallback+0x3530>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a58      	ldr	r2, [pc, #352]	; (8004204 <HAL_TIM_PeriodElapsedCallback+0x3534>)
 80040a4:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 80040a6:	4b58      	ldr	r3, [pc, #352]	; (8004208 <HAL_TIM_PeriodElapsedCallback+0x3538>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a58      	ldr	r2, [pc, #352]	; (800420c <HAL_TIM_PeriodElapsedCallback+0x353c>)
 80040ac:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 80040ae:	4b58      	ldr	r3, [pc, #352]	; (8004210 <HAL_TIM_PeriodElapsedCallback+0x3540>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_TIM_PeriodElapsedCallback+0x3544>)
 80040b4:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 80040b6:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_TIM_PeriodElapsedCallback+0x3548>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a58      	ldr	r2, [pc, #352]	; (800421c <HAL_TIM_PeriodElapsedCallback+0x354c>)
 80040bc:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 80040be:	4b58      	ldr	r3, [pc, #352]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0x3550>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0x3554>)
 80040c4:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 80040c6:	4b58      	ldr	r3, [pc, #352]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0x3558>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_TIM_PeriodElapsedCallback+0x355c>)
 80040cc:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 80040ce:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0x3560>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0x3564>)
 80040d4:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 80040d6:	4b58      	ldr	r3, [pc, #352]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0x3568>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_TIM_PeriodElapsedCallback+0x356c>)
 80040dc:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 80040de:	4b58      	ldr	r3, [pc, #352]	; (8004240 <HAL_TIM_PeriodElapsedCallback+0x3570>)
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	4b58      	ldr	r3, [pc, #352]	; (8004244 <HAL_TIM_PeriodElapsedCallback+0x3574>)
 80040e4:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 80040e6:	4b58      	ldr	r3, [pc, #352]	; (8004248 <HAL_TIM_PeriodElapsedCallback+0x3578>)
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_TIM_PeriodElapsedCallback+0x357c>)
 80040ec:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 80040ee:	4b58      	ldr	r3, [pc, #352]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0x3580>)
 80040f0:	881a      	ldrh	r2, [r3, #0]
 80040f2:	4b58      	ldr	r3, [pc, #352]	; (8004254 <HAL_TIM_PeriodElapsedCallback+0x3584>)
 80040f4:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 80040f6:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0x3588>)
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_TIM_PeriodElapsedCallback+0x358c>)
 80040fc:	801a      	strh	r2, [r3, #0]
        Acc_x_correct_pre = Acc_x_correct;
 80040fe:	4b58      	ldr	r3, [pc, #352]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0x3590>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0x3594>)
 8004104:	6013      	str	r3, [r2, #0]
        Acc_y_correct_pre = Acc_y_correct;
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <HAL_TIM_PeriodElapsedCallback+0x3598>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_TIM_PeriodElapsedCallback+0x359c>)
 800410c:	6013      	str	r3, [r2, #0]
        d_yawrate_pre     = d_yawrate;
 800410e:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0x35a0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0x35a4>)
 8004114:	6013      	str	r3, [r2, #0]
        yaw_rate_pre        = yaw_rate;
 8004116:	4b58      	ldr	r3, [pc, #352]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0x35a8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x35ac>)
 800411c:	6013      	str	r3, [r2, #0]
        vy_res_pre = vy_res;
 800411e:	4b58      	ldr	r3, [pc, #352]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0x35b0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x35b4>)
 8004124:	6013      	str	r3, [r2, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 8004126:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x35b8>)
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <HAL_TIM_PeriodElapsedCallback+0x35bc>)
 800412c:	fba3 1302 	umull	r1, r3, r3, r2
 8004130:	08d9      	lsrs	r1, r3, #3
 8004132:	460b      	mov	r3, r1
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 8431 	bne.w	80049a6 <HAL_TIM_PeriodElapsedCallback+0x3cd6>
 8004144:	4b52      	ldr	r3, [pc, #328]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f240 52db 	movw	r2, #1499	; 0x5db
 800414c:	4293      	cmp	r3, r2
 800414e:	f300 842a 	bgt.w	80049a6 <HAL_TIM_PeriodElapsedCallback+0x3cd6>
          t_SRAM[i_save] = t;
 8004152:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a4f      	ldr	r2, [pc, #316]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x35c4>)
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	494f      	ldr	r1, [pc, #316]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x35c8>)
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8004162:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2e      	ldr	r2, [pc, #184]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0x3550>)
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	494c      	ldr	r1, [pc, #304]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x35cc>)
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8004172:	4b47      	ldr	r3, [pc, #284]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0x3558>)
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4949      	ldr	r1, [pc, #292]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x35d0>)
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0x3560>)
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	4946      	ldr	r1, [pc, #280]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x35d4>)
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 8004192:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a28      	ldr	r2, [pc, #160]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0x3568>)
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	4943      	ldr	r1, [pc, #268]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x35d8>)
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	601a      	str	r2, [r3, #0]
          theta1_res_SRAM[i_save] = theta1_res;
 80041a2:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <HAL_TIM_PeriodElapsedCallback+0x3530>)
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	4940      	ldr	r1, [pc, #256]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x35dc>)
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x35c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	e07b      	b.n	80042b0 <HAL_TIM_PeriodElapsedCallback+0x35e0>
 80041b8:	bbf58d11 	.word	0xbbf58d11
 80041bc:	4091db6d 	.word	0x4091db6d
 80041c0:	00000000 	.word	0x00000000
 80041c4:	409f4000 	.word	0x409f4000
 80041c8:	00000000 	.word	0x00000000
 80041cc:	40ac2000 	.word	0x40ac2000
 80041d0:	200002f4 	.word	0x200002f4
 80041d4:	bfb33333 	.word	0xbfb33333
 80041d8:	bfb33333 	.word	0xbfb33333
 80041dc:	200002e8 	.word	0x200002e8
 80041e0:	20000308 	.word	0x20000308
 80041e4:	200002ec 	.word	0x200002ec
 80041e8:	2000030a 	.word	0x2000030a
 80041ec:	200002f0 	.word	0x200002f0
 80041f0:	2000030c 	.word	0x2000030c
 80041f4:	2000030e 	.word	0x2000030e
 80041f8:	20072eb4 	.word	0x20072eb4
 80041fc:	20072f98 	.word	0x20072f98
 8004200:	20000258 	.word	0x20000258
 8004204:	20000268 	.word	0x20000268
 8004208:	2000025c 	.word	0x2000025c
 800420c:	2000026c 	.word	0x2000026c
 8004210:	20000260 	.word	0x20000260
 8004214:	20000270 	.word	0x20000270
 8004218:	20000264 	.word	0x20000264
 800421c:	20000274 	.word	0x20000274
 8004220:	20000278 	.word	0x20000278
 8004224:	20000288 	.word	0x20000288
 8004228:	2000027c 	.word	0x2000027c
 800422c:	2000028c 	.word	0x2000028c
 8004230:	20000280 	.word	0x20000280
 8004234:	20000290 	.word	0x20000290
 8004238:	20000284 	.word	0x20000284
 800423c:	20000294 	.word	0x20000294
 8004240:	2000023e 	.word	0x2000023e
 8004244:	20000246 	.word	0x20000246
 8004248:	20000240 	.word	0x20000240
 800424c:	20000248 	.word	0x20000248
 8004250:	20000242 	.word	0x20000242
 8004254:	2000024a 	.word	0x2000024a
 8004258:	20000244 	.word	0x20000244
 800425c:	2000024c 	.word	0x2000024c
 8004260:	200004e4 	.word	0x200004e4
 8004264:	200004f0 	.word	0x200004f0
 8004268:	200004e8 	.word	0x200004e8
 800426c:	200004f4 	.word	0x200004f4
 8004270:	200004d0 	.word	0x200004d0
 8004274:	200004d4 	.word	0x200004d4
 8004278:	200004c0 	.word	0x200004c0
 800427c:	200004cc 	.word	0x200004cc
 8004280:	20000320 	.word	0x20000320
 8004284:	20000328 	.word	0x20000328
 8004288:	20000238 	.word	0x20000238
 800428c:	cccccccd 	.word	0xcccccccd
 8004290:	20000520 	.word	0x20000520
 8004294:	20000234 	.word	0x20000234
 8004298:	20000528 	.word	0x20000528
 800429c:	20001c98 	.word	0x20001c98
 80042a0:	20003408 	.word	0x20003408
 80042a4:	20004b78 	.word	0x20004b78
 80042a8:	200062e8 	.word	0x200062e8
 80042ac:	20007a58 	.word	0x20007a58
 80042b0:	4a91      	ldr	r2, [pc, #580]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0x3828>)
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	4991      	ldr	r1, [pc, #580]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0x382c>)
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 80042bc:	4b90      	ldr	r3, [pc, #576]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a90      	ldr	r2, [pc, #576]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0x3834>)
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	4990      	ldr	r1, [pc, #576]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x3838>)
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 80042cc:	4b8c      	ldr	r3, [pc, #560]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a8e      	ldr	r2, [pc, #568]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x383c>)
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	498e      	ldr	r1, [pc, #568]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0x3840>)
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	601a      	str	r2, [r3, #0]
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 80042dc:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a8c      	ldr	r2, [pc, #560]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0x3844>)
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	498c      	ldr	r1, [pc, #560]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0x3848>)
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 80042ec:	4b84      	ldr	r3, [pc, #528]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a8a      	ldr	r2, [pc, #552]	; (800451c <HAL_TIM_PeriodElapsedCallback+0x384c>)
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	498a      	ldr	r1, [pc, #552]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x3850>)
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 80042fc:	4b80      	ldr	r3, [pc, #512]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a88      	ldr	r2, [pc, #544]	; (8004524 <HAL_TIM_PeriodElapsedCallback+0x3854>)
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4988      	ldr	r1, [pc, #544]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0x3858>)
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 800430c:	4b7c      	ldr	r3, [pc, #496]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a86      	ldr	r2, [pc, #536]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x385c>)
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	4986      	ldr	r1, [pc, #536]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x3860>)
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	601a      	str	r2, [r3, #0]
          ddtheta1_res_SRAM[i_save] = ddtheta1_res;
 800431c:	4b78      	ldr	r3, [pc, #480]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a84      	ldr	r2, [pc, #528]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x3864>)
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4984      	ldr	r1, [pc, #528]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x3868>)
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	601a      	str	r2, [r3, #0]
          ddtheta2_res_SRAM[i_save] = ddtheta2_res;
 800432c:	4b74      	ldr	r3, [pc, #464]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a82      	ldr	r2, [pc, #520]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x386c>)
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	4982      	ldr	r1, [pc, #520]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x3870>)
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	601a      	str	r2, [r3, #0]
          ddtheta3_res_SRAM[i_save] = ddtheta3_res;
 800433c:	4b70      	ldr	r3, [pc, #448]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x3874>)
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	4980      	ldr	r1, [pc, #512]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x3878>)
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	601a      	str	r2, [r3, #0]
          ddtheta4_res_SRAM[i_save] = ddtheta4_res;
 800434c:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7e      	ldr	r2, [pc, #504]	; (800454c <HAL_TIM_PeriodElapsedCallback+0x387c>)
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	497e      	ldr	r1, [pc, #504]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x3880>)
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x3884>)
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	497c      	ldr	r1, [pc, #496]	; (8004558 <HAL_TIM_PeriodElapsedCallback+0x3888>)
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 800436c:	4b64      	ldr	r3, [pc, #400]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7a      	ldr	r2, [pc, #488]	; (800455c <HAL_TIM_PeriodElapsedCallback+0x388c>)
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	497a      	ldr	r1, [pc, #488]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x3890>)
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 800437c:	4b60      	ldr	r3, [pc, #384]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a78      	ldr	r2, [pc, #480]	; (8004564 <HAL_TIM_PeriodElapsedCallback+0x3894>)
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4978      	ldr	r1, [pc, #480]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x3898>)
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 800438c:	4b5c      	ldr	r3, [pc, #368]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a76      	ldr	r2, [pc, #472]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x389c>)
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	4976      	ldr	r1, [pc, #472]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x38a0>)
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 800439c:	4b58      	ldr	r3, [pc, #352]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a74      	ldr	r2, [pc, #464]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x38a4>)
 80043a2:	8811      	ldrh	r1, [r2, #0]
 80043a4:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x38a8>)
 80043a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 80043aa:	4b55      	ldr	r3, [pc, #340]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x38ac>)
 80043b0:	8811      	ldrh	r1, [r2, #0]
 80043b2:	4a73      	ldr	r2, [pc, #460]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x38b0>)
 80043b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 80043b8:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a71      	ldr	r2, [pc, #452]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x38b4>)
 80043be:	8811      	ldrh	r1, [r2, #0]
 80043c0:	4a71      	ldr	r2, [pc, #452]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x38b8>)
 80043c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a70      	ldr	r2, [pc, #448]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x38bc>)
 80043cc:	8811      	ldrh	r1, [r2, #0]
 80043ce:	4a70      	ldr	r2, [pc, #448]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x38c0>)
 80043d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          fd1_ref_normal_SRAM[i_save] = fd1_ref_normal;
 80043d4:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6e      	ldr	r2, [pc, #440]	; (8004594 <HAL_TIM_PeriodElapsedCallback+0x38c4>)
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	496e      	ldr	r1, [pc, #440]	; (8004598 <HAL_TIM_PeriodElapsedCallback+0x38c8>)
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	601a      	str	r2, [r3, #0]
          fd1_ref_SRAM[i_save] = fd1_ref;
 80043e4:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a6c      	ldr	r2, [pc, #432]	; (800459c <HAL_TIM_PeriodElapsedCallback+0x38cc>)
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	496c      	ldr	r1, [pc, #432]	; (80045a0 <HAL_TIM_PeriodElapsedCallback+0x38d0>)
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	601a      	str	r2, [r3, #0]
          fd2_ref_normal_SRAM[i_save] = fd2_ref_normal;
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <HAL_TIM_PeriodElapsedCallback+0x38d4>)
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	496a      	ldr	r1, [pc, #424]	; (80045a8 <HAL_TIM_PeriodElapsedCallback+0x38d8>)
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	601a      	str	r2, [r3, #0]
          fd2_ref_SRAM[i_save] = fd2_ref;
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <HAL_TIM_PeriodElapsedCallback+0x38dc>)
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4968      	ldr	r1, [pc, #416]	; (80045b0 <HAL_TIM_PeriodElapsedCallback+0x38e0>)
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	601a      	str	r2, [r3, #0]
          fd3_ref_normal_SRAM[i_save] = fd3_ref_normal;
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a66      	ldr	r2, [pc, #408]	; (80045b4 <HAL_TIM_PeriodElapsedCallback+0x38e4>)
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	4966      	ldr	r1, [pc, #408]	; (80045b8 <HAL_TIM_PeriodElapsedCallback+0x38e8>)
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	601a      	str	r2, [r3, #0]
          fd3_ref_SRAM[i_save] = fd3_ref;
 8004424:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a64      	ldr	r2, [pc, #400]	; (80045bc <HAL_TIM_PeriodElapsedCallback+0x38ec>)
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	4964      	ldr	r1, [pc, #400]	; (80045c0 <HAL_TIM_PeriodElapsedCallback+0x38f0>)
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	601a      	str	r2, [r3, #0]
          fd4_ref_normal_SRAM[i_save] = fd4_ref_normal;
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a62      	ldr	r2, [pc, #392]	; (80045c4 <HAL_TIM_PeriodElapsedCallback+0x38f4>)
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	4962      	ldr	r1, [pc, #392]	; (80045c8 <HAL_TIM_PeriodElapsedCallback+0x38f8>)
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	601a      	str	r2, [r3, #0]
          fd4_ref_SRAM[i_save] = fd4_ref;
 8004444:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a60      	ldr	r2, [pc, #384]	; (80045cc <HAL_TIM_PeriodElapsedCallback+0x38fc>)
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	4960      	ldr	r1, [pc, #384]	; (80045d0 <HAL_TIM_PeriodElapsedCallback+0x3900>)
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	601a      	str	r2, [r3, #0]
          Ki_df_integral1_SRAM[i_save] = Ki_df_integral1;
 8004454:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5e      	ldr	r2, [pc, #376]	; (80045d4 <HAL_TIM_PeriodElapsedCallback+0x3904>)
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	495e      	ldr	r1, [pc, #376]	; (80045d8 <HAL_TIM_PeriodElapsedCallback+0x3908>)
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	601a      	str	r2, [r3, #0]
          Ki_df_integral2_SRAM[i_save] = Ki_df_integral2;
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5c      	ldr	r2, [pc, #368]	; (80045dc <HAL_TIM_PeriodElapsedCallback+0x390c>)
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	495c      	ldr	r1, [pc, #368]	; (80045e0 <HAL_TIM_PeriodElapsedCallback+0x3910>)
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	601a      	str	r2, [r3, #0]
          Ki_df_integral3_SRAM[i_save] = Ki_df_integral3;
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5a      	ldr	r2, [pc, #360]	; (80045e4 <HAL_TIM_PeriodElapsedCallback+0x3914>)
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	495a      	ldr	r1, [pc, #360]	; (80045e8 <HAL_TIM_PeriodElapsedCallback+0x3918>)
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	601a      	str	r2, [r3, #0]
          Ki_df_integral4_SRAM[i_save] = Ki_df_integral4;
 8004484:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_TIM_PeriodElapsedCallback+0x391c>)
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	4958      	ldr	r1, [pc, #352]	; (80045f0 <HAL_TIM_PeriodElapsedCallback+0x3920>)
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a56      	ldr	r2, [pc, #344]	; (80045f4 <HAL_TIM_PeriodElapsedCallback+0x3924>)
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4956      	ldr	r1, [pc, #344]	; (80045f8 <HAL_TIM_PeriodElapsedCallback+0x3928>)
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a54      	ldr	r2, [pc, #336]	; (80045fc <HAL_TIM_PeriodElapsedCallback+0x392c>)
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	4954      	ldr	r1, [pc, #336]	; (8004600 <HAL_TIM_PeriodElapsedCallback+0x3930>)
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_TIM_PeriodElapsedCallback+0x3934>)
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	4952      	ldr	r1, [pc, #328]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0x3938>)
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 80044c4:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a50      	ldr	r2, [pc, #320]	; (800460c <HAL_TIM_PeriodElapsedCallback+0x393c>)
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	4950      	ldr	r1, [pc, #320]	; (8004610 <HAL_TIM_PeriodElapsedCallback+0x3940>)
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a4e      	ldr	r2, [pc, #312]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x3944>)
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	494e      	ldr	r1, [pc, #312]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x3948>)
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x3830>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a4c      	ldr	r2, [pc, #304]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x394c>)
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	494c      	ldr	r1, [pc, #304]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e096      	b.n	8004624 <HAL_TIM_PeriodElapsedCallback+0x3954>
 80044f6:	bf00      	nop
 80044f8:	2000025c 	.word	0x2000025c
 80044fc:	200091c8 	.word	0x200091c8
 8004500:	20000520 	.word	0x20000520
 8004504:	20000260 	.word	0x20000260
 8004508:	2000a938 	.word	0x2000a938
 800450c:	20000264 	.word	0x20000264
 8004510:	2000c0a8 	.word	0x2000c0a8
 8004514:	200002b8 	.word	0x200002b8
 8004518:	2000d818 	.word	0x2000d818
 800451c:	200002bc 	.word	0x200002bc
 8004520:	2000ef88 	.word	0x2000ef88
 8004524:	200002c0 	.word	0x200002c0
 8004528:	200106f8 	.word	0x200106f8
 800452c:	200002c4 	.word	0x200002c4
 8004530:	20011e68 	.word	0x20011e68
 8004534:	20000298 	.word	0x20000298
 8004538:	200135d8 	.word	0x200135d8
 800453c:	2000029c 	.word	0x2000029c
 8004540:	20014d48 	.word	0x20014d48
 8004544:	200002a0 	.word	0x200002a0
 8004548:	200164b8 	.word	0x200164b8
 800454c:	200002a4 	.word	0x200002a4
 8004550:	20017c28 	.word	0x20017c28
 8004554:	200002e8 	.word	0x200002e8
 8004558:	20019398 	.word	0x20019398
 800455c:	200002ec 	.word	0x200002ec
 8004560:	2001ab08 	.word	0x2001ab08
 8004564:	200002f0 	.word	0x200002f0
 8004568:	2001c278 	.word	0x2001c278
 800456c:	200002f4 	.word	0x200002f4
 8004570:	2001d9e8 	.word	0x2001d9e8
 8004574:	20000308 	.word	0x20000308
 8004578:	2001f158 	.word	0x2001f158
 800457c:	2000030a 	.word	0x2000030a
 8004580:	2001fd10 	.word	0x2001fd10
 8004584:	2000030c 	.word	0x2000030c
 8004588:	200208c8 	.word	0x200208c8
 800458c:	2000030e 	.word	0x2000030e
 8004590:	20021480 	.word	0x20021480
 8004594:	20000360 	.word	0x20000360
 8004598:	20022038 	.word	0x20022038
 800459c:	20000350 	.word	0x20000350
 80045a0:	200237a8 	.word	0x200237a8
 80045a4:	20000364 	.word	0x20000364
 80045a8:	20024f18 	.word	0x20024f18
 80045ac:	20000354 	.word	0x20000354
 80045b0:	20026688 	.word	0x20026688
 80045b4:	20000368 	.word	0x20000368
 80045b8:	20027df8 	.word	0x20027df8
 80045bc:	20000358 	.word	0x20000358
 80045c0:	20029568 	.word	0x20029568
 80045c4:	2000036c 	.word	0x2000036c
 80045c8:	2002acd8 	.word	0x2002acd8
 80045cc:	2000035c 	.word	0x2000035c
 80045d0:	2002c448 	.word	0x2002c448
 80045d4:	20000370 	.word	0x20000370
 80045d8:	2002dbb8 	.word	0x2002dbb8
 80045dc:	20000374 	.word	0x20000374
 80045e0:	2002f328 	.word	0x2002f328
 80045e4:	20000378 	.word	0x20000378
 80045e8:	20030a98 	.word	0x20030a98
 80045ec:	2000037c 	.word	0x2000037c
 80045f0:	20032208 	.word	0x20032208
 80045f4:	20000390 	.word	0x20000390
 80045f8:	20033978 	.word	0x20033978
 80045fc:	20000394 	.word	0x20000394
 8004600:	200350e8 	.word	0x200350e8
 8004604:	20000398 	.word	0x20000398
 8004608:	20036858 	.word	0x20036858
 800460c:	2000039c 	.word	0x2000039c
 8004610:	20037fc8 	.word	0x20037fc8
 8004614:	200003c0 	.word	0x200003c0
 8004618:	20039738 	.word	0x20039738
 800461c:	200003c4 	.word	0x200003c4
 8004620:	2003aea8 	.word	0x2003aea8
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 8004624:	4b90      	ldr	r3, [pc, #576]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a90      	ldr	r2, [pc, #576]	; (800486c <HAL_TIM_PeriodElapsedCallback+0x3b9c>)
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	4990      	ldr	r1, [pc, #576]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x3ba0>)
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 8004634:	4b8c      	ldr	r3, [pc, #560]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a8e      	ldr	r2, [pc, #568]	; (8004874 <HAL_TIM_PeriodElapsedCallback+0x3ba4>)
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	498e      	ldr	r1, [pc, #568]	; (8004878 <HAL_TIM_PeriodElapsedCallback+0x3ba8>)
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	601a      	str	r2, [r3, #0]
          yaw_SRAM[i_save]   = yaw;//Euler.x;
 8004644:	4b88      	ldr	r3, [pc, #544]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a8c      	ldr	r2, [pc, #560]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x3bac>)
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	498c      	ldr	r1, [pc, #560]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x3bb0>)
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	601a      	str	r2, [r3, #0]
          roll_SRAM[i_save]  = roll;//Euler.y;
 8004654:	4b84      	ldr	r3, [pc, #528]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a8a      	ldr	r2, [pc, #552]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x3bb4>)
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	498a      	ldr	r1, [pc, #552]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x3bb8>)
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	601a      	str	r2, [r3, #0]
          pitch_SRAM[i_save] = pitch;//Euler.z;
 8004664:	4b80      	ldr	r3, [pc, #512]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a88      	ldr	r2, [pc, #544]	; (800488c <HAL_TIM_PeriodElapsedCallback+0x3bbc>)
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	4988      	ldr	r1, [pc, #544]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0x3bc0>)
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	601a      	str	r2, [r3, #0]
          yaw_rate_SRAM[i_save]   = yaw_rate;//Gyro.z;
 8004674:	4b7c      	ldr	r3, [pc, #496]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a86      	ldr	r2, [pc, #536]	; (8004894 <HAL_TIM_PeriodElapsedCallback+0x3bc4>)
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	4986      	ldr	r1, [pc, #536]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0x3bc8>)
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	601a      	str	r2, [r3, #0]
          roll_rate_SRAM[i_save]  = roll_rate;//Gyro.x;
 8004684:	4b78      	ldr	r3, [pc, #480]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a84      	ldr	r2, [pc, #528]	; (800489c <HAL_TIM_PeriodElapsedCallback+0x3bcc>)
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	4984      	ldr	r1, [pc, #528]	; (80048a0 <HAL_TIM_PeriodElapsedCallback+0x3bd0>)
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	601a      	str	r2, [r3, #0]
          pitch_rate_SRAM[i_save] = pitch_rate;//Gyro.y;
 8004694:	4b74      	ldr	r3, [pc, #464]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a82      	ldr	r2, [pc, #520]	; (80048a4 <HAL_TIM_PeriodElapsedCallback+0x3bd4>)
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4982      	ldr	r1, [pc, #520]	; (80048a8 <HAL_TIM_PeriodElapsedCallback+0x3bd8>)
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	601a      	str	r2, [r3, #0]
          Acc_x_SRAM[i_save] = Acc_x;//Acc.x;
 80046a4:	4b70      	ldr	r3, [pc, #448]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a80      	ldr	r2, [pc, #512]	; (80048ac <HAL_TIM_PeriodElapsedCallback+0x3bdc>)
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	4980      	ldr	r1, [pc, #512]	; (80048b0 <HAL_TIM_PeriodElapsedCallback+0x3be0>)
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	601a      	str	r2, [r3, #0]
          Acc_y_SRAM[i_save] = Acc_y;//Acc.y;
 80046b4:	4b6c      	ldr	r3, [pc, #432]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7e      	ldr	r2, [pc, #504]	; (80048b4 <HAL_TIM_PeriodElapsedCallback+0x3be4>)
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	497e      	ldr	r1, [pc, #504]	; (80048b8 <HAL_TIM_PeriodElapsedCallback+0x3be8>)
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	601a      	str	r2, [r3, #0]
          Acc_z_SRAM[i_save] = Acc_z;//Acc.z;
 80046c4:	4b68      	ldr	r3, [pc, #416]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7c      	ldr	r2, [pc, #496]	; (80048bc <HAL_TIM_PeriodElapsedCallback+0x3bec>)
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	497c      	ldr	r1, [pc, #496]	; (80048c0 <HAL_TIM_PeriodElapsedCallback+0x3bf0>)
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	601a      	str	r2, [r3, #0]
          Acc_x_correct_SRAM[i_save] = Acc_x_correct;
 80046d4:	4b64      	ldr	r3, [pc, #400]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a7a      	ldr	r2, [pc, #488]	; (80048c4 <HAL_TIM_PeriodElapsedCallback+0x3bf4>)
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	497a      	ldr	r1, [pc, #488]	; (80048c8 <HAL_TIM_PeriodElapsedCallback+0x3bf8>)
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	601a      	str	r2, [r3, #0]
          Acc_y_correct_SRAM[i_save] = Acc_y_correct;
 80046e4:	4b60      	ldr	r3, [pc, #384]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a78      	ldr	r2, [pc, #480]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x3bfc>)
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4978      	ldr	r1, [pc, #480]	; (80048d0 <HAL_TIM_PeriodElapsedCallback+0x3c00>)
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	601a      	str	r2, [r3, #0]
          Acc_z_correct_SRAM[i_save] = Acc_z_correct;
 80046f4:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a76      	ldr	r2, [pc, #472]	; (80048d4 <HAL_TIM_PeriodElapsedCallback+0x3c04>)
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	4976      	ldr	r1, [pc, #472]	; (80048d8 <HAL_TIM_PeriodElapsedCallback+0x3c08>)
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	601a      	str	r2, [r3, #0]
          Acc_x_LPF_SRAM[i_save] = Acc_x_LPF;
 8004704:	4b58      	ldr	r3, [pc, #352]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a74      	ldr	r2, [pc, #464]	; (80048dc <HAL_TIM_PeriodElapsedCallback+0x3c0c>)
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	4974      	ldr	r1, [pc, #464]	; (80048e0 <HAL_TIM_PeriodElapsedCallback+0x3c10>)
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	601a      	str	r2, [r3, #0]
          Acc_y_LPF_SRAM[i_save] = Acc_y_LPF;
 8004714:	4b54      	ldr	r3, [pc, #336]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a72      	ldr	r2, [pc, #456]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x3c14>)
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	4972      	ldr	r1, [pc, #456]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x3c18>)
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	601a      	str	r2, [r3, #0]
          d_yawrate_SRAM[i_save] = d_yawrate;
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a70      	ldr	r2, [pc, #448]	; (80048ec <HAL_TIM_PeriodElapsedCallback+0x3c1c>)
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	4970      	ldr	r1, [pc, #448]	; (80048f0 <HAL_TIM_PeriodElapsedCallback+0x3c20>)
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	601a      	str	r2, [r3, #0]
          ddx_dis_SRAM[i_save] = ddx_dis;
 8004734:	4b4c      	ldr	r3, [pc, #304]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a6e      	ldr	r2, [pc, #440]	; (80048f4 <HAL_TIM_PeriodElapsedCallback+0x3c24>)
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	496e      	ldr	r1, [pc, #440]	; (80048f8 <HAL_TIM_PeriodElapsedCallback+0x3c28>)
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	601a      	str	r2, [r3, #0]
          ddy_dis_SRAM[i_save] = ddy_dis;
 8004744:	4b48      	ldr	r3, [pc, #288]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6c      	ldr	r2, [pc, #432]	; (80048fc <HAL_TIM_PeriodElapsedCallback+0x3c2c>)
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	496c      	ldr	r1, [pc, #432]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x3c30>)
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	601a      	str	r2, [r3, #0]
          ddphi_dis_SRAM[i_save] = ddphi_dis;
 8004754:	4b44      	ldr	r3, [pc, #272]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6a      	ldr	r2, [pc, #424]	; (8004904 <HAL_TIM_PeriodElapsedCallback+0x3c34>)
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	496a      	ldr	r1, [pc, #424]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x3c38>)
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	601a      	str	r2, [r3, #0]
          M_YMO_SRAM[i_save] = M_YMO;
 8004764:	4b40      	ldr	r3, [pc, #256]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a68      	ldr	r2, [pc, #416]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x3c3c>)
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	4968      	ldr	r1, [pc, #416]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x3c40>)
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	601a      	str	r2, [r3, #0]
          alpha_1_SRAM[i_save] = alpha_1;
 8004774:	4b3c      	ldr	r3, [pc, #240]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a66      	ldr	r2, [pc, #408]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x3c44>)
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	4966      	ldr	r1, [pc, #408]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x3c48>)
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	601a      	str	r2, [r3, #0]
          alpha_2_SRAM[i_save] = alpha_2;
 8004784:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a64      	ldr	r2, [pc, #400]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x3c4c>)
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	4964      	ldr	r1, [pc, #400]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x3c50>)
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	601a      	str	r2, [r3, #0]
          alpha_3_SRAM[i_save] = alpha_3;
 8004794:	4b34      	ldr	r3, [pc, #208]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a62      	ldr	r2, [pc, #392]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x3c54>)
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	4962      	ldr	r1, [pc, #392]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x3c58>)
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	601a      	str	r2, [r3, #0]
          alpha_4_SRAM[i_save] = alpha_4;
 80047a4:	4b30      	ldr	r3, [pc, #192]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x3c5c>)
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	4960      	ldr	r1, [pc, #384]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x3c60>)
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	601a      	str	r2, [r3, #0]
          alpha_1_hat_SRAM[i_save] = alpha_1_hat;
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5e      	ldr	r2, [pc, #376]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0x3c64>)
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	495e      	ldr	r1, [pc, #376]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x3c68>)
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	601a      	str	r2, [r3, #0]
          alpha_2_hat_SRAM[i_save] = alpha_2_hat;
 80047c4:	4b28      	ldr	r3, [pc, #160]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5c      	ldr	r2, [pc, #368]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x3c6c>)
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	495c      	ldr	r1, [pc, #368]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0x3c70>)
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	601a      	str	r2, [r3, #0]
          alpha_3_hat_SRAM[i_save] = alpha_3_hat;
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5a      	ldr	r2, [pc, #360]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x3c74>)
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	495a      	ldr	r1, [pc, #360]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x3c78>)
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	601a      	str	r2, [r3, #0]
          alpha_4_hat_SRAM[i_save] = alpha_4_hat;
 80047e4:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a58      	ldr	r2, [pc, #352]	; (800494c <HAL_TIM_PeriodElapsedCallback+0x3c7c>)
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	4958      	ldr	r1, [pc, #352]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0x3c80>)
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	601a      	str	r2, [r3, #0]
          tan_beta_1_hat_SRAM[i_save] = tan_beta_1_hat;
 80047f4:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a56      	ldr	r2, [pc, #344]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x3c84>)
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	4956      	ldr	r1, [pc, #344]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0x3c88>)
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	601a      	str	r2, [r3, #0]
          tan_beta_2_hat_SRAM[i_save] = tan_beta_2_hat;
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_TIM_PeriodElapsedCallback+0x3c8c>)
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	4954      	ldr	r1, [pc, #336]	; (8004960 <HAL_TIM_PeriodElapsedCallback+0x3c90>)
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	601a      	str	r2, [r3, #0]
          tan_beta_3_hat_SRAM[i_save] = tan_beta_3_hat;
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_TIM_PeriodElapsedCallback+0x3c94>)
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	4952      	ldr	r1, [pc, #328]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x3c98>)
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	601a      	str	r2, [r3, #0]
          tan_beta_4_hat_SRAM[i_save] = tan_beta_4_hat;
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a50      	ldr	r2, [pc, #320]	; (800496c <HAL_TIM_PeriodElapsedCallback+0x3c9c>)
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	4950      	ldr	r1, [pc, #320]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0x3ca0>)
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	601a      	str	r2, [r3, #0]
          Kappa_1_SRAM[i_save] = Kappa_1;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a4e      	ldr	r2, [pc, #312]	; (8004974 <HAL_TIM_PeriodElapsedCallback+0x3ca4>)
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	494e      	ldr	r1, [pc, #312]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0x3ca8>)
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	601a      	str	r2, [r3, #0]
          Kappa_2_SRAM[i_save] = Kappa_2;
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a4c      	ldr	r2, [pc, #304]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x3cac>)
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	494c      	ldr	r1, [pc, #304]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0x3cb0>)
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	601a      	str	r2, [r3, #0]
          Kappa_3_SRAM[i_save] = Kappa_3;
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x3b98>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4a      	ldr	r2, [pc, #296]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x3cb4>)
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	494a      	ldr	r1, [pc, #296]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x3cb8>)
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e092      	b.n	800498c <HAL_TIM_PeriodElapsedCallback+0x3cbc>
 8004866:	bf00      	nop
 8004868:	20000520 	.word	0x20000520
 800486c:	200003c8 	.word	0x200003c8
 8004870:	2003c618 	.word	0x2003c618
 8004874:	200003cc 	.word	0x200003cc
 8004878:	2003dd88 	.word	0x2003dd88
 800487c:	200004ac 	.word	0x200004ac
 8004880:	2003f4f8 	.word	0x2003f4f8
 8004884:	200004b0 	.word	0x200004b0
 8004888:	20040c68 	.word	0x20040c68
 800488c:	200004b4 	.word	0x200004b4
 8004890:	200423d8 	.word	0x200423d8
 8004894:	200004c0 	.word	0x200004c0
 8004898:	20043b48 	.word	0x20043b48
 800489c:	200004c4 	.word	0x200004c4
 80048a0:	200452b8 	.word	0x200452b8
 80048a4:	200004c8 	.word	0x200004c8
 80048a8:	20046a28 	.word	0x20046a28
 80048ac:	200004d8 	.word	0x200004d8
 80048b0:	20048198 	.word	0x20048198
 80048b4:	200004dc 	.word	0x200004dc
 80048b8:	20049908 	.word	0x20049908
 80048bc:	200004e0 	.word	0x200004e0
 80048c0:	2004b078 	.word	0x2004b078
 80048c4:	200004e4 	.word	0x200004e4
 80048c8:	2004c7e8 	.word	0x2004c7e8
 80048cc:	200004e8 	.word	0x200004e8
 80048d0:	2004df58 	.word	0x2004df58
 80048d4:	200004ec 	.word	0x200004ec
 80048d8:	2004f6c8 	.word	0x2004f6c8
 80048dc:	200004f8 	.word	0x200004f8
 80048e0:	20050e38 	.word	0x20050e38
 80048e4:	200004fc 	.word	0x200004fc
 80048e8:	200525a8 	.word	0x200525a8
 80048ec:	200004d0 	.word	0x200004d0
 80048f0:	20053d18 	.word	0x20053d18
 80048f4:	20000508 	.word	0x20000508
 80048f8:	20055488 	.word	0x20055488
 80048fc:	2000050c 	.word	0x2000050c
 8004900:	20056bf8 	.word	0x20056bf8
 8004904:	20000510 	.word	0x20000510
 8004908:	20058368 	.word	0x20058368
 800490c:	20000518 	.word	0x20000518
 8004910:	20059ad8 	.word	0x20059ad8
 8004914:	2000042c 	.word	0x2000042c
 8004918:	2005b248 	.word	0x2005b248
 800491c:	20000430 	.word	0x20000430
 8004920:	2005c9b8 	.word	0x2005c9b8
 8004924:	20000434 	.word	0x20000434
 8004928:	2005e128 	.word	0x2005e128
 800492c:	20000438 	.word	0x20000438
 8004930:	2005f898 	.word	0x2005f898
 8004934:	2000045c 	.word	0x2000045c
 8004938:	20061008 	.word	0x20061008
 800493c:	20000460 	.word	0x20000460
 8004940:	20062778 	.word	0x20062778
 8004944:	20000464 	.word	0x20000464
 8004948:	20063ee8 	.word	0x20063ee8
 800494c:	20000468 	.word	0x20000468
 8004950:	20065658 	.word	0x20065658
 8004954:	2000047c 	.word	0x2000047c
 8004958:	20066dc8 	.word	0x20066dc8
 800495c:	20000480 	.word	0x20000480
 8004960:	20068538 	.word	0x20068538
 8004964:	20000484 	.word	0x20000484
 8004968:	20069ca8 	.word	0x20069ca8
 800496c:	20000488 	.word	0x20000488
 8004970:	2006b418 	.word	0x2006b418
 8004974:	2000049c 	.word	0x2000049c
 8004978:	2006cb88 	.word	0x2006cb88
 800497c:	200004a0 	.word	0x200004a0
 8004980:	2006e2f8 	.word	0x2006e2f8
 8004984:	200004a4 	.word	0x200004a4
 8004988:	2006fa68 	.word	0x2006fa68
          Kappa_4_SRAM[i_save] = Kappa_4;
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x3d08>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a12      	ldr	r2, [pc, #72]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x3d0c>)
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	4912      	ldr	r1, [pc, #72]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x3d10>)
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	601a      	str	r2, [r3, #0]
          i_save++;
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x3d08>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x3d08>)
 80049a4:	6013      	str	r3, [r2, #0]
        loop = loop + 1;
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x3d14>)
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x3d14>)
 80049b0:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x3d18>)
 80049b4:	edd3 7a00 	vldr	s15, [r3]
 80049b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80049ec <HAL_TIM_PeriodElapsedCallback+0x3d1c>
 80049bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x3d18>)
 80049c2:	edc3 7a00 	vstr	s15, [r3]
        break;
 80049c6:	e000      	b.n	80049ca <HAL_TIM_PeriodElapsedCallback+0x3cfa>
        break;
 80049c8:	bf00      	nop
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	ecbd 8b04 	vpop	{d8-d9}
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000520 	.word	0x20000520
 80049dc:	200004a8 	.word	0x200004a8
 80049e0:	200711d8 	.word	0x200711d8
 80049e4:	20000238 	.word	0x20000238
 80049e8:	20000234 	.word	0x20000234
 80049ec:	3a83126f 	.word	0x3a83126f

080049f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a00:	f040 85d1 	bne.w	80055a6 <HAL_GPIO_EXTI_Callback+0xbb6>
		// if(mode == 0){
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }
    if( t == 0.0 || t > t_experiment ){// 14.999
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8004a06:	edd3 7a00 	vldr	s15, [r3]
 8004a0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d009      	beq.n	8004a28 <HAL_GPIO_EXTI_Callback+0x38>
 8004a14:	4b5d      	ldr	r3, [pc, #372]	; (8004b8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8004a16:	edd3 7a00 	vldr	s15, [r3]
 8004a1a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	dd05      	ble.n	8004a34 <HAL_GPIO_EXTI_Callback+0x44>
		  mode++;
 8004a28:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	4b57      	ldr	r3, [pc, #348]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004a32:	701a      	strb	r2, [r3, #0]
    }
		// printf("%d, ", mode);
		// printf("\r\n");

    divide = mode % 3;
 8004a34:	4b56      	ldr	r3, [pc, #344]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8004a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3e:	0859      	lsrs	r1, r3, #1
 8004a40:	460b      	mov	r3, r1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	440b      	add	r3, r1
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004a4c:	701a      	strb	r2, [r3, #0]

    switch(divide){
 8004a4e:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d00f      	beq.n	8004a76 <HAL_GPIO_EXTI_Callback+0x86>
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d018      	beq.n	8004a8c <HAL_GPIO_EXTI_Callback+0x9c>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d127      	bne.n	8004aae <HAL_GPIO_EXTI_Callback+0xbe>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a64:	484d      	ldr	r0, [pc, #308]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004a66:	f002 fa85 	bl	8006f74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	484b      	ldr	r0, [pc, #300]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004a70:	f002 fa80 	bl	8006f74 <HAL_GPIO_WritePin>
        break;
 8004a74:	e01b      	b.n	8004aae <HAL_GPIO_EXTI_Callback+0xbe>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4848      	ldr	r0, [pc, #288]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004a7c:	f002 fa7a 	bl	8006f74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 8004a80:	2201      	movs	r2, #1
 8004a82:	2180      	movs	r1, #128	; 0x80
 8004a84:	4845      	ldr	r0, [pc, #276]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004a86:	f002 fa75 	bl	8006f74 <HAL_GPIO_WritePin>
        break;
 8004a8a:	e010      	b.n	8004aae <HAL_GPIO_EXTI_Callback+0xbe>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4842      	ldr	r0, [pc, #264]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004a92:	f002 fa6f 	bl	8006f74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	4840      	ldr	r0, [pc, #256]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004a9c:	f002 fa6a 	bl	8006f74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004aa6:	483d      	ldr	r0, [pc, #244]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004aa8:	f002 fa64 	bl	8006f74 <HAL_GPIO_WritePin>
        break;
 8004aac:	bf00      	nop
    }

    switch(mode){
 8004aae:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d004      	beq.n	8004ac0 <HAL_GPIO_EXTI_Callback+0xd0>
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d03f      	beq.n	8004b3a <HAL_GPIO_EXTI_Callback+0x14a>
 8004aba:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 8004abc:	f000 bd73 	b.w	80055a6 <HAL_GPIO_EXTI_Callback+0xbb6>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        if( isFirst == 0 ){
 8004ac0:	4b37      	ldr	r3, [pc, #220]	; (8004ba0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f040 856d 	bne.w	80055a4 <HAL_GPIO_EXTI_Callback+0xbb4>
          tau_dfob1 = 0.0;
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
          tau_dfob2 = 0.0;
 8004ad2:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
          tau_dfob3 = 0.0;
 8004ada:	4b34      	ldr	r3, [pc, #208]	; (8004bac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
          tau_dfob4 = 0.0;
 8004ae2:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]

          tau_dfob1_pre = 0.0;
 8004aea:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 8004af2:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 8004afa:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 8004b02:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
          
          integral_tau_dfob1 = 0.0;
 8004b0a:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
          integral_tau_dfob2 = 0.0;
 8004b12:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_GPIO_EXTI_Callback+0x1cc>)
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
          integral_tau_dfob3 = 0.0;
 8004b1a:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
          integral_tau_dfob4 = 0.0;
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]

          isFirst++;
 8004b2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004b34:	701a      	strb	r2, [r3, #0]
        }


        break;
 8004b36:	f000 bd35 	b.w	80055a4 <HAL_GPIO_EXTI_Callback+0xbb4>
        // }
        // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
        // fprintf(outputfile, "abc");
        // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8004b3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b40:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8004b44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b48:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8004b4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b50:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8004b52:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8004b54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b58:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8004b5c:	881a      	ldrh	r2, [r3, #0]
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8004b66:	881a      	ldrh	r2, [r3, #0]
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <HAL_GPIO_EXTI_Callback+0x1ec>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8004b78:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8004b7a:	881a      	ldrh	r2, [r3, #0]
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <HAL_GPIO_EXTI_Callback+0x1ec>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f000 bd04 	b.w	8005594 <HAL_GPIO_EXTI_Callback+0xba4>
 8004b8c:	20000234 	.word	0x20000234
 8004b90:	2000023a 	.word	0x2000023a
 8004b94:	aaaaaaab 	.word	0xaaaaaaab
 8004b98:	2000023b 	.word	0x2000023b
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	2000023c 	.word	0x2000023c
 8004ba4:	200003c0 	.word	0x200003c0
 8004ba8:	200003c4 	.word	0x200003c4
 8004bac:	200003c8 	.word	0x200003c8
 8004bb0:	200003cc 	.word	0x200003cc
 8004bb4:	200003d0 	.word	0x200003d0
 8004bb8:	200003e0 	.word	0x200003e0
 8004bbc:	200003e4 	.word	0x200003e4
 8004bc0:	200003e8 	.word	0x200003e8
 8004bc4:	200003ec 	.word	0x200003ec
 8004bc8:	20000308 	.word	0x20000308
 8004bcc:	2000030a 	.word	0x2000030a
 8004bd0:	2000030c 	.word	0x2000030c
 8004bd4:	2000030e 	.word	0x2000030e
 8004bd8:	20072eb4 	.word	0x20072eb4
 8004bdc:	20072f98 	.word	0x20072f98
 8004be0:	20000524 	.word	0x20000524
          printf("%d, ", i_output);
 8004be4:	4bc2      	ldr	r3, [pc, #776]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	48c2      	ldr	r0, [pc, #776]	; (8004ef4 <HAL_GPIO_EXTI_Callback+0x504>)
 8004bec:	f006 fea4 	bl	800b938 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 8004bf0:	4bbf      	ldr	r3, [pc, #764]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4ac0      	ldr	r2, [pc, #768]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x508>)
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	edd3 7a00 	vldr	s15, [r3]
 8004bfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c02:	ec53 2b17 	vmov	r2, r3, d7
 8004c06:	48bd      	ldr	r0, [pc, #756]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004c08:	f006 fe96 	bl	800b938 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 8004c0c:	4bb8      	ldr	r3, [pc, #736]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4abb      	ldr	r2, [pc, #748]	; (8004f00 <HAL_GPIO_EXTI_Callback+0x510>)
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	edd3 7a00 	vldr	s15, [r3]
 8004c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c1e:	ec53 2b17 	vmov	r2, r3, d7
 8004c22:	48b6      	ldr	r0, [pc, #728]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004c24:	f006 fe88 	bl	800b938 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 8004c28:	4bb1      	ldr	r3, [pc, #708]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4ab5      	ldr	r2, [pc, #724]	; (8004f04 <HAL_GPIO_EXTI_Callback+0x514>)
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c3a:	ec53 2b17 	vmov	r2, r3, d7
 8004c3e:	48af      	ldr	r0, [pc, #700]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004c40:	f006 fe7a 	bl	800b938 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 8004c44:	4baa      	ldr	r3, [pc, #680]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4aaf      	ldr	r2, [pc, #700]	; (8004f08 <HAL_GPIO_EXTI_Callback+0x518>)
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c56:	ec53 2b17 	vmov	r2, r3, d7
 8004c5a:	48a8      	ldr	r0, [pc, #672]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004c5c:	f006 fe6c 	bl	800b938 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 8004c60:	4ba3      	ldr	r3, [pc, #652]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4aa9      	ldr	r2, [pc, #676]	; (8004f0c <HAL_GPIO_EXTI_Callback+0x51c>)
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c72:	ec53 2b17 	vmov	r2, r3, d7
 8004c76:	48a1      	ldr	r0, [pc, #644]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004c78:	f006 fe5e 	bl	800b938 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 8004c7c:	4b9c      	ldr	r3, [pc, #624]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4aa3      	ldr	r2, [pc, #652]	; (8004f10 <HAL_GPIO_EXTI_Callback+0x520>)
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c8e:	ec53 2b17 	vmov	r2, r3, d7
 8004c92:	489a      	ldr	r0, [pc, #616]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004c94:	f006 fe50 	bl	800b938 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 8004c98:	4b95      	ldr	r3, [pc, #596]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a9d      	ldr	r2, [pc, #628]	; (8004f14 <HAL_GPIO_EXTI_Callback+0x524>)
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	edd3 7a00 	vldr	s15, [r3]
 8004ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004caa:	ec53 2b17 	vmov	r2, r3, d7
 8004cae:	4893      	ldr	r0, [pc, #588]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004cb0:	f006 fe42 	bl	800b938 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 8004cb4:	4b8e      	ldr	r3, [pc, #568]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a97      	ldr	r2, [pc, #604]	; (8004f18 <HAL_GPIO_EXTI_Callback+0x528>)
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cc6:	ec53 2b17 	vmov	r2, r3, d7
 8004cca:	488c      	ldr	r0, [pc, #560]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004ccc:	f006 fe34 	bl	800b938 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 8004cd0:	4b87      	ldr	r3, [pc, #540]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a91      	ldr	r2, [pc, #580]	; (8004f1c <HAL_GPIO_EXTI_Callback+0x52c>)
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ce2:	ec53 2b17 	vmov	r2, r3, d7
 8004ce6:	4885      	ldr	r0, [pc, #532]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004ce8:	f006 fe26 	bl	800b938 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 8004cec:	4b80      	ldr	r3, [pc, #512]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a8b      	ldr	r2, [pc, #556]	; (8004f20 <HAL_GPIO_EXTI_Callback+0x530>)
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	edd3 7a00 	vldr	s15, [r3]
 8004cfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cfe:	ec53 2b17 	vmov	r2, r3, d7
 8004d02:	487e      	ldr	r0, [pc, #504]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004d04:	f006 fe18 	bl	800b938 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 8004d08:	4b79      	ldr	r3, [pc, #484]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a85      	ldr	r2, [pc, #532]	; (8004f24 <HAL_GPIO_EXTI_Callback+0x534>)
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	edd3 7a00 	vldr	s15, [r3]
 8004d16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d1a:	ec53 2b17 	vmov	r2, r3, d7
 8004d1e:	4877      	ldr	r0, [pc, #476]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004d20:	f006 fe0a 	bl	800b938 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 8004d24:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a7f      	ldr	r2, [pc, #508]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x538>)
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	edd3 7a00 	vldr	s15, [r3]
 8004d32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d36:	ec53 2b17 	vmov	r2, r3, d7
 8004d3a:	4870      	ldr	r0, [pc, #448]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004d3c:	f006 fdfc 	bl	800b938 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 8004d40:	4b6b      	ldr	r3, [pc, #428]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a79      	ldr	r2, [pc, #484]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x53c>)
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	edd3 7a00 	vldr	s15, [r3]
 8004d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d52:	ec53 2b17 	vmov	r2, r3, d7
 8004d56:	4869      	ldr	r0, [pc, #420]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004d58:	f006 fdee 	bl	800b938 <iprintf>

          printf("%f, ", ddtheta1_res_SRAM[i_output]);
 8004d5c:	4b64      	ldr	r3, [pc, #400]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a73      	ldr	r2, [pc, #460]	; (8004f30 <HAL_GPIO_EXTI_Callback+0x540>)
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	edd3 7a00 	vldr	s15, [r3]
 8004d6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d6e:	ec53 2b17 	vmov	r2, r3, d7
 8004d72:	4862      	ldr	r0, [pc, #392]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004d74:	f006 fde0 	bl	800b938 <iprintf>
          printf("%f, ", ddtheta2_res_SRAM[i_output]);
 8004d78:	4b5d      	ldr	r3, [pc, #372]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6d      	ldr	r2, [pc, #436]	; (8004f34 <HAL_GPIO_EXTI_Callback+0x544>)
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	edd3 7a00 	vldr	s15, [r3]
 8004d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d8a:	ec53 2b17 	vmov	r2, r3, d7
 8004d8e:	485b      	ldr	r0, [pc, #364]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004d90:	f006 fdd2 	bl	800b938 <iprintf>
          printf("%f, ", ddtheta3_res_SRAM[i_output]);
 8004d94:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a67      	ldr	r2, [pc, #412]	; (8004f38 <HAL_GPIO_EXTI_Callback+0x548>)
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	edd3 7a00 	vldr	s15, [r3]
 8004da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004da6:	ec53 2b17 	vmov	r2, r3, d7
 8004daa:	4854      	ldr	r0, [pc, #336]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004dac:	f006 fdc4 	bl	800b938 <iprintf>
          printf("%f, ", ddtheta4_res_SRAM[i_output]);
 8004db0:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a61      	ldr	r2, [pc, #388]	; (8004f3c <HAL_GPIO_EXTI_Callback+0x54c>)
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	edd3 7a00 	vldr	s15, [r3]
 8004dbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dc2:	ec53 2b17 	vmov	r2, r3, d7
 8004dc6:	484d      	ldr	r0, [pc, #308]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004dc8:	f006 fdb6 	bl	800b938 <iprintf>
          // printf("%f, ", i1_ref_SRAM[i_output]);
          // printf("%f, ", i2_ref_SRAM[i_output]);
          // printf("%f, ", i3_ref_SRAM[i_output]);
          // printf("%f, ", i4_ref_SRAM[i_output]);

          printf("%f, ", ia1_ref_SRAM[i_output]);
 8004dcc:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5b      	ldr	r2, [pc, #364]	; (8004f40 <HAL_GPIO_EXTI_Callback+0x550>)
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	edd3 7a00 	vldr	s15, [r3]
 8004dda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dde:	ec53 2b17 	vmov	r2, r3, d7
 8004de2:	4846      	ldr	r0, [pc, #280]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004de4:	f006 fda8 	bl	800b938 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a55      	ldr	r2, [pc, #340]	; (8004f44 <HAL_GPIO_EXTI_Callback+0x554>)
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dfa:	ec53 2b17 	vmov	r2, r3, d7
 8004dfe:	483f      	ldr	r0, [pc, #252]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004e00:	f006 fd9a 	bl	800b938 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 8004e04:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a4f      	ldr	r2, [pc, #316]	; (8004f48 <HAL_GPIO_EXTI_Callback+0x558>)
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	edd3 7a00 	vldr	s15, [r3]
 8004e12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e16:	ec53 2b17 	vmov	r2, r3, d7
 8004e1a:	4838      	ldr	r0, [pc, #224]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004e1c:	f006 fd8c 	bl	800b938 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 8004e20:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a49      	ldr	r2, [pc, #292]	; (8004f4c <HAL_GPIO_EXTI_Callback+0x55c>)
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	edd3 7a00 	vldr	s15, [r3]
 8004e2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e32:	ec53 2b17 	vmov	r2, r3, d7
 8004e36:	4831      	ldr	r0, [pc, #196]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004e38:	f006 fd7e 	bl	800b938 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a43      	ldr	r2, [pc, #268]	; (8004f50 <HAL_GPIO_EXTI_Callback+0x560>)
 8004e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e46:	4619      	mov	r1, r3
 8004e48:	482a      	ldr	r0, [pc, #168]	; (8004ef4 <HAL_GPIO_EXTI_Callback+0x504>)
 8004e4a:	f006 fd75 	bl	800b938 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a40      	ldr	r2, [pc, #256]	; (8004f54 <HAL_GPIO_EXTI_Callback+0x564>)
 8004e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4826      	ldr	r0, [pc, #152]	; (8004ef4 <HAL_GPIO_EXTI_Callback+0x504>)
 8004e5c:	f006 fd6c 	bl	800b938 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <HAL_GPIO_EXTI_Callback+0x568>)
 8004e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4821      	ldr	r0, [pc, #132]	; (8004ef4 <HAL_GPIO_EXTI_Callback+0x504>)
 8004e6e:	f006 fd63 	bl	800b938 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 8004e72:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a39      	ldr	r2, [pc, #228]	; (8004f5c <HAL_GPIO_EXTI_Callback+0x56c>)
 8004e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	481d      	ldr	r0, [pc, #116]	; (8004ef4 <HAL_GPIO_EXTI_Callback+0x504>)
 8004e80:	f006 fd5a 	bl	800b938 <iprintf>

          printf("%f, ", fd1_ref_normal_SRAM[i_output]);
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a35      	ldr	r2, [pc, #212]	; (8004f60 <HAL_GPIO_EXTI_Callback+0x570>)
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	edd3 7a00 	vldr	s15, [r3]
 8004e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e96:	ec53 2b17 	vmov	r2, r3, d7
 8004e9a:	4818      	ldr	r0, [pc, #96]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004e9c:	f006 fd4c 	bl	800b938 <iprintf>
          printf("%f, ", fd1_ref_SRAM[i_output]);
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_GPIO_EXTI_Callback+0x574>)
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004eb2:	ec53 2b17 	vmov	r2, r3, d7
 8004eb6:	4811      	ldr	r0, [pc, #68]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004eb8:	f006 fd3e 	bl	800b938 <iprintf>
          
          printf("%f, ", fd2_ref_normal_SRAM[i_output]);
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <HAL_GPIO_EXTI_Callback+0x578>)
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ece:	ec53 2b17 	vmov	r2, r3, d7
 8004ed2:	480a      	ldr	r0, [pc, #40]	; (8004efc <HAL_GPIO_EXTI_Callback+0x50c>)
 8004ed4:	f006 fd30 	bl	800b938 <iprintf>
          printf("%f, ", fd2_ref_SRAM[i_output]);
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a23      	ldr	r2, [pc, #140]	; (8004f6c <HAL_GPIO_EXTI_Callback+0x57c>)
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	edd3 7a00 	vldr	s15, [r3]
 8004ee6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004eea:	ec53 2b17 	vmov	r2, r3, d7
 8004eee:	e03f      	b.n	8004f70 <HAL_GPIO_EXTI_Callback+0x580>
 8004ef0:	20000524 	.word	0x20000524
 8004ef4:	0800e85c 	.word	0x0800e85c
 8004ef8:	20000528 	.word	0x20000528
 8004efc:	0800e864 	.word	0x0800e864
 8004f00:	20001c98 	.word	0x20001c98
 8004f04:	20003408 	.word	0x20003408
 8004f08:	20004b78 	.word	0x20004b78
 8004f0c:	200062e8 	.word	0x200062e8
 8004f10:	20007a58 	.word	0x20007a58
 8004f14:	200091c8 	.word	0x200091c8
 8004f18:	2000a938 	.word	0x2000a938
 8004f1c:	2000c0a8 	.word	0x2000c0a8
 8004f20:	2000d818 	.word	0x2000d818
 8004f24:	2000ef88 	.word	0x2000ef88
 8004f28:	200106f8 	.word	0x200106f8
 8004f2c:	20011e68 	.word	0x20011e68
 8004f30:	200135d8 	.word	0x200135d8
 8004f34:	20014d48 	.word	0x20014d48
 8004f38:	200164b8 	.word	0x200164b8
 8004f3c:	20017c28 	.word	0x20017c28
 8004f40:	20019398 	.word	0x20019398
 8004f44:	2001ab08 	.word	0x2001ab08
 8004f48:	2001c278 	.word	0x2001c278
 8004f4c:	2001d9e8 	.word	0x2001d9e8
 8004f50:	2001f158 	.word	0x2001f158
 8004f54:	2001fd10 	.word	0x2001fd10
 8004f58:	200208c8 	.word	0x200208c8
 8004f5c:	20021480 	.word	0x20021480
 8004f60:	20022038 	.word	0x20022038
 8004f64:	200237a8 	.word	0x200237a8
 8004f68:	20024f18 	.word	0x20024f18
 8004f6c:	20026688 	.word	0x20026688
 8004f70:	48c5      	ldr	r0, [pc, #788]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8004f72:	f006 fce1 	bl	800b938 <iprintf>

          printf("%f, ", fd3_ref_normal_SRAM[i_output]);
 8004f76:	4bc5      	ldr	r3, [pc, #788]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4ac5      	ldr	r2, [pc, #788]	; (8005290 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	edd3 7a00 	vldr	s15, [r3]
 8004f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f88:	ec53 2b17 	vmov	r2, r3, d7
 8004f8c:	48be      	ldr	r0, [pc, #760]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8004f8e:	f006 fcd3 	bl	800b938 <iprintf>
          printf("%f, ", fd3_ref_SRAM[i_output]);
 8004f92:	4bbe      	ldr	r3, [pc, #760]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4abf      	ldr	r2, [pc, #764]	; (8005294 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	edd3 7a00 	vldr	s15, [r3]
 8004fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fa4:	ec53 2b17 	vmov	r2, r3, d7
 8004fa8:	48b7      	ldr	r0, [pc, #732]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8004faa:	f006 fcc5 	bl	800b938 <iprintf>

          printf("%f, ", fd4_ref_normal_SRAM[i_output]);
 8004fae:	4bb7      	ldr	r3, [pc, #732]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4ab9      	ldr	r2, [pc, #740]	; (8005298 <HAL_GPIO_EXTI_Callback+0x8a8>)
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	edd3 7a00 	vldr	s15, [r3]
 8004fbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fc0:	ec53 2b17 	vmov	r2, r3, d7
 8004fc4:	48b0      	ldr	r0, [pc, #704]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8004fc6:	f006 fcb7 	bl	800b938 <iprintf>
          printf("%f, ", fd4_ref_SRAM[i_output]);
 8004fca:	4bb0      	ldr	r3, [pc, #704]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4ab3      	ldr	r2, [pc, #716]	; (800529c <HAL_GPIO_EXTI_Callback+0x8ac>)
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	edd3 7a00 	vldr	s15, [r3]
 8004fd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fdc:	ec53 2b17 	vmov	r2, r3, d7
 8004fe0:	48a9      	ldr	r0, [pc, #676]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8004fe2:	f006 fca9 	bl	800b938 <iprintf>
          
          printf("%f, ", Ki_df_integral1_SRAM[i_output]);
 8004fe6:	4ba9      	ldr	r3, [pc, #676]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4aad      	ldr	r2, [pc, #692]	; (80052a0 <HAL_GPIO_EXTI_Callback+0x8b0>)
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ff8:	ec53 2b17 	vmov	r2, r3, d7
 8004ffc:	48a2      	ldr	r0, [pc, #648]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8004ffe:	f006 fc9b 	bl	800b938 <iprintf>
          printf("%f, ", Ki_df_integral2_SRAM[i_output]);
 8005002:	4ba2      	ldr	r3, [pc, #648]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4aa7      	ldr	r2, [pc, #668]	; (80052a4 <HAL_GPIO_EXTI_Callback+0x8b4>)
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	edd3 7a00 	vldr	s15, [r3]
 8005010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005014:	ec53 2b17 	vmov	r2, r3, d7
 8005018:	489b      	ldr	r0, [pc, #620]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800501a:	f006 fc8d 	bl	800b938 <iprintf>
          printf("%f, ", Ki_df_integral3_SRAM[i_output]);
 800501e:	4b9b      	ldr	r3, [pc, #620]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4aa1      	ldr	r2, [pc, #644]	; (80052a8 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	edd3 7a00 	vldr	s15, [r3]
 800502c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005030:	ec53 2b17 	vmov	r2, r3, d7
 8005034:	4894      	ldr	r0, [pc, #592]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005036:	f006 fc7f 	bl	800b938 <iprintf>
          printf("%f, ", Ki_df_integral4_SRAM[i_output]);
 800503a:	4b94      	ldr	r3, [pc, #592]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a9b      	ldr	r2, [pc, #620]	; (80052ac <HAL_GPIO_EXTI_Callback+0x8bc>)
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	edd3 7a00 	vldr	s15, [r3]
 8005048:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800504c:	ec53 2b17 	vmov	r2, r3, d7
 8005050:	488d      	ldr	r0, [pc, #564]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005052:	f006 fc71 	bl	800b938 <iprintf>
          
          printf("%f, ", tau_dob1_SRAM[i_output]);
 8005056:	4b8d      	ldr	r3, [pc, #564]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a95      	ldr	r2, [pc, #596]	; (80052b0 <HAL_GPIO_EXTI_Callback+0x8c0>)
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005068:	ec53 2b17 	vmov	r2, r3, d7
 800506c:	4886      	ldr	r0, [pc, #536]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800506e:	f006 fc63 	bl	800b938 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 8005072:	4b86      	ldr	r3, [pc, #536]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a8f      	ldr	r2, [pc, #572]	; (80052b4 <HAL_GPIO_EXTI_Callback+0x8c4>)
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005084:	ec53 2b17 	vmov	r2, r3, d7
 8005088:	487f      	ldr	r0, [pc, #508]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800508a:	f006 fc55 	bl	800b938 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 800508e:	4b7f      	ldr	r3, [pc, #508]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a89      	ldr	r2, [pc, #548]	; (80052b8 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	edd3 7a00 	vldr	s15, [r3]
 800509c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050a0:	ec53 2b17 	vmov	r2, r3, d7
 80050a4:	4878      	ldr	r0, [pc, #480]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80050a6:	f006 fc47 	bl	800b938 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 80050aa:	4b78      	ldr	r3, [pc, #480]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a83      	ldr	r2, [pc, #524]	; (80052bc <HAL_GPIO_EXTI_Callback+0x8cc>)
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	edd3 7a00 	vldr	s15, [r3]
 80050b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050bc:	ec53 2b17 	vmov	r2, r3, d7
 80050c0:	4871      	ldr	r0, [pc, #452]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80050c2:	f006 fc39 	bl	800b938 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 80050c6:	4b71      	ldr	r3, [pc, #452]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7d      	ldr	r2, [pc, #500]	; (80052c0 <HAL_GPIO_EXTI_Callback+0x8d0>)
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	edd3 7a00 	vldr	s15, [r3]
 80050d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050d8:	ec53 2b17 	vmov	r2, r3, d7
 80050dc:	486a      	ldr	r0, [pc, #424]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80050de:	f006 fc2b 	bl	800b938 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 80050e2:	4b6a      	ldr	r3, [pc, #424]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a77      	ldr	r2, [pc, #476]	; (80052c4 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	edd3 7a00 	vldr	s15, [r3]
 80050f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050f4:	ec53 2b17 	vmov	r2, r3, d7
 80050f8:	4863      	ldr	r0, [pc, #396]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80050fa:	f006 fc1d 	bl	800b938 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 80050fe:	4b63      	ldr	r3, [pc, #396]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a71      	ldr	r2, [pc, #452]	; (80052c8 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	edd3 7a00 	vldr	s15, [r3]
 800510c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005110:	ec53 2b17 	vmov	r2, r3, d7
 8005114:	485c      	ldr	r0, [pc, #368]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005116:	f006 fc0f 	bl	800b938 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 800511a:	4b5c      	ldr	r3, [pc, #368]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6b      	ldr	r2, [pc, #428]	; (80052cc <HAL_GPIO_EXTI_Callback+0x8dc>)
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	edd3 7a00 	vldr	s15, [r3]
 8005128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800512c:	ec53 2b17 	vmov	r2, r3, d7
 8005130:	4855      	ldr	r0, [pc, #340]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005132:	f006 fc01 	bl	800b938 <iprintf>

          printf("%f, ", yaw_SRAM[i_output]);
 8005136:	4b55      	ldr	r3, [pc, #340]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a65      	ldr	r2, [pc, #404]	; (80052d0 <HAL_GPIO_EXTI_Callback+0x8e0>)
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	edd3 7a00 	vldr	s15, [r3]
 8005144:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005148:	ec53 2b17 	vmov	r2, r3, d7
 800514c:	484e      	ldr	r0, [pc, #312]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800514e:	f006 fbf3 	bl	800b938 <iprintf>
          printf("%f, ", roll_SRAM[i_output]);
 8005152:	4b4e      	ldr	r3, [pc, #312]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a5f      	ldr	r2, [pc, #380]	; (80052d4 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	edd3 7a00 	vldr	s15, [r3]
 8005160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005164:	ec53 2b17 	vmov	r2, r3, d7
 8005168:	4847      	ldr	r0, [pc, #284]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800516a:	f006 fbe5 	bl	800b938 <iprintf>
          printf("%f, ", pitch_SRAM[i_output]);
 800516e:	4b47      	ldr	r3, [pc, #284]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a59      	ldr	r2, [pc, #356]	; (80052d8 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	edd3 7a00 	vldr	s15, [r3]
 800517c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005180:	ec53 2b17 	vmov	r2, r3, d7
 8005184:	4840      	ldr	r0, [pc, #256]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005186:	f006 fbd7 	bl	800b938 <iprintf>

          printf("%f, ", yaw_rate_SRAM[i_output]);
 800518a:	4b40      	ldr	r3, [pc, #256]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a53      	ldr	r2, [pc, #332]	; (80052dc <HAL_GPIO_EXTI_Callback+0x8ec>)
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	edd3 7a00 	vldr	s15, [r3]
 8005198:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800519c:	ec53 2b17 	vmov	r2, r3, d7
 80051a0:	4839      	ldr	r0, [pc, #228]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80051a2:	f006 fbc9 	bl	800b938 <iprintf>
          // printf("%f, ", yaw_rate_notch_SRAM[i_output]);

          printf("%f, ", roll_rate_SRAM[i_output]);
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4d      	ldr	r2, [pc, #308]	; (80052e0 <HAL_GPIO_EXTI_Callback+0x8f0>)
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	edd3 7a00 	vldr	s15, [r3]
 80051b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051b8:	ec53 2b17 	vmov	r2, r3, d7
 80051bc:	4832      	ldr	r0, [pc, #200]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80051be:	f006 fbbb 	bl	800b938 <iprintf>
          printf("%f, ", pitch_rate_SRAM[i_output]);
 80051c2:	4b32      	ldr	r3, [pc, #200]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a47      	ldr	r2, [pc, #284]	; (80052e4 <HAL_GPIO_EXTI_Callback+0x8f4>)
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051d4:	ec53 2b17 	vmov	r2, r3, d7
 80051d8:	482b      	ldr	r0, [pc, #172]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80051da:	f006 fbad 	bl	800b938 <iprintf>

          printf("%f, ", Acc_x_SRAM[i_output]);
 80051de:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a41      	ldr	r2, [pc, #260]	; (80052e8 <HAL_GPIO_EXTI_Callback+0x8f8>)
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	edd3 7a00 	vldr	s15, [r3]
 80051ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051f0:	ec53 2b17 	vmov	r2, r3, d7
 80051f4:	4824      	ldr	r0, [pc, #144]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 80051f6:	f006 fb9f 	bl	800b938 <iprintf>
          printf("%f, ", Acc_y_SRAM[i_output]);
 80051fa:	4b24      	ldr	r3, [pc, #144]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a3b      	ldr	r2, [pc, #236]	; (80052ec <HAL_GPIO_EXTI_Callback+0x8fc>)
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	edd3 7a00 	vldr	s15, [r3]
 8005208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800520c:	ec53 2b17 	vmov	r2, r3, d7
 8005210:	481d      	ldr	r0, [pc, #116]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005212:	f006 fb91 	bl	800b938 <iprintf>
          printf("%f, ", Acc_z_SRAM[i_output]);
 8005216:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <HAL_GPIO_EXTI_Callback+0x900>)
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	edd3 7a00 	vldr	s15, [r3]
 8005224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005228:	ec53 2b17 	vmov	r2, r3, d7
 800522c:	4816      	ldr	r0, [pc, #88]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800522e:	f006 fb83 	bl	800b938 <iprintf>

          printf("%f, ", Acc_x_correct_SRAM[i_output]);
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <HAL_GPIO_EXTI_Callback+0x904>)
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	edd3 7a00 	vldr	s15, [r3]
 8005240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005244:	ec53 2b17 	vmov	r2, r3, d7
 8005248:	480f      	ldr	r0, [pc, #60]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 800524a:	f006 fb75 	bl	800b938 <iprintf>
          printf("%f, ", Acc_y_correct_SRAM[i_output]);
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a29      	ldr	r2, [pc, #164]	; (80052f8 <HAL_GPIO_EXTI_Callback+0x908>)
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	edd3 7a00 	vldr	s15, [r3]
 800525c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005260:	ec53 2b17 	vmov	r2, r3, d7
 8005264:	4808      	ldr	r0, [pc, #32]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005266:	f006 fb67 	bl	800b938 <iprintf>
          printf("%f, ", Acc_z_correct_SRAM[i_output]);
 800526a:	4b08      	ldr	r3, [pc, #32]	; (800528c <HAL_GPIO_EXTI_Callback+0x89c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a23      	ldr	r2, [pc, #140]	; (80052fc <HAL_GPIO_EXTI_Callback+0x90c>)
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	edd3 7a00 	vldr	s15, [r3]
 8005278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800527c:	ec53 2b17 	vmov	r2, r3, d7
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <HAL_GPIO_EXTI_Callback+0x898>)
 8005282:	f006 fb59 	bl	800b938 <iprintf>
 8005286:	e03b      	b.n	8005300 <HAL_GPIO_EXTI_Callback+0x910>
 8005288:	0800e864 	.word	0x0800e864
 800528c:	20000524 	.word	0x20000524
 8005290:	20027df8 	.word	0x20027df8
 8005294:	20029568 	.word	0x20029568
 8005298:	2002acd8 	.word	0x2002acd8
 800529c:	2002c448 	.word	0x2002c448
 80052a0:	2002dbb8 	.word	0x2002dbb8
 80052a4:	2002f328 	.word	0x2002f328
 80052a8:	20030a98 	.word	0x20030a98
 80052ac:	20032208 	.word	0x20032208
 80052b0:	20033978 	.word	0x20033978
 80052b4:	200350e8 	.word	0x200350e8
 80052b8:	20036858 	.word	0x20036858
 80052bc:	20037fc8 	.word	0x20037fc8
 80052c0:	20039738 	.word	0x20039738
 80052c4:	2003aea8 	.word	0x2003aea8
 80052c8:	2003c618 	.word	0x2003c618
 80052cc:	2003dd88 	.word	0x2003dd88
 80052d0:	2003f4f8 	.word	0x2003f4f8
 80052d4:	20040c68 	.word	0x20040c68
 80052d8:	200423d8 	.word	0x200423d8
 80052dc:	20043b48 	.word	0x20043b48
 80052e0:	200452b8 	.word	0x200452b8
 80052e4:	20046a28 	.word	0x20046a28
 80052e8:	20048198 	.word	0x20048198
 80052ec:	20049908 	.word	0x20049908
 80052f0:	2004b078 	.word	0x2004b078
 80052f4:	2004c7e8 	.word	0x2004c7e8
 80052f8:	2004df58 	.word	0x2004df58
 80052fc:	2004f6c8 	.word	0x2004f6c8

          printf("%f, ", Acc_x_LPF_SRAM[i_output]);
 8005300:	4bab      	ldr	r3, [pc, #684]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4aab      	ldr	r2, [pc, #684]	; (80055b4 <HAL_GPIO_EXTI_Callback+0xbc4>)
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	edd3 7a00 	vldr	s15, [r3]
 800530e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005312:	ec53 2b17 	vmov	r2, r3, d7
 8005316:	48a8      	ldr	r0, [pc, #672]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005318:	f006 fb0e 	bl	800b938 <iprintf>
          printf("%f, ", Acc_y_LPF_SRAM[i_output]);
 800531c:	4ba4      	ldr	r3, [pc, #656]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4aa6      	ldr	r2, [pc, #664]	; (80055bc <HAL_GPIO_EXTI_Callback+0xbcc>)
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	edd3 7a00 	vldr	s15, [r3]
 800532a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800532e:	ec53 2b17 	vmov	r2, r3, d7
 8005332:	48a1      	ldr	r0, [pc, #644]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005334:	f006 fb00 	bl	800b938 <iprintf>
          printf("%f, ", d_yawrate_SRAM[i_output]);
 8005338:	4b9d      	ldr	r3, [pc, #628]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4aa0      	ldr	r2, [pc, #640]	; (80055c0 <HAL_GPIO_EXTI_Callback+0xbd0>)
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	edd3 7a00 	vldr	s15, [r3]
 8005346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800534a:	ec53 2b17 	vmov	r2, r3, d7
 800534e:	489a      	ldr	r0, [pc, #616]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005350:	f006 faf2 	bl	800b938 <iprintf>

          // printf("%f, ", Fx_dis_SRAM[i_output]);
          // printf("%f, ", Fy_dis_SRAM[i_output]);
          // printf("%f, ", Mz_dis_SRAM[i_output]);

          printf("%f, ", ddx_dis_SRAM[i_output]);
 8005354:	4b96      	ldr	r3, [pc, #600]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a9a      	ldr	r2, [pc, #616]	; (80055c4 <HAL_GPIO_EXTI_Callback+0xbd4>)
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005366:	ec53 2b17 	vmov	r2, r3, d7
 800536a:	4893      	ldr	r0, [pc, #588]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 800536c:	f006 fae4 	bl	800b938 <iprintf>
          printf("%f, ", ddy_dis_SRAM[i_output]);
 8005370:	4b8f      	ldr	r3, [pc, #572]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a94      	ldr	r2, [pc, #592]	; (80055c8 <HAL_GPIO_EXTI_Callback+0xbd8>)
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	edd3 7a00 	vldr	s15, [r3]
 800537e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005382:	ec53 2b17 	vmov	r2, r3, d7
 8005386:	488c      	ldr	r0, [pc, #560]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005388:	f006 fad6 	bl	800b938 <iprintf>
          printf("%f, ", ddphi_dis_SRAM[i_output]);
 800538c:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a8e      	ldr	r2, [pc, #568]	; (80055cc <HAL_GPIO_EXTI_Callback+0xbdc>)
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	edd3 7a00 	vldr	s15, [r3]
 800539a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800539e:	ec53 2b17 	vmov	r2, r3, d7
 80053a2:	4885      	ldr	r0, [pc, #532]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80053a4:	f006 fac8 	bl	800b938 <iprintf>
          
          printf("%f, ", M_YMO_SRAM[i_output]);
 80053a8:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a88      	ldr	r2, [pc, #544]	; (80055d0 <HAL_GPIO_EXTI_Callback+0xbe0>)
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	edd3 7a00 	vldr	s15, [r3]
 80053b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053ba:	ec53 2b17 	vmov	r2, r3, d7
 80053be:	487e      	ldr	r0, [pc, #504]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80053c0:	f006 faba 	bl	800b938 <iprintf>

          printf("%f, ", alpha_1_SRAM[i_output]);
 80053c4:	4b7a      	ldr	r3, [pc, #488]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a82      	ldr	r2, [pc, #520]	; (80055d4 <HAL_GPIO_EXTI_Callback+0xbe4>)
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	edd3 7a00 	vldr	s15, [r3]
 80053d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053d6:	ec53 2b17 	vmov	r2, r3, d7
 80053da:	4877      	ldr	r0, [pc, #476]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80053dc:	f006 faac 	bl	800b938 <iprintf>
          printf("%f, ", alpha_2_SRAM[i_output]);
 80053e0:	4b73      	ldr	r3, [pc, #460]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a7c      	ldr	r2, [pc, #496]	; (80055d8 <HAL_GPIO_EXTI_Callback+0xbe8>)
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	edd3 7a00 	vldr	s15, [r3]
 80053ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053f2:	ec53 2b17 	vmov	r2, r3, d7
 80053f6:	4870      	ldr	r0, [pc, #448]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80053f8:	f006 fa9e 	bl	800b938 <iprintf>
          printf("%f, ", alpha_3_SRAM[i_output]);
 80053fc:	4b6c      	ldr	r3, [pc, #432]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a76      	ldr	r2, [pc, #472]	; (80055dc <HAL_GPIO_EXTI_Callback+0xbec>)
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	edd3 7a00 	vldr	s15, [r3]
 800540a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800540e:	ec53 2b17 	vmov	r2, r3, d7
 8005412:	4869      	ldr	r0, [pc, #420]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005414:	f006 fa90 	bl	800b938 <iprintf>
          printf("%f, ", alpha_4_SRAM[i_output]);
 8005418:	4b65      	ldr	r3, [pc, #404]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a70      	ldr	r2, [pc, #448]	; (80055e0 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	edd3 7a00 	vldr	s15, [r3]
 8005426:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800542a:	ec53 2b17 	vmov	r2, r3, d7
 800542e:	4862      	ldr	r0, [pc, #392]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005430:	f006 fa82 	bl	800b938 <iprintf>

          printf("%f, ", alpha_1_hat_SRAM[i_output]);
 8005434:	4b5e      	ldr	r3, [pc, #376]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a6a      	ldr	r2, [pc, #424]	; (80055e4 <HAL_GPIO_EXTI_Callback+0xbf4>)
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005446:	ec53 2b17 	vmov	r2, r3, d7
 800544a:	485b      	ldr	r0, [pc, #364]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 800544c:	f006 fa74 	bl	800b938 <iprintf>
          printf("%f, ", alpha_2_hat_SRAM[i_output]);
 8005450:	4b57      	ldr	r3, [pc, #348]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a64      	ldr	r2, [pc, #400]	; (80055e8 <HAL_GPIO_EXTI_Callback+0xbf8>)
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005462:	ec53 2b17 	vmov	r2, r3, d7
 8005466:	4854      	ldr	r0, [pc, #336]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005468:	f006 fa66 	bl	800b938 <iprintf>
          printf("%f, ", alpha_3_hat_SRAM[i_output]);
 800546c:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5e      	ldr	r2, [pc, #376]	; (80055ec <HAL_GPIO_EXTI_Callback+0xbfc>)
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	edd3 7a00 	vldr	s15, [r3]
 800547a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800547e:	ec53 2b17 	vmov	r2, r3, d7
 8005482:	484d      	ldr	r0, [pc, #308]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005484:	f006 fa58 	bl	800b938 <iprintf>
          printf("%f, ", alpha_4_hat_SRAM[i_output]);
 8005488:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a58      	ldr	r2, [pc, #352]	; (80055f0 <HAL_GPIO_EXTI_Callback+0xc00>)
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	edd3 7a00 	vldr	s15, [r3]
 8005496:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800549a:	ec53 2b17 	vmov	r2, r3, d7
 800549e:	4846      	ldr	r0, [pc, #280]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80054a0:	f006 fa4a 	bl	800b938 <iprintf>

          printf("%f, ", tan_beta_1_hat_SRAM[i_output]);
 80054a4:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a52      	ldr	r2, [pc, #328]	; (80055f4 <HAL_GPIO_EXTI_Callback+0xc04>)
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	edd3 7a00 	vldr	s15, [r3]
 80054b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054b6:	ec53 2b17 	vmov	r2, r3, d7
 80054ba:	483f      	ldr	r0, [pc, #252]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80054bc:	f006 fa3c 	bl	800b938 <iprintf>
          printf("%f, ", tan_beta_2_hat_SRAM[i_output]);
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a4c      	ldr	r2, [pc, #304]	; (80055f8 <HAL_GPIO_EXTI_Callback+0xc08>)
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	edd3 7a00 	vldr	s15, [r3]
 80054ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054d2:	ec53 2b17 	vmov	r2, r3, d7
 80054d6:	4838      	ldr	r0, [pc, #224]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80054d8:	f006 fa2e 	bl	800b938 <iprintf>
          printf("%f, ", tan_beta_3_hat_SRAM[i_output]);
 80054dc:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a46      	ldr	r2, [pc, #280]	; (80055fc <HAL_GPIO_EXTI_Callback+0xc0c>)
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	edd3 7a00 	vldr	s15, [r3]
 80054ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054ee:	ec53 2b17 	vmov	r2, r3, d7
 80054f2:	4831      	ldr	r0, [pc, #196]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 80054f4:	f006 fa20 	bl	800b938 <iprintf>
          printf("%f, ", tan_beta_4_hat_SRAM[i_output]);
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a40      	ldr	r2, [pc, #256]	; (8005600 <HAL_GPIO_EXTI_Callback+0xc10>)
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	edd3 7a00 	vldr	s15, [r3]
 8005506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800550a:	ec53 2b17 	vmov	r2, r3, d7
 800550e:	482a      	ldr	r0, [pc, #168]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005510:	f006 fa12 	bl	800b938 <iprintf>

          printf("%f, ", Kappa_1_SRAM[i_output]);
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a3a      	ldr	r2, [pc, #232]	; (8005604 <HAL_GPIO_EXTI_Callback+0xc14>)
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	edd3 7a00 	vldr	s15, [r3]
 8005522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005526:	ec53 2b17 	vmov	r2, r3, d7
 800552a:	4823      	ldr	r0, [pc, #140]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 800552c:	f006 fa04 	bl	800b938 <iprintf>
          printf("%f, ", Kappa_2_SRAM[i_output]);
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a34      	ldr	r2, [pc, #208]	; (8005608 <HAL_GPIO_EXTI_Callback+0xc18>)
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	edd3 7a00 	vldr	s15, [r3]
 800553e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005542:	ec53 2b17 	vmov	r2, r3, d7
 8005546:	481c      	ldr	r0, [pc, #112]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005548:	f006 f9f6 	bl	800b938 <iprintf>
          printf("%f, ", Kappa_3_SRAM[i_output]);
 800554c:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2e      	ldr	r2, [pc, #184]	; (800560c <HAL_GPIO_EXTI_Callback+0xc1c>)
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	edd3 7a00 	vldr	s15, [r3]
 800555a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800555e:	ec53 2b17 	vmov	r2, r3, d7
 8005562:	4815      	ldr	r0, [pc, #84]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005564:	f006 f9e8 	bl	800b938 <iprintf>
          printf("%f, ", Kappa_4_SRAM[i_output]);
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a28      	ldr	r2, [pc, #160]	; (8005610 <HAL_GPIO_EXTI_Callback+0xc20>)
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	edd3 7a00 	vldr	s15, [r3]
 8005576:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800557a:	ec53 2b17 	vmov	r2, r3, d7
 800557e:	480e      	ldr	r0, [pc, #56]	; (80055b8 <HAL_GPIO_EXTI_Callback+0xbc8>)
 8005580:	f006 f9da 	bl	800b938 <iprintf>
          printf("%f, ", v2_hat_acc_SRAM[i_output]);
          printf("%f, ", v3_hat_acc_SRAM[i_output]);
          printf("%f, ", v4_hat_acc_SRAM[i_output]);
          #endif

          printf("\r\n");
 8005584:	4823      	ldr	r0, [pc, #140]	; (8005614 <HAL_GPIO_EXTI_Callback+0xc24>)
 8005586:	f006 fa4b 	bl	800ba20 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3301      	adds	r3, #1
 8005590:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f240 52db 	movw	r2, #1499	; 0x5db
 800559c:	4293      	cmp	r3, r2
 800559e:	f77f ab21 	ble.w	8004be4 <HAL_GPIO_EXTI_Callback+0x1f4>
        }
        break;
 80055a2:	e000      	b.n	80055a6 <HAL_GPIO_EXTI_Callback+0xbb6>
        break;
 80055a4:	bf00      	nop
    }


	}
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000524 	.word	0x20000524
 80055b4:	20050e38 	.word	0x20050e38
 80055b8:	0800e864 	.word	0x0800e864
 80055bc:	200525a8 	.word	0x200525a8
 80055c0:	20053d18 	.word	0x20053d18
 80055c4:	20055488 	.word	0x20055488
 80055c8:	20056bf8 	.word	0x20056bf8
 80055cc:	20058368 	.word	0x20058368
 80055d0:	20059ad8 	.word	0x20059ad8
 80055d4:	2005b248 	.word	0x2005b248
 80055d8:	2005c9b8 	.word	0x2005c9b8
 80055dc:	2005e128 	.word	0x2005e128
 80055e0:	2005f898 	.word	0x2005f898
 80055e4:	20061008 	.word	0x20061008
 80055e8:	20062778 	.word	0x20062778
 80055ec:	20063ee8 	.word	0x20063ee8
 80055f0:	20065658 	.word	0x20065658
 80055f4:	20066dc8 	.word	0x20066dc8
 80055f8:	20068538 	.word	0x20068538
 80055fc:	20069ca8 	.word	0x20069ca8
 8005600:	2006b418 	.word	0x2006b418
 8005604:	2006cb88 	.word	0x2006cb88
 8005608:	2006e2f8 	.word	0x2006e2f8
 800560c:	2006fa68 	.word	0x2006fa68
 8005610:	200711d8 	.word	0x200711d8
 8005614:	0800e86c 	.word	0x0800e86c

08005618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800561c:	f001 f96f 	bl	80068fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005620:	f000 f8b8 	bl	8005794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005624:	f000 fc8a 	bl	8005f3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005628:	f000 fc2a 	bl	8005e80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800562c:	f000 fc58 	bl	8005ee0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8005630:	f000 f9e2 	bl	80059f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8005634:	f000 f986 	bl	8005944 <MX_TIM1_Init>
  MX_TIM3_Init();
 8005638:	f000 fa2c 	bl	8005a94 <MX_TIM3_Init>
  MX_TIM4_Init();
 800563c:	f000 fa80 	bl	8005b40 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005640:	f000 fb56 	bl	8005cf0 <MX_TIM8_Init>
  MX_TIM5_Init();
 8005644:	f000 fad2 	bl	8005bec <MX_TIM5_Init>
  MX_TIM9_Init();
 8005648:	f000 fbac 	bl	8005da4 <MX_TIM9_Init>
  MX_I2C1_Init();
 800564c:	f000 f93a 	bl	80058c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8005650:	483f      	ldr	r0, [pc, #252]	; (8005750 <main+0x138>)
 8005652:	f003 fc6d 	bl	8008f30 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8005656:	213c      	movs	r1, #60	; 0x3c
 8005658:	483e      	ldr	r0, [pc, #248]	; (8005754 <main+0x13c>)
 800565a:	f003 fd9f 	bl	800919c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800565e:	213c      	movs	r1, #60	; 0x3c
 8005660:	483d      	ldr	r0, [pc, #244]	; (8005758 <main+0x140>)
 8005662:	f003 fd9b 	bl	800919c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8005666:	213c      	movs	r1, #60	; 0x3c
 8005668:	483c      	ldr	r0, [pc, #240]	; (800575c <main+0x144>)
 800566a:	f003 fd97 	bl	800919c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800566e:	213c      	movs	r1, #60	; 0x3c
 8005670:	483b      	ldr	r0, [pc, #236]	; (8005760 <main+0x148>)
 8005672:	f003 fd93 	bl	800919c <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 8005676:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <main+0x14c>)
 8005678:	f9b3 2000 	ldrsh.w	r2, [r3]
 800567c:	4b3a      	ldr	r3, [pc, #232]	; (8005768 <main+0x150>)
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 8005680:	4b38      	ldr	r3, [pc, #224]	; (8005764 <main+0x14c>)
 8005682:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <main+0x154>)
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 800568a:	4b36      	ldr	r3, [pc, #216]	; (8005764 <main+0x14c>)
 800568c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005690:	4b37      	ldr	r3, [pc, #220]	; (8005770 <main+0x158>)
 8005692:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 8005694:	4b33      	ldr	r3, [pc, #204]	; (8005764 <main+0x14c>)
 8005696:	f9b3 2000 	ldrsh.w	r2, [r3]
 800569a:	4b36      	ldr	r3, [pc, #216]	; (8005774 <main+0x15c>)
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800569e:	2100      	movs	r1, #0
 80056a0:	4835      	ldr	r0, [pc, #212]	; (8005778 <main+0x160>)
 80056a2:	f003 fca5 	bl	8008ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80056a6:	210c      	movs	r1, #12
 80056a8:	4833      	ldr	r0, [pc, #204]	; (8005778 <main+0x160>)
 80056aa:	f003 fca1 	bl	8008ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80056ae:	2100      	movs	r1, #0
 80056b0:	4832      	ldr	r0, [pc, #200]	; (800577c <main+0x164>)
 80056b2:	f003 fc9d 	bl	8008ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80056b6:	2104      	movs	r1, #4
 80056b8:	4830      	ldr	r0, [pc, #192]	; (800577c <main+0x164>)
 80056ba:	f003 fc99 	bl	8008ff0 <HAL_TIM_PWM_Start>

  #ifdef Enable_I2C
  bno055_assignI2C(&hi2c1);
 80056be:	4830      	ldr	r0, [pc, #192]	; (8005780 <main+0x168>)
 80056c0:	f7fb f9c8 	bl	8000a54 <bno055_assignI2C>
  bno055_reset();
 80056c4:	f7fa ffc8 	bl	8000658 <bno055_reset>
  bno055_setup();
 80056c8:	f7fa ffd2 	bl	8000670 <bno055_setup>
  bno055_setOperationModeNDOF();
 80056cc:	f7fa ffbd 	bl	800064a <bno055_setOperationModeNDOF>
  #endif

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 80056d0:	2201      	movs	r2, #1
 80056d2:	2101      	movs	r1, #1
 80056d4:	482b      	ldr	r0, [pc, #172]	; (8005784 <main+0x16c>)
 80056d6:	f001 fc4d 	bl	8006f74 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    #ifdef Enable_I2C
    Euler      = bno055_getVectorEuler();
 80056da:	f7fb f987 	bl	80009ec <bno055_getVectorEuler>
 80056de:	eeb0 4b40 	vmov.f64	d4, d0
 80056e2:	eeb0 5b41 	vmov.f64	d5, d1
 80056e6:	eeb0 6b42 	vmov.f64	d6, d2
 80056ea:	eeb0 7b43 	vmov.f64	d7, d3
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <main+0x170>)
 80056f0:	ed83 4b00 	vstr	d4, [r3]
 80056f4:	ed83 5b02 	vstr	d5, [r3, #8]
 80056f8:	ed83 6b04 	vstr	d6, [r3, #16]
 80056fc:	ed83 7b06 	vstr	d7, [r3, #24]
    Gyro       = bno055_getVectorGyroscope();
 8005700:	f7fb f941 	bl	8000986 <bno055_getVectorGyroscope>
 8005704:	eeb0 4b40 	vmov.f64	d4, d0
 8005708:	eeb0 5b41 	vmov.f64	d5, d1
 800570c:	eeb0 6b42 	vmov.f64	d6, d2
 8005710:	eeb0 7b43 	vmov.f64	d7, d3
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <main+0x174>)
 8005716:	ed83 4b00 	vstr	d4, [r3]
 800571a:	ed83 5b02 	vstr	d5, [r3, #8]
 800571e:	ed83 6b04 	vstr	d6, [r3, #16]
 8005722:	ed83 7b06 	vstr	d7, [r3, #24]
    Acc        = bno055_getVectorAccelerometer();
 8005726:	f7fb f8fb 	bl	8000920 <bno055_getVectorAccelerometer>
 800572a:	eeb0 4b40 	vmov.f64	d4, d0
 800572e:	eeb0 5b41 	vmov.f64	d5, d1
 8005732:	eeb0 6b42 	vmov.f64	d6, d2
 8005736:	eeb0 7b43 	vmov.f64	d7, d3
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <main+0x178>)
 800573c:	ed83 4b00 	vstr	d4, [r3]
 8005740:	ed83 5b02 	vstr	d5, [r3, #8]
 8005744:	ed83 6b04 	vstr	d6, [r3, #16]
 8005748:	ed83 7b06 	vstr	d7, [r3, #24]
    Euler      = bno055_getVectorEuler();
 800574c:	e7c5      	b.n	80056da <main+0xc2>
 800574e:	bf00      	nop
 8005750:	20072ff8 	.word	0x20072ff8
 8005754:	20072f58 	.word	0x20072f58
 8005758:	20072ef4 	.word	0x20072ef4
 800575c:	200729a0 	.word	0x200729a0
 8005760:	20072960 	.word	0x20072960
 8005764:	2000000a 	.word	0x2000000a
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40010400 	.word	0x40010400
 8005778:	20072eb4 	.word	0x20072eb4
 800577c:	20072f98 	.word	0x20072f98
 8005780:	20072a60 	.word	0x20072a60
 8005784:	40020400 	.word	0x40020400
 8005788:	20072f38 	.word	0x20072f38
 800578c:	20073038 	.word	0x20073038
 8005790:	20072fd8 	.word	0x20072fd8

08005794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b0b8      	sub	sp, #224	; 0xe0
 8005798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800579a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800579e:	2234      	movs	r2, #52	; 0x34
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f005 fc85 	bl	800b0b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	609a      	str	r2, [r3, #8]
 80057b4:	60da      	str	r2, [r3, #12]
 80057b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	2290      	movs	r2, #144	; 0x90
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f005 fc76 	bl	800b0b2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80057c6:	f002 fa5b 	bl	8007c80 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ca:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <SystemClock_Config+0x124>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <SystemClock_Config+0x124>)
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6413      	str	r3, [r2, #64]	; 0x40
 80057d6:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <SystemClock_Config+0x124>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80057e2:	4b36      	ldr	r3, [pc, #216]	; (80058bc <SystemClock_Config+0x128>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80057ea:	4a34      	ldr	r2, [pc, #208]	; (80058bc <SystemClock_Config+0x128>)
 80057ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b32      	ldr	r3, [pc, #200]	; (80058bc <SystemClock_Config+0x128>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057fe:	2301      	movs	r3, #1
 8005800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005804:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800580c:	2302      	movs	r3, #2
 800580e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800581a:	2304      	movs	r3, #4
 800581c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005820:	2360      	movs	r3, #96	; 0x60
 8005822:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005826:	2302      	movs	r3, #2
 8005828:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800582c:	2304      	movs	r3, #4
 800582e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005832:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005836:	4618      	mov	r0, r3
 8005838:	f002 fa82 	bl	8007d40 <HAL_RCC_OscConfig>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005842:	f000 fc85 	bl	8006150 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005846:	f002 fa2b 	bl	8007ca0 <HAL_PWREx_EnableOverDrive>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005850:	f000 fc7e 	bl	8006150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005854:	230f      	movs	r3, #15
 8005856:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800585a:	2302      	movs	r3, #2
 800585c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800586a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005874:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005878:	2103      	movs	r1, #3
 800587a:	4618      	mov	r0, r3
 800587c:	f002 fd0e 	bl	800829c <HAL_RCC_ClockConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8005886:	f000 fc63 	bl	8006150 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <SystemClock_Config+0x12c>)
 800588c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800588e:	2300      	movs	r3, #0
 8005890:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005892:	2300      	movs	r3, #0
 8005894:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005896:	2300      	movs	r3, #0
 8005898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800589c:	f107 0308 	add.w	r3, r7, #8
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 fef3 	bl	800868c <HAL_RCCEx_PeriphCLKConfig>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80058ac:	f000 fc50 	bl	8006150 <Error_Handler>
  }
}
 80058b0:	bf00      	nop
 80058b2:	37e0      	adds	r7, #224	; 0xe0
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40007000 	.word	0x40007000
 80058c0:	00204100 	.word	0x00204100

080058c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <MX_I2C1_Init+0x74>)
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <MX_I2C1_Init+0x78>)
 80058cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <MX_I2C1_Init+0x74>)
 80058d0:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <MX_I2C1_Init+0x7c>)
 80058d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <MX_I2C1_Init+0x74>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <MX_I2C1_Init+0x74>)
 80058dc:	2201      	movs	r2, #1
 80058de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <MX_I2C1_Init+0x74>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <MX_I2C1_Init+0x74>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80058ec:	4b12      	ldr	r3, [pc, #72]	; (8005938 <MX_I2C1_Init+0x74>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <MX_I2C1_Init+0x74>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <MX_I2C1_Init+0x74>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058fe:	480e      	ldr	r0, [pc, #56]	; (8005938 <MX_I2C1_Init+0x74>)
 8005900:	f001 fb6a 	bl	8006fd8 <HAL_I2C_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800590a:	f000 fc21 	bl	8006150 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800590e:	2100      	movs	r1, #0
 8005910:	4809      	ldr	r0, [pc, #36]	; (8005938 <MX_I2C1_Init+0x74>)
 8005912:	f001 ffd5 	bl	80078c0 <HAL_I2CEx_ConfigAnalogFilter>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800591c:	f000 fc18 	bl	8006150 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005920:	2100      	movs	r1, #0
 8005922:	4805      	ldr	r0, [pc, #20]	; (8005938 <MX_I2C1_Init+0x74>)
 8005924:	f002 f817 	bl	8007956 <HAL_I2CEx_ConfigDigitalFilter>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800592e:	f000 fc0f 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20072a60 	.word	0x20072a60
 800593c:	40005400 	.word	0x40005400
 8005940:	2010091a 	.word	0x2010091a

08005944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2224      	movs	r2, #36	; 0x24
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f005 fbad 	bl	800b0b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005958:	463b      	mov	r3, r7
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005962:	4b23      	ldr	r3, [pc, #140]	; (80059f0 <MX_TIM1_Init+0xac>)
 8005964:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <MX_TIM1_Init+0xb0>)
 8005966:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005968:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <MX_TIM1_Init+0xac>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596e:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <MX_TIM1_Init+0xac>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005974:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <MX_TIM1_Init+0xac>)
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597c:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <MX_TIM1_Init+0xac>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005982:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <MX_TIM1_Init+0xac>)
 8005984:	2200      	movs	r2, #0
 8005986:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <MX_TIM1_Init+0xac>)
 800598a:	2200      	movs	r2, #0
 800598c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800598e:	2303      	movs	r3, #3
 8005990:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005996:	2301      	movs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059a2:	2300      	movs	r3, #0
 80059a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059a6:	2301      	movs	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	4619      	mov	r1, r3
 80059b8:	480d      	ldr	r0, [pc, #52]	; (80059f0 <MX_TIM1_Init+0xac>)
 80059ba:	f003 fb5d 	bl	8009078 <HAL_TIM_Encoder_Init>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80059c4:	f000 fbc4 	bl	8006150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059c8:	2300      	movs	r3, #0
 80059ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059cc:	2300      	movs	r3, #0
 80059ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059d4:	463b      	mov	r3, r7
 80059d6:	4619      	mov	r1, r3
 80059d8:	4805      	ldr	r0, [pc, #20]	; (80059f0 <MX_TIM1_Init+0xac>)
 80059da:	f004 faed 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80059e4:	f000 fbb4 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80059e8:	bf00      	nop
 80059ea:	3730      	adds	r7, #48	; 0x30
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20072f58 	.word	0x20072f58
 80059f4:	40010000 	.word	0x40010000

080059f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059fe:	f107 0310 	add.w	r3, r7, #16
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	605a      	str	r2, [r3, #4]
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a16:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a20:	225f      	movs	r2, #95	; 0x5f
 8005a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a24:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8005a2a:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a32:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a3e:	4814      	ldr	r0, [pc, #80]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a40:	f003 fa4a 	bl	8008ed8 <HAL_TIM_Base_Init>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005a4a:	f000 fb81 	bl	8006150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a54:	f107 0310 	add.w	r3, r7, #16
 8005a58:	4619      	mov	r1, r3
 8005a5a:	480d      	ldr	r0, [pc, #52]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a5c:	f003 fe0c 	bl	8009678 <HAL_TIM_ConfigClockSource>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005a66:	f000 fb73 	bl	8006150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4806      	ldr	r0, [pc, #24]	; (8005a90 <MX_TIM2_Init+0x98>)
 8005a78:	f004 fa9e 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005a82:	f000 fb65 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a86:	bf00      	nop
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20072ff8 	.word	0x20072ff8

08005a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08c      	sub	sp, #48	; 0x30
 8005a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	2224      	movs	r2, #36	; 0x24
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f005 fb05 	bl	800b0b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005ab2:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <MX_TIM3_Init+0xa8>)
 8005ab6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005ab8:	4b1f      	ldr	r3, [pc, #124]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abe:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad2:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005aec:	2300      	movs	r3, #0
 8005aee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005af0:	2301      	movs	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005af4:	2300      	movs	r3, #0
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005afc:	f107 030c 	add.w	r3, r7, #12
 8005b00:	4619      	mov	r1, r3
 8005b02:	480d      	ldr	r0, [pc, #52]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005b04:	f003 fab8 	bl	8009078 <HAL_TIM_Encoder_Init>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005b0e:	f000 fb1f 	bl	8006150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b12:	2300      	movs	r3, #0
 8005b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4806      	ldr	r0, [pc, #24]	; (8005b38 <MX_TIM3_Init+0xa4>)
 8005b20:	f004 fa4a 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005b2a:	f000 fb11 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b2e:	bf00      	nop
 8005b30:	3730      	adds	r7, #48	; 0x30
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20072ef4 	.word	0x20072ef4
 8005b3c:	40000400 	.word	0x40000400

08005b40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b46:	f107 030c 	add.w	r3, r7, #12
 8005b4a:	2224      	movs	r2, #36	; 0x24
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f005 faaf 	bl	800b0b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b54:	463b      	mov	r3, r7
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b5e:	4b21      	ldr	r3, [pc, #132]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005b60:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <MX_TIM4_Init+0xa8>)
 8005b62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b64:	4b1f      	ldr	r3, [pc, #124]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6a:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b78:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b7e:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b84:	2303      	movs	r3, #3
 8005b86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005ba8:	f107 030c 	add.w	r3, r7, #12
 8005bac:	4619      	mov	r1, r3
 8005bae:	480d      	ldr	r0, [pc, #52]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005bb0:	f003 fa62 	bl	8009078 <HAL_TIM_Encoder_Init>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005bba:	f000 fac9 	bl	8006150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4806      	ldr	r0, [pc, #24]	; (8005be4 <MX_TIM4_Init+0xa4>)
 8005bcc:	f004 f9f4 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005bd6:	f000 fabb 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005bda:	bf00      	nop
 8005bdc:	3730      	adds	r7, #48	; 0x30
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200729a0 	.word	0x200729a0
 8005be8:	40000800 	.word	0x40000800

08005bec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08e      	sub	sp, #56	; 0x38
 8005bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	615a      	str	r2, [r3, #20]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c1e:	4b32      	ldr	r3, [pc, #200]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c20:	4a32      	ldr	r2, [pc, #200]	; (8005cec <MX_TIM5_Init+0x100>)
 8005c22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8005c24:	4b30      	ldr	r3, [pc, #192]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c2a:	4b2f      	ldr	r3, [pc, #188]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000-1;
 8005c30:	4b2d      	ldr	r3, [pc, #180]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c32:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005c36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c38:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c46:	f003 f947 	bl	8008ed8 <HAL_TIM_Base_Init>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8005c50:	f000 fa7e 	bl	8006150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4821      	ldr	r0, [pc, #132]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c62:	f003 fd09 	bl	8009678 <HAL_TIM_ConfigClockSource>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8005c6c:	f000 fa70 	bl	8006150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005c70:	481d      	ldr	r0, [pc, #116]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c72:	f003 f987 	bl	8008f84 <HAL_TIM_PWM_Init>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8005c7c:	f000 fa68 	bl	8006150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c88:	f107 031c 	add.w	r3, r7, #28
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4816      	ldr	r0, [pc, #88]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005c90:	f004 f992 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8005c9a:	f000 fa59 	bl	8006150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c9e:	2360      	movs	r3, #96	; 0x60
 8005ca0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cae:	463b      	mov	r3, r7
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005cb6:	f003 fbc7 	bl	8009448 <HAL_TIM_PWM_ConfigChannel>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8005cc0:	f000 fa46 	bl	8006150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	220c      	movs	r2, #12
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4807      	ldr	r0, [pc, #28]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005ccc:	f003 fbbc 	bl	8009448 <HAL_TIM_PWM_ConfigChannel>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8005cd6:	f000 fa3b 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005cda:	4803      	ldr	r0, [pc, #12]	; (8005ce8 <MX_TIM5_Init+0xfc>)
 8005cdc:	f000 fbee 	bl	80064bc <HAL_TIM_MspPostInit>

}
 8005ce0:	bf00      	nop
 8005ce2:	3738      	adds	r7, #56	; 0x38
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20072eb4 	.word	0x20072eb4
 8005cec:	40000c00 	.word	0x40000c00

08005cf0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08c      	sub	sp, #48	; 0x30
 8005cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cf6:	f107 030c 	add.w	r3, r7, #12
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f005 f9d7 	bl	800b0b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d04:	463b      	mov	r3, r7
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005d0e:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d10:	4a23      	ldr	r2, [pc, #140]	; (8005da0 <MX_TIM8_Init+0xb0>)
 8005d12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005d14:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1a:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005d20:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d28:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005d2e:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d34:	4b19      	ldr	r3, [pc, #100]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d42:	2301      	movs	r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d52:	2301      	movs	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d56:	2300      	movs	r3, #0
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005d5e:	f107 030c 	add.w	r3, r7, #12
 8005d62:	4619      	mov	r1, r3
 8005d64:	480d      	ldr	r0, [pc, #52]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d66:	f003 f987 	bl	8009078 <HAL_TIM_Encoder_Init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005d70:	f000 f9ee 	bl	8006150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d74:	2300      	movs	r3, #0
 8005d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d80:	463b      	mov	r3, r7
 8005d82:	4619      	mov	r1, r3
 8005d84:	4805      	ldr	r0, [pc, #20]	; (8005d9c <MX_TIM8_Init+0xac>)
 8005d86:	f004 f917 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005d90:	f000 f9de 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005d94:	bf00      	nop
 8005d96:	3730      	adds	r7, #48	; 0x30
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20072960 	.word	0x20072960
 8005da0:	40010400 	.word	0x40010400

08005da4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005daa:	f107 0320 	add.w	r3, r7, #32
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	609a      	str	r2, [r3, #8]
 8005db6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	611a      	str	r2, [r3, #16]
 8005dc6:	615a      	str	r2, [r3, #20]
 8005dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005dca:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	; (8005e7c <MX_TIM9_Init+0xd8>)
 8005dce:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8005dd0:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dd6:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4000-1;
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005dde:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005de2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005de4:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dea:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005df0:	4821      	ldr	r0, [pc, #132]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005df2:	f003 f871 	bl	8008ed8 <HAL_TIM_Base_Init>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8005dfc:	f000 f9a8 	bl	8006150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e04:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005e06:	f107 0320 	add.w	r3, r7, #32
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	481a      	ldr	r0, [pc, #104]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005e0e:	f003 fc33 	bl	8009678 <HAL_TIM_ConfigClockSource>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005e18:	f000 f99a 	bl	8006150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005e1c:	4816      	ldr	r0, [pc, #88]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005e1e:	f003 f8b1 	bl	8008f84 <HAL_TIM_PWM_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005e28:	f000 f992 	bl	8006150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e2c:	2360      	movs	r3, #96	; 0x60
 8005e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4619      	mov	r1, r3
 8005e42:	480d      	ldr	r0, [pc, #52]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005e44:	f003 fb00 	bl	8009448 <HAL_TIM_PWM_ConfigChannel>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8005e4e:	f000 f97f 	bl	8006150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	2204      	movs	r2, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4807      	ldr	r0, [pc, #28]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005e5a:	f003 faf5 	bl	8009448 <HAL_TIM_PWM_ConfigChannel>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8005e64:	f000 f974 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8005e68:	4803      	ldr	r0, [pc, #12]	; (8005e78 <MX_TIM9_Init+0xd4>)
 8005e6a:	f000 fb27 	bl	80064bc <HAL_TIM_MspPostInit>

}
 8005e6e:	bf00      	nop
 8005e70:	3730      	adds	r7, #48	; 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20072f98 	.word	0x20072f98
 8005e7c:	40014000 	.word	0x40014000

08005e80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e84:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <MX_USART3_UART_Init+0x5c>)
 8005e88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ec2:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <MX_USART3_UART_Init+0x58>)
 8005ec4:	f004 f924 	bl	800a110 <HAL_UART_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005ece:	f000 f93f 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200729e0 	.word	0x200729e0
 8005edc:	40004800 	.word	0x40004800

08005ee0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ee4:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ee6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005eea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005eee:	2206      	movs	r2, #6
 8005ef0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005ef2:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005efe:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f00:	2202      	movs	r2, #2
 8005f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005f22:	4805      	ldr	r0, [pc, #20]	; (8005f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f24:	f001 fd63 	bl	80079ee <HAL_PCD_Init>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005f2e:	f000 f90f 	bl	8006150 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20072aac 	.word	0x20072aac

08005f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	; 0x30
 8005f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f42:	f107 031c 	add.w	r3, r7, #28
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f52:	4b78      	ldr	r3, [pc, #480]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a77      	ldr	r2, [pc, #476]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f58:	f043 0310 	orr.w	r3, r3, #16
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b75      	ldr	r3, [pc, #468]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f6a:	4b72      	ldr	r3, [pc, #456]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a71      	ldr	r2, [pc, #452]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f70:	f043 0304 	orr.w	r3, r3, #4
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
 8005f76:	4b6f      	ldr	r3, [pc, #444]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f82:	4b6c      	ldr	r3, [pc, #432]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	4a6b      	ldr	r2, [pc, #428]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8e:	4b69      	ldr	r3, [pc, #420]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f9a:	4b66      	ldr	r3, [pc, #408]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4a65      	ldr	r2, [pc, #404]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa6:	4b63      	ldr	r3, [pc, #396]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb2:	4b60      	ldr	r3, [pc, #384]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	4a5f      	ldr	r2, [pc, #380]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fb8:	f043 0302 	orr.w	r3, r3, #2
 8005fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fbe:	4b5d      	ldr	r3, [pc, #372]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fca:	4b5a      	ldr	r3, [pc, #360]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a59      	ldr	r2, [pc, #356]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b57      	ldr	r3, [pc, #348]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fe2:	4b54      	ldr	r3, [pc, #336]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a53      	ldr	r2, [pc, #332]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b51      	ldr	r3, [pc, #324]	; (8006134 <MX_GPIO_Init+0x1f8>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f244 0181 	movw	r1, #16513	; 0x4081
 8006000:	484d      	ldr	r0, [pc, #308]	; (8006138 <MX_GPIO_Init+0x1fc>)
 8006002:	f000 ffb7 	bl	8006f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8006006:	2200      	movs	r2, #0
 8006008:	2140      	movs	r1, #64	; 0x40
 800600a:	484c      	ldr	r0, [pc, #304]	; (800613c <MX_GPIO_Init+0x200>)
 800600c:	f000 ffb2 	bl	8006f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8006010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006016:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <MX_GPIO_Init+0x204>)
 8006018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800601e:	f107 031c 	add.w	r3, r7, #28
 8006022:	4619      	mov	r1, r3
 8006024:	4847      	ldr	r0, [pc, #284]	; (8006144 <MX_GPIO_Init+0x208>)
 8006026:	f000 fdfb 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800602a:	2332      	movs	r3, #50	; 0x32
 800602c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602e:	2302      	movs	r3, #2
 8006030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006036:	2303      	movs	r3, #3
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800603a:	230b      	movs	r3, #11
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800603e:	f107 031c 	add.w	r3, r7, #28
 8006042:	4619      	mov	r1, r3
 8006044:	483f      	ldr	r0, [pc, #252]	; (8006144 <MX_GPIO_Init+0x208>)
 8006046:	f000 fdeb 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800604a:	2386      	movs	r3, #134	; 0x86
 800604c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604e:	2302      	movs	r3, #2
 8006050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006056:	2303      	movs	r3, #3
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800605a:	230b      	movs	r3, #11
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605e:	f107 031c 	add.w	r3, r7, #28
 8006062:	4619      	mov	r1, r3
 8006064:	4838      	ldr	r0, [pc, #224]	; (8006148 <MX_GPIO_Init+0x20c>)
 8006066:	f000 fddb 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800606a:	f244 0381 	movw	r3, #16513	; 0x4081
 800606e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006070:	2301      	movs	r3, #1
 8006072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006074:	2300      	movs	r3, #0
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006078:	2300      	movs	r3, #0
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800607c:	f107 031c 	add.w	r3, r7, #28
 8006080:	4619      	mov	r1, r3
 8006082:	482d      	ldr	r0, [pc, #180]	; (8006138 <MX_GPIO_Init+0x1fc>)
 8006084:	f000 fdcc 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800608c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608e:	2302      	movs	r3, #2
 8006090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006096:	2303      	movs	r3, #3
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800609a:	230b      	movs	r3, #11
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800609e:	f107 031c 	add.w	r3, r7, #28
 80060a2:	4619      	mov	r1, r3
 80060a4:	4824      	ldr	r0, [pc, #144]	; (8006138 <MX_GPIO_Init+0x1fc>)
 80060a6:	f000 fdbb 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80060aa:	2340      	movs	r3, #64	; 0x40
 80060ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060ae:	2301      	movs	r3, #1
 80060b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b6:	2300      	movs	r3, #0
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060ba:	f107 031c 	add.w	r3, r7, #28
 80060be:	4619      	mov	r1, r3
 80060c0:	481e      	ldr	r0, [pc, #120]	; (800613c <MX_GPIO_Init+0x200>)
 80060c2:	f000 fdad 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060ca:	2300      	movs	r3, #0
 80060cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80060d2:	f107 031c 	add.w	r3, r7, #28
 80060d6:	4619      	mov	r1, r3
 80060d8:	4818      	ldr	r0, [pc, #96]	; (800613c <MX_GPIO_Init+0x200>)
 80060da:	f000 fda1 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80060de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80060e4:	4b19      	ldr	r3, [pc, #100]	; (800614c <MX_GPIO_Init+0x210>)
 80060e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ec:	f107 031c 	add.w	r3, r7, #28
 80060f0:	4619      	mov	r1, r3
 80060f2:	4814      	ldr	r0, [pc, #80]	; (8006144 <MX_GPIO_Init+0x208>)
 80060f4:	f000 fd94 	bl	8006c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80060f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80060fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fe:	2302      	movs	r3, #2
 8006100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006106:	2303      	movs	r3, #3
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800610a:	230b      	movs	r3, #11
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800610e:	f107 031c 	add.w	r3, r7, #28
 8006112:	4619      	mov	r1, r3
 8006114:	4809      	ldr	r0, [pc, #36]	; (800613c <MX_GPIO_Init+0x200>)
 8006116:	f000 fd83 	bl	8006c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800611a:	2200      	movs	r2, #0
 800611c:	2100      	movs	r1, #0
 800611e:	2017      	movs	r0, #23
 8006120:	f000 fd47 	bl	8006bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006124:	2017      	movs	r0, #23
 8006126:	f000 fd60 	bl	8006bea <HAL_NVIC_EnableIRQ>

}
 800612a:	bf00      	nop
 800612c:	3730      	adds	r7, #48	; 0x30
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40023800 	.word	0x40023800
 8006138:	40020400 	.word	0x40020400
 800613c:	40021800 	.word	0x40021800
 8006140:	10110000 	.word	0x10110000
 8006144:	40020800 	.word	0x40020800
 8006148:	40020000 	.word	0x40020000
 800614c:	10310000 	.word	0x10310000

08006150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <HAL_MspInit+0x44>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	4a0e      	ldr	r2, [pc, #56]	; (80061a4 <HAL_MspInit+0x44>)
 800616c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006170:	6413      	str	r3, [r2, #64]	; 0x40
 8006172:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <HAL_MspInit+0x44>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <HAL_MspInit+0x44>)
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <HAL_MspInit+0x44>)
 8006184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006188:	6453      	str	r3, [r2, #68]	; 0x44
 800618a:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_MspInit+0x44>)
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800

080061a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b0:	f107 0314 	add.w	r3, r7, #20
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a17      	ldr	r2, [pc, #92]	; (8006224 <HAL_I2C_MspInit+0x7c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d128      	bne.n	800621c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ca:	4b17      	ldr	r3, [pc, #92]	; (8006228 <HAL_I2C_MspInit+0x80>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a16      	ldr	r2, [pc, #88]	; (8006228 <HAL_I2C_MspInit+0x80>)
 80061d0:	f043 0302 	orr.w	r3, r3, #2
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30
 80061d6:	4b14      	ldr	r3, [pc, #80]	; (8006228 <HAL_I2C_MspInit+0x80>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80061e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80061e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80061e8:	2312      	movs	r3, #18
 80061ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f0:	2303      	movs	r3, #3
 80061f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80061f4:	2304      	movs	r3, #4
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	4619      	mov	r1, r3
 80061fe:	480b      	ldr	r0, [pc, #44]	; (800622c <HAL_I2C_MspInit+0x84>)
 8006200:	f000 fd0e 	bl	8006c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006204:	4b08      	ldr	r3, [pc, #32]	; (8006228 <HAL_I2C_MspInit+0x80>)
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	4a07      	ldr	r2, [pc, #28]	; (8006228 <HAL_I2C_MspInit+0x80>)
 800620a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800620e:	6413      	str	r3, [r2, #64]	; 0x40
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_I2C_MspInit+0x80>)
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800621c:	bf00      	nop
 800621e:	3728      	adds	r7, #40	; 0x28
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40005400 	.word	0x40005400
 8006228:	40023800 	.word	0x40023800
 800622c:	40020400 	.word	0x40020400

08006230 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b090      	sub	sp, #64	; 0x40
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6b      	ldr	r2, [pc, #428]	; (80063fc <HAL_TIM_Encoder_MspInit+0x1cc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d129      	bne.n	80062a6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006252:	4b6b      	ldr	r3, [pc, #428]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	4a6a      	ldr	r2, [pc, #424]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	6453      	str	r3, [r2, #68]	; 0x44
 800625e:	4b68      	ldr	r3, [pc, #416]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800626a:	4b65      	ldr	r3, [pc, #404]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	4a64      	ldr	r2, [pc, #400]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006270:	f043 0310 	orr.w	r3, r3, #16
 8006274:	6313      	str	r3, [r2, #48]	; 0x30
 8006276:	4b62      	ldr	r3, [pc, #392]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006282:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628c:	2300      	movs	r3, #0
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006290:	2300      	movs	r3, #0
 8006292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006294:	2301      	movs	r3, #1
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800629c:	4619      	mov	r1, r3
 800629e:	4859      	ldr	r0, [pc, #356]	; (8006404 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80062a0:	f000 fcbe 	bl	8006c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80062a4:	e0a5      	b.n	80063f2 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a57      	ldr	r2, [pc, #348]	; (8006408 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d144      	bne.n	800633a <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062b0:	4b53      	ldr	r3, [pc, #332]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	4a52      	ldr	r2, [pc, #328]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	6413      	str	r3, [r2, #64]	; 0x40
 80062bc:	4b50      	ldr	r3, [pc, #320]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c8:	4b4d      	ldr	r3, [pc, #308]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	4a4c      	ldr	r2, [pc, #304]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	6313      	str	r3, [r2, #48]	; 0x30
 80062d4:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062e0:	4b47      	ldr	r3, [pc, #284]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	4a46      	ldr	r2, [pc, #280]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062e6:	f043 0302 	orr.w	r3, r3, #2
 80062ea:	6313      	str	r3, [r2, #48]	; 0x30
 80062ec:	4b44      	ldr	r3, [pc, #272]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80062f8:	2340      	movs	r3, #64	; 0x40
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fc:	2302      	movs	r3, #2
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006300:	2300      	movs	r3, #0
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006304:	2300      	movs	r3, #0
 8006306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006308:	2302      	movs	r3, #2
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006310:	4619      	mov	r1, r3
 8006312:	483e      	ldr	r0, [pc, #248]	; (800640c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8006314:	f000 fc84 	bl	8006c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006318:	2320      	movs	r3, #32
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631c:	2302      	movs	r3, #2
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006320:	2300      	movs	r3, #0
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006324:	2300      	movs	r3, #0
 8006326:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006328:	2302      	movs	r3, #2
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800632c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006330:	4619      	mov	r1, r3
 8006332:	4837      	ldr	r0, [pc, #220]	; (8006410 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8006334:	f000 fc74 	bl	8006c20 <HAL_GPIO_Init>
}
 8006338:	e05b      	b.n	80063f2 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a35      	ldr	r2, [pc, #212]	; (8006414 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d129      	bne.n	8006398 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006344:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800634a:	f043 0304 	orr.w	r3, r3, #4
 800634e:	6413      	str	r3, [r2, #64]	; 0x40
 8006350:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006362:	f043 0308 	orr.w	r3, r3, #8
 8006366:	6313      	str	r3, [r2, #48]	; 0x30
 8006368:	4b25      	ldr	r3, [pc, #148]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006374:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800637a:	2302      	movs	r3, #2
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637e:	2300      	movs	r3, #0
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006382:	2300      	movs	r3, #0
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006386:	2302      	movs	r3, #2
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800638a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800638e:	4619      	mov	r1, r3
 8006390:	4821      	ldr	r0, [pc, #132]	; (8006418 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8006392:	f000 fc45 	bl	8006c20 <HAL_GPIO_Init>
}
 8006396:	e02c      	b.n	80063f2 <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1f      	ldr	r2, [pc, #124]	; (800641c <HAL_TIM_Encoder_MspInit+0x1ec>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d127      	bne.n	80063f2 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80063a2:	4b17      	ldr	r3, [pc, #92]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b14      	ldr	r3, [pc, #80]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80063c0:	f043 0304 	orr.w	r3, r3, #4
 80063c4:	6313      	str	r3, [r2, #48]	; 0x30
 80063c6:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063d2:	23c0      	movs	r3, #192	; 0xc0
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d6:	2302      	movs	r3, #2
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063de:	2300      	movs	r3, #0
 80063e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80063e2:	2303      	movs	r3, #3
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063ea:	4619      	mov	r1, r3
 80063ec:	480c      	ldr	r0, [pc, #48]	; (8006420 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80063ee:	f000 fc17 	bl	8006c20 <HAL_GPIO_Init>
}
 80063f2:	bf00      	nop
 80063f4:	3740      	adds	r7, #64	; 0x40
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40023800 	.word	0x40023800
 8006404:	40021000 	.word	0x40021000
 8006408:	40000400 	.word	0x40000400
 800640c:	40020000 	.word	0x40020000
 8006410:	40020400 	.word	0x40020400
 8006414:	40000800 	.word	0x40000800
 8006418:	40020c00 	.word	0x40020c00
 800641c:	40010400 	.word	0x40010400
 8006420:	40020800 	.word	0x40020800

08006424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006434:	d114      	bne.n	8006460 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006436:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6413      	str	r3, [r2, #64]	; 0x40
 8006442:	4b1b      	ldr	r3, [pc, #108]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	201c      	movs	r0, #28
 8006454:	f000 fbad 	bl	8006bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006458:	201c      	movs	r0, #28
 800645a:	f000 fbc6 	bl	8006bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800645e:	e022      	b.n	80064a6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <HAL_TIM_Base_MspInit+0x90>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d10c      	bne.n	8006484 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 8006470:	f043 0308 	orr.w	r3, r3, #8
 8006474:	6413      	str	r3, [r2, #64]	; 0x40
 8006476:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	693b      	ldr	r3, [r7, #16]
}
 8006482:	e010      	b.n	80064a6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a0b      	ldr	r2, [pc, #44]	; (80064b8 <HAL_TIM_Base_MspInit+0x94>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d10b      	bne.n	80064a6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800648e:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	4a07      	ldr	r2, [pc, #28]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006498:	6453      	str	r3, [r2, #68]	; 0x44
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_TIM_Base_MspInit+0x8c>)
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40014000 	.word	0x40014000

080064bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a22      	ldr	r2, [pc, #136]	; (8006564 <HAL_TIM_MspPostInit+0xa8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d11c      	bne.n	8006518 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064de:	4b22      	ldr	r3, [pc, #136]	; (8006568 <HAL_TIM_MspPostInit+0xac>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	4a21      	ldr	r2, [pc, #132]	; (8006568 <HAL_TIM_MspPostInit+0xac>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ea:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <HAL_TIM_MspPostInit+0xac>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80064f6:	2309      	movs	r3, #9
 80064f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fa:	2302      	movs	r3, #2
 80064fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006506:	2302      	movs	r3, #2
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4619      	mov	r1, r3
 8006510:	4816      	ldr	r0, [pc, #88]	; (800656c <HAL_TIM_MspPostInit+0xb0>)
 8006512:	f000 fb85 	bl	8006c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8006516:	e020      	b.n	800655a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a14      	ldr	r2, [pc, #80]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d11b      	bne.n	800655a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <HAL_TIM_MspPostInit+0xac>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	4a10      	ldr	r2, [pc, #64]	; (8006568 <HAL_TIM_MspPostInit+0xac>)
 8006528:	f043 0310 	orr.w	r3, r3, #16
 800652c:	6313      	str	r3, [r2, #48]	; 0x30
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <HAL_TIM_MspPostInit+0xac>)
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800653a:	2360      	movs	r3, #96	; 0x60
 800653c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653e:	2302      	movs	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006546:	2300      	movs	r3, #0
 8006548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800654a:	2303      	movs	r3, #3
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	4619      	mov	r1, r3
 8006554:	4807      	ldr	r0, [pc, #28]	; (8006574 <HAL_TIM_MspPostInit+0xb8>)
 8006556:	f000 fb63 	bl	8006c20 <HAL_GPIO_Init>
}
 800655a:	bf00      	nop
 800655c:	3728      	adds	r7, #40	; 0x28
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40000c00 	.word	0x40000c00
 8006568:	40023800 	.word	0x40023800
 800656c:	40020000 	.word	0x40020000
 8006570:	40014000 	.word	0x40014000
 8006574:	40021000 	.word	0x40021000

08006578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	60da      	str	r2, [r3, #12]
 800658e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a17      	ldr	r2, [pc, #92]	; (80065f4 <HAL_UART_MspInit+0x7c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d128      	bne.n	80065ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <HAL_UART_MspInit+0x80>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	4a16      	ldr	r2, [pc, #88]	; (80065f8 <HAL_UART_MspInit+0x80>)
 80065a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a4:	6413      	str	r3, [r2, #64]	; 0x40
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <HAL_UART_MspInit+0x80>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065b2:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <HAL_UART_MspInit+0x80>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <HAL_UART_MspInit+0x80>)
 80065b8:	f043 0308 	orr.w	r3, r3, #8
 80065bc:	6313      	str	r3, [r2, #48]	; 0x30
 80065be:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <HAL_UART_MspInit+0x80>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80065ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d0:	2302      	movs	r3, #2
 80065d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d8:	2303      	movs	r3, #3
 80065da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80065dc:	2307      	movs	r3, #7
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	4619      	mov	r1, r3
 80065e6:	4805      	ldr	r0, [pc, #20]	; (80065fc <HAL_UART_MspInit+0x84>)
 80065e8:	f000 fb1a 	bl	8006c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80065ec:	bf00      	nop
 80065ee:	3728      	adds	r7, #40	; 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40004800 	.word	0x40004800
 80065f8:	40023800 	.word	0x40023800
 80065fc:	40020c00 	.word	0x40020c00

08006600 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08a      	sub	sp, #40	; 0x28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006608:	f107 0314 	add.w	r3, r7, #20
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	609a      	str	r2, [r3, #8]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006620:	d141      	bne.n	80066a6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006622:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	6313      	str	r3, [r2, #48]	; 0x30
 800662e:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800663a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800663e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006640:	2302      	movs	r3, #2
 8006642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006648:	2303      	movs	r3, #3
 800664a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800664c:	230a      	movs	r3, #10
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	4619      	mov	r1, r3
 8006656:	4817      	ldr	r0, [pc, #92]	; (80066b4 <HAL_PCD_MspInit+0xb4>)
 8006658:	f000 fae2 	bl	8006c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800665c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	4619      	mov	r1, r3
 8006670:	4810      	ldr	r0, [pc, #64]	; (80066b4 <HAL_PCD_MspInit+0xb4>)
 8006672:	f000 fad5 	bl	8006c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 800667c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006680:	6353      	str	r3, [r2, #52]	; 0x34
 8006682:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4b08      	ldr	r3, [pc, #32]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	4a07      	ldr	r2, [pc, #28]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 8006694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006698:	6453      	str	r3, [r2, #68]	; 0x44
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <HAL_PCD_MspInit+0xb0>)
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80066a6:	bf00      	nop
 80066a8:	3728      	adds	r7, #40	; 0x28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40020000 	.word	0x40020000

080066b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80066bc:	bf00      	nop
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066ca:	e7fe      	b.n	80066ca <HardFault_Handler+0x4>

080066cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066d0:	e7fe      	b.n	80066d0 <MemManage_Handler+0x4>

080066d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066d2:	b480      	push	{r7}
 80066d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066d6:	e7fe      	b.n	80066d6 <BusFault_Handler+0x4>

080066d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066dc:	e7fe      	b.n	80066dc <UsageFault_Handler+0x4>

080066de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066de:	b480      	push	{r7}
 80066e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066e2:	bf00      	nop
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800670c:	f000 f934 	bl	8006978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006710:	bf00      	nop
 8006712:	bd80      	pop	{r7, pc}

08006714 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006718:	f44f 7080 	mov.w	r0, #256	; 0x100
 800671c:	f000 fc44 	bl	8006fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}

08006724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006728:	4802      	ldr	r0, [pc, #8]	; (8006734 <TIM2_IRQHandler+0x10>)
 800672a:	f002 fd6e 	bl	800920a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800672e:	bf00      	nop
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20072ff8 	.word	0x20072ff8

08006738 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e00a      	b.n	8006760 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800674a:	f3af 8000 	nop.w
 800674e:	4601      	mov	r1, r0
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	60ba      	str	r2, [r7, #8]
 8006756:	b2ca      	uxtb	r2, r1
 8006758:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3301      	adds	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	dbf0      	blt.n	800674a <_read+0x12>
	}

return len;
 8006768:	687b      	ldr	r3, [r7, #4]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e009      	b.n	8006798 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	60ba      	str	r2, [r7, #8]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f7fa fa8b 	bl	8000ca8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	3301      	adds	r3, #1
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	dbf1      	blt.n	8006784 <_write+0x12>
	}
	return len;
 80067a0:	687b      	ldr	r3, [r7, #4]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <_close>:

int _close(int file)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
	return -1;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067d2:	605a      	str	r2, [r3, #4]
	return 0;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <_isatty>:

int _isatty(int file)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
	return 1;
 80067ea:	2301      	movs	r3, #1
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
	return 0;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800681c:	4a14      	ldr	r2, [pc, #80]	; (8006870 <_sbrk+0x5c>)
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <_sbrk+0x60>)
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <_sbrk+0x64>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <_sbrk+0x64>)
 8006832:	4a12      	ldr	r2, [pc, #72]	; (800687c <_sbrk+0x68>)
 8006834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006836:	4b10      	ldr	r3, [pc, #64]	; (8006878 <_sbrk+0x64>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	429a      	cmp	r2, r3
 8006842:	d207      	bcs.n	8006854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006844:	f004 fc00 	bl	800b048 <__errno>
 8006848:	4602      	mov	r2, r0
 800684a:	230c      	movs	r3, #12
 800684c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	e009      	b.n	8006868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <_sbrk+0x64>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <_sbrk+0x64>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4413      	add	r3, r2
 8006862:	4a05      	ldr	r2, [pc, #20]	; (8006878 <_sbrk+0x64>)
 8006864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006866:	68fb      	ldr	r3, [r7, #12]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20080000 	.word	0x20080000
 8006874:	00000400 	.word	0x00000400
 8006878:	20072950 	.word	0x20072950
 800687c:	20073088 	.word	0x20073088

08006880 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006884:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <SystemInit+0x28>)
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <SystemInit+0x28>)
 800688c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <SystemInit+0x28>)
 8006896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800689a:	609a      	str	r2, [r3, #8]
#endif
}
 800689c:	bf00      	nop
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	e000ed00 	.word	0xe000ed00

080068ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80068ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80068b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80068b2:	e003      	b.n	80068bc <LoopCopyDataInit>

080068b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80068b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80068b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80068ba:	3104      	adds	r1, #4

080068bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80068bc:	480b      	ldr	r0, [pc, #44]	; (80068ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80068c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80068c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80068c4:	d3f6      	bcc.n	80068b4 <CopyDataInit>
  ldr  r2, =_sbss
 80068c6:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80068c8:	e002      	b.n	80068d0 <LoopFillZerobss>

080068ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80068ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80068cc:	f842 3b04 	str.w	r3, [r2], #4

080068d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80068d0:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80068d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80068d4:	d3f9      	bcc.n	80068ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80068d6:	f7ff ffd3 	bl	8006880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068da:	f004 fbbb 	bl	800b054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068de:	f7fe fe9b 	bl	8005618 <main>
  bx  lr    
 80068e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80068e4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80068e8:	0800ed50 	.word	0x0800ed50
  ldr  r0, =_sdata
 80068ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80068f0:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 80068f4:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 80068f8:	20073084 	.word	0x20073084

080068fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068fc:	e7fe      	b.n	80068fc <ADC_IRQHandler>

080068fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006902:	2003      	movs	r0, #3
 8006904:	f000 f94a 	bl	8006b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006908:	2000      	movs	r0, #0
 800690a:	f000 f805 	bl	8006918 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800690e:	f7ff fc27 	bl	8006160 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_InitTick+0x54>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b12      	ldr	r3, [pc, #72]	; (8006970 <HAL_InitTick+0x58>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	4619      	mov	r1, r3
 800692a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800692e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f965 	bl	8006c06 <HAL_SYSTICK_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e00e      	b.n	8006964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d80a      	bhi.n	8006962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800694c:	2200      	movs	r2, #0
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	f000 f92d 	bl	8006bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006958:	4a06      	ldr	r2, [pc, #24]	; (8006974 <HAL_InitTick+0x5c>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e000      	b.n	8006964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000038 	.word	0x20000038
 8006970:	20000040 	.word	0x20000040
 8006974:	2000003c 	.word	0x2000003c

08006978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_IncTick+0x20>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <HAL_IncTick+0x24>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4413      	add	r3, r2
 8006988:	4a04      	ldr	r2, [pc, #16]	; (800699c <HAL_IncTick+0x24>)
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000040 	.word	0x20000040
 800699c:	2007307c 	.word	0x2007307c

080069a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return uwTick;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_GetTick+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	2007307c 	.word	0x2007307c

080069b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069c0:	f7ff ffee 	bl	80069a0 <HAL_GetTick>
 80069c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d005      	beq.n	80069de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <HAL_Delay+0x40>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069de:	bf00      	nop
 80069e0:	f7ff ffde 	bl	80069a0 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d8f7      	bhi.n	80069e0 <HAL_Delay+0x28>
  {
  }
}
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000040 	.word	0x20000040

080069fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <__NVIC_SetPriorityGrouping+0x40>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <__NVIC_SetPriorityGrouping+0x44>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a2a:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <__NVIC_SetPriorityGrouping+0x40>)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	60d3      	str	r3, [r2, #12]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed00 	.word	0xe000ed00
 8006a40:	05fa0000 	.word	0x05fa0000

08006a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a48:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <__NVIC_GetPriorityGrouping+0x18>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	0a1b      	lsrs	r3, r3, #8
 8006a4e:	f003 0307 	and.w	r3, r3, #7
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	e000ed00 	.word	0xe000ed00

08006a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	db0b      	blt.n	8006a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	f003 021f 	and.w	r2, r3, #31
 8006a78:	4907      	ldr	r1, [pc, #28]	; (8006a98 <__NVIC_EnableIRQ+0x38>)
 8006a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	2001      	movs	r0, #1
 8006a82:	fa00 f202 	lsl.w	r2, r0, r2
 8006a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	e000e100 	.word	0xe000e100

08006a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	6039      	str	r1, [r7, #0]
 8006aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	db0a      	blt.n	8006ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	490c      	ldr	r1, [pc, #48]	; (8006ae8 <__NVIC_SetPriority+0x4c>)
 8006ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aba:	0112      	lsls	r2, r2, #4
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	440b      	add	r3, r1
 8006ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ac4:	e00a      	b.n	8006adc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4908      	ldr	r1, [pc, #32]	; (8006aec <__NVIC_SetPriority+0x50>)
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	3b04      	subs	r3, #4
 8006ad4:	0112      	lsls	r2, r2, #4
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	440b      	add	r3, r1
 8006ada:	761a      	strb	r2, [r3, #24]
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	e000e100 	.word	0xe000e100
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b089      	sub	sp, #36	; 0x24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f1c3 0307 	rsb	r3, r3, #7
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	bf28      	it	cs
 8006b0e:	2304      	movcs	r3, #4
 8006b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	3304      	adds	r3, #4
 8006b16:	2b06      	cmp	r3, #6
 8006b18:	d902      	bls.n	8006b20 <NVIC_EncodePriority+0x30>
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	3b03      	subs	r3, #3
 8006b1e:	e000      	b.n	8006b22 <NVIC_EncodePriority+0x32>
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43da      	mvns	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	401a      	ands	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b38:	f04f 31ff 	mov.w	r1, #4294967295
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b42:	43d9      	mvns	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b48:	4313      	orrs	r3, r2
         );
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3724      	adds	r7, #36	; 0x24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b68:	d301      	bcc.n	8006b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e00f      	b.n	8006b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b6e:	4a0a      	ldr	r2, [pc, #40]	; (8006b98 <SysTick_Config+0x40>)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b76:	210f      	movs	r1, #15
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	f7ff ff8e 	bl	8006a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <SysTick_Config+0x40>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <SysTick_Config+0x40>)
 8006b88:	2207      	movs	r2, #7
 8006b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	e000e010 	.word	0xe000e010

08006b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff ff29 	bl	80069fc <__NVIC_SetPriorityGrouping>
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	4603      	mov	r3, r0
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bc4:	f7ff ff3e 	bl	8006a44 <__NVIC_GetPriorityGrouping>
 8006bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f7ff ff8e 	bl	8006af0 <NVIC_EncodePriority>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff5d 	bl	8006a9c <__NVIC_SetPriority>
}
 8006be2:	bf00      	nop
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff ff31 	bl	8006a60 <__NVIC_EnableIRQ>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff ffa2 	bl	8006b58 <SysTick_Config>
 8006c14:	4603      	mov	r3, r0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b089      	sub	sp, #36	; 0x24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e175      	b.n	8006f2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006c40:	2201      	movs	r2, #1
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4013      	ands	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	f040 8164 	bne.w	8006f26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d00b      	beq.n	8006c7e <HAL_GPIO_Init+0x5e>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d007      	beq.n	8006c7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c72:	2b11      	cmp	r3, #17
 8006c74:	d003      	beq.n	8006c7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b12      	cmp	r3, #18
 8006c7c:	d130      	bne.n	8006ce0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	2203      	movs	r2, #3
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4013      	ands	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	091b      	lsrs	r3, r3, #4
 8006cca:	f003 0201 	and.w	r2, r3, #1
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	2203      	movs	r2, #3
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d003      	beq.n	8006d20 <HAL_GPIO_Init+0x100>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b12      	cmp	r3, #18
 8006d1e:	d123      	bne.n	8006d68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	08da      	lsrs	r2, r3, #3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3208      	adds	r2, #8
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	220f      	movs	r2, #15
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	4013      	ands	r3, r2
 8006d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	08da      	lsrs	r2, r3, #3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3208      	adds	r2, #8
 8006d62:	69b9      	ldr	r1, [r7, #24]
 8006d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	2203      	movs	r2, #3
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0203 	and.w	r2, r3, #3
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80be 	beq.w	8006f26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006daa:	4b65      	ldr	r3, [pc, #404]	; (8006f40 <HAL_GPIO_Init+0x320>)
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	4a64      	ldr	r2, [pc, #400]	; (8006f40 <HAL_GPIO_Init+0x320>)
 8006db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006db4:	6453      	str	r3, [r2, #68]	; 0x44
 8006db6:	4b62      	ldr	r3, [pc, #392]	; (8006f40 <HAL_GPIO_Init+0x320>)
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006dc2:	4a60      	ldr	r2, [pc, #384]	; (8006f44 <HAL_GPIO_Init+0x324>)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	089b      	lsrs	r3, r3, #2
 8006dc8:	3302      	adds	r3, #2
 8006dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	220f      	movs	r2, #15
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	43db      	mvns	r3, r3
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	4013      	ands	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a57      	ldr	r2, [pc, #348]	; (8006f48 <HAL_GPIO_Init+0x328>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d037      	beq.n	8006e5e <HAL_GPIO_Init+0x23e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a56      	ldr	r2, [pc, #344]	; (8006f4c <HAL_GPIO_Init+0x32c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d031      	beq.n	8006e5a <HAL_GPIO_Init+0x23a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a55      	ldr	r2, [pc, #340]	; (8006f50 <HAL_GPIO_Init+0x330>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d02b      	beq.n	8006e56 <HAL_GPIO_Init+0x236>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a54      	ldr	r2, [pc, #336]	; (8006f54 <HAL_GPIO_Init+0x334>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d025      	beq.n	8006e52 <HAL_GPIO_Init+0x232>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a53      	ldr	r2, [pc, #332]	; (8006f58 <HAL_GPIO_Init+0x338>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01f      	beq.n	8006e4e <HAL_GPIO_Init+0x22e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a52      	ldr	r2, [pc, #328]	; (8006f5c <HAL_GPIO_Init+0x33c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d019      	beq.n	8006e4a <HAL_GPIO_Init+0x22a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a51      	ldr	r2, [pc, #324]	; (8006f60 <HAL_GPIO_Init+0x340>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d013      	beq.n	8006e46 <HAL_GPIO_Init+0x226>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a50      	ldr	r2, [pc, #320]	; (8006f64 <HAL_GPIO_Init+0x344>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00d      	beq.n	8006e42 <HAL_GPIO_Init+0x222>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a4f      	ldr	r2, [pc, #316]	; (8006f68 <HAL_GPIO_Init+0x348>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d007      	beq.n	8006e3e <HAL_GPIO_Init+0x21e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a4e      	ldr	r2, [pc, #312]	; (8006f6c <HAL_GPIO_Init+0x34c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d101      	bne.n	8006e3a <HAL_GPIO_Init+0x21a>
 8006e36:	2309      	movs	r3, #9
 8006e38:	e012      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	e010      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e3e:	2308      	movs	r3, #8
 8006e40:	e00e      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e42:	2307      	movs	r3, #7
 8006e44:	e00c      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e46:	2306      	movs	r3, #6
 8006e48:	e00a      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e4a:	2305      	movs	r3, #5
 8006e4c:	e008      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e4e:	2304      	movs	r3, #4
 8006e50:	e006      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e52:	2303      	movs	r3, #3
 8006e54:	e004      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e002      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <HAL_GPIO_Init+0x240>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	f002 0203 	and.w	r2, r2, #3
 8006e66:	0092      	lsls	r2, r2, #2
 8006e68:	4093      	lsls	r3, r2
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006e70:	4934      	ldr	r1, [pc, #208]	; (8006f44 <HAL_GPIO_Init+0x324>)
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	089b      	lsrs	r3, r3, #2
 8006e76:	3302      	adds	r3, #2
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e7e:	4b3c      	ldr	r3, [pc, #240]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	43db      	mvns	r3, r3
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ea2:	4a33      	ldr	r2, [pc, #204]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ea8:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ecc:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ed2:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	43db      	mvns	r3, r3
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ef6:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_GPIO_Init+0x350>)
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	f67f ae86 	bls.w	8006c40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006f34:	bf00      	nop
 8006f36:	3724      	adds	r7, #36	; 0x24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40013800 	.word	0x40013800
 8006f48:	40020000 	.word	0x40020000
 8006f4c:	40020400 	.word	0x40020400
 8006f50:	40020800 	.word	0x40020800
 8006f54:	40020c00 	.word	0x40020c00
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	40021400 	.word	0x40021400
 8006f60:	40021800 	.word	0x40021800
 8006f64:	40021c00 	.word	0x40021c00
 8006f68:	40022000 	.word	0x40022000
 8006f6c:	40022400 	.word	0x40022400
 8006f70:	40013c00 	.word	0x40013c00

08006f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	807b      	strh	r3, [r7, #2]
 8006f80:	4613      	mov	r3, r2
 8006f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f84:	787b      	ldrb	r3, [r7, #1]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f8a:	887a      	ldrh	r2, [r7, #2]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006f90:	e003      	b.n	8006f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006f92:	887b      	ldrh	r3, [r7, #2]
 8006f94:	041a      	lsls	r2, r3, #16
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	619a      	str	r2, [r3, #24]
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fb2:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fb4:	695a      	ldr	r2, [r3, #20]
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d006      	beq.n	8006fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fbe:	4a05      	ldr	r2, [pc, #20]	; (8006fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fd fd12 	bl	80049f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40013c00 	.word	0x40013c00

08006fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e07f      	b.n	80070ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff f8d2 	bl	80061a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007028:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007038:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d107      	bne.n	8007052 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800704e:	609a      	str	r2, [r3, #8]
 8007050:	e006      	b.n	8007060 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800705e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d104      	bne.n	8007072 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007070:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6859      	ldr	r1, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <HAL_I2C_Init+0x11c>)
 800707e:	430b      	orrs	r3, r1
 8007080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	ea42 0103 	orr.w	r1, r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69d9      	ldr	r1, [r3, #28]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1a      	ldr	r2, [r3, #32]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	02008000 	.word	0x02008000

080070f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	461a      	mov	r2, r3
 8007104:	460b      	mov	r3, r1
 8007106:	817b      	strh	r3, [r7, #10]
 8007108:	4613      	mov	r3, r2
 800710a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b20      	cmp	r3, #32
 8007116:	f040 80da 	bne.w	80072ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_I2C_Master_Transmit+0x30>
 8007124:	2302      	movs	r3, #2
 8007126:	e0d3      	b.n	80072d0 <HAL_I2C_Master_Transmit+0x1d8>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007130:	f7ff fc36 	bl	80069a0 <HAL_GetTick>
 8007134:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2319      	movs	r3, #25
 800713c:	2201      	movs	r2, #1
 800713e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fa00 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e0be      	b.n	80072d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2221      	movs	r2, #33	; 0x21
 8007156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2210      	movs	r2, #16
 800715e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	893a      	ldrh	r2, [r7, #8]
 8007172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	2bff      	cmp	r3, #255	; 0xff
 8007182:	d90e      	bls.n	80071a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	22ff      	movs	r2, #255	; 0xff
 8007188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718e:	b2da      	uxtb	r2, r3
 8007190:	8979      	ldrh	r1, [r7, #10]
 8007192:	4b51      	ldr	r3, [pc, #324]	; (80072d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fb62 	bl	8007864 <I2C_TransferConfig>
 80071a0:	e06c      	b.n	800727c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	8979      	ldrh	r1, [r7, #10]
 80071b4:	4b48      	ldr	r3, [pc, #288]	; (80072d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fb51 	bl	8007864 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80071c2:	e05b      	b.n	800727c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	6a39      	ldr	r1, [r7, #32]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f9fd 	bl	80075c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e07b      	b.n	80072d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007200:	3b01      	subs	r3, #1
 8007202:	b29a      	uxth	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d034      	beq.n	800727c <HAL_I2C_Master_Transmit+0x184>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d130      	bne.n	800727c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	2200      	movs	r2, #0
 8007222:	2180      	movs	r1, #128	; 0x80
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f98f 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e04d      	b.n	80072d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007238:	b29b      	uxth	r3, r3
 800723a:	2bff      	cmp	r3, #255	; 0xff
 800723c:	d90e      	bls.n	800725c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	22ff      	movs	r2, #255	; 0xff
 8007242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007248:	b2da      	uxtb	r2, r3
 800724a:	8979      	ldrh	r1, [r7, #10]
 800724c:	2300      	movs	r3, #0
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fb05 	bl	8007864 <I2C_TransferConfig>
 800725a:	e00f      	b.n	800727c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726a:	b2da      	uxtb	r2, r3
 800726c:	8979      	ldrh	r1, [r7, #10]
 800726e:	2300      	movs	r3, #0
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 faf4 	bl	8007864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d19e      	bne.n	80071c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f9dc 	bl	8007648 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e01a      	b.n	80072d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2220      	movs	r2, #32
 80072a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6859      	ldr	r1, [r3, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_I2C_Master_Transmit+0x1e4>)
 80072ae:	400b      	ands	r3, r1
 80072b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	80002000 	.word	0x80002000
 80072dc:	fe00e800 	.word	0xfe00e800

080072e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	461a      	mov	r2, r3
 80072ec:	460b      	mov	r3, r1
 80072ee:	817b      	strh	r3, [r7, #10]
 80072f0:	4613      	mov	r3, r2
 80072f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	f040 80db 	bne.w	80074b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_I2C_Master_Receive+0x30>
 800730c:	2302      	movs	r3, #2
 800730e:	e0d4      	b.n	80074ba <HAL_I2C_Master_Receive+0x1da>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007318:	f7ff fb42 	bl	80069a0 <HAL_GetTick>
 800731c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	2319      	movs	r3, #25
 8007324:	2201      	movs	r2, #1
 8007326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f90c 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e0bf      	b.n	80074ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2222      	movs	r2, #34	; 0x22
 800733e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2210      	movs	r2, #16
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	893a      	ldrh	r2, [r7, #8]
 800735a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	2bff      	cmp	r3, #255	; 0xff
 800736a:	d90e      	bls.n	800738a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	22ff      	movs	r2, #255	; 0xff
 8007370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007376:	b2da      	uxtb	r2, r3
 8007378:	8979      	ldrh	r1, [r7, #10]
 800737a:	4b52      	ldr	r3, [pc, #328]	; (80074c4 <HAL_I2C_Master_Receive+0x1e4>)
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fa6e 	bl	8007864 <I2C_TransferConfig>
 8007388:	e06d      	b.n	8007466 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007398:	b2da      	uxtb	r2, r3
 800739a:	8979      	ldrh	r1, [r7, #10]
 800739c:	4b49      	ldr	r3, [pc, #292]	; (80074c4 <HAL_I2C_Master_Receive+0x1e4>)
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa5d 	bl	8007864 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80073aa:	e05c      	b.n	8007466 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	6a39      	ldr	r1, [r7, #32]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f985 	bl	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e07c      	b.n	80074ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d034      	beq.n	8007466 <HAL_I2C_Master_Receive+0x186>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	d130      	bne.n	8007466 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	2200      	movs	r2, #0
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 f89a 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e04d      	b.n	80074ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	2bff      	cmp	r3, #255	; 0xff
 8007426:	d90e      	bls.n	8007446 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007432:	b2da      	uxtb	r2, r3
 8007434:	8979      	ldrh	r1, [r7, #10]
 8007436:	2300      	movs	r3, #0
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fa10 	bl	8007864 <I2C_TransferConfig>
 8007444:	e00f      	b.n	8007466 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007454:	b2da      	uxtb	r2, r3
 8007456:	8979      	ldrh	r1, [r7, #10]
 8007458:	2300      	movs	r3, #0
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f9ff 	bl	8007864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d19d      	bne.n	80073ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	6a39      	ldr	r1, [r7, #32]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f8e7 	bl	8007648 <I2C_WaitOnSTOPFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e01a      	b.n	80074ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2220      	movs	r2, #32
 800748a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <HAL_I2C_Master_Receive+0x1e8>)
 8007498:	400b      	ands	r3, r1
 800749a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	80002400 	.word	0x80002400
 80074c8:	fe00e800 	.word	0xfe00e800

080074cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074da:	b2db      	uxtb	r3, r3
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d103      	bne.n	800751e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2200      	movs	r2, #0
 800751c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b01      	cmp	r3, #1
 800752a:	d007      	beq.n	800753c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0201 	orr.w	r2, r2, #1
 800753a:	619a      	str	r2, [r3, #24]
  }
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007558:	e022      	b.n	80075a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d01e      	beq.n	80075a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7ff fa1d 	bl	80069a0 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d113      	bne.n	80075a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e00f      	b.n	80075c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4013      	ands	r3, r2
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d0cd      	beq.n	800755a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075d4:	e02c      	b.n	8007630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f8dc 	bl	8007798 <I2C_IsAcknowledgeFailed>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e02a      	b.n	8007640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d01e      	beq.n	8007630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f2:	f7ff f9d5 	bl	80069a0 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d113      	bne.n	8007630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e007      	b.n	8007640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d1cb      	bne.n	80075d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007654:	e028      	b.n	80076a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f89c 	bl	8007798 <I2C_IsAcknowledgeFailed>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e026      	b.n	80076b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766a:	f7ff f999 	bl	80069a0 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	429a      	cmp	r2, r3
 8007678:	d302      	bcc.n	8007680 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d113      	bne.n	80076a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e007      	b.n	80076b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d1cf      	bne.n	8007656 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076cc:	e055      	b.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 f860 	bl	8007798 <I2C_IsAcknowledgeFailed>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e053      	b.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d129      	bne.n	8007744 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d105      	bne.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e03f      	b.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2220      	movs	r2, #32
 8007710:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6859      	ldr	r1, [r3, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	4b1d      	ldr	r3, [pc, #116]	; (8007794 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800771e:	400b      	ands	r3, r1
 8007720:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e022      	b.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007744:	f7ff f92c 	bl	80069a0 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10f      	bne.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775e:	f043 0220 	orr.w	r2, r3, #32
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e007      	b.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b04      	cmp	r3, #4
 8007786:	d1a2      	bne.n	80076ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	fe00e800 	.word	0xfe00e800

08007798 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d151      	bne.n	8007856 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077b2:	e022      	b.n	80077fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d01e      	beq.n	80077fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077bc:	f7ff f8f0 	bl	80069a0 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <I2C_IsAcknowledgeFailed+0x3a>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d113      	bne.n	80077fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	f043 0220 	orr.w	r2, r3, #32
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e02e      	b.n	8007858 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b20      	cmp	r3, #32
 8007806:	d1d5      	bne.n	80077b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2210      	movs	r2, #16
 800780e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2220      	movs	r2, #32
 8007816:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff fe71 	bl	8007500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6859      	ldr	r1, [r3, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <I2C_IsAcknowledgeFailed+0xc8>)
 800782a:	400b      	ands	r3, r1
 800782c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	f043 0204 	orr.w	r2, r3, #4
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	fe00e800 	.word	0xfe00e800

08007864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	607b      	str	r3, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	817b      	strh	r3, [r7, #10]
 8007872:	4613      	mov	r3, r2
 8007874:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	0d5b      	lsrs	r3, r3, #21
 8007880:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007884:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <I2C_TransferConfig+0x58>)
 8007886:	430b      	orrs	r3, r1
 8007888:	43db      	mvns	r3, r3
 800788a:	ea02 0103 	and.w	r1, r2, r3
 800788e:	897b      	ldrh	r3, [r7, #10]
 8007890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007894:	7a7b      	ldrb	r3, [r7, #9]
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	03ff63ff 	.word	0x03ff63ff

080078c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d138      	bne.n	8007948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e032      	b.n	800794a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	; 0x24
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b20      	cmp	r3, #32
 800796a:	d139      	bne.n	80079e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007976:	2302      	movs	r3, #2
 8007978:	e033      	b.n	80079e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2224      	movs	r2, #36	; 0x24
 8007986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	e000      	b.n	80079e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f0:	b08f      	sub	sp, #60	; 0x3c
 80079f2:	af0a      	add	r7, sp, #40	; 0x28
 80079f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e116      	b.n	8007c2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fe fdf0 	bl	8006600 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2203      	movs	r2, #3
 8007a24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f003 f8aa 	bl	800ab98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	687e      	ldr	r6, [r7, #4]
 8007a4c:	466d      	mov	r5, sp
 8007a4e:	f106 0410 	add.w	r4, r6, #16
 8007a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007a62:	1d33      	adds	r3, r6, #4
 8007a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a66:	6838      	ldr	r0, [r7, #0]
 8007a68:	f003 f83e 	bl	800aae8 <USB_CoreInit>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e0d7      	b.n	8007c2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f003 f898 	bl	800abba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
 8007a8e:	e04a      	b.n	8007b26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a90:	7bfa      	ldrb	r2, [r7, #15]
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	333d      	adds	r3, #61	; 0x3d
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007aa4:	7bfa      	ldrb	r2, [r7, #15]
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	333c      	adds	r3, #60	; 0x3c
 8007ab4:	7bfa      	ldrb	r2, [r7, #15]
 8007ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ab8:	7bfa      	ldrb	r2, [r7, #15]
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	b298      	uxth	r0, r3
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	3342      	adds	r3, #66	; 0x42
 8007acc:	4602      	mov	r2, r0
 8007ace:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007ad0:	7bfa      	ldrb	r2, [r7, #15]
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	333f      	adds	r3, #63	; 0x3f
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ae4:	7bfa      	ldrb	r2, [r7, #15]
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	440b      	add	r3, r1
 8007af2:	3344      	adds	r3, #68	; 0x44
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007af8:	7bfa      	ldrb	r2, [r7, #15]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4613      	mov	r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	1a9b      	subs	r3, r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	3348      	adds	r3, #72	; 0x48
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007b0c:	7bfa      	ldrb	r2, [r7, #15]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3350      	adds	r3, #80	; 0x50
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	3301      	adds	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
 8007b26:	7bfa      	ldrb	r2, [r7, #15]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d3af      	bcc.n	8007a90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	e044      	b.n	8007bc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007b36:	7bfa      	ldrb	r2, [r7, #15]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007b4c:	7bfa      	ldrb	r2, [r7, #15]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007b5e:	7bfa      	ldrb	r2, [r7, #15]
 8007b60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b62:	7bfa      	ldrb	r2, [r7, #15]
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b74:	2200      	movs	r2, #0
 8007b76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b78:	7bfa      	ldrb	r2, [r7, #15]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b8e:	7bfa      	ldrb	r2, [r7, #15]
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ba4:	7bfa      	ldrb	r2, [r7, #15]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
 8007bc0:	7bfa      	ldrb	r2, [r7, #15]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d3b5      	bcc.n	8007b36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	687e      	ldr	r6, [r7, #4]
 8007bd2:	466d      	mov	r5, sp
 8007bd4:	f106 0410 	add.w	r4, r6, #16
 8007bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007be4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007be8:	1d33      	adds	r3, r6, #4
 8007bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bec:	6838      	ldr	r0, [r7, #0]
 8007bee:	f003 f80f 	bl	800ac10 <USB_DevInit>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e014      	b.n	8007c2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d102      	bne.n	8007c22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f80b 	bl	8007c38 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f003 f9c1 	bl	800afae <USB_DevDisconnect>

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007c38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c66:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <HAL_PCDEx_ActivateLPM+0x44>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	10000003 	.word	0x10000003

08007c80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c8e:	6013      	str	r3, [r2, #0]
}
 8007c90:	bf00      	nop
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40007000 	.word	0x40007000

08007ca0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007caa:	4b23      	ldr	r3, [pc, #140]	; (8007d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	4a22      	ldr	r2, [pc, #136]	; (8007d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8007cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb6:	4b20      	ldr	r3, [pc, #128]	; (8007d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007cc2:	4b1e      	ldr	r3, [pc, #120]	; (8007d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1d      	ldr	r2, [pc, #116]	; (8007d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ccc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cce:	f7fe fe67 	bl	80069a0 <HAL_GetTick>
 8007cd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007cd4:	e009      	b.n	8007cea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007cd6:	f7fe fe63 	bl	80069a0 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce4:	d901      	bls.n	8007cea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e022      	b.n	8007d30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007cea:	4b14      	ldr	r3, [pc, #80]	; (8007d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf6:	d1ee      	bne.n	8007cd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007cf8:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a0f      	ldr	r2, [pc, #60]	; (8007d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d04:	f7fe fe4c 	bl	80069a0 <HAL_GetTick>
 8007d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d0a:	e009      	b.n	8007d20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d0c:	f7fe fe48 	bl	80069a0 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d1a:	d901      	bls.n	8007d20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e007      	b.n	8007d30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2c:	d1ee      	bne.n	8007d0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	40007000 	.word	0x40007000

08007d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e29b      	b.n	800828e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 8087 	beq.w	8007e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d64:	4b96      	ldr	r3, [pc, #600]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 030c 	and.w	r3, r3, #12
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d00c      	beq.n	8007d8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d70:	4b93      	ldr	r3, [pc, #588]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 030c 	and.w	r3, r3, #12
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d112      	bne.n	8007da2 <HAL_RCC_OscConfig+0x62>
 8007d7c:	4b90      	ldr	r3, [pc, #576]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d88:	d10b      	bne.n	8007da2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d8a:	4b8d      	ldr	r3, [pc, #564]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d06c      	beq.n	8007e70 <HAL_RCC_OscConfig+0x130>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d168      	bne.n	8007e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e275      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007daa:	d106      	bne.n	8007dba <HAL_RCC_OscConfig+0x7a>
 8007dac:	4b84      	ldr	r3, [pc, #528]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a83      	ldr	r2, [pc, #524]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	e02e      	b.n	8007e18 <HAL_RCC_OscConfig+0xd8>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10c      	bne.n	8007ddc <HAL_RCC_OscConfig+0x9c>
 8007dc2:	4b7f      	ldr	r3, [pc, #508]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a7e      	ldr	r2, [pc, #504]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	4b7c      	ldr	r3, [pc, #496]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a7b      	ldr	r2, [pc, #492]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	e01d      	b.n	8007e18 <HAL_RCC_OscConfig+0xd8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de4:	d10c      	bne.n	8007e00 <HAL_RCC_OscConfig+0xc0>
 8007de6:	4b76      	ldr	r3, [pc, #472]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a75      	ldr	r2, [pc, #468]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	4b73      	ldr	r3, [pc, #460]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a72      	ldr	r2, [pc, #456]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	e00b      	b.n	8007e18 <HAL_RCC_OscConfig+0xd8>
 8007e00:	4b6f      	ldr	r3, [pc, #444]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a6e      	ldr	r2, [pc, #440]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	4b6c      	ldr	r3, [pc, #432]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a6b      	ldr	r2, [pc, #428]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d013      	beq.n	8007e48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e20:	f7fe fdbe 	bl	80069a0 <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e28:	f7fe fdba 	bl	80069a0 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b64      	cmp	r3, #100	; 0x64
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e229      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3a:	4b61      	ldr	r3, [pc, #388]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCC_OscConfig+0xe8>
 8007e46:	e014      	b.n	8007e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e48:	f7fe fdaa 	bl	80069a0 <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e50:	f7fe fda6 	bl	80069a0 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b64      	cmp	r3, #100	; 0x64
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e215      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e62:	4b57      	ldr	r3, [pc, #348]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f0      	bne.n	8007e50 <HAL_RCC_OscConfig+0x110>
 8007e6e:	e000      	b.n	8007e72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d069      	beq.n	8007f52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e7e:	4b50      	ldr	r3, [pc, #320]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 030c 	and.w	r3, r3, #12
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e8a:	4b4d      	ldr	r3, [pc, #308]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 030c 	and.w	r3, r3, #12
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d11c      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x190>
 8007e96:	4b4a      	ldr	r3, [pc, #296]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d116      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ea2:	4b47      	ldr	r3, [pc, #284]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_RCC_OscConfig+0x17a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d001      	beq.n	8007eba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e1e9      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eba:	4b41      	ldr	r3, [pc, #260]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	493d      	ldr	r1, [pc, #244]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ece:	e040      	b.n	8007f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d023      	beq.n	8007f20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ed8:	4b39      	ldr	r3, [pc, #228]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a38      	ldr	r2, [pc, #224]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fe fd5c 	bl	80069a0 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eec:	f7fe fd58 	bl	80069a0 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e1c7      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007efe:	4b30      	ldr	r3, [pc, #192]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f0a:	4b2d      	ldr	r3, [pc, #180]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4929      	ldr	r1, [pc, #164]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	600b      	str	r3, [r1, #0]
 8007f1e:	e018      	b.n	8007f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f26:	f023 0301 	bic.w	r3, r3, #1
 8007f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fe fd38 	bl	80069a0 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f34:	f7fe fd34 	bl	80069a0 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e1a3      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f46:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f0      	bne.n	8007f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d038      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d019      	beq.n	8007f9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f66:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6a:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f72:	f7fe fd15 	bl	80069a0 <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f78:	e008      	b.n	8007f8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f7a:	f7fe fd11 	bl	80069a0 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e180      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0f0      	beq.n	8007f7a <HAL_RCC_OscConfig+0x23a>
 8007f98:	e01a      	b.n	8007fd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f9a:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9e:	4a08      	ldr	r2, [pc, #32]	; (8007fc0 <HAL_RCC_OscConfig+0x280>)
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa6:	f7fe fcfb 	bl	80069a0 <HAL_GetTick>
 8007faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fac:	e00a      	b.n	8007fc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fae:	f7fe fcf7 	bl	80069a0 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d903      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e166      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
 8007fc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fc4:	4b92      	ldr	r3, [pc, #584]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8007fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1ee      	bne.n	8007fae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80a4 	beq.w	8008126 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fde:	4b8c      	ldr	r3, [pc, #560]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10d      	bne.n	8008006 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fea:	4b89      	ldr	r3, [pc, #548]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	4a88      	ldr	r2, [pc, #544]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8007ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ff6:	4b86      	ldr	r3, [pc, #536]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ffe:	60bb      	str	r3, [r7, #8]
 8008000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008002:	2301      	movs	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008006:	4b83      	ldr	r3, [pc, #524]	; (8008214 <HAL_RCC_OscConfig+0x4d4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	2b00      	cmp	r3, #0
 8008010:	d118      	bne.n	8008044 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008012:	4b80      	ldr	r3, [pc, #512]	; (8008214 <HAL_RCC_OscConfig+0x4d4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a7f      	ldr	r2, [pc, #508]	; (8008214 <HAL_RCC_OscConfig+0x4d4>)
 8008018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800801c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800801e:	f7fe fcbf 	bl	80069a0 <HAL_GetTick>
 8008022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008024:	e008      	b.n	8008038 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008026:	f7fe fcbb 	bl	80069a0 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b64      	cmp	r3, #100	; 0x64
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e12a      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008038:	4b76      	ldr	r3, [pc, #472]	; (8008214 <HAL_RCC_OscConfig+0x4d4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d106      	bne.n	800805a <HAL_RCC_OscConfig+0x31a>
 800804c:	4b70      	ldr	r3, [pc, #448]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	4a6f      	ldr	r2, [pc, #444]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	6713      	str	r3, [r2, #112]	; 0x70
 8008058:	e02d      	b.n	80080b6 <HAL_RCC_OscConfig+0x376>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10c      	bne.n	800807c <HAL_RCC_OscConfig+0x33c>
 8008062:	4b6b      	ldr	r3, [pc, #428]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	4a6a      	ldr	r2, [pc, #424]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	6713      	str	r3, [r2, #112]	; 0x70
 800806e:	4b68      	ldr	r3, [pc, #416]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	4a67      	ldr	r2, [pc, #412]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008074:	f023 0304 	bic.w	r3, r3, #4
 8008078:	6713      	str	r3, [r2, #112]	; 0x70
 800807a:	e01c      	b.n	80080b6 <HAL_RCC_OscConfig+0x376>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b05      	cmp	r3, #5
 8008082:	d10c      	bne.n	800809e <HAL_RCC_OscConfig+0x35e>
 8008084:	4b62      	ldr	r3, [pc, #392]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008088:	4a61      	ldr	r2, [pc, #388]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 800808a:	f043 0304 	orr.w	r3, r3, #4
 800808e:	6713      	str	r3, [r2, #112]	; 0x70
 8008090:	4b5f      	ldr	r3, [pc, #380]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	4a5e      	ldr	r2, [pc, #376]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008096:	f043 0301 	orr.w	r3, r3, #1
 800809a:	6713      	str	r3, [r2, #112]	; 0x70
 800809c:	e00b      	b.n	80080b6 <HAL_RCC_OscConfig+0x376>
 800809e:	4b5c      	ldr	r3, [pc, #368]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	4a5b      	ldr	r2, [pc, #364]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	6713      	str	r3, [r2, #112]	; 0x70
 80080aa:	4b59      	ldr	r3, [pc, #356]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a58      	ldr	r2, [pc, #352]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80080b0:	f023 0304 	bic.w	r3, r3, #4
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d015      	beq.n	80080ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080be:	f7fe fc6f 	bl	80069a0 <HAL_GetTick>
 80080c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080c4:	e00a      	b.n	80080dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080c6:	f7fe fc6b 	bl	80069a0 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e0d8      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080dc:	4b4c      	ldr	r3, [pc, #304]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0ee      	beq.n	80080c6 <HAL_RCC_OscConfig+0x386>
 80080e8:	e014      	b.n	8008114 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ea:	f7fe fc59 	bl	80069a0 <HAL_GetTick>
 80080ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080f0:	e00a      	b.n	8008108 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f2:	f7fe fc55 	bl	80069a0 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008100:	4293      	cmp	r3, r2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e0c2      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008108:	4b41      	ldr	r3, [pc, #260]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 800810a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1ee      	bne.n	80080f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d105      	bne.n	8008126 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800811a:	4b3d      	ldr	r3, [pc, #244]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	4a3c      	ldr	r2, [pc, #240]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80ae 	beq.w	800828c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008130:	4b37      	ldr	r3, [pc, #220]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f003 030c 	and.w	r3, r3, #12
 8008138:	2b08      	cmp	r3, #8
 800813a:	d06d      	beq.n	8008218 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d14b      	bne.n	80081dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008144:	4b32      	ldr	r3, [pc, #200]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a31      	ldr	r2, [pc, #196]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 800814a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800814e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fe fc26 	bl	80069a0 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008158:	f7fe fc22 	bl	80069a0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e091      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800816a:	4b29      	ldr	r3, [pc, #164]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69da      	ldr	r2, [r3, #28]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	019b      	lsls	r3, r3, #6
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	085b      	lsrs	r3, r3, #1
 800818e:	3b01      	subs	r3, #1
 8008190:	041b      	lsls	r3, r3, #16
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	061b      	lsls	r3, r3, #24
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a0:	071b      	lsls	r3, r3, #28
 80081a2:	491b      	ldr	r1, [pc, #108]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081a8:	4b19      	ldr	r3, [pc, #100]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a18      	ldr	r2, [pc, #96]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80081ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b4:	f7fe fbf4 	bl	80069a0 <HAL_GetTick>
 80081b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ba:	e008      	b.n	80081ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081bc:	f7fe fbf0 	bl	80069a0 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e05f      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ce:	4b10      	ldr	r3, [pc, #64]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f0      	beq.n	80081bc <HAL_RCC_OscConfig+0x47c>
 80081da:	e057      	b.n	800828c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081dc:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0b      	ldr	r2, [pc, #44]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 80081e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fe fbda 	bl	80069a0 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081f0:	f7fe fbd6 	bl	80069a0 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e045      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008202:	4b03      	ldr	r3, [pc, #12]	; (8008210 <HAL_RCC_OscConfig+0x4d0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f0      	bne.n	80081f0 <HAL_RCC_OscConfig+0x4b0>
 800820e:	e03d      	b.n	800828c <HAL_RCC_OscConfig+0x54c>
 8008210:	40023800 	.word	0x40023800
 8008214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008218:	4b1f      	ldr	r3, [pc, #124]	; (8008298 <HAL_RCC_OscConfig+0x558>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d030      	beq.n	8008288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008230:	429a      	cmp	r2, r3
 8008232:	d129      	bne.n	8008288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800823e:	429a      	cmp	r2, r3
 8008240:	d122      	bne.n	8008288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008248:	4013      	ands	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800824e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008250:	4293      	cmp	r3, r2
 8008252:	d119      	bne.n	8008288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	3b01      	subs	r3, #1
 8008262:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008264:	429a      	cmp	r2, r3
 8008266:	d10f      	bne.n	8008288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008274:	429a      	cmp	r2, r3
 8008276:	d107      	bne.n	8008288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d001      	beq.n	800828c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40023800 	.word	0x40023800

0800829c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0d0      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082b4:	4b6a      	ldr	r3, [pc, #424]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d910      	bls.n	80082e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c2:	4b67      	ldr	r3, [pc, #412]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f023 020f 	bic.w	r2, r3, #15
 80082ca:	4965      	ldr	r1, [pc, #404]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d2:	4b63      	ldr	r3, [pc, #396]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d001      	beq.n	80082e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e0b8      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d020      	beq.n	8008332 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082fc:	4b59      	ldr	r3, [pc, #356]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	4a58      	ldr	r2, [pc, #352]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008314:	4b53      	ldr	r3, [pc, #332]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	4a52      	ldr	r2, [pc, #328]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 800831a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800831e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008320:	4b50      	ldr	r3, [pc, #320]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	494d      	ldr	r1, [pc, #308]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 800832e:	4313      	orrs	r3, r2
 8008330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d040      	beq.n	80083c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d107      	bne.n	8008356 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008346:	4b47      	ldr	r3, [pc, #284]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d115      	bne.n	800837e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e07f      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d107      	bne.n	800836e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800835e:	4b41      	ldr	r3, [pc, #260]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e073      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800836e:	4b3d      	ldr	r3, [pc, #244]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e06b      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800837e:	4b39      	ldr	r3, [pc, #228]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f023 0203 	bic.w	r2, r3, #3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4936      	ldr	r1, [pc, #216]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 800838c:	4313      	orrs	r3, r2
 800838e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008390:	f7fe fb06 	bl	80069a0 <HAL_GetTick>
 8008394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008396:	e00a      	b.n	80083ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008398:	f7fe fb02 	bl	80069a0 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e053      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ae:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 020c 	and.w	r2, r3, #12
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	429a      	cmp	r2, r3
 80083be:	d1eb      	bne.n	8008398 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083c0:	4b27      	ldr	r3, [pc, #156]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d210      	bcs.n	80083f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ce:	4b24      	ldr	r3, [pc, #144]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f023 020f 	bic.w	r2, r3, #15
 80083d6:	4922      	ldr	r1, [pc, #136]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	4313      	orrs	r3, r2
 80083dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083de:	4b20      	ldr	r3, [pc, #128]	; (8008460 <HAL_RCC_ClockConfig+0x1c4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d001      	beq.n	80083f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e032      	b.n	8008456 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d008      	beq.n	800840e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4916      	ldr	r1, [pc, #88]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 800840a:	4313      	orrs	r3, r2
 800840c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0308 	and.w	r3, r3, #8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	490e      	ldr	r1, [pc, #56]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 800842a:	4313      	orrs	r3, r2
 800842c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800842e:	f000 f821 	bl	8008474 <HAL_RCC_GetSysClockFreq>
 8008432:	4601      	mov	r1, r0
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <HAL_RCC_ClockConfig+0x1c8>)
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	091b      	lsrs	r3, r3, #4
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <HAL_RCC_ClockConfig+0x1cc>)
 8008440:	5cd3      	ldrb	r3, [r2, r3]
 8008442:	fa21 f303 	lsr.w	r3, r1, r3
 8008446:	4a09      	ldr	r2, [pc, #36]	; (800846c <HAL_RCC_ClockConfig+0x1d0>)
 8008448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <HAL_RCC_ClockConfig+0x1d4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fa62 	bl	8006918 <HAL_InitTick>

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40023c00 	.word	0x40023c00
 8008464:	40023800 	.word	0x40023800
 8008468:	0800e870 	.word	0x0800e870
 800846c:	20000038 	.word	0x20000038
 8008470:	2000003c 	.word	0x2000003c

08008474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	2300      	movs	r3, #0
 8008484:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800848a:	4b63      	ldr	r3, [pc, #396]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 030c 	and.w	r3, r3, #12
 8008492:	2b04      	cmp	r3, #4
 8008494:	d007      	beq.n	80084a6 <HAL_RCC_GetSysClockFreq+0x32>
 8008496:	2b08      	cmp	r3, #8
 8008498:	d008      	beq.n	80084ac <HAL_RCC_GetSysClockFreq+0x38>
 800849a:	2b00      	cmp	r3, #0
 800849c:	f040 80b4 	bne.w	8008608 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084a0:	4b5e      	ldr	r3, [pc, #376]	; (800861c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80084a2:	60bb      	str	r3, [r7, #8]
      break;
 80084a4:	e0b3      	b.n	800860e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084a6:	4b5e      	ldr	r3, [pc, #376]	; (8008620 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80084a8:	60bb      	str	r3, [r7, #8]
      break;
 80084aa:	e0b0      	b.n	800860e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084ac:	4b5a      	ldr	r3, [pc, #360]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80084b6:	4b58      	ldr	r3, [pc, #352]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d04a      	beq.n	8008558 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084c2:	4b55      	ldr	r3, [pc, #340]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	f04f 0400 	mov.w	r4, #0
 80084cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	ea03 0501 	and.w	r5, r3, r1
 80084d8:	ea04 0602 	and.w	r6, r4, r2
 80084dc:	4629      	mov	r1, r5
 80084de:	4632      	mov	r2, r6
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	f04f 0400 	mov.w	r4, #0
 80084e8:	0154      	lsls	r4, r2, #5
 80084ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80084ee:	014b      	lsls	r3, r1, #5
 80084f0:	4619      	mov	r1, r3
 80084f2:	4622      	mov	r2, r4
 80084f4:	1b49      	subs	r1, r1, r5
 80084f6:	eb62 0206 	sbc.w	r2, r2, r6
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	f04f 0400 	mov.w	r4, #0
 8008502:	0194      	lsls	r4, r2, #6
 8008504:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008508:	018b      	lsls	r3, r1, #6
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	eb64 0402 	sbc.w	r4, r4, r2
 8008510:	f04f 0100 	mov.w	r1, #0
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	00e2      	lsls	r2, r4, #3
 800851a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800851e:	00d9      	lsls	r1, r3, #3
 8008520:	460b      	mov	r3, r1
 8008522:	4614      	mov	r4, r2
 8008524:	195b      	adds	r3, r3, r5
 8008526:	eb44 0406 	adc.w	r4, r4, r6
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	0262      	lsls	r2, r4, #9
 8008534:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008538:	0259      	lsls	r1, r3, #9
 800853a:	460b      	mov	r3, r1
 800853c:	4614      	mov	r4, r2
 800853e:	4618      	mov	r0, r3
 8008540:	4621      	mov	r1, r4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f04f 0400 	mov.w	r4, #0
 8008548:	461a      	mov	r2, r3
 800854a:	4623      	mov	r3, r4
 800854c:	f7f7 fed0 	bl	80002f0 <__aeabi_uldivmod>
 8008550:	4603      	mov	r3, r0
 8008552:	460c      	mov	r4, r1
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	e049      	b.n	80085ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008558:	4b2f      	ldr	r3, [pc, #188]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	099b      	lsrs	r3, r3, #6
 800855e:	f04f 0400 	mov.w	r4, #0
 8008562:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	ea03 0501 	and.w	r5, r3, r1
 800856e:	ea04 0602 	and.w	r6, r4, r2
 8008572:	4629      	mov	r1, r5
 8008574:	4632      	mov	r2, r6
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	f04f 0400 	mov.w	r4, #0
 800857e:	0154      	lsls	r4, r2, #5
 8008580:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008584:	014b      	lsls	r3, r1, #5
 8008586:	4619      	mov	r1, r3
 8008588:	4622      	mov	r2, r4
 800858a:	1b49      	subs	r1, r1, r5
 800858c:	eb62 0206 	sbc.w	r2, r2, r6
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	f04f 0400 	mov.w	r4, #0
 8008598:	0194      	lsls	r4, r2, #6
 800859a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800859e:	018b      	lsls	r3, r1, #6
 80085a0:	1a5b      	subs	r3, r3, r1
 80085a2:	eb64 0402 	sbc.w	r4, r4, r2
 80085a6:	f04f 0100 	mov.w	r1, #0
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	00e2      	lsls	r2, r4, #3
 80085b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80085b4:	00d9      	lsls	r1, r3, #3
 80085b6:	460b      	mov	r3, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	195b      	adds	r3, r3, r5
 80085bc:	eb44 0406 	adc.w	r4, r4, r6
 80085c0:	f04f 0100 	mov.w	r1, #0
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	02a2      	lsls	r2, r4, #10
 80085ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80085ce:	0299      	lsls	r1, r3, #10
 80085d0:	460b      	mov	r3, r1
 80085d2:	4614      	mov	r4, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	4621      	mov	r1, r4
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f04f 0400 	mov.w	r4, #0
 80085de:	461a      	mov	r2, r3
 80085e0:	4623      	mov	r3, r4
 80085e2:	f7f7 fe85 	bl	80002f0 <__aeabi_uldivmod>
 80085e6:	4603      	mov	r3, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	0c1b      	lsrs	r3, r3, #16
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	3301      	adds	r3, #1
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	fbb2 f3f3 	udiv	r3, r2, r3
 8008604:	60bb      	str	r3, [r7, #8]
      break;
 8008606:	e002      	b.n	800860e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008608:	4b04      	ldr	r3, [pc, #16]	; (800861c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800860a:	60bb      	str	r3, [r7, #8]
      break;
 800860c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800860e:	68bb      	ldr	r3, [r7, #8]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008618:	40023800 	.word	0x40023800
 800861c:	00f42400 	.word	0x00f42400
 8008620:	007a1200 	.word	0x007a1200

08008624 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008628:	4b03      	ldr	r3, [pc, #12]	; (8008638 <HAL_RCC_GetHCLKFreq+0x14>)
 800862a:	681b      	ldr	r3, [r3, #0]
}
 800862c:	4618      	mov	r0, r3
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20000038 	.word	0x20000038

0800863c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008640:	f7ff fff0 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8008644:	4601      	mov	r1, r0
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	0a9b      	lsrs	r3, r3, #10
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	4a03      	ldr	r2, [pc, #12]	; (8008660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008652:	5cd3      	ldrb	r3, [r2, r3]
 8008654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008658:	4618      	mov	r0, r3
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40023800 	.word	0x40023800
 8008660:	0800e880 	.word	0x0800e880

08008664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008668:	f7ff ffdc 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 800866c:	4601      	mov	r1, r0
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	0b5b      	lsrs	r3, r3, #13
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	4a03      	ldr	r2, [pc, #12]	; (8008688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800867a:	5cd3      	ldrb	r3, [r2, r3]
 800867c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008680:	4618      	mov	r0, r3
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40023800 	.word	0x40023800
 8008688:	0800e880 	.word	0x0800e880

0800868c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d012      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086b4:	4b69      	ldr	r3, [pc, #420]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	4a68      	ldr	r2, [pc, #416]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80086be:	6093      	str	r3, [r2, #8]
 80086c0:	4b66      	ldr	r3, [pc, #408]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	4964      	ldr	r1, [pc, #400]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80086d6:	2301      	movs	r3, #1
 80086d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d017      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086e6:	4b5d      	ldr	r3, [pc, #372]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f4:	4959      	ldr	r1, [pc, #356]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008704:	d101      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008712:	2301      	movs	r3, #1
 8008714:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d017      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008722:	4b4e      	ldr	r3, [pc, #312]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008728:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008730:	494a      	ldr	r1, [pc, #296]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008732:	4313      	orrs	r3, r2
 8008734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008740:	d101      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008742:	2301      	movs	r3, #1
 8008744:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800875e:	2301      	movs	r3, #1
 8008760:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 808b 	beq.w	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008770:	4b3a      	ldr	r3, [pc, #232]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	4a39      	ldr	r2, [pc, #228]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800877a:	6413      	str	r3, [r2, #64]	; 0x40
 800877c:	4b37      	ldr	r3, [pc, #220]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008784:	60bb      	str	r3, [r7, #8]
 8008786:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008788:	4b35      	ldr	r3, [pc, #212]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a34      	ldr	r2, [pc, #208]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800878e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008794:	f7fe f904 	bl	80069a0 <HAL_GetTick>
 8008798:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800879a:	e008      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800879c:	f7fe f900 	bl	80069a0 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b64      	cmp	r3, #100	; 0x64
 80087a8:	d901      	bls.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e38d      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80087ae:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f0      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087ba:	4b28      	ldr	r3, [pc, #160]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d035      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d02e      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087d8:	4b20      	ldr	r3, [pc, #128]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087e2:	4b1e      	ldr	r3, [pc, #120]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e6:	4a1d      	ldr	r2, [pc, #116]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087ee:	4b1b      	ldr	r3, [pc, #108]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	4a1a      	ldr	r2, [pc, #104]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80087fa:	4a18      	ldr	r2, [pc, #96]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008800:	4b16      	ldr	r3, [pc, #88]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b01      	cmp	r3, #1
 800880a:	d114      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7fe f8c8 	bl	80069a0 <HAL_GetTick>
 8008810:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008812:	e00a      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008814:	f7fe f8c4 	bl	80069a0 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008822:	4293      	cmp	r3, r2
 8008824:	d901      	bls.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e34f      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800882a:	4b0c      	ldr	r3, [pc, #48]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0ee      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800883e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008842:	d111      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008850:	4b04      	ldr	r3, [pc, #16]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008852:	400b      	ands	r3, r1
 8008854:	4901      	ldr	r1, [pc, #4]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	608b      	str	r3, [r1, #8]
 800885a:	e00b      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800885c:	40023800 	.word	0x40023800
 8008860:	40007000 	.word	0x40007000
 8008864:	0ffffcff 	.word	0x0ffffcff
 8008868:	4bb3      	ldr	r3, [pc, #716]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4ab2      	ldr	r2, [pc, #712]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800886e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008872:	6093      	str	r3, [r2, #8]
 8008874:	4bb0      	ldr	r3, [pc, #704]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008880:	49ad      	ldr	r1, [pc, #692]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008882:	4313      	orrs	r3, r2
 8008884:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	2b00      	cmp	r3, #0
 8008890:	d010      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008892:	4ba9      	ldr	r3, [pc, #676]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008898:	4aa7      	ldr	r2, [pc, #668]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800889a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800889e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80088a2:	4ba5      	ldr	r3, [pc, #660]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	49a2      	ldr	r1, [pc, #648]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088c0:	4b9d      	ldr	r3, [pc, #628]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ce:	499a      	ldr	r1, [pc, #616]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088e2:	4b95      	ldr	r3, [pc, #596]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f0:	4991      	ldr	r1, [pc, #580]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008904:	4b8c      	ldr	r3, [pc, #560]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008912:	4989      	ldr	r1, [pc, #548]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008914:	4313      	orrs	r3, r2
 8008916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008926:	4b84      	ldr	r3, [pc, #528]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008934:	4980      	ldr	r1, [pc, #512]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008936:	4313      	orrs	r3, r2
 8008938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008948:	4b7b      	ldr	r3, [pc, #492]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800894a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894e:	f023 0203 	bic.w	r2, r3, #3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	4978      	ldr	r1, [pc, #480]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008958:	4313      	orrs	r3, r2
 800895a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800896a:	4b73      	ldr	r3, [pc, #460]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800896c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008970:	f023 020c 	bic.w	r2, r3, #12
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008978:	496f      	ldr	r1, [pc, #444]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800897a:	4313      	orrs	r3, r2
 800897c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800898c:	4b6a      	ldr	r3, [pc, #424]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008992:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	4967      	ldr	r1, [pc, #412]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800899c:	4313      	orrs	r3, r2
 800899e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089ae:	4b62      	ldr	r3, [pc, #392]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089bc:	495e      	ldr	r1, [pc, #376]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00a      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80089d0:	4b59      	ldr	r3, [pc, #356]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089de:	4956      	ldr	r1, [pc, #344]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80089f2:	4b51      	ldr	r3, [pc, #324]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a00:	494d      	ldr	r1, [pc, #308]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008a14:	4b48      	ldr	r3, [pc, #288]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	4945      	ldr	r1, [pc, #276]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008a36:	4b40      	ldr	r3, [pc, #256]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a44:	493c      	ldr	r1, [pc, #240]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a58:	4b37      	ldr	r3, [pc, #220]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a66:	4934      	ldr	r1, [pc, #208]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d011      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a7a:	4b2f      	ldr	r3, [pc, #188]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a88:	492b      	ldr	r1, [pc, #172]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a98:	d101      	bne.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aba:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac8:	491b      	ldr	r1, [pc, #108]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008adc:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aec:	4912      	ldr	r1, [pc, #72]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008b00:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b10:	4909      	ldr	r1, [pc, #36]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00f      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b34:	e002      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008b36:	bf00      	nop
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	4985      	ldr	r1, [pc, #532]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008b50:	4b80      	ldr	r3, [pc, #512]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b60:	497c      	ldr	r1, [pc, #496]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d005      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b76:	f040 80d6 	bne.w	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b7a:	4b76      	ldr	r3, [pc, #472]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a75      	ldr	r2, [pc, #468]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b86:	f7fd ff0b 	bl	80069a0 <HAL_GetTick>
 8008b8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b8e:	f7fd ff07 	bl	80069a0 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b64      	cmp	r3, #100	; 0x64
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e194      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ba0:	4b6c      	ldr	r3, [pc, #432]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f0      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d021      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d11d      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008bc0:	4b64      	ldr	r3, [pc, #400]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc6:	0c1b      	lsrs	r3, r3, #16
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008bce:	4b61      	ldr	r3, [pc, #388]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd4:	0e1b      	lsrs	r3, r3, #24
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	019a      	lsls	r2, r3, #6
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	041b      	lsls	r3, r3, #16
 8008be6:	431a      	orrs	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	061b      	lsls	r3, r3, #24
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	071b      	lsls	r3, r3, #28
 8008bf4:	4957      	ldr	r1, [pc, #348]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c10:	d00a      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d02e      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c26:	d129      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c28:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c2e:	0c1b      	lsrs	r3, r3, #16
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c36:	4b47      	ldr	r3, [pc, #284]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c3c:	0f1b      	lsrs	r3, r3, #28
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	019a      	lsls	r2, r3, #6
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	041b      	lsls	r3, r3, #16
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	061b      	lsls	r3, r3, #24
 8008c56:	431a      	orrs	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	071b      	lsls	r3, r3, #28
 8008c5c:	493d      	ldr	r1, [pc, #244]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c64:	4b3b      	ldr	r3, [pc, #236]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c6a:	f023 021f 	bic.w	r2, r3, #31
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	3b01      	subs	r3, #1
 8008c74:	4937      	ldr	r1, [pc, #220]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d01d      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c88:	4b32      	ldr	r3, [pc, #200]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8e:	0e1b      	lsrs	r3, r3, #24
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c9c:	0f1b      	lsrs	r3, r3, #28
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	019a      	lsls	r2, r3, #6
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	041b      	lsls	r3, r3, #16
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	061b      	lsls	r3, r3, #24
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	071b      	lsls	r3, r3, #28
 8008cbc:	4925      	ldr	r1, [pc, #148]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d011      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	019a      	lsls	r2, r3, #6
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	041b      	lsls	r3, r3, #16
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	061b      	lsls	r3, r3, #24
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	071b      	lsls	r3, r3, #28
 8008cec:	4919      	ldr	r1, [pc, #100]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008cf4:	4b17      	ldr	r3, [pc, #92]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d00:	f7fd fe4e 	bl	80069a0 <HAL_GetTick>
 8008d04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d06:	e008      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d08:	f7fd fe4a 	bl	80069a0 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b64      	cmp	r3, #100	; 0x64
 8008d14:	d901      	bls.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e0d7      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f0      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 80cd 	bne.w	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d3a:	f7fd fe31 	bl	80069a0 <HAL_GetTick>
 8008d3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d40:	e00a      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d42:	f7fd fe2d 	bl	80069a0 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b64      	cmp	r3, #100	; 0x64
 8008d4e:	d903      	bls.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e0ba      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8008d54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d58:	4b5e      	ldr	r3, [pc, #376]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d64:	d0ed      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d02e      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d12a      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d8e:	4b51      	ldr	r3, [pc, #324]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008d9c:	4b4d      	ldr	r3, [pc, #308]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	0f1b      	lsrs	r3, r3, #28
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	019a      	lsls	r2, r3, #6
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	041b      	lsls	r3, r3, #16
 8008db4:	431a      	orrs	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	061b      	lsls	r3, r3, #24
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	071b      	lsls	r3, r3, #28
 8008dc2:	4944      	ldr	r1, [pc, #272]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008dca:	4b42      	ldr	r3, [pc, #264]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	493d      	ldr	r1, [pc, #244]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d022      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008df8:	d11d      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008dfa:	4b36      	ldr	r3, [pc, #216]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e00:	0e1b      	lsrs	r3, r3, #24
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e08:	4b32      	ldr	r3, [pc, #200]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	0f1b      	lsrs	r3, r3, #28
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	019a      	lsls	r2, r3, #6
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	041b      	lsls	r3, r3, #16
 8008e22:	431a      	orrs	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	061b      	lsls	r3, r3, #24
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	071b      	lsls	r3, r3, #28
 8008e2e:	4929      	ldr	r1, [pc, #164]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d028      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e42:	4b24      	ldr	r3, [pc, #144]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e48:	0e1b      	lsrs	r3, r3, #24
 8008e4a:	f003 030f 	and.w	r3, r3, #15
 8008e4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008e50:	4b20      	ldr	r3, [pc, #128]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e56:	0c1b      	lsrs	r3, r3, #16
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	019a      	lsls	r2, r3, #6
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	041b      	lsls	r3, r3, #16
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	071b      	lsls	r3, r3, #28
 8008e76:	4917      	ldr	r1, [pc, #92]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008e7e:	4b15      	ldr	r3, [pc, #84]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4911      	ldr	r1, [pc, #68]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008e94:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a0e      	ldr	r2, [pc, #56]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea0:	f7fd fd7e 	bl	80069a0 <HAL_GetTick>
 8008ea4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ea6:	e008      	b.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ea8:	f7fd fd7a 	bl	80069a0 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b64      	cmp	r3, #100	; 0x64
 8008eb4:	d901      	bls.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e007      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec6:	d1ef      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	40023800 	.word	0x40023800

08008ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e01d      	b.n	8008f26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7fd fa90 	bl	8006424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 fc90 	bl	800983c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0201 	orr.w	r2, r2, #1
 8008f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <HAL_TIM_Base_Start_IT+0x50>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d00b      	beq.n	8008f72 <HAL_TIM_Base_Start_IT+0x42>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	d007      	beq.n	8008f72 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	00010007 	.word	0x00010007

08008f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e01d      	b.n	8008fd2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f815 	bl	8008fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f000 fc3a 	bl	800983c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2201      	movs	r2, #1
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 ffb2 	bl	8009f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a17      	ldr	r2, [pc, #92]	; (800906c <HAL_TIM_PWM_Start+0x7c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d004      	beq.n	800901c <HAL_TIM_PWM_Start+0x2c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a16      	ldr	r2, [pc, #88]	; (8009070 <HAL_TIM_PWM_Start+0x80>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d101      	bne.n	8009020 <HAL_TIM_PWM_Start+0x30>
 800901c:	2301      	movs	r3, #1
 800901e:	e000      	b.n	8009022 <HAL_TIM_PWM_Start+0x32>
 8009020:	2300      	movs	r3, #0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d007      	beq.n	8009036 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <HAL_TIM_PWM_Start+0x84>)
 800903e:	4013      	ands	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b06      	cmp	r3, #6
 8009046:	d00b      	beq.n	8009060 <HAL_TIM_PWM_Start+0x70>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800904e:	d007      	beq.n	8009060 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	40010000 	.word	0x40010000
 8009070:	40010400 	.word	0x40010400
 8009074:	00010007 	.word	0x00010007

08009078 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e07b      	b.n	8009184 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d106      	bne.n	80090a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fd f8c5 	bl	8006230 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2202      	movs	r2, #2
 80090aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6899      	ldr	r1, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	4b34      	ldr	r3, [pc, #208]	; (800918c <HAL_TIM_Encoder_Init+0x114>)
 80090ba:	400b      	ands	r3, r1
 80090bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4619      	mov	r1, r3
 80090c8:	4610      	mov	r0, r2
 80090ca:	f000 fbb7 	bl	800983c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4b27      	ldr	r3, [pc, #156]	; (8009190 <HAL_TIM_Encoder_Init+0x118>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	4313      	orrs	r3, r2
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	4b21      	ldr	r3, [pc, #132]	; (8009194 <HAL_TIM_Encoder_Init+0x11c>)
 800910e:	4013      	ands	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4b20      	ldr	r3, [pc, #128]	; (8009198 <HAL_TIM_Encoder_Init+0x120>)
 8009116:	4013      	ands	r3, r2
 8009118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	4313      	orrs	r3, r2
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	011a      	lsls	r2, r3, #4
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	031b      	lsls	r3, r3, #12
 8009138:	4313      	orrs	r3, r2
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800914e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	4313      	orrs	r3, r2
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	fffebff8 	.word	0xfffebff8
 8009190:	fffffcfc 	.word	0xfffffcfc
 8009194:	fffff3f3 	.word	0xfffff3f3
 8009198:	ffff0f0f 	.word	0xffff0f0f

0800919c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_TIM_Encoder_Start+0x16>
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d008      	beq.n	80091c2 <HAL_TIM_Encoder_Start+0x26>
 80091b0:	e00f      	b.n	80091d2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2201      	movs	r2, #1
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fed6 	bl	8009f6c <TIM_CCxChannelCmd>
      break;
 80091c0:	e016      	b.n	80091f0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	2104      	movs	r1, #4
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fece 	bl	8009f6c <TIM_CCxChannelCmd>
      break;
 80091d0:	e00e      	b.n	80091f0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2201      	movs	r2, #1
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fec6 	bl	8009f6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2201      	movs	r2, #1
 80091e6:	2104      	movs	r1, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 febf 	bl	8009f6c <TIM_CCxChannelCmd>
      break;
 80091ee:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0201 	orr.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b02      	cmp	r3, #2
 800921e:	d122      	bne.n	8009266 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b02      	cmp	r3, #2
 800922c:	d11b      	bne.n	8009266 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f06f 0202 	mvn.w	r2, #2
 8009236:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fad7 	bl	8009800 <HAL_TIM_IC_CaptureCallback>
 8009252:	e005      	b.n	8009260 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fac9 	bl	80097ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fada 	bl	8009814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b04      	cmp	r3, #4
 8009272:	d122      	bne.n	80092ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b04      	cmp	r3, #4
 8009280:	d11b      	bne.n	80092ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f06f 0204 	mvn.w	r2, #4
 800928a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 faad 	bl	8009800 <HAL_TIM_IC_CaptureCallback>
 80092a6:	e005      	b.n	80092b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fa9f 	bl	80097ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fab0 	bl	8009814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f003 0308 	and.w	r3, r3, #8
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d122      	bne.n	800930e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f003 0308 	and.w	r3, r3, #8
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d11b      	bne.n	800930e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f06f 0208 	mvn.w	r2, #8
 80092de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2204      	movs	r2, #4
 80092e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fa83 	bl	8009800 <HAL_TIM_IC_CaptureCallback>
 80092fa:	e005      	b.n	8009308 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fa75 	bl	80097ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa86 	bl	8009814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b10      	cmp	r3, #16
 800931a:	d122      	bne.n	8009362 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b10      	cmp	r3, #16
 8009328:	d11b      	bne.n	8009362 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f06f 0210 	mvn.w	r2, #16
 8009332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2208      	movs	r2, #8
 8009338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa59 	bl	8009800 <HAL_TIM_IC_CaptureCallback>
 800934e:	e005      	b.n	800935c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa4b 	bl	80097ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa5c 	bl	8009814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b01      	cmp	r3, #1
 800936e:	d10e      	bne.n	800938e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b01      	cmp	r3, #1
 800937c:	d107      	bne.n	800938e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f06f 0201 	mvn.w	r2, #1
 8009386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7f7 fca1 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009398:	2b80      	cmp	r3, #128	; 0x80
 800939a:	d10e      	bne.n	80093ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a6:	2b80      	cmp	r3, #128	; 0x80
 80093a8:	d107      	bne.n	80093ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fe97 	bl	800a0e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c8:	d10e      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d107      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fe8a 	bl	800a0fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b40      	cmp	r3, #64	; 0x40
 80093f4:	d10e      	bne.n	8009414 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009400:	2b40      	cmp	r3, #64	; 0x40
 8009402:	d107      	bne.n	8009414 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800940c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa0a 	bl	8009828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b20      	cmp	r3, #32
 8009420:	d10e      	bne.n	8009440 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b20      	cmp	r3, #32
 800942e:	d107      	bne.n	8009440 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0220 	mvn.w	r2, #32
 8009438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fe4a 	bl	800a0d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945a:	2b01      	cmp	r3, #1
 800945c:	d101      	bne.n	8009462 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800945e:	2302      	movs	r3, #2
 8009460:	e105      	b.n	800966e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2202      	movs	r2, #2
 800946e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b14      	cmp	r3, #20
 8009476:	f200 80f0 	bhi.w	800965a <HAL_TIM_PWM_ConfigChannel+0x212>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094d5 	.word	0x080094d5
 8009484:	0800965b 	.word	0x0800965b
 8009488:	0800965b 	.word	0x0800965b
 800948c:	0800965b 	.word	0x0800965b
 8009490:	08009515 	.word	0x08009515
 8009494:	0800965b 	.word	0x0800965b
 8009498:	0800965b 	.word	0x0800965b
 800949c:	0800965b 	.word	0x0800965b
 80094a0:	08009557 	.word	0x08009557
 80094a4:	0800965b 	.word	0x0800965b
 80094a8:	0800965b 	.word	0x0800965b
 80094ac:	0800965b 	.word	0x0800965b
 80094b0:	08009597 	.word	0x08009597
 80094b4:	0800965b 	.word	0x0800965b
 80094b8:	0800965b 	.word	0x0800965b
 80094bc:	0800965b 	.word	0x0800965b
 80094c0:	080095d9 	.word	0x080095d9
 80094c4:	0800965b 	.word	0x0800965b
 80094c8:	0800965b 	.word	0x0800965b
 80094cc:	0800965b 	.word	0x0800965b
 80094d0:	08009619 	.word	0x08009619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fa4e 	bl	800997c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	699a      	ldr	r2, [r3, #24]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0208 	orr.w	r2, r2, #8
 80094ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0204 	bic.w	r2, r2, #4
 80094fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6999      	ldr	r1, [r3, #24]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	691a      	ldr	r2, [r3, #16]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	619a      	str	r2, [r3, #24]
      break;
 8009512:	e0a3      	b.n	800965c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 faa0 	bl	8009a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800952e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800953e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6999      	ldr	r1, [r3, #24]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	021a      	lsls	r2, r3, #8
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	619a      	str	r2, [r3, #24]
      break;
 8009554:	e082      	b.n	800965c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 faf7 	bl	8009b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69da      	ldr	r2, [r3, #28]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f042 0208 	orr.w	r2, r2, #8
 8009570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0204 	bic.w	r2, r2, #4
 8009580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69d9      	ldr	r1, [r3, #28]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	61da      	str	r2, [r3, #28]
      break;
 8009594:	e062      	b.n	800965c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fb4d 	bl	8009c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69da      	ldr	r2, [r3, #28]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69da      	ldr	r2, [r3, #28]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69d9      	ldr	r1, [r3, #28]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	021a      	lsls	r2, r3, #8
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	61da      	str	r2, [r3, #28]
      break;
 80095d6:	e041      	b.n	800965c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb84 	bl	8009cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f042 0208 	orr.w	r2, r2, #8
 80095f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0204 	bic.w	r2, r2, #4
 8009602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	691a      	ldr	r2, [r3, #16]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009616:	e021      	b.n	800965c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fbb6 	bl	8009d90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	021a      	lsls	r2, r3, #8
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009658:	e000      	b.n	800965c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800965a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop

08009678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_TIM_ConfigClockSource+0x18>
 800968c:	2302      	movs	r3, #2
 800968e:	e0a6      	b.n	80097de <HAL_TIM_ConfigClockSource+0x166>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4b4f      	ldr	r3, [pc, #316]	; (80097e8 <HAL_TIM_ConfigClockSource+0x170>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	d067      	beq.n	8009798 <HAL_TIM_ConfigClockSource+0x120>
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d80b      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x6c>
 80096cc:	2b10      	cmp	r3, #16
 80096ce:	d073      	beq.n	80097b8 <HAL_TIM_ConfigClockSource+0x140>
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d802      	bhi.n	80096da <HAL_TIM_ConfigClockSource+0x62>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d06f      	beq.n	80097b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80096d8:	e078      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096da:	2b20      	cmp	r3, #32
 80096dc:	d06c      	beq.n	80097b8 <HAL_TIM_ConfigClockSource+0x140>
 80096de:	2b30      	cmp	r3, #48	; 0x30
 80096e0:	d06a      	beq.n	80097b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80096e2:	e073      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096e4:	2b70      	cmp	r3, #112	; 0x70
 80096e6:	d00d      	beq.n	8009704 <HAL_TIM_ConfigClockSource+0x8c>
 80096e8:	2b70      	cmp	r3, #112	; 0x70
 80096ea:	d804      	bhi.n	80096f6 <HAL_TIM_ConfigClockSource+0x7e>
 80096ec:	2b50      	cmp	r3, #80	; 0x50
 80096ee:	d033      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0xe0>
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d041      	beq.n	8009778 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80096f4:	e06a      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fa:	d066      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x152>
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009700:	d017      	beq.n	8009732 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009702:	e063      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	6899      	ldr	r1, [r3, #8]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f000 fc0a 	bl	8009f2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009726:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	609a      	str	r2, [r3, #8]
      break;
 8009730:	e04c      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6899      	ldr	r1, [r3, #8]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f000 fbf3 	bl	8009f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009754:	609a      	str	r2, [r3, #8]
      break;
 8009756:	e039      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	6859      	ldr	r1, [r3, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	461a      	mov	r2, r3
 8009766:	f000 fb67 	bl	8009e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2150      	movs	r1, #80	; 0x50
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fbc0 	bl	8009ef6 <TIM_ITRx_SetConfig>
      break;
 8009776:	e029      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6818      	ldr	r0, [r3, #0]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	6859      	ldr	r1, [r3, #4]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	461a      	mov	r2, r3
 8009786:	f000 fb86 	bl	8009e96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2160      	movs	r1, #96	; 0x60
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fbb0 	bl	8009ef6 <TIM_ITRx_SetConfig>
      break;
 8009796:	e019      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6859      	ldr	r1, [r3, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	461a      	mov	r2, r3
 80097a6:	f000 fb47 	bl	8009e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2140      	movs	r1, #64	; 0x40
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fba0 	bl	8009ef6 <TIM_ITRx_SetConfig>
      break;
 80097b6:	e009      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f000 fb97 	bl	8009ef6 <TIM_ITRx_SetConfig>
      break;
 80097c8:	e000      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80097ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	fffeff88 	.word	0xfffeff88

080097ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a40      	ldr	r2, [pc, #256]	; (8009950 <TIM_Base_SetConfig+0x114>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d013      	beq.n	800987c <TIM_Base_SetConfig+0x40>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985a:	d00f      	beq.n	800987c <TIM_Base_SetConfig+0x40>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a3d      	ldr	r2, [pc, #244]	; (8009954 <TIM_Base_SetConfig+0x118>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00b      	beq.n	800987c <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a3c      	ldr	r2, [pc, #240]	; (8009958 <TIM_Base_SetConfig+0x11c>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d007      	beq.n	800987c <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a3b      	ldr	r2, [pc, #236]	; (800995c <TIM_Base_SetConfig+0x120>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d003      	beq.n	800987c <TIM_Base_SetConfig+0x40>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a3a      	ldr	r2, [pc, #232]	; (8009960 <TIM_Base_SetConfig+0x124>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d108      	bne.n	800988e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a2f      	ldr	r2, [pc, #188]	; (8009950 <TIM_Base_SetConfig+0x114>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d02b      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989c:	d027      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <TIM_Base_SetConfig+0x118>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d023      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a2b      	ldr	r2, [pc, #172]	; (8009958 <TIM_Base_SetConfig+0x11c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d01f      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2a      	ldr	r2, [pc, #168]	; (800995c <TIM_Base_SetConfig+0x120>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d01b      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a29      	ldr	r2, [pc, #164]	; (8009960 <TIM_Base_SetConfig+0x124>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d017      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a28      	ldr	r2, [pc, #160]	; (8009964 <TIM_Base_SetConfig+0x128>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d013      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a27      	ldr	r2, [pc, #156]	; (8009968 <TIM_Base_SetConfig+0x12c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00f      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a26      	ldr	r2, [pc, #152]	; (800996c <TIM_Base_SetConfig+0x130>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00b      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a25      	ldr	r2, [pc, #148]	; (8009970 <TIM_Base_SetConfig+0x134>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d007      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a24      	ldr	r2, [pc, #144]	; (8009974 <TIM_Base_SetConfig+0x138>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d003      	beq.n	80098ee <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a23      	ldr	r2, [pc, #140]	; (8009978 <TIM_Base_SetConfig+0x13c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d108      	bne.n	8009900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	4313      	orrs	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a0a      	ldr	r2, [pc, #40]	; (8009950 <TIM_Base_SetConfig+0x114>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d003      	beq.n	8009934 <TIM_Base_SetConfig+0xf8>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a0c      	ldr	r2, [pc, #48]	; (8009960 <TIM_Base_SetConfig+0x124>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d103      	bne.n	800993c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	691a      	ldr	r2, [r3, #16]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	615a      	str	r2, [r3, #20]
}
 8009942:	bf00      	nop
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40010000 	.word	0x40010000
 8009954:	40000400 	.word	0x40000400
 8009958:	40000800 	.word	0x40000800
 800995c:	40000c00 	.word	0x40000c00
 8009960:	40010400 	.word	0x40010400
 8009964:	40014000 	.word	0x40014000
 8009968:	40014400 	.word	0x40014400
 800996c:	40014800 	.word	0x40014800
 8009970:	40001800 	.word	0x40001800
 8009974:	40001c00 	.word	0x40001c00
 8009978:	40002000 	.word	0x40002000

0800997c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f023 0201 	bic.w	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4b2b      	ldr	r3, [pc, #172]	; (8009a54 <TIM_OC1_SetConfig+0xd8>)
 80099a8:	4013      	ands	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0303 	bic.w	r3, r3, #3
 80099b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f023 0302 	bic.w	r3, r3, #2
 80099c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <TIM_OC1_SetConfig+0xdc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_OC1_SetConfig+0x64>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a20      	ldr	r2, [pc, #128]	; (8009a5c <TIM_OC1_SetConfig+0xe0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10c      	bne.n	80099fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f023 0308 	bic.w	r3, r3, #8
 80099e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f023 0304 	bic.w	r3, r3, #4
 80099f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <TIM_OC1_SetConfig+0xdc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d003      	beq.n	8009a0a <TIM_OC1_SetConfig+0x8e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a15      	ldr	r2, [pc, #84]	; (8009a5c <TIM_OC1_SetConfig+0xe0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d111      	bne.n	8009a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	621a      	str	r2, [r3, #32]
}
 8009a48:	bf00      	nop
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	fffeff8f 	.word	0xfffeff8f
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	40010400 	.word	0x40010400

08009a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f023 0210 	bic.w	r2, r3, #16
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <TIM_OC2_SetConfig+0xe4>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f023 0320 	bic.w	r3, r3, #32
 8009aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a23      	ldr	r2, [pc, #140]	; (8009b48 <TIM_OC2_SetConfig+0xe8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d003      	beq.n	8009ac8 <TIM_OC2_SetConfig+0x68>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a22      	ldr	r2, [pc, #136]	; (8009b4c <TIM_OC2_SetConfig+0xec>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d10d      	bne.n	8009ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a18      	ldr	r2, [pc, #96]	; (8009b48 <TIM_OC2_SetConfig+0xe8>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d003      	beq.n	8009af4 <TIM_OC2_SetConfig+0x94>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a17      	ldr	r2, [pc, #92]	; (8009b4c <TIM_OC2_SetConfig+0xec>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d113      	bne.n	8009b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	695b      	ldr	r3, [r3, #20]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	621a      	str	r2, [r3, #32]
}
 8009b36:	bf00      	nop
 8009b38:	371c      	adds	r7, #28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	feff8fff 	.word	0xfeff8fff
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40010400 	.word	0x40010400

08009b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <TIM_OC3_SetConfig+0xe0>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0303 	bic.w	r3, r3, #3
 8009b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a22      	ldr	r2, [pc, #136]	; (8009c34 <TIM_OC3_SetConfig+0xe4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d003      	beq.n	8009bb6 <TIM_OC3_SetConfig+0x66>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a21      	ldr	r2, [pc, #132]	; (8009c38 <TIM_OC3_SetConfig+0xe8>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d10d      	bne.n	8009bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a17      	ldr	r2, [pc, #92]	; (8009c34 <TIM_OC3_SetConfig+0xe4>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d003      	beq.n	8009be2 <TIM_OC3_SetConfig+0x92>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a16      	ldr	r2, [pc, #88]	; (8009c38 <TIM_OC3_SetConfig+0xe8>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d113      	bne.n	8009c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	621a      	str	r2, [r3, #32]
}
 8009c24:	bf00      	nop
 8009c26:	371c      	adds	r7, #28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	fffeff8f 	.word	0xfffeff8f
 8009c34:	40010000 	.word	0x40010000
 8009c38:	40010400 	.word	0x40010400

08009c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4b1e      	ldr	r3, [pc, #120]	; (8009ce0 <TIM_OC4_SetConfig+0xa4>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	031b      	lsls	r3, r3, #12
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <TIM_OC4_SetConfig+0xa8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d003      	beq.n	8009ca4 <TIM_OC4_SetConfig+0x68>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a12      	ldr	r2, [pc, #72]	; (8009ce8 <TIM_OC4_SetConfig+0xac>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d109      	bne.n	8009cb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	019b      	lsls	r3, r3, #6
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	feff8fff 	.word	0xfeff8fff
 8009ce4:	40010000 	.word	0x40010000
 8009ce8:	40010400 	.word	0x40010400

08009cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4b1b      	ldr	r3, [pc, #108]	; (8009d84 <TIM_OC5_SetConfig+0x98>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	041b      	lsls	r3, r3, #16
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a12      	ldr	r2, [pc, #72]	; (8009d88 <TIM_OC5_SetConfig+0x9c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d003      	beq.n	8009d4a <TIM_OC5_SetConfig+0x5e>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a11      	ldr	r2, [pc, #68]	; (8009d8c <TIM_OC5_SetConfig+0xa0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d109      	bne.n	8009d5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	621a      	str	r2, [r3, #32]
}
 8009d78:	bf00      	nop
 8009d7a:	371c      	adds	r7, #28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	fffeff8f 	.word	0xfffeff8f
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40010400 	.word	0x40010400

08009d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4b1c      	ldr	r3, [pc, #112]	; (8009e2c <TIM_OC6_SetConfig+0x9c>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	051b      	lsls	r3, r3, #20
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a13      	ldr	r2, [pc, #76]	; (8009e30 <TIM_OC6_SetConfig+0xa0>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d003      	beq.n	8009df0 <TIM_OC6_SetConfig+0x60>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a12      	ldr	r2, [pc, #72]	; (8009e34 <TIM_OC6_SetConfig+0xa4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d109      	bne.n	8009e04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009df6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	621a      	str	r2, [r3, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	feff8fff 	.word	0xfeff8fff
 8009e30:	40010000 	.word	0x40010000
 8009e34:	40010400 	.word	0x40010400

08009e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	f023 0201 	bic.w	r2, r3, #1
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f023 030a 	bic.w	r3, r3, #10
 8009e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	621a      	str	r2, [r3, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b087      	sub	sp, #28
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0210 	bic.w	r2, r3, #16
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	031b      	lsls	r3, r3, #12
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	621a      	str	r2, [r3, #32]
}
 8009eea:	bf00      	nop
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	f043 0307 	orr.w	r3, r3, #7
 8009f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	609a      	str	r2, [r3, #8]
}
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	021a      	lsls	r2, r3, #8
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	609a      	str	r2, [r3, #8]
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f003 031f 	and.w	r3, r3, #31
 8009f7e:	2201      	movs	r2, #1
 8009f80:	fa02 f303 	lsl.w	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a1a      	ldr	r2, [r3, #32]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	401a      	ands	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a1a      	ldr	r2, [r3, #32]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f003 031f 	and.w	r3, r3, #31
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	621a      	str	r2, [r3, #32]
}
 8009faa:	bf00      	nop
 8009fac:	371c      	adds	r7, #28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e06d      	b.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a30      	ldr	r2, [pc, #192]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d004      	beq.n	800a004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a2f      	ldr	r2, [pc, #188]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d108      	bne.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a00a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4313      	orrs	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a20      	ldr	r2, [pc, #128]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d022      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a042:	d01d      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a1d      	ldr	r2, [pc, #116]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d018      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a1c      	ldr	r2, [pc, #112]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d013      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a1a      	ldr	r2, [pc, #104]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00e      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a15      	ldr	r2, [pc, #84]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d009      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a16      	ldr	r2, [pc, #88]	; (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d004      	beq.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10c      	bne.n	800a09a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40010400 	.word	0x40010400
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40000800 	.word	0x40000800
 800a0c8:	40000c00 	.word	0x40000c00
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40001800 	.word	0x40001800

0800a0d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e040      	b.n	800a1a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fc fa20 	bl	8006578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2224      	movs	r2, #36	; 0x24
 800a13c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0201 	bic.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f8be 	bl	800a2d0 <UART_SetConfig>
 800a154:	4603      	mov	r3, r0
 800a156:	2b01      	cmp	r3, #1
 800a158:	d101      	bne.n	800a15e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e022      	b.n	800a1a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d002      	beq.n	800a16c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fb5c 	bl	800a824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a17a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a18a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fbe3 	bl	800a968 <UART_CheckIdleState>
 800a1a2:	4603      	mov	r3, r0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d17f      	bne.n	800a2c4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_UART_Transmit+0x24>
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e078      	b.n	800a2c6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Transmit+0x36>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e071      	b.n	800a2c6 <HAL_UART_Transmit+0x11a>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2221      	movs	r2, #33	; 0x21
 800a1f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a1f6:	f7fc fbd3 	bl	80069a0 <HAL_GetTick>
 800a1fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	88fa      	ldrh	r2, [r7, #6]
 800a200:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	88fa      	ldrh	r2, [r7, #6]
 800a208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a214:	d108      	bne.n	800a228 <HAL_UART_Transmit+0x7c>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	61bb      	str	r3, [r7, #24]
 800a226:	e003      	b.n	800a230 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a238:	e02c      	b.n	800a294 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2200      	movs	r2, #0
 800a242:	2180      	movs	r1, #128	; 0x80
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 fbd4 	bl	800a9f2 <UART_WaitOnFlagUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e038      	b.n	800a2c6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10b      	bne.n	800a272 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a268:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	3302      	adds	r3, #2
 800a26e:	61bb      	str	r3, [r7, #24]
 800a270:	e007      	b.n	800a282 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	3301      	adds	r3, #1
 800a280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1cc      	bne.n	800a23a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2140      	movs	r1, #64	; 0x40
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fba1 	bl	800a9f2 <UART_WaitOnFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e005      	b.n	800a2c6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e000      	b.n	800a2c6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a2c4:	2302      	movs	r3, #2
  }
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3720      	adds	r7, #32
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4bb1      	ldr	r3, [pc, #708]	; (800a5c4 <UART_SetConfig+0x2f4>)
 800a300:	4013      	ands	r3, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	6939      	ldr	r1, [r7, #16]
 800a308:	430b      	orrs	r3, r1
 800a30a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	430a      	orrs	r2, r1
 800a344:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a9f      	ldr	r2, [pc, #636]	; (800a5c8 <UART_SetConfig+0x2f8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d121      	bne.n	800a394 <UART_SetConfig+0xc4>
 800a350:	4b9e      	ldr	r3, [pc, #632]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d816      	bhi.n	800a38c <UART_SetConfig+0xbc>
 800a35e:	a201      	add	r2, pc, #4	; (adr r2, 800a364 <UART_SetConfig+0x94>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a375 	.word	0x0800a375
 800a368:	0800a381 	.word	0x0800a381
 800a36c:	0800a37b 	.word	0x0800a37b
 800a370:	0800a387 	.word	0x0800a387
 800a374:	2301      	movs	r3, #1
 800a376:	77fb      	strb	r3, [r7, #31]
 800a378:	e151      	b.n	800a61e <UART_SetConfig+0x34e>
 800a37a:	2302      	movs	r3, #2
 800a37c:	77fb      	strb	r3, [r7, #31]
 800a37e:	e14e      	b.n	800a61e <UART_SetConfig+0x34e>
 800a380:	2304      	movs	r3, #4
 800a382:	77fb      	strb	r3, [r7, #31]
 800a384:	e14b      	b.n	800a61e <UART_SetConfig+0x34e>
 800a386:	2308      	movs	r3, #8
 800a388:	77fb      	strb	r3, [r7, #31]
 800a38a:	e148      	b.n	800a61e <UART_SetConfig+0x34e>
 800a38c:	2310      	movs	r3, #16
 800a38e:	77fb      	strb	r3, [r7, #31]
 800a390:	bf00      	nop
 800a392:	e144      	b.n	800a61e <UART_SetConfig+0x34e>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a8d      	ldr	r2, [pc, #564]	; (800a5d0 <UART_SetConfig+0x300>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d134      	bne.n	800a408 <UART_SetConfig+0x138>
 800a39e:	4b8b      	ldr	r3, [pc, #556]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a4:	f003 030c 	and.w	r3, r3, #12
 800a3a8:	2b0c      	cmp	r3, #12
 800a3aa:	d829      	bhi.n	800a400 <UART_SetConfig+0x130>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <UART_SetConfig+0xe4>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3e9 	.word	0x0800a3e9
 800a3b8:	0800a401 	.word	0x0800a401
 800a3bc:	0800a401 	.word	0x0800a401
 800a3c0:	0800a401 	.word	0x0800a401
 800a3c4:	0800a3f5 	.word	0x0800a3f5
 800a3c8:	0800a401 	.word	0x0800a401
 800a3cc:	0800a401 	.word	0x0800a401
 800a3d0:	0800a401 	.word	0x0800a401
 800a3d4:	0800a3ef 	.word	0x0800a3ef
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a3fb 	.word	0x0800a3fb
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e117      	b.n	800a61e <UART_SetConfig+0x34e>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	77fb      	strb	r3, [r7, #31]
 800a3f2:	e114      	b.n	800a61e <UART_SetConfig+0x34e>
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	77fb      	strb	r3, [r7, #31]
 800a3f8:	e111      	b.n	800a61e <UART_SetConfig+0x34e>
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	77fb      	strb	r3, [r7, #31]
 800a3fe:	e10e      	b.n	800a61e <UART_SetConfig+0x34e>
 800a400:	2310      	movs	r3, #16
 800a402:	77fb      	strb	r3, [r7, #31]
 800a404:	bf00      	nop
 800a406:	e10a      	b.n	800a61e <UART_SetConfig+0x34e>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a71      	ldr	r2, [pc, #452]	; (800a5d4 <UART_SetConfig+0x304>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d120      	bne.n	800a454 <UART_SetConfig+0x184>
 800a412:	4b6e      	ldr	r3, [pc, #440]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a41c:	2b10      	cmp	r3, #16
 800a41e:	d00f      	beq.n	800a440 <UART_SetConfig+0x170>
 800a420:	2b10      	cmp	r3, #16
 800a422:	d802      	bhi.n	800a42a <UART_SetConfig+0x15a>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <UART_SetConfig+0x164>
 800a428:	e010      	b.n	800a44c <UART_SetConfig+0x17c>
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	d005      	beq.n	800a43a <UART_SetConfig+0x16a>
 800a42e:	2b30      	cmp	r3, #48	; 0x30
 800a430:	d009      	beq.n	800a446 <UART_SetConfig+0x176>
 800a432:	e00b      	b.n	800a44c <UART_SetConfig+0x17c>
 800a434:	2300      	movs	r3, #0
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e0f1      	b.n	800a61e <UART_SetConfig+0x34e>
 800a43a:	2302      	movs	r3, #2
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e0ee      	b.n	800a61e <UART_SetConfig+0x34e>
 800a440:	2304      	movs	r3, #4
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e0eb      	b.n	800a61e <UART_SetConfig+0x34e>
 800a446:	2308      	movs	r3, #8
 800a448:	77fb      	strb	r3, [r7, #31]
 800a44a:	e0e8      	b.n	800a61e <UART_SetConfig+0x34e>
 800a44c:	2310      	movs	r3, #16
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	bf00      	nop
 800a452:	e0e4      	b.n	800a61e <UART_SetConfig+0x34e>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a5f      	ldr	r2, [pc, #380]	; (800a5d8 <UART_SetConfig+0x308>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d120      	bne.n	800a4a0 <UART_SetConfig+0x1d0>
 800a45e:	4b5b      	ldr	r3, [pc, #364]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a468:	2b40      	cmp	r3, #64	; 0x40
 800a46a:	d00f      	beq.n	800a48c <UART_SetConfig+0x1bc>
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d802      	bhi.n	800a476 <UART_SetConfig+0x1a6>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <UART_SetConfig+0x1b0>
 800a474:	e010      	b.n	800a498 <UART_SetConfig+0x1c8>
 800a476:	2b80      	cmp	r3, #128	; 0x80
 800a478:	d005      	beq.n	800a486 <UART_SetConfig+0x1b6>
 800a47a:	2bc0      	cmp	r3, #192	; 0xc0
 800a47c:	d009      	beq.n	800a492 <UART_SetConfig+0x1c2>
 800a47e:	e00b      	b.n	800a498 <UART_SetConfig+0x1c8>
 800a480:	2300      	movs	r3, #0
 800a482:	77fb      	strb	r3, [r7, #31]
 800a484:	e0cb      	b.n	800a61e <UART_SetConfig+0x34e>
 800a486:	2302      	movs	r3, #2
 800a488:	77fb      	strb	r3, [r7, #31]
 800a48a:	e0c8      	b.n	800a61e <UART_SetConfig+0x34e>
 800a48c:	2304      	movs	r3, #4
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e0c5      	b.n	800a61e <UART_SetConfig+0x34e>
 800a492:	2308      	movs	r3, #8
 800a494:	77fb      	strb	r3, [r7, #31]
 800a496:	e0c2      	b.n	800a61e <UART_SetConfig+0x34e>
 800a498:	2310      	movs	r3, #16
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	bf00      	nop
 800a49e:	e0be      	b.n	800a61e <UART_SetConfig+0x34e>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a4d      	ldr	r2, [pc, #308]	; (800a5dc <UART_SetConfig+0x30c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d124      	bne.n	800a4f4 <UART_SetConfig+0x224>
 800a4aa:	4b48      	ldr	r3, [pc, #288]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4b8:	d012      	beq.n	800a4e0 <UART_SetConfig+0x210>
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4be:	d802      	bhi.n	800a4c6 <UART_SetConfig+0x1f6>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d007      	beq.n	800a4d4 <UART_SetConfig+0x204>
 800a4c4:	e012      	b.n	800a4ec <UART_SetConfig+0x21c>
 800a4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ca:	d006      	beq.n	800a4da <UART_SetConfig+0x20a>
 800a4cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4d0:	d009      	beq.n	800a4e6 <UART_SetConfig+0x216>
 800a4d2:	e00b      	b.n	800a4ec <UART_SetConfig+0x21c>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	77fb      	strb	r3, [r7, #31]
 800a4d8:	e0a1      	b.n	800a61e <UART_SetConfig+0x34e>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	77fb      	strb	r3, [r7, #31]
 800a4de:	e09e      	b.n	800a61e <UART_SetConfig+0x34e>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	77fb      	strb	r3, [r7, #31]
 800a4e4:	e09b      	b.n	800a61e <UART_SetConfig+0x34e>
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	77fb      	strb	r3, [r7, #31]
 800a4ea:	e098      	b.n	800a61e <UART_SetConfig+0x34e>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	77fb      	strb	r3, [r7, #31]
 800a4f0:	bf00      	nop
 800a4f2:	e094      	b.n	800a61e <UART_SetConfig+0x34e>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a39      	ldr	r2, [pc, #228]	; (800a5e0 <UART_SetConfig+0x310>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d124      	bne.n	800a548 <UART_SetConfig+0x278>
 800a4fe:	4b33      	ldr	r3, [pc, #204]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a504:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a50c:	d012      	beq.n	800a534 <UART_SetConfig+0x264>
 800a50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a512:	d802      	bhi.n	800a51a <UART_SetConfig+0x24a>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <UART_SetConfig+0x258>
 800a518:	e012      	b.n	800a540 <UART_SetConfig+0x270>
 800a51a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a51e:	d006      	beq.n	800a52e <UART_SetConfig+0x25e>
 800a520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a524:	d009      	beq.n	800a53a <UART_SetConfig+0x26a>
 800a526:	e00b      	b.n	800a540 <UART_SetConfig+0x270>
 800a528:	2301      	movs	r3, #1
 800a52a:	77fb      	strb	r3, [r7, #31]
 800a52c:	e077      	b.n	800a61e <UART_SetConfig+0x34e>
 800a52e:	2302      	movs	r3, #2
 800a530:	77fb      	strb	r3, [r7, #31]
 800a532:	e074      	b.n	800a61e <UART_SetConfig+0x34e>
 800a534:	2304      	movs	r3, #4
 800a536:	77fb      	strb	r3, [r7, #31]
 800a538:	e071      	b.n	800a61e <UART_SetConfig+0x34e>
 800a53a:	2308      	movs	r3, #8
 800a53c:	77fb      	strb	r3, [r7, #31]
 800a53e:	e06e      	b.n	800a61e <UART_SetConfig+0x34e>
 800a540:	2310      	movs	r3, #16
 800a542:	77fb      	strb	r3, [r7, #31]
 800a544:	bf00      	nop
 800a546:	e06a      	b.n	800a61e <UART_SetConfig+0x34e>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a25      	ldr	r2, [pc, #148]	; (800a5e4 <UART_SetConfig+0x314>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d124      	bne.n	800a59c <UART_SetConfig+0x2cc>
 800a552:	4b1e      	ldr	r3, [pc, #120]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a558:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a560:	d012      	beq.n	800a588 <UART_SetConfig+0x2b8>
 800a562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a566:	d802      	bhi.n	800a56e <UART_SetConfig+0x29e>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d007      	beq.n	800a57c <UART_SetConfig+0x2ac>
 800a56c:	e012      	b.n	800a594 <UART_SetConfig+0x2c4>
 800a56e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a572:	d006      	beq.n	800a582 <UART_SetConfig+0x2b2>
 800a574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a578:	d009      	beq.n	800a58e <UART_SetConfig+0x2be>
 800a57a:	e00b      	b.n	800a594 <UART_SetConfig+0x2c4>
 800a57c:	2300      	movs	r3, #0
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e04d      	b.n	800a61e <UART_SetConfig+0x34e>
 800a582:	2302      	movs	r3, #2
 800a584:	77fb      	strb	r3, [r7, #31]
 800a586:	e04a      	b.n	800a61e <UART_SetConfig+0x34e>
 800a588:	2304      	movs	r3, #4
 800a58a:	77fb      	strb	r3, [r7, #31]
 800a58c:	e047      	b.n	800a61e <UART_SetConfig+0x34e>
 800a58e:	2308      	movs	r3, #8
 800a590:	77fb      	strb	r3, [r7, #31]
 800a592:	e044      	b.n	800a61e <UART_SetConfig+0x34e>
 800a594:	2310      	movs	r3, #16
 800a596:	77fb      	strb	r3, [r7, #31]
 800a598:	bf00      	nop
 800a59a:	e040      	b.n	800a61e <UART_SetConfig+0x34e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a11      	ldr	r2, [pc, #68]	; (800a5e8 <UART_SetConfig+0x318>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d139      	bne.n	800a61a <UART_SetConfig+0x34a>
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <UART_SetConfig+0x2fc>)
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b4:	d027      	beq.n	800a606 <UART_SetConfig+0x336>
 800a5b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ba:	d817      	bhi.n	800a5ec <UART_SetConfig+0x31c>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01c      	beq.n	800a5fa <UART_SetConfig+0x32a>
 800a5c0:	e027      	b.n	800a612 <UART_SetConfig+0x342>
 800a5c2:	bf00      	nop
 800a5c4:	efff69f3 	.word	0xefff69f3
 800a5c8:	40011000 	.word	0x40011000
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	40004400 	.word	0x40004400
 800a5d4:	40004800 	.word	0x40004800
 800a5d8:	40004c00 	.word	0x40004c00
 800a5dc:	40005000 	.word	0x40005000
 800a5e0:	40011400 	.word	0x40011400
 800a5e4:	40007800 	.word	0x40007800
 800a5e8:	40007c00 	.word	0x40007c00
 800a5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5f0:	d006      	beq.n	800a600 <UART_SetConfig+0x330>
 800a5f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5f6:	d009      	beq.n	800a60c <UART_SetConfig+0x33c>
 800a5f8:	e00b      	b.n	800a612 <UART_SetConfig+0x342>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	77fb      	strb	r3, [r7, #31]
 800a5fe:	e00e      	b.n	800a61e <UART_SetConfig+0x34e>
 800a600:	2302      	movs	r3, #2
 800a602:	77fb      	strb	r3, [r7, #31]
 800a604:	e00b      	b.n	800a61e <UART_SetConfig+0x34e>
 800a606:	2304      	movs	r3, #4
 800a608:	77fb      	strb	r3, [r7, #31]
 800a60a:	e008      	b.n	800a61e <UART_SetConfig+0x34e>
 800a60c:	2308      	movs	r3, #8
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e005      	b.n	800a61e <UART_SetConfig+0x34e>
 800a612:	2310      	movs	r3, #16
 800a614:	77fb      	strb	r3, [r7, #31]
 800a616:	bf00      	nop
 800a618:	e001      	b.n	800a61e <UART_SetConfig+0x34e>
 800a61a:	2310      	movs	r3, #16
 800a61c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a626:	d17f      	bne.n	800a728 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a628:	7ffb      	ldrb	r3, [r7, #31]
 800a62a:	2b08      	cmp	r3, #8
 800a62c:	d85c      	bhi.n	800a6e8 <UART_SetConfig+0x418>
 800a62e:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <UART_SetConfig+0x364>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a679 	.word	0x0800a679
 800a63c:	0800a699 	.word	0x0800a699
 800a640:	0800a6e9 	.word	0x0800a6e9
 800a644:	0800a6b1 	.word	0x0800a6b1
 800a648:	0800a6e9 	.word	0x0800a6e9
 800a64c:	0800a6e9 	.word	0x0800a6e9
 800a650:	0800a6e9 	.word	0x0800a6e9
 800a654:	0800a6d1 	.word	0x0800a6d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a658:	f7fd fff0 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 800a65c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	005a      	lsls	r2, r3, #1
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	085b      	lsrs	r3, r3, #1
 800a668:	441a      	add	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a672:	b29b      	uxth	r3, r3
 800a674:	61bb      	str	r3, [r7, #24]
        break;
 800a676:	e03a      	b.n	800a6ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a678:	f7fd fff4 	bl	8008664 <HAL_RCC_GetPCLK2Freq>
 800a67c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	005a      	lsls	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	085b      	lsrs	r3, r3, #1
 800a688:	441a      	add	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a692:	b29b      	uxth	r3, r3
 800a694:	61bb      	str	r3, [r7, #24]
        break;
 800a696:	e02a      	b.n	800a6ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	085a      	lsrs	r2, r3, #1
 800a69e:	4b5f      	ldr	r3, [pc, #380]	; (800a81c <UART_SetConfig+0x54c>)
 800a6a0:	4413      	add	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6852      	ldr	r2, [r2, #4]
 800a6a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	61bb      	str	r3, [r7, #24]
        break;
 800a6ae:	e01e      	b.n	800a6ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6b0:	f7fd fee0 	bl	8008474 <HAL_RCC_GetSysClockFreq>
 800a6b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	005a      	lsls	r2, r3, #1
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	085b      	lsrs	r3, r3, #1
 800a6c0:	441a      	add	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	61bb      	str	r3, [r7, #24]
        break;
 800a6ce:	e00e      	b.n	800a6ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	085b      	lsrs	r3, r3, #1
 800a6d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	61bb      	str	r3, [r7, #24]
        break;
 800a6e6:	e002      	b.n	800a6ee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	75fb      	strb	r3, [r7, #23]
        break;
 800a6ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	2b0f      	cmp	r3, #15
 800a6f2:	d916      	bls.n	800a722 <UART_SetConfig+0x452>
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6fa:	d212      	bcs.n	800a722 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	f023 030f 	bic.w	r3, r3, #15
 800a704:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	085b      	lsrs	r3, r3, #1
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	b29a      	uxth	r2, r3
 800a712:	897b      	ldrh	r3, [r7, #10]
 800a714:	4313      	orrs	r3, r2
 800a716:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	897a      	ldrh	r2, [r7, #10]
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	e070      	b.n	800a804 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	75fb      	strb	r3, [r7, #23]
 800a726:	e06d      	b.n	800a804 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a728:	7ffb      	ldrb	r3, [r7, #31]
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	d859      	bhi.n	800a7e2 <UART_SetConfig+0x512>
 800a72e:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <UART_SetConfig+0x464>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a777 	.word	0x0800a777
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a7e3 	.word	0x0800a7e3
 800a744:	0800a7ad 	.word	0x0800a7ad
 800a748:	0800a7e3 	.word	0x0800a7e3
 800a74c:	0800a7e3 	.word	0x0800a7e3
 800a750:	0800a7e3 	.word	0x0800a7e3
 800a754:	0800a7cb 	.word	0x0800a7cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a758:	f7fd ff70 	bl	800863c <HAL_RCC_GetPCLK1Freq>
 800a75c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	085a      	lsrs	r2, r3, #1
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	441a      	add	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a770:	b29b      	uxth	r3, r3
 800a772:	61bb      	str	r3, [r7, #24]
        break;
 800a774:	e038      	b.n	800a7e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a776:	f7fd ff75 	bl	8008664 <HAL_RCC_GetPCLK2Freq>
 800a77a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	085a      	lsrs	r2, r3, #1
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	441a      	add	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78e:	b29b      	uxth	r3, r3
 800a790:	61bb      	str	r3, [r7, #24]
        break;
 800a792:	e029      	b.n	800a7e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	085a      	lsrs	r2, r3, #1
 800a79a:	4b21      	ldr	r3, [pc, #132]	; (800a820 <UART_SetConfig+0x550>)
 800a79c:	4413      	add	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6852      	ldr	r2, [r2, #4]
 800a7a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	61bb      	str	r3, [r7, #24]
        break;
 800a7aa:	e01d      	b.n	800a7e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ac:	f7fd fe62 	bl	8008474 <HAL_RCC_GetSysClockFreq>
 800a7b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	085a      	lsrs	r2, r3, #1
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	441a      	add	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	61bb      	str	r3, [r7, #24]
        break;
 800a7c8:	e00e      	b.n	800a7e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	085b      	lsrs	r3, r3, #1
 800a7d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	61bb      	str	r3, [r7, #24]
        break;
 800a7e0:	e002      	b.n	800a7e8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	75fb      	strb	r3, [r7, #23]
        break;
 800a7e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b0f      	cmp	r3, #15
 800a7ec:	d908      	bls.n	800a800 <UART_SetConfig+0x530>
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f4:	d204      	bcs.n	800a800 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	60da      	str	r2, [r3, #12]
 800a7fe:	e001      	b.n	800a804 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	01e84800 	.word	0x01e84800
 800a820:	00f42400 	.word	0x00f42400

0800a824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00a      	beq.n	800a84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	430a      	orrs	r2, r1
 800a84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00a      	beq.n	800a892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01a      	beq.n	800a93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a922:	d10a      	bne.n	800a93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	430a      	orrs	r2, r1
 800a95a:	605a      	str	r2, [r3, #4]
  }
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af02      	add	r7, sp, #8
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a976:	f7fc f813 	bl	80069a0 <HAL_GetTick>
 800a97a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0308 	and.w	r3, r3, #8
 800a986:	2b08      	cmp	r3, #8
 800a988:	d10e      	bne.n	800a9a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a98a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f82a 	bl	800a9f2 <UART_WaitOnFlagUntilTimeout>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e020      	b.n	800a9ea <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0304 	and.w	r3, r3, #4
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d10e      	bne.n	800a9d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f814 	bl	800a9f2 <UART_WaitOnFlagUntilTimeout>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e00a      	b.n	800a9ea <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	603b      	str	r3, [r7, #0]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa02:	e05d      	b.n	800aac0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d059      	beq.n	800aac0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa0c:	f7fb ffc8 	bl	80069a0 <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d302      	bcc.n	800aa22 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d11b      	bne.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689a      	ldr	r2, [r3, #8]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f022 0201 	bic.w	r2, r2, #1
 800aa40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2220      	movs	r2, #32
 800aa46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e042      	b.n	800aae0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 0304 	and.w	r3, r3, #4
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d02b      	beq.n	800aac0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa76:	d123      	bne.n	800aac0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 0201 	bic.w	r2, r2, #1
 800aaa0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2220      	movs	r2, #32
 800aab2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e00f      	b.n	800aae0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69da      	ldr	r2, [r3, #28]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	4013      	ands	r3, r2
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	429a      	cmp	r2, r3
 800aace:	bf0c      	ite	eq
 800aad0:	2301      	moveq	r3, #1
 800aad2:	2300      	movne	r3, #0
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	461a      	mov	r2, r3
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d092      	beq.n	800aa04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aae8:	b084      	sub	sp, #16
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	f107 001c 	add.w	r0, r7, #28
 800aaf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d120      	bne.n	800ab42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68da      	ldr	r2, [r3, #12]
 800ab10:	4b20      	ldr	r3, [pc, #128]	; (800ab94 <USB_CoreInit+0xac>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d105      	bne.n	800ab36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fa52 	bl	800afe0 <USB_CoreReset>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]
 800ab40:	e010      	b.n	800ab64 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fa46 	bl	800afe0 <USB_CoreReset>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d10b      	bne.n	800ab82 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f043 0206 	orr.w	r2, r3, #6
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f043 0220 	orr.w	r2, r3, #32
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab8e:	b004      	add	sp, #16
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	ffbdffbf 	.word	0xffbdffbf

0800ab98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	f023 0201 	bic.w	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d106      	bne.n	800abe6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	60da      	str	r2, [r3, #12]
 800abe4:	e00b      	b.n	800abfe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d106      	bne.n	800abfa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	60da      	str	r2, [r3, #12]
 800abf8:	e001      	b.n	800abfe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e003      	b.n	800ac06 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800abfe:	2032      	movs	r0, #50	; 0x32
 800ac00:	f7fb feda 	bl	80069b8 <HAL_Delay>

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac10:	b084      	sub	sp, #16
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b086      	sub	sp, #24
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	613b      	str	r3, [r7, #16]
 800ac2e:	e009      	b.n	800ac44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	3340      	adds	r3, #64	; 0x40
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	3301      	adds	r3, #1
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	2b0e      	cmp	r3, #14
 800ac48:	d9f2      	bls.n	800ac30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d11c      	bne.n	800ac8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac5e:	f043 0302 	orr.w	r3, r3, #2
 800ac62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	e005      	b.n	800ac96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca8:	4619      	mov	r1, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb0:	461a      	mov	r2, r3
 800acb2:	680b      	ldr	r3, [r1, #0]
 800acb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d10c      	bne.n	800acd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d104      	bne.n	800accc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800acc2:	2100      	movs	r1, #0
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f959 	bl	800af7c <USB_SetDevSpeed>
 800acca:	e018      	b.n	800acfe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800accc:	2101      	movs	r1, #1
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f954 	bl	800af7c <USB_SetDevSpeed>
 800acd4:	e013      	b.n	800acfe <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d10c      	bne.n	800acf6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d104      	bne.n	800acec <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ace2:	2100      	movs	r1, #0
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f949 	bl	800af7c <USB_SetDevSpeed>
 800acea:	e008      	b.n	800acfe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800acec:	2101      	movs	r1, #1
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f944 	bl	800af7c <USB_SetDevSpeed>
 800acf4:	e003      	b.n	800acfe <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800acf6:	2103      	movs	r1, #3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f93f 	bl	800af7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800acfe:	2110      	movs	r1, #16
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f8f3 	bl	800aeec <USB_FlushTxFifo>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f911 	bl	800af38 <USB_FlushRxFifo>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad26:	461a      	mov	r2, r3
 800ad28:	2300      	movs	r3, #0
 800ad2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad32:	461a      	mov	r2, r3
 800ad34:	2300      	movs	r3, #0
 800ad36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3e:	461a      	mov	r2, r3
 800ad40:	2300      	movs	r3, #0
 800ad42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad44:	2300      	movs	r3, #0
 800ad46:	613b      	str	r3, [r7, #16]
 800ad48:	e043      	b.n	800add2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad60:	d118      	bne.n	800ad94 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad74:	461a      	mov	r2, r3
 800ad76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	e013      	b.n	800ada6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	015a      	lsls	r2, r3, #5
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	4413      	add	r3, r2
 800ad86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad90:	6013      	str	r3, [r2, #0]
 800ad92:	e008      	b.n	800ada6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada0:	461a      	mov	r2, r3
 800ada2:	2300      	movs	r3, #0
 800ada4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb2:	461a      	mov	r2, r3
 800adb4:	2300      	movs	r3, #0
 800adb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc4:	461a      	mov	r2, r3
 800adc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3301      	adds	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	429a      	cmp	r2, r3
 800add8:	d3b7      	bcc.n	800ad4a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adda:	2300      	movs	r3, #0
 800addc:	613b      	str	r3, [r7, #16]
 800adde:	e043      	b.n	800ae68 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adf6:	d118      	bne.n	800ae2a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	e013      	b.n	800ae3c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae20:	461a      	mov	r2, r3
 800ae22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae26:	6013      	str	r3, [r2, #0]
 800ae28:	e008      	b.n	800ae3c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	015a      	lsls	r2, r3, #5
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	4413      	add	r3, r2
 800ae32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae36:	461a      	mov	r2, r3
 800ae38:	2300      	movs	r3, #0
 800ae3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae48:	461a      	mov	r2, r3
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	3301      	adds	r3, #1
 800ae66:	613b      	str	r3, [r7, #16]
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d3b7      	bcc.n	800ade0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ae90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d105      	bne.n	800aea4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	f043 0210 	orr.w	r2, r3, #16
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699a      	ldr	r2, [r3, #24]
 800aea8:	4b0e      	ldr	r3, [pc, #56]	; (800aee4 <USB_DevInit+0x2d4>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aeb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	f043 0208 	orr.w	r2, r3, #8
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d105      	bne.n	800aed4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699a      	ldr	r2, [r3, #24]
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <USB_DevInit+0x2d8>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aee0:	b004      	add	sp, #16
 800aee2:	4770      	bx	lr
 800aee4:	803c3800 	.word	0x803c3800
 800aee8:	40000004 	.word	0x40000004

0800aeec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	019b      	lsls	r3, r3, #6
 800aefe:	f043 0220 	orr.w	r2, r3, #32
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4a09      	ldr	r2, [pc, #36]	; (800af34 <USB_FlushTxFifo+0x48>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d901      	bls.n	800af18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e006      	b.n	800af26 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b20      	cmp	r3, #32
 800af22:	d0f0      	beq.n	800af06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	00030d40 	.word	0x00030d40

0800af38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2210      	movs	r2, #16
 800af48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3301      	adds	r3, #1
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4a09      	ldr	r2, [pc, #36]	; (800af78 <USB_FlushRxFifo+0x40>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d901      	bls.n	800af5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e006      	b.n	800af6a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	f003 0310 	and.w	r3, r3, #16
 800af64:	2b10      	cmp	r3, #16
 800af66:	d0f0      	beq.n	800af4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	00030d40 	.word	0x00030d40

0800af7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af9c:	4313      	orrs	r3, r2
 800af9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afc8:	f043 0302 	orr.w	r3, r3, #2
 800afcc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800afce:	2003      	movs	r0, #3
 800afd0:	f7fb fcf2 	bl	80069b8 <HAL_Delay>

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3301      	adds	r3, #1
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4a13      	ldr	r2, [pc, #76]	; (800b044 <USB_CoreReset+0x64>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d901      	bls.n	800affe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e01b      	b.n	800b036 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	daf2      	bge.n	800afec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f043 0201 	orr.w	r2, r3, #1
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3301      	adds	r3, #1
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4a09      	ldr	r2, [pc, #36]	; (800b044 <USB_CoreReset+0x64>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d901      	bls.n	800b028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e006      	b.n	800b036 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b01      	cmp	r3, #1
 800b032:	d0f0      	beq.n	800b016 <USB_CoreReset+0x36>

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	00030d40 	.word	0x00030d40

0800b048 <__errno>:
 800b048:	4b01      	ldr	r3, [pc, #4]	; (800b050 <__errno+0x8>)
 800b04a:	6818      	ldr	r0, [r3, #0]
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	20000044 	.word	0x20000044

0800b054 <__libc_init_array>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	4e0d      	ldr	r6, [pc, #52]	; (800b08c <__libc_init_array+0x38>)
 800b058:	4c0d      	ldr	r4, [pc, #52]	; (800b090 <__libc_init_array+0x3c>)
 800b05a:	1ba4      	subs	r4, r4, r6
 800b05c:	10a4      	asrs	r4, r4, #2
 800b05e:	2500      	movs	r5, #0
 800b060:	42a5      	cmp	r5, r4
 800b062:	d109      	bne.n	800b078 <__libc_init_array+0x24>
 800b064:	4e0b      	ldr	r6, [pc, #44]	; (800b094 <__libc_init_array+0x40>)
 800b066:	4c0c      	ldr	r4, [pc, #48]	; (800b098 <__libc_init_array+0x44>)
 800b068:	f003 facc 	bl	800e604 <_init>
 800b06c:	1ba4      	subs	r4, r4, r6
 800b06e:	10a4      	asrs	r4, r4, #2
 800b070:	2500      	movs	r5, #0
 800b072:	42a5      	cmp	r5, r4
 800b074:	d105      	bne.n	800b082 <__libc_init_array+0x2e>
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b07c:	4798      	blx	r3
 800b07e:	3501      	adds	r5, #1
 800b080:	e7ee      	b.n	800b060 <__libc_init_array+0xc>
 800b082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b086:	4798      	blx	r3
 800b088:	3501      	adds	r5, #1
 800b08a:	e7f2      	b.n	800b072 <__libc_init_array+0x1e>
 800b08c:	0800ed48 	.word	0x0800ed48
 800b090:	0800ed48 	.word	0x0800ed48
 800b094:	0800ed48 	.word	0x0800ed48
 800b098:	0800ed4c 	.word	0x0800ed4c

0800b09c <memcpy>:
 800b09c:	b510      	push	{r4, lr}
 800b09e:	1e43      	subs	r3, r0, #1
 800b0a0:	440a      	add	r2, r1
 800b0a2:	4291      	cmp	r1, r2
 800b0a4:	d100      	bne.n	800b0a8 <memcpy+0xc>
 800b0a6:	bd10      	pop	{r4, pc}
 800b0a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0b0:	e7f7      	b.n	800b0a2 <memcpy+0x6>

0800b0b2 <memset>:
 800b0b2:	4402      	add	r2, r0
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d100      	bne.n	800b0bc <memset+0xa>
 800b0ba:	4770      	bx	lr
 800b0bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c0:	e7f9      	b.n	800b0b6 <memset+0x4>

0800b0c2 <__cvt>:
 800b0c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0c4:	ed2d 8b02 	vpush	{d8}
 800b0c8:	eeb0 8b40 	vmov.f64	d8, d0
 800b0cc:	b085      	sub	sp, #20
 800b0ce:	4617      	mov	r7, r2
 800b0d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b0d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0d4:	ee18 2a90 	vmov	r2, s17
 800b0d8:	f025 0520 	bic.w	r5, r5, #32
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	bfb6      	itet	lt
 800b0e0:	222d      	movlt	r2, #45	; 0x2d
 800b0e2:	2200      	movge	r2, #0
 800b0e4:	eeb1 8b40 	vneglt.f64	d8, d0
 800b0e8:	2d46      	cmp	r5, #70	; 0x46
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	d004      	beq.n	800b0fa <__cvt+0x38>
 800b0f0:	2d45      	cmp	r5, #69	; 0x45
 800b0f2:	d100      	bne.n	800b0f6 <__cvt+0x34>
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	2102      	movs	r1, #2
 800b0f8:	e000      	b.n	800b0fc <__cvt+0x3a>
 800b0fa:	2103      	movs	r1, #3
 800b0fc:	ab03      	add	r3, sp, #12
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	ab02      	add	r3, sp, #8
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	4622      	mov	r2, r4
 800b106:	4633      	mov	r3, r6
 800b108:	eeb0 0b48 	vmov.f64	d0, d8
 800b10c:	f000 fddc 	bl	800bcc8 <_dtoa_r>
 800b110:	2d47      	cmp	r5, #71	; 0x47
 800b112:	d101      	bne.n	800b118 <__cvt+0x56>
 800b114:	07fb      	lsls	r3, r7, #31
 800b116:	d51e      	bpl.n	800b156 <__cvt+0x94>
 800b118:	2d46      	cmp	r5, #70	; 0x46
 800b11a:	eb00 0304 	add.w	r3, r0, r4
 800b11e:	d10c      	bne.n	800b13a <__cvt+0x78>
 800b120:	7802      	ldrb	r2, [r0, #0]
 800b122:	2a30      	cmp	r2, #48	; 0x30
 800b124:	d107      	bne.n	800b136 <__cvt+0x74>
 800b126:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12e:	bf1c      	itt	ne
 800b130:	f1c4 0401 	rsbne	r4, r4, #1
 800b134:	6034      	strne	r4, [r6, #0]
 800b136:	6832      	ldr	r2, [r6, #0]
 800b138:	4413      	add	r3, r2
 800b13a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b142:	d007      	beq.n	800b154 <__cvt+0x92>
 800b144:	2130      	movs	r1, #48	; 0x30
 800b146:	9a03      	ldr	r2, [sp, #12]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d204      	bcs.n	800b156 <__cvt+0x94>
 800b14c:	1c54      	adds	r4, r2, #1
 800b14e:	9403      	str	r4, [sp, #12]
 800b150:	7011      	strb	r1, [r2, #0]
 800b152:	e7f8      	b.n	800b146 <__cvt+0x84>
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b15a:	1a1b      	subs	r3, r3, r0
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	b005      	add	sp, #20
 800b160:	ecbd 8b02 	vpop	{d8}
 800b164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b166 <__exponent>:
 800b166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b168:	2900      	cmp	r1, #0
 800b16a:	4604      	mov	r4, r0
 800b16c:	bfba      	itte	lt
 800b16e:	4249      	neglt	r1, r1
 800b170:	232d      	movlt	r3, #45	; 0x2d
 800b172:	232b      	movge	r3, #43	; 0x2b
 800b174:	2909      	cmp	r1, #9
 800b176:	f804 2b02 	strb.w	r2, [r4], #2
 800b17a:	7043      	strb	r3, [r0, #1]
 800b17c:	dd20      	ble.n	800b1c0 <__exponent+0x5a>
 800b17e:	f10d 0307 	add.w	r3, sp, #7
 800b182:	461f      	mov	r7, r3
 800b184:	260a      	movs	r6, #10
 800b186:	fb91 f5f6 	sdiv	r5, r1, r6
 800b18a:	fb06 1115 	mls	r1, r6, r5, r1
 800b18e:	3130      	adds	r1, #48	; 0x30
 800b190:	2d09      	cmp	r5, #9
 800b192:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b196:	f103 32ff 	add.w	r2, r3, #4294967295
 800b19a:	4629      	mov	r1, r5
 800b19c:	dc09      	bgt.n	800b1b2 <__exponent+0x4c>
 800b19e:	3130      	adds	r1, #48	; 0x30
 800b1a0:	3b02      	subs	r3, #2
 800b1a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b1a6:	42bb      	cmp	r3, r7
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	d304      	bcc.n	800b1b6 <__exponent+0x50>
 800b1ac:	1a10      	subs	r0, r2, r0
 800b1ae:	b003      	add	sp, #12
 800b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	e7e7      	b.n	800b186 <__exponent+0x20>
 800b1b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ba:	f804 2b01 	strb.w	r2, [r4], #1
 800b1be:	e7f2      	b.n	800b1a6 <__exponent+0x40>
 800b1c0:	2330      	movs	r3, #48	; 0x30
 800b1c2:	4419      	add	r1, r3
 800b1c4:	7083      	strb	r3, [r0, #2]
 800b1c6:	1d02      	adds	r2, r0, #4
 800b1c8:	70c1      	strb	r1, [r0, #3]
 800b1ca:	e7ef      	b.n	800b1ac <__exponent+0x46>
 800b1cc:	0000      	movs	r0, r0
	...

0800b1d0 <_printf_float>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	b08d      	sub	sp, #52	; 0x34
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	4616      	mov	r6, r2
 800b1da:	461f      	mov	r7, r3
 800b1dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	f001 fc37 	bl	800ca54 <_localeconv_r>
 800b1e6:	f8d0 b000 	ldr.w	fp, [r0]
 800b1ea:	4658      	mov	r0, fp
 800b1ec:	f7f5 f828 	bl	8000240 <strlen>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f8:	9005      	str	r0, [sp, #20]
 800b1fa:	3307      	adds	r3, #7
 800b1fc:	f023 0307 	bic.w	r3, r3, #7
 800b200:	f103 0108 	add.w	r1, r3, #8
 800b204:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b208:	6822      	ldr	r2, [r4, #0]
 800b20a:	f8c8 1000 	str.w	r1, [r8]
 800b20e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b212:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b216:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b4a0 <_printf_float+0x2d0>
 800b21a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b21e:	eeb0 6bc0 	vabs.f64	d6, d0
 800b222:	eeb4 6b47 	vcmp.f64	d6, d7
 800b226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22a:	dd24      	ble.n	800b276 <_printf_float+0xa6>
 800b22c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	d502      	bpl.n	800b23c <_printf_float+0x6c>
 800b236:	232d      	movs	r3, #45	; 0x2d
 800b238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23c:	499a      	ldr	r1, [pc, #616]	; (800b4a8 <_printf_float+0x2d8>)
 800b23e:	4b9b      	ldr	r3, [pc, #620]	; (800b4ac <_printf_float+0x2dc>)
 800b240:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b244:	bf8c      	ite	hi
 800b246:	4688      	movhi	r8, r1
 800b248:	4698      	movls	r8, r3
 800b24a:	f022 0204 	bic.w	r2, r2, #4
 800b24e:	2303      	movs	r3, #3
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	6022      	str	r2, [r4, #0]
 800b254:	f04f 0a00 	mov.w	sl, #0
 800b258:	9700      	str	r7, [sp, #0]
 800b25a:	4633      	mov	r3, r6
 800b25c:	aa0b      	add	r2, sp, #44	; 0x2c
 800b25e:	4621      	mov	r1, r4
 800b260:	4628      	mov	r0, r5
 800b262:	f000 f9e1 	bl	800b628 <_printf_common>
 800b266:	3001      	adds	r0, #1
 800b268:	f040 8089 	bne.w	800b37e <_printf_float+0x1ae>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	b00d      	add	sp, #52	; 0x34
 800b272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	eeb4 0b40 	vcmp.f64	d0, d0
 800b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27e:	d702      	bvc.n	800b286 <_printf_float+0xb6>
 800b280:	498b      	ldr	r1, [pc, #556]	; (800b4b0 <_printf_float+0x2e0>)
 800b282:	4b8c      	ldr	r3, [pc, #560]	; (800b4b4 <_printf_float+0x2e4>)
 800b284:	e7dc      	b.n	800b240 <_printf_float+0x70>
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	1c4b      	adds	r3, r1, #1
 800b28a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b28e:	ab0a      	add	r3, sp, #40	; 0x28
 800b290:	a809      	add	r0, sp, #36	; 0x24
 800b292:	d13b      	bne.n	800b30c <_printf_float+0x13c>
 800b294:	2106      	movs	r1, #6
 800b296:	6061      	str	r1, [r4, #4]
 800b298:	f04f 0c00 	mov.w	ip, #0
 800b29c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b2a0:	e9cd 0900 	strd	r0, r9, [sp]
 800b2a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2a8:	6022      	str	r2, [r4, #0]
 800b2aa:	6861      	ldr	r1, [r4, #4]
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f7ff ff08 	bl	800b0c2 <__cvt>
 800b2b2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b2b6:	2b47      	cmp	r3, #71	; 0x47
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	d109      	bne.n	800b2d0 <_printf_float+0x100>
 800b2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2be:	1cd8      	adds	r0, r3, #3
 800b2c0:	db02      	blt.n	800b2c8 <_printf_float+0xf8>
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	dd47      	ble.n	800b358 <_printf_float+0x188>
 800b2c8:	f1a9 0902 	sub.w	r9, r9, #2
 800b2cc:	fa5f f989 	uxtb.w	r9, r9
 800b2d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b2d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2d6:	d824      	bhi.n	800b322 <_printf_float+0x152>
 800b2d8:	3901      	subs	r1, #1
 800b2da:	464a      	mov	r2, r9
 800b2dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2e2:	f7ff ff40 	bl	800b166 <__exponent>
 800b2e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e8:	1813      	adds	r3, r2, r0
 800b2ea:	2a01      	cmp	r2, #1
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	dc02      	bgt.n	800b2f8 <_printf_float+0x128>
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	07d1      	lsls	r1, r2, #31
 800b2f6:	d501      	bpl.n	800b2fc <_printf_float+0x12c>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0a9      	beq.n	800b258 <_printf_float+0x88>
 800b304:	232d      	movs	r3, #45	; 0x2d
 800b306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b30a:	e7a5      	b.n	800b258 <_printf_float+0x88>
 800b30c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b310:	f000 8178 	beq.w	800b604 <_printf_float+0x434>
 800b314:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b318:	d1be      	bne.n	800b298 <_printf_float+0xc8>
 800b31a:	2900      	cmp	r1, #0
 800b31c:	d1bc      	bne.n	800b298 <_printf_float+0xc8>
 800b31e:	2101      	movs	r1, #1
 800b320:	e7b9      	b.n	800b296 <_printf_float+0xc6>
 800b322:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b326:	d119      	bne.n	800b35c <_printf_float+0x18c>
 800b328:	2900      	cmp	r1, #0
 800b32a:	6863      	ldr	r3, [r4, #4]
 800b32c:	dd0c      	ble.n	800b348 <_printf_float+0x178>
 800b32e:	6121      	str	r1, [r4, #16]
 800b330:	b913      	cbnz	r3, 800b338 <_printf_float+0x168>
 800b332:	6822      	ldr	r2, [r4, #0]
 800b334:	07d2      	lsls	r2, r2, #31
 800b336:	d502      	bpl.n	800b33e <_printf_float+0x16e>
 800b338:	3301      	adds	r3, #1
 800b33a:	440b      	add	r3, r1
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b340:	65a3      	str	r3, [r4, #88]	; 0x58
 800b342:	f04f 0a00 	mov.w	sl, #0
 800b346:	e7d9      	b.n	800b2fc <_printf_float+0x12c>
 800b348:	b913      	cbnz	r3, 800b350 <_printf_float+0x180>
 800b34a:	6822      	ldr	r2, [r4, #0]
 800b34c:	07d0      	lsls	r0, r2, #31
 800b34e:	d501      	bpl.n	800b354 <_printf_float+0x184>
 800b350:	3302      	adds	r3, #2
 800b352:	e7f3      	b.n	800b33c <_printf_float+0x16c>
 800b354:	2301      	movs	r3, #1
 800b356:	e7f1      	b.n	800b33c <_printf_float+0x16c>
 800b358:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b35c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b360:	4293      	cmp	r3, r2
 800b362:	db05      	blt.n	800b370 <_printf_float+0x1a0>
 800b364:	6822      	ldr	r2, [r4, #0]
 800b366:	6123      	str	r3, [r4, #16]
 800b368:	07d1      	lsls	r1, r2, #31
 800b36a:	d5e8      	bpl.n	800b33e <_printf_float+0x16e>
 800b36c:	3301      	adds	r3, #1
 800b36e:	e7e5      	b.n	800b33c <_printf_float+0x16c>
 800b370:	2b00      	cmp	r3, #0
 800b372:	bfd4      	ite	le
 800b374:	f1c3 0302 	rsble	r3, r3, #2
 800b378:	2301      	movgt	r3, #1
 800b37a:	4413      	add	r3, r2
 800b37c:	e7de      	b.n	800b33c <_printf_float+0x16c>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	055a      	lsls	r2, r3, #21
 800b382:	d407      	bmi.n	800b394 <_printf_float+0x1c4>
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	4642      	mov	r2, r8
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	d12a      	bne.n	800b3e8 <_printf_float+0x218>
 800b392:	e76b      	b.n	800b26c <_printf_float+0x9c>
 800b394:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b398:	f240 80de 	bls.w	800b558 <_printf_float+0x388>
 800b39c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b3a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a8:	d133      	bne.n	800b412 <_printf_float+0x242>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	4a42      	ldr	r2, [pc, #264]	; (800b4b8 <_printf_float+0x2e8>)
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	47b8      	blx	r7
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	f43f af59 	beq.w	800b26c <_printf_float+0x9c>
 800b3ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	db02      	blt.n	800b3c8 <_printf_float+0x1f8>
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	07d8      	lsls	r0, r3, #31
 800b3c6:	d50f      	bpl.n	800b3e8 <_printf_float+0x218>
 800b3c8:	9b05      	ldr	r3, [sp, #20]
 800b3ca:	465a      	mov	r2, fp
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	47b8      	blx	r7
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	f43f af4a 	beq.w	800b26c <_printf_float+0x9c>
 800b3d8:	f04f 0800 	mov.w	r8, #0
 800b3dc:	f104 091a 	add.w	r9, r4, #26
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	4543      	cmp	r3, r8
 800b3e6:	dc09      	bgt.n	800b3fc <_printf_float+0x22c>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	079b      	lsls	r3, r3, #30
 800b3ec:	f100 8105 	bmi.w	800b5fa <_printf_float+0x42a>
 800b3f0:	68e0      	ldr	r0, [r4, #12]
 800b3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f4:	4298      	cmp	r0, r3
 800b3f6:	bfb8      	it	lt
 800b3f8:	4618      	movlt	r0, r3
 800b3fa:	e739      	b.n	800b270 <_printf_float+0xa0>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	464a      	mov	r2, r9
 800b400:	4631      	mov	r1, r6
 800b402:	4628      	mov	r0, r5
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	f43f af30 	beq.w	800b26c <_printf_float+0x9c>
 800b40c:	f108 0801 	add.w	r8, r8, #1
 800b410:	e7e6      	b.n	800b3e0 <_printf_float+0x210>
 800b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	dc2b      	bgt.n	800b470 <_printf_float+0x2a0>
 800b418:	2301      	movs	r3, #1
 800b41a:	4a27      	ldr	r2, [pc, #156]	; (800b4b8 <_printf_float+0x2e8>)
 800b41c:	4631      	mov	r1, r6
 800b41e:	4628      	mov	r0, r5
 800b420:	47b8      	blx	r7
 800b422:	3001      	adds	r0, #1
 800b424:	f43f af22 	beq.w	800b26c <_printf_float+0x9c>
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	b923      	cbnz	r3, 800b436 <_printf_float+0x266>
 800b42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b42e:	b913      	cbnz	r3, 800b436 <_printf_float+0x266>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	07d9      	lsls	r1, r3, #31
 800b434:	d5d8      	bpl.n	800b3e8 <_printf_float+0x218>
 800b436:	9b05      	ldr	r3, [sp, #20]
 800b438:	465a      	mov	r2, fp
 800b43a:	4631      	mov	r1, r6
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b8      	blx	r7
 800b440:	3001      	adds	r0, #1
 800b442:	f43f af13 	beq.w	800b26c <_printf_float+0x9c>
 800b446:	f04f 0900 	mov.w	r9, #0
 800b44a:	f104 0a1a 	add.w	sl, r4, #26
 800b44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b450:	425b      	negs	r3, r3
 800b452:	454b      	cmp	r3, r9
 800b454:	dc01      	bgt.n	800b45a <_printf_float+0x28a>
 800b456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b458:	e795      	b.n	800b386 <_printf_float+0x1b6>
 800b45a:	2301      	movs	r3, #1
 800b45c:	4652      	mov	r2, sl
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	f43f af01 	beq.w	800b26c <_printf_float+0x9c>
 800b46a:	f109 0901 	add.w	r9, r9, #1
 800b46e:	e7ee      	b.n	800b44e <_printf_float+0x27e>
 800b470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b474:	429a      	cmp	r2, r3
 800b476:	bfa8      	it	ge
 800b478:	461a      	movge	r2, r3
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	4691      	mov	r9, r2
 800b47e:	dd07      	ble.n	800b490 <_printf_float+0x2c0>
 800b480:	4613      	mov	r3, r2
 800b482:	4631      	mov	r1, r6
 800b484:	4642      	mov	r2, r8
 800b486:	4628      	mov	r0, r5
 800b488:	47b8      	blx	r7
 800b48a:	3001      	adds	r0, #1
 800b48c:	f43f aeee 	beq.w	800b26c <_printf_float+0x9c>
 800b490:	f104 031a 	add.w	r3, r4, #26
 800b494:	f04f 0a00 	mov.w	sl, #0
 800b498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b49c:	9307      	str	r3, [sp, #28]
 800b49e:	e017      	b.n	800b4d0 <_printf_float+0x300>
 800b4a0:	ffffffff 	.word	0xffffffff
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	0800e890 	.word	0x0800e890
 800b4ac:	0800e88c 	.word	0x0800e88c
 800b4b0:	0800e898 	.word	0x0800e898
 800b4b4:	0800e894 	.word	0x0800e894
 800b4b8:	0800e89c 	.word	0x0800e89c
 800b4bc:	2301      	movs	r3, #1
 800b4be:	9a07      	ldr	r2, [sp, #28]
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	f43f aed0 	beq.w	800b26c <_printf_float+0x9c>
 800b4cc:	f10a 0a01 	add.w	sl, sl, #1
 800b4d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4d2:	9306      	str	r3, [sp, #24]
 800b4d4:	eba3 0309 	sub.w	r3, r3, r9
 800b4d8:	4553      	cmp	r3, sl
 800b4da:	dcef      	bgt.n	800b4bc <_printf_float+0x2ec>
 800b4dc:	9b06      	ldr	r3, [sp, #24]
 800b4de:	4498      	add	r8, r3
 800b4e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	db15      	blt.n	800b514 <_printf_float+0x344>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	07da      	lsls	r2, r3, #31
 800b4ec:	d412      	bmi.n	800b514 <_printf_float+0x344>
 800b4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f0:	9a06      	ldr	r2, [sp, #24]
 800b4f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4f4:	1a9a      	subs	r2, r3, r2
 800b4f6:	eba3 0a01 	sub.w	sl, r3, r1
 800b4fa:	4592      	cmp	sl, r2
 800b4fc:	bfa8      	it	ge
 800b4fe:	4692      	movge	sl, r2
 800b500:	f1ba 0f00 	cmp.w	sl, #0
 800b504:	dc0e      	bgt.n	800b524 <_printf_float+0x354>
 800b506:	f04f 0800 	mov.w	r8, #0
 800b50a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b50e:	f104 091a 	add.w	r9, r4, #26
 800b512:	e019      	b.n	800b548 <_printf_float+0x378>
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	465a      	mov	r2, fp
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	d1e5      	bne.n	800b4ee <_printf_float+0x31e>
 800b522:	e6a3      	b.n	800b26c <_printf_float+0x9c>
 800b524:	4653      	mov	r3, sl
 800b526:	4642      	mov	r2, r8
 800b528:	4631      	mov	r1, r6
 800b52a:	4628      	mov	r0, r5
 800b52c:	47b8      	blx	r7
 800b52e:	3001      	adds	r0, #1
 800b530:	d1e9      	bne.n	800b506 <_printf_float+0x336>
 800b532:	e69b      	b.n	800b26c <_printf_float+0x9c>
 800b534:	2301      	movs	r3, #1
 800b536:	464a      	mov	r2, r9
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	f43f ae94 	beq.w	800b26c <_printf_float+0x9c>
 800b544:	f108 0801 	add.w	r8, r8, #1
 800b548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	eba3 030a 	sub.w	r3, r3, sl
 800b552:	4543      	cmp	r3, r8
 800b554:	dcee      	bgt.n	800b534 <_printf_float+0x364>
 800b556:	e747      	b.n	800b3e8 <_printf_float+0x218>
 800b558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b55a:	2a01      	cmp	r2, #1
 800b55c:	dc01      	bgt.n	800b562 <_printf_float+0x392>
 800b55e:	07db      	lsls	r3, r3, #31
 800b560:	d539      	bpl.n	800b5d6 <_printf_float+0x406>
 800b562:	2301      	movs	r3, #1
 800b564:	4642      	mov	r2, r8
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f ae7d 	beq.w	800b26c <_printf_float+0x9c>
 800b572:	9b05      	ldr	r3, [sp, #20]
 800b574:	465a      	mov	r2, fp
 800b576:	4631      	mov	r1, r6
 800b578:	4628      	mov	r0, r5
 800b57a:	47b8      	blx	r7
 800b57c:	3001      	adds	r0, #1
 800b57e:	f108 0801 	add.w	r8, r8, #1
 800b582:	f43f ae73 	beq.w	800b26c <_printf_float+0x9c>
 800b586:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b594:	f103 33ff 	add.w	r3, r3, #4294967295
 800b598:	d018      	beq.n	800b5cc <_printf_float+0x3fc>
 800b59a:	4642      	mov	r2, r8
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b8      	blx	r7
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	d10e      	bne.n	800b5c4 <_printf_float+0x3f4>
 800b5a6:	e661      	b.n	800b26c <_printf_float+0x9c>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	464a      	mov	r2, r9
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	f43f ae5a 	beq.w	800b26c <_printf_float+0x9c>
 800b5b8:	f108 0801 	add.w	r8, r8, #1
 800b5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4543      	cmp	r3, r8
 800b5c2:	dcf1      	bgt.n	800b5a8 <_printf_float+0x3d8>
 800b5c4:	4653      	mov	r3, sl
 800b5c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5ca:	e6dd      	b.n	800b388 <_printf_float+0x1b8>
 800b5cc:	f04f 0800 	mov.w	r8, #0
 800b5d0:	f104 091a 	add.w	r9, r4, #26
 800b5d4:	e7f2      	b.n	800b5bc <_printf_float+0x3ec>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e7df      	b.n	800b59a <_printf_float+0x3ca>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	464a      	mov	r2, r9
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	47b8      	blx	r7
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	f43f ae41 	beq.w	800b26c <_printf_float+0x9c>
 800b5ea:	f108 0801 	add.w	r8, r8, #1
 800b5ee:	68e3      	ldr	r3, [r4, #12]
 800b5f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5f2:	1a9b      	subs	r3, r3, r2
 800b5f4:	4543      	cmp	r3, r8
 800b5f6:	dcf0      	bgt.n	800b5da <_printf_float+0x40a>
 800b5f8:	e6fa      	b.n	800b3f0 <_printf_float+0x220>
 800b5fa:	f04f 0800 	mov.w	r8, #0
 800b5fe:	f104 0919 	add.w	r9, r4, #25
 800b602:	e7f4      	b.n	800b5ee <_printf_float+0x41e>
 800b604:	2900      	cmp	r1, #0
 800b606:	f43f ae8a 	beq.w	800b31e <_printf_float+0x14e>
 800b60a:	f04f 0c00 	mov.w	ip, #0
 800b60e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b612:	e9cd 0900 	strd	r0, r9, [sp]
 800b616:	6022      	str	r2, [r4, #0]
 800b618:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b61c:	4628      	mov	r0, r5
 800b61e:	f7ff fd50 	bl	800b0c2 <__cvt>
 800b622:	4680      	mov	r8, r0
 800b624:	e64a      	b.n	800b2bc <_printf_float+0xec>
 800b626:	bf00      	nop

0800b628 <_printf_common>:
 800b628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b62c:	4691      	mov	r9, r2
 800b62e:	461f      	mov	r7, r3
 800b630:	688a      	ldr	r2, [r1, #8]
 800b632:	690b      	ldr	r3, [r1, #16]
 800b634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b638:	4293      	cmp	r3, r2
 800b63a:	bfb8      	it	lt
 800b63c:	4613      	movlt	r3, r2
 800b63e:	f8c9 3000 	str.w	r3, [r9]
 800b642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b646:	4606      	mov	r6, r0
 800b648:	460c      	mov	r4, r1
 800b64a:	b112      	cbz	r2, 800b652 <_printf_common+0x2a>
 800b64c:	3301      	adds	r3, #1
 800b64e:	f8c9 3000 	str.w	r3, [r9]
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	0699      	lsls	r1, r3, #26
 800b656:	bf42      	ittt	mi
 800b658:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b65c:	3302      	addmi	r3, #2
 800b65e:	f8c9 3000 	strmi.w	r3, [r9]
 800b662:	6825      	ldr	r5, [r4, #0]
 800b664:	f015 0506 	ands.w	r5, r5, #6
 800b668:	d107      	bne.n	800b67a <_printf_common+0x52>
 800b66a:	f104 0a19 	add.w	sl, r4, #25
 800b66e:	68e3      	ldr	r3, [r4, #12]
 800b670:	f8d9 2000 	ldr.w	r2, [r9]
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	42ab      	cmp	r3, r5
 800b678:	dc28      	bgt.n	800b6cc <_printf_common+0xa4>
 800b67a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b67e:	6822      	ldr	r2, [r4, #0]
 800b680:	3300      	adds	r3, #0
 800b682:	bf18      	it	ne
 800b684:	2301      	movne	r3, #1
 800b686:	0692      	lsls	r2, r2, #26
 800b688:	d42d      	bmi.n	800b6e6 <_printf_common+0xbe>
 800b68a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b68e:	4639      	mov	r1, r7
 800b690:	4630      	mov	r0, r6
 800b692:	47c0      	blx	r8
 800b694:	3001      	adds	r0, #1
 800b696:	d020      	beq.n	800b6da <_printf_common+0xb2>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	68e5      	ldr	r5, [r4, #12]
 800b69c:	f8d9 2000 	ldr.w	r2, [r9]
 800b6a0:	f003 0306 	and.w	r3, r3, #6
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	bf08      	it	eq
 800b6a8:	1aad      	subeq	r5, r5, r2
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	bf0c      	ite	eq
 800b6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6b4:	2500      	movne	r5, #0
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	bfc4      	itt	gt
 800b6ba:	1a9b      	subgt	r3, r3, r2
 800b6bc:	18ed      	addgt	r5, r5, r3
 800b6be:	f04f 0900 	mov.w	r9, #0
 800b6c2:	341a      	adds	r4, #26
 800b6c4:	454d      	cmp	r5, r9
 800b6c6:	d11a      	bne.n	800b6fe <_printf_common+0xd6>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	e008      	b.n	800b6de <_printf_common+0xb6>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	4652      	mov	r2, sl
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	47c0      	blx	r8
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	d103      	bne.n	800b6e2 <_printf_common+0xba>
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e2:	3501      	adds	r5, #1
 800b6e4:	e7c3      	b.n	800b66e <_printf_common+0x46>
 800b6e6:	18e1      	adds	r1, r4, r3
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	2030      	movs	r0, #48	; 0x30
 800b6ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6f0:	4422      	add	r2, r4
 800b6f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6fa:	3302      	adds	r3, #2
 800b6fc:	e7c5      	b.n	800b68a <_printf_common+0x62>
 800b6fe:	2301      	movs	r3, #1
 800b700:	4622      	mov	r2, r4
 800b702:	4639      	mov	r1, r7
 800b704:	4630      	mov	r0, r6
 800b706:	47c0      	blx	r8
 800b708:	3001      	adds	r0, #1
 800b70a:	d0e6      	beq.n	800b6da <_printf_common+0xb2>
 800b70c:	f109 0901 	add.w	r9, r9, #1
 800b710:	e7d8      	b.n	800b6c4 <_printf_common+0x9c>
	...

0800b714 <_printf_i>:
 800b714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b718:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b71c:	460c      	mov	r4, r1
 800b71e:	7e09      	ldrb	r1, [r1, #24]
 800b720:	b085      	sub	sp, #20
 800b722:	296e      	cmp	r1, #110	; 0x6e
 800b724:	4617      	mov	r7, r2
 800b726:	4606      	mov	r6, r0
 800b728:	4698      	mov	r8, r3
 800b72a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b72c:	f000 80b3 	beq.w	800b896 <_printf_i+0x182>
 800b730:	d822      	bhi.n	800b778 <_printf_i+0x64>
 800b732:	2963      	cmp	r1, #99	; 0x63
 800b734:	d036      	beq.n	800b7a4 <_printf_i+0x90>
 800b736:	d80a      	bhi.n	800b74e <_printf_i+0x3a>
 800b738:	2900      	cmp	r1, #0
 800b73a:	f000 80b9 	beq.w	800b8b0 <_printf_i+0x19c>
 800b73e:	2958      	cmp	r1, #88	; 0x58
 800b740:	f000 8083 	beq.w	800b84a <_printf_i+0x136>
 800b744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b748:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b74c:	e032      	b.n	800b7b4 <_printf_i+0xa0>
 800b74e:	2964      	cmp	r1, #100	; 0x64
 800b750:	d001      	beq.n	800b756 <_printf_i+0x42>
 800b752:	2969      	cmp	r1, #105	; 0x69
 800b754:	d1f6      	bne.n	800b744 <_printf_i+0x30>
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	6813      	ldr	r3, [r2, #0]
 800b75a:	0605      	lsls	r5, r0, #24
 800b75c:	f103 0104 	add.w	r1, r3, #4
 800b760:	d52a      	bpl.n	800b7b8 <_printf_i+0xa4>
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6011      	str	r1, [r2, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	da03      	bge.n	800b772 <_printf_i+0x5e>
 800b76a:	222d      	movs	r2, #45	; 0x2d
 800b76c:	425b      	negs	r3, r3
 800b76e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b772:	486f      	ldr	r0, [pc, #444]	; (800b930 <_printf_i+0x21c>)
 800b774:	220a      	movs	r2, #10
 800b776:	e039      	b.n	800b7ec <_printf_i+0xd8>
 800b778:	2973      	cmp	r1, #115	; 0x73
 800b77a:	f000 809d 	beq.w	800b8b8 <_printf_i+0x1a4>
 800b77e:	d808      	bhi.n	800b792 <_printf_i+0x7e>
 800b780:	296f      	cmp	r1, #111	; 0x6f
 800b782:	d020      	beq.n	800b7c6 <_printf_i+0xb2>
 800b784:	2970      	cmp	r1, #112	; 0x70
 800b786:	d1dd      	bne.n	800b744 <_printf_i+0x30>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	f043 0320 	orr.w	r3, r3, #32
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	e003      	b.n	800b79a <_printf_i+0x86>
 800b792:	2975      	cmp	r1, #117	; 0x75
 800b794:	d017      	beq.n	800b7c6 <_printf_i+0xb2>
 800b796:	2978      	cmp	r1, #120	; 0x78
 800b798:	d1d4      	bne.n	800b744 <_printf_i+0x30>
 800b79a:	2378      	movs	r3, #120	; 0x78
 800b79c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7a0:	4864      	ldr	r0, [pc, #400]	; (800b934 <_printf_i+0x220>)
 800b7a2:	e055      	b.n	800b850 <_printf_i+0x13c>
 800b7a4:	6813      	ldr	r3, [r2, #0]
 800b7a6:	1d19      	adds	r1, r3, #4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6011      	str	r1, [r2, #0]
 800b7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e08c      	b.n	800b8d2 <_printf_i+0x1be>
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6011      	str	r1, [r2, #0]
 800b7bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7c0:	bf18      	it	ne
 800b7c2:	b21b      	sxthne	r3, r3
 800b7c4:	e7cf      	b.n	800b766 <_printf_i+0x52>
 800b7c6:	6813      	ldr	r3, [r2, #0]
 800b7c8:	6825      	ldr	r5, [r4, #0]
 800b7ca:	1d18      	adds	r0, r3, #4
 800b7cc:	6010      	str	r0, [r2, #0]
 800b7ce:	0628      	lsls	r0, r5, #24
 800b7d0:	d501      	bpl.n	800b7d6 <_printf_i+0xc2>
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	e002      	b.n	800b7dc <_printf_i+0xc8>
 800b7d6:	0668      	lsls	r0, r5, #25
 800b7d8:	d5fb      	bpl.n	800b7d2 <_printf_i+0xbe>
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	4854      	ldr	r0, [pc, #336]	; (800b930 <_printf_i+0x21c>)
 800b7de:	296f      	cmp	r1, #111	; 0x6f
 800b7e0:	bf14      	ite	ne
 800b7e2:	220a      	movne	r2, #10
 800b7e4:	2208      	moveq	r2, #8
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ec:	6865      	ldr	r5, [r4, #4]
 800b7ee:	60a5      	str	r5, [r4, #8]
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	f2c0 8095 	blt.w	800b920 <_printf_i+0x20c>
 800b7f6:	6821      	ldr	r1, [r4, #0]
 800b7f8:	f021 0104 	bic.w	r1, r1, #4
 800b7fc:	6021      	str	r1, [r4, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d13d      	bne.n	800b87e <_printf_i+0x16a>
 800b802:	2d00      	cmp	r5, #0
 800b804:	f040 808e 	bne.w	800b924 <_printf_i+0x210>
 800b808:	4665      	mov	r5, ip
 800b80a:	2a08      	cmp	r2, #8
 800b80c:	d10b      	bne.n	800b826 <_printf_i+0x112>
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	07db      	lsls	r3, r3, #31
 800b812:	d508      	bpl.n	800b826 <_printf_i+0x112>
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	6862      	ldr	r2, [r4, #4]
 800b818:	429a      	cmp	r2, r3
 800b81a:	bfde      	ittt	le
 800b81c:	2330      	movle	r3, #48	; 0x30
 800b81e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b822:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b826:	ebac 0305 	sub.w	r3, ip, r5
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	f8cd 8000 	str.w	r8, [sp]
 800b830:	463b      	mov	r3, r7
 800b832:	aa03      	add	r2, sp, #12
 800b834:	4621      	mov	r1, r4
 800b836:	4630      	mov	r0, r6
 800b838:	f7ff fef6 	bl	800b628 <_printf_common>
 800b83c:	3001      	adds	r0, #1
 800b83e:	d14d      	bne.n	800b8dc <_printf_i+0x1c8>
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	b005      	add	sp, #20
 800b846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b84a:	4839      	ldr	r0, [pc, #228]	; (800b930 <_printf_i+0x21c>)
 800b84c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b850:	6813      	ldr	r3, [r2, #0]
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	1d1d      	adds	r5, r3, #4
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6015      	str	r5, [r2, #0]
 800b85a:	060a      	lsls	r2, r1, #24
 800b85c:	d50b      	bpl.n	800b876 <_printf_i+0x162>
 800b85e:	07ca      	lsls	r2, r1, #31
 800b860:	bf44      	itt	mi
 800b862:	f041 0120 	orrmi.w	r1, r1, #32
 800b866:	6021      	strmi	r1, [r4, #0]
 800b868:	b91b      	cbnz	r3, 800b872 <_printf_i+0x15e>
 800b86a:	6822      	ldr	r2, [r4, #0]
 800b86c:	f022 0220 	bic.w	r2, r2, #32
 800b870:	6022      	str	r2, [r4, #0]
 800b872:	2210      	movs	r2, #16
 800b874:	e7b7      	b.n	800b7e6 <_printf_i+0xd2>
 800b876:	064d      	lsls	r5, r1, #25
 800b878:	bf48      	it	mi
 800b87a:	b29b      	uxthmi	r3, r3
 800b87c:	e7ef      	b.n	800b85e <_printf_i+0x14a>
 800b87e:	4665      	mov	r5, ip
 800b880:	fbb3 f1f2 	udiv	r1, r3, r2
 800b884:	fb02 3311 	mls	r3, r2, r1, r3
 800b888:	5cc3      	ldrb	r3, [r0, r3]
 800b88a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b88e:	460b      	mov	r3, r1
 800b890:	2900      	cmp	r1, #0
 800b892:	d1f5      	bne.n	800b880 <_printf_i+0x16c>
 800b894:	e7b9      	b.n	800b80a <_printf_i+0xf6>
 800b896:	6813      	ldr	r3, [r2, #0]
 800b898:	6825      	ldr	r5, [r4, #0]
 800b89a:	6961      	ldr	r1, [r4, #20]
 800b89c:	1d18      	adds	r0, r3, #4
 800b89e:	6010      	str	r0, [r2, #0]
 800b8a0:	0628      	lsls	r0, r5, #24
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	d501      	bpl.n	800b8aa <_printf_i+0x196>
 800b8a6:	6019      	str	r1, [r3, #0]
 800b8a8:	e002      	b.n	800b8b0 <_printf_i+0x19c>
 800b8aa:	066a      	lsls	r2, r5, #25
 800b8ac:	d5fb      	bpl.n	800b8a6 <_printf_i+0x192>
 800b8ae:	8019      	strh	r1, [r3, #0]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	4665      	mov	r5, ip
 800b8b6:	e7b9      	b.n	800b82c <_printf_i+0x118>
 800b8b8:	6813      	ldr	r3, [r2, #0]
 800b8ba:	1d19      	adds	r1, r3, #4
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	681d      	ldr	r5, [r3, #0]
 800b8c0:	6862      	ldr	r2, [r4, #4]
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f7f4 fcc3 	bl	8000250 <memchr>
 800b8ca:	b108      	cbz	r0, 800b8d0 <_printf_i+0x1bc>
 800b8cc:	1b40      	subs	r0, r0, r5
 800b8ce:	6060      	str	r0, [r4, #4]
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8da:	e7a7      	b.n	800b82c <_printf_i+0x118>
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	462a      	mov	r2, r5
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	47c0      	blx	r8
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	d0aa      	beq.n	800b840 <_printf_i+0x12c>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	079b      	lsls	r3, r3, #30
 800b8ee:	d413      	bmi.n	800b918 <_printf_i+0x204>
 800b8f0:	68e0      	ldr	r0, [r4, #12]
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	4298      	cmp	r0, r3
 800b8f6:	bfb8      	it	lt
 800b8f8:	4618      	movlt	r0, r3
 800b8fa:	e7a3      	b.n	800b844 <_printf_i+0x130>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	464a      	mov	r2, r9
 800b900:	4639      	mov	r1, r7
 800b902:	4630      	mov	r0, r6
 800b904:	47c0      	blx	r8
 800b906:	3001      	adds	r0, #1
 800b908:	d09a      	beq.n	800b840 <_printf_i+0x12c>
 800b90a:	3501      	adds	r5, #1
 800b90c:	68e3      	ldr	r3, [r4, #12]
 800b90e:	9a03      	ldr	r2, [sp, #12]
 800b910:	1a9b      	subs	r3, r3, r2
 800b912:	42ab      	cmp	r3, r5
 800b914:	dcf2      	bgt.n	800b8fc <_printf_i+0x1e8>
 800b916:	e7eb      	b.n	800b8f0 <_printf_i+0x1dc>
 800b918:	2500      	movs	r5, #0
 800b91a:	f104 0919 	add.w	r9, r4, #25
 800b91e:	e7f5      	b.n	800b90c <_printf_i+0x1f8>
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1ac      	bne.n	800b87e <_printf_i+0x16a>
 800b924:	7803      	ldrb	r3, [r0, #0]
 800b926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b92a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b92e:	e76c      	b.n	800b80a <_printf_i+0xf6>
 800b930:	0800e89e 	.word	0x0800e89e
 800b934:	0800e8af 	.word	0x0800e8af

0800b938 <iprintf>:
 800b938:	b40f      	push	{r0, r1, r2, r3}
 800b93a:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <iprintf+0x2c>)
 800b93c:	b513      	push	{r0, r1, r4, lr}
 800b93e:	681c      	ldr	r4, [r3, #0]
 800b940:	b124      	cbz	r4, 800b94c <iprintf+0x14>
 800b942:	69a3      	ldr	r3, [r4, #24]
 800b944:	b913      	cbnz	r3, 800b94c <iprintf+0x14>
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fffa 	bl	800c940 <__sinit>
 800b94c:	ab05      	add	r3, sp, #20
 800b94e:	9a04      	ldr	r2, [sp, #16]
 800b950:	68a1      	ldr	r1, [r4, #8]
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	4620      	mov	r0, r4
 800b956:	f001 fcb3 	bl	800d2c0 <_vfiprintf_r>
 800b95a:	b002      	add	sp, #8
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	b004      	add	sp, #16
 800b962:	4770      	bx	lr
 800b964:	20000044 	.word	0x20000044

0800b968 <_puts_r>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	460e      	mov	r6, r1
 800b96c:	4605      	mov	r5, r0
 800b96e:	b118      	cbz	r0, 800b978 <_puts_r+0x10>
 800b970:	6983      	ldr	r3, [r0, #24]
 800b972:	b90b      	cbnz	r3, 800b978 <_puts_r+0x10>
 800b974:	f000 ffe4 	bl	800c940 <__sinit>
 800b978:	69ab      	ldr	r3, [r5, #24]
 800b97a:	68ac      	ldr	r4, [r5, #8]
 800b97c:	b913      	cbnz	r3, 800b984 <_puts_r+0x1c>
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 ffde 	bl	800c940 <__sinit>
 800b984:	4b23      	ldr	r3, [pc, #140]	; (800ba14 <_puts_r+0xac>)
 800b986:	429c      	cmp	r4, r3
 800b988:	d117      	bne.n	800b9ba <_puts_r+0x52>
 800b98a:	686c      	ldr	r4, [r5, #4]
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	071b      	lsls	r3, r3, #28
 800b990:	d51d      	bpl.n	800b9ce <_puts_r+0x66>
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	b1db      	cbz	r3, 800b9ce <_puts_r+0x66>
 800b996:	3e01      	subs	r6, #1
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	60a3      	str	r3, [r4, #8]
 800b9a2:	b9e9      	cbnz	r1, 800b9e0 <_puts_r+0x78>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	da2e      	bge.n	800ba06 <_puts_r+0x9e>
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	210a      	movs	r1, #10
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f000 f83f 	bl	800ba30 <__swbuf_r>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d011      	beq.n	800b9da <_puts_r+0x72>
 800b9b6:	200a      	movs	r0, #10
 800b9b8:	e011      	b.n	800b9de <_puts_r+0x76>
 800b9ba:	4b17      	ldr	r3, [pc, #92]	; (800ba18 <_puts_r+0xb0>)
 800b9bc:	429c      	cmp	r4, r3
 800b9be:	d101      	bne.n	800b9c4 <_puts_r+0x5c>
 800b9c0:	68ac      	ldr	r4, [r5, #8]
 800b9c2:	e7e3      	b.n	800b98c <_puts_r+0x24>
 800b9c4:	4b15      	ldr	r3, [pc, #84]	; (800ba1c <_puts_r+0xb4>)
 800b9c6:	429c      	cmp	r4, r3
 800b9c8:	bf08      	it	eq
 800b9ca:	68ec      	ldreq	r4, [r5, #12]
 800b9cc:	e7de      	b.n	800b98c <_puts_r+0x24>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f87f 	bl	800bad4 <__swsetup_r>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d0dd      	beq.n	800b996 <_puts_r+0x2e>
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	bd70      	pop	{r4, r5, r6, pc}
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	da04      	bge.n	800b9ee <_puts_r+0x86>
 800b9e4:	69a2      	ldr	r2, [r4, #24]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	dc06      	bgt.n	800b9f8 <_puts_r+0x90>
 800b9ea:	290a      	cmp	r1, #10
 800b9ec:	d004      	beq.n	800b9f8 <_puts_r+0x90>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	6022      	str	r2, [r4, #0]
 800b9f4:	7019      	strb	r1, [r3, #0]
 800b9f6:	e7cf      	b.n	800b998 <_puts_r+0x30>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f818 	bl	800ba30 <__swbuf_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	d1c9      	bne.n	800b998 <_puts_r+0x30>
 800ba04:	e7e9      	b.n	800b9da <_puts_r+0x72>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	200a      	movs	r0, #10
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	6022      	str	r2, [r4, #0]
 800ba0e:	7018      	strb	r0, [r3, #0]
 800ba10:	e7e5      	b.n	800b9de <_puts_r+0x76>
 800ba12:	bf00      	nop
 800ba14:	0800e8f0 	.word	0x0800e8f0
 800ba18:	0800e910 	.word	0x0800e910
 800ba1c:	0800e8d0 	.word	0x0800e8d0

0800ba20 <puts>:
 800ba20:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <puts+0xc>)
 800ba22:	4601      	mov	r1, r0
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f7ff bf9f 	b.w	800b968 <_puts_r>
 800ba2a:	bf00      	nop
 800ba2c:	20000044 	.word	0x20000044

0800ba30 <__swbuf_r>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	460e      	mov	r6, r1
 800ba34:	4614      	mov	r4, r2
 800ba36:	4605      	mov	r5, r0
 800ba38:	b118      	cbz	r0, 800ba42 <__swbuf_r+0x12>
 800ba3a:	6983      	ldr	r3, [r0, #24]
 800ba3c:	b90b      	cbnz	r3, 800ba42 <__swbuf_r+0x12>
 800ba3e:	f000 ff7f 	bl	800c940 <__sinit>
 800ba42:	4b21      	ldr	r3, [pc, #132]	; (800bac8 <__swbuf_r+0x98>)
 800ba44:	429c      	cmp	r4, r3
 800ba46:	d12a      	bne.n	800ba9e <__swbuf_r+0x6e>
 800ba48:	686c      	ldr	r4, [r5, #4]
 800ba4a:	69a3      	ldr	r3, [r4, #24]
 800ba4c:	60a3      	str	r3, [r4, #8]
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	071a      	lsls	r2, r3, #28
 800ba52:	d52e      	bpl.n	800bab2 <__swbuf_r+0x82>
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	b363      	cbz	r3, 800bab2 <__swbuf_r+0x82>
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	6820      	ldr	r0, [r4, #0]
 800ba5c:	1ac0      	subs	r0, r0, r3
 800ba5e:	6963      	ldr	r3, [r4, #20]
 800ba60:	b2f6      	uxtb	r6, r6
 800ba62:	4283      	cmp	r3, r0
 800ba64:	4637      	mov	r7, r6
 800ba66:	dc04      	bgt.n	800ba72 <__swbuf_r+0x42>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 fefe 	bl	800c86c <_fflush_r>
 800ba70:	bb28      	cbnz	r0, 800babe <__swbuf_r+0x8e>
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	60a3      	str	r3, [r4, #8]
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	6022      	str	r2, [r4, #0]
 800ba7e:	701e      	strb	r6, [r3, #0]
 800ba80:	6963      	ldr	r3, [r4, #20]
 800ba82:	3001      	adds	r0, #1
 800ba84:	4283      	cmp	r3, r0
 800ba86:	d004      	beq.n	800ba92 <__swbuf_r+0x62>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	07db      	lsls	r3, r3, #31
 800ba8c:	d519      	bpl.n	800bac2 <__swbuf_r+0x92>
 800ba8e:	2e0a      	cmp	r6, #10
 800ba90:	d117      	bne.n	800bac2 <__swbuf_r+0x92>
 800ba92:	4621      	mov	r1, r4
 800ba94:	4628      	mov	r0, r5
 800ba96:	f000 fee9 	bl	800c86c <_fflush_r>
 800ba9a:	b190      	cbz	r0, 800bac2 <__swbuf_r+0x92>
 800ba9c:	e00f      	b.n	800babe <__swbuf_r+0x8e>
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <__swbuf_r+0x9c>)
 800baa0:	429c      	cmp	r4, r3
 800baa2:	d101      	bne.n	800baa8 <__swbuf_r+0x78>
 800baa4:	68ac      	ldr	r4, [r5, #8]
 800baa6:	e7d0      	b.n	800ba4a <__swbuf_r+0x1a>
 800baa8:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <__swbuf_r+0xa0>)
 800baaa:	429c      	cmp	r4, r3
 800baac:	bf08      	it	eq
 800baae:	68ec      	ldreq	r4, [r5, #12]
 800bab0:	e7cb      	b.n	800ba4a <__swbuf_r+0x1a>
 800bab2:	4621      	mov	r1, r4
 800bab4:	4628      	mov	r0, r5
 800bab6:	f000 f80d 	bl	800bad4 <__swsetup_r>
 800baba:	2800      	cmp	r0, #0
 800babc:	d0cc      	beq.n	800ba58 <__swbuf_r+0x28>
 800babe:	f04f 37ff 	mov.w	r7, #4294967295
 800bac2:	4638      	mov	r0, r7
 800bac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac6:	bf00      	nop
 800bac8:	0800e8f0 	.word	0x0800e8f0
 800bacc:	0800e910 	.word	0x0800e910
 800bad0:	0800e8d0 	.word	0x0800e8d0

0800bad4 <__swsetup_r>:
 800bad4:	4b32      	ldr	r3, [pc, #200]	; (800bba0 <__swsetup_r+0xcc>)
 800bad6:	b570      	push	{r4, r5, r6, lr}
 800bad8:	681d      	ldr	r5, [r3, #0]
 800bada:	4606      	mov	r6, r0
 800badc:	460c      	mov	r4, r1
 800bade:	b125      	cbz	r5, 800baea <__swsetup_r+0x16>
 800bae0:	69ab      	ldr	r3, [r5, #24]
 800bae2:	b913      	cbnz	r3, 800baea <__swsetup_r+0x16>
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 ff2b 	bl	800c940 <__sinit>
 800baea:	4b2e      	ldr	r3, [pc, #184]	; (800bba4 <__swsetup_r+0xd0>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d10f      	bne.n	800bb10 <__swsetup_r+0x3c>
 800baf0:	686c      	ldr	r4, [r5, #4]
 800baf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	0715      	lsls	r5, r2, #28
 800bafa:	d42c      	bmi.n	800bb56 <__swsetup_r+0x82>
 800bafc:	06d0      	lsls	r0, r2, #27
 800bafe:	d411      	bmi.n	800bb24 <__swsetup_r+0x50>
 800bb00:	2209      	movs	r2, #9
 800bb02:	6032      	str	r2, [r6, #0]
 800bb04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb08:	81a3      	strh	r3, [r4, #12]
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	e03e      	b.n	800bb8e <__swsetup_r+0xba>
 800bb10:	4b25      	ldr	r3, [pc, #148]	; (800bba8 <__swsetup_r+0xd4>)
 800bb12:	429c      	cmp	r4, r3
 800bb14:	d101      	bne.n	800bb1a <__swsetup_r+0x46>
 800bb16:	68ac      	ldr	r4, [r5, #8]
 800bb18:	e7eb      	b.n	800baf2 <__swsetup_r+0x1e>
 800bb1a:	4b24      	ldr	r3, [pc, #144]	; (800bbac <__swsetup_r+0xd8>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	bf08      	it	eq
 800bb20:	68ec      	ldreq	r4, [r5, #12]
 800bb22:	e7e6      	b.n	800baf2 <__swsetup_r+0x1e>
 800bb24:	0751      	lsls	r1, r2, #29
 800bb26:	d512      	bpl.n	800bb4e <__swsetup_r+0x7a>
 800bb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb2a:	b141      	cbz	r1, 800bb3e <__swsetup_r+0x6a>
 800bb2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb30:	4299      	cmp	r1, r3
 800bb32:	d002      	beq.n	800bb3a <__swsetup_r+0x66>
 800bb34:	4630      	mov	r0, r6
 800bb36:	f001 faf1 	bl	800d11c <_free_r>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	2300      	movs	r3, #0
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f043 0308 	orr.w	r3, r3, #8
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	b94b      	cbnz	r3, 800bb6e <__swsetup_r+0x9a>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb64:	d003      	beq.n	800bb6e <__swsetup_r+0x9a>
 800bb66:	4621      	mov	r1, r4
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f000 ffa5 	bl	800cab8 <__smakebuf_r>
 800bb6e:	89a2      	ldrh	r2, [r4, #12]
 800bb70:	f012 0301 	ands.w	r3, r2, #1
 800bb74:	d00c      	beq.n	800bb90 <__swsetup_r+0xbc>
 800bb76:	2300      	movs	r3, #0
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	6963      	ldr	r3, [r4, #20]
 800bb7c:	425b      	negs	r3, r3
 800bb7e:	61a3      	str	r3, [r4, #24]
 800bb80:	6923      	ldr	r3, [r4, #16]
 800bb82:	b953      	cbnz	r3, 800bb9a <__swsetup_r+0xc6>
 800bb84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bb8c:	d1ba      	bne.n	800bb04 <__swsetup_r+0x30>
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	0792      	lsls	r2, r2, #30
 800bb92:	bf58      	it	pl
 800bb94:	6963      	ldrpl	r3, [r4, #20]
 800bb96:	60a3      	str	r3, [r4, #8]
 800bb98:	e7f2      	b.n	800bb80 <__swsetup_r+0xac>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e7f7      	b.n	800bb8e <__swsetup_r+0xba>
 800bb9e:	bf00      	nop
 800bba0:	20000044 	.word	0x20000044
 800bba4:	0800e8f0 	.word	0x0800e8f0
 800bba8:	0800e910 	.word	0x0800e910
 800bbac:	0800e8d0 	.word	0x0800e8d0

0800bbb0 <quorem>:
 800bbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb4:	6903      	ldr	r3, [r0, #16]
 800bbb6:	690c      	ldr	r4, [r1, #16]
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	4680      	mov	r8, r0
 800bbbc:	f2c0 8082 	blt.w	800bcc4 <quorem+0x114>
 800bbc0:	3c01      	subs	r4, #1
 800bbc2:	f101 0714 	add.w	r7, r1, #20
 800bbc6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bbca:	f100 0614 	add.w	r6, r0, #20
 800bbce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bbd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bbd6:	eb06 030c 	add.w	r3, r6, ip
 800bbda:	3501      	adds	r5, #1
 800bbdc:	eb07 090c 	add.w	r9, r7, ip
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	fbb0 f5f5 	udiv	r5, r0, r5
 800bbe6:	b395      	cbz	r5, 800bc4e <quorem+0x9e>
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	4638      	mov	r0, r7
 800bbee:	46b6      	mov	lr, r6
 800bbf0:	46d3      	mov	fp, sl
 800bbf2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbf6:	b293      	uxth	r3, r2
 800bbf8:	fb05 a303 	mla	r3, r5, r3, sl
 800bbfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	ebab 0303 	sub.w	r3, fp, r3
 800bc06:	0c12      	lsrs	r2, r2, #16
 800bc08:	f8de b000 	ldr.w	fp, [lr]
 800bc0c:	fb05 a202 	mla	r2, r5, r2, sl
 800bc10:	fa13 f38b 	uxtah	r3, r3, fp
 800bc14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc18:	fa1f fb82 	uxth.w	fp, r2
 800bc1c:	f8de 2000 	ldr.w	r2, [lr]
 800bc20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc2e:	4581      	cmp	r9, r0
 800bc30:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc34:	f84e 3b04 	str.w	r3, [lr], #4
 800bc38:	d2db      	bcs.n	800bbf2 <quorem+0x42>
 800bc3a:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc3e:	b933      	cbnz	r3, 800bc4e <quorem+0x9e>
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	3b04      	subs	r3, #4
 800bc44:	429e      	cmp	r6, r3
 800bc46:	461a      	mov	r2, r3
 800bc48:	d330      	bcc.n	800bcac <quorem+0xfc>
 800bc4a:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f001 f990 	bl	800cf74 <__mcmp>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	db25      	blt.n	800bca4 <quorem+0xf4>
 800bc58:	3501      	adds	r5, #1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f04f 0c00 	mov.w	ip, #0
 800bc60:	f857 2b04 	ldr.w	r2, [r7], #4
 800bc64:	f8d0 e000 	ldr.w	lr, [r0]
 800bc68:	b293      	uxth	r3, r2
 800bc6a:	ebac 0303 	sub.w	r3, ip, r3
 800bc6e:	0c12      	lsrs	r2, r2, #16
 800bc70:	fa13 f38e 	uxtah	r3, r3, lr
 800bc74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc82:	45b9      	cmp	r9, r7
 800bc84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc88:	f840 3b04 	str.w	r3, [r0], #4
 800bc8c:	d2e8      	bcs.n	800bc60 <quorem+0xb0>
 800bc8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bc92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bc96:	b92a      	cbnz	r2, 800bca4 <quorem+0xf4>
 800bc98:	3b04      	subs	r3, #4
 800bc9a:	429e      	cmp	r6, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	d30b      	bcc.n	800bcb8 <quorem+0x108>
 800bca0:	f8c8 4010 	str.w	r4, [r8, #16]
 800bca4:	4628      	mov	r0, r5
 800bca6:	b003      	add	sp, #12
 800bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcac:	6812      	ldr	r2, [r2, #0]
 800bcae:	3b04      	subs	r3, #4
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d1ca      	bne.n	800bc4a <quorem+0x9a>
 800bcb4:	3c01      	subs	r4, #1
 800bcb6:	e7c5      	b.n	800bc44 <quorem+0x94>
 800bcb8:	6812      	ldr	r2, [r2, #0]
 800bcba:	3b04      	subs	r3, #4
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	d1ef      	bne.n	800bca0 <quorem+0xf0>
 800bcc0:	3c01      	subs	r4, #1
 800bcc2:	e7ea      	b.n	800bc9a <quorem+0xea>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e7ee      	b.n	800bca6 <quorem+0xf6>

0800bcc8 <_dtoa_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	ec57 6b10 	vmov	r6, r7, d0
 800bcd0:	b095      	sub	sp, #84	; 0x54
 800bcd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcd4:	9108      	str	r1, [sp, #32]
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	920a      	str	r2, [sp, #40]	; 0x28
 800bcda:	9311      	str	r3, [sp, #68]	; 0x44
 800bcdc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800bce0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bce4:	b93d      	cbnz	r5, 800bcf6 <_dtoa_r+0x2e>
 800bce6:	2010      	movs	r0, #16
 800bce8:	f000 ff26 	bl	800cb38 <malloc>
 800bcec:	6260      	str	r0, [r4, #36]	; 0x24
 800bcee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcf2:	6005      	str	r5, [r0, #0]
 800bcf4:	60c5      	str	r5, [r0, #12]
 800bcf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcf8:	6819      	ldr	r1, [r3, #0]
 800bcfa:	b151      	cbz	r1, 800bd12 <_dtoa_r+0x4a>
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	604a      	str	r2, [r1, #4]
 800bd00:	2301      	movs	r3, #1
 800bd02:	4093      	lsls	r3, r2
 800bd04:	608b      	str	r3, [r1, #8]
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 ff52 	bl	800cbb0 <_Bfree>
 800bd0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	1e3b      	subs	r3, r7, #0
 800bd14:	bfb9      	ittee	lt
 800bd16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd1a:	9303      	strlt	r3, [sp, #12]
 800bd1c:	2300      	movge	r3, #0
 800bd1e:	f8c8 3000 	strge.w	r3, [r8]
 800bd22:	9d03      	ldr	r5, [sp, #12]
 800bd24:	4bac      	ldr	r3, [pc, #688]	; (800bfd8 <_dtoa_r+0x310>)
 800bd26:	bfbc      	itt	lt
 800bd28:	2201      	movlt	r2, #1
 800bd2a:	f8c8 2000 	strlt.w	r2, [r8]
 800bd2e:	43ab      	bics	r3, r5
 800bd30:	d11b      	bne.n	800bd6a <_dtoa_r+0xa2>
 800bd32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd34:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	9b02      	ldr	r3, [sp, #8]
 800bd3c:	b923      	cbnz	r3, 800bd48 <_dtoa_r+0x80>
 800bd3e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bd42:	2d00      	cmp	r5, #0
 800bd44:	f000 84dd 	beq.w	800c702 <_dtoa_r+0xa3a>
 800bd48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd4a:	b953      	cbnz	r3, 800bd62 <_dtoa_r+0x9a>
 800bd4c:	4ba3      	ldr	r3, [pc, #652]	; (800bfdc <_dtoa_r+0x314>)
 800bd4e:	e020      	b.n	800bd92 <_dtoa_r+0xca>
 800bd50:	4ba3      	ldr	r3, [pc, #652]	; (800bfe0 <_dtoa_r+0x318>)
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	3308      	adds	r3, #8
 800bd56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	9804      	ldr	r0, [sp, #16]
 800bd5c:	b015      	add	sp, #84	; 0x54
 800bd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd62:	4b9e      	ldr	r3, [pc, #632]	; (800bfdc <_dtoa_r+0x314>)
 800bd64:	9304      	str	r3, [sp, #16]
 800bd66:	3303      	adds	r3, #3
 800bd68:	e7f5      	b.n	800bd56 <_dtoa_r+0x8e>
 800bd6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd76:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd7a:	d10c      	bne.n	800bd96 <_dtoa_r+0xce>
 800bd7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd7e:	2301      	movs	r3, #1
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 84b9 	beq.w	800c6fc <_dtoa_r+0xa34>
 800bd8a:	4b96      	ldr	r3, [pc, #600]	; (800bfe4 <_dtoa_r+0x31c>)
 800bd8c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	9304      	str	r3, [sp, #16]
 800bd94:	e7e1      	b.n	800bd5a <_dtoa_r+0x92>
 800bd96:	a913      	add	r1, sp, #76	; 0x4c
 800bd98:	aa12      	add	r2, sp, #72	; 0x48
 800bd9a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f001 f95f 	bl	800d062 <__d2b>
 800bda4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800bda8:	9001      	str	r0, [sp, #4]
 800bdaa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bdac:	2e00      	cmp	r6, #0
 800bdae:	d046      	beq.n	800be3e <_dtoa_r+0x176>
 800bdb0:	9805      	ldr	r0, [sp, #20]
 800bdb2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800bdb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdba:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800bdbe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdc2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800bdc6:	2700      	movs	r7, #0
 800bdc8:	ee07 aa90 	vmov	s15, sl
 800bdcc:	ec43 2b16 	vmov	d6, r2, r3
 800bdd0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bdd4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800bfc0 <_dtoa_r+0x2f8>
 800bdd8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bddc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bde0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800bfc8 <_dtoa_r+0x300>
 800bde4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800bde8:	eeb0 7b46 	vmov.f64	d7, d6
 800bdec:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800bfd0 <_dtoa_r+0x308>
 800bdf0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bdf4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bdf8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be00:	ee16 ba90 	vmov	fp, s13
 800be04:	d508      	bpl.n	800be18 <_dtoa_r+0x150>
 800be06:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800be0a:	eeb4 6b47 	vcmp.f64	d6, d7
 800be0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be12:	bf18      	it	ne
 800be14:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800be18:	f1bb 0f16 	cmp.w	fp, #22
 800be1c:	d834      	bhi.n	800be88 <_dtoa_r+0x1c0>
 800be1e:	4b72      	ldr	r3, [pc, #456]	; (800bfe8 <_dtoa_r+0x320>)
 800be20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be24:	ed93 7b00 	vldr	d7, [r3]
 800be28:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be34:	dd01      	ble.n	800be3a <_dtoa_r+0x172>
 800be36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be3a:	2300      	movs	r3, #0
 800be3c:	e025      	b.n	800be8a <_dtoa_r+0x1c2>
 800be3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be40:	eb01 0a03 	add.w	sl, r1, r3
 800be44:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800be48:	2b20      	cmp	r3, #32
 800be4a:	dd17      	ble.n	800be7c <_dtoa_r+0x1b4>
 800be4c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800be50:	9a02      	ldr	r2, [sp, #8]
 800be52:	409d      	lsls	r5, r3
 800be54:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800be58:	fa22 f303 	lsr.w	r3, r2, r3
 800be5c:	432b      	orrs	r3, r5
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800be66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be6e:	9805      	ldr	r0, [sp, #20]
 800be70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be74:	2701      	movs	r7, #1
 800be76:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800be7a:	e7a5      	b.n	800bdc8 <_dtoa_r+0x100>
 800be7c:	9a02      	ldr	r2, [sp, #8]
 800be7e:	f1c3 0320 	rsb	r3, r3, #32
 800be82:	fa02 f303 	lsl.w	r3, r2, r3
 800be86:	e7ea      	b.n	800be5e <_dtoa_r+0x196>
 800be88:	2301      	movs	r3, #1
 800be8a:	eba1 0a0a 	sub.w	sl, r1, sl
 800be8e:	9310      	str	r3, [sp, #64]	; 0x40
 800be90:	f1ba 0301 	subs.w	r3, sl, #1
 800be94:	9307      	str	r3, [sp, #28]
 800be96:	bf43      	ittte	mi
 800be98:	2300      	movmi	r3, #0
 800be9a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800be9e:	9307      	strmi	r3, [sp, #28]
 800bea0:	f04f 0a00 	movpl.w	sl, #0
 800bea4:	f1bb 0f00 	cmp.w	fp, #0
 800bea8:	db19      	blt.n	800bede <_dtoa_r+0x216>
 800beaa:	9b07      	ldr	r3, [sp, #28]
 800beac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800beb0:	445b      	add	r3, fp
 800beb2:	9307      	str	r3, [sp, #28]
 800beb4:	f04f 0800 	mov.w	r8, #0
 800beb8:	9b08      	ldr	r3, [sp, #32]
 800beba:	2b09      	cmp	r3, #9
 800bebc:	d866      	bhi.n	800bf8c <_dtoa_r+0x2c4>
 800bebe:	2b05      	cmp	r3, #5
 800bec0:	bfc4      	itt	gt
 800bec2:	3b04      	subgt	r3, #4
 800bec4:	9308      	strgt	r3, [sp, #32]
 800bec6:	9b08      	ldr	r3, [sp, #32]
 800bec8:	f1a3 0302 	sub.w	r3, r3, #2
 800becc:	bfcc      	ite	gt
 800bece:	2500      	movgt	r5, #0
 800bed0:	2501      	movle	r5, #1
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d866      	bhi.n	800bfa4 <_dtoa_r+0x2dc>
 800bed6:	e8df f003 	tbb	[pc, r3]
 800beda:	5755      	.short	0x5755
 800bedc:	4909      	.short	0x4909
 800bede:	2300      	movs	r3, #0
 800bee0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800bee4:	f1cb 0800 	rsb	r8, fp, #0
 800bee8:	930b      	str	r3, [sp, #44]	; 0x2c
 800beea:	e7e5      	b.n	800beb8 <_dtoa_r+0x1f0>
 800beec:	2301      	movs	r3, #1
 800beee:	9309      	str	r3, [sp, #36]	; 0x24
 800bef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dd59      	ble.n	800bfaa <_dtoa_r+0x2e2>
 800bef6:	9306      	str	r3, [sp, #24]
 800bef8:	4699      	mov	r9, r3
 800befa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800befc:	2200      	movs	r2, #0
 800befe:	6072      	str	r2, [r6, #4]
 800bf00:	2204      	movs	r2, #4
 800bf02:	f102 0014 	add.w	r0, r2, #20
 800bf06:	4298      	cmp	r0, r3
 800bf08:	6871      	ldr	r1, [r6, #4]
 800bf0a:	d953      	bls.n	800bfb4 <_dtoa_r+0x2ec>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fe1b 	bl	800cb48 <_Balloc>
 800bf12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf14:	6030      	str	r0, [r6, #0]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	f1b9 0f0e 	cmp.w	r9, #14
 800bf1e:	f200 80c2 	bhi.w	800c0a6 <_dtoa_r+0x3de>
 800bf22:	2d00      	cmp	r5, #0
 800bf24:	f000 80bf 	beq.w	800c0a6 <_dtoa_r+0x3de>
 800bf28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf2c:	f1bb 0f00 	cmp.w	fp, #0
 800bf30:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800bf34:	f340 80e6 	ble.w	800c104 <_dtoa_r+0x43c>
 800bf38:	4a2b      	ldr	r2, [pc, #172]	; (800bfe8 <_dtoa_r+0x320>)
 800bf3a:	f00b 030f 	and.w	r3, fp, #15
 800bf3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf42:	ed93 7b00 	vldr	d7, [r3]
 800bf46:	ea4f 132b 	mov.w	r3, fp, asr #4
 800bf4a:	06da      	lsls	r2, r3, #27
 800bf4c:	f140 80d8 	bpl.w	800c100 <_dtoa_r+0x438>
 800bf50:	4a26      	ldr	r2, [pc, #152]	; (800bfec <_dtoa_r+0x324>)
 800bf52:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800bf56:	ed92 6b08 	vldr	d6, [r2, #32]
 800bf5a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bf5e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	2203      	movs	r2, #3
 800bf68:	4920      	ldr	r1, [pc, #128]	; (800bfec <_dtoa_r+0x324>)
 800bf6a:	e04a      	b.n	800c002 <_dtoa_r+0x33a>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf72:	445b      	add	r3, fp
 800bf74:	f103 0901 	add.w	r9, r3, #1
 800bf78:	9306      	str	r3, [sp, #24]
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	bfb8      	it	lt
 800bf80:	2301      	movlt	r3, #1
 800bf82:	e7ba      	b.n	800befa <_dtoa_r+0x232>
 800bf84:	2300      	movs	r3, #0
 800bf86:	e7b2      	b.n	800beee <_dtoa_r+0x226>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e7f0      	b.n	800bf6e <_dtoa_r+0x2a6>
 800bf8c:	2501      	movs	r5, #1
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bf94:	f04f 33ff 	mov.w	r3, #4294967295
 800bf98:	9306      	str	r3, [sp, #24]
 800bf9a:	4699      	mov	r9, r3
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2312      	movs	r3, #18
 800bfa0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfa2:	e7aa      	b.n	800befa <_dtoa_r+0x232>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa8:	e7f4      	b.n	800bf94 <_dtoa_r+0x2cc>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	9306      	str	r3, [sp, #24]
 800bfae:	4699      	mov	r9, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	e7f5      	b.n	800bfa0 <_dtoa_r+0x2d8>
 800bfb4:	3101      	adds	r1, #1
 800bfb6:	6071      	str	r1, [r6, #4]
 800bfb8:	0052      	lsls	r2, r2, #1
 800bfba:	e7a2      	b.n	800bf02 <_dtoa_r+0x23a>
 800bfbc:	f3af 8000 	nop.w
 800bfc0:	636f4361 	.word	0x636f4361
 800bfc4:	3fd287a7 	.word	0x3fd287a7
 800bfc8:	8b60c8b3 	.word	0x8b60c8b3
 800bfcc:	3fc68a28 	.word	0x3fc68a28
 800bfd0:	509f79fb 	.word	0x509f79fb
 800bfd4:	3fd34413 	.word	0x3fd34413
 800bfd8:	7ff00000 	.word	0x7ff00000
 800bfdc:	0800e8c9 	.word	0x0800e8c9
 800bfe0:	0800e8c0 	.word	0x0800e8c0
 800bfe4:	0800e89d 	.word	0x0800e89d
 800bfe8:	0800e958 	.word	0x0800e958
 800bfec:	0800e930 	.word	0x0800e930
 800bff0:	07de      	lsls	r6, r3, #31
 800bff2:	d504      	bpl.n	800bffe <_dtoa_r+0x336>
 800bff4:	ed91 6b00 	vldr	d6, [r1]
 800bff8:	3201      	adds	r2, #1
 800bffa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bffe:	105b      	asrs	r3, r3, #1
 800c000:	3108      	adds	r1, #8
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1f4      	bne.n	800bff0 <_dtoa_r+0x328>
 800c006:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c00a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c00e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 80a7 	beq.w	800c168 <_dtoa_r+0x4a0>
 800c01a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c01e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c022:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02a:	f140 809d 	bpl.w	800c168 <_dtoa_r+0x4a0>
 800c02e:	f1b9 0f00 	cmp.w	r9, #0
 800c032:	f000 8099 	beq.w	800c168 <_dtoa_r+0x4a0>
 800c036:	9b06      	ldr	r3, [sp, #24]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dd30      	ble.n	800c09e <_dtoa_r+0x3d6>
 800c03c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c040:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c044:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c048:	9d06      	ldr	r5, [sp, #24]
 800c04a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c04e:	3201      	adds	r2, #1
 800c050:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c054:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c058:	ee07 2a90 	vmov	s15, r2
 800c05c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c060:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c064:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c068:	9a03      	ldr	r2, [sp, #12]
 800c06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800c072:	2d00      	cmp	r5, #0
 800c074:	d17b      	bne.n	800c16e <_dtoa_r+0x4a6>
 800c076:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c07a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c07e:	ec41 0b17 	vmov	d7, r0, r1
 800c082:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08a:	f300 8253 	bgt.w	800c534 <_dtoa_r+0x86c>
 800c08e:	eeb1 7b47 	vneg.f64	d7, d7
 800c092:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09a:	f100 8249 	bmi.w	800c530 <_dtoa_r+0x868>
 800c09e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f2c0 8119 	blt.w	800c2e0 <_dtoa_r+0x618>
 800c0ae:	f1bb 0f0e 	cmp.w	fp, #14
 800c0b2:	f300 8115 	bgt.w	800c2e0 <_dtoa_r+0x618>
 800c0b6:	4bc3      	ldr	r3, [pc, #780]	; (800c3c4 <_dtoa_r+0x6fc>)
 800c0b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0bc:	ed93 6b00 	vldr	d6, [r3]
 800c0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f280 80ba 	bge.w	800c23c <_dtoa_r+0x574>
 800c0c8:	f1b9 0f00 	cmp.w	r9, #0
 800c0cc:	f300 80b6 	bgt.w	800c23c <_dtoa_r+0x574>
 800c0d0:	f040 822d 	bne.w	800c52e <_dtoa_r+0x866>
 800c0d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c0d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c0dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e8:	464d      	mov	r5, r9
 800c0ea:	464f      	mov	r7, r9
 800c0ec:	f280 8204 	bge.w	800c4f8 <_dtoa_r+0x830>
 800c0f0:	9b04      	ldr	r3, [sp, #16]
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	1c5e      	adds	r6, r3, #1
 800c0f6:	2331      	movs	r3, #49	; 0x31
 800c0f8:	7013      	strb	r3, [r2, #0]
 800c0fa:	f10b 0b01 	add.w	fp, fp, #1
 800c0fe:	e1ff      	b.n	800c500 <_dtoa_r+0x838>
 800c100:	2202      	movs	r2, #2
 800c102:	e731      	b.n	800bf68 <_dtoa_r+0x2a0>
 800c104:	d02e      	beq.n	800c164 <_dtoa_r+0x49c>
 800c106:	f1cb 0300 	rsb	r3, fp, #0
 800c10a:	4aae      	ldr	r2, [pc, #696]	; (800c3c4 <_dtoa_r+0x6fc>)
 800c10c:	f003 010f 	and.w	r1, r3, #15
 800c110:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c114:	ed92 7b00 	vldr	d7, [r2]
 800c118:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800c11c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c120:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c124:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c128:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c12c:	49a6      	ldr	r1, [pc, #664]	; (800c3c8 <_dtoa_r+0x700>)
 800c12e:	111b      	asrs	r3, r3, #4
 800c130:	2000      	movs	r0, #0
 800c132:	2202      	movs	r2, #2
 800c134:	b93b      	cbnz	r3, 800c146 <_dtoa_r+0x47e>
 800c136:	2800      	cmp	r0, #0
 800c138:	f43f af6b 	beq.w	800c012 <_dtoa_r+0x34a>
 800c13c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c144:	e765      	b.n	800c012 <_dtoa_r+0x34a>
 800c146:	07dd      	lsls	r5, r3, #31
 800c148:	d509      	bpl.n	800c15e <_dtoa_r+0x496>
 800c14a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c14e:	ed91 7b00 	vldr	d7, [r1]
 800c152:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c156:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c15a:	3201      	adds	r2, #1
 800c15c:	2001      	movs	r0, #1
 800c15e:	105b      	asrs	r3, r3, #1
 800c160:	3108      	adds	r1, #8
 800c162:	e7e7      	b.n	800c134 <_dtoa_r+0x46c>
 800c164:	2202      	movs	r2, #2
 800c166:	e754      	b.n	800c012 <_dtoa_r+0x34a>
 800c168:	465b      	mov	r3, fp
 800c16a:	464d      	mov	r5, r9
 800c16c:	e770      	b.n	800c050 <_dtoa_r+0x388>
 800c16e:	4a95      	ldr	r2, [pc, #596]	; (800c3c4 <_dtoa_r+0x6fc>)
 800c170:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800c174:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c17a:	ec41 0b17 	vmov	d7, r0, r1
 800c17e:	b35a      	cbz	r2, 800c1d8 <_dtoa_r+0x510>
 800c180:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c184:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c188:	9e04      	ldr	r6, [sp, #16]
 800c18a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c18e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c192:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c196:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c19a:	ee14 2a90 	vmov	r2, s9
 800c19e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c1a2:	3230      	adds	r2, #48	; 0x30
 800c1a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c1a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b0:	f806 2b01 	strb.w	r2, [r6], #1
 800c1b4:	d43b      	bmi.n	800c22e <_dtoa_r+0x566>
 800c1b6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c1ba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	d472      	bmi.n	800c2aa <_dtoa_r+0x5e2>
 800c1c4:	9a04      	ldr	r2, [sp, #16]
 800c1c6:	1ab2      	subs	r2, r6, r2
 800c1c8:	4295      	cmp	r5, r2
 800c1ca:	f77f af68 	ble.w	800c09e <_dtoa_r+0x3d6>
 800c1ce:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c1d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c1d6:	e7de      	b.n	800c196 <_dtoa_r+0x4ce>
 800c1d8:	9a04      	ldr	r2, [sp, #16]
 800c1da:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c1de:	1956      	adds	r6, r2, r5
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c1e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c1ea:	ee14 2a90 	vmov	r2, s9
 800c1ee:	3230      	adds	r2, #48	; 0x30
 800c1f0:	f801 2b01 	strb.w	r2, [r1], #1
 800c1f4:	42b1      	cmp	r1, r6
 800c1f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c1fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c1fe:	d11a      	bne.n	800c236 <_dtoa_r+0x56e>
 800c200:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c204:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c208:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c210:	dc4b      	bgt.n	800c2aa <_dtoa_r+0x5e2>
 800c212:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c216:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21e:	f57f af3e 	bpl.w	800c09e <_dtoa_r+0x3d6>
 800c222:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c226:	2a30      	cmp	r2, #48	; 0x30
 800c228:	f106 31ff 	add.w	r1, r6, #4294967295
 800c22c:	d001      	beq.n	800c232 <_dtoa_r+0x56a>
 800c22e:	469b      	mov	fp, r3
 800c230:	e02a      	b.n	800c288 <_dtoa_r+0x5c0>
 800c232:	460e      	mov	r6, r1
 800c234:	e7f5      	b.n	800c222 <_dtoa_r+0x55a>
 800c236:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c23a:	e7d4      	b.n	800c1e6 <_dtoa_r+0x51e>
 800c23c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c240:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c244:	9e04      	ldr	r6, [sp, #16]
 800c246:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c24a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c24e:	ee15 3a10 	vmov	r3, s10
 800c252:	3330      	adds	r3, #48	; 0x30
 800c254:	f806 3b01 	strb.w	r3, [r6], #1
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	1af3      	subs	r3, r6, r3
 800c25c:	4599      	cmp	r9, r3
 800c25e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c262:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c266:	d133      	bne.n	800c2d0 <_dtoa_r+0x608>
 800c268:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c26c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c274:	dc18      	bgt.n	800c2a8 <_dtoa_r+0x5e0>
 800c276:	eeb4 7b46 	vcmp.f64	d7, d6
 800c27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27e:	d103      	bne.n	800c288 <_dtoa_r+0x5c0>
 800c280:	ee15 3a10 	vmov	r3, s10
 800c284:	07db      	lsls	r3, r3, #31
 800c286:	d40f      	bmi.n	800c2a8 <_dtoa_r+0x5e0>
 800c288:	9901      	ldr	r1, [sp, #4]
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 fc90 	bl	800cbb0 <_Bfree>
 800c290:	2300      	movs	r3, #0
 800c292:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c294:	7033      	strb	r3, [r6, #0]
 800c296:	f10b 0301 	add.w	r3, fp, #1
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f43f ad5b 	beq.w	800bd5a <_dtoa_r+0x92>
 800c2a4:	601e      	str	r6, [r3, #0]
 800c2a6:	e558      	b.n	800bd5a <_dtoa_r+0x92>
 800c2a8:	465b      	mov	r3, fp
 800c2aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c2ae:	2939      	cmp	r1, #57	; 0x39
 800c2b0:	f106 32ff 	add.w	r2, r6, #4294967295
 800c2b4:	d106      	bne.n	800c2c4 <_dtoa_r+0x5fc>
 800c2b6:	9904      	ldr	r1, [sp, #16]
 800c2b8:	4291      	cmp	r1, r2
 800c2ba:	d107      	bne.n	800c2cc <_dtoa_r+0x604>
 800c2bc:	2230      	movs	r2, #48	; 0x30
 800c2be:	700a      	strb	r2, [r1, #0]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	460a      	mov	r2, r1
 800c2c4:	7811      	ldrb	r1, [r2, #0]
 800c2c6:	3101      	adds	r1, #1
 800c2c8:	7011      	strb	r1, [r2, #0]
 800c2ca:	e7b0      	b.n	800c22e <_dtoa_r+0x566>
 800c2cc:	4616      	mov	r6, r2
 800c2ce:	e7ec      	b.n	800c2aa <_dtoa_r+0x5e2>
 800c2d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c2d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2dc:	d1b3      	bne.n	800c246 <_dtoa_r+0x57e>
 800c2de:	e7d3      	b.n	800c288 <_dtoa_r+0x5c0>
 800c2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e2:	2a00      	cmp	r2, #0
 800c2e4:	f000 808d 	beq.w	800c402 <_dtoa_r+0x73a>
 800c2e8:	9a08      	ldr	r2, [sp, #32]
 800c2ea:	2a01      	cmp	r2, #1
 800c2ec:	dc72      	bgt.n	800c3d4 <_dtoa_r+0x70c>
 800c2ee:	2f00      	cmp	r7, #0
 800c2f0:	d06c      	beq.n	800c3cc <_dtoa_r+0x704>
 800c2f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2f6:	4645      	mov	r5, r8
 800c2f8:	4656      	mov	r6, sl
 800c2fa:	9a07      	ldr	r2, [sp, #28]
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	441a      	add	r2, r3
 800c300:	4620      	mov	r0, r4
 800c302:	449a      	add	sl, r3
 800c304:	9207      	str	r2, [sp, #28]
 800c306:	f000 fcf3 	bl	800ccf0 <__i2b>
 800c30a:	4607      	mov	r7, r0
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	dd0b      	ble.n	800c328 <_dtoa_r+0x660>
 800c310:	9b07      	ldr	r3, [sp, #28]
 800c312:	2b00      	cmp	r3, #0
 800c314:	dd08      	ble.n	800c328 <_dtoa_r+0x660>
 800c316:	42b3      	cmp	r3, r6
 800c318:	9a07      	ldr	r2, [sp, #28]
 800c31a:	bfa8      	it	ge
 800c31c:	4633      	movge	r3, r6
 800c31e:	ebaa 0a03 	sub.w	sl, sl, r3
 800c322:	1af6      	subs	r6, r6, r3
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	f1b8 0f00 	cmp.w	r8, #0
 800c32c:	d01d      	beq.n	800c36a <_dtoa_r+0x6a2>
 800c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c330:	2b00      	cmp	r3, #0
 800c332:	d06a      	beq.n	800c40a <_dtoa_r+0x742>
 800c334:	b18d      	cbz	r5, 800c35a <_dtoa_r+0x692>
 800c336:	4639      	mov	r1, r7
 800c338:	462a      	mov	r2, r5
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 fd78 	bl	800ce30 <__pow5mult>
 800c340:	9a01      	ldr	r2, [sp, #4]
 800c342:	4601      	mov	r1, r0
 800c344:	4607      	mov	r7, r0
 800c346:	4620      	mov	r0, r4
 800c348:	f000 fcdb 	bl	800cd02 <__multiply>
 800c34c:	9901      	ldr	r1, [sp, #4]
 800c34e:	900c      	str	r0, [sp, #48]	; 0x30
 800c350:	4620      	mov	r0, r4
 800c352:	f000 fc2d 	bl	800cbb0 <_Bfree>
 800c356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	ebb8 0205 	subs.w	r2, r8, r5
 800c35e:	d004      	beq.n	800c36a <_dtoa_r+0x6a2>
 800c360:	9901      	ldr	r1, [sp, #4]
 800c362:	4620      	mov	r0, r4
 800c364:	f000 fd64 	bl	800ce30 <__pow5mult>
 800c368:	9001      	str	r0, [sp, #4]
 800c36a:	2101      	movs	r1, #1
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 fcbf 	bl	800ccf0 <__i2b>
 800c372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c374:	4605      	mov	r5, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 81ca 	beq.w	800c710 <_dtoa_r+0xa48>
 800c37c:	461a      	mov	r2, r3
 800c37e:	4601      	mov	r1, r0
 800c380:	4620      	mov	r0, r4
 800c382:	f000 fd55 	bl	800ce30 <__pow5mult>
 800c386:	9b08      	ldr	r3, [sp, #32]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	4605      	mov	r5, r0
 800c38c:	dc44      	bgt.n	800c418 <_dtoa_r+0x750>
 800c38e:	9b02      	ldr	r3, [sp, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d13c      	bne.n	800c40e <_dtoa_r+0x746>
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d137      	bne.n	800c40e <_dtoa_r+0x746>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3a4:	0d1b      	lsrs	r3, r3, #20
 800c3a6:	051b      	lsls	r3, r3, #20
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d033      	beq.n	800c414 <_dtoa_r+0x74c>
 800c3ac:	9b07      	ldr	r3, [sp, #28]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	f10a 0a01 	add.w	sl, sl, #1
 800c3b4:	9307      	str	r3, [sp, #28]
 800c3b6:	f04f 0801 	mov.w	r8, #1
 800c3ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3bc:	bb73      	cbnz	r3, 800c41c <_dtoa_r+0x754>
 800c3be:	2001      	movs	r0, #1
 800c3c0:	e034      	b.n	800c42c <_dtoa_r+0x764>
 800c3c2:	bf00      	nop
 800c3c4:	0800e958 	.word	0x0800e958
 800c3c8:	0800e930 	.word	0x0800e930
 800c3cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3d2:	e790      	b.n	800c2f6 <_dtoa_r+0x62e>
 800c3d4:	f109 35ff 	add.w	r5, r9, #4294967295
 800c3d8:	45a8      	cmp	r8, r5
 800c3da:	bfbf      	itttt	lt
 800c3dc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800c3de:	eba5 0808 	sublt.w	r8, r5, r8
 800c3e2:	4443      	addlt	r3, r8
 800c3e4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800c3e6:	bfb6      	itet	lt
 800c3e8:	46a8      	movlt	r8, r5
 800c3ea:	eba8 0505 	subge.w	r5, r8, r5
 800c3ee:	2500      	movlt	r5, #0
 800c3f0:	f1b9 0f00 	cmp.w	r9, #0
 800c3f4:	bfb9      	ittee	lt
 800c3f6:	ebaa 0609 	sublt.w	r6, sl, r9
 800c3fa:	2300      	movlt	r3, #0
 800c3fc:	4656      	movge	r6, sl
 800c3fe:	464b      	movge	r3, r9
 800c400:	e77b      	b.n	800c2fa <_dtoa_r+0x632>
 800c402:	4645      	mov	r5, r8
 800c404:	4656      	mov	r6, sl
 800c406:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c408:	e780      	b.n	800c30c <_dtoa_r+0x644>
 800c40a:	4642      	mov	r2, r8
 800c40c:	e7a8      	b.n	800c360 <_dtoa_r+0x698>
 800c40e:	f04f 0800 	mov.w	r8, #0
 800c412:	e7d2      	b.n	800c3ba <_dtoa_r+0x6f2>
 800c414:	4698      	mov	r8, r3
 800c416:	e7d0      	b.n	800c3ba <_dtoa_r+0x6f2>
 800c418:	f04f 0800 	mov.w	r8, #0
 800c41c:	692b      	ldr	r3, [r5, #16]
 800c41e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c422:	6918      	ldr	r0, [r3, #16]
 800c424:	f000 fc16 	bl	800cc54 <__hi0bits>
 800c428:	f1c0 0020 	rsb	r0, r0, #32
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	4418      	add	r0, r3
 800c430:	f010 001f 	ands.w	r0, r0, #31
 800c434:	d047      	beq.n	800c4c6 <_dtoa_r+0x7fe>
 800c436:	f1c0 0320 	rsb	r3, r0, #32
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	dd3b      	ble.n	800c4b6 <_dtoa_r+0x7ee>
 800c43e:	9b07      	ldr	r3, [sp, #28]
 800c440:	f1c0 001c 	rsb	r0, r0, #28
 800c444:	4482      	add	sl, r0
 800c446:	4406      	add	r6, r0
 800c448:	4403      	add	r3, r0
 800c44a:	9307      	str	r3, [sp, #28]
 800c44c:	f1ba 0f00 	cmp.w	sl, #0
 800c450:	dd05      	ble.n	800c45e <_dtoa_r+0x796>
 800c452:	4652      	mov	r2, sl
 800c454:	9901      	ldr	r1, [sp, #4]
 800c456:	4620      	mov	r0, r4
 800c458:	f000 fd38 	bl	800cecc <__lshift>
 800c45c:	9001      	str	r0, [sp, #4]
 800c45e:	9b07      	ldr	r3, [sp, #28]
 800c460:	2b00      	cmp	r3, #0
 800c462:	dd05      	ble.n	800c470 <_dtoa_r+0x7a8>
 800c464:	4629      	mov	r1, r5
 800c466:	461a      	mov	r2, r3
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fd2f 	bl	800cecc <__lshift>
 800c46e:	4605      	mov	r5, r0
 800c470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c472:	b353      	cbz	r3, 800c4ca <_dtoa_r+0x802>
 800c474:	4629      	mov	r1, r5
 800c476:	9801      	ldr	r0, [sp, #4]
 800c478:	f000 fd7c 	bl	800cf74 <__mcmp>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	da24      	bge.n	800c4ca <_dtoa_r+0x802>
 800c480:	2300      	movs	r3, #0
 800c482:	220a      	movs	r2, #10
 800c484:	9901      	ldr	r1, [sp, #4]
 800c486:	4620      	mov	r0, r4
 800c488:	f000 fba9 	bl	800cbde <__multadd>
 800c48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48e:	9001      	str	r0, [sp, #4]
 800c490:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c494:	2b00      	cmp	r3, #0
 800c496:	f000 8142 	beq.w	800c71e <_dtoa_r+0xa56>
 800c49a:	2300      	movs	r3, #0
 800c49c:	4639      	mov	r1, r7
 800c49e:	220a      	movs	r2, #10
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f000 fb9c 	bl	800cbde <__multadd>
 800c4a6:	9b06      	ldr	r3, [sp, #24]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	dc4b      	bgt.n	800c546 <_dtoa_r+0x87e>
 800c4ae:	9b08      	ldr	r3, [sp, #32]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	dd48      	ble.n	800c546 <_dtoa_r+0x87e>
 800c4b4:	e011      	b.n	800c4da <_dtoa_r+0x812>
 800c4b6:	d0c9      	beq.n	800c44c <_dtoa_r+0x784>
 800c4b8:	9a07      	ldr	r2, [sp, #28]
 800c4ba:	331c      	adds	r3, #28
 800c4bc:	441a      	add	r2, r3
 800c4be:	449a      	add	sl, r3
 800c4c0:	441e      	add	r6, r3
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	e7c1      	b.n	800c44a <_dtoa_r+0x782>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	e7f6      	b.n	800c4b8 <_dtoa_r+0x7f0>
 800c4ca:	f1b9 0f00 	cmp.w	r9, #0
 800c4ce:	dc34      	bgt.n	800c53a <_dtoa_r+0x872>
 800c4d0:	9b08      	ldr	r3, [sp, #32]
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	dd31      	ble.n	800c53a <_dtoa_r+0x872>
 800c4d6:	f8cd 9018 	str.w	r9, [sp, #24]
 800c4da:	9b06      	ldr	r3, [sp, #24]
 800c4dc:	b963      	cbnz	r3, 800c4f8 <_dtoa_r+0x830>
 800c4de:	4629      	mov	r1, r5
 800c4e0:	2205      	movs	r2, #5
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 fb7b 	bl	800cbde <__multadd>
 800c4e8:	4601      	mov	r1, r0
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	9801      	ldr	r0, [sp, #4]
 800c4ee:	f000 fd41 	bl	800cf74 <__mcmp>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	f73f adfc 	bgt.w	800c0f0 <_dtoa_r+0x428>
 800c4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fa:	9e04      	ldr	r6, [sp, #16]
 800c4fc:	ea6f 0b03 	mvn.w	fp, r3
 800c500:	f04f 0900 	mov.w	r9, #0
 800c504:	4629      	mov	r1, r5
 800c506:	4620      	mov	r0, r4
 800c508:	f000 fb52 	bl	800cbb0 <_Bfree>
 800c50c:	2f00      	cmp	r7, #0
 800c50e:	f43f aebb 	beq.w	800c288 <_dtoa_r+0x5c0>
 800c512:	f1b9 0f00 	cmp.w	r9, #0
 800c516:	d005      	beq.n	800c524 <_dtoa_r+0x85c>
 800c518:	45b9      	cmp	r9, r7
 800c51a:	d003      	beq.n	800c524 <_dtoa_r+0x85c>
 800c51c:	4649      	mov	r1, r9
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 fb46 	bl	800cbb0 <_Bfree>
 800c524:	4639      	mov	r1, r7
 800c526:	4620      	mov	r0, r4
 800c528:	f000 fb42 	bl	800cbb0 <_Bfree>
 800c52c:	e6ac      	b.n	800c288 <_dtoa_r+0x5c0>
 800c52e:	2500      	movs	r5, #0
 800c530:	462f      	mov	r7, r5
 800c532:	e7e1      	b.n	800c4f8 <_dtoa_r+0x830>
 800c534:	469b      	mov	fp, r3
 800c536:	462f      	mov	r7, r5
 800c538:	e5da      	b.n	800c0f0 <_dtoa_r+0x428>
 800c53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c53c:	f8cd 9018 	str.w	r9, [sp, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 80f3 	beq.w	800c72c <_dtoa_r+0xa64>
 800c546:	2e00      	cmp	r6, #0
 800c548:	dd05      	ble.n	800c556 <_dtoa_r+0x88e>
 800c54a:	4639      	mov	r1, r7
 800c54c:	4632      	mov	r2, r6
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 fcbc 	bl	800cecc <__lshift>
 800c554:	4607      	mov	r7, r0
 800c556:	f1b8 0f00 	cmp.w	r8, #0
 800c55a:	d04c      	beq.n	800c5f6 <_dtoa_r+0x92e>
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	4620      	mov	r0, r4
 800c560:	f000 faf2 	bl	800cb48 <_Balloc>
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	3202      	adds	r2, #2
 800c568:	4606      	mov	r6, r0
 800c56a:	0092      	lsls	r2, r2, #2
 800c56c:	f107 010c 	add.w	r1, r7, #12
 800c570:	300c      	adds	r0, #12
 800c572:	f7fe fd93 	bl	800b09c <memcpy>
 800c576:	2201      	movs	r2, #1
 800c578:	4631      	mov	r1, r6
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 fca6 	bl	800cecc <__lshift>
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	46b9      	mov	r9, r7
 800c58c:	9307      	str	r3, [sp, #28]
 800c58e:	4607      	mov	r7, r0
 800c590:	4629      	mov	r1, r5
 800c592:	9801      	ldr	r0, [sp, #4]
 800c594:	f7ff fb0c 	bl	800bbb0 <quorem>
 800c598:	4649      	mov	r1, r9
 800c59a:	4606      	mov	r6, r0
 800c59c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c5a0:	9801      	ldr	r0, [sp, #4]
 800c5a2:	f000 fce7 	bl	800cf74 <__mcmp>
 800c5a6:	463a      	mov	r2, r7
 800c5a8:	9002      	str	r0, [sp, #8]
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 fcfb 	bl	800cfa8 <__mdiff>
 800c5b2:	68c3      	ldr	r3, [r0, #12]
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	bb03      	cbnz	r3, 800c5fa <_dtoa_r+0x932>
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	9009      	str	r0, [sp, #36]	; 0x24
 800c5bc:	9801      	ldr	r0, [sp, #4]
 800c5be:	f000 fcd9 	bl	800cf74 <__mcmp>
 800c5c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c5cc:	f000 faf0 	bl	800cbb0 <_Bfree>
 800c5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d2:	b9a3      	cbnz	r3, 800c5fe <_dtoa_r+0x936>
 800c5d4:	9a08      	ldr	r2, [sp, #32]
 800c5d6:	b992      	cbnz	r2, 800c5fe <_dtoa_r+0x936>
 800c5d8:	9a07      	ldr	r2, [sp, #28]
 800c5da:	b982      	cbnz	r2, 800c5fe <_dtoa_r+0x936>
 800c5dc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5e0:	d029      	beq.n	800c636 <_dtoa_r+0x96e>
 800c5e2:	9b02      	ldr	r3, [sp, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd01      	ble.n	800c5ec <_dtoa_r+0x924>
 800c5e8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c5ec:	f10a 0601 	add.w	r6, sl, #1
 800c5f0:	f88a 8000 	strb.w	r8, [sl]
 800c5f4:	e786      	b.n	800c504 <_dtoa_r+0x83c>
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	e7c2      	b.n	800c580 <_dtoa_r+0x8b8>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e7e3      	b.n	800c5c6 <_dtoa_r+0x8fe>
 800c5fe:	9a02      	ldr	r2, [sp, #8]
 800c600:	2a00      	cmp	r2, #0
 800c602:	db04      	blt.n	800c60e <_dtoa_r+0x946>
 800c604:	d124      	bne.n	800c650 <_dtoa_r+0x988>
 800c606:	9a08      	ldr	r2, [sp, #32]
 800c608:	bb12      	cbnz	r2, 800c650 <_dtoa_r+0x988>
 800c60a:	9a07      	ldr	r2, [sp, #28]
 800c60c:	bb02      	cbnz	r2, 800c650 <_dtoa_r+0x988>
 800c60e:	2b00      	cmp	r3, #0
 800c610:	ddec      	ble.n	800c5ec <_dtoa_r+0x924>
 800c612:	2201      	movs	r2, #1
 800c614:	9901      	ldr	r1, [sp, #4]
 800c616:	4620      	mov	r0, r4
 800c618:	f000 fc58 	bl	800cecc <__lshift>
 800c61c:	4629      	mov	r1, r5
 800c61e:	9001      	str	r0, [sp, #4]
 800c620:	f000 fca8 	bl	800cf74 <__mcmp>
 800c624:	2800      	cmp	r0, #0
 800c626:	dc03      	bgt.n	800c630 <_dtoa_r+0x968>
 800c628:	d1e0      	bne.n	800c5ec <_dtoa_r+0x924>
 800c62a:	f018 0f01 	tst.w	r8, #1
 800c62e:	d0dd      	beq.n	800c5ec <_dtoa_r+0x924>
 800c630:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c634:	d1d8      	bne.n	800c5e8 <_dtoa_r+0x920>
 800c636:	2339      	movs	r3, #57	; 0x39
 800c638:	f10a 0601 	add.w	r6, sl, #1
 800c63c:	f88a 3000 	strb.w	r3, [sl]
 800c640:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c644:	2b39      	cmp	r3, #57	; 0x39
 800c646:	f106 32ff 	add.w	r2, r6, #4294967295
 800c64a:	d04c      	beq.n	800c6e6 <_dtoa_r+0xa1e>
 800c64c:	3301      	adds	r3, #1
 800c64e:	e051      	b.n	800c6f4 <_dtoa_r+0xa2c>
 800c650:	2b00      	cmp	r3, #0
 800c652:	f10a 0601 	add.w	r6, sl, #1
 800c656:	dd05      	ble.n	800c664 <_dtoa_r+0x99c>
 800c658:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c65c:	d0eb      	beq.n	800c636 <_dtoa_r+0x96e>
 800c65e:	f108 0801 	add.w	r8, r8, #1
 800c662:	e7c5      	b.n	800c5f0 <_dtoa_r+0x928>
 800c664:	9b04      	ldr	r3, [sp, #16]
 800c666:	9a06      	ldr	r2, [sp, #24]
 800c668:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c66c:	1af3      	subs	r3, r6, r3
 800c66e:	4293      	cmp	r3, r2
 800c670:	d021      	beq.n	800c6b6 <_dtoa_r+0x9ee>
 800c672:	2300      	movs	r3, #0
 800c674:	220a      	movs	r2, #10
 800c676:	9901      	ldr	r1, [sp, #4]
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 fab0 	bl	800cbde <__multadd>
 800c67e:	45b9      	cmp	r9, r7
 800c680:	9001      	str	r0, [sp, #4]
 800c682:	f04f 0300 	mov.w	r3, #0
 800c686:	f04f 020a 	mov.w	r2, #10
 800c68a:	4649      	mov	r1, r9
 800c68c:	4620      	mov	r0, r4
 800c68e:	d105      	bne.n	800c69c <_dtoa_r+0x9d4>
 800c690:	f000 faa5 	bl	800cbde <__multadd>
 800c694:	4681      	mov	r9, r0
 800c696:	4607      	mov	r7, r0
 800c698:	46b2      	mov	sl, r6
 800c69a:	e779      	b.n	800c590 <_dtoa_r+0x8c8>
 800c69c:	f000 fa9f 	bl	800cbde <__multadd>
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	4681      	mov	r9, r0
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	220a      	movs	r2, #10
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 fa98 	bl	800cbde <__multadd>
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	e7f2      	b.n	800c698 <_dtoa_r+0x9d0>
 800c6b2:	f04f 0900 	mov.w	r9, #0
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	9901      	ldr	r1, [sp, #4]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 fc06 	bl	800cecc <__lshift>
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	9001      	str	r0, [sp, #4]
 800c6c4:	f000 fc56 	bl	800cf74 <__mcmp>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	dcb9      	bgt.n	800c640 <_dtoa_r+0x978>
 800c6cc:	d102      	bne.n	800c6d4 <_dtoa_r+0xa0c>
 800c6ce:	f018 0f01 	tst.w	r8, #1
 800c6d2:	d1b5      	bne.n	800c640 <_dtoa_r+0x978>
 800c6d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6d8:	2b30      	cmp	r3, #48	; 0x30
 800c6da:	f106 32ff 	add.w	r2, r6, #4294967295
 800c6de:	f47f af11 	bne.w	800c504 <_dtoa_r+0x83c>
 800c6e2:	4616      	mov	r6, r2
 800c6e4:	e7f6      	b.n	800c6d4 <_dtoa_r+0xa0c>
 800c6e6:	9b04      	ldr	r3, [sp, #16]
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d105      	bne.n	800c6f8 <_dtoa_r+0xa30>
 800c6ec:	9a04      	ldr	r2, [sp, #16]
 800c6ee:	f10b 0b01 	add.w	fp, fp, #1
 800c6f2:	2331      	movs	r3, #49	; 0x31
 800c6f4:	7013      	strb	r3, [r2, #0]
 800c6f6:	e705      	b.n	800c504 <_dtoa_r+0x83c>
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	e7a1      	b.n	800c640 <_dtoa_r+0x978>
 800c6fc:	4b16      	ldr	r3, [pc, #88]	; (800c758 <_dtoa_r+0xa90>)
 800c6fe:	f7ff bb48 	b.w	800bd92 <_dtoa_r+0xca>
 800c702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c704:	2b00      	cmp	r3, #0
 800c706:	f47f ab23 	bne.w	800bd50 <_dtoa_r+0x88>
 800c70a:	4b14      	ldr	r3, [pc, #80]	; (800c75c <_dtoa_r+0xa94>)
 800c70c:	f7ff bb41 	b.w	800bd92 <_dtoa_r+0xca>
 800c710:	9b08      	ldr	r3, [sp, #32]
 800c712:	2b01      	cmp	r3, #1
 800c714:	f77f ae3b 	ble.w	800c38e <_dtoa_r+0x6c6>
 800c718:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c71c:	e64f      	b.n	800c3be <_dtoa_r+0x6f6>
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	dc03      	bgt.n	800c72c <_dtoa_r+0xa64>
 800c724:	9b08      	ldr	r3, [sp, #32]
 800c726:	2b02      	cmp	r3, #2
 800c728:	f73f aed7 	bgt.w	800c4da <_dtoa_r+0x812>
 800c72c:	9e04      	ldr	r6, [sp, #16]
 800c72e:	9801      	ldr	r0, [sp, #4]
 800c730:	4629      	mov	r1, r5
 800c732:	f7ff fa3d 	bl	800bbb0 <quorem>
 800c736:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c73a:	f806 8b01 	strb.w	r8, [r6], #1
 800c73e:	9b04      	ldr	r3, [sp, #16]
 800c740:	9a06      	ldr	r2, [sp, #24]
 800c742:	1af3      	subs	r3, r6, r3
 800c744:	429a      	cmp	r2, r3
 800c746:	ddb4      	ble.n	800c6b2 <_dtoa_r+0x9ea>
 800c748:	2300      	movs	r3, #0
 800c74a:	220a      	movs	r2, #10
 800c74c:	9901      	ldr	r1, [sp, #4]
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 fa45 	bl	800cbde <__multadd>
 800c754:	9001      	str	r0, [sp, #4]
 800c756:	e7ea      	b.n	800c72e <_dtoa_r+0xa66>
 800c758:	0800e89c 	.word	0x0800e89c
 800c75c:	0800e8c0 	.word	0x0800e8c0

0800c760 <__sflush_r>:
 800c760:	898a      	ldrh	r2, [r1, #12]
 800c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	4605      	mov	r5, r0
 800c768:	0710      	lsls	r0, r2, #28
 800c76a:	460c      	mov	r4, r1
 800c76c:	d458      	bmi.n	800c820 <__sflush_r+0xc0>
 800c76e:	684b      	ldr	r3, [r1, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	dc05      	bgt.n	800c780 <__sflush_r+0x20>
 800c774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c776:	2b00      	cmp	r3, #0
 800c778:	dc02      	bgt.n	800c780 <__sflush_r+0x20>
 800c77a:	2000      	movs	r0, #0
 800c77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c782:	2e00      	cmp	r6, #0
 800c784:	d0f9      	beq.n	800c77a <__sflush_r+0x1a>
 800c786:	2300      	movs	r3, #0
 800c788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c78c:	682f      	ldr	r7, [r5, #0]
 800c78e:	6a21      	ldr	r1, [r4, #32]
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	d032      	beq.n	800c7fa <__sflush_r+0x9a>
 800c794:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	075a      	lsls	r2, r3, #29
 800c79a:	d505      	bpl.n	800c7a8 <__sflush_r+0x48>
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	1ac0      	subs	r0, r0, r3
 800c7a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7a2:	b10b      	cbz	r3, 800c7a8 <__sflush_r+0x48>
 800c7a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7a6:	1ac0      	subs	r0, r0, r3
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ae:	6a21      	ldr	r1, [r4, #32]
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b0      	blx	r6
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	d106      	bne.n	800c7c8 <__sflush_r+0x68>
 800c7ba:	6829      	ldr	r1, [r5, #0]
 800c7bc:	291d      	cmp	r1, #29
 800c7be:	d848      	bhi.n	800c852 <__sflush_r+0xf2>
 800c7c0:	4a29      	ldr	r2, [pc, #164]	; (800c868 <__sflush_r+0x108>)
 800c7c2:	40ca      	lsrs	r2, r1
 800c7c4:	07d6      	lsls	r6, r2, #31
 800c7c6:	d544      	bpl.n	800c852 <__sflush_r+0xf2>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	6062      	str	r2, [r4, #4]
 800c7cc:	04d9      	lsls	r1, r3, #19
 800c7ce:	6922      	ldr	r2, [r4, #16]
 800c7d0:	6022      	str	r2, [r4, #0]
 800c7d2:	d504      	bpl.n	800c7de <__sflush_r+0x7e>
 800c7d4:	1c42      	adds	r2, r0, #1
 800c7d6:	d101      	bne.n	800c7dc <__sflush_r+0x7c>
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	b903      	cbnz	r3, 800c7de <__sflush_r+0x7e>
 800c7dc:	6560      	str	r0, [r4, #84]	; 0x54
 800c7de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7e0:	602f      	str	r7, [r5, #0]
 800c7e2:	2900      	cmp	r1, #0
 800c7e4:	d0c9      	beq.n	800c77a <__sflush_r+0x1a>
 800c7e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7ea:	4299      	cmp	r1, r3
 800c7ec:	d002      	beq.n	800c7f4 <__sflush_r+0x94>
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f000 fc94 	bl	800d11c <_free_r>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	6360      	str	r0, [r4, #52]	; 0x34
 800c7f8:	e7c0      	b.n	800c77c <__sflush_r+0x1c>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b0      	blx	r6
 800c800:	1c41      	adds	r1, r0, #1
 800c802:	d1c8      	bne.n	800c796 <__sflush_r+0x36>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0c5      	beq.n	800c796 <__sflush_r+0x36>
 800c80a:	2b1d      	cmp	r3, #29
 800c80c:	d001      	beq.n	800c812 <__sflush_r+0xb2>
 800c80e:	2b16      	cmp	r3, #22
 800c810:	d101      	bne.n	800c816 <__sflush_r+0xb6>
 800c812:	602f      	str	r7, [r5, #0]
 800c814:	e7b1      	b.n	800c77a <__sflush_r+0x1a>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	e7ad      	b.n	800c77c <__sflush_r+0x1c>
 800c820:	690f      	ldr	r7, [r1, #16]
 800c822:	2f00      	cmp	r7, #0
 800c824:	d0a9      	beq.n	800c77a <__sflush_r+0x1a>
 800c826:	0793      	lsls	r3, r2, #30
 800c828:	680e      	ldr	r6, [r1, #0]
 800c82a:	bf08      	it	eq
 800c82c:	694b      	ldreq	r3, [r1, #20]
 800c82e:	600f      	str	r7, [r1, #0]
 800c830:	bf18      	it	ne
 800c832:	2300      	movne	r3, #0
 800c834:	eba6 0807 	sub.w	r8, r6, r7
 800c838:	608b      	str	r3, [r1, #8]
 800c83a:	f1b8 0f00 	cmp.w	r8, #0
 800c83e:	dd9c      	ble.n	800c77a <__sflush_r+0x1a>
 800c840:	4643      	mov	r3, r8
 800c842:	463a      	mov	r2, r7
 800c844:	6a21      	ldr	r1, [r4, #32]
 800c846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c848:	4628      	mov	r0, r5
 800c84a:	47b0      	blx	r6
 800c84c:	2800      	cmp	r0, #0
 800c84e:	dc06      	bgt.n	800c85e <__sflush_r+0xfe>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c856:	81a3      	strh	r3, [r4, #12]
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	e78e      	b.n	800c77c <__sflush_r+0x1c>
 800c85e:	4407      	add	r7, r0
 800c860:	eba8 0800 	sub.w	r8, r8, r0
 800c864:	e7e9      	b.n	800c83a <__sflush_r+0xda>
 800c866:	bf00      	nop
 800c868:	20400001 	.word	0x20400001

0800c86c <_fflush_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	690b      	ldr	r3, [r1, #16]
 800c870:	4605      	mov	r5, r0
 800c872:	460c      	mov	r4, r1
 800c874:	b1db      	cbz	r3, 800c8ae <_fflush_r+0x42>
 800c876:	b118      	cbz	r0, 800c880 <_fflush_r+0x14>
 800c878:	6983      	ldr	r3, [r0, #24]
 800c87a:	b90b      	cbnz	r3, 800c880 <_fflush_r+0x14>
 800c87c:	f000 f860 	bl	800c940 <__sinit>
 800c880:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <_fflush_r+0x48>)
 800c882:	429c      	cmp	r4, r3
 800c884:	d109      	bne.n	800c89a <_fflush_r+0x2e>
 800c886:	686c      	ldr	r4, [r5, #4]
 800c888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88c:	b17b      	cbz	r3, 800c8ae <_fflush_r+0x42>
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c896:	f7ff bf63 	b.w	800c760 <__sflush_r>
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <_fflush_r+0x4c>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	d101      	bne.n	800c8a4 <_fflush_r+0x38>
 800c8a0:	68ac      	ldr	r4, [r5, #8]
 800c8a2:	e7f1      	b.n	800c888 <_fflush_r+0x1c>
 800c8a4:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <_fflush_r+0x50>)
 800c8a6:	429c      	cmp	r4, r3
 800c8a8:	bf08      	it	eq
 800c8aa:	68ec      	ldreq	r4, [r5, #12]
 800c8ac:	e7ec      	b.n	800c888 <_fflush_r+0x1c>
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	bd38      	pop	{r3, r4, r5, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0800e8f0 	.word	0x0800e8f0
 800c8b8:	0800e910 	.word	0x0800e910
 800c8bc:	0800e8d0 	.word	0x0800e8d0

0800c8c0 <std>:
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	b510      	push	{r4, lr}
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c8ca:	6083      	str	r3, [r0, #8]
 800c8cc:	8181      	strh	r1, [r0, #12]
 800c8ce:	6643      	str	r3, [r0, #100]	; 0x64
 800c8d0:	81c2      	strh	r2, [r0, #14]
 800c8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8d6:	6183      	str	r3, [r0, #24]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	2208      	movs	r2, #8
 800c8dc:	305c      	adds	r0, #92	; 0x5c
 800c8de:	f7fe fbe8 	bl	800b0b2 <memset>
 800c8e2:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <std+0x38>)
 800c8e4:	6263      	str	r3, [r4, #36]	; 0x24
 800c8e6:	4b05      	ldr	r3, [pc, #20]	; (800c8fc <std+0x3c>)
 800c8e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8ea:	4b05      	ldr	r3, [pc, #20]	; (800c900 <std+0x40>)
 800c8ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8ee:	4b05      	ldr	r3, [pc, #20]	; (800c904 <std+0x44>)
 800c8f0:	6224      	str	r4, [r4, #32]
 800c8f2:	6323      	str	r3, [r4, #48]	; 0x30
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	bf00      	nop
 800c8f8:	0800d50d 	.word	0x0800d50d
 800c8fc:	0800d52f 	.word	0x0800d52f
 800c900:	0800d567 	.word	0x0800d567
 800c904:	0800d58b 	.word	0x0800d58b

0800c908 <_cleanup_r>:
 800c908:	4901      	ldr	r1, [pc, #4]	; (800c910 <_cleanup_r+0x8>)
 800c90a:	f000 b885 	b.w	800ca18 <_fwalk_reent>
 800c90e:	bf00      	nop
 800c910:	0800c86d 	.word	0x0800c86d

0800c914 <__sfmoreglue>:
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	1e4a      	subs	r2, r1, #1
 800c918:	2568      	movs	r5, #104	; 0x68
 800c91a:	4355      	muls	r5, r2
 800c91c:	460e      	mov	r6, r1
 800c91e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c922:	f000 fc49 	bl	800d1b8 <_malloc_r>
 800c926:	4604      	mov	r4, r0
 800c928:	b140      	cbz	r0, 800c93c <__sfmoreglue+0x28>
 800c92a:	2100      	movs	r1, #0
 800c92c:	e9c0 1600 	strd	r1, r6, [r0]
 800c930:	300c      	adds	r0, #12
 800c932:	60a0      	str	r0, [r4, #8]
 800c934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c938:	f7fe fbbb 	bl	800b0b2 <memset>
 800c93c:	4620      	mov	r0, r4
 800c93e:	bd70      	pop	{r4, r5, r6, pc}

0800c940 <__sinit>:
 800c940:	6983      	ldr	r3, [r0, #24]
 800c942:	b510      	push	{r4, lr}
 800c944:	4604      	mov	r4, r0
 800c946:	bb33      	cbnz	r3, 800c996 <__sinit+0x56>
 800c948:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c94c:	6503      	str	r3, [r0, #80]	; 0x50
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <__sinit+0x58>)
 800c950:	4a12      	ldr	r2, [pc, #72]	; (800c99c <__sinit+0x5c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	6282      	str	r2, [r0, #40]	; 0x28
 800c956:	4298      	cmp	r0, r3
 800c958:	bf04      	itt	eq
 800c95a:	2301      	moveq	r3, #1
 800c95c:	6183      	streq	r3, [r0, #24]
 800c95e:	f000 f81f 	bl	800c9a0 <__sfp>
 800c962:	6060      	str	r0, [r4, #4]
 800c964:	4620      	mov	r0, r4
 800c966:	f000 f81b 	bl	800c9a0 <__sfp>
 800c96a:	60a0      	str	r0, [r4, #8]
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 f817 	bl	800c9a0 <__sfp>
 800c972:	2200      	movs	r2, #0
 800c974:	60e0      	str	r0, [r4, #12]
 800c976:	2104      	movs	r1, #4
 800c978:	6860      	ldr	r0, [r4, #4]
 800c97a:	f7ff ffa1 	bl	800c8c0 <std>
 800c97e:	2201      	movs	r2, #1
 800c980:	2109      	movs	r1, #9
 800c982:	68a0      	ldr	r0, [r4, #8]
 800c984:	f7ff ff9c 	bl	800c8c0 <std>
 800c988:	2202      	movs	r2, #2
 800c98a:	2112      	movs	r1, #18
 800c98c:	68e0      	ldr	r0, [r4, #12]
 800c98e:	f7ff ff97 	bl	800c8c0 <std>
 800c992:	2301      	movs	r3, #1
 800c994:	61a3      	str	r3, [r4, #24]
 800c996:	bd10      	pop	{r4, pc}
 800c998:	0800e888 	.word	0x0800e888
 800c99c:	0800c909 	.word	0x0800c909

0800c9a0 <__sfp>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	4b1b      	ldr	r3, [pc, #108]	; (800ca10 <__sfp+0x70>)
 800c9a4:	681e      	ldr	r6, [r3, #0]
 800c9a6:	69b3      	ldr	r3, [r6, #24]
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	b913      	cbnz	r3, 800c9b2 <__sfp+0x12>
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff ffc7 	bl	800c940 <__sinit>
 800c9b2:	3648      	adds	r6, #72	; 0x48
 800c9b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	d503      	bpl.n	800c9c4 <__sfp+0x24>
 800c9bc:	6833      	ldr	r3, [r6, #0]
 800c9be:	b133      	cbz	r3, 800c9ce <__sfp+0x2e>
 800c9c0:	6836      	ldr	r6, [r6, #0]
 800c9c2:	e7f7      	b.n	800c9b4 <__sfp+0x14>
 800c9c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9c8:	b16d      	cbz	r5, 800c9e6 <__sfp+0x46>
 800c9ca:	3468      	adds	r4, #104	; 0x68
 800c9cc:	e7f4      	b.n	800c9b8 <__sfp+0x18>
 800c9ce:	2104      	movs	r1, #4
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7ff ff9f 	bl	800c914 <__sfmoreglue>
 800c9d6:	6030      	str	r0, [r6, #0]
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d1f1      	bne.n	800c9c0 <__sfp+0x20>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	603b      	str	r3, [r7, #0]
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <__sfp+0x74>)
 800c9e8:	6665      	str	r5, [r4, #100]	; 0x64
 800c9ea:	e9c4 5500 	strd	r5, r5, [r4]
 800c9ee:	60a5      	str	r5, [r4, #8]
 800c9f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c9f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca00:	f7fe fb57 	bl	800b0b2 <memset>
 800ca04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca0c:	e7e9      	b.n	800c9e2 <__sfp+0x42>
 800ca0e:	bf00      	nop
 800ca10:	0800e888 	.word	0x0800e888
 800ca14:	ffff0001 	.word	0xffff0001

0800ca18 <_fwalk_reent>:
 800ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca1c:	4680      	mov	r8, r0
 800ca1e:	4689      	mov	r9, r1
 800ca20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca24:	2600      	movs	r6, #0
 800ca26:	b914      	cbnz	r4, 800ca2e <_fwalk_reent+0x16>
 800ca28:	4630      	mov	r0, r6
 800ca2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ca32:	3f01      	subs	r7, #1
 800ca34:	d501      	bpl.n	800ca3a <_fwalk_reent+0x22>
 800ca36:	6824      	ldr	r4, [r4, #0]
 800ca38:	e7f5      	b.n	800ca26 <_fwalk_reent+0xe>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d907      	bls.n	800ca50 <_fwalk_reent+0x38>
 800ca40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca44:	3301      	adds	r3, #1
 800ca46:	d003      	beq.n	800ca50 <_fwalk_reent+0x38>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	47c8      	blx	r9
 800ca4e:	4306      	orrs	r6, r0
 800ca50:	3568      	adds	r5, #104	; 0x68
 800ca52:	e7ee      	b.n	800ca32 <_fwalk_reent+0x1a>

0800ca54 <_localeconv_r>:
 800ca54:	4b04      	ldr	r3, [pc, #16]	; (800ca68 <_localeconv_r+0x14>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6a18      	ldr	r0, [r3, #32]
 800ca5a:	4b04      	ldr	r3, [pc, #16]	; (800ca6c <_localeconv_r+0x18>)
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	bf08      	it	eq
 800ca60:	4618      	moveq	r0, r3
 800ca62:	30f0      	adds	r0, #240	; 0xf0
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	20000044 	.word	0x20000044
 800ca6c:	200000a8 	.word	0x200000a8

0800ca70 <__swhatbuf_r>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	460e      	mov	r6, r1
 800ca74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	b096      	sub	sp, #88	; 0x58
 800ca7c:	4614      	mov	r4, r2
 800ca7e:	461d      	mov	r5, r3
 800ca80:	da07      	bge.n	800ca92 <__swhatbuf_r+0x22>
 800ca82:	2300      	movs	r3, #0
 800ca84:	602b      	str	r3, [r5, #0]
 800ca86:	89b3      	ldrh	r3, [r6, #12]
 800ca88:	061a      	lsls	r2, r3, #24
 800ca8a:	d410      	bmi.n	800caae <__swhatbuf_r+0x3e>
 800ca8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca90:	e00e      	b.n	800cab0 <__swhatbuf_r+0x40>
 800ca92:	466a      	mov	r2, sp
 800ca94:	f000 fda0 	bl	800d5d8 <_fstat_r>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	dbf2      	blt.n	800ca82 <__swhatbuf_r+0x12>
 800ca9c:	9a01      	ldr	r2, [sp, #4]
 800ca9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800caa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800caa6:	425a      	negs	r2, r3
 800caa8:	415a      	adcs	r2, r3
 800caaa:	602a      	str	r2, [r5, #0]
 800caac:	e7ee      	b.n	800ca8c <__swhatbuf_r+0x1c>
 800caae:	2340      	movs	r3, #64	; 0x40
 800cab0:	2000      	movs	r0, #0
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	b016      	add	sp, #88	; 0x58
 800cab6:	bd70      	pop	{r4, r5, r6, pc}

0800cab8 <__smakebuf_r>:
 800cab8:	898b      	ldrh	r3, [r1, #12]
 800caba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cabc:	079d      	lsls	r5, r3, #30
 800cabe:	4606      	mov	r6, r0
 800cac0:	460c      	mov	r4, r1
 800cac2:	d507      	bpl.n	800cad4 <__smakebuf_r+0x1c>
 800cac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	2301      	movs	r3, #1
 800cace:	6163      	str	r3, [r4, #20]
 800cad0:	b002      	add	sp, #8
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	ab01      	add	r3, sp, #4
 800cad6:	466a      	mov	r2, sp
 800cad8:	f7ff ffca 	bl	800ca70 <__swhatbuf_r>
 800cadc:	9900      	ldr	r1, [sp, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	4630      	mov	r0, r6
 800cae2:	f000 fb69 	bl	800d1b8 <_malloc_r>
 800cae6:	b948      	cbnz	r0, 800cafc <__smakebuf_r+0x44>
 800cae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caec:	059a      	lsls	r2, r3, #22
 800caee:	d4ef      	bmi.n	800cad0 <__smakebuf_r+0x18>
 800caf0:	f023 0303 	bic.w	r3, r3, #3
 800caf4:	f043 0302 	orr.w	r3, r3, #2
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	e7e3      	b.n	800cac4 <__smakebuf_r+0xc>
 800cafc:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <__smakebuf_r+0x7c>)
 800cafe:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	6020      	str	r0, [r4, #0]
 800cb04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	9b00      	ldr	r3, [sp, #0]
 800cb0c:	6163      	str	r3, [r4, #20]
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	6120      	str	r0, [r4, #16]
 800cb12:	b15b      	cbz	r3, 800cb2c <__smakebuf_r+0x74>
 800cb14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f000 fd6f 	bl	800d5fc <_isatty_r>
 800cb1e:	b128      	cbz	r0, 800cb2c <__smakebuf_r+0x74>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f023 0303 	bic.w	r3, r3, #3
 800cb26:	f043 0301 	orr.w	r3, r3, #1
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	431d      	orrs	r5, r3
 800cb30:	81a5      	strh	r5, [r4, #12]
 800cb32:	e7cd      	b.n	800cad0 <__smakebuf_r+0x18>
 800cb34:	0800c909 	.word	0x0800c909

0800cb38 <malloc>:
 800cb38:	4b02      	ldr	r3, [pc, #8]	; (800cb44 <malloc+0xc>)
 800cb3a:	4601      	mov	r1, r0
 800cb3c:	6818      	ldr	r0, [r3, #0]
 800cb3e:	f000 bb3b 	b.w	800d1b8 <_malloc_r>
 800cb42:	bf00      	nop
 800cb44:	20000044 	.word	0x20000044

0800cb48 <_Balloc>:
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	460e      	mov	r6, r1
 800cb50:	b93d      	cbnz	r5, 800cb62 <_Balloc+0x1a>
 800cb52:	2010      	movs	r0, #16
 800cb54:	f7ff fff0 	bl	800cb38 <malloc>
 800cb58:	6260      	str	r0, [r4, #36]	; 0x24
 800cb5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb5e:	6005      	str	r5, [r0, #0]
 800cb60:	60c5      	str	r5, [r0, #12]
 800cb62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cb64:	68eb      	ldr	r3, [r5, #12]
 800cb66:	b183      	cbz	r3, 800cb8a <_Balloc+0x42>
 800cb68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb70:	b9b8      	cbnz	r0, 800cba2 <_Balloc+0x5a>
 800cb72:	2101      	movs	r1, #1
 800cb74:	fa01 f506 	lsl.w	r5, r1, r6
 800cb78:	1d6a      	adds	r2, r5, #5
 800cb7a:	0092      	lsls	r2, r2, #2
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 fabf 	bl	800d100 <_calloc_r>
 800cb82:	b160      	cbz	r0, 800cb9e <_Balloc+0x56>
 800cb84:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cb88:	e00e      	b.n	800cba8 <_Balloc+0x60>
 800cb8a:	2221      	movs	r2, #33	; 0x21
 800cb8c:	2104      	movs	r1, #4
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 fab6 	bl	800d100 <_calloc_r>
 800cb94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb96:	60e8      	str	r0, [r5, #12]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1e4      	bne.n	800cb68 <_Balloc+0x20>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	bd70      	pop	{r4, r5, r6, pc}
 800cba2:	6802      	ldr	r2, [r0, #0]
 800cba4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbae:	e7f7      	b.n	800cba0 <_Balloc+0x58>

0800cbb0 <_Bfree>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	b93c      	cbnz	r4, 800cbca <_Bfree+0x1a>
 800cbba:	2010      	movs	r0, #16
 800cbbc:	f7ff ffbc 	bl	800cb38 <malloc>
 800cbc0:	6270      	str	r0, [r6, #36]	; 0x24
 800cbc2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbc6:	6004      	str	r4, [r0, #0]
 800cbc8:	60c4      	str	r4, [r0, #12]
 800cbca:	b13d      	cbz	r5, 800cbdc <_Bfree+0x2c>
 800cbcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cbce:	686a      	ldr	r2, [r5, #4]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbd6:	6029      	str	r1, [r5, #0]
 800cbd8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}

0800cbde <__multadd>:
 800cbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe2:	690d      	ldr	r5, [r1, #16]
 800cbe4:	461f      	mov	r7, r3
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	460c      	mov	r4, r1
 800cbea:	f101 0c14 	add.w	ip, r1, #20
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f8dc 0000 	ldr.w	r0, [ip]
 800cbf4:	b281      	uxth	r1, r0
 800cbf6:	fb02 7101 	mla	r1, r2, r1, r7
 800cbfa:	0c0f      	lsrs	r7, r1, #16
 800cbfc:	0c00      	lsrs	r0, r0, #16
 800cbfe:	fb02 7000 	mla	r0, r2, r0, r7
 800cc02:	b289      	uxth	r1, r1
 800cc04:	3301      	adds	r3, #1
 800cc06:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cc0a:	429d      	cmp	r5, r3
 800cc0c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cc10:	f84c 1b04 	str.w	r1, [ip], #4
 800cc14:	dcec      	bgt.n	800cbf0 <__multadd+0x12>
 800cc16:	b1d7      	cbz	r7, 800cc4e <__multadd+0x70>
 800cc18:	68a3      	ldr	r3, [r4, #8]
 800cc1a:	42ab      	cmp	r3, r5
 800cc1c:	dc12      	bgt.n	800cc44 <__multadd+0x66>
 800cc1e:	6861      	ldr	r1, [r4, #4]
 800cc20:	4630      	mov	r0, r6
 800cc22:	3101      	adds	r1, #1
 800cc24:	f7ff ff90 	bl	800cb48 <_Balloc>
 800cc28:	6922      	ldr	r2, [r4, #16]
 800cc2a:	3202      	adds	r2, #2
 800cc2c:	f104 010c 	add.w	r1, r4, #12
 800cc30:	4680      	mov	r8, r0
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	300c      	adds	r0, #12
 800cc36:	f7fe fa31 	bl	800b09c <memcpy>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f7ff ffb7 	bl	800cbb0 <_Bfree>
 800cc42:	4644      	mov	r4, r8
 800cc44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc48:	3501      	adds	r5, #1
 800cc4a:	615f      	str	r7, [r3, #20]
 800cc4c:	6125      	str	r5, [r4, #16]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cc54 <__hi0bits>:
 800cc54:	0c02      	lsrs	r2, r0, #16
 800cc56:	0412      	lsls	r2, r2, #16
 800cc58:	4603      	mov	r3, r0
 800cc5a:	b9b2      	cbnz	r2, 800cc8a <__hi0bits+0x36>
 800cc5c:	0403      	lsls	r3, r0, #16
 800cc5e:	2010      	movs	r0, #16
 800cc60:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cc64:	bf04      	itt	eq
 800cc66:	021b      	lsleq	r3, r3, #8
 800cc68:	3008      	addeq	r0, #8
 800cc6a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cc6e:	bf04      	itt	eq
 800cc70:	011b      	lsleq	r3, r3, #4
 800cc72:	3004      	addeq	r0, #4
 800cc74:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cc78:	bf04      	itt	eq
 800cc7a:	009b      	lsleq	r3, r3, #2
 800cc7c:	3002      	addeq	r0, #2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	db06      	blt.n	800cc90 <__hi0bits+0x3c>
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	d503      	bpl.n	800cc8e <__hi0bits+0x3a>
 800cc86:	3001      	adds	r0, #1
 800cc88:	4770      	bx	lr
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	e7e8      	b.n	800cc60 <__hi0bits+0xc>
 800cc8e:	2020      	movs	r0, #32
 800cc90:	4770      	bx	lr

0800cc92 <__lo0bits>:
 800cc92:	6803      	ldr	r3, [r0, #0]
 800cc94:	f013 0207 	ands.w	r2, r3, #7
 800cc98:	4601      	mov	r1, r0
 800cc9a:	d00b      	beq.n	800ccb4 <__lo0bits+0x22>
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	d423      	bmi.n	800cce8 <__lo0bits+0x56>
 800cca0:	0798      	lsls	r0, r3, #30
 800cca2:	bf49      	itett	mi
 800cca4:	085b      	lsrmi	r3, r3, #1
 800cca6:	089b      	lsrpl	r3, r3, #2
 800cca8:	2001      	movmi	r0, #1
 800ccaa:	600b      	strmi	r3, [r1, #0]
 800ccac:	bf5c      	itt	pl
 800ccae:	600b      	strpl	r3, [r1, #0]
 800ccb0:	2002      	movpl	r0, #2
 800ccb2:	4770      	bx	lr
 800ccb4:	b298      	uxth	r0, r3
 800ccb6:	b9a8      	cbnz	r0, 800cce4 <__lo0bits+0x52>
 800ccb8:	0c1b      	lsrs	r3, r3, #16
 800ccba:	2010      	movs	r0, #16
 800ccbc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ccc0:	bf04      	itt	eq
 800ccc2:	0a1b      	lsreq	r3, r3, #8
 800ccc4:	3008      	addeq	r0, #8
 800ccc6:	071a      	lsls	r2, r3, #28
 800ccc8:	bf04      	itt	eq
 800ccca:	091b      	lsreq	r3, r3, #4
 800cccc:	3004      	addeq	r0, #4
 800ccce:	079a      	lsls	r2, r3, #30
 800ccd0:	bf04      	itt	eq
 800ccd2:	089b      	lsreq	r3, r3, #2
 800ccd4:	3002      	addeq	r0, #2
 800ccd6:	07da      	lsls	r2, r3, #31
 800ccd8:	d402      	bmi.n	800cce0 <__lo0bits+0x4e>
 800ccda:	085b      	lsrs	r3, r3, #1
 800ccdc:	d006      	beq.n	800ccec <__lo0bits+0x5a>
 800ccde:	3001      	adds	r0, #1
 800cce0:	600b      	str	r3, [r1, #0]
 800cce2:	4770      	bx	lr
 800cce4:	4610      	mov	r0, r2
 800cce6:	e7e9      	b.n	800ccbc <__lo0bits+0x2a>
 800cce8:	2000      	movs	r0, #0
 800ccea:	4770      	bx	lr
 800ccec:	2020      	movs	r0, #32
 800ccee:	4770      	bx	lr

0800ccf0 <__i2b>:
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	f7ff ff27 	bl	800cb48 <_Balloc>
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	6144      	str	r4, [r0, #20]
 800ccfe:	6102      	str	r2, [r0, #16]
 800cd00:	bd10      	pop	{r4, pc}

0800cd02 <__multiply>:
 800cd02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd06:	4614      	mov	r4, r2
 800cd08:	690a      	ldr	r2, [r1, #16]
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	bfb8      	it	lt
 800cd10:	460b      	movlt	r3, r1
 800cd12:	4688      	mov	r8, r1
 800cd14:	bfbc      	itt	lt
 800cd16:	46a0      	movlt	r8, r4
 800cd18:	461c      	movlt	r4, r3
 800cd1a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd1e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cd22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd26:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd2a:	eb07 0609 	add.w	r6, r7, r9
 800cd2e:	42b3      	cmp	r3, r6
 800cd30:	bfb8      	it	lt
 800cd32:	3101      	addlt	r1, #1
 800cd34:	f7ff ff08 	bl	800cb48 <_Balloc>
 800cd38:	f100 0514 	add.w	r5, r0, #20
 800cd3c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cd40:	462b      	mov	r3, r5
 800cd42:	2200      	movs	r2, #0
 800cd44:	4573      	cmp	r3, lr
 800cd46:	d316      	bcc.n	800cd76 <__multiply+0x74>
 800cd48:	f104 0214 	add.w	r2, r4, #20
 800cd4c:	f108 0114 	add.w	r1, r8, #20
 800cd50:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cd54:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	9b00      	ldr	r3, [sp, #0]
 800cd5c:	9201      	str	r2, [sp, #4]
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d80c      	bhi.n	800cd7c <__multiply+0x7a>
 800cd62:	2e00      	cmp	r6, #0
 800cd64:	dd03      	ble.n	800cd6e <__multiply+0x6c>
 800cd66:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d05d      	beq.n	800ce2a <__multiply+0x128>
 800cd6e:	6106      	str	r6, [r0, #16]
 800cd70:	b003      	add	sp, #12
 800cd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd76:	f843 2b04 	str.w	r2, [r3], #4
 800cd7a:	e7e3      	b.n	800cd44 <__multiply+0x42>
 800cd7c:	f8b2 b000 	ldrh.w	fp, [r2]
 800cd80:	f1bb 0f00 	cmp.w	fp, #0
 800cd84:	d023      	beq.n	800cdce <__multiply+0xcc>
 800cd86:	4689      	mov	r9, r1
 800cd88:	46ac      	mov	ip, r5
 800cd8a:	f04f 0800 	mov.w	r8, #0
 800cd8e:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd92:	f8dc a000 	ldr.w	sl, [ip]
 800cd96:	b2a3      	uxth	r3, r4
 800cd98:	fa1f fa8a 	uxth.w	sl, sl
 800cd9c:	fb0b a303 	mla	r3, fp, r3, sl
 800cda0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cda4:	f8dc 4000 	ldr.w	r4, [ip]
 800cda8:	4443      	add	r3, r8
 800cdaa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cdae:	fb0b 840a 	mla	r4, fp, sl, r8
 800cdb2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cdb6:	46e2      	mov	sl, ip
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cdbe:	454f      	cmp	r7, r9
 800cdc0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cdc4:	f84a 3b04 	str.w	r3, [sl], #4
 800cdc8:	d82b      	bhi.n	800ce22 <__multiply+0x120>
 800cdca:	f8cc 8004 	str.w	r8, [ip, #4]
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cdd4:	3204      	adds	r2, #4
 800cdd6:	f1ba 0f00 	cmp.w	sl, #0
 800cdda:	d020      	beq.n	800ce1e <__multiply+0x11c>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	4689      	mov	r9, r1
 800cde0:	46a8      	mov	r8, r5
 800cde2:	f04f 0b00 	mov.w	fp, #0
 800cde6:	f8b9 c000 	ldrh.w	ip, [r9]
 800cdea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cdee:	fb0a 440c 	mla	r4, sl, ip, r4
 800cdf2:	445c      	add	r4, fp
 800cdf4:	46c4      	mov	ip, r8
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cdfc:	f84c 3b04 	str.w	r3, [ip], #4
 800ce00:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce04:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ce08:	0c1b      	lsrs	r3, r3, #16
 800ce0a:	fb0a b303 	mla	r3, sl, r3, fp
 800ce0e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ce12:	454f      	cmp	r7, r9
 800ce14:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ce18:	d805      	bhi.n	800ce26 <__multiply+0x124>
 800ce1a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ce1e:	3504      	adds	r5, #4
 800ce20:	e79b      	b.n	800cd5a <__multiply+0x58>
 800ce22:	46d4      	mov	ip, sl
 800ce24:	e7b3      	b.n	800cd8e <__multiply+0x8c>
 800ce26:	46e0      	mov	r8, ip
 800ce28:	e7dd      	b.n	800cde6 <__multiply+0xe4>
 800ce2a:	3e01      	subs	r6, #1
 800ce2c:	e799      	b.n	800cd62 <__multiply+0x60>
	...

0800ce30 <__pow5mult>:
 800ce30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce34:	4615      	mov	r5, r2
 800ce36:	f012 0203 	ands.w	r2, r2, #3
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460f      	mov	r7, r1
 800ce3e:	d007      	beq.n	800ce50 <__pow5mult+0x20>
 800ce40:	3a01      	subs	r2, #1
 800ce42:	4c21      	ldr	r4, [pc, #132]	; (800cec8 <__pow5mult+0x98>)
 800ce44:	2300      	movs	r3, #0
 800ce46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce4a:	f7ff fec8 	bl	800cbde <__multadd>
 800ce4e:	4607      	mov	r7, r0
 800ce50:	10ad      	asrs	r5, r5, #2
 800ce52:	d035      	beq.n	800cec0 <__pow5mult+0x90>
 800ce54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce56:	b93c      	cbnz	r4, 800ce68 <__pow5mult+0x38>
 800ce58:	2010      	movs	r0, #16
 800ce5a:	f7ff fe6d 	bl	800cb38 <malloc>
 800ce5e:	6270      	str	r0, [r6, #36]	; 0x24
 800ce60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce64:	6004      	str	r4, [r0, #0]
 800ce66:	60c4      	str	r4, [r0, #12]
 800ce68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce70:	b94c      	cbnz	r4, 800ce86 <__pow5mult+0x56>
 800ce72:	f240 2171 	movw	r1, #625	; 0x271
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff ff3a 	bl	800ccf0 <__i2b>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce82:	4604      	mov	r4, r0
 800ce84:	6003      	str	r3, [r0, #0]
 800ce86:	f04f 0800 	mov.w	r8, #0
 800ce8a:	07eb      	lsls	r3, r5, #31
 800ce8c:	d50a      	bpl.n	800cea4 <__pow5mult+0x74>
 800ce8e:	4639      	mov	r1, r7
 800ce90:	4622      	mov	r2, r4
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7ff ff35 	bl	800cd02 <__multiply>
 800ce98:	4639      	mov	r1, r7
 800ce9a:	4681      	mov	r9, r0
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f7ff fe87 	bl	800cbb0 <_Bfree>
 800cea2:	464f      	mov	r7, r9
 800cea4:	106d      	asrs	r5, r5, #1
 800cea6:	d00b      	beq.n	800cec0 <__pow5mult+0x90>
 800cea8:	6820      	ldr	r0, [r4, #0]
 800ceaa:	b938      	cbnz	r0, 800cebc <__pow5mult+0x8c>
 800ceac:	4622      	mov	r2, r4
 800ceae:	4621      	mov	r1, r4
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f7ff ff26 	bl	800cd02 <__multiply>
 800ceb6:	6020      	str	r0, [r4, #0]
 800ceb8:	f8c0 8000 	str.w	r8, [r0]
 800cebc:	4604      	mov	r4, r0
 800cebe:	e7e4      	b.n	800ce8a <__pow5mult+0x5a>
 800cec0:	4638      	mov	r0, r7
 800cec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec6:	bf00      	nop
 800cec8:	0800ea20 	.word	0x0800ea20

0800cecc <__lshift>:
 800cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced0:	460c      	mov	r4, r1
 800ced2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	6849      	ldr	r1, [r1, #4]
 800ceda:	eb0a 0903 	add.w	r9, sl, r3
 800cede:	68a3      	ldr	r3, [r4, #8]
 800cee0:	4607      	mov	r7, r0
 800cee2:	4616      	mov	r6, r2
 800cee4:	f109 0501 	add.w	r5, r9, #1
 800cee8:	42ab      	cmp	r3, r5
 800ceea:	db32      	blt.n	800cf52 <__lshift+0x86>
 800ceec:	4638      	mov	r0, r7
 800ceee:	f7ff fe2b 	bl	800cb48 <_Balloc>
 800cef2:	2300      	movs	r3, #0
 800cef4:	4680      	mov	r8, r0
 800cef6:	f100 0114 	add.w	r1, r0, #20
 800cefa:	461a      	mov	r2, r3
 800cefc:	4553      	cmp	r3, sl
 800cefe:	db2b      	blt.n	800cf58 <__lshift+0x8c>
 800cf00:	6920      	ldr	r0, [r4, #16]
 800cf02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf06:	f104 0314 	add.w	r3, r4, #20
 800cf0a:	f016 021f 	ands.w	r2, r6, #31
 800cf0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf16:	d025      	beq.n	800cf64 <__lshift+0x98>
 800cf18:	f1c2 0e20 	rsb	lr, r2, #32
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	681e      	ldr	r6, [r3, #0]
 800cf20:	468a      	mov	sl, r1
 800cf22:	4096      	lsls	r6, r2
 800cf24:	4330      	orrs	r0, r6
 800cf26:	f84a 0b04 	str.w	r0, [sl], #4
 800cf2a:	f853 0b04 	ldr.w	r0, [r3], #4
 800cf2e:	459c      	cmp	ip, r3
 800cf30:	fa20 f00e 	lsr.w	r0, r0, lr
 800cf34:	d814      	bhi.n	800cf60 <__lshift+0x94>
 800cf36:	6048      	str	r0, [r1, #4]
 800cf38:	b108      	cbz	r0, 800cf3e <__lshift+0x72>
 800cf3a:	f109 0502 	add.w	r5, r9, #2
 800cf3e:	3d01      	subs	r5, #1
 800cf40:	4638      	mov	r0, r7
 800cf42:	f8c8 5010 	str.w	r5, [r8, #16]
 800cf46:	4621      	mov	r1, r4
 800cf48:	f7ff fe32 	bl	800cbb0 <_Bfree>
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf52:	3101      	adds	r1, #1
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	e7c7      	b.n	800cee8 <__lshift+0x1c>
 800cf58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	e7cd      	b.n	800cefc <__lshift+0x30>
 800cf60:	4651      	mov	r1, sl
 800cf62:	e7dc      	b.n	800cf1e <__lshift+0x52>
 800cf64:	3904      	subs	r1, #4
 800cf66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf6a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf6e:	459c      	cmp	ip, r3
 800cf70:	d8f9      	bhi.n	800cf66 <__lshift+0x9a>
 800cf72:	e7e4      	b.n	800cf3e <__lshift+0x72>

0800cf74 <__mcmp>:
 800cf74:	6903      	ldr	r3, [r0, #16]
 800cf76:	690a      	ldr	r2, [r1, #16]
 800cf78:	1a9b      	subs	r3, r3, r2
 800cf7a:	b530      	push	{r4, r5, lr}
 800cf7c:	d10c      	bne.n	800cf98 <__mcmp+0x24>
 800cf7e:	0092      	lsls	r2, r2, #2
 800cf80:	3014      	adds	r0, #20
 800cf82:	3114      	adds	r1, #20
 800cf84:	1884      	adds	r4, r0, r2
 800cf86:	4411      	add	r1, r2
 800cf88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf90:	4295      	cmp	r5, r2
 800cf92:	d003      	beq.n	800cf9c <__mcmp+0x28>
 800cf94:	d305      	bcc.n	800cfa2 <__mcmp+0x2e>
 800cf96:	2301      	movs	r3, #1
 800cf98:	4618      	mov	r0, r3
 800cf9a:	bd30      	pop	{r4, r5, pc}
 800cf9c:	42a0      	cmp	r0, r4
 800cf9e:	d3f3      	bcc.n	800cf88 <__mcmp+0x14>
 800cfa0:	e7fa      	b.n	800cf98 <__mcmp+0x24>
 800cfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa6:	e7f7      	b.n	800cf98 <__mcmp+0x24>

0800cfa8 <__mdiff>:
 800cfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfac:	460d      	mov	r5, r1
 800cfae:	4607      	mov	r7, r0
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	f7ff ffdd 	bl	800cf74 <__mcmp>
 800cfba:	1e06      	subs	r6, r0, #0
 800cfbc:	d108      	bne.n	800cfd0 <__mdiff+0x28>
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff fdc1 	bl	800cb48 <_Balloc>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd0:	bfa4      	itt	ge
 800cfd2:	4623      	movge	r3, r4
 800cfd4:	462c      	movge	r4, r5
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	6861      	ldr	r1, [r4, #4]
 800cfda:	bfa6      	itte	ge
 800cfdc:	461d      	movge	r5, r3
 800cfde:	2600      	movge	r6, #0
 800cfe0:	2601      	movlt	r6, #1
 800cfe2:	f7ff fdb1 	bl	800cb48 <_Balloc>
 800cfe6:	692b      	ldr	r3, [r5, #16]
 800cfe8:	60c6      	str	r6, [r0, #12]
 800cfea:	6926      	ldr	r6, [r4, #16]
 800cfec:	f105 0914 	add.w	r9, r5, #20
 800cff0:	f104 0214 	add.w	r2, r4, #20
 800cff4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cff8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cffc:	f100 0514 	add.w	r5, r0, #20
 800d000:	f04f 0e00 	mov.w	lr, #0
 800d004:	f852 ab04 	ldr.w	sl, [r2], #4
 800d008:	f859 4b04 	ldr.w	r4, [r9], #4
 800d00c:	fa1e f18a 	uxtah	r1, lr, sl
 800d010:	b2a3      	uxth	r3, r4
 800d012:	1ac9      	subs	r1, r1, r3
 800d014:	0c23      	lsrs	r3, r4, #16
 800d016:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d01a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d01e:	b289      	uxth	r1, r1
 800d020:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d024:	45c8      	cmp	r8, r9
 800d026:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d02a:	4694      	mov	ip, r2
 800d02c:	f845 3b04 	str.w	r3, [r5], #4
 800d030:	d8e8      	bhi.n	800d004 <__mdiff+0x5c>
 800d032:	45bc      	cmp	ip, r7
 800d034:	d304      	bcc.n	800d040 <__mdiff+0x98>
 800d036:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d03a:	b183      	cbz	r3, 800d05e <__mdiff+0xb6>
 800d03c:	6106      	str	r6, [r0, #16]
 800d03e:	e7c5      	b.n	800cfcc <__mdiff+0x24>
 800d040:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d044:	fa1e f381 	uxtah	r3, lr, r1
 800d048:	141a      	asrs	r2, r3, #16
 800d04a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d04e:	b29b      	uxth	r3, r3
 800d050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d054:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d058:	f845 3b04 	str.w	r3, [r5], #4
 800d05c:	e7e9      	b.n	800d032 <__mdiff+0x8a>
 800d05e:	3e01      	subs	r6, #1
 800d060:	e7e9      	b.n	800d036 <__mdiff+0x8e>

0800d062 <__d2b>:
 800d062:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d066:	460e      	mov	r6, r1
 800d068:	2101      	movs	r1, #1
 800d06a:	ec59 8b10 	vmov	r8, r9, d0
 800d06e:	4615      	mov	r5, r2
 800d070:	f7ff fd6a 	bl	800cb48 <_Balloc>
 800d074:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d078:	4607      	mov	r7, r0
 800d07a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d07e:	bb34      	cbnz	r4, 800d0ce <__d2b+0x6c>
 800d080:	9301      	str	r3, [sp, #4]
 800d082:	f1b8 0300 	subs.w	r3, r8, #0
 800d086:	d027      	beq.n	800d0d8 <__d2b+0x76>
 800d088:	a802      	add	r0, sp, #8
 800d08a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d08e:	f7ff fe00 	bl	800cc92 <__lo0bits>
 800d092:	9900      	ldr	r1, [sp, #0]
 800d094:	b1f0      	cbz	r0, 800d0d4 <__d2b+0x72>
 800d096:	9a01      	ldr	r2, [sp, #4]
 800d098:	f1c0 0320 	rsb	r3, r0, #32
 800d09c:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	40c2      	lsrs	r2, r0
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	9201      	str	r2, [sp, #4]
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	61bb      	str	r3, [r7, #24]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bf14      	ite	ne
 800d0b0:	2102      	movne	r1, #2
 800d0b2:	2101      	moveq	r1, #1
 800d0b4:	6139      	str	r1, [r7, #16]
 800d0b6:	b1c4      	cbz	r4, 800d0ea <__d2b+0x88>
 800d0b8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d0bc:	4404      	add	r4, r0
 800d0be:	6034      	str	r4, [r6, #0]
 800d0c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0c4:	6028      	str	r0, [r5, #0]
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	b003      	add	sp, #12
 800d0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0d2:	e7d5      	b.n	800d080 <__d2b+0x1e>
 800d0d4:	6179      	str	r1, [r7, #20]
 800d0d6:	e7e7      	b.n	800d0a8 <__d2b+0x46>
 800d0d8:	a801      	add	r0, sp, #4
 800d0da:	f7ff fdda 	bl	800cc92 <__lo0bits>
 800d0de:	9b01      	ldr	r3, [sp, #4]
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	6139      	str	r1, [r7, #16]
 800d0e6:	3020      	adds	r0, #32
 800d0e8:	e7e5      	b.n	800d0b6 <__d2b+0x54>
 800d0ea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d0ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0f2:	6030      	str	r0, [r6, #0]
 800d0f4:	6918      	ldr	r0, [r3, #16]
 800d0f6:	f7ff fdad 	bl	800cc54 <__hi0bits>
 800d0fa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d0fe:	e7e1      	b.n	800d0c4 <__d2b+0x62>

0800d100 <_calloc_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	fb02 f401 	mul.w	r4, r2, r1
 800d106:	4621      	mov	r1, r4
 800d108:	f000 f856 	bl	800d1b8 <_malloc_r>
 800d10c:	4605      	mov	r5, r0
 800d10e:	b118      	cbz	r0, 800d118 <_calloc_r+0x18>
 800d110:	4622      	mov	r2, r4
 800d112:	2100      	movs	r1, #0
 800d114:	f7fd ffcd 	bl	800b0b2 <memset>
 800d118:	4628      	mov	r0, r5
 800d11a:	bd38      	pop	{r3, r4, r5, pc}

0800d11c <_free_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4605      	mov	r5, r0
 800d120:	2900      	cmp	r1, #0
 800d122:	d045      	beq.n	800d1b0 <_free_r+0x94>
 800d124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d128:	1f0c      	subs	r4, r1, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfb8      	it	lt
 800d12e:	18e4      	addlt	r4, r4, r3
 800d130:	f000 fa98 	bl	800d664 <__malloc_lock>
 800d134:	4a1f      	ldr	r2, [pc, #124]	; (800d1b4 <_free_r+0x98>)
 800d136:	6813      	ldr	r3, [r2, #0]
 800d138:	4610      	mov	r0, r2
 800d13a:	b933      	cbnz	r3, 800d14a <_free_r+0x2e>
 800d13c:	6063      	str	r3, [r4, #4]
 800d13e:	6014      	str	r4, [r2, #0]
 800d140:	4628      	mov	r0, r5
 800d142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d146:	f000 ba8e 	b.w	800d666 <__malloc_unlock>
 800d14a:	42a3      	cmp	r3, r4
 800d14c:	d90c      	bls.n	800d168 <_free_r+0x4c>
 800d14e:	6821      	ldr	r1, [r4, #0]
 800d150:	1862      	adds	r2, r4, r1
 800d152:	4293      	cmp	r3, r2
 800d154:	bf04      	itt	eq
 800d156:	681a      	ldreq	r2, [r3, #0]
 800d158:	685b      	ldreq	r3, [r3, #4]
 800d15a:	6063      	str	r3, [r4, #4]
 800d15c:	bf04      	itt	eq
 800d15e:	1852      	addeq	r2, r2, r1
 800d160:	6022      	streq	r2, [r4, #0]
 800d162:	6004      	str	r4, [r0, #0]
 800d164:	e7ec      	b.n	800d140 <_free_r+0x24>
 800d166:	4613      	mov	r3, r2
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	b10a      	cbz	r2, 800d170 <_free_r+0x54>
 800d16c:	42a2      	cmp	r2, r4
 800d16e:	d9fa      	bls.n	800d166 <_free_r+0x4a>
 800d170:	6819      	ldr	r1, [r3, #0]
 800d172:	1858      	adds	r0, r3, r1
 800d174:	42a0      	cmp	r0, r4
 800d176:	d10b      	bne.n	800d190 <_free_r+0x74>
 800d178:	6820      	ldr	r0, [r4, #0]
 800d17a:	4401      	add	r1, r0
 800d17c:	1858      	adds	r0, r3, r1
 800d17e:	4282      	cmp	r2, r0
 800d180:	6019      	str	r1, [r3, #0]
 800d182:	d1dd      	bne.n	800d140 <_free_r+0x24>
 800d184:	6810      	ldr	r0, [r2, #0]
 800d186:	6852      	ldr	r2, [r2, #4]
 800d188:	605a      	str	r2, [r3, #4]
 800d18a:	4401      	add	r1, r0
 800d18c:	6019      	str	r1, [r3, #0]
 800d18e:	e7d7      	b.n	800d140 <_free_r+0x24>
 800d190:	d902      	bls.n	800d198 <_free_r+0x7c>
 800d192:	230c      	movs	r3, #12
 800d194:	602b      	str	r3, [r5, #0]
 800d196:	e7d3      	b.n	800d140 <_free_r+0x24>
 800d198:	6820      	ldr	r0, [r4, #0]
 800d19a:	1821      	adds	r1, r4, r0
 800d19c:	428a      	cmp	r2, r1
 800d19e:	bf04      	itt	eq
 800d1a0:	6811      	ldreq	r1, [r2, #0]
 800d1a2:	6852      	ldreq	r2, [r2, #4]
 800d1a4:	6062      	str	r2, [r4, #4]
 800d1a6:	bf04      	itt	eq
 800d1a8:	1809      	addeq	r1, r1, r0
 800d1aa:	6021      	streq	r1, [r4, #0]
 800d1ac:	605c      	str	r4, [r3, #4]
 800d1ae:	e7c7      	b.n	800d140 <_free_r+0x24>
 800d1b0:	bd38      	pop	{r3, r4, r5, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20072954 	.word	0x20072954

0800d1b8 <_malloc_r>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	1ccd      	adds	r5, r1, #3
 800d1bc:	f025 0503 	bic.w	r5, r5, #3
 800d1c0:	3508      	adds	r5, #8
 800d1c2:	2d0c      	cmp	r5, #12
 800d1c4:	bf38      	it	cc
 800d1c6:	250c      	movcc	r5, #12
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	db01      	blt.n	800d1d2 <_malloc_r+0x1a>
 800d1ce:	42a9      	cmp	r1, r5
 800d1d0:	d903      	bls.n	800d1da <_malloc_r+0x22>
 800d1d2:	230c      	movs	r3, #12
 800d1d4:	6033      	str	r3, [r6, #0]
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	bd70      	pop	{r4, r5, r6, pc}
 800d1da:	f000 fa43 	bl	800d664 <__malloc_lock>
 800d1de:	4a21      	ldr	r2, [pc, #132]	; (800d264 <_malloc_r+0xac>)
 800d1e0:	6814      	ldr	r4, [r2, #0]
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	b991      	cbnz	r1, 800d20c <_malloc_r+0x54>
 800d1e6:	4c20      	ldr	r4, [pc, #128]	; (800d268 <_malloc_r+0xb0>)
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	b91b      	cbnz	r3, 800d1f4 <_malloc_r+0x3c>
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f000 f97d 	bl	800d4ec <_sbrk_r>
 800d1f2:	6020      	str	r0, [r4, #0]
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f000 f978 	bl	800d4ec <_sbrk_r>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d124      	bne.n	800d24a <_malloc_r+0x92>
 800d200:	230c      	movs	r3, #12
 800d202:	6033      	str	r3, [r6, #0]
 800d204:	4630      	mov	r0, r6
 800d206:	f000 fa2e 	bl	800d666 <__malloc_unlock>
 800d20a:	e7e4      	b.n	800d1d6 <_malloc_r+0x1e>
 800d20c:	680b      	ldr	r3, [r1, #0]
 800d20e:	1b5b      	subs	r3, r3, r5
 800d210:	d418      	bmi.n	800d244 <_malloc_r+0x8c>
 800d212:	2b0b      	cmp	r3, #11
 800d214:	d90f      	bls.n	800d236 <_malloc_r+0x7e>
 800d216:	600b      	str	r3, [r1, #0]
 800d218:	50cd      	str	r5, [r1, r3]
 800d21a:	18cc      	adds	r4, r1, r3
 800d21c:	4630      	mov	r0, r6
 800d21e:	f000 fa22 	bl	800d666 <__malloc_unlock>
 800d222:	f104 000b 	add.w	r0, r4, #11
 800d226:	1d23      	adds	r3, r4, #4
 800d228:	f020 0007 	bic.w	r0, r0, #7
 800d22c:	1ac3      	subs	r3, r0, r3
 800d22e:	d0d3      	beq.n	800d1d8 <_malloc_r+0x20>
 800d230:	425a      	negs	r2, r3
 800d232:	50e2      	str	r2, [r4, r3]
 800d234:	e7d0      	b.n	800d1d8 <_malloc_r+0x20>
 800d236:	428c      	cmp	r4, r1
 800d238:	684b      	ldr	r3, [r1, #4]
 800d23a:	bf16      	itet	ne
 800d23c:	6063      	strne	r3, [r4, #4]
 800d23e:	6013      	streq	r3, [r2, #0]
 800d240:	460c      	movne	r4, r1
 800d242:	e7eb      	b.n	800d21c <_malloc_r+0x64>
 800d244:	460c      	mov	r4, r1
 800d246:	6849      	ldr	r1, [r1, #4]
 800d248:	e7cc      	b.n	800d1e4 <_malloc_r+0x2c>
 800d24a:	1cc4      	adds	r4, r0, #3
 800d24c:	f024 0403 	bic.w	r4, r4, #3
 800d250:	42a0      	cmp	r0, r4
 800d252:	d005      	beq.n	800d260 <_malloc_r+0xa8>
 800d254:	1a21      	subs	r1, r4, r0
 800d256:	4630      	mov	r0, r6
 800d258:	f000 f948 	bl	800d4ec <_sbrk_r>
 800d25c:	3001      	adds	r0, #1
 800d25e:	d0cf      	beq.n	800d200 <_malloc_r+0x48>
 800d260:	6025      	str	r5, [r4, #0]
 800d262:	e7db      	b.n	800d21c <_malloc_r+0x64>
 800d264:	20072954 	.word	0x20072954
 800d268:	20072958 	.word	0x20072958

0800d26c <__sfputc_r>:
 800d26c:	6893      	ldr	r3, [r2, #8]
 800d26e:	3b01      	subs	r3, #1
 800d270:	2b00      	cmp	r3, #0
 800d272:	b410      	push	{r4}
 800d274:	6093      	str	r3, [r2, #8]
 800d276:	da08      	bge.n	800d28a <__sfputc_r+0x1e>
 800d278:	6994      	ldr	r4, [r2, #24]
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	db01      	blt.n	800d282 <__sfputc_r+0x16>
 800d27e:	290a      	cmp	r1, #10
 800d280:	d103      	bne.n	800d28a <__sfputc_r+0x1e>
 800d282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d286:	f7fe bbd3 	b.w	800ba30 <__swbuf_r>
 800d28a:	6813      	ldr	r3, [r2, #0]
 800d28c:	1c58      	adds	r0, r3, #1
 800d28e:	6010      	str	r0, [r2, #0]
 800d290:	7019      	strb	r1, [r3, #0]
 800d292:	4608      	mov	r0, r1
 800d294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <__sfputs_r>:
 800d29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29c:	4606      	mov	r6, r0
 800d29e:	460f      	mov	r7, r1
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	18d5      	adds	r5, r2, r3
 800d2a4:	42ac      	cmp	r4, r5
 800d2a6:	d101      	bne.n	800d2ac <__sfputs_r+0x12>
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	e007      	b.n	800d2bc <__sfputs_r+0x22>
 800d2ac:	463a      	mov	r2, r7
 800d2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	f7ff ffda 	bl	800d26c <__sfputc_r>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d1f3      	bne.n	800d2a4 <__sfputs_r+0xa>
 800d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2c0 <_vfiprintf_r>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	b09d      	sub	sp, #116	; 0x74
 800d2c8:	4617      	mov	r7, r2
 800d2ca:	461d      	mov	r5, r3
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	b118      	cbz	r0, 800d2d8 <_vfiprintf_r+0x18>
 800d2d0:	6983      	ldr	r3, [r0, #24]
 800d2d2:	b90b      	cbnz	r3, 800d2d8 <_vfiprintf_r+0x18>
 800d2d4:	f7ff fb34 	bl	800c940 <__sinit>
 800d2d8:	4b7c      	ldr	r3, [pc, #496]	; (800d4cc <_vfiprintf_r+0x20c>)
 800d2da:	429c      	cmp	r4, r3
 800d2dc:	d158      	bne.n	800d390 <_vfiprintf_r+0xd0>
 800d2de:	6874      	ldr	r4, [r6, #4]
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	0718      	lsls	r0, r3, #28
 800d2e4:	d55e      	bpl.n	800d3a4 <_vfiprintf_r+0xe4>
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d05b      	beq.n	800d3a4 <_vfiprintf_r+0xe4>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f0:	2320      	movs	r3, #32
 800d2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f6:	2330      	movs	r3, #48	; 0x30
 800d2f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2fc:	9503      	str	r5, [sp, #12]
 800d2fe:	f04f 0b01 	mov.w	fp, #1
 800d302:	46b8      	mov	r8, r7
 800d304:	4645      	mov	r5, r8
 800d306:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d30a:	b10b      	cbz	r3, 800d310 <_vfiprintf_r+0x50>
 800d30c:	2b25      	cmp	r3, #37	; 0x25
 800d30e:	d154      	bne.n	800d3ba <_vfiprintf_r+0xfa>
 800d310:	ebb8 0a07 	subs.w	sl, r8, r7
 800d314:	d00b      	beq.n	800d32e <_vfiprintf_r+0x6e>
 800d316:	4653      	mov	r3, sl
 800d318:	463a      	mov	r2, r7
 800d31a:	4621      	mov	r1, r4
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7ff ffbc 	bl	800d29a <__sfputs_r>
 800d322:	3001      	adds	r0, #1
 800d324:	f000 80c2 	beq.w	800d4ac <_vfiprintf_r+0x1ec>
 800d328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32a:	4453      	add	r3, sl
 800d32c:	9309      	str	r3, [sp, #36]	; 0x24
 800d32e:	f898 3000 	ldrb.w	r3, [r8]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 80ba 	beq.w	800d4ac <_vfiprintf_r+0x1ec>
 800d338:	2300      	movs	r3, #0
 800d33a:	f04f 32ff 	mov.w	r2, #4294967295
 800d33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d342:	9304      	str	r3, [sp, #16]
 800d344:	9307      	str	r3, [sp, #28]
 800d346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d34a:	931a      	str	r3, [sp, #104]	; 0x68
 800d34c:	46a8      	mov	r8, r5
 800d34e:	2205      	movs	r2, #5
 800d350:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d354:	485e      	ldr	r0, [pc, #376]	; (800d4d0 <_vfiprintf_r+0x210>)
 800d356:	f7f2 ff7b 	bl	8000250 <memchr>
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	bb78      	cbnz	r0, 800d3be <_vfiprintf_r+0xfe>
 800d35e:	06d9      	lsls	r1, r3, #27
 800d360:	bf44      	itt	mi
 800d362:	2220      	movmi	r2, #32
 800d364:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d368:	071a      	lsls	r2, r3, #28
 800d36a:	bf44      	itt	mi
 800d36c:	222b      	movmi	r2, #43	; 0x2b
 800d36e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d372:	782a      	ldrb	r2, [r5, #0]
 800d374:	2a2a      	cmp	r2, #42	; 0x2a
 800d376:	d02a      	beq.n	800d3ce <_vfiprintf_r+0x10e>
 800d378:	9a07      	ldr	r2, [sp, #28]
 800d37a:	46a8      	mov	r8, r5
 800d37c:	2000      	movs	r0, #0
 800d37e:	250a      	movs	r5, #10
 800d380:	4641      	mov	r1, r8
 800d382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d386:	3b30      	subs	r3, #48	; 0x30
 800d388:	2b09      	cmp	r3, #9
 800d38a:	d969      	bls.n	800d460 <_vfiprintf_r+0x1a0>
 800d38c:	b360      	cbz	r0, 800d3e8 <_vfiprintf_r+0x128>
 800d38e:	e024      	b.n	800d3da <_vfiprintf_r+0x11a>
 800d390:	4b50      	ldr	r3, [pc, #320]	; (800d4d4 <_vfiprintf_r+0x214>)
 800d392:	429c      	cmp	r4, r3
 800d394:	d101      	bne.n	800d39a <_vfiprintf_r+0xda>
 800d396:	68b4      	ldr	r4, [r6, #8]
 800d398:	e7a2      	b.n	800d2e0 <_vfiprintf_r+0x20>
 800d39a:	4b4f      	ldr	r3, [pc, #316]	; (800d4d8 <_vfiprintf_r+0x218>)
 800d39c:	429c      	cmp	r4, r3
 800d39e:	bf08      	it	eq
 800d3a0:	68f4      	ldreq	r4, [r6, #12]
 800d3a2:	e79d      	b.n	800d2e0 <_vfiprintf_r+0x20>
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f7fe fb94 	bl	800bad4 <__swsetup_r>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d09d      	beq.n	800d2ec <_vfiprintf_r+0x2c>
 800d3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b4:	b01d      	add	sp, #116	; 0x74
 800d3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ba:	46a8      	mov	r8, r5
 800d3bc:	e7a2      	b.n	800d304 <_vfiprintf_r+0x44>
 800d3be:	4a44      	ldr	r2, [pc, #272]	; (800d4d0 <_vfiprintf_r+0x210>)
 800d3c0:	1a80      	subs	r0, r0, r2
 800d3c2:	fa0b f000 	lsl.w	r0, fp, r0
 800d3c6:	4318      	orrs	r0, r3
 800d3c8:	9004      	str	r0, [sp, #16]
 800d3ca:	4645      	mov	r5, r8
 800d3cc:	e7be      	b.n	800d34c <_vfiprintf_r+0x8c>
 800d3ce:	9a03      	ldr	r2, [sp, #12]
 800d3d0:	1d11      	adds	r1, r2, #4
 800d3d2:	6812      	ldr	r2, [r2, #0]
 800d3d4:	9103      	str	r1, [sp, #12]
 800d3d6:	2a00      	cmp	r2, #0
 800d3d8:	db01      	blt.n	800d3de <_vfiprintf_r+0x11e>
 800d3da:	9207      	str	r2, [sp, #28]
 800d3dc:	e004      	b.n	800d3e8 <_vfiprintf_r+0x128>
 800d3de:	4252      	negs	r2, r2
 800d3e0:	f043 0302 	orr.w	r3, r3, #2
 800d3e4:	9207      	str	r2, [sp, #28]
 800d3e6:	9304      	str	r3, [sp, #16]
 800d3e8:	f898 3000 	ldrb.w	r3, [r8]
 800d3ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ee:	d10e      	bne.n	800d40e <_vfiprintf_r+0x14e>
 800d3f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d3f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f6:	d138      	bne.n	800d46a <_vfiprintf_r+0x1aa>
 800d3f8:	9b03      	ldr	r3, [sp, #12]
 800d3fa:	1d1a      	adds	r2, r3, #4
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	9203      	str	r2, [sp, #12]
 800d400:	2b00      	cmp	r3, #0
 800d402:	bfb8      	it	lt
 800d404:	f04f 33ff 	movlt.w	r3, #4294967295
 800d408:	f108 0802 	add.w	r8, r8, #2
 800d40c:	9305      	str	r3, [sp, #20]
 800d40e:	4d33      	ldr	r5, [pc, #204]	; (800d4dc <_vfiprintf_r+0x21c>)
 800d410:	f898 1000 	ldrb.w	r1, [r8]
 800d414:	2203      	movs	r2, #3
 800d416:	4628      	mov	r0, r5
 800d418:	f7f2 ff1a 	bl	8000250 <memchr>
 800d41c:	b140      	cbz	r0, 800d430 <_vfiprintf_r+0x170>
 800d41e:	2340      	movs	r3, #64	; 0x40
 800d420:	1b40      	subs	r0, r0, r5
 800d422:	fa03 f000 	lsl.w	r0, r3, r0
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	4303      	orrs	r3, r0
 800d42a:	f108 0801 	add.w	r8, r8, #1
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	f898 1000 	ldrb.w	r1, [r8]
 800d434:	482a      	ldr	r0, [pc, #168]	; (800d4e0 <_vfiprintf_r+0x220>)
 800d436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d43a:	2206      	movs	r2, #6
 800d43c:	f108 0701 	add.w	r7, r8, #1
 800d440:	f7f2 ff06 	bl	8000250 <memchr>
 800d444:	2800      	cmp	r0, #0
 800d446:	d037      	beq.n	800d4b8 <_vfiprintf_r+0x1f8>
 800d448:	4b26      	ldr	r3, [pc, #152]	; (800d4e4 <_vfiprintf_r+0x224>)
 800d44a:	bb1b      	cbnz	r3, 800d494 <_vfiprintf_r+0x1d4>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	3307      	adds	r3, #7
 800d450:	f023 0307 	bic.w	r3, r3, #7
 800d454:	3308      	adds	r3, #8
 800d456:	9303      	str	r3, [sp, #12]
 800d458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45a:	444b      	add	r3, r9
 800d45c:	9309      	str	r3, [sp, #36]	; 0x24
 800d45e:	e750      	b.n	800d302 <_vfiprintf_r+0x42>
 800d460:	fb05 3202 	mla	r2, r5, r2, r3
 800d464:	2001      	movs	r0, #1
 800d466:	4688      	mov	r8, r1
 800d468:	e78a      	b.n	800d380 <_vfiprintf_r+0xc0>
 800d46a:	2300      	movs	r3, #0
 800d46c:	f108 0801 	add.w	r8, r8, #1
 800d470:	9305      	str	r3, [sp, #20]
 800d472:	4619      	mov	r1, r3
 800d474:	250a      	movs	r5, #10
 800d476:	4640      	mov	r0, r8
 800d478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d47c:	3a30      	subs	r2, #48	; 0x30
 800d47e:	2a09      	cmp	r2, #9
 800d480:	d903      	bls.n	800d48a <_vfiprintf_r+0x1ca>
 800d482:	2b00      	cmp	r3, #0
 800d484:	d0c3      	beq.n	800d40e <_vfiprintf_r+0x14e>
 800d486:	9105      	str	r1, [sp, #20]
 800d488:	e7c1      	b.n	800d40e <_vfiprintf_r+0x14e>
 800d48a:	fb05 2101 	mla	r1, r5, r1, r2
 800d48e:	2301      	movs	r3, #1
 800d490:	4680      	mov	r8, r0
 800d492:	e7f0      	b.n	800d476 <_vfiprintf_r+0x1b6>
 800d494:	ab03      	add	r3, sp, #12
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	4622      	mov	r2, r4
 800d49a:	4b13      	ldr	r3, [pc, #76]	; (800d4e8 <_vfiprintf_r+0x228>)
 800d49c:	a904      	add	r1, sp, #16
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7fd fe96 	bl	800b1d0 <_printf_float>
 800d4a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d4a8:	4681      	mov	r9, r0
 800d4aa:	d1d5      	bne.n	800d458 <_vfiprintf_r+0x198>
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	065b      	lsls	r3, r3, #25
 800d4b0:	f53f af7e 	bmi.w	800d3b0 <_vfiprintf_r+0xf0>
 800d4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4b6:	e77d      	b.n	800d3b4 <_vfiprintf_r+0xf4>
 800d4b8:	ab03      	add	r3, sp, #12
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	4622      	mov	r2, r4
 800d4be:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <_vfiprintf_r+0x228>)
 800d4c0:	a904      	add	r1, sp, #16
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f7fe f926 	bl	800b714 <_printf_i>
 800d4c8:	e7ec      	b.n	800d4a4 <_vfiprintf_r+0x1e4>
 800d4ca:	bf00      	nop
 800d4cc:	0800e8f0 	.word	0x0800e8f0
 800d4d0:	0800ea2c 	.word	0x0800ea2c
 800d4d4:	0800e910 	.word	0x0800e910
 800d4d8:	0800e8d0 	.word	0x0800e8d0
 800d4dc:	0800ea32 	.word	0x0800ea32
 800d4e0:	0800ea36 	.word	0x0800ea36
 800d4e4:	0800b1d1 	.word	0x0800b1d1
 800d4e8:	0800d29b 	.word	0x0800d29b

0800d4ec <_sbrk_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	4c06      	ldr	r4, [pc, #24]	; (800d508 <_sbrk_r+0x1c>)
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	f7f9 f98c 	bl	8006814 <_sbrk>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_sbrk_r+0x1a>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	b103      	cbz	r3, 800d506 <_sbrk_r+0x1a>
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	20073080 	.word	0x20073080

0800d50c <__sread>:
 800d50c:	b510      	push	{r4, lr}
 800d50e:	460c      	mov	r4, r1
 800d510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d514:	f000 f8a8 	bl	800d668 <_read_r>
 800d518:	2800      	cmp	r0, #0
 800d51a:	bfab      	itete	ge
 800d51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d51e:	89a3      	ldrhlt	r3, [r4, #12]
 800d520:	181b      	addge	r3, r3, r0
 800d522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d526:	bfac      	ite	ge
 800d528:	6563      	strge	r3, [r4, #84]	; 0x54
 800d52a:	81a3      	strhlt	r3, [r4, #12]
 800d52c:	bd10      	pop	{r4, pc}

0800d52e <__swrite>:
 800d52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d532:	461f      	mov	r7, r3
 800d534:	898b      	ldrh	r3, [r1, #12]
 800d536:	05db      	lsls	r3, r3, #23
 800d538:	4605      	mov	r5, r0
 800d53a:	460c      	mov	r4, r1
 800d53c:	4616      	mov	r6, r2
 800d53e:	d505      	bpl.n	800d54c <__swrite+0x1e>
 800d540:	2302      	movs	r3, #2
 800d542:	2200      	movs	r2, #0
 800d544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d548:	f000 f868 	bl	800d61c <_lseek_r>
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d556:	81a3      	strh	r3, [r4, #12]
 800d558:	4632      	mov	r2, r6
 800d55a:	463b      	mov	r3, r7
 800d55c:	4628      	mov	r0, r5
 800d55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d562:	f000 b817 	b.w	800d594 <_write_r>

0800d566 <__sseek>:
 800d566:	b510      	push	{r4, lr}
 800d568:	460c      	mov	r4, r1
 800d56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56e:	f000 f855 	bl	800d61c <_lseek_r>
 800d572:	1c43      	adds	r3, r0, #1
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	bf15      	itete	ne
 800d578:	6560      	strne	r0, [r4, #84]	; 0x54
 800d57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d582:	81a3      	strheq	r3, [r4, #12]
 800d584:	bf18      	it	ne
 800d586:	81a3      	strhne	r3, [r4, #12]
 800d588:	bd10      	pop	{r4, pc}

0800d58a <__sclose>:
 800d58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58e:	f000 b813 	b.w	800d5b8 <_close_r>
	...

0800d594 <_write_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	4c07      	ldr	r4, [pc, #28]	; (800d5b4 <_write_r+0x20>)
 800d598:	4605      	mov	r5, r0
 800d59a:	4608      	mov	r0, r1
 800d59c:	4611      	mov	r1, r2
 800d59e:	2200      	movs	r2, #0
 800d5a0:	6022      	str	r2, [r4, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f7f9 f8e5 	bl	8006772 <_write>
 800d5a8:	1c43      	adds	r3, r0, #1
 800d5aa:	d102      	bne.n	800d5b2 <_write_r+0x1e>
 800d5ac:	6823      	ldr	r3, [r4, #0]
 800d5ae:	b103      	cbz	r3, 800d5b2 <_write_r+0x1e>
 800d5b0:	602b      	str	r3, [r5, #0]
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	20073080 	.word	0x20073080

0800d5b8 <_close_r>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	4c06      	ldr	r4, [pc, #24]	; (800d5d4 <_close_r+0x1c>)
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4605      	mov	r5, r0
 800d5c0:	4608      	mov	r0, r1
 800d5c2:	6023      	str	r3, [r4, #0]
 800d5c4:	f7f9 f8f1 	bl	80067aa <_close>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d102      	bne.n	800d5d2 <_close_r+0x1a>
 800d5cc:	6823      	ldr	r3, [r4, #0]
 800d5ce:	b103      	cbz	r3, 800d5d2 <_close_r+0x1a>
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	20073080 	.word	0x20073080

0800d5d8 <_fstat_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	4c07      	ldr	r4, [pc, #28]	; (800d5f8 <_fstat_r+0x20>)
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4605      	mov	r5, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	4611      	mov	r1, r2
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	f7f9 f8ec 	bl	80067c2 <_fstat>
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	d102      	bne.n	800d5f4 <_fstat_r+0x1c>
 800d5ee:	6823      	ldr	r3, [r4, #0]
 800d5f0:	b103      	cbz	r3, 800d5f4 <_fstat_r+0x1c>
 800d5f2:	602b      	str	r3, [r5, #0]
 800d5f4:	bd38      	pop	{r3, r4, r5, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20073080 	.word	0x20073080

0800d5fc <_isatty_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	4c06      	ldr	r4, [pc, #24]	; (800d618 <_isatty_r+0x1c>)
 800d600:	2300      	movs	r3, #0
 800d602:	4605      	mov	r5, r0
 800d604:	4608      	mov	r0, r1
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	f7f9 f8eb 	bl	80067e2 <_isatty>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d102      	bne.n	800d616 <_isatty_r+0x1a>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	b103      	cbz	r3, 800d616 <_isatty_r+0x1a>
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	bd38      	pop	{r3, r4, r5, pc}
 800d618:	20073080 	.word	0x20073080

0800d61c <_lseek_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4c07      	ldr	r4, [pc, #28]	; (800d63c <_lseek_r+0x20>)
 800d620:	4605      	mov	r5, r0
 800d622:	4608      	mov	r0, r1
 800d624:	4611      	mov	r1, r2
 800d626:	2200      	movs	r2, #0
 800d628:	6022      	str	r2, [r4, #0]
 800d62a:	461a      	mov	r2, r3
 800d62c:	f7f9 f8e4 	bl	80067f8 <_lseek>
 800d630:	1c43      	adds	r3, r0, #1
 800d632:	d102      	bne.n	800d63a <_lseek_r+0x1e>
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	b103      	cbz	r3, 800d63a <_lseek_r+0x1e>
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	20073080 	.word	0x20073080

0800d640 <__ascii_mbtowc>:
 800d640:	b082      	sub	sp, #8
 800d642:	b901      	cbnz	r1, 800d646 <__ascii_mbtowc+0x6>
 800d644:	a901      	add	r1, sp, #4
 800d646:	b142      	cbz	r2, 800d65a <__ascii_mbtowc+0x1a>
 800d648:	b14b      	cbz	r3, 800d65e <__ascii_mbtowc+0x1e>
 800d64a:	7813      	ldrb	r3, [r2, #0]
 800d64c:	600b      	str	r3, [r1, #0]
 800d64e:	7812      	ldrb	r2, [r2, #0]
 800d650:	1c10      	adds	r0, r2, #0
 800d652:	bf18      	it	ne
 800d654:	2001      	movne	r0, #1
 800d656:	b002      	add	sp, #8
 800d658:	4770      	bx	lr
 800d65a:	4610      	mov	r0, r2
 800d65c:	e7fb      	b.n	800d656 <__ascii_mbtowc+0x16>
 800d65e:	f06f 0001 	mvn.w	r0, #1
 800d662:	e7f8      	b.n	800d656 <__ascii_mbtowc+0x16>

0800d664 <__malloc_lock>:
 800d664:	4770      	bx	lr

0800d666 <__malloc_unlock>:
 800d666:	4770      	bx	lr

0800d668 <_read_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4c07      	ldr	r4, [pc, #28]	; (800d688 <_read_r+0x20>)
 800d66c:	4605      	mov	r5, r0
 800d66e:	4608      	mov	r0, r1
 800d670:	4611      	mov	r1, r2
 800d672:	2200      	movs	r2, #0
 800d674:	6022      	str	r2, [r4, #0]
 800d676:	461a      	mov	r2, r3
 800d678:	f7f9 f85e 	bl	8006738 <_read>
 800d67c:	1c43      	adds	r3, r0, #1
 800d67e:	d102      	bne.n	800d686 <_read_r+0x1e>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	b103      	cbz	r3, 800d686 <_read_r+0x1e>
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	bd38      	pop	{r3, r4, r5, pc}
 800d688:	20073080 	.word	0x20073080

0800d68c <__ascii_wctomb>:
 800d68c:	b149      	cbz	r1, 800d6a2 <__ascii_wctomb+0x16>
 800d68e:	2aff      	cmp	r2, #255	; 0xff
 800d690:	bf85      	ittet	hi
 800d692:	238a      	movhi	r3, #138	; 0x8a
 800d694:	6003      	strhi	r3, [r0, #0]
 800d696:	700a      	strbls	r2, [r1, #0]
 800d698:	f04f 30ff 	movhi.w	r0, #4294967295
 800d69c:	bf98      	it	ls
 800d69e:	2001      	movls	r0, #1
 800d6a0:	4770      	bx	lr
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	4770      	bx	lr
	...

0800d6a8 <cos>:
 800d6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6aa:	eeb0 7b40 	vmov.f64	d7, d0
 800d6ae:	ee17 3a90 	vmov	r3, s15
 800d6b2:	4a19      	ldr	r2, [pc, #100]	; (800d718 <cos+0x70>)
 800d6b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	dc04      	bgt.n	800d6c6 <cos+0x1e>
 800d6bc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d710 <cos+0x68>
 800d6c0:	f000 fa56 	bl	800db70 <__kernel_cos>
 800d6c4:	e004      	b.n	800d6d0 <cos+0x28>
 800d6c6:	4a15      	ldr	r2, [pc, #84]	; (800d71c <cos+0x74>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	dd04      	ble.n	800d6d6 <cos+0x2e>
 800d6cc:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d6d0:	b005      	add	sp, #20
 800d6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6d6:	4668      	mov	r0, sp
 800d6d8:	f000 f862 	bl	800d7a0 <__ieee754_rem_pio2>
 800d6dc:	f000 0003 	and.w	r0, r0, #3
 800d6e0:	2801      	cmp	r0, #1
 800d6e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e6:	ed9d 0b00 	vldr	d0, [sp]
 800d6ea:	d007      	beq.n	800d6fc <cos+0x54>
 800d6ec:	2802      	cmp	r0, #2
 800d6ee:	d00a      	beq.n	800d706 <cos+0x5e>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d0e5      	beq.n	800d6c0 <cos+0x18>
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	f000 fd43 	bl	800e180 <__kernel_sin>
 800d6fa:	e7e9      	b.n	800d6d0 <cos+0x28>
 800d6fc:	f000 fd40 	bl	800e180 <__kernel_sin>
 800d700:	eeb1 0b40 	vneg.f64	d0, d0
 800d704:	e7e4      	b.n	800d6d0 <cos+0x28>
 800d706:	f000 fa33 	bl	800db70 <__kernel_cos>
 800d70a:	e7f9      	b.n	800d700 <cos+0x58>
 800d70c:	f3af 8000 	nop.w
	...
 800d718:	3fe921fb 	.word	0x3fe921fb
 800d71c:	7fefffff 	.word	0x7fefffff

0800d720 <sin>:
 800d720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d722:	eeb0 7b40 	vmov.f64	d7, d0
 800d726:	ee17 3a90 	vmov	r3, s15
 800d72a:	4a19      	ldr	r2, [pc, #100]	; (800d790 <sin+0x70>)
 800d72c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d730:	4293      	cmp	r3, r2
 800d732:	dc05      	bgt.n	800d740 <sin+0x20>
 800d734:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d788 <sin+0x68>
 800d738:	2000      	movs	r0, #0
 800d73a:	f000 fd21 	bl	800e180 <__kernel_sin>
 800d73e:	e004      	b.n	800d74a <sin+0x2a>
 800d740:	4a14      	ldr	r2, [pc, #80]	; (800d794 <sin+0x74>)
 800d742:	4293      	cmp	r3, r2
 800d744:	dd04      	ble.n	800d750 <sin+0x30>
 800d746:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d74a:	b005      	add	sp, #20
 800d74c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d750:	4668      	mov	r0, sp
 800d752:	f000 f825 	bl	800d7a0 <__ieee754_rem_pio2>
 800d756:	f000 0003 	and.w	r0, r0, #3
 800d75a:	2801      	cmp	r0, #1
 800d75c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d760:	ed9d 0b00 	vldr	d0, [sp]
 800d764:	d004      	beq.n	800d770 <sin+0x50>
 800d766:	2802      	cmp	r0, #2
 800d768:	d005      	beq.n	800d776 <sin+0x56>
 800d76a:	b950      	cbnz	r0, 800d782 <sin+0x62>
 800d76c:	2001      	movs	r0, #1
 800d76e:	e7e4      	b.n	800d73a <sin+0x1a>
 800d770:	f000 f9fe 	bl	800db70 <__kernel_cos>
 800d774:	e7e9      	b.n	800d74a <sin+0x2a>
 800d776:	2001      	movs	r0, #1
 800d778:	f000 fd02 	bl	800e180 <__kernel_sin>
 800d77c:	eeb1 0b40 	vneg.f64	d0, d0
 800d780:	e7e3      	b.n	800d74a <sin+0x2a>
 800d782:	f000 f9f5 	bl	800db70 <__kernel_cos>
 800d786:	e7f9      	b.n	800d77c <sin+0x5c>
	...
 800d790:	3fe921fb 	.word	0x3fe921fb
 800d794:	7fefffff 	.word	0x7fefffff

0800d798 <atan2f>:
 800d798:	f000 b93e 	b.w	800da18 <__ieee754_atan2f>
 800d79c:	0000      	movs	r0, r0
	...

0800d7a0 <__ieee754_rem_pio2>:
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	eeb0 7b40 	vmov.f64	d7, d0
 800d7a6:	ee17 5a90 	vmov	r5, s15
 800d7aa:	4b95      	ldr	r3, [pc, #596]	; (800da00 <__ieee754_rem_pio2+0x260>)
 800d7ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d7b0:	429e      	cmp	r6, r3
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	dc07      	bgt.n	800d7c8 <__ieee754_rem_pio2+0x28>
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	ed84 0b00 	vstr	d0, [r4]
 800d7c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	e01b      	b.n	800d800 <__ieee754_rem_pio2+0x60>
 800d7c8:	4b8e      	ldr	r3, [pc, #568]	; (800da04 <__ieee754_rem_pio2+0x264>)
 800d7ca:	429e      	cmp	r6, r3
 800d7cc:	dc3b      	bgt.n	800d846 <__ieee754_rem_pio2+0xa6>
 800d7ce:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d7d2:	2d00      	cmp	r5, #0
 800d7d4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d9c0 <__ieee754_rem_pio2+0x220>
 800d7d8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d7dc:	dd19      	ble.n	800d812 <__ieee754_rem_pio2+0x72>
 800d7de:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d7e2:	429e      	cmp	r6, r3
 800d7e4:	d00e      	beq.n	800d804 <__ieee754_rem_pio2+0x64>
 800d7e6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d9c8 <__ieee754_rem_pio2+0x228>
 800d7ea:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d7ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d7f2:	ed84 5b00 	vstr	d5, [r4]
 800d7f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7fa:	ed84 7b02 	vstr	d7, [r4, #8]
 800d7fe:	2001      	movs	r0, #1
 800d800:	b008      	add	sp, #32
 800d802:	bd70      	pop	{r4, r5, r6, pc}
 800d804:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d9d0 <__ieee754_rem_pio2+0x230>
 800d808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d80c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d9d8 <__ieee754_rem_pio2+0x238>
 800d810:	e7eb      	b.n	800d7ea <__ieee754_rem_pio2+0x4a>
 800d812:	429e      	cmp	r6, r3
 800d814:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d818:	d00e      	beq.n	800d838 <__ieee754_rem_pio2+0x98>
 800d81a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d9c8 <__ieee754_rem_pio2+0x228>
 800d81e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d822:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d826:	ed84 5b00 	vstr	d5, [r4]
 800d82a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d82e:	f04f 30ff 	mov.w	r0, #4294967295
 800d832:	ed84 7b02 	vstr	d7, [r4, #8]
 800d836:	e7e3      	b.n	800d800 <__ieee754_rem_pio2+0x60>
 800d838:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d9d0 <__ieee754_rem_pio2+0x230>
 800d83c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d840:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d9d8 <__ieee754_rem_pio2+0x238>
 800d844:	e7eb      	b.n	800d81e <__ieee754_rem_pio2+0x7e>
 800d846:	4b70      	ldr	r3, [pc, #448]	; (800da08 <__ieee754_rem_pio2+0x268>)
 800d848:	429e      	cmp	r6, r3
 800d84a:	dc6c      	bgt.n	800d926 <__ieee754_rem_pio2+0x186>
 800d84c:	f000 fcf0 	bl	800e230 <fabs>
 800d850:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d854:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d9e0 <__ieee754_rem_pio2+0x240>
 800d858:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d85c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d860:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d864:	ee17 0a90 	vmov	r0, s15
 800d868:	eeb1 5b44 	vneg.f64	d5, d4
 800d86c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d9c0 <__ieee754_rem_pio2+0x220>
 800d870:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d874:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d9c8 <__ieee754_rem_pio2+0x228>
 800d878:	281f      	cmp	r0, #31
 800d87a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d87e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d882:	dc08      	bgt.n	800d896 <__ieee754_rem_pio2+0xf6>
 800d884:	1e42      	subs	r2, r0, #1
 800d886:	4b61      	ldr	r3, [pc, #388]	; (800da0c <__ieee754_rem_pio2+0x26c>)
 800d888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d88c:	42b3      	cmp	r3, r6
 800d88e:	d002      	beq.n	800d896 <__ieee754_rem_pio2+0xf6>
 800d890:	ed84 6b00 	vstr	d6, [r4]
 800d894:	e022      	b.n	800d8dc <__ieee754_rem_pio2+0x13c>
 800d896:	ee16 3a90 	vmov	r3, s13
 800d89a:	1536      	asrs	r6, r6, #20
 800d89c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d8a0:	1af3      	subs	r3, r6, r3
 800d8a2:	2b10      	cmp	r3, #16
 800d8a4:	ddf4      	ble.n	800d890 <__ieee754_rem_pio2+0xf0>
 800d8a6:	eeb0 6b40 	vmov.f64	d6, d0
 800d8aa:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d9d0 <__ieee754_rem_pio2+0x230>
 800d8ae:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d8b2:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d8b6:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d8ba:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d9d8 <__ieee754_rem_pio2+0x238>
 800d8be:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d8c2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d8c6:	ee13 3a90 	vmov	r3, s7
 800d8ca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d8ce:	1af6      	subs	r6, r6, r3
 800d8d0:	2e31      	cmp	r6, #49	; 0x31
 800d8d2:	dc17      	bgt.n	800d904 <__ieee754_rem_pio2+0x164>
 800d8d4:	eeb0 0b46 	vmov.f64	d0, d6
 800d8d8:	ed84 3b00 	vstr	d3, [r4]
 800d8dc:	ed94 6b00 	vldr	d6, [r4]
 800d8e0:	2d00      	cmp	r5, #0
 800d8e2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d8e6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d8ea:	ed84 7b02 	vstr	d7, [r4, #8]
 800d8ee:	da87      	bge.n	800d800 <__ieee754_rem_pio2+0x60>
 800d8f0:	eeb1 6b46 	vneg.f64	d6, d6
 800d8f4:	ed84 6b00 	vstr	d6, [r4]
 800d8f8:	eeb1 7b47 	vneg.f64	d7, d7
 800d8fc:	4240      	negs	r0, r0
 800d8fe:	ed84 7b02 	vstr	d7, [r4, #8]
 800d902:	e77d      	b.n	800d800 <__ieee754_rem_pio2+0x60>
 800d904:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d9e8 <__ieee754_rem_pio2+0x248>
 800d908:	eeb0 0b46 	vmov.f64	d0, d6
 800d90c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d910:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d914:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d9f0 <__ieee754_rem_pio2+0x250>
 800d918:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d91c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d920:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d924:	e7b4      	b.n	800d890 <__ieee754_rem_pio2+0xf0>
 800d926:	4b3a      	ldr	r3, [pc, #232]	; (800da10 <__ieee754_rem_pio2+0x270>)
 800d928:	429e      	cmp	r6, r3
 800d92a:	dd06      	ble.n	800d93a <__ieee754_rem_pio2+0x19a>
 800d92c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d930:	ed80 7b02 	vstr	d7, [r0, #8]
 800d934:	ed80 7b00 	vstr	d7, [r0]
 800d938:	e744      	b.n	800d7c4 <__ieee754_rem_pio2+0x24>
 800d93a:	1532      	asrs	r2, r6, #20
 800d93c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d940:	ee10 0a10 	vmov	r0, s0
 800d944:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d948:	ec41 0b17 	vmov	d7, r0, r1
 800d94c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d950:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d9f8 <__ieee754_rem_pio2+0x258>
 800d954:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d958:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d95c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d960:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d964:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d968:	a908      	add	r1, sp, #32
 800d96a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d96e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d972:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d976:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d97a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d97e:	2303      	movs	r3, #3
 800d980:	ed31 7b02 	vldmdb	r1!, {d7}
 800d984:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98c:	f103 30ff 	add.w	r0, r3, #4294967295
 800d990:	d013      	beq.n	800d9ba <__ieee754_rem_pio2+0x21a>
 800d992:	4920      	ldr	r1, [pc, #128]	; (800da14 <__ieee754_rem_pio2+0x274>)
 800d994:	9101      	str	r1, [sp, #4]
 800d996:	2102      	movs	r1, #2
 800d998:	9100      	str	r1, [sp, #0]
 800d99a:	a802      	add	r0, sp, #8
 800d99c:	4621      	mov	r1, r4
 800d99e:	f000 f953 	bl	800dc48 <__kernel_rem_pio2>
 800d9a2:	2d00      	cmp	r5, #0
 800d9a4:	f6bf af2c 	bge.w	800d800 <__ieee754_rem_pio2+0x60>
 800d9a8:	ed94 7b00 	vldr	d7, [r4]
 800d9ac:	eeb1 7b47 	vneg.f64	d7, d7
 800d9b0:	ed84 7b00 	vstr	d7, [r4]
 800d9b4:	ed94 7b02 	vldr	d7, [r4, #8]
 800d9b8:	e79e      	b.n	800d8f8 <__ieee754_rem_pio2+0x158>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	e7e0      	b.n	800d980 <__ieee754_rem_pio2+0x1e0>
 800d9be:	bf00      	nop
 800d9c0:	54400000 	.word	0x54400000
 800d9c4:	3ff921fb 	.word	0x3ff921fb
 800d9c8:	1a626331 	.word	0x1a626331
 800d9cc:	3dd0b461 	.word	0x3dd0b461
 800d9d0:	1a600000 	.word	0x1a600000
 800d9d4:	3dd0b461 	.word	0x3dd0b461
 800d9d8:	2e037073 	.word	0x2e037073
 800d9dc:	3ba3198a 	.word	0x3ba3198a
 800d9e0:	6dc9c883 	.word	0x6dc9c883
 800d9e4:	3fe45f30 	.word	0x3fe45f30
 800d9e8:	2e000000 	.word	0x2e000000
 800d9ec:	3ba3198a 	.word	0x3ba3198a
 800d9f0:	252049c1 	.word	0x252049c1
 800d9f4:	397b839a 	.word	0x397b839a
 800d9f8:	00000000 	.word	0x00000000
 800d9fc:	41700000 	.word	0x41700000
 800da00:	3fe921fb 	.word	0x3fe921fb
 800da04:	4002d97b 	.word	0x4002d97b
 800da08:	413921fb 	.word	0x413921fb
 800da0c:	0800eb48 	.word	0x0800eb48
 800da10:	7fefffff 	.word	0x7fefffff
 800da14:	0800ebc8 	.word	0x0800ebc8

0800da18 <__ieee754_atan2f>:
 800da18:	ee10 2a90 	vmov	r2, s1
 800da1c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800da20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800da24:	b510      	push	{r4, lr}
 800da26:	eef0 7a40 	vmov.f32	s15, s0
 800da2a:	dc06      	bgt.n	800da3a <__ieee754_atan2f+0x22>
 800da2c:	ee10 0a10 	vmov	r0, s0
 800da30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800da34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da38:	dd04      	ble.n	800da44 <__ieee754_atan2f+0x2c>
 800da3a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800da3e:	eeb0 0a67 	vmov.f32	s0, s15
 800da42:	bd10      	pop	{r4, pc}
 800da44:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800da48:	d103      	bne.n	800da52 <__ieee754_atan2f+0x3a>
 800da4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da4e:	f000 bcf1 	b.w	800e434 <atanf>
 800da52:	1794      	asrs	r4, r2, #30
 800da54:	f004 0402 	and.w	r4, r4, #2
 800da58:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800da5c:	b93b      	cbnz	r3, 800da6e <__ieee754_atan2f+0x56>
 800da5e:	2c02      	cmp	r4, #2
 800da60:	d06b      	beq.n	800db3a <__ieee754_atan2f+0x122>
 800da62:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800db40 <__ieee754_atan2f+0x128>
 800da66:	2c03      	cmp	r4, #3
 800da68:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800da6c:	e7e7      	b.n	800da3e <__ieee754_atan2f+0x26>
 800da6e:	b939      	cbnz	r1, 800da80 <__ieee754_atan2f+0x68>
 800da70:	eddf 7a34 	vldr	s15, [pc, #208]	; 800db44 <__ieee754_atan2f+0x12c>
 800da74:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800db48 <__ieee754_atan2f+0x130>
 800da78:	2800      	cmp	r0, #0
 800da7a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800da7e:	e7de      	b.n	800da3e <__ieee754_atan2f+0x26>
 800da80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800da84:	d121      	bne.n	800daca <__ieee754_atan2f+0xb2>
 800da86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da8a:	d111      	bne.n	800dab0 <__ieee754_atan2f+0x98>
 800da8c:	2c02      	cmp	r4, #2
 800da8e:	d009      	beq.n	800daa4 <__ieee754_atan2f+0x8c>
 800da90:	2c03      	cmp	r4, #3
 800da92:	d00a      	beq.n	800daaa <__ieee754_atan2f+0x92>
 800da94:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800db4c <__ieee754_atan2f+0x134>
 800da98:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800db50 <__ieee754_atan2f+0x138>
 800da9c:	2c01      	cmp	r4, #1
 800da9e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800daa2:	e7cc      	b.n	800da3e <__ieee754_atan2f+0x26>
 800daa4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800db54 <__ieee754_atan2f+0x13c>
 800daa8:	e7c9      	b.n	800da3e <__ieee754_atan2f+0x26>
 800daaa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800db58 <__ieee754_atan2f+0x140>
 800daae:	e7c6      	b.n	800da3e <__ieee754_atan2f+0x26>
 800dab0:	2c02      	cmp	r4, #2
 800dab2:	d042      	beq.n	800db3a <__ieee754_atan2f+0x122>
 800dab4:	2c03      	cmp	r4, #3
 800dab6:	d005      	beq.n	800dac4 <__ieee754_atan2f+0xac>
 800dab8:	2c01      	cmp	r4, #1
 800daba:	eddf 7a28 	vldr	s15, [pc, #160]	; 800db5c <__ieee754_atan2f+0x144>
 800dabe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800db60 <__ieee754_atan2f+0x148>
 800dac2:	e7ec      	b.n	800da9e <__ieee754_atan2f+0x86>
 800dac4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800db40 <__ieee754_atan2f+0x128>
 800dac8:	e7b9      	b.n	800da3e <__ieee754_atan2f+0x26>
 800daca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dace:	d0cf      	beq.n	800da70 <__ieee754_atan2f+0x58>
 800dad0:	1a5b      	subs	r3, r3, r1
 800dad2:	15db      	asrs	r3, r3, #23
 800dad4:	2b3c      	cmp	r3, #60	; 0x3c
 800dad6:	dc1a      	bgt.n	800db0e <__ieee754_atan2f+0xf6>
 800dad8:	2a00      	cmp	r2, #0
 800dada:	da01      	bge.n	800dae0 <__ieee754_atan2f+0xc8>
 800dadc:	333c      	adds	r3, #60	; 0x3c
 800dade:	db19      	blt.n	800db14 <__ieee754_atan2f+0xfc>
 800dae0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800dae4:	f000 fd78 	bl	800e5d8 <fabsf>
 800dae8:	f000 fca4 	bl	800e434 <atanf>
 800daec:	eef0 7a40 	vmov.f32	s15, s0
 800daf0:	2c01      	cmp	r4, #1
 800daf2:	d012      	beq.n	800db1a <__ieee754_atan2f+0x102>
 800daf4:	2c02      	cmp	r4, #2
 800daf6:	d017      	beq.n	800db28 <__ieee754_atan2f+0x110>
 800daf8:	2c00      	cmp	r4, #0
 800dafa:	d0a0      	beq.n	800da3e <__ieee754_atan2f+0x26>
 800dafc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800db64 <__ieee754_atan2f+0x14c>
 800db00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db04:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800db68 <__ieee754_atan2f+0x150>
 800db08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db0c:	e797      	b.n	800da3e <__ieee754_atan2f+0x26>
 800db0e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800db44 <__ieee754_atan2f+0x12c>
 800db12:	e7ed      	b.n	800daf0 <__ieee754_atan2f+0xd8>
 800db14:	eddf 7a12 	vldr	s15, [pc, #72]	; 800db60 <__ieee754_atan2f+0x148>
 800db18:	e7ea      	b.n	800daf0 <__ieee754_atan2f+0xd8>
 800db1a:	ee17 3a90 	vmov	r3, s15
 800db1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db22:	ee07 3a90 	vmov	s15, r3
 800db26:	e78a      	b.n	800da3e <__ieee754_atan2f+0x26>
 800db28:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800db64 <__ieee754_atan2f+0x14c>
 800db2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db30:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800db68 <__ieee754_atan2f+0x150>
 800db34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db38:	e781      	b.n	800da3e <__ieee754_atan2f+0x26>
 800db3a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800db68 <__ieee754_atan2f+0x150>
 800db3e:	e77e      	b.n	800da3e <__ieee754_atan2f+0x26>
 800db40:	c0490fdb 	.word	0xc0490fdb
 800db44:	3fc90fdb 	.word	0x3fc90fdb
 800db48:	bfc90fdb 	.word	0xbfc90fdb
 800db4c:	bf490fdb 	.word	0xbf490fdb
 800db50:	3f490fdb 	.word	0x3f490fdb
 800db54:	4016cbe4 	.word	0x4016cbe4
 800db58:	c016cbe4 	.word	0xc016cbe4
 800db5c:	80000000 	.word	0x80000000
 800db60:	00000000 	.word	0x00000000
 800db64:	33bbbd2e 	.word	0x33bbbd2e
 800db68:	40490fdb 	.word	0x40490fdb
 800db6c:	00000000 	.word	0x00000000

0800db70 <__kernel_cos>:
 800db70:	ee10 1a90 	vmov	r1, s1
 800db74:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800db78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800db7c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800db80:	da05      	bge.n	800db8e <__kernel_cos+0x1e>
 800db82:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800db86:	ee16 3a90 	vmov	r3, s13
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d03d      	beq.n	800dc0a <__kernel_cos+0x9a>
 800db8e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800db92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800db96:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800dc10 <__kernel_cos+0xa0>
 800db9a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800db9e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800dba2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800dc18 <__kernel_cos+0xa8>
 800dba6:	eea4 5b03 	vfma.f64	d5, d4, d3
 800dbaa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800dc20 <__kernel_cos+0xb0>
 800dbae:	eea5 3b04 	vfma.f64	d3, d5, d4
 800dbb2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800dc28 <__kernel_cos+0xb8>
 800dbb6:	eea3 5b04 	vfma.f64	d5, d3, d4
 800dbba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800dc30 <__kernel_cos+0xc0>
 800dbbe:	4b20      	ldr	r3, [pc, #128]	; (800dc40 <__kernel_cos+0xd0>)
 800dbc0:	eea5 3b04 	vfma.f64	d3, d5, d4
 800dbc4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800dc38 <__kernel_cos+0xc8>
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	eea3 5b04 	vfma.f64	d5, d3, d4
 800dbce:	ee25 5b04 	vmul.f64	d5, d5, d4
 800dbd2:	eea4 1b05 	vfma.f64	d1, d4, d5
 800dbd6:	dc04      	bgt.n	800dbe2 <__kernel_cos+0x72>
 800dbd8:	ee36 6b41 	vsub.f64	d6, d6, d1
 800dbdc:	ee37 0b46 	vsub.f64	d0, d7, d6
 800dbe0:	4770      	bx	lr
 800dbe2:	4b18      	ldr	r3, [pc, #96]	; (800dc44 <__kernel_cos+0xd4>)
 800dbe4:	4299      	cmp	r1, r3
 800dbe6:	dc0d      	bgt.n	800dc04 <__kernel_cos+0x94>
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800dbee:	ec43 2b15 	vmov	d5, r2, r3
 800dbf2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800dbf6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dbfa:	ee36 6b41 	vsub.f64	d6, d6, d1
 800dbfe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dc02:	4770      	bx	lr
 800dc04:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800dc08:	e7f3      	b.n	800dbf2 <__kernel_cos+0x82>
 800dc0a:	eeb0 0b47 	vmov.f64	d0, d7
 800dc0e:	4770      	bx	lr
 800dc10:	be8838d4 	.word	0xbe8838d4
 800dc14:	bda8fae9 	.word	0xbda8fae9
 800dc18:	bdb4b1c4 	.word	0xbdb4b1c4
 800dc1c:	3e21ee9e 	.word	0x3e21ee9e
 800dc20:	809c52ad 	.word	0x809c52ad
 800dc24:	be927e4f 	.word	0xbe927e4f
 800dc28:	19cb1590 	.word	0x19cb1590
 800dc2c:	3efa01a0 	.word	0x3efa01a0
 800dc30:	16c15177 	.word	0x16c15177
 800dc34:	bf56c16c 	.word	0xbf56c16c
 800dc38:	5555554c 	.word	0x5555554c
 800dc3c:	3fa55555 	.word	0x3fa55555
 800dc40:	3fd33332 	.word	0x3fd33332
 800dc44:	3fe90000 	.word	0x3fe90000

0800dc48 <__kernel_rem_pio2>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	ed2d 8b06 	vpush	{d8-d10}
 800dc50:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800dc54:	469b      	mov	fp, r3
 800dc56:	460e      	mov	r6, r1
 800dc58:	4bc7      	ldr	r3, [pc, #796]	; (800df78 <__kernel_rem_pio2+0x330>)
 800dc5a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800dc5c:	9002      	str	r0, [sp, #8]
 800dc5e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800dc62:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800dc64:	1ed1      	subs	r1, r2, #3
 800dc66:	2318      	movs	r3, #24
 800dc68:	f06f 0417 	mvn.w	r4, #23
 800dc6c:	fb91 f1f3 	sdiv	r1, r1, r3
 800dc70:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800dc74:	f10b 3aff 	add.w	sl, fp, #4294967295
 800dc78:	fb01 4404 	mla	r4, r1, r4, r4
 800dc7c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800df60 <__kernel_rem_pio2+0x318>
 800dc80:	4414      	add	r4, r2
 800dc82:	eba1 050a 	sub.w	r5, r1, sl
 800dc86:	aa1a      	add	r2, sp, #104	; 0x68
 800dc88:	eb09 070a 	add.w	r7, r9, sl
 800dc8c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800dc90:	4696      	mov	lr, r2
 800dc92:	2300      	movs	r3, #0
 800dc94:	42bb      	cmp	r3, r7
 800dc96:	dd0f      	ble.n	800dcb8 <__kernel_rem_pio2+0x70>
 800dc98:	af6a      	add	r7, sp, #424	; 0x1a8
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	454a      	cmp	r2, r9
 800dc9e:	dc28      	bgt.n	800dcf2 <__kernel_rem_pio2+0xaa>
 800dca0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800dca4:	eb0b 0302 	add.w	r3, fp, r2
 800dca8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800dcac:	9d02      	ldr	r5, [sp, #8]
 800dcae:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800df60 <__kernel_rem_pio2+0x318>
 800dcb2:	f04f 0c00 	mov.w	ip, #0
 800dcb6:	e016      	b.n	800dce6 <__kernel_rem_pio2+0x9e>
 800dcb8:	42dd      	cmn	r5, r3
 800dcba:	d409      	bmi.n	800dcd0 <__kernel_rem_pio2+0x88>
 800dcbc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800dcc0:	ee07 2a90 	vmov	s15, r2
 800dcc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dcc8:	ecae 7b02 	vstmia	lr!, {d7}
 800dccc:	3301      	adds	r3, #1
 800dcce:	e7e1      	b.n	800dc94 <__kernel_rem_pio2+0x4c>
 800dcd0:	eeb0 7b46 	vmov.f64	d7, d6
 800dcd4:	e7f8      	b.n	800dcc8 <__kernel_rem_pio2+0x80>
 800dcd6:	ecb5 5b02 	vldmia	r5!, {d5}
 800dcda:	ed33 6b02 	vldmdb	r3!, {d6}
 800dcde:	f10c 0c01 	add.w	ip, ip, #1
 800dce2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dce6:	45d4      	cmp	ip, sl
 800dce8:	ddf5      	ble.n	800dcd6 <__kernel_rem_pio2+0x8e>
 800dcea:	eca7 7b02 	vstmia	r7!, {d7}
 800dcee:	3201      	adds	r2, #1
 800dcf0:	e7d4      	b.n	800dc9c <__kernel_rem_pio2+0x54>
 800dcf2:	ab06      	add	r3, sp, #24
 800dcf4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800dcf8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800df68 <__kernel_rem_pio2+0x320>
 800dcfc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800df70 <__kernel_rem_pio2+0x328>
 800dd00:	9304      	str	r3, [sp, #16]
 800dd02:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800dd06:	9303      	str	r3, [sp, #12]
 800dd08:	464d      	mov	r5, r9
 800dd0a:	ab92      	add	r3, sp, #584	; 0x248
 800dd0c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800dd10:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dd14:	3f01      	subs	r7, #1
 800dd16:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800dd1a:	00ff      	lsls	r7, r7, #3
 800dd1c:	ab92      	add	r3, sp, #584	; 0x248
 800dd1e:	19da      	adds	r2, r3, r7
 800dd20:	3a98      	subs	r2, #152	; 0x98
 800dd22:	2300      	movs	r3, #0
 800dd24:	1ae9      	subs	r1, r5, r3
 800dd26:	2900      	cmp	r1, #0
 800dd28:	dc4e      	bgt.n	800ddc8 <__kernel_rem_pio2+0x180>
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 fb04 	bl	800e338 <scalbn>
 800dd30:	eeb0 8b40 	vmov.f64	d8, d0
 800dd34:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800dd38:	ee28 0b00 	vmul.f64	d0, d8, d0
 800dd3c:	f000 fa84 	bl	800e248 <floor>
 800dd40:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800dd44:	eea0 8b47 	vfms.f64	d8, d0, d7
 800dd48:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800dd4c:	2c00      	cmp	r4, #0
 800dd4e:	edcd 7a01 	vstr	s15, [sp, #4]
 800dd52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dd56:	ee38 8b47 	vsub.f64	d8, d8, d7
 800dd5a:	dd4a      	ble.n	800ddf2 <__kernel_rem_pio2+0x1aa>
 800dd5c:	1e69      	subs	r1, r5, #1
 800dd5e:	ab06      	add	r3, sp, #24
 800dd60:	f1c4 0018 	rsb	r0, r4, #24
 800dd64:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800dd68:	9a01      	ldr	r2, [sp, #4]
 800dd6a:	fa4c f300 	asr.w	r3, ip, r0
 800dd6e:	441a      	add	r2, r3
 800dd70:	4083      	lsls	r3, r0
 800dd72:	9201      	str	r2, [sp, #4]
 800dd74:	ebac 0203 	sub.w	r2, ip, r3
 800dd78:	ab06      	add	r3, sp, #24
 800dd7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800dd7e:	f1c4 0317 	rsb	r3, r4, #23
 800dd82:	fa42 f803 	asr.w	r8, r2, r3
 800dd86:	f1b8 0f00 	cmp.w	r8, #0
 800dd8a:	dd43      	ble.n	800de14 <__kernel_rem_pio2+0x1cc>
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	2000      	movs	r0, #0
 800dd90:	3301      	adds	r3, #1
 800dd92:	9301      	str	r3, [sp, #4]
 800dd94:	4601      	mov	r1, r0
 800dd96:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800dd9a:	4285      	cmp	r5, r0
 800dd9c:	dc6e      	bgt.n	800de7c <__kernel_rem_pio2+0x234>
 800dd9e:	2c00      	cmp	r4, #0
 800dda0:	dd04      	ble.n	800ddac <__kernel_rem_pio2+0x164>
 800dda2:	2c01      	cmp	r4, #1
 800dda4:	d07f      	beq.n	800dea6 <__kernel_rem_pio2+0x25e>
 800dda6:	2c02      	cmp	r4, #2
 800dda8:	f000 8087 	beq.w	800deba <__kernel_rem_pio2+0x272>
 800ddac:	f1b8 0f02 	cmp.w	r8, #2
 800ddb0:	d130      	bne.n	800de14 <__kernel_rem_pio2+0x1cc>
 800ddb2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ddb6:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ddba:	b359      	cbz	r1, 800de14 <__kernel_rem_pio2+0x1cc>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 fabb 	bl	800e338 <scalbn>
 800ddc2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ddc6:	e025      	b.n	800de14 <__kernel_rem_pio2+0x1cc>
 800ddc8:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ddcc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ddd0:	a806      	add	r0, sp, #24
 800ddd2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ddd6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ddda:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ddde:	ee10 1a10 	vmov	r1, s0
 800dde2:	ed32 0b02 	vldmdb	r2!, {d0}
 800dde6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800ddea:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ddee:	3301      	adds	r3, #1
 800ddf0:	e798      	b.n	800dd24 <__kernel_rem_pio2+0xdc>
 800ddf2:	d106      	bne.n	800de02 <__kernel_rem_pio2+0x1ba>
 800ddf4:	1e6b      	subs	r3, r5, #1
 800ddf6:	aa06      	add	r2, sp, #24
 800ddf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ddfc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800de00:	e7c1      	b.n	800dd86 <__kernel_rem_pio2+0x13e>
 800de02:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800de06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0e:	da32      	bge.n	800de76 <__kernel_rem_pio2+0x22e>
 800de10:	f04f 0800 	mov.w	r8, #0
 800de14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1c:	f040 80b0 	bne.w	800df80 <__kernel_rem_pio2+0x338>
 800de20:	1e6b      	subs	r3, r5, #1
 800de22:	4618      	mov	r0, r3
 800de24:	2200      	movs	r2, #0
 800de26:	4548      	cmp	r0, r9
 800de28:	da4e      	bge.n	800dec8 <__kernel_rem_pio2+0x280>
 800de2a:	2a00      	cmp	r2, #0
 800de2c:	f000 8088 	beq.w	800df40 <__kernel_rem_pio2+0x2f8>
 800de30:	aa06      	add	r2, sp, #24
 800de32:	3c18      	subs	r4, #24
 800de34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800de38:	2900      	cmp	r1, #0
 800de3a:	f000 808e 	beq.w	800df5a <__kernel_rem_pio2+0x312>
 800de3e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800de42:	4620      	mov	r0, r4
 800de44:	9302      	str	r3, [sp, #8]
 800de46:	f000 fa77 	bl	800e338 <scalbn>
 800de4a:	9b02      	ldr	r3, [sp, #8]
 800de4c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800de4e:	00d9      	lsls	r1, r3, #3
 800de50:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800df68 <__kernel_rem_pio2+0x320>
 800de54:	1850      	adds	r0, r2, r1
 800de56:	f100 0508 	add.w	r5, r0, #8
 800de5a:	461c      	mov	r4, r3
 800de5c:	2c00      	cmp	r4, #0
 800de5e:	f280 80bd 	bge.w	800dfdc <__kernel_rem_pio2+0x394>
 800de62:	2500      	movs	r5, #0
 800de64:	1b5c      	subs	r4, r3, r5
 800de66:	2c00      	cmp	r4, #0
 800de68:	f2c0 80dd 	blt.w	800e026 <__kernel_rem_pio2+0x3de>
 800de6c:	4f43      	ldr	r7, [pc, #268]	; (800df7c <__kernel_rem_pio2+0x334>)
 800de6e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800df60 <__kernel_rem_pio2+0x318>
 800de72:	2400      	movs	r4, #0
 800de74:	e0cb      	b.n	800e00e <__kernel_rem_pio2+0x3c6>
 800de76:	f04f 0802 	mov.w	r8, #2
 800de7a:	e787      	b.n	800dd8c <__kernel_rem_pio2+0x144>
 800de7c:	ab06      	add	r3, sp, #24
 800de7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800de82:	b949      	cbnz	r1, 800de98 <__kernel_rem_pio2+0x250>
 800de84:	b12b      	cbz	r3, 800de92 <__kernel_rem_pio2+0x24a>
 800de86:	aa06      	add	r2, sp, #24
 800de88:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800de8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800de90:	2301      	movs	r3, #1
 800de92:	3001      	adds	r0, #1
 800de94:	4619      	mov	r1, r3
 800de96:	e780      	b.n	800dd9a <__kernel_rem_pio2+0x152>
 800de98:	aa06      	add	r2, sp, #24
 800de9a:	ebac 0303 	sub.w	r3, ip, r3
 800de9e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800dea2:	460b      	mov	r3, r1
 800dea4:	e7f5      	b.n	800de92 <__kernel_rem_pio2+0x24a>
 800dea6:	1e68      	subs	r0, r5, #1
 800dea8:	ab06      	add	r3, sp, #24
 800deaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800deae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800deb2:	aa06      	add	r2, sp, #24
 800deb4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800deb8:	e778      	b.n	800ddac <__kernel_rem_pio2+0x164>
 800deba:	1e68      	subs	r0, r5, #1
 800debc:	ab06      	add	r3, sp, #24
 800debe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dec2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dec6:	e7f4      	b.n	800deb2 <__kernel_rem_pio2+0x26a>
 800dec8:	a906      	add	r1, sp, #24
 800deca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800dece:	3801      	subs	r0, #1
 800ded0:	430a      	orrs	r2, r1
 800ded2:	e7a8      	b.n	800de26 <__kernel_rem_pio2+0x1de>
 800ded4:	f10c 0c01 	add.w	ip, ip, #1
 800ded8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dedc:	2a00      	cmp	r2, #0
 800dede:	d0f9      	beq.n	800ded4 <__kernel_rem_pio2+0x28c>
 800dee0:	eb0b 0305 	add.w	r3, fp, r5
 800dee4:	aa1a      	add	r2, sp, #104	; 0x68
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	1898      	adds	r0, r3, r2
 800deea:	3008      	adds	r0, #8
 800deec:	1c69      	adds	r1, r5, #1
 800deee:	3708      	adds	r7, #8
 800def0:	2200      	movs	r2, #0
 800def2:	4465      	add	r5, ip
 800def4:	9005      	str	r0, [sp, #20]
 800def6:	428d      	cmp	r5, r1
 800def8:	f6ff af07 	blt.w	800dd0a <__kernel_rem_pio2+0xc2>
 800defc:	a81a      	add	r0, sp, #104	; 0x68
 800defe:	eb02 0c03 	add.w	ip, r2, r3
 800df02:	4484      	add	ip, r0
 800df04:	9803      	ldr	r0, [sp, #12]
 800df06:	f8dd e008 	ldr.w	lr, [sp, #8]
 800df0a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800df0e:	9001      	str	r0, [sp, #4]
 800df10:	ee07 0a90 	vmov	s15, r0
 800df14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800df18:	9805      	ldr	r0, [sp, #20]
 800df1a:	ed8c 7b00 	vstr	d7, [ip]
 800df1e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800df60 <__kernel_rem_pio2+0x318>
 800df22:	eb00 0802 	add.w	r8, r0, r2
 800df26:	f04f 0c00 	mov.w	ip, #0
 800df2a:	45d4      	cmp	ip, sl
 800df2c:	dd0c      	ble.n	800df48 <__kernel_rem_pio2+0x300>
 800df2e:	eb02 0c07 	add.w	ip, r2, r7
 800df32:	a86a      	add	r0, sp, #424	; 0x1a8
 800df34:	4484      	add	ip, r0
 800df36:	ed8c 7b02 	vstr	d7, [ip, #8]
 800df3a:	3101      	adds	r1, #1
 800df3c:	3208      	adds	r2, #8
 800df3e:	e7da      	b.n	800def6 <__kernel_rem_pio2+0x2ae>
 800df40:	9b04      	ldr	r3, [sp, #16]
 800df42:	f04f 0c01 	mov.w	ip, #1
 800df46:	e7c7      	b.n	800ded8 <__kernel_rem_pio2+0x290>
 800df48:	ecbe 5b02 	vldmia	lr!, {d5}
 800df4c:	ed38 6b02 	vldmdb	r8!, {d6}
 800df50:	f10c 0c01 	add.w	ip, ip, #1
 800df54:	eea5 7b06 	vfma.f64	d7, d5, d6
 800df58:	e7e7      	b.n	800df2a <__kernel_rem_pio2+0x2e2>
 800df5a:	3b01      	subs	r3, #1
 800df5c:	e768      	b.n	800de30 <__kernel_rem_pio2+0x1e8>
 800df5e:	bf00      	nop
	...
 800df6c:	3e700000 	.word	0x3e700000
 800df70:	00000000 	.word	0x00000000
 800df74:	41700000 	.word	0x41700000
 800df78:	0800ed10 	.word	0x0800ed10
 800df7c:	0800ecd0 	.word	0x0800ecd0
 800df80:	4260      	negs	r0, r4
 800df82:	eeb0 0b48 	vmov.f64	d0, d8
 800df86:	f000 f9d7 	bl	800e338 <scalbn>
 800df8a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e168 <__kernel_rem_pio2+0x520>
 800df8e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800df92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df96:	db18      	blt.n	800dfca <__kernel_rem_pio2+0x382>
 800df98:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e170 <__kernel_rem_pio2+0x528>
 800df9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dfa0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800dfa4:	aa06      	add	r2, sp, #24
 800dfa6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800dfaa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800dfae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dfb2:	a906      	add	r1, sp, #24
 800dfb4:	ee10 3a10 	vmov	r3, s0
 800dfb8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800dfbc:	1c6b      	adds	r3, r5, #1
 800dfbe:	ee17 2a10 	vmov	r2, s14
 800dfc2:	3418      	adds	r4, #24
 800dfc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dfc8:	e739      	b.n	800de3e <__kernel_rem_pio2+0x1f6>
 800dfca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dfce:	aa06      	add	r2, sp, #24
 800dfd0:	ee10 3a10 	vmov	r3, s0
 800dfd4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800dfd8:	462b      	mov	r3, r5
 800dfda:	e730      	b.n	800de3e <__kernel_rem_pio2+0x1f6>
 800dfdc:	aa06      	add	r2, sp, #24
 800dfde:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800dfe2:	9202      	str	r2, [sp, #8]
 800dfe4:	ee07 2a90 	vmov	s15, r2
 800dfe8:	3c01      	subs	r4, #1
 800dfea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dfee:	ee27 7b00 	vmul.f64	d7, d7, d0
 800dff2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800dff6:	ed25 7b02 	vstmdb	r5!, {d7}
 800dffa:	e72f      	b.n	800de5c <__kernel_rem_pio2+0x214>
 800dffc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800e000:	ecb7 5b02 	vldmia	r7!, {d5}
 800e004:	ed9c 6b00 	vldr	d6, [ip]
 800e008:	3401      	adds	r4, #1
 800e00a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e00e:	454c      	cmp	r4, r9
 800e010:	dc01      	bgt.n	800e016 <__kernel_rem_pio2+0x3ce>
 800e012:	42a5      	cmp	r5, r4
 800e014:	daf2      	bge.n	800dffc <__kernel_rem_pio2+0x3b4>
 800e016:	aa42      	add	r2, sp, #264	; 0x108
 800e018:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800e01c:	ed84 7b00 	vstr	d7, [r4]
 800e020:	3501      	adds	r5, #1
 800e022:	3808      	subs	r0, #8
 800e024:	e71e      	b.n	800de64 <__kernel_rem_pio2+0x21c>
 800e026:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e028:	2a03      	cmp	r2, #3
 800e02a:	d84e      	bhi.n	800e0ca <__kernel_rem_pio2+0x482>
 800e02c:	e8df f002 	tbb	[pc, r2]
 800e030:	021f1f3e 	.word	0x021f1f3e
 800e034:	3108      	adds	r1, #8
 800e036:	aa42      	add	r2, sp, #264	; 0x108
 800e038:	4411      	add	r1, r2
 800e03a:	4608      	mov	r0, r1
 800e03c:	461c      	mov	r4, r3
 800e03e:	2c00      	cmp	r4, #0
 800e040:	dc61      	bgt.n	800e106 <__kernel_rem_pio2+0x4be>
 800e042:	4608      	mov	r0, r1
 800e044:	461c      	mov	r4, r3
 800e046:	2c01      	cmp	r4, #1
 800e048:	dc6d      	bgt.n	800e126 <__kernel_rem_pio2+0x4de>
 800e04a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e178 <__kernel_rem_pio2+0x530>
 800e04e:	2b01      	cmp	r3, #1
 800e050:	dc79      	bgt.n	800e146 <__kernel_rem_pio2+0x4fe>
 800e052:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e056:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e05a:	f1b8 0f00 	cmp.w	r8, #0
 800e05e:	d178      	bne.n	800e152 <__kernel_rem_pio2+0x50a>
 800e060:	ed86 5b00 	vstr	d5, [r6]
 800e064:	ed86 6b02 	vstr	d6, [r6, #8]
 800e068:	ed86 7b04 	vstr	d7, [r6, #16]
 800e06c:	e02d      	b.n	800e0ca <__kernel_rem_pio2+0x482>
 800e06e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800e178 <__kernel_rem_pio2+0x530>
 800e072:	3108      	adds	r1, #8
 800e074:	aa42      	add	r2, sp, #264	; 0x108
 800e076:	4411      	add	r1, r2
 800e078:	4618      	mov	r0, r3
 800e07a:	2800      	cmp	r0, #0
 800e07c:	da34      	bge.n	800e0e8 <__kernel_rem_pio2+0x4a0>
 800e07e:	f1b8 0f00 	cmp.w	r8, #0
 800e082:	d037      	beq.n	800e0f4 <__kernel_rem_pio2+0x4ac>
 800e084:	eeb1 7b46 	vneg.f64	d7, d6
 800e088:	ed86 7b00 	vstr	d7, [r6]
 800e08c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e090:	a844      	add	r0, sp, #272	; 0x110
 800e092:	2101      	movs	r1, #1
 800e094:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e098:	428b      	cmp	r3, r1
 800e09a:	da2e      	bge.n	800e0fa <__kernel_rem_pio2+0x4b2>
 800e09c:	f1b8 0f00 	cmp.w	r8, #0
 800e0a0:	d001      	beq.n	800e0a6 <__kernel_rem_pio2+0x45e>
 800e0a2:	eeb1 7b47 	vneg.f64	d7, d7
 800e0a6:	ed86 7b02 	vstr	d7, [r6, #8]
 800e0aa:	e00e      	b.n	800e0ca <__kernel_rem_pio2+0x482>
 800e0ac:	aa92      	add	r2, sp, #584	; 0x248
 800e0ae:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800e178 <__kernel_rem_pio2+0x530>
 800e0b2:	4411      	add	r1, r2
 800e0b4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	da0f      	bge.n	800e0dc <__kernel_rem_pio2+0x494>
 800e0bc:	f1b8 0f00 	cmp.w	r8, #0
 800e0c0:	d001      	beq.n	800e0c6 <__kernel_rem_pio2+0x47e>
 800e0c2:	eeb1 7b47 	vneg.f64	d7, d7
 800e0c6:	ed86 7b00 	vstr	d7, [r6]
 800e0ca:	9b01      	ldr	r3, [sp, #4]
 800e0cc:	f003 0007 	and.w	r0, r3, #7
 800e0d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e0d4:	ecbd 8b06 	vpop	{d8-d10}
 800e0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0dc:	ed31 6b02 	vldmdb	r1!, {d6}
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e0e6:	e7e7      	b.n	800e0b8 <__kernel_rem_pio2+0x470>
 800e0e8:	ed31 7b02 	vldmdb	r1!, {d7}
 800e0ec:	3801      	subs	r0, #1
 800e0ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e0f2:	e7c2      	b.n	800e07a <__kernel_rem_pio2+0x432>
 800e0f4:	eeb0 7b46 	vmov.f64	d7, d6
 800e0f8:	e7c6      	b.n	800e088 <__kernel_rem_pio2+0x440>
 800e0fa:	ecb0 6b02 	vldmia	r0!, {d6}
 800e0fe:	3101      	adds	r1, #1
 800e100:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e104:	e7c8      	b.n	800e098 <__kernel_rem_pio2+0x450>
 800e106:	ed10 7b04 	vldr	d7, [r0, #-16]
 800e10a:	ed30 5b02 	vldmdb	r0!, {d5}
 800e10e:	3c01      	subs	r4, #1
 800e110:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e114:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e118:	ed00 6b02 	vstr	d6, [r0, #-8]
 800e11c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e120:	ed80 7b00 	vstr	d7, [r0]
 800e124:	e78b      	b.n	800e03e <__kernel_rem_pio2+0x3f6>
 800e126:	ed10 7b04 	vldr	d7, [r0, #-16]
 800e12a:	ed30 5b02 	vldmdb	r0!, {d5}
 800e12e:	3c01      	subs	r4, #1
 800e130:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e134:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e138:	ed00 6b02 	vstr	d6, [r0, #-8]
 800e13c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e140:	ed80 7b00 	vstr	d7, [r0]
 800e144:	e77f      	b.n	800e046 <__kernel_rem_pio2+0x3fe>
 800e146:	ed31 6b02 	vldmdb	r1!, {d6}
 800e14a:	3b01      	subs	r3, #1
 800e14c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e150:	e77d      	b.n	800e04e <__kernel_rem_pio2+0x406>
 800e152:	eeb1 5b45 	vneg.f64	d5, d5
 800e156:	eeb1 6b46 	vneg.f64	d6, d6
 800e15a:	ed86 5b00 	vstr	d5, [r6]
 800e15e:	eeb1 7b47 	vneg.f64	d7, d7
 800e162:	ed86 6b02 	vstr	d6, [r6, #8]
 800e166:	e77f      	b.n	800e068 <__kernel_rem_pio2+0x420>
 800e168:	00000000 	.word	0x00000000
 800e16c:	41700000 	.word	0x41700000
 800e170:	00000000 	.word	0x00000000
 800e174:	3e700000 	.word	0x3e700000
	...

0800e180 <__kernel_sin>:
 800e180:	ee10 3a90 	vmov	r3, s1
 800e184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e188:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e18c:	da04      	bge.n	800e198 <__kernel_sin+0x18>
 800e18e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e192:	ee17 3a90 	vmov	r3, s15
 800e196:	b35b      	cbz	r3, 800e1f0 <__kernel_sin+0x70>
 800e198:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e19c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e1a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e1f8 <__kernel_sin+0x78>
 800e1a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e200 <__kernel_sin+0x80>
 800e1a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e1ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e208 <__kernel_sin+0x88>
 800e1b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e1b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e210 <__kernel_sin+0x90>
 800e1b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e1bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e218 <__kernel_sin+0x98>
 800e1c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e1c4:	b930      	cbnz	r0, 800e1d4 <__kernel_sin+0x54>
 800e1c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e220 <__kernel_sin+0xa0>
 800e1ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e1ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e1d2:	4770      	bx	lr
 800e1d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e1d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e1dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e1e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e1e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e228 <__kernel_sin+0xa8>
 800e1e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e1ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	f3af 8000 	nop.w
 800e1f8:	5acfd57c 	.word	0x5acfd57c
 800e1fc:	3de5d93a 	.word	0x3de5d93a
 800e200:	8a2b9ceb 	.word	0x8a2b9ceb
 800e204:	be5ae5e6 	.word	0xbe5ae5e6
 800e208:	57b1fe7d 	.word	0x57b1fe7d
 800e20c:	3ec71de3 	.word	0x3ec71de3
 800e210:	19c161d5 	.word	0x19c161d5
 800e214:	bf2a01a0 	.word	0xbf2a01a0
 800e218:	1110f8a6 	.word	0x1110f8a6
 800e21c:	3f811111 	.word	0x3f811111
 800e220:	55555549 	.word	0x55555549
 800e224:	bfc55555 	.word	0xbfc55555
 800e228:	55555549 	.word	0x55555549
 800e22c:	3fc55555 	.word	0x3fc55555

0800e230 <fabs>:
 800e230:	ec51 0b10 	vmov	r0, r1, d0
 800e234:	ee10 2a10 	vmov	r2, s0
 800e238:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e23c:	ec43 2b10 	vmov	d0, r2, r3
 800e240:	4770      	bx	lr
 800e242:	0000      	movs	r0, r0
 800e244:	0000      	movs	r0, r0
	...

0800e248 <floor>:
 800e248:	ee10 1a90 	vmov	r1, s1
 800e24c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e250:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e254:	2b13      	cmp	r3, #19
 800e256:	b530      	push	{r4, r5, lr}
 800e258:	ee10 0a10 	vmov	r0, s0
 800e25c:	ee10 5a10 	vmov	r5, s0
 800e260:	dc33      	bgt.n	800e2ca <floor+0x82>
 800e262:	2b00      	cmp	r3, #0
 800e264:	da17      	bge.n	800e296 <floor+0x4e>
 800e266:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e328 <floor+0xe0>
 800e26a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e26e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e276:	dd09      	ble.n	800e28c <floor+0x44>
 800e278:	2900      	cmp	r1, #0
 800e27a:	da50      	bge.n	800e31e <floor+0xd6>
 800e27c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e280:	4a2b      	ldr	r2, [pc, #172]	; (800e330 <floor+0xe8>)
 800e282:	4303      	orrs	r3, r0
 800e284:	2000      	movs	r0, #0
 800e286:	4283      	cmp	r3, r0
 800e288:	bf18      	it	ne
 800e28a:	4611      	movne	r1, r2
 800e28c:	460b      	mov	r3, r1
 800e28e:	4602      	mov	r2, r0
 800e290:	ec43 2b10 	vmov	d0, r2, r3
 800e294:	e020      	b.n	800e2d8 <floor+0x90>
 800e296:	4a27      	ldr	r2, [pc, #156]	; (800e334 <floor+0xec>)
 800e298:	411a      	asrs	r2, r3
 800e29a:	ea01 0402 	and.w	r4, r1, r2
 800e29e:	4304      	orrs	r4, r0
 800e2a0:	d01a      	beq.n	800e2d8 <floor+0x90>
 800e2a2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e328 <floor+0xe0>
 800e2a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e2aa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b2:	ddeb      	ble.n	800e28c <floor+0x44>
 800e2b4:	2900      	cmp	r1, #0
 800e2b6:	bfbe      	ittt	lt
 800e2b8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e2bc:	fa40 f303 	asrlt.w	r3, r0, r3
 800e2c0:	18c9      	addlt	r1, r1, r3
 800e2c2:	ea21 0102 	bic.w	r1, r1, r2
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	e7e0      	b.n	800e28c <floor+0x44>
 800e2ca:	2b33      	cmp	r3, #51	; 0x33
 800e2cc:	dd05      	ble.n	800e2da <floor+0x92>
 800e2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2d2:	d101      	bne.n	800e2d8 <floor+0x90>
 800e2d4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e2d8:	bd30      	pop	{r4, r5, pc}
 800e2da:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e2de:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e2:	40e2      	lsrs	r2, r4
 800e2e4:	4202      	tst	r2, r0
 800e2e6:	d0f7      	beq.n	800e2d8 <floor+0x90>
 800e2e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e328 <floor+0xe0>
 800e2ec:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e2f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f8:	ddc8      	ble.n	800e28c <floor+0x44>
 800e2fa:	2900      	cmp	r1, #0
 800e2fc:	da02      	bge.n	800e304 <floor+0xbc>
 800e2fe:	2b14      	cmp	r3, #20
 800e300:	d103      	bne.n	800e30a <floor+0xc2>
 800e302:	3101      	adds	r1, #1
 800e304:	ea20 0002 	bic.w	r0, r0, r2
 800e308:	e7c0      	b.n	800e28c <floor+0x44>
 800e30a:	2401      	movs	r4, #1
 800e30c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e310:	fa04 f303 	lsl.w	r3, r4, r3
 800e314:	4418      	add	r0, r3
 800e316:	42a8      	cmp	r0, r5
 800e318:	bf38      	it	cc
 800e31a:	1909      	addcc	r1, r1, r4
 800e31c:	e7f2      	b.n	800e304 <floor+0xbc>
 800e31e:	2000      	movs	r0, #0
 800e320:	4601      	mov	r1, r0
 800e322:	e7b3      	b.n	800e28c <floor+0x44>
 800e324:	f3af 8000 	nop.w
 800e328:	8800759c 	.word	0x8800759c
 800e32c:	7e37e43c 	.word	0x7e37e43c
 800e330:	bff00000 	.word	0xbff00000
 800e334:	000fffff 	.word	0x000fffff

0800e338 <scalbn>:
 800e338:	b500      	push	{lr}
 800e33a:	ed2d 8b02 	vpush	{d8}
 800e33e:	b083      	sub	sp, #12
 800e340:	ed8d 0b00 	vstr	d0, [sp]
 800e344:	9b01      	ldr	r3, [sp, #4]
 800e346:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e34a:	b9a2      	cbnz	r2, 800e376 <scalbn+0x3e>
 800e34c:	9a00      	ldr	r2, [sp, #0]
 800e34e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e352:	4313      	orrs	r3, r2
 800e354:	d03a      	beq.n	800e3cc <scalbn+0x94>
 800e356:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e410 <scalbn+0xd8>
 800e35a:	4b35      	ldr	r3, [pc, #212]	; (800e430 <scalbn+0xf8>)
 800e35c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e360:	4298      	cmp	r0, r3
 800e362:	ed8d 7b00 	vstr	d7, [sp]
 800e366:	da11      	bge.n	800e38c <scalbn+0x54>
 800e368:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e418 <scalbn+0xe0>
 800e36c:	ed9d 6b00 	vldr	d6, [sp]
 800e370:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e374:	e007      	b.n	800e386 <scalbn+0x4e>
 800e376:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e37a:	428a      	cmp	r2, r1
 800e37c:	d10a      	bne.n	800e394 <scalbn+0x5c>
 800e37e:	ed9d 7b00 	vldr	d7, [sp]
 800e382:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e386:	ed8d 7b00 	vstr	d7, [sp]
 800e38a:	e01f      	b.n	800e3cc <scalbn+0x94>
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e392:	3a36      	subs	r2, #54	; 0x36
 800e394:	4402      	add	r2, r0
 800e396:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e39a:	428a      	cmp	r2, r1
 800e39c:	dd0a      	ble.n	800e3b4 <scalbn+0x7c>
 800e39e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800e420 <scalbn+0xe8>
 800e3a2:	eeb0 0b48 	vmov.f64	d0, d8
 800e3a6:	ed9d 1b00 	vldr	d1, [sp]
 800e3aa:	f000 f91c 	bl	800e5e6 <copysign>
 800e3ae:	ee20 7b08 	vmul.f64	d7, d0, d8
 800e3b2:	e7e8      	b.n	800e386 <scalbn+0x4e>
 800e3b4:	2a00      	cmp	r2, #0
 800e3b6:	dd10      	ble.n	800e3da <scalbn+0xa2>
 800e3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e3c4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e3c8:	e9cd 0100 	strd	r0, r1, [sp]
 800e3cc:	ed9d 0b00 	vldr	d0, [sp]
 800e3d0:	b003      	add	sp, #12
 800e3d2:	ecbd 8b02 	vpop	{d8}
 800e3d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3da:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e3de:	da06      	bge.n	800e3ee <scalbn+0xb6>
 800e3e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e3e4:	4298      	cmp	r0, r3
 800e3e6:	dcda      	bgt.n	800e39e <scalbn+0x66>
 800e3e8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800e418 <scalbn+0xe0>
 800e3ec:	e7d9      	b.n	800e3a2 <scalbn+0x6a>
 800e3ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3f6:	3236      	adds	r2, #54	; 0x36
 800e3f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e3fc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e400:	ec41 0b17 	vmov	d7, r0, r1
 800e404:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800e428 <scalbn+0xf0>
 800e408:	e7b2      	b.n	800e370 <scalbn+0x38>
 800e40a:	bf00      	nop
 800e40c:	f3af 8000 	nop.w
 800e410:	00000000 	.word	0x00000000
 800e414:	43500000 	.word	0x43500000
 800e418:	c2f8f359 	.word	0xc2f8f359
 800e41c:	01a56e1f 	.word	0x01a56e1f
 800e420:	8800759c 	.word	0x8800759c
 800e424:	7e37e43c 	.word	0x7e37e43c
 800e428:	00000000 	.word	0x00000000
 800e42c:	3c900000 	.word	0x3c900000
 800e430:	ffff3cb0 	.word	0xffff3cb0

0800e434 <atanf>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	ee10 5a10 	vmov	r5, s0
 800e43a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e43e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e442:	eef0 7a40 	vmov.f32	s15, s0
 800e446:	db0f      	blt.n	800e468 <atanf+0x34>
 800e448:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e44c:	dd04      	ble.n	800e458 <atanf+0x24>
 800e44e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e452:	eeb0 0a67 	vmov.f32	s0, s15
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e58c <atanf+0x158>
 800e45c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800e590 <atanf+0x15c>
 800e460:	2d00      	cmp	r5, #0
 800e462:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800e466:	e7f4      	b.n	800e452 <atanf+0x1e>
 800e468:	4b4a      	ldr	r3, [pc, #296]	; (800e594 <atanf+0x160>)
 800e46a:	429c      	cmp	r4, r3
 800e46c:	dc10      	bgt.n	800e490 <atanf+0x5c>
 800e46e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e472:	da0a      	bge.n	800e48a <atanf+0x56>
 800e474:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e598 <atanf+0x164>
 800e478:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e480:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e488:	dce3      	bgt.n	800e452 <atanf+0x1e>
 800e48a:	f04f 33ff 	mov.w	r3, #4294967295
 800e48e:	e013      	b.n	800e4b8 <atanf+0x84>
 800e490:	f000 f8a2 	bl	800e5d8 <fabsf>
 800e494:	4b41      	ldr	r3, [pc, #260]	; (800e59c <atanf+0x168>)
 800e496:	429c      	cmp	r4, r3
 800e498:	dc4f      	bgt.n	800e53a <atanf+0x106>
 800e49a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e49e:	429c      	cmp	r4, r3
 800e4a0:	dc41      	bgt.n	800e526 <atanf+0xf2>
 800e4a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e4a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e4aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e4b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e4be:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e5a0 <atanf+0x16c>
 800e4c2:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e5a4 <atanf+0x170>
 800e4c6:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e5a8 <atanf+0x174>
 800e4ca:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e4ce:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e4d2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e5ac <atanf+0x178>
 800e4d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e4da:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e5b0 <atanf+0x17c>
 800e4de:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e4e2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e5b4 <atanf+0x180>
 800e4e6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e4ea:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e5b8 <atanf+0x184>
 800e4ee:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e4f2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e5bc <atanf+0x188>
 800e4f6:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e4fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e5c0 <atanf+0x18c>
 800e4fe:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e502:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800e5c4 <atanf+0x190>
 800e506:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e50a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e5c8 <atanf+0x194>
 800e50e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e512:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e516:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e51a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e51e:	d121      	bne.n	800e564 <atanf+0x130>
 800e520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e524:	e795      	b.n	800e452 <atanf+0x1e>
 800e526:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e52a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e52e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e532:	2301      	movs	r3, #1
 800e534:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e538:	e7be      	b.n	800e4b8 <atanf+0x84>
 800e53a:	4b24      	ldr	r3, [pc, #144]	; (800e5cc <atanf+0x198>)
 800e53c:	429c      	cmp	r4, r3
 800e53e:	dc0b      	bgt.n	800e558 <atanf+0x124>
 800e540:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e548:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e54c:	2302      	movs	r3, #2
 800e54e:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e556:	e7af      	b.n	800e4b8 <atanf+0x84>
 800e558:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e55c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e560:	2303      	movs	r3, #3
 800e562:	e7a9      	b.n	800e4b8 <atanf+0x84>
 800e564:	4a1a      	ldr	r2, [pc, #104]	; (800e5d0 <atanf+0x19c>)
 800e566:	491b      	ldr	r1, [pc, #108]	; (800e5d4 <atanf+0x1a0>)
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	441a      	add	r2, r3
 800e56c:	440b      	add	r3, r1
 800e56e:	edd3 6a00 	vldr	s13, [r3]
 800e572:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e576:	2d00      	cmp	r5, #0
 800e578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e57c:	ed92 7a00 	vldr	s14, [r2]
 800e580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e584:	bfb8      	it	lt
 800e586:	eef1 7a67 	vneglt.f32	s15, s15
 800e58a:	e762      	b.n	800e452 <atanf+0x1e>
 800e58c:	bfc90fdb 	.word	0xbfc90fdb
 800e590:	3fc90fdb 	.word	0x3fc90fdb
 800e594:	3edfffff 	.word	0x3edfffff
 800e598:	7149f2ca 	.word	0x7149f2ca
 800e59c:	3f97ffff 	.word	0x3f97ffff
 800e5a0:	3c8569d7 	.word	0x3c8569d7
 800e5a4:	3d4bda59 	.word	0x3d4bda59
 800e5a8:	bd6ef16b 	.word	0xbd6ef16b
 800e5ac:	3d886b35 	.word	0x3d886b35
 800e5b0:	3dba2e6e 	.word	0x3dba2e6e
 800e5b4:	3e124925 	.word	0x3e124925
 800e5b8:	3eaaaaab 	.word	0x3eaaaaab
 800e5bc:	bd15a221 	.word	0xbd15a221
 800e5c0:	bd9d8795 	.word	0xbd9d8795
 800e5c4:	bde38e38 	.word	0xbde38e38
 800e5c8:	be4ccccd 	.word	0xbe4ccccd
 800e5cc:	401bffff 	.word	0x401bffff
 800e5d0:	0800ed20 	.word	0x0800ed20
 800e5d4:	0800ed30 	.word	0x0800ed30

0800e5d8 <fabsf>:
 800e5d8:	ee10 3a10 	vmov	r3, s0
 800e5dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5e0:	ee00 3a10 	vmov	s0, r3
 800e5e4:	4770      	bx	lr

0800e5e6 <copysign>:
 800e5e6:	ec51 0b10 	vmov	r0, r1, d0
 800e5ea:	ee11 0a90 	vmov	r0, s3
 800e5ee:	ee10 2a10 	vmov	r2, s0
 800e5f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e5f6:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e5fa:	ea41 0300 	orr.w	r3, r1, r0
 800e5fe:	ec43 2b10 	vmov	d0, r2, r3
 800e602:	4770      	bx	lr

0800e604 <_init>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	bf00      	nop
 800e608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60a:	bc08      	pop	{r3}
 800e60c:	469e      	mov	lr, r3
 800e60e:	4770      	bx	lr

0800e610 <_fini>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	bf00      	nop
 800e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e616:	bc08      	pop	{r3}
 800e618:	469e      	mov	lr, r3
 800e61a:	4770      	bx	lr
