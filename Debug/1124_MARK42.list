
1124_MARK42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db64  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800dd68  0800dd68  0001dd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e468  0800e468  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e468  0800e468  0001e468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e470  0800e470  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e470  0800e470  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e474  0800e474  0001e474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003d28c  200001f8  0800e670  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2003d484  0800e670  0002d484  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018568  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d29  00000000  00000000  0003878e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a588  00000000  00000000  0003ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001004b  00000000  00000000  00068348  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010120c  00000000  00000000  00078393  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017959f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006898  00000000  00000000  0017961c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800dd4c 	.word	0x0800dd4c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800dd4c 	.word	0x0800dd4c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 fa44 	bl	8000a8c <bno055_writeData>
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	203d      	movs	r0, #61	; 0x3d
 800061c:	f000 fa36 	bl	8000a8c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000626:	2013      	movs	r0, #19
 8000628:	f000 fa24 	bl	8000a74 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800062c:	e002      	b.n	8000634 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 fa20 	bl	8000a74 <bno055_delay>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffe3 	bl	800060c <bno055_setOperationMode>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800064e:	200c      	movs	r0, #12
 8000650:	f7ff ffdc 	bl	800060c <bno055_setOperationMode>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800065c:	2120      	movs	r1, #32
 800065e:	203f      	movs	r0, #63	; 0x3f
 8000660:	f000 fa14 	bl	8000a8c <bno055_writeData>
  bno055_delay(700);
 8000664:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000668:	f000 fa04 	bl	8000a74 <bno055_delay>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  bno055_reset();
 8000676:	f7ff ffef 	bl	8000658 <bno055_reset>

  uint8_t id = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	2000      	movs	r0, #0
 8000686:	f000 faed 	bl	8000c64 <bno055_readData>
  if (id != BNO055_ID) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2ba0      	cmp	r3, #160	; 0xa0
 800068e:	d004      	beq.n	800069a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <bno055_setup+0x4c>)
 8000696:	f00a fe7b 	bl	800b390 <iprintf>
  }
  bno055_setPage(0);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffa8 	bl	80005f0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	203f      	movs	r0, #63	; 0x3f
 80006a4:	f000 f9f2 	bl	8000a8c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80006a8:	f7ff ffc8 	bl	800063c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 f9e1 	bl	8000a74 <bno055_delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	0800dd68 	.word	0x0800dd68

080006c0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c4:	b09f      	sub	sp, #124	; 0x7c
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff8e 	bl	80005f0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d108      	bne.n	80006ee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e4:	2208      	movs	r2, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fabc 	bl	8000c64 <bno055_readData>
 80006ec:	e007      	b.n	80006fe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f6:	2206      	movs	r2, #6
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fab3 	bl	8000c64 <bno055_readData>

  double scale = 1;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	4c81      	ldr	r4, [pc, #516]	; (8000908 <bno055_getVector+0x248>)
 8000704:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	2b0e      	cmp	r3, #14
 800070e:	d108      	bne.n	8000722 <bno055_getVector+0x62>
    scale = magScale;
 8000710:	4b7e      	ldr	r3, [pc, #504]	; (800090c <bno055_getVector+0x24c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800071c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000720:	e03a      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000726:	2b08      	cmp	r3, #8
 8000728:	d007      	beq.n	800073a <bno055_getVector+0x7a>
 800072a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072e:	2b28      	cmp	r3, #40	; 0x28
 8000730:	d003      	beq.n	800073a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000736:	2b2e      	cmp	r3, #46	; 0x2e
 8000738:	d108      	bne.n	800074c <bno055_getVector+0x8c>
    scale = accelScale;
 800073a:	4b75      	ldr	r3, [pc, #468]	; (8000910 <bno055_getVector+0x250>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000746:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800074a:	e025      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800074c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000750:	2b14      	cmp	r3, #20
 8000752:	d108      	bne.n	8000766 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000754:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <bno055_getVector+0x254>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000760:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000764:	e018      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800076a:	2b1a      	cmp	r3, #26
 800076c:	d108      	bne.n	8000780 <bno055_getVector+0xc0>
    scale = eulerScale;
 800076e:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <bno055_getVector+0x258>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800077a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800077e:	e00b      	b.n	8000798 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000784:	2b20      	cmp	r3, #32
 8000786:	d107      	bne.n	8000798 <bno055_getVector+0xd8>
    scale = quaScale;
 8000788:	4b64      	ldr	r3, [pc, #400]	; (800091c <bno055_getVector+0x25c>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000794:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00a f9b4 	bl	800ab0e <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80007a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d14c      	bne.n	8000848 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80007ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007c8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21a      	sxth	r2, r3
 80007dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007ee:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80007f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000814:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000818:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800082c:	b21b      	sxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b21b      	sxth	r3, r3
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800083a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800083e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000842:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000846:	e038      	b.n	80008ba <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000848:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000862:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000866:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800086e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800087a:	b21b      	sxth	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b21b      	sxth	r3, r3
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000888:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800088c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000890:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000894:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008ae:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80008b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80008ba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80008be:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80008d2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80008d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80008da:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80008de:	ec49 8b14 	vmov	d4, r8, r9
 80008e2:	ec46 5b15 	vmov	d5, r5, r6
 80008e6:	ec42 1b16 	vmov	d6, r1, r2
 80008ea:	ec44 3b17 	vmov	d7, r3, r4
}
 80008ee:	eeb0 0b44 	vmov.f64	d0, d4
 80008f2:	eeb0 1b45 	vmov.f64	d1, d5
 80008f6:	eeb0 2b46 	vmov.f64	d2, d6
 80008fa:	eeb0 3b47 	vmov.f64	d3, d7
 80008fe:	377c      	adds	r7, #124	; 0x7c
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000906:	bf00      	nop
 8000908:	3ff00000 	.word	0x3ff00000
 800090c:	20000006 	.word	0x20000006
 8000910:	20000000 	.word	0x20000000
 8000914:	20000002 	.word	0x20000002
 8000918:	20000004 	.word	0x20000004
 800091c:	20000008 	.word	0x20000008

08000920 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8000920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000924:	b091      	sub	sp, #68	; 0x44
 8000926:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff fec9 	bl	80006c0 <bno055_getVector>
 800092e:	eeb0 4b40 	vmov.f64	d4, d0
 8000932:	eeb0 5b41 	vmov.f64	d5, d1
 8000936:	eeb0 6b42 	vmov.f64	d6, d2
 800093a:	eeb0 7b43 	vmov.f64	d7, d3
 800093e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000942:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000946:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800094a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800094e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000952:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000956:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800095a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800095e:	ec49 8b14 	vmov	d4, r8, r9
 8000962:	ec46 5b15 	vmov	d5, r5, r6
 8000966:	ec42 1b16 	vmov	d6, r1, r2
 800096a:	ec44 3b17 	vmov	d7, r3, r4
}
 800096e:	eeb0 0b44 	vmov.f64	d0, d4
 8000972:	eeb0 1b45 	vmov.f64	d1, d5
 8000976:	eeb0 2b46 	vmov.f64	d2, d6
 800097a:	eeb0 3b47 	vmov.f64	d3, d7
 800097e:	3744      	adds	r7, #68	; 0x44
 8000980:	46bd      	mov	sp, r7
 8000982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000986 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8000986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098a:	b091      	sub	sp, #68	; 0x44
 800098c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800098e:	2014      	movs	r0, #20
 8000990:	f7ff fe96 	bl	80006c0 <bno055_getVector>
 8000994:	eeb0 4b40 	vmov.f64	d4, d0
 8000998:	eeb0 5b41 	vmov.f64	d5, d1
 800099c:	eeb0 6b42 	vmov.f64	d6, d2
 80009a0:	eeb0 7b43 	vmov.f64	d7, d3
 80009a4:	ed87 4b08 	vstr	d4, [r7, #32]
 80009a8:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80009ac:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80009b0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80009b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80009b8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80009bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80009c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80009c4:	ec49 8b14 	vmov	d4, r8, r9
 80009c8:	ec46 5b15 	vmov	d5, r5, r6
 80009cc:	ec42 1b16 	vmov	d6, r1, r2
 80009d0:	ec44 3b17 	vmov	d7, r3, r4
}
 80009d4:	eeb0 0b44 	vmov.f64	d0, d4
 80009d8:	eeb0 1b45 	vmov.f64	d1, d5
 80009dc:	eeb0 2b46 	vmov.f64	d2, d6
 80009e0:	eeb0 3b47 	vmov.f64	d3, d7
 80009e4:	3744      	adds	r7, #68	; 0x44
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080009ec <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80009ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009f0:	b091      	sub	sp, #68	; 0x44
 80009f2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80009f4:	201a      	movs	r0, #26
 80009f6:	f7ff fe63 	bl	80006c0 <bno055_getVector>
 80009fa:	eeb0 4b40 	vmov.f64	d4, d0
 80009fe:	eeb0 5b41 	vmov.f64	d5, d1
 8000a02:	eeb0 6b42 	vmov.f64	d6, d2
 8000a06:	eeb0 7b43 	vmov.f64	d7, d3
 8000a0a:	ed87 4b08 	vstr	d4, [r7, #32]
 8000a0e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000a12:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000a16:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000a1a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000a1e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000a22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000a26:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000a2a:	ec49 8b14 	vmov	d4, r8, r9
 8000a2e:	ec46 5b15 	vmov	d5, r5, r6
 8000a32:	ec42 1b16 	vmov	d6, r1, r2
 8000a36:	ec44 3b17 	vmov	d7, r3, r4
}
 8000a3a:	eeb0 0b44 	vmov.f64	d0, d4
 8000a3e:	eeb0 1b45 	vmov.f64	d1, d5
 8000a42:	eeb0 2b46 	vmov.f64	d2, d6
 8000a46:	eeb0 3b47 	vmov.f64	d3, d7
 8000a4a:	3744      	adds	r7, #68	; 0x44
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000a54 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <bno055_assignI2C+0x1c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2003d2b0 	.word	0x2003d2b0

08000a74 <bno055_delay>:

void bno055_delay(int time) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fcc8 	bl	8006414 <HAL_Delay>
#endif
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	733b      	strb	r3, [r7, #12]
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <bno055_writeData+0x184>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	230a      	movs	r3, #10
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2150      	movs	r1, #80	; 0x50
 8000ab4:	f006 f84e 	bl	8006b54 <HAL_I2C_Master_Transmit>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80a0 	beq.w	8000c04 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d103      	bne.n	8000ad2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000aca:	4852      	ldr	r0, [pc, #328]	; (8000c14 <bno055_writeData+0x188>)
 8000acc:	f00a fcd4 	bl	800b478 <puts>
 8000ad0:	e012      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d103      	bne.n	8000ae0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ad8:	484f      	ldr	r0, [pc, #316]	; (8000c18 <bno055_writeData+0x18c>)
 8000ada:	f00a fccd 	bl	800b478 <puts>
 8000ade:	e00b      	b.n	8000af8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d103      	bne.n	8000aee <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ae6:	484d      	ldr	r0, [pc, #308]	; (8000c1c <bno055_writeData+0x190>)
 8000ae8:	f00a fcc6 	bl	800b478 <puts>
 8000aec:	e004      	b.n	8000af8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	4619      	mov	r1, r3
 8000af2:	484b      	ldr	r0, [pc, #300]	; (8000c20 <bno055_writeData+0x194>)
 8000af4:	f00a fc4c 	bl	800b390 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <bno055_writeData+0x184>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fa21 	bl	8006f44 <HAL_I2C_GetError>
 8000b02:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d07e      	beq.n	8000c08 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d103      	bne.n	8000b18 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000b10:	4844      	ldr	r0, [pc, #272]	; (8000c24 <bno055_writeData+0x198>)
 8000b12:	f00a fcb1 	bl	800b478 <puts>
 8000b16:	e021      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d103      	bne.n	8000b26 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <bno055_writeData+0x19c>)
 8000b20:	f00a fcaa 	bl	800b478 <puts>
 8000b24:	e01a      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d103      	bne.n	8000b34 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000b2c:	483f      	ldr	r0, [pc, #252]	; (8000c2c <bno055_writeData+0x1a0>)
 8000b2e:	f00a fca3 	bl	800b478 <puts>
 8000b32:	e013      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d103      	bne.n	8000b42 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000b3a:	483d      	ldr	r0, [pc, #244]	; (8000c30 <bno055_writeData+0x1a4>)
 8000b3c:	f00a fc9c 	bl	800b478 <puts>
 8000b40:	e00c      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b10      	cmp	r3, #16
 8000b46:	d103      	bne.n	8000b50 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <bno055_writeData+0x1a8>)
 8000b4a:	f00a fc95 	bl	800b478 <puts>
 8000b4e:	e005      	b.n	8000b5c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	d102      	bne.n	8000b5c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000b56:	4838      	ldr	r0, [pc, #224]	; (8000c38 <bno055_writeData+0x1ac>)
 8000b58:	f00a fc8e 	bl	800b478 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <bno055_writeData+0x184>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f006 f9e1 	bl	8006f28 <HAL_I2C_GetState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b70:	4832      	ldr	r0, [pc, #200]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b72:	f00a fc81 	bl	800b478 <puts>
 8000b76:	e048      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d103      	bne.n	8000b86 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <bno055_writeData+0x1b0>)
 8000b80:	f00a fc7a 	bl	800b478 <puts>
 8000b84:	e041      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b24      	cmp	r3, #36	; 0x24
 8000b8a:	d103      	bne.n	8000b94 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000b8c:	482c      	ldr	r0, [pc, #176]	; (8000c40 <bno055_writeData+0x1b4>)
 8000b8e:	f00a fc73 	bl	800b478 <puts>
 8000b92:	e03a      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b21      	cmp	r3, #33	; 0x21
 8000b98:	d103      	bne.n	8000ba2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000b9a:	482a      	ldr	r0, [pc, #168]	; (8000c44 <bno055_writeData+0x1b8>)
 8000b9c:	f00a fc6c 	bl	800b478 <puts>
 8000ba0:	e033      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b22      	cmp	r3, #34	; 0x22
 8000ba6:	d103      	bne.n	8000bb0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ba8:	4827      	ldr	r0, [pc, #156]	; (8000c48 <bno055_writeData+0x1bc>)
 8000baa:	f00a fc65 	bl	800b478 <puts>
 8000bae:	e02c      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b28      	cmp	r3, #40	; 0x28
 8000bb4:	d103      	bne.n	8000bbe <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <bno055_writeData+0x1c0>)
 8000bb8:	f00a fc5e 	bl	800b478 <puts>
 8000bbc:	e025      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b29      	cmp	r3, #41	; 0x29
 8000bc2:	d103      	bne.n	8000bcc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <bno055_writeData+0x1c4>)
 8000bc6:	f00a fc57 	bl	800b478 <puts>
 8000bca:	e01e      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd0:	d103      	bne.n	8000bda <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <bno055_writeData+0x1c8>)
 8000bd4:	f00a fc50 	bl	800b478 <puts>
 8000bd8:	e017      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b60      	cmp	r3, #96	; 0x60
 8000bde:	d103      	bne.n	8000be8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000be0:	481d      	ldr	r0, [pc, #116]	; (8000c58 <bno055_writeData+0x1cc>)
 8000be2:	f00a fc49 	bl	800b478 <puts>
 8000be6:	e010      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2ba0      	cmp	r3, #160	; 0xa0
 8000bec:	d103      	bne.n	8000bf6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <bno055_writeData+0x1d0>)
 8000bf0:	f00a fc42 	bl	800b478 <puts>
 8000bf4:	e009      	b.n	8000c0a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2be0      	cmp	r3, #224	; 0xe0
 8000bfa:	d106      	bne.n	8000c0a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <bno055_writeData+0x1d4>)
 8000bfe:	f00a fc3b 	bl	800b478 <puts>
 8000c02:	e002      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <bno055_writeData+0x17e>
    return;
 8000c08:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2003d2b0 	.word	0x2003d2b0
 8000c14:	0800dda4 	.word	0x0800dda4
 8000c18:	0800ddc8 	.word	0x0800ddc8
 8000c1c:	0800ddf0 	.word	0x0800ddf0
 8000c20:	0800de14 	.word	0x0800de14
 8000c24:	0800de2c 	.word	0x0800de2c
 8000c28:	0800de40 	.word	0x0800de40
 8000c2c:	0800de54 	.word	0x0800de54
 8000c30:	0800de68 	.word	0x0800de68
 8000c34:	0800de7c 	.word	0x0800de7c
 8000c38:	0800de90 	.word	0x0800de90
 8000c3c:	0800dea8 	.word	0x0800dea8
 8000c40:	0800dec0 	.word	0x0800dec0
 8000c44:	0800ded4 	.word	0x0800ded4
 8000c48:	0800deec 	.word	0x0800deec
 8000c4c:	0800df04 	.word	0x0800df04
 8000c50:	0800df1c 	.word	0x0800df1c
 8000c54:	0800df3c 	.word	0x0800df3c
 8000c58:	0800df5c 	.word	0x0800df5c
 8000c5c:	0800df74 	.word	0x0800df74
 8000c60:	0800df8c 	.word	0x0800df8c

08000c64 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <bno055_readData+0x40>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	1dfa      	adds	r2, r7, #7
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2150      	movs	r1, #80	; 0x50
 8000c82:	f005 ff67 	bl	8006b54 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <bno055_readData+0x40>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4613      	mov	r3, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	2150      	movs	r1, #80	; 0x50
 8000c98:	f006 f850 	bl	8006d3c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2003d2b0 	.word	0x2003d2b0

08000ca8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <__io_putchar+0x20>)
 8000cba:	f008 ffa5 	bl	8009c08 <HAL_UART_Transmit>

  return ch;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2003cde0 	.word	0x2003cde0
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	ed2d 8b06 	vpush	{d8-d10}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	f043 8493 	bne.w	800460e <HAL_TIM_PeriodElapsedCallback+0x393e>
		// TIM2 task
    switch(mode){
 8000ce8:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d031      	beq.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	f003 848b 	beq.w	800460c <HAL_TIM_PeriodElapsedCallback+0x393c>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x2e>

        break;
    }

		}
}
 8000cfa:	f003 bc88 	b.w	800460e <HAL_TIM_PeriodElapsedCallback+0x393e>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2101      	movs	r1, #1
 8000d02:	4860      	ldr	r0, [pc, #384]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d04:	f005 fe64 	bl	80069d0 <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 8000d08:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d0e:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000d10:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d16:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8000d18:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d1e:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000d20:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d26:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8000d28:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000d32:	4b56      	ldr	r3, [pc, #344]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000d50:	f003 bc5d 	b.w	800460e <HAL_TIM_PeriodElapsedCallback+0x393e>
        cnt1 = TIM1->CNT;
 8000d54:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d5c:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d66:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d70:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d7a:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 8000d7c:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d8c:	dd09      	ble.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d90:	f993 3000 	ldrsb.w	r3, [r3]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3b01      	subs	r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e011      	b.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db2:	dd08      	ble.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000db6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000dc4:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dd6:	dd09      	ble.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000dda:	f993 3000 	ldrsb.w	r3, [r3]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e011      	b.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x140>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dfc:	dd08      	ble.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e00:	f993 3000 	ldrsb.w	r3, [r3]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b25a      	sxtb	r2, r3
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e0e:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e20:	dd09      	ble.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x166>
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e24:	f993 3000 	ldrsb.w	r3, [r3]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e011      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x18a>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e46:	dd08      	ble.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x18a>
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e58:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e6a:	dd39      	ble.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x210>
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e041      	b.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000e80:	2000021a 	.word	0x2000021a
 8000e84:	40020400 	.word	0x40020400
 8000e88:	200002e8 	.word	0x200002e8
 8000e8c:	200002ea 	.word	0x200002ea
 8000e90:	200002ec 	.word	0x200002ec
 8000e94:	200002ee 	.word	0x200002ee
 8000e98:	2003d2b4 	.word	0x2003d2b4
 8000e9c:	2003d398 	.word	0x2003d398
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	2000021e 	.word	0x2000021e
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	20000220 	.word	0x20000220
 8000eb0:	40010400 	.word	0x40010400
 8000eb4:	20000222 	.word	0x20000222
 8000eb8:	40000800 	.word	0x40000800
 8000ebc:	20000224 	.word	0x20000224
 8000ec0:	20000226 	.word	0x20000226
 8000ec4:	2000022e 	.word	0x2000022e
 8000ec8:	20000228 	.word	0x20000228
 8000ecc:	2000022f 	.word	0x2000022f
 8000ed0:	2000022a 	.word	0x2000022a
 8000ed4:	20000230 	.word	0x20000230
 8000ed8:	2000022c 	.word	0x2000022c
 8000edc:	20000231 	.word	0x20000231
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000ee0:	4bdb      	ldr	r3, [pc, #876]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4bdb      	ldr	r3, [pc, #876]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef0:	dd08      	ble.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000ef2:	4bd9      	ldr	r3, [pc, #868]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	4bd5      	ldr	r3, [pc, #852]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000f02:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000f04:	4bd5      	ldr	r3, [pc, #852]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4bd5      	ldr	r3, [pc, #852]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	1ad2      	subs	r2, r2, r3
 8000f12:	4bd4      	ldr	r3, [pc, #848]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000f14:	f993 3000 	ldrsb.w	r3, [r3]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4413      	add	r3, r2
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f24:	4bd0      	ldr	r3, [pc, #832]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f36:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000f3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f46:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f52:	4bc6      	ldr	r3, [pc, #792]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000f58:	4bc5      	ldr	r3, [pc, #788]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4bc0      	ldr	r3, [pc, #768]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	4bc3      	ldr	r3, [pc, #780]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f68:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	4413      	add	r3, r2
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f78:	4bbb      	ldr	r3, [pc, #748]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8a:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000f8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f9a:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa6:	4bb4      	ldr	r3, [pc, #720]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000fac:	4bb3      	ldr	r3, [pc, #716]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4bab      	ldr	r3, [pc, #684]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	4bb1      	ldr	r3, [pc, #708]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	4413      	add	r3, r2
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000fda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fde:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000fe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fee:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8000ff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ff6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8001000:	4b94      	ldr	r3, [pc, #592]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001010:	f993 3000 	ldrsb.w	r3, [r3]
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	4413      	add	r3, r2
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001020:	4b91      	ldr	r3, [pc, #580]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800102e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001032:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x568>
 8001036:	ee27 6b06 	vmul.f64	d6, d7, d6
 800103a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800103e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001042:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800104a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800104e:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
        yaw   = Euler.x;// [degree]
 8001054:	4b8d      	ldr	r3, [pc, #564]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001056:	ed93 7b02 	vldr	d7, [r3, #8]
 800105a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105e:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001060:	edc3 7a00 	vstr	s15, [r3]
        roll  = Euler.y;
 8001064:	4b89      	ldr	r3, [pc, #548]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001066:	ed93 7b04 	vldr	d7, [r3, #16]
 800106a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
        pitch = Euler.z;
 8001074:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001076:	ed93 7b06 	vldr	d7, [r3, #24]
 800107a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800107e:	4b86      	ldr	r3, [pc, #536]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate   = Gyro.z;// [dps : degree/sec]
 8001084:	4b85      	ldr	r3, [pc, #532]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001086:	ed93 7b06 	vldr	d7, [r3, #24]
 800108a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108e:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
        roll_rate  = Gyro.y;//Gyro.x;
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001096:	ed93 7b04 	vldr	d7, [r3, #16]
 800109a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109e:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80010a0:	edc3 7a00 	vstr	s15, [r3]
        pitch_rate = Gyro.x;//Gyro.y;
 80010a4:	4b7d      	ldr	r3, [pc, #500]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80010a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80010aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ae:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
        Acc_x = -Acc.x;// Adjust these values to Vehicle coordinate system of modeling
 80010b4:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80010ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010be:	eef1 7a67 	vneg.f32	s15, s15
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
        Acc_y = -Acc.y;// Direction is opposite, due to inertial force
 80010c8:	4b78      	ldr	r3, [pc, #480]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010ca:	ed93 7b04 	vldr	d7, [r3, #16]
 80010ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d2:	eef1 7a67 	vneg.f32	s15, s15
 80010d6:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
        Acc_z = -Acc.z;// Add minus - : as of 2021/01/09
 80010dc:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80010de:	ed93 7b06 	vldr	d7, [r3, #24]
 80010e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e6:	eef1 7a67 	vneg.f32	s15, s15
 80010ea:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
        yaw   = yaw   * 2.0 * pi / 360.0;// [rad] Convert degree to rad
 80010f0:	4b67      	ldr	r3, [pc, #412]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010fe:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001102:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001106:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800110a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
        roll  = roll  * 2.0 * pi / 360.0;
 8001118:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001122:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001126:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 800112a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800112e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 8001132:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001136:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
        pitch = pitch * 2.0 * pi / 360.0;
 8001140:	4b55      	ldr	r3, [pc, #340]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800114e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x570>
 8001152:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001156:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0x578>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001162:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001164:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_correct = cos(roll)*cos(pitch)                                *Acc_x + sin(roll)*cos(pitch)                                *Acc_y - sin(pitch)         *Acc_z;
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001172:	eeb0 0b47 	vmov.f64	d0, d7
 8001176:	f00b ffc3 	bl	800d100 <cos>
 800117a:	eeb0 8b40 	vmov.f64	d8, d0
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001188:	eeb0 0b47 	vmov.f64	d0, d7
 800118c:	f00b ffb8 	bl	800d100 <cos>
 8001190:	eeb0 7b40 	vmov.f64	d7, d0
 8001194:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b0:	eeb0 0b47 	vmov.f64	d0, d7
 80011b4:	f00b ffe0 	bl	800d178 <sin>
 80011b8:	eeb0 9b40 	vmov.f64	d9, d0
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c6:	eeb0 0b47 	vmov.f64	d0, d7
 80011ca:	f00b ff99 	bl	800d100 <cos>
 80011ce:	eeb0 7b40 	vmov.f64	d7, d0
 80011d2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011e4:	ee38 8b07 	vadd.f64	d8, d8, d7
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f2:	eeb0 0b47 	vmov.f64	d0, d7
 80011f6:	f00b ffbf 	bl	800d178 <sin>
 80011fa:	eeb0 6b40 	vmov.f64	d6, d0
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001208:	ee26 7b07 	vmul.f64	d7, d6, d7
 800120c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001210:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001216:	edc3 7a00 	vstr	s15, [r3]
        Acc_y_correct = ( cos(roll)*sin(pitch)*sin(yaw)-sin(roll)*cos(yaw) )*Acc_x + ( sin(roll)*sin(pitch)*sin(yaw)+cos(roll)*cos(yaw) )*Acc_y + cos(pitch)*sin(yaw)*Acc_z;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001224:	eeb0 0b47 	vmov.f64	d0, d7
 8001228:	f00b ff6a 	bl	800d100 <cos>
 800122c:	eeb0 8b40 	vmov.f64	d8, d0
 8001230:	e046      	b.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	40500000 	.word	0x40500000
 8001240:	60000000 	.word	0x60000000
 8001244:	400921fb 	.word	0x400921fb
 8001248:	00000000 	.word	0x00000000
 800124c:	40768000 	.word	0x40768000
 8001250:	2000022c 	.word	0x2000022c
 8001254:	20000224 	.word	0x20000224
 8001258:	20000231 	.word	0x20000231
 800125c:	2000021e 	.word	0x2000021e
 8001260:	2000000a 	.word	0x2000000a
 8001264:	2000022e 	.word	0x2000022e
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000238 	.word	0x20000238
 8001270:	20000220 	.word	0x20000220
 8001274:	2000022f 	.word	0x2000022f
 8001278:	2000023c 	.word	0x2000023c
 800127c:	20000222 	.word	0x20000222
 8001280:	20000230 	.word	0x20000230
 8001284:	20000240 	.word	0x20000240
 8001288:	20000244 	.word	0x20000244
 800128c:	2003d338 	.word	0x2003d338
 8001290:	200003bc 	.word	0x200003bc
 8001294:	200003c0 	.word	0x200003c0
 8001298:	200003c4 	.word	0x200003c4
 800129c:	2003d438 	.word	0x2003d438
 80012a0:	200003d0 	.word	0x200003d0
 80012a4:	200003d4 	.word	0x200003d4
 80012a8:	200003d8 	.word	0x200003d8
 80012ac:	2003d3d8 	.word	0x2003d3d8
 80012b0:	200003f8 	.word	0x200003f8
 80012b4:	200003fc 	.word	0x200003fc
 80012b8:	20000400 	.word	0x20000400
 80012bc:	20000404 	.word	0x20000404
 80012c0:	4bea      	ldr	r3, [pc, #936]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ca:	eeb0 0b47 	vmov.f64	d0, d7
 80012ce:	f00b ff53 	bl	800d178 <sin>
 80012d2:	eeb0 7b40 	vmov.f64	d7, d0
 80012d6:	ee28 8b07 	vmul.f64	d8, d8, d7
 80012da:	4be5      	ldr	r3, [pc, #916]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e4:	eeb0 0b47 	vmov.f64	d0, d7
 80012e8:	f00b ff46 	bl	800d178 <sin>
 80012ec:	eeb0 7b40 	vmov.f64	d7, d0
 80012f0:	ee28 8b07 	vmul.f64	d8, d8, d7
 80012f4:	4bdf      	ldr	r3, [pc, #892]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fe:	eeb0 0b47 	vmov.f64	d0, d7
 8001302:	f00b ff39 	bl	800d178 <sin>
 8001306:	eeb0 9b40 	vmov.f64	d9, d0
 800130a:	4bd9      	ldr	r3, [pc, #868]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001314:	eeb0 0b47 	vmov.f64	d0, d7
 8001318:	f00b fef2 	bl	800d100 <cos>
 800131c:	eeb0 7b40 	vmov.f64	d7, d0
 8001320:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001324:	ee38 6b47 	vsub.f64	d6, d8, d7
 8001328:	4bd3      	ldr	r3, [pc, #844]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001332:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001336:	4bcf      	ldr	r3, [pc, #828]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001340:	eeb0 0b47 	vmov.f64	d0, d7
 8001344:	f00b ff18 	bl	800d178 <sin>
 8001348:	eeb0 9b40 	vmov.f64	d9, d0
 800134c:	4bc7      	ldr	r3, [pc, #796]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001356:	eeb0 0b47 	vmov.f64	d0, d7
 800135a:	f00b ff0d 	bl	800d178 <sin>
 800135e:	eeb0 7b40 	vmov.f64	d7, d0
 8001362:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001366:	4bc2      	ldr	r3, [pc, #776]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001370:	eeb0 0b47 	vmov.f64	d0, d7
 8001374:	f00b ff00 	bl	800d178 <sin>
 8001378:	eeb0 7b40 	vmov.f64	d7, d0
 800137c:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001380:	4bbc      	ldr	r3, [pc, #752]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800138a:	eeb0 0b47 	vmov.f64	d0, d7
 800138e:	f00b feb7 	bl	800d100 <cos>
 8001392:	eeb0 ab40 	vmov.f64	d10, d0
 8001396:	4bb6      	ldr	r3, [pc, #728]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a0:	eeb0 0b47 	vmov.f64	d0, d7
 80013a4:	f00b feac 	bl	800d100 <cos>
 80013a8:	eeb0 7b40 	vmov.f64	d7, d0
 80013ac:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80013b0:	ee39 6b07 	vadd.f64	d6, d9, d7
 80013b4:	4bb1      	ldr	r3, [pc, #708]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013c2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80013c6:	4ba9      	ldr	r3, [pc, #676]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d0:	eeb0 0b47 	vmov.f64	d0, d7
 80013d4:	f00b fe94 	bl	800d100 <cos>
 80013d8:	eeb0 9b40 	vmov.f64	d9, d0
 80013dc:	4ba4      	ldr	r3, [pc, #656]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e6:	eeb0 0b47 	vmov.f64	d0, d7
 80013ea:	f00b fec5 	bl	800d178 <sin>
 80013ee:	eeb0 7b40 	vmov.f64	d7, d0
 80013f2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80013f6:	4ba2      	ldr	r3, [pc, #648]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001400:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001404:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001408:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800140c:	4b9d      	ldr	r3, [pc, #628]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800140e:	edc3 7a00 	vstr	s15, [r3]
        Acc_z_correct = ( cos(roll)*sin(pitch)*cos(yaw)+sin(roll)*sin(yaw) )*Acc_x + ( sin(roll)*sin(pitch)*cos(yaw)-cos(roll)*sin(yaw) )*Acc_y + cos(pitch)*cos(yaw)*Acc_z;
 8001412:	4b98      	ldr	r3, [pc, #608]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800141c:	eeb0 0b47 	vmov.f64	d0, d7
 8001420:	f00b fe6e 	bl	800d100 <cos>
 8001424:	eeb0 8b40 	vmov.f64	d8, d0
 8001428:	4b90      	ldr	r3, [pc, #576]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001432:	eeb0 0b47 	vmov.f64	d0, d7
 8001436:	f00b fe9f 	bl	800d178 <sin>
 800143a:	eeb0 7b40 	vmov.f64	d7, d0
 800143e:	ee28 8b07 	vmul.f64	d8, d8, d7
 8001442:	4b8b      	ldr	r3, [pc, #556]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800144c:	eeb0 0b47 	vmov.f64	d0, d7
 8001450:	f00b fe56 	bl	800d100 <cos>
 8001454:	eeb0 7b40 	vmov.f64	d7, d0
 8001458:	ee28 8b07 	vmul.f64	d8, d8, d7
 800145c:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001466:	eeb0 0b47 	vmov.f64	d0, d7
 800146a:	f00b fe85 	bl	800d178 <sin>
 800146e:	eeb0 9b40 	vmov.f64	d9, d0
 8001472:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147c:	eeb0 0b47 	vmov.f64	d0, d7
 8001480:	f00b fe7a 	bl	800d178 <sin>
 8001484:	eeb0 7b40 	vmov.f64	d7, d0
 8001488:	ee29 7b07 	vmul.f64	d7, d9, d7
 800148c:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001490:	4b79      	ldr	r3, [pc, #484]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800149a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800149e:	4b75      	ldr	r3, [pc, #468]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a8:	eeb0 0b47 	vmov.f64	d0, d7
 80014ac:	f00b fe64 	bl	800d178 <sin>
 80014b0:	eeb0 9b40 	vmov.f64	d9, d0
 80014b4:	4b6d      	ldr	r3, [pc, #436]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014be:	eeb0 0b47 	vmov.f64	d0, d7
 80014c2:	f00b fe59 	bl	800d178 <sin>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	ee29 9b07 	vmul.f64	d9, d9, d7
 80014ce:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d8:	eeb0 0b47 	vmov.f64	d0, d7
 80014dc:	f00b fe10 	bl	800d100 <cos>
 80014e0:	eeb0 7b40 	vmov.f64	d7, d0
 80014e4:	ee29 9b07 	vmul.f64	d9, d9, d7
 80014e8:	4b62      	ldr	r3, [pc, #392]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f2:	eeb0 0b47 	vmov.f64	d0, d7
 80014f6:	f00b fe03 	bl	800d100 <cos>
 80014fa:	eeb0 ab40 	vmov.f64	d10, d0
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001508:	eeb0 0b47 	vmov.f64	d0, d7
 800150c:	f00b fe34 	bl	800d178 <sin>
 8001510:	eeb0 7b40 	vmov.f64	d7, d0
 8001514:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001518:	ee39 6b47 	vsub.f64	d6, d9, d7
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001526:	ee26 7b07 	vmul.f64	d7, d6, d7
 800152a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001538:	eeb0 0b47 	vmov.f64	d0, d7
 800153c:	f00b fde0 	bl	800d100 <cos>
 8001540:	eeb0 9b40 	vmov.f64	d9, d0
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154e:	eeb0 0b47 	vmov.f64	d0, d7
 8001552:	f00b fdd5 	bl	800d100 <cos>
 8001556:	eeb0 7b40 	vmov.f64	d7, d0
 800155a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800155e:	4b48      	ldr	r3, [pc, #288]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001568:	ee26 7b07 	vmul.f64	d7, d6, d7
 800156c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001570:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001574:	4b44      	ldr	r3, [pc, #272]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001576:	edc3 7a00 	vstr	s15, [r3]
        Acc_x_LPF = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * Acc_x_LPF_pre + G_LPF_acc * dt * ( Acc_x_correct + Acc_x_correct_pre ) );// LPF
 800157a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>
 800157e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800158e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001592:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001596:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800159a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>
 800159e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80015ae:	ee35 5b47 	vsub.f64	d5, d5, d7
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80015c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>
 80015c4:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 80015c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80015ce:	edd3 4a00 	vldr	s9, [r3]
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee74 7aa7 	vadd.f32	s15, s9, s15
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
        Acc_y_LPF = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * Acc_y_LPF_pre + G_LPF_acc * dt * ( Acc_y_correct + Acc_y_correct_pre ) );// LPF
 80015f6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>
 80015fa:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001606:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800160a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800160e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001612:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001616:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>
 800161a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001626:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800162a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001638:	ee25 5b07 	vmul.f64	d5, d5, d7
 800163c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800168c <HAL_TIM_PeriodElapsedCallback+0x9bc>
 8001640:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8001644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800164a:	edd3 4a00 	vldr	s9, [r3]
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001664:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001668:	e020      	b.n	80016ac <HAL_TIM_PeriodElapsedCallback+0x9dc>
 800166a:	bf00      	nop
 800166c:	200003c4 	.word	0x200003c4
 8001670:	200003bc 	.word	0x200003bc
 8001674:	200003c0 	.word	0x200003c0
 8001678:	200003f8 	.word	0x200003f8
 800167c:	200003fc 	.word	0x200003fc
 8001680:	20000400 	.word	0x20000400
 8001684:	20000408 	.word	0x20000408
 8001688:	2000040c 	.word	0x2000040c
 800168c:	3a83126f 	.word	0x3a83126f
 8001690:	42c80000 	.word	0x42c80000
 8001694:	20000420 	.word	0x20000420
 8001698:	20000404 	.word	0x20000404
 800169c:	20000410 	.word	0x20000410
 80016a0:	20000418 	.word	0x20000418
 80016a4:	20000424 	.word	0x20000424
 80016a8:	20000414 	.word	0x20000414
 80016ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016b0:	4ba9      	ldr	r3, [pc, #676]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80016b2:	edc3 7a00 	vstr	s15, [r3]
        d_yawrate = 1.0 / (2.0 + G_LPF_acc * dt) * ( (2.0 - G_LPF_acc * dt) * d_yawrate_pre + 2.0 * G_LPF_acc * (yaw_rate - yaw_rate_pre) );// Pseudo Derivative : ddphi_res
 80016b6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 80016ba:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8001960 <HAL_TIM_PeriodElapsedCallback+0xc90>
 80016be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80016ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ce:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016d2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016d6:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 80016da:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8001960 <HAL_TIM_PeriodElapsedCallback+0xc90>
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80016ea:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016ee:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	4b9a      	ldr	r3, [pc, #616]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001710:	ed9f 4b8b 	vldr	d4, [pc, #556]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0xc70>
 8001714:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001718:	ee35 7b07 	vadd.f64	d7, d5, d7
 800171c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001720:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
        yaw   = yaw   * 2.0 * pi / 360.0 + yaw_initial;// [rad] Convert this value to definition in modeling 
 800172a:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001734:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001738:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001948 <HAL_TIM_PeriodElapsedCallback+0xc78>
 800173c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001740:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8001950 <HAL_TIM_PeriodElapsedCallback+0xc80>
 8001744:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001748:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001752:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001756:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175a:	4b86      	ldr	r3, [pc, #536]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 800175c:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate   = yaw_rate   * 2.0 * pi / 360.0;// ! Direction is not confirmed yet.
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800176e:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8001948 <HAL_TIM_PeriodElapsedCallback+0xc78>
 8001772:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001776:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001950 <HAL_TIM_PeriodElapsedCallback+0xc80>
 800177a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800177e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001782:	4b79      	ldr	r3, [pc, #484]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
        roll_rate  = roll_rate  * 2.0 * pi / 360.0;
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xcac>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001792:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001796:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8001948 <HAL_TIM_PeriodElapsedCallback+0xc78>
 800179a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800179e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8001950 <HAL_TIM_PeriodElapsedCallback+0xc80>
 80017a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017aa:	4b74      	ldr	r3, [pc, #464]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xcac>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
        pitch_rate = pitch_rate * 2.0 * pi / 360.0;
 80017b0:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017be:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001948 <HAL_TIM_PeriodElapsedCallback+0xc78>
 80017c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017c6:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001950 <HAL_TIM_PeriodElapsedCallback+0xc80>
 80017ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017d2:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
        yaw_rate_notch = 1.0 / ( 1.0 + 2.0*zeta1*G_notch1*dt + G_notch1*G_notch1*dt*dt ) * ( 2.0*(1.0+zeta1*G_notch1*dt)*yaw_rate_notch_pre - yaw_rate_notch_pre2 + (1.0 + G_notch1*G_notch1*dt*dt)*yaw_rate - 2.0*yaw_rate_pre + yaw_rate_pre2 );
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017e2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017e6:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 80017ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80017f6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80017fa:	4b62      	ldr	r3, [pc, #392]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80017fc:	ed93 7a00 	vldr	s14, [r3]
 8001800:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800181e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001822:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001826:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 8001834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800183c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001840:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001844:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001848:	4b4f      	ldr	r3, [pc, #316]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001852:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001856:	4b4d      	ldr	r3, [pc, #308]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001860:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001874:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 8001878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800195c <HAL_TIM_PeriodElapsedCallback+0xc8c>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001888:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800188c:	ee37 4b04 	vadd.f64	d4, d7, d4
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800189a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800189e:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018be:	ee35 7b07 	vadd.f64	d7, d5, d7
 80018c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 80018cc:	edc3 7a00 	vstr	s15, [r3]
          Acc_x_correct_pre = Acc_x_correct;
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a31      	ldr	r2, [pc, #196]	; (800199c <HAL_TIM_PeriodElapsedCallback+0xccc>)
 80018d6:	6013      	str	r3, [r2, #0]
          Acc_y_correct_pre = Acc_y_correct;
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0xcd4>)
 80018de:	6013      	str	r3, [r2, #0]
          d_yawrate_pre     = d_yawrate;
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80018e6:	6013      	str	r3, [r2, #0]
          yaw_rate_pre2       = yaw_rate_pre;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a28      	ldr	r2, [pc, #160]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 80018ee:	6013      	str	r3, [r2, #0]
          yaw_rate_pre        = yaw_rate;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80018f6:	6013      	str	r3, [r2, #0]
          yaw_rate_notch_pre2 = yaw_rate_notch_pre;
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80018fe:	6013      	str	r3, [r2, #0]
          yaw_rate_notch_pre  = yaw_rate_notch;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a20      	ldr	r2, [pc, #128]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8001906:	6013      	str	r3, [r2, #0]
        if     ( yaw - yaw_pre > 2.0*pi/2.0 ) yaw_digit--;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 800190a:	ed93 7a00 	vldr	s14, [r3]
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80019ac <HAL_TIM_PeriodElapsedCallback+0xcdc>
 800191c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	dd46      	ble.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0xce4>
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8001936:	edc3 7a00 	vstr	s15, [r3]
 800193a:	e054      	b.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0xd16>
 800193c:	f3af 8000 	nop.w
 8001940:	00000000 	.word	0x00000000
 8001944:	40690000 	.word	0x40690000
 8001948:	60000000 	.word	0x60000000
 800194c:	400921fb 	.word	0x400921fb
 8001950:	00000000 	.word	0x00000000
 8001954:	40768000 	.word	0x40768000
 8001958:	2000041c 	.word	0x2000041c
 800195c:	3a83126f 	.word	0x3a83126f
 8001960:	42c80000 	.word	0x42c80000
 8001964:	200003f4 	.word	0x200003f4
 8001968:	200003d0 	.word	0x200003d0
 800196c:	200003dc 	.word	0x200003dc
 8001970:	200003f0 	.word	0x200003f0
 8001974:	200003bc 	.word	0x200003bc
 8001978:	20000014 	.word	0x20000014
 800197c:	200003d4 	.word	0x200003d4
 8001980:	200003d8 	.word	0x200003d8
 8001984:	20000018 	.word	0x20000018
 8001988:	200003e8 	.word	0x200003e8
 800198c:	200003ec 	.word	0x200003ec
 8001990:	200003e0 	.word	0x200003e0
 8001994:	200003e4 	.word	0x200003e4
 8001998:	20000404 	.word	0x20000404
 800199c:	20000410 	.word	0x20000410
 80019a0:	20000408 	.word	0x20000408
 80019a4:	20000414 	.word	0x20000414
 80019a8:	200003c8 	.word	0x200003c8
 80019ac:	40490fdb 	.word	0x40490fdb
 80019b0:	200003cc 	.word	0x200003cc
        else if( yaw_pre - yaw > 2.0*pi/2.0 ) yaw_digit++;
 80019b4:	4bea      	ldr	r3, [pc, #936]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	4bea      	ldr	r3, [pc, #936]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x1098>
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd09      	ble.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0xd16>
 80019d2:	4be6      	ldr	r3, [pc, #920]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e0:	4be2      	ldr	r3, [pc, #904]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
        yaw_pre = yaw;
 80019e6:	4bdf      	ldr	r3, [pc, #892]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4add      	ldr	r2, [pc, #884]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 80019ec:	6013      	str	r3, [r2, #0]
        yaw = (yaw + yaw_digit * 2.0 * pi);// :* 2.0 * pi / 360.0;
 80019ee:	4bdd      	ldr	r3, [pc, #884]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80019f8:	4bdc      	ldr	r3, [pc, #880]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a06:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 8001d48 <HAL_TIM_PeriodElapsedCallback+0x1078>
 8001a0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a16:	4bd3      	ldr	r3, [pc, #844]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 8001a1c:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001a20:	eddf 7ad4 	vldr	s15, [pc, #848]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a2c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001a30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a34:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001a38:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001a3c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001a40:	eddf 7acc 	vldr	s15, [pc, #816]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a4c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001a50:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a54:	4bc8      	ldr	r3, [pc, #800]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x10a8>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001a62:	4bc6      	ldr	r3, [pc, #792]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x10ac>)
 8001a64:	ed93 7a00 	vldr	s14, [r3]
 8001a68:	4bc5      	ldr	r3, [pc, #788]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x10b0>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a76:	ed9f 4bb6 	vldr	d4, [pc, #728]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001a7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001a7e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001a82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a8a:	4bbe      	ldr	r3, [pc, #760]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 8001a90:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001a94:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa0:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001aa4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001aa8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001aac:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001ab0:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001ab4:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ac0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001ac4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001ac8:	4baf      	ldr	r3, [pc, #700]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001ad6:	4bad      	ldr	r3, [pc, #692]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x10bc>)
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	4bac      	ldr	r3, [pc, #688]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x10c0>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aea:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001aee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001af2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001af6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001afa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001afe:	4ba5      	ldr	r3, [pc, #660]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x10c4>)
 8001b00:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 8001b04:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001b08:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b14:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001b18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b1c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001b20:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b24:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001b28:	eddf 7a92 	vldr	s15, [pc, #584]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b34:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001b38:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001b3c:	4b96      	ldr	r3, [pc, #600]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x10c8>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b46:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001b4a:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x10cc>)
 8001b4c:	ed93 7a00 	vldr	s14, [r3]
 8001b50:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x10d0>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b5e:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001b62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b66:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001b6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b72:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x10d4>)
 8001b74:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res  = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 8001b78:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001b7c:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b88:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001b8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b90:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001b94:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b98:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001b9c:	eddf 7a75 	vldr	s15, [pc, #468]	; 8001d74 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ba8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001bac:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001bb0:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x10d8>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bba:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x10dc>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4b7a      	ldr	r3, [pc, #488]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x10e0>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bd2:	ed9f 4b5f 	vldr	d4, [pc, #380]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1080>
 8001bd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001bda:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001bde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001be2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001be6:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x10e4>)
 8001be8:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta1_res_pre + 2.0 * G_LPF_ddth * (dtheta1_res - dtheta1_res_pre) );
 8001bec:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001bf0:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bfc:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001c00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c04:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001c08:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c0c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001c10:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c24:	4b64      	ldr	r3, [pc, #400]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x10e8>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c2e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 8001c34:	ed93 7a00 	vldr	s14, [r3]
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x10a8>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c46:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8001d58 <HAL_TIM_PeriodElapsedCallback+0x1088>
 8001c4a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001c4e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x10ec>)
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta2_res_pre + 2.0 * G_LPF_ddth * (dtheta2_res - dtheta2_res_pre) );
 8001c60:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001c64:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c70:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001c74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c78:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001c7c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c80:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001c84:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c94:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c98:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x10f0>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x10c4>)
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cba:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8001d58 <HAL_TIM_PeriodElapsedCallback+0x1088>
 8001cbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001cc2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x10f4>)
 8001cd0:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta3_res_pre + 2.0 * G_LPF_ddth * (dtheta3_res - dtheta3_res_pre) );
 8001cd4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001cd8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001ce8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cec:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001cf0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001cf4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8001cf8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d08:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x10f8>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d16:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x10d4>)
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x10c8>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d2e:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 8001d58 <HAL_TIM_PeriodElapsedCallback+0x1088>
 8001d32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001d36:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001d3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d42:	e043      	b.n	8001dcc <HAL_TIM_PeriodElapsedCallback+0x10fc>
 8001d44:	f3af 8000 	nop.w
 8001d48:	60000000 	.word	0x60000000
 8001d4c:	400921fb 	.word	0x400921fb
 8001d50:	00000000 	.word	0x00000000
 8001d54:	40590000 	.word	0x40590000
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	404e0000 	.word	0x404e0000
 8001d60:	200003c8 	.word	0x200003c8
 8001d64:	200003bc 	.word	0x200003bc
 8001d68:	40490fdb 	.word	0x40490fdb
 8001d6c:	200003cc 	.word	0x200003cc
 8001d70:	3a83126f 	.word	0x3a83126f
 8001d74:	42480000 	.word	0x42480000
 8001d78:	20000268 	.word	0x20000268
 8001d7c:	20000238 	.word	0x20000238
 8001d80:	20000248 	.word	0x20000248
 8001d84:	20000258 	.word	0x20000258
 8001d88:	2000026c 	.word	0x2000026c
 8001d8c:	2000023c 	.word	0x2000023c
 8001d90:	2000024c 	.word	0x2000024c
 8001d94:	2000025c 	.word	0x2000025c
 8001d98:	20000270 	.word	0x20000270
 8001d9c:	20000240 	.word	0x20000240
 8001da0:	20000250 	.word	0x20000250
 8001da4:	20000260 	.word	0x20000260
 8001da8:	20000274 	.word	0x20000274
 8001dac:	20000244 	.word	0x20000244
 8001db0:	20000254 	.word	0x20000254
 8001db4:	20000264 	.word	0x20000264
 8001db8:	20000288 	.word	0x20000288
 8001dbc:	20000278 	.word	0x20000278
 8001dc0:	2000028c 	.word	0x2000028c
 8001dc4:	2000027c 	.word	0x2000027c
 8001dc8:	20000290 	.word	0x20000290
 8001dcc:	4bb8      	ldr	r3, [pc, #736]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x13e0>)
 8001dce:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_res = 1.0 / (2.0 + G_LPF_ddth * dt) * ( (2.0 - G_LPF_ddth * dt)*ddtheta4_res_pre + 2.0 * G_LPF_ddth * (dtheta4_res - dtheta4_res_pre) );
 8001dd2:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 80020b4 <HAL_TIM_PeriodElapsedCallback+0x13e4>
 8001dd6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001de2:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001de6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001dee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001df2:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80020b4 <HAL_TIM_PeriodElapsedCallback+0x13e4>
 8001df6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e06:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001e0a:	4bab      	ldr	r3, [pc, #684]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x13e8>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e14:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001e18:	4ba8      	ldr	r3, [pc, #672]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x13ec>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4ba8      	ldr	r3, [pc, #672]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x13f0>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e2c:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 80020a0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
 8001e30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001e34:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001e38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e40:	4ba0      	ldr	r3, [pc, #640]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x13f4>)
 8001e42:	edc3 7a00 	vstr	s15, [r3]
          ddtheta1_res_pre = ddtheta1_res;
 8001e46:	4ba0      	ldr	r3, [pc, #640]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x13f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4aa0      	ldr	r2, [pc, #640]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x13fc>)
 8001e4c:	6013      	str	r3, [r2, #0]
          ddtheta2_res_pre = ddtheta2_res;
 8001e4e:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x1400>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4aa0      	ldr	r2, [pc, #640]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8001e54:	6013      	str	r3, [r2, #0]
          ddtheta3_res_pre = ddtheta3_res;
 8001e56:	4b96      	ldr	r3, [pc, #600]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x13e0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a9f      	ldr	r2, [pc, #636]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8001e5c:	6013      	str	r3, [r2, #0]
          ddtheta4_res_pre = ddtheta4_res;
 8001e5e:	4b99      	ldr	r3, [pc, #612]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x13f4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a95      	ldr	r2, [pc, #596]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x13e8>)
 8001e64:	6013      	str	r3, [r2, #0]
        delta_dv = ( L + W )*( L + W ) / Jz * ( - fd_hat1 - fd_hat2 + fd_hat3 + fd_hat4 );
 8001e66:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	eeb1 7a67 	vneg.f32	s14, s15
 8001e70:	4b9b      	ldr	r3, [pc, #620]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7a:	4b9a      	ldr	r3, [pc, #616]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e84:	4b98      	ldr	r3, [pc, #608]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x1418>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80020ec <HAL_TIM_PeriodElapsedCallback+0x141c>
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	4b96      	ldr	r3, [pc, #600]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
        dv_1 = sqrt(2.0) * Mass * ( fd_hat1 + fd_hat3 ) - delta_dv;
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eb0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020a8 <HAL_TIM_PeriodElapsedCallback+0x13d8>
 8001eb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001eb8:	4b8d      	ldr	r3, [pc, #564]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ec2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ec6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001eca:	4b8a      	ldr	r3, [pc, #552]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x1424>)
 8001ecc:	edc3 7a00 	vstr	s15, [r3]
        dv_2 = sqrt(2.0) * Mass * ( fd_hat2 + fd_hat4 ) - delta_dv;
 8001ed0:	4b83      	ldr	r3, [pc, #524]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x1418>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ee4:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80020a8 <HAL_TIM_PeriodElapsedCallback+0x13d8>
 8001ee8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001eec:	4b80      	ldr	r3, [pc, #512]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ef6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001efa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001efe:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
        dv_3 = sqrt(2.0) * Mass * ( fd_hat1 + fd_hat3 ) + delta_dv;
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f18:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80020a8 <HAL_TIM_PeriodElapsedCallback+0x13d8>
 8001f1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f20:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f32:	4b72      	ldr	r3, [pc, #456]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x142c>)
 8001f34:	edc3 7a00 	vstr	s15, [r3]
        dv_4 = sqrt(2.0) * Mass * ( fd_hat2 + fd_hat4 ) + delta_dv;
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x1418>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f4c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80020a8 <HAL_TIM_PeriodElapsedCallback+0x13d8>
 8001f50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x1430>)
 8001f68:	edc3 7a00 	vstr	s15, [r3]
        dv_1_acc =   Acc_x_LPF + Acc_y_LPF - ( L + W ) * d_yawrate;
 8001f6c:	4b65      	ldr	r3, [pc, #404]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x1434>)
 8001f6e:	ed93 7a00 	vldr	s14, [r3]
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7c:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x143c>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eddf 6a63 	vldr	s13, [pc, #396]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001f86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x1444>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
        dv_2_acc = - Acc_x_LPF + Acc_y_LPF - ( L + W ) * d_yawrate;
 8001f94:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x1434>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x143c>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001fae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x1448>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
        dv_3_acc =   Acc_x_LPF + Acc_y_LPF + ( L + W ) * d_yawrate;
 8001fbc:	4b51      	ldr	r3, [pc, #324]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x1434>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	4b51      	ldr	r3, [pc, #324]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fcc:	4b4f      	ldr	r3, [pc, #316]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x143c>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001fd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x144c>)
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
        dv_4_acc = - Acc_x_LPF + Acc_y_LPF + ( L + W ) * d_yawrate;
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 8001fe6:	ed93 7a00 	vldr	s14, [r3]
 8001fea:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x1434>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x143c>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x1440>
 8001ffe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x1450>)
 8002008:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta1_res > epsilon || dtheta1_res < - epsilon ){
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80020b4 <HAL_TIM_PeriodElapsedCallback+0x13e4>
 8002016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dc0a      	bgt.n	8002036 <HAL_TIM_PeriodElapsedCallback+0x1366>
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002128 <HAL_TIM_PeriodElapsedCallback+0x1458>
 800202a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	f140 80c4 	bpl.w	80021be <HAL_TIM_PeriodElapsedCallback+0x14ee>
          if( dv_1 >= 0.0 ){// Acceleration
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x1424>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	db78      	blt.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x1468>
            d_lambda_1_hat = ddtheta1_res / dtheta1_res * ( 1.0 - lambda_1_hat ) - dv_1 / ( Rw * dtheta1_res );
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x13f8>)
 8002048:	edd3 6a00 	vldr	s13, [r3]
 800204c:	4b35      	ldr	r3, [pc, #212]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002056:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x145c>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002064:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002068:	ee35 7b47 	vsub.f64	d7, d5, d7
 800206c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x1424>)
 8002072:	edd3 5a00 	vldr	s11, [r3]
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1454>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002130 <HAL_TIM_PeriodElapsedCallback+0x1460>
 8002080:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002084:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002088:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800208c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002090:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x1464>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
          if( dv_1 >= 0.0 ){// Acceleration
 800209a:	e0a3      	b.n	80021e4 <HAL_TIM_PeriodElapsedCallback+0x1514>
 800209c:	f3af 8000 	nop.w
 80020a0:	00000000 	.word	0x00000000
 80020a4:	404e0000 	.word	0x404e0000
 80020a8:	e3f01e9a 	.word	0xe3f01e9a
 80020ac:	401f56c6 	.word	0x401f56c6
 80020b0:	20000280 	.word	0x20000280
 80020b4:	3a83126f 	.word	0x3a83126f
 80020b8:	20000294 	.word	0x20000294
 80020bc:	20000264 	.word	0x20000264
 80020c0:	20000274 	.word	0x20000274
 80020c4:	20000284 	.word	0x20000284
 80020c8:	20000278 	.word	0x20000278
 80020cc:	20000288 	.word	0x20000288
 80020d0:	2000027c 	.word	0x2000027c
 80020d4:	2000028c 	.word	0x2000028c
 80020d8:	20000290 	.word	0x20000290
 80020dc:	20000390 	.word	0x20000390
 80020e0:	20000394 	.word	0x20000394
 80020e4:	20000398 	.word	0x20000398
 80020e8:	2000039c 	.word	0x2000039c
 80020ec:	3f81702e 	.word	0x3f81702e
 80020f0:	20000458 	.word	0x20000458
 80020f4:	20000448 	.word	0x20000448
 80020f8:	2000044c 	.word	0x2000044c
 80020fc:	20000450 	.word	0x20000450
 8002100:	20000454 	.word	0x20000454
 8002104:	20000418 	.word	0x20000418
 8002108:	2000041c 	.word	0x2000041c
 800210c:	200003f0 	.word	0x200003f0
 8002110:	3e99999a 	.word	0x3e99999a
 8002114:	2000047c 	.word	0x2000047c
 8002118:	20000480 	.word	0x20000480
 800211c:	20000484 	.word	0x20000484
 8002120:	20000488 	.word	0x20000488
 8002124:	20000258 	.word	0x20000258
 8002128:	ba83126f 	.word	0xba83126f
 800212c:	20000428 	.word	0x20000428
 8002130:	3d4ccccd 	.word	0x3d4ccccd
 8002134:	20000438 	.word	0x20000438
            d_lambda_1_hat = ddtheta1_res / dtheta1_res * ( 1.0 + lambda_1_hat ) - ( 1.0 + lambda_1_hat )*( 1.0 + lambda_1_hat ) * dv_1 / ( Rw * dtheta1_res );
 8002138:	4bbe      	ldr	r3, [pc, #760]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1764>)
 800213a:	edd3 6a00 	vldr	s13, [r3]
 800213e:	4bbe      	ldr	r3, [pc, #760]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x1768>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002148:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800214c:	4bbb      	ldr	r3, [pc, #748]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x176c>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002156:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800215a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800215e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002162:	4bb6      	ldr	r3, [pc, #728]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x176c>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800216c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002170:	ee37 5b05 	vadd.f64	d5, d7, d5
 8002174:	4bb1      	ldr	r3, [pc, #708]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x176c>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800217e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002182:	ee37 7b04 	vadd.f64	d7, d7, d4
 8002186:	ee25 5b07 	vmul.f64	d5, d5, d7
 800218a:	4bad      	ldr	r3, [pc, #692]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1770>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002194:	ee25 4b07 	vmul.f64	d4, d5, d7
 8002198:	4ba7      	ldr	r3, [pc, #668]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x1768>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 80021a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80021aa:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80021ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021b6:	4ba4      	ldr	r3, [pc, #656]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1778>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
          if( dv_1 >= 0.0 ){// Acceleration
 80021bc:	e012      	b.n	80021e4 <HAL_TIM_PeriodElapsedCallback+0x1514>
            d_lambda_1_hat = ( Rw * ddtheta1_res - dv_1 ) / epsilon;
 80021be:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x1764>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 80021c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021cc:	4b9c      	ldr	r3, [pc, #624]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1770>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d6:	eddf 6a9d 	vldr	s13, [pc, #628]	; 800244c <HAL_TIM_PeriodElapsedCallback+0x177c>
 80021da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021de:	4b9a      	ldr	r3, [pc, #616]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1778>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta2_res > epsilon || dtheta2_res < - epsilon ){
 80021e4:	4b9a      	ldr	r3, [pc, #616]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800244c <HAL_TIM_PeriodElapsedCallback+0x177c>
 80021ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	dc09      	bgt.n	800220c <HAL_TIM_PeriodElapsedCallback+0x153c>
 80021f8:	4b95      	ldr	r3, [pc, #596]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	d575      	bpl.n	80022f8 <HAL_TIM_PeriodElapsedCallback+0x1628>
          if( dv_2 >= 0.0 ){// Acceleration
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1788>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	db2a      	blt.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x15a2>
            d_lambda_2_hat = ddtheta2_res / dtheta2_res * ( 1.0 - lambda_2_hat ) - dv_2 / ( Rw * dtheta2_res );
 800221c:	4b8f      	ldr	r3, [pc, #572]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 800221e:	edd3 6a00 	vldr	s13, [r3]
 8002222:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 8002224:	ed93 7a00 	vldr	s14, [r3]
 8002228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002230:	4b8b      	ldr	r3, [pc, #556]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1790>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800223a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800223e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002242:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002246:	4b84      	ldr	r3, [pc, #528]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1788>)
 8002248:	edd3 5a00 	vldr	s11, [r3]
 800224c:	4b80      	ldr	r3, [pc, #512]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 8002256:	ee27 7a87 	vmul.f32	s14, s15, s14
 800225a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800225e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002262:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002266:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800226a:	4b7e      	ldr	r3, [pc, #504]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 800226c:	edc3 7a00 	vstr	s15, [r3]
          if( dv_2 >= 0.0 ){// Acceleration
 8002270:	e055      	b.n	800231e <HAL_TIM_PeriodElapsedCallback+0x164e>
            d_lambda_2_hat = ddtheta2_res / dtheta2_res * ( 1.0 + lambda_2_hat ) - ( 1.0 + lambda_2_hat )*( 1.0 + lambda_2_hat ) * dv_2 / ( Rw * dtheta2_res );
 8002272:	4b7a      	ldr	r3, [pc, #488]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 8002274:	edd3 6a00 	vldr	s13, [r3]
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 800227a:	ed93 7a00 	vldr	s14, [r3]
 800227e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002282:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1790>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002290:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002294:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002298:	ee26 6b07 	vmul.f64	d6, d6, d7
 800229c:	4b70      	ldr	r3, [pc, #448]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1790>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022a6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80022aa:	ee37 5b05 	vadd.f64	d5, d7, d5
 80022ae:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1790>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80022bc:	ee37 7b04 	vadd.f64	d7, d7, d4
 80022c0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1788>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022ce:	ee25 4b07 	vmul.f64	d4, d5, d7
 80022d2:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1780>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 80022dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022e4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80022e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f0:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]
          if( dv_2 >= 0.0 ){// Acceleration
 80022f6:	e012      	b.n	800231e <HAL_TIM_PeriodElapsedCallback+0x164e>
            d_lambda_2_hat = ( Rw * ddtheta2_res - dv_2 ) / epsilon;
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x178c>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 8002302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1788>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002310:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800244c <HAL_TIM_PeriodElapsedCallback+0x177c>
 8002314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002318:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1794>)
 800231a:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta3_res > epsilon || dtheta3_res < - epsilon ){
 800231e:	4b52      	ldr	r3, [pc, #328]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800244c <HAL_TIM_PeriodElapsedCallback+0x177c>
 8002328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	dc0a      	bgt.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x1678>
 8002332:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002454 <HAL_TIM_PeriodElapsedCallback+0x1784>
 800233c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	f140 809a 	bpl.w	800247c <HAL_TIM_PeriodElapsedCallback+0x17ac>
          if( dv_3 >= 0.0 ){// Acceleration
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	db2a      	blt.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x16de>
            d_lambda_3_hat = ddtheta3_res / dtheta3_res * ( 1.0 - lambda_3_hat ) - dv_3 / ( Rw * dtheta3_res );
 8002358:	4b45      	ldr	r3, [pc, #276]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x17a0>)
 800235a:	edd3 6a00 	vldr	s13, [r3]
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002368:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002376:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800237a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800237e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002382:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 8002384:	edd3 5a00 	vldr	s11, [r3]
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 8002392:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002396:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800239a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800239e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x17a8>)
 80023a8:	edc3 7a00 	vstr	s15, [r3]
          if( dv_3 >= 0.0 ){// Acceleration
 80023ac:	e079      	b.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x17d2>
            d_lambda_3_hat = ddtheta3_res / dtheta3_res * ( 1.0 + lambda_3_hat ) - ( 1.0 + lambda_3_hat )*( 1.0 + lambda_3_hat ) * dv_3 / ( Rw * dtheta3_res );
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x17a0>)
 80023b0:	edd3 6a00 	vldr	s13, [r3]
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023cc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80023d0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80023d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80023e6:	ee37 5b05 	vadd.f64	d5, d7, d5
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x17a4>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023f4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80023f8:	ee37 7b04 	vadd.f64	d7, d7, d4
 80023fc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x179c>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800240a:	ee25 4b07 	vmul.f64	d4, d5, d7
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1798>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002444 <HAL_TIM_PeriodElapsedCallback+0x1774>
 8002418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002420:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002424:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002428:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x17a8>)
 800242e:	edc3 7a00 	vstr	s15, [r3]
          if( dv_3 >= 0.0 ){// Acceleration
 8002432:	e036      	b.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x17d2>
 8002434:	20000278 	.word	0x20000278
 8002438:	20000258 	.word	0x20000258
 800243c:	20000428 	.word	0x20000428
 8002440:	20000448 	.word	0x20000448
 8002444:	3d4ccccd 	.word	0x3d4ccccd
 8002448:	20000438 	.word	0x20000438
 800244c:	3a83126f 	.word	0x3a83126f
 8002450:	2000025c 	.word	0x2000025c
 8002454:	ba83126f 	.word	0xba83126f
 8002458:	2000044c 	.word	0x2000044c
 800245c:	2000027c 	.word	0x2000027c
 8002460:	2000042c 	.word	0x2000042c
 8002464:	2000043c 	.word	0x2000043c
 8002468:	20000260 	.word	0x20000260
 800246c:	20000450 	.word	0x20000450
 8002470:	20000280 	.word	0x20000280
 8002474:	20000430 	.word	0x20000430
 8002478:	20000440 	.word	0x20000440
            d_lambda_3_hat = ( Rw * ddtheta3_res - dv_3 ) / epsilon;
 800247c:	4bca      	ldr	r3, [pc, #808]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x1ad8>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ed9f 7aca 	vldr	s14, [pc, #808]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 8002486:	ee27 7a87 	vmul.f32	s14, s15, s14
 800248a:	4bc9      	ldr	r3, [pc, #804]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x1ae0>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002494:	eddf 6ac7 	vldr	s13, [pc, #796]	; 80027b4 <HAL_TIM_PeriodElapsedCallback+0x1ae4>
 8002498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249c:	4bc6      	ldr	r3, [pc, #792]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x1ae8>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta4_res > epsilon || dtheta4_res < - epsilon ){
 80024a2:	4bc6      	ldr	r3, [pc, #792]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x1aec>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80027b4 <HAL_TIM_PeriodElapsedCallback+0x1ae4>
 80024ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	dc09      	bgt.n	80024ca <HAL_TIM_PeriodElapsedCallback+0x17fa>
 80024b6:	4bc1      	ldr	r3, [pc, #772]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x1aec>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80027c0 <HAL_TIM_PeriodElapsedCallback+0x1af0>
 80024c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	d575      	bpl.n	80025b6 <HAL_TIM_PeriodElapsedCallback+0x18e6>
          if( dv_4 >= 0.0 ){// Acceleration
 80024ca:	4bbe      	ldr	r3, [pc, #760]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x1af4>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	db2a      	blt.n	8002530 <HAL_TIM_PeriodElapsedCallback+0x1860>
            d_lambda_4_hat = ddtheta4_res / dtheta4_res * ( 1.0 - lambda_4_hat ) - dv_4 / ( Rw * dtheta4_res );
 80024da:	4bbb      	ldr	r3, [pc, #748]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x1af8>)
 80024dc:	edd3 6a00 	vldr	s13, [r3]
 80024e0:	4bb6      	ldr	r3, [pc, #728]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x1aec>)
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80024ee:	4bb7      	ldr	r3, [pc, #732]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0x1afc>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80024fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002500:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002504:	4baf      	ldr	r3, [pc, #700]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x1af4>)
 8002506:	edd3 5a00 	vldr	s11, [r3]
 800250a:	4bac      	ldr	r3, [pc, #688]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x1aec>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 8002514:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002518:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800251c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002520:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002524:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002528:	4ba9      	ldr	r3, [pc, #676]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x1b00>)
 800252a:	edc3 7a00 	vstr	s15, [r3]
          if( dv_4 >= 0.0 ){// Acceleration
 800252e:	e055      	b.n	80025dc <HAL_TIM_PeriodElapsedCallback+0x190c>
            d_lambda_4_hat = ddtheta4_res / dtheta4_res * ( 1.0 + lambda_4_hat ) - ( 1.0 + lambda_4_hat )*( 1.0 + lambda_4_hat ) * dv_4 / ( Rw * dtheta4_res );
 8002530:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x1af8>)
 8002532:	edd3 6a00 	vldr	s13, [r3]
 8002536:	4ba1      	ldr	r3, [pc, #644]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x1aec>)
 8002538:	ed93 7a00 	vldr	s14, [r3]
 800253c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002540:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002544:	4ba1      	ldr	r3, [pc, #644]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0x1afc>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800254e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002552:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002556:	ee26 6b07 	vmul.f64	d6, d6, d7
 800255a:	4b9c      	ldr	r3, [pc, #624]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0x1afc>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002564:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002568:	ee37 5b05 	vadd.f64	d5, d7, d5
 800256c:	4b97      	ldr	r3, [pc, #604]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0x1afc>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002576:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800257a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800257e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002582:	4b90      	ldr	r3, [pc, #576]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x1af4>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800258c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8002590:	4b8a      	ldr	r3, [pc, #552]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x1aec>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 800259a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80025a2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80025a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x1b00>)
 80025b0:	edc3 7a00 	vstr	s15, [r3]
          if( dv_4 >= 0.0 ){// Acceleration
 80025b4:	e012      	b.n	80025dc <HAL_TIM_PeriodElapsedCallback+0x190c>
            d_lambda_4_hat = ( Rw * ddtheta4_res - dv_4 ) / epsilon;
 80025b6:	4b84      	ldr	r3, [pc, #528]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x1af8>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 80025c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025c4:	4b7f      	ldr	r3, [pc, #508]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x1af4>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ce:	eddf 6a79 	vldr	s13, [pc, #484]	; 80027b4 <HAL_TIM_PeriodElapsedCallback+0x1ae4>
 80025d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d6:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x1b00>)
 80025d8:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta1_res > epsilon || dtheta1_res < - epsilon ){
 80025dc:	4b7d      	ldr	r3, [pc, #500]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1b04>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80027b4 <HAL_TIM_PeriodElapsedCallback+0x1ae4>
 80025e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	dc09      	bgt.n	8002604 <HAL_TIM_PeriodElapsedCallback+0x1934>
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1b04>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80027c0 <HAL_TIM_PeriodElapsedCallback+0x1af0>
 80025fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	d575      	bpl.n	80026f0 <HAL_TIM_PeriodElapsedCallback+0x1a20>
          if( dv_1_acc >= 0.0 ){// Acceleration
 8002604:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x1b08>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	db2a      	blt.n	800266a <HAL_TIM_PeriodElapsedCallback+0x199a>
            d_lambda_1_hat_acc = ddtheta1_res / dtheta1_res * ( 1.0 - lambda_1_hat_acc ) - dv_1_acc / ( Rw * dtheta1_res );
 8002614:	4b71      	ldr	r3, [pc, #452]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x1b0c>)
 8002616:	edd3 6a00 	vldr	s13, [r3]
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1b04>)
 800261c:	ed93 7a00 	vldr	s14, [r3]
 8002620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002624:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x1b10>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002632:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002636:	ee35 7b47 	vsub.f64	d7, d5, d7
 800263a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800263e:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x1b08>)
 8002640:	edd3 5a00 	vldr	s11, [r3]
 8002644:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1b04>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 800264e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002652:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002656:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800265a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800265e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002662:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1b14>)
 8002664:	edc3 7a00 	vstr	s15, [r3]
          if( dv_1_acc >= 0.0 ){// Acceleration
 8002668:	e055      	b.n	8002716 <HAL_TIM_PeriodElapsedCallback+0x1a46>
            d_lambda_1_hat_acc = ddtheta1_res / dtheta1_res * ( 1.0 + lambda_1_hat_acc ) - ( 1.0 + lambda_1_hat_acc )*( 1.0 + lambda_1_hat_acc ) * dv_1_acc / ( Rw * dtheta1_res );
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x1b0c>)
 800266c:	edd3 6a00 	vldr	s13, [r3]
 8002670:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1b04>)
 8002672:	ed93 7a00 	vldr	s14, [r3]
 8002676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800267e:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x1b10>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002688:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800268c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002690:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002694:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x1b10>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800269e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80026a2:	ee37 5b05 	vadd.f64	d5, d7, d5
 80026a6:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x1b10>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80026b4:	ee37 7b04 	vadd.f64	d7, d7, d4
 80026b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80026bc:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x1b08>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c6:	ee25 4b07 	vmul.f64	d4, d5, d7
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1b04>)
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 80026d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80026dc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80026e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026e8:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1b14>)
 80026ea:	edc3 7a00 	vstr	s15, [r3]
          if( dv_1_acc >= 0.0 ){// Acceleration
 80026ee:	e012      	b.n	8002716 <HAL_TIM_PeriodElapsedCallback+0x1a46>
            d_lambda_1_hat_acc = ( Rw * ddtheta1_res - dv_1_acc ) / epsilon;
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x1b0c>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 80026fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x1b08>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002708:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80027b4 <HAL_TIM_PeriodElapsedCallback+0x1ae4>
 800270c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002710:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1b14>)
 8002712:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta2_res > epsilon || dtheta2_res < - epsilon ){
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1b18>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80027b4 <HAL_TIM_PeriodElapsedCallback+0x1ae4>
 8002720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	dc0a      	bgt.n	8002740 <HAL_TIM_PeriodElapsedCallback+0x1a70>
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1b18>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027c0 <HAL_TIM_PeriodElapsedCallback+0x1af0>
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	f140 80a1 	bpl.w	8002882 <HAL_TIM_PeriodElapsedCallback+0x1bb2>
          if( dv_2_acc >= 0.0 ){// Acceleration
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x1b1c>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	db55      	blt.n	80027fc <HAL_TIM_PeriodElapsedCallback+0x1b2c>
            d_lambda_2_hat_acc = ddtheta2_res / dtheta2_res * ( 1.0 - lambda_2_hat_acc ) - dv_2_acc / ( Rw * dtheta2_res );
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1b20>)
 8002752:	edd3 6a00 	vldr	s13, [r3]
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1b18>)
 8002758:	ed93 7a00 	vldr	s14, [r3]
 800275c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002760:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002764:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1b24>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800276e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002772:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002776:	ee26 6b07 	vmul.f64	d6, d6, d7
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x1b1c>)
 800277c:	edd3 5a00 	vldr	s11, [r3]
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1b18>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80027ac <HAL_TIM_PeriodElapsedCallback+0x1adc>
 800278a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800278e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002792:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002796:	ee36 7b47 	vsub.f64	d7, d6, d7
 800279a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x1b28>)
 80027a0:	edc3 7a00 	vstr	s15, [r3]
          if( dv_2_acc >= 0.0 ){// Acceleration
 80027a4:	e080      	b.n	80028a8 <HAL_TIM_PeriodElapsedCallback+0x1bd8>
 80027a6:	bf00      	nop
 80027a8:	20000280 	.word	0x20000280
 80027ac:	3d4ccccd 	.word	0x3d4ccccd
 80027b0:	20000450 	.word	0x20000450
 80027b4:	3a83126f 	.word	0x3a83126f
 80027b8:	20000440 	.word	0x20000440
 80027bc:	20000264 	.word	0x20000264
 80027c0:	ba83126f 	.word	0xba83126f
 80027c4:	20000454 	.word	0x20000454
 80027c8:	20000284 	.word	0x20000284
 80027cc:	20000434 	.word	0x20000434
 80027d0:	20000444 	.word	0x20000444
 80027d4:	20000258 	.word	0x20000258
 80027d8:	2000047c 	.word	0x2000047c
 80027dc:	20000278 	.word	0x20000278
 80027e0:	2000045c 	.word	0x2000045c
 80027e4:	2000046c 	.word	0x2000046c
 80027e8:	2000025c 	.word	0x2000025c
 80027ec:	20000480 	.word	0x20000480
 80027f0:	2000027c 	.word	0x2000027c
 80027f4:	20000460 	.word	0x20000460
 80027f8:	20000470 	.word	0x20000470
            d_lambda_2_hat_acc = ddtheta2_res / dtheta2_res * ( 1.0 + lambda_2_hat_acc ) - ( 1.0 + lambda_2_hat_acc )*( 1.0 + lambda_2_hat_acc ) * dv_2_acc / ( Rw * dtheta2_res );
 80027fc:	4bbe      	ldr	r3, [pc, #760]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x1e28>)
 80027fe:	edd3 6a00 	vldr	s13, [r3]
 8002802:	4bbe      	ldr	r3, [pc, #760]	; (8002afc <HAL_TIM_PeriodElapsedCallback+0x1e2c>)
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002810:	4bbb      	ldr	r3, [pc, #748]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x1e30>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800281a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800281e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002822:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002826:	4bb6      	ldr	r3, [pc, #728]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x1e30>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002830:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002834:	ee37 5b05 	vadd.f64	d5, d7, d5
 8002838:	4bb1      	ldr	r3, [pc, #708]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x1e30>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002842:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002846:	ee37 7b04 	vadd.f64	d7, d7, d4
 800284a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800284e:	4bad      	ldr	r3, [pc, #692]	; (8002b04 <HAL_TIM_PeriodElapsedCallback+0x1e34>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002858:	ee25 4b07 	vmul.f64	d4, d5, d7
 800285c:	4ba7      	ldr	r3, [pc, #668]	; (8002afc <HAL_TIM_PeriodElapsedCallback+0x1e2c>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 8002866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800286e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002872:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002876:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800287a:	4ba4      	ldr	r3, [pc, #656]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x1e3c>)
 800287c:	edc3 7a00 	vstr	s15, [r3]
          if( dv_2_acc >= 0.0 ){// Acceleration
 8002880:	e012      	b.n	80028a8 <HAL_TIM_PeriodElapsedCallback+0x1bd8>
            d_lambda_2_hat_acc = ( Rw * ddtheta2_res - dv_2_acc ) / epsilon;
 8002882:	4b9d      	ldr	r3, [pc, #628]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x1e28>)
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 800288c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002890:	4b9c      	ldr	r3, [pc, #624]	; (8002b04 <HAL_TIM_PeriodElapsedCallback+0x1e34>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289a:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8002b10 <HAL_TIM_PeriodElapsedCallback+0x1e40>
 800289e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a2:	4b9a      	ldr	r3, [pc, #616]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x1e3c>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta3_res > epsilon || dtheta3_res < - epsilon ){
 80028a8:	4b9a      	ldr	r3, [pc, #616]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002b10 <HAL_TIM_PeriodElapsedCallback+0x1e40>
 80028b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	dc09      	bgt.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0x1c00>
 80028bc:	4b95      	ldr	r3, [pc, #596]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002b18 <HAL_TIM_PeriodElapsedCallback+0x1e48>
 80028c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d575      	bpl.n	80029bc <HAL_TIM_PeriodElapsedCallback+0x1cec>
          if( dv_3_acc >= 0.0 ){// Acceleration
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x1e4c>)
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	db2a      	blt.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x1c66>
            d_lambda_3_hat_acc = ddtheta3_res / dtheta3_res * ( 1.0 - lambda_3_hat_acc ) - dv_3_acc / ( Rw * dtheta3_res );
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x1e50>)
 80028e2:	edd3 6a00 	vldr	s13, [r3]
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80028f4:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x1e54>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028fe:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002902:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002906:	ee26 6b07 	vmul.f64	d6, d6, d7
 800290a:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x1e4c>)
 800290c:	edd3 5a00 	vldr	s11, [r3]
 8002910:	4b80      	ldr	r3, [pc, #512]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 800291a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800291e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002922:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002926:	ee36 7b47 	vsub.f64	d7, d6, d7
 800292a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800292e:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x1e58>)
 8002930:	edc3 7a00 	vstr	s15, [r3]
          if( dv_3_acc >= 0.0 ){// Acceleration
 8002934:	e055      	b.n	80029e2 <HAL_TIM_PeriodElapsedCallback+0x1d12>
            d_lambda_3_hat_acc = ddtheta3_res / dtheta3_res * ( 1.0 + lambda_3_hat_acc ) - ( 1.0 + lambda_3_hat_acc )*( 1.0 + lambda_3_hat_acc ) * dv_3_acc / ( Rw * dtheta3_res );
 8002936:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x1e50>)
 8002938:	edd3 6a00 	vldr	s13, [r3]
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002946:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x1e54>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002954:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002958:	ee37 7b05 	vadd.f64	d7, d7, d5
 800295c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002960:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x1e54>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800296a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800296e:	ee37 5b05 	vadd.f64	d5, d7, d5
 8002972:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x1e54>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800297c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002980:	ee37 7b04 	vadd.f64	d7, d7, d4
 8002984:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002988:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x1e4c>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002992:	ee25 4b07 	vmul.f64	d4, d5, d7
 8002996:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x1e44>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 80029a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80029a8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80029ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x1e58>)
 80029b6:	edc3 7a00 	vstr	s15, [r3]
          if( dv_3_acc >= 0.0 ){// Acceleration
 80029ba:	e012      	b.n	80029e2 <HAL_TIM_PeriodElapsedCallback+0x1d12>
            d_lambda_3_hat_acc = ( Rw * ddtheta3_res - dv_3_acc ) / epsilon;
 80029bc:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x1e50>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 80029c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x1e4c>)
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002b10 <HAL_TIM_PeriodElapsedCallback+0x1e40>
 80029d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029dc:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x1e58>)
 80029de:	edc3 7a00 	vstr	s15, [r3]
        if( dtheta4_res > epsilon || dtheta4_res < - epsilon ){
 80029e2:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002b10 <HAL_TIM_PeriodElapsedCallback+0x1e40>
 80029ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	dc0a      	bgt.n	8002a0c <HAL_TIM_PeriodElapsedCallback+0x1d3c>
 80029f6:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002b18 <HAL_TIM_PeriodElapsedCallback+0x1e48>
 8002a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	f140 809a 	bpl.w	8002b40 <HAL_TIM_PeriodElapsedCallback+0x1e70>
          if( dv_4_acc >= 0.0 ){// Acceleration
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x1e60>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	db2a      	blt.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0x1da2>
            d_lambda_4_hat_acc = ddtheta4_res / dtheta4_res * ( 1.0 - lambda_4_hat_acc ) - dv_4_acc / ( Rw * dtheta4_res );
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x1e64>)
 8002a1e:	edd3 6a00 	vldr	s13, [r3]
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 8002a24:	ed93 7a00 	vldr	s14, [r3]
 8002a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x1e68>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a3a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002a3e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002a42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x1e60>)
 8002a48:	edd3 5a00 	vldr	s11, [r3]
 8002a4c:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 8002a56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a5a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x1e6c>)
 8002a6c:	edc3 7a00 	vstr	s15, [r3]
          if( dv_4_acc >= 0.0 ){// Acceleration
 8002a70:	e079      	b.n	8002b66 <HAL_TIM_PeriodElapsedCallback+0x1e96>
            d_lambda_4_hat_acc = ddtheta4_res / dtheta4_res * ( 1.0 + lambda_4_hat_acc ) - ( 1.0 + lambda_4_hat_acc )*( 1.0 + lambda_4_hat_acc ) * dv_4_acc / ( Rw * dtheta4_res );
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x1e64>)
 8002a74:	edd3 6a00 	vldr	s13, [r3]
 8002a78:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 8002a7a:	ed93 7a00 	vldr	s14, [r3]
 8002a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a82:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x1e68>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a90:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002a94:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x1e68>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aa6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002aaa:	ee37 5b05 	vadd.f64	d5, d7, d5
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x1e68>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8002abc:	ee37 7b04 	vadd.f64	d7, d7, d4
 8002ac0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x1e60>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ace:	ee25 4b07 	vmul.f64	d4, d5, d7
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x1e5c>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b08 <HAL_TIM_PeriodElapsedCallback+0x1e38>
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002ae4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002ae8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002aec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x1e6c>)
 8002af2:	edc3 7a00 	vstr	s15, [r3]
          if( dv_4_acc >= 0.0 ){// Acceleration
 8002af6:	e036      	b.n	8002b66 <HAL_TIM_PeriodElapsedCallback+0x1e96>
 8002af8:	2000027c 	.word	0x2000027c
 8002afc:	2000025c 	.word	0x2000025c
 8002b00:	20000460 	.word	0x20000460
 8002b04:	20000480 	.word	0x20000480
 8002b08:	3d4ccccd 	.word	0x3d4ccccd
 8002b0c:	20000470 	.word	0x20000470
 8002b10:	3a83126f 	.word	0x3a83126f
 8002b14:	20000260 	.word	0x20000260
 8002b18:	ba83126f 	.word	0xba83126f
 8002b1c:	20000484 	.word	0x20000484
 8002b20:	20000280 	.word	0x20000280
 8002b24:	20000464 	.word	0x20000464
 8002b28:	20000474 	.word	0x20000474
 8002b2c:	20000264 	.word	0x20000264
 8002b30:	20000488 	.word	0x20000488
 8002b34:	20000284 	.word	0x20000284
 8002b38:	20000468 	.word	0x20000468
 8002b3c:	20000478 	.word	0x20000478
            d_lambda_4_hat_acc = ( Rw * ddtheta4_res - dv_4_acc ) / epsilon;
 8002b40:	4bca      	ldr	r3, [pc, #808]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x219c>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8002e70 <HAL_TIM_PeriodElapsedCallback+0x21a0>
 8002b4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b4e:	4bc9      	ldr	r3, [pc, #804]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x21a4>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b58:	eddf 6ac7 	vldr	s13, [pc, #796]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b60:	4bc6      	ldr	r3, [pc, #792]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x21ac>)
 8002b62:	edc3 7a00 	vstr	s15, [r3]
        lambda_1_hat     += d_lambda_1_hat * dt;
 8002b66:	4bc6      	ldr	r3, [pc, #792]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x21b0>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002b70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b74:	4bc3      	ldr	r3, [pc, #780]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x21b4>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	4bc1      	ldr	r3, [pc, #772]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x21b4>)
 8002b80:	edc3 7a00 	vstr	s15, [r3]
        lambda_2_hat     += d_lambda_2_hat * dt;
 8002b84:	4bc0      	ldr	r3, [pc, #768]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x21b8>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002b8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b92:	4bbe      	ldr	r3, [pc, #760]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x21bc>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	4bbb      	ldr	r3, [pc, #748]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x21bc>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
        lambda_3_hat     += d_lambda_3_hat * dt;
 8002ba2:	4bbb      	ldr	r3, [pc, #748]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x21c0>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002bac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bb0:	4bb8      	ldr	r3, [pc, #736]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x21c4>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	4bb6      	ldr	r3, [pc, #728]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x21c4>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
        lambda_4_hat     += d_lambda_4_hat * dt;
 8002bc0:	4bb5      	ldr	r3, [pc, #724]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x21c8>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002bca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bce:	4bb3      	ldr	r3, [pc, #716]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	4bb0      	ldr	r3, [pc, #704]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x21cc>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
        lambda_1_hat_acc += d_lambda_1_hat_acc * dt;
 8002bde:	4bb0      	ldr	r3, [pc, #704]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x21d0>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bec:	4bad      	ldr	r3, [pc, #692]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x21d4>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	4bab      	ldr	r3, [pc, #684]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x21d4>)
 8002bf8:	edc3 7a00 	vstr	s15, [r3]
        lambda_2_hat_acc += d_lambda_2_hat_acc * dt;
 8002bfc:	4baa      	ldr	r3, [pc, #680]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x21d8>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002c06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c0a:	4ba8      	ldr	r3, [pc, #672]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x21dc>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	4ba5      	ldr	r3, [pc, #660]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x21dc>)
 8002c16:	edc3 7a00 	vstr	s15, [r3]
        lambda_3_hat_acc += d_lambda_3_hat_acc * dt;
 8002c1a:	4ba5      	ldr	r3, [pc, #660]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x21e0>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002c24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c28:	4ba2      	ldr	r3, [pc, #648]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x21e4>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c32:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x21e4>)
 8002c34:	edc3 7a00 	vstr	s15, [r3]
        lambda_4_hat_acc += d_lambda_4_hat_acc * dt;
 8002c38:	4b90      	ldr	r3, [pc, #576]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x21ac>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002c42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c46:	4b9c      	ldr	r3, [pc, #624]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x21e8>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c50:	4b99      	ldr	r3, [pc, #612]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x21e8>)
 8002c52:	edc3 7a00 	vstr	s15, [r3]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 8002c56:	4b99      	ldr	r3, [pc, #612]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x21ec>)
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	4b98      	ldr	r3, [pc, #608]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x21f0>)
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c66:	4b97      	ldr	r3, [pc, #604]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x21f4>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b95      	ldr	r3, [pc, #596]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x21f8>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002ecc <HAL_TIM_PeriodElapsedCallback+0x21fc>
 8002c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c82:	4b93      	ldr	r3, [pc, #588]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x2200>)
 8002c84:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 8002c88:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x21ec>)
 8002c8a:	ed93 7a00 	vldr	s14, [r3]
 8002c8e:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x21f0>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c98:	4b8a      	ldr	r3, [pc, #552]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x21f4>)
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca2:	4b89      	ldr	r3, [pc, #548]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x21f8>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cac:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002ecc <HAL_TIM_PeriodElapsedCallback+0x21fc>
 8002cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb4:	4b87      	ldr	r3, [pc, #540]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x2204>)
 8002cb6:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = yaw_rate;
 8002cba:	4b87      	ldr	r3, [pc, #540]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x2208>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a87      	ldr	r2, [pc, #540]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x220c>)
 8002cc0:	6013      	str	r3, [r2, #0]
        x_res   += vx_res   * dt;// [m]
 8002cc2:	4b83      	ldr	r3, [pc, #524]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x2200>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd0:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2210>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	4b81      	ldr	r3, [pc, #516]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2210>)
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 8002ce0:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x2204>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002cea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x2214>)
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	4b7a      	ldr	r3, [pc, #488]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x2214>)
 8002cfa:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 8002cfe:	4b77      	ldr	r3, [pc, #476]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x220c>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002e78 <HAL_TIM_PeriodElapsedCallback+0x21a8>
 8002d08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d0c:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2218>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d16:	4b74      	ldr	r3, [pc, #464]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2218>)
 8002d18:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8002d1c:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x221c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	b25a      	sxtb	r2, r3
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2220>)
 8002d34:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2224>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	b25a      	sxtb	r2, r3
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2228>)
 8002d4e:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x222c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	b25a      	sxtb	r2, r3
 8002d66:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x2230>)
 8002d68:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8002d6a:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x2234>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	b25a      	sxtb	r2, r3
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x2238>)
 8002d82:	701a      	strb	r2, [r3, #0]
        vy_cmd = 0.3;
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x223c>)
 8002d86:	4a62      	ldr	r2, [pc, #392]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x2240>)
 8002d88:	601a      	str	r2, [r3, #0]
        dtheta1_cmd =  20.0 * vx_cmd + 20.0 * vy_cmd - 6.0 * dphi_cmd;// [rad/sec]
 8002d8a:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x2244>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d94:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002d98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x223c>)
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da6:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002daa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002dae:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002db2:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x2248>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dbc:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002dc0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002dc4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x224c>)
 8002dce:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_cmd = -20.0 * vx_cmd + 20.0 * vy_cmd - 6.0 * dphi_cmd;
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x2244>)
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ddc:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 8002de0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002de4:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x223c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dee:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002df2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002df6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x2248>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e04:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002e08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002e0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e14:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x2250>)
 8002e16:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_cmd =  20.0 * vx_cmd + 20.0 * vy_cmd + 6.0 * dphi_cmd;
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x2244>)
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e24:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002e28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x223c>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e36:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002e3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002e3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x2248>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e4c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002e50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0x2254>)
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_cmd = -20.0 * vx_cmd + 20.0 * vy_cmd + 6.0 * dphi_cmd;
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x2244>)
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	e05e      	b.n	8002f28 <HAL_TIM_PeriodElapsedCallback+0x2258>
 8002e6a:	bf00      	nop
 8002e6c:	20000284 	.word	0x20000284
 8002e70:	3d4ccccd 	.word	0x3d4ccccd
 8002e74:	20000488 	.word	0x20000488
 8002e78:	3a83126f 	.word	0x3a83126f
 8002e7c:	20000478 	.word	0x20000478
 8002e80:	20000438 	.word	0x20000438
 8002e84:	20000428 	.word	0x20000428
 8002e88:	2000043c 	.word	0x2000043c
 8002e8c:	2000042c 	.word	0x2000042c
 8002e90:	20000440 	.word	0x20000440
 8002e94:	20000430 	.word	0x20000430
 8002e98:	20000444 	.word	0x20000444
 8002e9c:	20000434 	.word	0x20000434
 8002ea0:	2000046c 	.word	0x2000046c
 8002ea4:	2000045c 	.word	0x2000045c
 8002ea8:	20000470 	.word	0x20000470
 8002eac:	20000460 	.word	0x20000460
 8002eb0:	20000474 	.word	0x20000474
 8002eb4:	20000464 	.word	0x20000464
 8002eb8:	20000468 	.word	0x20000468
 8002ebc:	20000258 	.word	0x20000258
 8002ec0:	2000025c 	.word	0x2000025c
 8002ec4:	20000260 	.word	0x20000260
 8002ec8:	20000264 	.word	0x20000264
 8002ecc:	3c4ccccd 	.word	0x3c4ccccd
 8002ed0:	200002fc 	.word	0x200002fc
 8002ed4:	20000300 	.word	0x20000300
 8002ed8:	200003d0 	.word	0x200003d0
 8002edc:	20000304 	.word	0x20000304
 8002ee0:	20000308 	.word	0x20000308
 8002ee4:	2000030c 	.word	0x2000030c
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	2003d358 	.word	0x2003d358
 8002ef0:	20000232 	.word	0x20000232
 8002ef4:	2003d2f4 	.word	0x2003d2f4
 8002ef8:	20000233 	.word	0x20000233
 8002efc:	2003cd60 	.word	0x2003cd60
 8002f00:	20000234 	.word	0x20000234
 8002f04:	2003cda0 	.word	0x2003cda0
 8002f08:	20000235 	.word	0x20000235
 8002f0c:	200002f4 	.word	0x200002f4
 8002f10:	3e99999a 	.word	0x3e99999a
 8002f14:	200002f0 	.word	0x200002f0
 8002f18:	200002f8 	.word	0x200002f8
 8002f1c:	200002a8 	.word	0x200002a8
 8002f20:	200002ac 	.word	0x200002ac
 8002f24:	200002b0 	.word	0x200002b0
 8002f28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f2c:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 8002f30:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f34:	4bd7      	ldr	r3, [pc, #860]	; (8003294 <HAL_TIM_PeriodElapsedCallback+0x25c4>)
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f3e:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002f42:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002f46:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002f4a:	4bd3      	ldr	r3, [pc, #844]	; (8003298 <HAL_TIM_PeriodElapsedCallback+0x25c8>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f54:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002f58:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002f5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f64:	4bcd      	ldr	r3, [pc, #820]	; (800329c <HAL_TIM_PeriodElapsedCallback+0x25cc>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref = Kp_av * (dtheta3_cmd - dtheta3_res);
 8002f6a:	4bcd      	ldr	r3, [pc, #820]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x25d0>)
 8002f6c:	ed93 7a00 	vldr	s14, [r3]
 8002f70:	4bcc      	ldr	r3, [pc, #816]	; (80032a4 <HAL_TIM_PeriodElapsedCallback+0x25d4>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f82:	4bc9      	ldr	r3, [pc, #804]	; (80032a8 <HAL_TIM_PeriodElapsedCallback+0x25d8>)
 8002f84:	edc3 7a00 	vstr	s15, [r3]
        i1_ref = M11*ddtheta1_ref / ( Gear * Ktn );
 8002f88:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 8002f8c:	4bc8      	ldr	r3, [pc, #800]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x25e0>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f96:	eddf 6ac7 	vldr	s13, [pc, #796]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 8002f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f9e:	4bc6      	ldr	r3, [pc, #792]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0x25e8>)
 8002fa0:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = M22*ddtheta2_ref / ( Gear * Ktn );
 8002fa4:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 8002fa8:	4bc4      	ldr	r3, [pc, #784]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x25ec>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb2:	eddf 6ac0 	vldr	s13, [pc, #768]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 8002fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fba:	4bc1      	ldr	r3, [pc, #772]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x25f0>)
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = M33*ddtheta3_ref / ( Gear * Ktn );
 8002fc0:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 8002fc4:	4bb8      	ldr	r3, [pc, #736]	; (80032a8 <HAL_TIM_PeriodElapsedCallback+0x25d8>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fce:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 8002fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fd6:	4bbb      	ldr	r3, [pc, #748]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x25f4>)
 8002fd8:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = M44*ddtheta4_ref / ( Gear * Ktn );
 8002fdc:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 8002fe0:	4bb9      	ldr	r3, [pc, #740]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x25f8>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fea:	eddf 6ab2 	vldr	s13, [pc, #712]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 8002fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff2:	4bb6      	ldr	r3, [pc, #728]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x25fc>)
 8002ff4:	edc3 7a00 	vstr	s15, [r3]
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 8002ff8:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 8002ffc:	eddf 7ab5 	vldr	s15, [pc, #724]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003008:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800300c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003010:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003014:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003018:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 800301c:	eddf 7aad 	vldr	s15, [pc, #692]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 8003020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003024:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80032d8 <HAL_TIM_PeriodElapsedCallback+0x2608>
 8003028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80032dc <HAL_TIM_PeriodElapsedCallback+0x260c>
 8003030:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003034:	4baa      	ldr	r3, [pc, #680]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x2610>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303e:	4ba9      	ldr	r3, [pc, #676]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x2614>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003048:	eddf 5a98 	vldr	s11, [pc, #608]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 800304c:	eddf 7aa1 	vldr	s15, [pc, #644]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 8003050:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003054:	4ba4      	ldr	r3, [pc, #656]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x2618>)
 8003056:	ed93 5a00 	vldr	s10, [r3]
 800305a:	4ba4      	ldr	r3, [pc, #656]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x261c>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003064:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003070:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003074:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003078:	4b9d      	ldr	r3, [pc, #628]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x2620>)
 800307a:	edc3 7a00 	vstr	s15, [r3]
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 800307e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 8003082:	eddf 7a94 	vldr	s15, [pc, #592]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800308e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003092:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003096:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800309a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800309e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 80030a2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80032d8 <HAL_TIM_PeriodElapsedCallback+0x2608>
 80030ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80032dc <HAL_TIM_PeriodElapsedCallback+0x260c>
 80030b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ba:	4b8e      	ldr	r3, [pc, #568]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x2624>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c4:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x2628>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ce:	eddf 5a77 	vldr	s11, [pc, #476]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 80030d2:	eddf 7a80 	vldr	s15, [pc, #512]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 80030d6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x262c>)
 80030dc:	ed93 5a00 	vldr	s10, [r3]
 80030e0:	4b87      	ldr	r3, [pc, #540]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x2630>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	ee75 7a67 	vsub.f32	s15, s10, s15
 80030ea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80030ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80030fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x2634>)
 8003100:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 8003104:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 8003108:	eddf 7a72 	vldr	s15, [pc, #456]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 800310c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003110:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003114:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003118:	ee37 7b06 	vadd.f64	d7, d7, d6
 800311c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003120:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003124:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 8003128:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 800312c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003130:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80032d8 <HAL_TIM_PeriodElapsedCallback+0x2608>
 8003134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003138:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80032dc <HAL_TIM_PeriodElapsedCallback+0x260c>
 800313c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003140:	4b71      	ldr	r3, [pc, #452]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x2638>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314a:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x263c>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003154:	eddf 5a55 	vldr	s11, [pc, #340]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 8003158:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 800315c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_TIM_PeriodElapsedCallback+0x25d4>)
 8003162:	ed93 5a00 	vldr	s10, [r3]
 8003166:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x2640>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003170:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800317c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003180:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003184:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x2644>)
 8003186:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 800318a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 800318e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800319e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031a2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80031a6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80031aa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80032d0 <HAL_TIM_PeriodElapsedCallback+0x2600>
 80031ae:	eddf 7a49 	vldr	s15, [pc, #292]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80032d8 <HAL_TIM_PeriodElapsedCallback+0x2608>
 80031ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031be:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80032dc <HAL_TIM_PeriodElapsedCallback+0x260c>
 80031c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x2648>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d0:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x264c>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80032ac <HAL_TIM_PeriodElapsedCallback+0x25dc>
 80031de:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80032d4 <HAL_TIM_PeriodElapsedCallback+0x2604>
 80031e2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80031e6:	4b4e      	ldr	r3, [pc, #312]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x2650>)
 80031e8:	ed93 5a00 	vldr	s10, [r3]
 80031ec:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x2654>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ee75 7a67 	vsub.f32	s15, s10, s15
 80031f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003202:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003206:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x2658>)
 800320c:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 8003210:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x2620>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a33      	ldr	r2, [pc, #204]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x2614>)
 8003216:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x2634>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x2628>)
 800321e:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 8003220:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x2644>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a39      	ldr	r2, [pc, #228]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x263c>)
 8003226:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x2658>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a3b      	ldr	r2, [pc, #236]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x264c>)
 800322e:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x2610>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3d      	ldr	r2, [pc, #244]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x265c>)
 8003236:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x2624>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x2660>)
 800323e:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x2638>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x2664>)
 8003246:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 8003248:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x2648>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3a      	ldr	r2, [pc, #232]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x2668>)
 800324e:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x2620>)
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	eddf 6a17 	vldr	s13, [pc, #92]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 800325a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x266c>)
 8003260:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x2634>)
 8003266:	ed93 7a00 	vldr	s14, [r3]
 800326a:	eddf 6a12 	vldr	s13, [pc, #72]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 800326e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0x2670>)
 8003274:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x2644>)
 800327a:	ed93 7a00 	vldr	s14, [r3]
 800327e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80032b4 <HAL_TIM_PeriodElapsedCallback+0x25e4>
 8003282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003286:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x2674>)
 8003288:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x2658>)
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	e05b      	b.n	800334c <HAL_TIM_PeriodElapsedCallback+0x267c>
 8003294:	200002f4 	.word	0x200002f4
 8003298:	200002f8 	.word	0x200002f8
 800329c:	200002b4 	.word	0x200002b4
 80032a0:	200002b0 	.word	0x200002b0
 80032a4:	20000260 	.word	0x20000260
 80032a8:	200002a0 	.word	0x200002a0
 80032ac:	3b8a4bfc 	.word	0x3b8a4bfc
 80032b0:	20000298 	.word	0x20000298
 80032b4:	3f5b8bac 	.word	0x3f5b8bac
 80032b8:	200002b8 	.word	0x200002b8
 80032bc:	2000029c 	.word	0x2000029c
 80032c0:	200002bc 	.word	0x200002bc
 80032c4:	200002c0 	.word	0x200002c0
 80032c8:	200002a4 	.word	0x200002a4
 80032cc:	200002c4 	.word	0x200002c4
 80032d0:	3a83126f 	.word	0x3a83126f
 80032d4:	42480000 	.word	0x42480000
 80032d8:	42800000 	.word	0x42800000
 80032dc:	3c5b8bac 	.word	0x3c5b8bac
 80032e0:	200002c8 	.word	0x200002c8
 80032e4:	20000340 	.word	0x20000340
 80032e8:	20000258 	.word	0x20000258
 80032ec:	20000268 	.word	0x20000268
 80032f0:	20000330 	.word	0x20000330
 80032f4:	200002cc 	.word	0x200002cc
 80032f8:	20000344 	.word	0x20000344
 80032fc:	2000025c 	.word	0x2000025c
 8003300:	2000026c 	.word	0x2000026c
 8003304:	20000334 	.word	0x20000334
 8003308:	200002d0 	.word	0x200002d0
 800330c:	20000348 	.word	0x20000348
 8003310:	20000270 	.word	0x20000270
 8003314:	20000338 	.word	0x20000338
 8003318:	200002d4 	.word	0x200002d4
 800331c:	2000034c 	.word	0x2000034c
 8003320:	20000264 	.word	0x20000264
 8003324:	20000274 	.word	0x20000274
 8003328:	2000033c 	.word	0x2000033c
 800332c:	200002d8 	.word	0x200002d8
 8003330:	200002dc 	.word	0x200002dc
 8003334:	200002e0 	.word	0x200002e0
 8003338:	200002e4 	.word	0x200002e4
 800333c:	20000350 	.word	0x20000350
 8003340:	20000354 	.word	0x20000354
 8003344:	20000358 	.word	0x20000358
 8003348:	3f5b8bac 	.word	0x3f5b8bac
 800334c:	ed5f 6a02 	vldr	s13, [pc, #-8]	; 8003348 <HAL_TIM_PeriodElapsedCallback+0x2678>
 8003350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003354:	4bb9      	ldr	r3, [pc, #740]	; (800363c <HAL_TIM_PeriodElapsedCallback+0x296c>)
 8003356:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res - M12 * G_DFOB * dtheta2_res - M13 * G_DFOB * dtheta3_res - M14 * G_DFOB * dtheta4_res;// * Continuous
 800335a:	4bb9      	ldr	r3, [pc, #740]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x2970>)
 800335c:	ed93 7a00 	vldr	s14, [r3]
 8003360:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8003644 <HAL_TIM_PeriodElapsedCallback+0x2974>
 8003364:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 8003368:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800336c:	4bb7      	ldr	r3, [pc, #732]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x297c>)
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800337a:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8003650 <HAL_TIM_PeriodElapsedCallback+0x2980>
 800337e:	eddf 7ab2 	vldr	s15, [pc, #712]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 8003382:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003386:	4bb3      	ldr	r3, [pc, #716]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x2984>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003390:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003394:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8003658 <HAL_TIM_PeriodElapsedCallback+0x2988>
 8003398:	eddf 7aab 	vldr	s15, [pc, #684]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 800339c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033a0:	4bae      	ldr	r3, [pc, #696]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x298c>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ae:	eddf 6aac 	vldr	s13, [pc, #688]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x2990>
 80033b2:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 80033b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033ba:	4baa      	ldr	r3, [pc, #680]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c8:	4ba7      	ldr	r3, [pc, #668]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x2998>)
 80033ca:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob2 = integral_tau_dfob2 - M21 * G_DFOB * dtheta1_res - M22 * G_DFOB * dtheta2_res - M23 * G_DFOB * dtheta3_res - M24 * G_DFOB * dtheta4_res;// * Continuous
 80033ce:	4ba7      	ldr	r3, [pc, #668]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x299c>)
 80033d0:	ed93 7a00 	vldr	s14, [r3]
 80033d4:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8003650 <HAL_TIM_PeriodElapsedCallback+0x2980>
 80033d8:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 80033dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033e0:	4b9a      	ldr	r3, [pc, #616]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x297c>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ee:	eddf 6a95 	vldr	s13, [pc, #596]	; 8003644 <HAL_TIM_PeriodElapsedCallback+0x2974>
 80033f2:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 80033f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033fa:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x2984>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003408:	eddf 6a95 	vldr	s13, [pc, #596]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x2990>
 800340c:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 8003410:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003414:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x298c>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003422:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8003658 <HAL_TIM_PeriodElapsedCallback+0x2988>
 8003426:	eddf 7a88 	vldr	s15, [pc, #544]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 800342a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800342e:	4b8d      	ldr	r3, [pc, #564]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343c:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x29a0>)
 800343e:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M31 * G_DFOB * dtheta1_res - M32 * G_DFOB * dtheta2_res - M33 * G_DFOB * dtheta3_res - M34 * G_DFOB * dtheta4_res;// * Continuous
 8003442:	4b8c      	ldr	r3, [pc, #560]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x29a4>)
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	eddf 6a83 	vldr	s13, [pc, #524]	; 8003658 <HAL_TIM_PeriodElapsedCallback+0x2988>
 800344c:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 8003450:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003454:	4b7d      	ldr	r3, [pc, #500]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x297c>)
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003462:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x2990>
 8003466:	eddf 7a78 	vldr	s15, [pc, #480]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 800346a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800346e:	4b79      	ldr	r3, [pc, #484]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x2984>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800347c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8003644 <HAL_TIM_PeriodElapsedCallback+0x2974>
 8003480:	eddf 7a71 	vldr	s15, [pc, #452]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 8003484:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003488:	4b74      	ldr	r3, [pc, #464]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x298c>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003492:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003496:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003650 <HAL_TIM_PeriodElapsedCallback+0x2980>
 800349a:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 800349e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	4b71      	ldr	r3, [pc, #452]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x29a8>)
 80034b2:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M41 * G_DFOB * dtheta1_res - M42 * G_DFOB * dtheta2_res - M43 * G_DFOB * dtheta3_res - M44 * G_DFOB * dtheta4_res;// * Continuous
 80034b6:	4b71      	ldr	r3, [pc, #452]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x29ac>)
 80034b8:	ed93 7a00 	vldr	s14, [r3]
 80034bc:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x2990>
 80034c0:	eddf 7a61 	vldr	s15, [pc, #388]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 80034c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034c8:	4b60      	ldr	r3, [pc, #384]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x297c>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d6:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003658 <HAL_TIM_PeriodElapsedCallback+0x2988>
 80034da:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 80034de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x2984>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034f0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003650 <HAL_TIM_PeriodElapsedCallback+0x2980>
 80034f4:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 80034f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034fc:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x298c>)
 80034fe:	edd3 7a00 	vldr	s15, [r3]
 8003502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800350a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003644 <HAL_TIM_PeriodElapsedCallback+0x2974>
 800350e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x2978>
 8003512:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003516:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>)
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x29b0>)
 8003526:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 800352a:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x29b4>)
 800352c:	f993 3000 	ldrsb.w	r3, [r3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_TIM_PeriodElapsedCallback+0x286a>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d00f      	beq.n	8003558 <HAL_TIM_PeriodElapsedCallback+0x2888>
 8003538:	e01d      	b.n	8003576 <HAL_TIM_PeriodElapsedCallback+0x28a6>
            tau_fric1 = F1_plus + D1_plus * dtheta1_res;
 800353a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003688 <HAL_TIM_PeriodElapsedCallback+0x29b8>
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x297c>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800368c <HAL_TIM_PeriodElapsedCallback+0x29bc>
 800354c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x29c0>)
 8003552:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003556:	e00e      	b.n	8003576 <HAL_TIM_PeriodElapsedCallback+0x28a6>
            tau_fric1 = F1_minus + D1_minus * dtheta1_res;
 8003558:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003694 <HAL_TIM_PeriodElapsedCallback+0x29c4>
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x297c>)
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003698 <HAL_TIM_PeriodElapsedCallback+0x29c8>
 800356a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800356e:	4b48      	ldr	r3, [pc, #288]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x29c0>)
 8003570:	edc3 7a00 	vstr	s15, [r3]
            break;
 8003574:	bf00      	nop
        switch(direc2){
 8003576:	4b49      	ldr	r3, [pc, #292]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x29cc>)
 8003578:	f993 3000 	ldrsb.w	r3, [r3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_TIM_PeriodElapsedCallback+0x28b6>
 8003580:	2b01      	cmp	r3, #1
 8003582:	d00f      	beq.n	80035a4 <HAL_TIM_PeriodElapsedCallback+0x28d4>
 8003584:	e01d      	b.n	80035c2 <HAL_TIM_PeriodElapsedCallback+0x28f2>
            tau_fric2 = F2_plus + D2_plus * dtheta2_res;
 8003586:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80036a0 <HAL_TIM_PeriodElapsedCallback+0x29d0>
 800358a:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x2984>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80036a4 <HAL_TIM_PeriodElapsedCallback+0x29d4>
 8003598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800359c:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x29d8>)
 800359e:	edc3 7a00 	vstr	s15, [r3]
            break;
 80035a2:	e00e      	b.n	80035c2 <HAL_TIM_PeriodElapsedCallback+0x28f2>
            tau_fric2 = F2_minus + D2_minus * dtheta2_res;
 80035a4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x29dc>
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x2984>)
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80036b0 <HAL_TIM_PeriodElapsedCallback+0x29e0>
 80035b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x29d8>)
 80035bc:	edc3 7a00 	vstr	s15, [r3]
            break;
 80035c0:	bf00      	nop
        switch(direc3){
 80035c2:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x29e4>)
 80035c4:	f993 3000 	ldrsb.w	r3, [r3]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_TIM_PeriodElapsedCallback+0x2902>
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d00f      	beq.n	80035f0 <HAL_TIM_PeriodElapsedCallback+0x2920>
 80035d0:	e01d      	b.n	800360e <HAL_TIM_PeriodElapsedCallback+0x293e>
            tau_fric3 = F3_plus + D3_plus * dtheta3_res;
 80035d2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80036b8 <HAL_TIM_PeriodElapsedCallback+0x29e8>
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x298c>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80036bc <HAL_TIM_PeriodElapsedCallback+0x29ec>
 80035e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x29f0>)
 80035ea:	edc3 7a00 	vstr	s15, [r3]
            break;
 80035ee:	e00e      	b.n	800360e <HAL_TIM_PeriodElapsedCallback+0x293e>
            tau_fric3 = F3_minus + D3_minus * dtheta3_res;
 80035f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80036c4 <HAL_TIM_PeriodElapsedCallback+0x29f4>
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x298c>)
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80036c8 <HAL_TIM_PeriodElapsedCallback+0x29f8>
 8003602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003606:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x29f0>)
 8003608:	edc3 7a00 	vstr	s15, [r3]
            break;
 800360c:	bf00      	nop
        switch(direc4){
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0x29fc>)
 8003610:	f993 3000 	ldrsb.w	r3, [r3]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_TIM_PeriodElapsedCallback+0x294e>
 8003618:	2b01      	cmp	r3, #1
 800361a:	d061      	beq.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x2a10>
 800361c:	e06f      	b.n	80036fe <HAL_TIM_PeriodElapsedCallback+0x2a2e>
            tau_fric4 = F4_plus + D4_plus * dtheta4_res;
 800361e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80036d0 <HAL_TIM_PeriodElapsedCallback+0x2a00>
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x2994>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80036d4 <HAL_TIM_PeriodElapsedCallback+0x2a04>
 8003630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_TIM_PeriodElapsedCallback+0x2a08>)
 8003636:	edc3 7a00 	vstr	s15, [r3]
            break;
 800363a:	e060      	b.n	80036fe <HAL_TIM_PeriodElapsedCallback+0x2a2e>
 800363c:	2000035c 	.word	0x2000035c
 8003640:	20000380 	.word	0x20000380
 8003644:	3b8a4bfc 	.word	0x3b8a4bfc
 8003648:	42480000 	.word	0x42480000
 800364c:	20000258 	.word	0x20000258
 8003650:	39220502 	.word	0x39220502
 8003654:	2000025c 	.word	0x2000025c
 8003658:	3aceaa7d 	.word	0x3aceaa7d
 800365c:	20000260 	.word	0x20000260
 8003660:	b9220502 	.word	0xb9220502
 8003664:	20000264 	.word	0x20000264
 8003668:	20000360 	.word	0x20000360
 800366c:	20000384 	.word	0x20000384
 8003670:	20000364 	.word	0x20000364
 8003674:	20000388 	.word	0x20000388
 8003678:	20000368 	.word	0x20000368
 800367c:	2000038c 	.word	0x2000038c
 8003680:	2000036c 	.word	0x2000036c
 8003684:	20000232 	.word	0x20000232
 8003688:	3a03126f 	.word	0x3a03126f
 800368c:	3c8db8bb 	.word	0x3c8db8bb
 8003690:	200003ac 	.word	0x200003ac
 8003694:	3a1d4952 	.word	0x3a1d4952
 8003698:	bd2dab9f 	.word	0xbd2dab9f
 800369c:	20000233 	.word	0x20000233
 80036a0:	39d1b717 	.word	0x39d1b717
 80036a4:	3ca8c155 	.word	0x3ca8c155
 80036a8:	200003b0 	.word	0x200003b0
 80036ac:	36eae18b 	.word	0x36eae18b
 80036b0:	bd571d1d 	.word	0xbd571d1d
 80036b4:	20000234 	.word	0x20000234
 80036b8:	3a902de0 	.word	0x3a902de0
 80036bc:	3d202752 	.word	0x3d202752
 80036c0:	200003b4 	.word	0x200003b4
 80036c4:	3b09a027 	.word	0x3b09a027
 80036c8:	bd81a36e 	.word	0xbd81a36e
 80036cc:	20000235 	.word	0x20000235
 80036d0:	3a9d4952 	.word	0x3a9d4952
 80036d4:	3ce21965 	.word	0x3ce21965
 80036d8:	200003b8 	.word	0x200003b8
 80036dc:	3a83126f 	.word	0x3a83126f
            tau_fric4 = F4_minus + D4_minus * dtheta4_res;
 80036e0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80036dc <HAL_TIM_PeriodElapsedCallback+0x2a0c>
 80036e4:	4bde      	ldr	r3, [pc, #888]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	ed9f 7add 	vldr	s14, [pc, #884]	; 8003a64 <HAL_TIM_PeriodElapsedCallback+0x2d94>
 80036f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036f6:	4bdc      	ldr	r3, [pc, #880]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x2d98>)
 80036f8:	edc3 7a00 	vstr	s15, [r3]
            break;
 80036fc:	bf00      	nop
        if( dtheta1_res < 0.5 && dtheta1_res > -0.5 ) tau_fric1 = 0.0;
 80036fe:	4bdb      	ldr	r3, [pc, #876]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>)
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d50d      	bpl.n	800372e <HAL_TIM_PeriodElapsedCallback+0x2a5e>
 8003712:	4bd6      	ldr	r3, [pc, #856]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	dd03      	ble.n	800372e <HAL_TIM_PeriodElapsedCallback+0x2a5e>
 8003726:	4bd2      	ldr	r3, [pc, #840]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x2da0>)
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
        if( dtheta2_res < 0.5 && dtheta2_res > -0.5 ) tau_fric2 = 0.0;
 800372e:	4bd1      	ldr	r3, [pc, #836]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x2da4>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	d50d      	bpl.n	800375e <HAL_TIM_PeriodElapsedCallback+0x2a8e>
 8003742:	4bcc      	ldr	r3, [pc, #816]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x2da4>)
 8003744:	edd3 7a00 	vldr	s15, [r3]
 8003748:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800374c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003754:	dd03      	ble.n	800375e <HAL_TIM_PeriodElapsedCallback+0x2a8e>
 8003756:	4bc8      	ldr	r3, [pc, #800]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x2da8>)
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
        if( dtheta3_res < 0.5 && dtheta3_res > -0.5 ) tau_fric3 = 0.0;
 800375e:	4bc7      	ldr	r3, [pc, #796]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x2dac>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	d50d      	bpl.n	800378e <HAL_TIM_PeriodElapsedCallback+0x2abe>
 8003772:	4bc2      	ldr	r3, [pc, #776]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x2dac>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800377c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	dd03      	ble.n	800378e <HAL_TIM_PeriodElapsedCallback+0x2abe>
 8003786:	4bbe      	ldr	r3, [pc, #760]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x2db0>)
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
        if( dtheta4_res < 0.5 && dtheta4_res > -0.5 ) tau_fric4 = 0.0;
 800378e:	4bb4      	ldr	r3, [pc, #720]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a0:	d50d      	bpl.n	80037be <HAL_TIM_PeriodElapsedCallback+0x2aee>
 80037a2:	4baf      	ldr	r3, [pc, #700]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80037ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	dd03      	ble.n	80037be <HAL_TIM_PeriodElapsedCallback+0x2aee>
 80037b6:	4bac      	ldr	r3, [pc, #688]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x2d98>)
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
        integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11*G_DFOB*dtheta1_res + M12*G_DFOB*dtheta2_res + M13*G_DFOB*dtheta3_res + M14*G_DFOB*dtheta4_res - tau_fric1 - integral_tau_dfob1) * G_DFOB * dt;
 80037be:	4bb1      	ldr	r3, [pc, #708]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x2db4>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003a88 <HAL_TIM_PeriodElapsedCallback+0x2db8>
 80037c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037cc:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8003a8c <HAL_TIM_PeriodElapsedCallback+0x2dbc>
 80037d0:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80037d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037d8:	4ba4      	ldr	r3, [pc, #656]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e6:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003a94 <HAL_TIM_PeriodElapsedCallback+0x2dc4>
 80037ea:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80037ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037f2:	4ba0      	ldr	r3, [pc, #640]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x2da4>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003800:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x2dc8>
 8003804:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003808:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800380c:	4b9b      	ldr	r3, [pc, #620]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x2dac>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381a:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003a9c <HAL_TIM_PeriodElapsedCallback+0x2dcc>
 800381e:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003822:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003826:	4b8e      	ldr	r3, [pc, #568]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003834:	4b8e      	ldr	r3, [pc, #568]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x2da0>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800383e:	4b98      	ldr	r3, [pc, #608]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x2dd0>)
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003848:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 800384c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003850:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003aa4 <HAL_TIM_PeriodElapsedCallback+0x2dd4>
 8003854:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003858:	4b91      	ldr	r3, [pc, #580]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x2dd0>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003862:	4b8f      	ldr	r3, [pc, #572]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x2dd0>)
 8003864:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M21*G_DFOB*dtheta1_res + M22*G_DFOB*dtheta2_res + M23*G_DFOB*dtheta3_res + M24*G_DFOB*dtheta4_res - tau_fric2 - integral_tau_dfob2) * G_DFOB * dt;
 8003868:	4b8f      	ldr	r3, [pc, #572]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x2dd8>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003a88 <HAL_TIM_PeriodElapsedCallback+0x2db8>
 8003872:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003876:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003a94 <HAL_TIM_PeriodElapsedCallback+0x2dc4>
 800387a:	eddf 7a85 	vldr	s15, [pc, #532]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 800387e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003882:	4b7a      	ldr	r3, [pc, #488]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>)
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003890:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003a8c <HAL_TIM_PeriodElapsedCallback+0x2dbc>
 8003894:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003898:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800389c:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x2da4>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038aa:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003a9c <HAL_TIM_PeriodElapsedCallback+0x2dcc>
 80038ae:	eddf 7a78 	vldr	s15, [pc, #480]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80038b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038b6:	4b71      	ldr	r3, [pc, #452]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x2dac>)
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c4:	eddf 6a74 	vldr	s13, [pc, #464]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x2dc8>
 80038c8:	eddf 7a71 	vldr	s15, [pc, #452]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80038cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038d0:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038de:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x2da8>)
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038e8:	4b70      	ldr	r3, [pc, #448]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80038f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fa:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003aa4 <HAL_TIM_PeriodElapsedCallback+0x2dd4>
 80038fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003902:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390c:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2ddc>)
 800390e:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M31*G_DFOB*dtheta1_res + M32*G_DFOB*dtheta2_res + M33*G_DFOB*dtheta3_res + M34*G_DFOB*dtheta4_res - tau_fric3 - integral_tau_dfob3) * G_DFOB * dt;
 8003912:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x2de0>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003a88 <HAL_TIM_PeriodElapsedCallback+0x2db8>
 800391c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003920:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x2dc8>
 8003924:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003928:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>)
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800393a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a9c <HAL_TIM_PeriodElapsedCallback+0x2dcc>
 800393e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003942:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003946:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x2da4>)
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003954:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8003a8c <HAL_TIM_PeriodElapsedCallback+0x2dbc>
 8003958:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 800395c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003960:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x2dac>)
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800396e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003a94 <HAL_TIM_PeriodElapsedCallback+0x2dc4>
 8003972:	eddf 7a47 	vldr	s15, [pc, #284]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003976:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x2db0>)
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003992:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2de4>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800399c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80039a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003aa4 <HAL_TIM_PeriodElapsedCallback+0x2dd4>
 80039a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2de4>)
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b6:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2de4>)
 80039b8:	edc3 7a00 	vstr	s15, [r3]
        integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M41*G_DFOB*dtheta1_res + M42*G_DFOB*dtheta2_res + M43*G_DFOB*dtheta3_res + M44*G_DFOB*dtheta4_res - tau_fric4 - integral_tau_dfob4) * G_DFOB * dt;
 80039bc:	4b3e      	ldr	r3, [pc, #248]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2de8>)
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003a88 <HAL_TIM_PeriodElapsedCallback+0x2db8>
 80039c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039ca:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003a9c <HAL_TIM_PeriodElapsedCallback+0x2dcc>
 80039ce:	eddf 7a30 	vldr	s15, [pc, #192]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80039d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039d6:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d9c>)
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x2dc8>
 80039e8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 80039ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039f0:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x2da4>)
 80039f2:	edd3 7a00 	vldr	s15, [r3]
 80039f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039fe:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003a94 <HAL_TIM_PeriodElapsedCallback+0x2dc4>
 8003a02:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003a06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x2dac>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a18:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003a8c <HAL_TIM_PeriodElapsedCallback+0x2dbc>
 8003a1c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2d90>)
 8003a26:	edd3 7a00 	vldr	s15, [r3]
 8003a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x2d98>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x2dec>)
 8003a3e:	edd3 7a00 	vldr	s15, [r3]
 8003a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a46:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x2dc0>
 8003a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a4e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003aa4 <HAL_TIM_PeriodElapsedCallback+0x2dd4>
 8003a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x2dec>)
 8003a58:	edd3 7a00 	vldr	s15, [r3]
 8003a5c:	e030      	b.n	8003ac0 <HAL_TIM_PeriodElapsedCallback+0x2df0>
 8003a5e:	bf00      	nop
 8003a60:	20000264 	.word	0x20000264
 8003a64:	bd87fcb9 	.word	0xbd87fcb9
 8003a68:	200003b8 	.word	0x200003b8
 8003a6c:	20000258 	.word	0x20000258
 8003a70:	200003ac 	.word	0x200003ac
 8003a74:	2000025c 	.word	0x2000025c
 8003a78:	200003b0 	.word	0x200003b0
 8003a7c:	20000260 	.word	0x20000260
 8003a80:	200003b4 	.word	0x200003b4
 8003a84:	200002c8 	.word	0x200002c8
 8003a88:	3f5b8bac 	.word	0x3f5b8bac
 8003a8c:	3b8a4bfc 	.word	0x3b8a4bfc
 8003a90:	42480000 	.word	0x42480000
 8003a94:	39220502 	.word	0x39220502
 8003a98:	3aceaa7d 	.word	0x3aceaa7d
 8003a9c:	b9220502 	.word	0xb9220502
 8003aa0:	20000380 	.word	0x20000380
 8003aa4:	3a83126f 	.word	0x3a83126f
 8003aa8:	200002cc 	.word	0x200002cc
 8003aac:	20000384 	.word	0x20000384
 8003ab0:	200002d0 	.word	0x200002d0
 8003ab4:	20000388 	.word	0x20000388
 8003ab8:	200002d4 	.word	0x200002d4
 8003abc:	2000038c 	.word	0x2000038c
 8003ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac4:	4ba6      	ldr	r3, [pc, #664]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x3090>)
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
          tau_dfob1_pre = tau_dfob1;
 8003aca:	4ba6      	ldr	r3, [pc, #664]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x3094>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4aa6      	ldr	r2, [pc, #664]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x3098>)
 8003ad0:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 8003ad2:	4ba6      	ldr	r3, [pc, #664]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x309c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4aa6      	ldr	r2, [pc, #664]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x30a0>)
 8003ad8:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 8003ada:	4ba6      	ldr	r3, [pc, #664]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x30a4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4aa6      	ldr	r2, [pc, #664]	; (8003d78 <HAL_TIM_PeriodElapsedCallback+0x30a8>)
 8003ae0:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 8003ae2:	4ba6      	ldr	r3, [pc, #664]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x30ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4aa6      	ldr	r2, [pc, #664]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x30b0>)
 8003ae8:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw * sqrt(2.0);// [N] Element of fd's wheel rotation direction
 8003aea:	4b9e      	ldr	r3, [pc, #632]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x3094>)
 8003aec:	ed93 7a00 	vldr	s14, [r3]
 8003af0:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8003d84 <HAL_TIM_PeriodElapsedCallback+0x30b4>
 8003af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003afc:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8003d48 <HAL_TIM_PeriodElapsedCallback+0x3078>
 8003b00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b08:	4b9f      	ldr	r3, [pc, #636]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x30b8>)
 8003b0a:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw * sqrt(2.0);
 8003b0e:	4b97      	ldr	r3, [pc, #604]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x309c>)
 8003b10:	ed93 7a00 	vldr	s14, [r3]
 8003b14:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8003d84 <HAL_TIM_PeriodElapsedCallback+0x30b4>
 8003b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b20:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8003d48 <HAL_TIM_PeriodElapsedCallback+0x3078>
 8003b24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b2c:	4b97      	ldr	r3, [pc, #604]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x30bc>)
 8003b2e:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw * sqrt(2.0);
 8003b32:	4b90      	ldr	r3, [pc, #576]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x30a4>)
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	eddf 6a92 	vldr	s13, [pc, #584]	; 8003d84 <HAL_TIM_PeriodElapsedCallback+0x30b4>
 8003b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b44:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003d48 <HAL_TIM_PeriodElapsedCallback+0x3078>
 8003b48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b50:	4b8f      	ldr	r3, [pc, #572]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x30c0>)
 8003b52:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw * sqrt(2.0);
 8003b56:	4b89      	ldr	r3, [pc, #548]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x30ac>)
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003d84 <HAL_TIM_PeriodElapsedCallback+0x30b4>
 8003b60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b68:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8003d48 <HAL_TIM_PeriodElapsedCallback+0x3078>
 8003b6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b74:	4b87      	ldr	r3, [pc, #540]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x30c4>)
 8003b76:	edc3 7a00 	vstr	s15, [r3]
        fx_hat = 1.0 / Rw             * (   tau_dfob1 - tau_dfob2 + tau_dfob3 - tau_dfob4 );// Substantially, 1.0 / sqrt(2.0) * fd : as of 2021/01/08
 8003b7a:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x3094>)
 8003b7c:	ed93 7a00 	vldr	s14, [r3]
 8003b80:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x309c>)
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x30a4>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b94:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x30ac>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ba2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8003d50 <HAL_TIM_PeriodElapsedCallback+0x3080>
 8003ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003baa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x30c8>)
 8003bb0:	edc3 7a00 	vstr	s15, [r3]
        fy_hat = 1.0 / Rw             * (   tau_dfob1 + tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8003bb4:	4b6b      	ldr	r3, [pc, #428]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x3094>)
 8003bb6:	ed93 7a00 	vldr	s14, [r3]
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x309c>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc4:	4b6b      	ldr	r3, [pc, #428]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x30a4>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bce:	4b6b      	ldr	r3, [pc, #428]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x30ac>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bdc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8003d50 <HAL_TIM_PeriodElapsedCallback+0x3080>
 8003be0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003be4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003be8:	4b6c      	ldr	r3, [pc, #432]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x30cc>)
 8003bea:	edc3 7a00 	vstr	s15, [r3]
        Mz_hat = 1.0 / Rw * ( L + W ) * ( - tau_dfob1 - tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8003bee:	4b5d      	ldr	r3, [pc, #372]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x3094>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	eeb1 7a67 	vneg.f32	s14, s15
 8003bf8:	4b5c      	ldr	r3, [pc, #368]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x309c>)
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c02:	4b5c      	ldr	r3, [pc, #368]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x30a4>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c0c:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x30ac>)
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c1a:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8003d58 <HAL_TIM_PeriodElapsedCallback+0x3088>
 8003c1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c26:	4b5e      	ldr	r3, [pc, #376]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x30d0>)
 8003c28:	edc3 7a00 	vstr	s15, [r3]
        ia1_ref = i1_ref + i1_comp;
 8003c2c:	4b5d      	ldr	r3, [pc, #372]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x30d4>)
 8003c2e:	ed93 7a00 	vldr	s14, [r3]
 8003c32:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x30d8>)
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3c:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003c3e:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 8003c42:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x30e0>)
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	4b5a      	ldr	r3, [pc, #360]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x30e4>)
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x30e8>)
 8003c54:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 8003c58:	4b58      	ldr	r3, [pc, #352]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x30ec>)
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	4b58      	ldr	r3, [pc, #352]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x30f0>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c68:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30f4>)
 8003c6a:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 8003c6e:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x30f8>)
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x30fc>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7e:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>)
 8003c80:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003dd4 <HAL_TIM_PeriodElapsedCallback+0x3104>
 8003c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	dd03      	ble.n	8003ca0 <HAL_TIM_PeriodElapsedCallback+0x2fd0>
 8003c98:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003c9a:	4a4f      	ldr	r2, [pc, #316]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3108>)
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e00c      	b.n	8003cba <HAL_TIM_PeriodElapsedCallback+0x2fea>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8003ca0:	4b42      	ldr	r3, [pc, #264]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003ca2:	edd3 7a00 	vldr	s15, [r3]
 8003ca6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003ddc <HAL_TIM_PeriodElapsedCallback+0x310c>
 8003caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	d502      	bpl.n	8003cba <HAL_TIM_PeriodElapsedCallback+0x2fea>
 8003cb4:	4b3d      	ldr	r3, [pc, #244]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x30dc>)
 8003cb6:	4a4a      	ldr	r2, [pc, #296]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x3110>)
 8003cb8:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 8003cba:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x30e8>)
 8003cbc:	edd3 7a00 	vldr	s15, [r3]
 8003cc0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003dd4 <HAL_TIM_PeriodElapsedCallback+0x3104>
 8003cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	dd03      	ble.n	8003cd6 <HAL_TIM_PeriodElapsedCallback+0x3006>
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x30e8>)
 8003cd0:	4a41      	ldr	r2, [pc, #260]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3108>)
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e00c      	b.n	8003cf0 <HAL_TIM_PeriodElapsedCallback+0x3020>
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8003cd6:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x30e8>)
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003ddc <HAL_TIM_PeriodElapsedCallback+0x310c>
 8003ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	d502      	bpl.n	8003cf0 <HAL_TIM_PeriodElapsedCallback+0x3020>
 8003cea:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x30e8>)
 8003cec:	4a3c      	ldr	r2, [pc, #240]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x3110>)
 8003cee:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30f4>)
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003dd4 <HAL_TIM_PeriodElapsedCallback+0x3104>
 8003cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	dd03      	ble.n	8003d0c <HAL_TIM_PeriodElapsedCallback+0x303c>
 8003d04:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30f4>)
 8003d06:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3108>)
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e00c      	b.n	8003d26 <HAL_TIM_PeriodElapsedCallback+0x3056>
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30f4>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003ddc <HAL_TIM_PeriodElapsedCallback+0x310c>
 8003d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	d502      	bpl.n	8003d26 <HAL_TIM_PeriodElapsedCallback+0x3056>
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30f4>)
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x3110>)
 8003d24:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003dd4 <HAL_TIM_PeriodElapsedCallback+0x3104>
 8003d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	dd54      	ble.n	8003de4 <HAL_TIM_PeriodElapsedCallback+0x3114>
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3100>)
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3108>)
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e05d      	b.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x312e>
 8003d42:	bf00      	nop
 8003d44:	f3af 8000 	nop.w
 8003d48:	667f3bcd 	.word	0x667f3bcd
 8003d4c:	3ff6a09e 	.word	0x3ff6a09e
 8003d50:	fb000001 	.word	0xfb000001
 8003d54:	4033ffff 	.word	0x4033ffff
 8003d58:	09fffffd 	.word	0x09fffffd
 8003d5c:	40180000 	.word	0x40180000
 8003d60:	2000038c 	.word	0x2000038c
 8003d64:	20000360 	.word	0x20000360
 8003d68:	20000370 	.word	0x20000370
 8003d6c:	20000364 	.word	0x20000364
 8003d70:	20000374 	.word	0x20000374
 8003d74:	20000368 	.word	0x20000368
 8003d78:	20000378 	.word	0x20000378
 8003d7c:	2000036c 	.word	0x2000036c
 8003d80:	2000037c 	.word	0x2000037c
 8003d84:	3d4ccccd 	.word	0x3d4ccccd
 8003d88:	20000390 	.word	0x20000390
 8003d8c:	20000394 	.word	0x20000394
 8003d90:	20000398 	.word	0x20000398
 8003d94:	2000039c 	.word	0x2000039c
 8003d98:	200003a0 	.word	0x200003a0
 8003d9c:	200003a4 	.word	0x200003a4
 8003da0:	200003a8 	.word	0x200003a8
 8003da4:	200002b8 	.word	0x200002b8
 8003da8:	20000350 	.word	0x20000350
 8003dac:	200002c8 	.word	0x200002c8
 8003db0:	200002bc 	.word	0x200002bc
 8003db4:	20000354 	.word	0x20000354
 8003db8:	200002cc 	.word	0x200002cc
 8003dbc:	200002c0 	.word	0x200002c0
 8003dc0:	20000358 	.word	0x20000358
 8003dc4:	200002d0 	.word	0x200002d0
 8003dc8:	200002c4 	.word	0x200002c4
 8003dcc:	2000035c 	.word	0x2000035c
 8003dd0:	200002d4 	.word	0x200002d4
 8003dd4:	3fb33333 	.word	0x3fb33333
 8003dd8:	3fb33333 	.word	0x3fb33333
 8003ddc:	bfb33333 	.word	0xbfb33333
 8003de0:	bfb33333 	.word	0xbfb33333
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 8003de4:	4ba8      	ldr	r3, [pc, #672]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x33b8>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800408c <HAL_TIM_PeriodElapsedCallback+0x33bc>
 8003dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	d502      	bpl.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x312e>
 8003df8:	4ba3      	ldr	r3, [pc, #652]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x33b8>)
 8003dfa:	4aa5      	ldr	r2, [pc, #660]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x33c0>)
 8003dfc:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8003dfe:	4ba5      	ldr	r3, [pc, #660]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x33c4>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e08:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004070 <HAL_TIM_PeriodElapsedCallback+0x33a0>
 8003e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e10:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004078 <HAL_TIM_PeriodElapsedCallback+0x33a8>
 8003e14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e1c:	ee17 3a90 	vmov	r3, s15
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	4b9d      	ldr	r3, [pc, #628]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0x33c8>)
 8003e24:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 8003e26:	4b9d      	ldr	r3, [pc, #628]	; (800409c <HAL_TIM_PeriodElapsedCallback+0x33cc>)
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e30:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8004070 <HAL_TIM_PeriodElapsedCallback+0x33a0>
 8003e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e38:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8004078 <HAL_TIM_PeriodElapsedCallback+0x33a8>
 8003e3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e44:	ee17 3a90 	vmov	r3, s15
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	4b95      	ldr	r3, [pc, #596]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0x33d0>)
 8003e4c:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8003e4e:	4b95      	ldr	r3, [pc, #596]	; (80040a4 <HAL_TIM_PeriodElapsedCallback+0x33d4>)
 8003e50:	edd3 7a00 	vldr	s15, [r3]
 8003e54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e58:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8004070 <HAL_TIM_PeriodElapsedCallback+0x33a0>
 8003e5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e60:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8004078 <HAL_TIM_PeriodElapsedCallback+0x33a8>
 8003e64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e6c:	ee17 3a90 	vmov	r3, s15
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003e74:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 8003e76:	4b84      	ldr	r3, [pc, #528]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x33b8>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e80:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8004070 <HAL_TIM_PeriodElapsedCallback+0x33a0>
 8003e84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e88:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8004078 <HAL_TIM_PeriodElapsedCallback+0x33a8>
 8003e8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e94:	ee17 3a90 	vmov	r3, s15
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	4b84      	ldr	r3, [pc, #528]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x33dc>)
 8003e9c:	801a      	strh	r2, [r3, #0]
        if(PWM1 >= PWM_rsl * 0.9){
 8003e9e:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0x33c8>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003eaa:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8004080 <HAL_TIM_PeriodElapsedCallback+0x33b0>
 8003eae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	db03      	blt.n	8003ec0 <HAL_TIM_PeriodElapsedCallback+0x31f0>
          PWM1 = PWM_rsl * 0.85;
 8003eb8:	4b77      	ldr	r3, [pc, #476]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0x33c8>)
 8003eba:	f640 5248 	movw	r2, #3400	; 0xd48
 8003ebe:	801a      	strh	r2, [r3, #0]
        if(PWM2 >= PWM_rsl * 0.9){
 8003ec0:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0x33d0>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ecc:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8004080 <HAL_TIM_PeriodElapsedCallback+0x33b0>
 8003ed0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed8:	db03      	blt.n	8003ee2 <HAL_TIM_PeriodElapsedCallback+0x3212>
          PWM2 = PWM_rsl * 0.85;
 8003eda:	4b71      	ldr	r3, [pc, #452]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0x33d0>)
 8003edc:	f640 5248 	movw	r2, #3400	; 0xd48
 8003ee0:	801a      	strh	r2, [r3, #0]
        if(PWM3 >= PWM_rsl * 0.9){
 8003ee2:	4b71      	ldr	r3, [pc, #452]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003eee:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8004080 <HAL_TIM_PeriodElapsedCallback+0x33b0>
 8003ef2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efa:	db03      	blt.n	8003f04 <HAL_TIM_PeriodElapsedCallback+0x3234>
          PWM3 = PWM_rsl * 0.85;
 8003efc:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003efe:	f640 5248 	movw	r2, #3400	; 0xd48
 8003f02:	801a      	strh	r2, [r3, #0]
        if(PWM4 >= PWM_rsl * 0.9){
 8003f04:	4b69      	ldr	r3, [pc, #420]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x33dc>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003f10:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8004080 <HAL_TIM_PeriodElapsedCallback+0x33b0>
 8003f14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1c:	db03      	blt.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x3256>
          PWM4 = PWM_rsl * 0.85;
 8003f1e:	4b63      	ldr	r3, [pc, #396]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x33dc>)
 8003f20:	f640 5248 	movw	r2, #3400	; 0xd48
 8003f24:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0x33c8>)
 8003f28:	881a      	ldrh	r2, [r3, #0]
 8003f2a:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_TIM_PeriodElapsedCallback+0x33e0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8003f30:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0x33d0>)
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <HAL_TIM_PeriodElapsedCallback+0x33e0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8003f3a:	4b5b      	ldr	r3, [pc, #364]	; (80040a8 <HAL_TIM_PeriodElapsedCallback+0x33d8>)
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <HAL_TIM_PeriodElapsedCallback+0x33e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8003f44:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_TIM_PeriodElapsedCallback+0x33dc>)
 8003f46:	881a      	ldrh	r2, [r3, #0]
 8003f48:	4b5a      	ldr	r3, [pc, #360]	; (80040b4 <HAL_TIM_PeriodElapsedCallback+0x33e4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 8003f4e:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_TIM_PeriodElapsedCallback+0x33e8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a5a      	ldr	r2, [pc, #360]	; (80040bc <HAL_TIM_PeriodElapsedCallback+0x33ec>)
 8003f54:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 8003f56:	4b5a      	ldr	r3, [pc, #360]	; (80040c0 <HAL_TIM_PeriodElapsedCallback+0x33f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5a      	ldr	r2, [pc, #360]	; (80040c4 <HAL_TIM_PeriodElapsedCallback+0x33f4>)
 8003f5c:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 8003f5e:	4b5a      	ldr	r3, [pc, #360]	; (80040c8 <HAL_TIM_PeriodElapsedCallback+0x33f8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5a      	ldr	r2, [pc, #360]	; (80040cc <HAL_TIM_PeriodElapsedCallback+0x33fc>)
 8003f64:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 8003f66:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <HAL_TIM_PeriodElapsedCallback+0x3400>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5a      	ldr	r2, [pc, #360]	; (80040d4 <HAL_TIM_PeriodElapsedCallback+0x3404>)
 8003f6c:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 8003f6e:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x3408>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <HAL_TIM_PeriodElapsedCallback+0x340c>)
 8003f74:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 8003f76:	4b5a      	ldr	r3, [pc, #360]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x3410>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x3414>)
 8003f7c:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 8003f7e:	4b5a      	ldr	r3, [pc, #360]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x3418>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0x341c>)
 8003f84:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 8003f86:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x3420>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x3424>)
 8003f8c:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 8003f8e:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x3428>)
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	4b5a      	ldr	r3, [pc, #360]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x342c>)
 8003f94:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 8003f96:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x3430>)
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x3434>)
 8003f9c:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 8003f9e:	4b5a      	ldr	r3, [pc, #360]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x3438>)
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	4b5a      	ldr	r3, [pc, #360]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x343c>)
 8003fa4:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 8003fa6:	4b5a      	ldr	r3, [pc, #360]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x3440>)
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x3444>)
 8003fac:	801a      	strh	r2, [r3, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 8003fae:	4b5a      	ldr	r3, [pc, #360]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x3448>)
 8003fb0:	881a      	ldrh	r2, [r3, #0]
 8003fb2:	4b5a      	ldr	r3, [pc, #360]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x344c>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	08d9      	lsrs	r1, r3, #3
 8003fba:	460b      	mov	r3, r1
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 830f 	bne.w	80045ea <HAL_TIM_PeriodElapsedCallback+0x391a>
 8003fcc:	4b54      	ldr	r3, [pc, #336]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd4:	f280 8309 	bge.w	80045ea <HAL_TIM_PeriodElapsedCallback+0x391a>
          t_SRAM[i_save] = t;
 8003fd8:	4b51      	ldr	r3, [pc, #324]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a51      	ldr	r2, [pc, #324]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x3454>)
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	4951      	ldr	r1, [pc, #324]	; (8004128 <HAL_TIM_PeriodElapsedCallback+0x3458>)
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8003fe8:	4b4d      	ldr	r3, [pc, #308]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x3408>)
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	494e      	ldr	r1, [pc, #312]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x345c>)
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8003ff8:	4b49      	ldr	r3, [pc, #292]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a38      	ldr	r2, [pc, #224]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x3410>)
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	494b      	ldr	r1, [pc, #300]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x3460>)
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8004008:	4b45      	ldr	r3, [pc, #276]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a36      	ldr	r2, [pc, #216]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x3418>)
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	4948      	ldr	r1, [pc, #288]	; (8004134 <HAL_TIM_PeriodElapsedCallback+0x3464>)
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x3420>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4945      	ldr	r1, [pc, #276]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x3468>)
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	601a      	str	r2, [r3, #0]
          theta1_res_SRAM[i_save] = theta1_res;
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <HAL_TIM_PeriodElapsedCallback+0x33e8>)
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	4942      	ldr	r1, [pc, #264]	; (800413c <HAL_TIM_PeriodElapsedCallback+0x346c>)
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_TIM_PeriodElapsedCallback+0x33f0>)
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	493f      	ldr	r1, [pc, #252]	; (8004140 <HAL_TIM_PeriodElapsedCallback+0x3470>)
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 8004048:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1e      	ldr	r2, [pc, #120]	; (80040c8 <HAL_TIM_PeriodElapsedCallback+0x33f8>)
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	493c      	ldr	r1, [pc, #240]	; (8004144 <HAL_TIM_PeriodElapsedCallback+0x3474>)
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3450>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_TIM_PeriodElapsedCallback+0x3400>)
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	4939      	ldr	r1, [pc, #228]	; (8004148 <HAL_TIM_PeriodElapsedCallback+0x3478>)
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e070      	b.n	800414c <HAL_TIM_PeriodElapsedCallback+0x347c>
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w
 8004070:	bbf58d11 	.word	0xbbf58d11
 8004074:	4091db6d 	.word	0x4091db6d
 8004078:	00000000 	.word	0x00000000
 800407c:	409f4000 	.word	0x409f4000
 8004080:	00000000 	.word	0x00000000
 8004084:	40ac2000 	.word	0x40ac2000
 8004088:	200002d4 	.word	0x200002d4
 800408c:	bfb33333 	.word	0xbfb33333
 8004090:	bfb33333 	.word	0xbfb33333
 8004094:	200002c8 	.word	0x200002c8
 8004098:	200002e8 	.word	0x200002e8
 800409c:	200002cc 	.word	0x200002cc
 80040a0:	200002ea 	.word	0x200002ea
 80040a4:	200002d0 	.word	0x200002d0
 80040a8:	200002ec 	.word	0x200002ec
 80040ac:	200002ee 	.word	0x200002ee
 80040b0:	2003d2b4 	.word	0x2003d2b4
 80040b4:	2003d398 	.word	0x2003d398
 80040b8:	20000238 	.word	0x20000238
 80040bc:	20000248 	.word	0x20000248
 80040c0:	2000023c 	.word	0x2000023c
 80040c4:	2000024c 	.word	0x2000024c
 80040c8:	20000240 	.word	0x20000240
 80040cc:	20000250 	.word	0x20000250
 80040d0:	20000244 	.word	0x20000244
 80040d4:	20000254 	.word	0x20000254
 80040d8:	20000258 	.word	0x20000258
 80040dc:	20000268 	.word	0x20000268
 80040e0:	2000025c 	.word	0x2000025c
 80040e4:	2000026c 	.word	0x2000026c
 80040e8:	20000260 	.word	0x20000260
 80040ec:	20000270 	.word	0x20000270
 80040f0:	20000264 	.word	0x20000264
 80040f4:	20000274 	.word	0x20000274
 80040f8:	2000021e 	.word	0x2000021e
 80040fc:	20000226 	.word	0x20000226
 8004100:	20000220 	.word	0x20000220
 8004104:	20000228 	.word	0x20000228
 8004108:	20000222 	.word	0x20000222
 800410c:	2000022a 	.word	0x2000022a
 8004110:	20000224 	.word	0x20000224
 8004114:	2000022c 	.word	0x2000022c
 8004118:	20000218 	.word	0x20000218
 800411c:	cccccccd 	.word	0xcccccccd
 8004120:	2000048c 	.word	0x2000048c
 8004124:	20000214 	.word	0x20000214
 8004128:	20000494 	.word	0x20000494
 800412c:	20001434 	.word	0x20001434
 8004130:	200023d4 	.word	0x200023d4
 8004134:	20003374 	.word	0x20003374
 8004138:	20004314 	.word	0x20004314
 800413c:	200052b4 	.word	0x200052b4
 8004140:	20006254 	.word	0x20006254
 8004144:	200071f4 	.word	0x200071f4
 8004148:	20008194 	.word	0x20008194
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 800414c:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a90      	ldr	r2, [pc, #576]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x36c4>)
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	4990      	ldr	r1, [pc, #576]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x36c8>)
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 800415c:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a8e      	ldr	r2, [pc, #568]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x36cc>)
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	498e      	ldr	r1, [pc, #568]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x36d0>)
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 800416c:	4b88      	ldr	r3, [pc, #544]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a8c      	ldr	r2, [pc, #560]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x36d4>)
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	498c      	ldr	r1, [pc, #560]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x36d8>)
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 800417c:	4b84      	ldr	r3, [pc, #528]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a8a      	ldr	r2, [pc, #552]	; (80043ac <HAL_TIM_PeriodElapsedCallback+0x36dc>)
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	498a      	ldr	r1, [pc, #552]	; (80043b0 <HAL_TIM_PeriodElapsedCallback+0x36e0>)
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	601a      	str	r2, [r3, #0]
          ddtheta1_res_SRAM[i_save] = ddtheta1_res;
 800418c:	4b80      	ldr	r3, [pc, #512]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a88      	ldr	r2, [pc, #544]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x36e4>)
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	4988      	ldr	r1, [pc, #544]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x36e8>)
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	601a      	str	r2, [r3, #0]
          ddtheta2_res_SRAM[i_save] = ddtheta2_res;
 800419c:	4b7c      	ldr	r3, [pc, #496]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a86      	ldr	r2, [pc, #536]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x36ec>)
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4986      	ldr	r1, [pc, #536]	; (80043c0 <HAL_TIM_PeriodElapsedCallback+0x36f0>)
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	601a      	str	r2, [r3, #0]
          ddtheta3_res_SRAM[i_save] = ddtheta3_res;
 80041ac:	4b78      	ldr	r3, [pc, #480]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a84      	ldr	r2, [pc, #528]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x36f4>)
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	4984      	ldr	r1, [pc, #528]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x36f8>)
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	601a      	str	r2, [r3, #0]
          ddtheta4_res_SRAM[i_save] = ddtheta4_res;
 80041bc:	4b74      	ldr	r3, [pc, #464]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a82      	ldr	r2, [pc, #520]	; (80043cc <HAL_TIM_PeriodElapsedCallback+0x36fc>)
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	4982      	ldr	r1, [pc, #520]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x3700>)
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 80041cc:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a80      	ldr	r2, [pc, #512]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x3704>)
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	4980      	ldr	r1, [pc, #512]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0x3708>)
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 80041dc:	4b6c      	ldr	r3, [pc, #432]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7e      	ldr	r2, [pc, #504]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x370c>)
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	497e      	ldr	r1, [pc, #504]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x3710>)
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7c      	ldr	r2, [pc, #496]	; (80043e4 <HAL_TIM_PeriodElapsedCallback+0x3714>)
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	497c      	ldr	r1, [pc, #496]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0x3718>)
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 80041fc:	4b64      	ldr	r3, [pc, #400]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a7a      	ldr	r2, [pc, #488]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0x371c>)
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	497a      	ldr	r1, [pc, #488]	; (80043f0 <HAL_TIM_PeriodElapsedCallback+0x3720>)
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 800420c:	4b60      	ldr	r3, [pc, #384]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a78      	ldr	r2, [pc, #480]	; (80043f4 <HAL_TIM_PeriodElapsedCallback+0x3724>)
 8004212:	8811      	ldrh	r1, [r2, #0]
 8004214:	4a78      	ldr	r2, [pc, #480]	; (80043f8 <HAL_TIM_PeriodElapsedCallback+0x3728>)
 8004216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 800421a:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a77      	ldr	r2, [pc, #476]	; (80043fc <HAL_TIM_PeriodElapsedCallback+0x372c>)
 8004220:	8811      	ldrh	r1, [r2, #0]
 8004222:	4a77      	ldr	r2, [pc, #476]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0x3730>)
 8004224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a75      	ldr	r2, [pc, #468]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x3734>)
 800422e:	8811      	ldrh	r1, [r2, #0]
 8004230:	4a75      	ldr	r2, [pc, #468]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x3738>)
 8004232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a74      	ldr	r2, [pc, #464]	; (800440c <HAL_TIM_PeriodElapsedCallback+0x373c>)
 800423c:	8811      	ldrh	r1, [r2, #0]
 800423e:	4a74      	ldr	r2, [pc, #464]	; (8004410 <HAL_TIM_PeriodElapsedCallback+0x3740>)
 8004240:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          fd1_ref_SRAM[i_save] = fd1_ref;
 8004244:	4b52      	ldr	r3, [pc, #328]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a72      	ldr	r2, [pc, #456]	; (8004414 <HAL_TIM_PeriodElapsedCallback+0x3744>)
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	4972      	ldr	r1, [pc, #456]	; (8004418 <HAL_TIM_PeriodElapsedCallback+0x3748>)
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	601a      	str	r2, [r3, #0]
          fd2_ref_SRAM[i_save] = fd2_ref;
 8004254:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a70      	ldr	r2, [pc, #448]	; (800441c <HAL_TIM_PeriodElapsedCallback+0x374c>)
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	4970      	ldr	r1, [pc, #448]	; (8004420 <HAL_TIM_PeriodElapsedCallback+0x3750>)
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	601a      	str	r2, [r3, #0]
          fd3_ref_SRAM[i_save] = fd3_ref;
 8004264:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_TIM_PeriodElapsedCallback+0x3754>)
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	496e      	ldr	r1, [pc, #440]	; (8004428 <HAL_TIM_PeriodElapsedCallback+0x3758>)
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	601a      	str	r2, [r3, #0]
          fd4_ref_SRAM[i_save] = fd4_ref;
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6c      	ldr	r2, [pc, #432]	; (800442c <HAL_TIM_PeriodElapsedCallback+0x375c>)
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	496c      	ldr	r1, [pc, #432]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x3760>)
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	601a      	str	r2, [r3, #0]
          Ki_df_integral1_SRAM[i_save] = Ki_df_integral1;
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a6a      	ldr	r2, [pc, #424]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x3764>)
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	496a      	ldr	r1, [pc, #424]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x3768>)
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	601a      	str	r2, [r3, #0]
          Ki_df_integral2_SRAM[i_save] = Ki_df_integral2;
 8004294:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a68      	ldr	r2, [pc, #416]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x376c>)
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	4968      	ldr	r1, [pc, #416]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x3770>)
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	601a      	str	r2, [r3, #0]
          Ki_df_integral3_SRAM[i_save] = Ki_df_integral3;
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a66      	ldr	r2, [pc, #408]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x3774>)
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	4966      	ldr	r1, [pc, #408]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x3778>)
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	601a      	str	r2, [r3, #0]
          Ki_df_integral4_SRAM[i_save] = Ki_df_integral4;
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a64      	ldr	r2, [pc, #400]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x377c>)
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	4964      	ldr	r1, [pc, #400]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x3780>)
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 80042c4:	4b32      	ldr	r3, [pc, #200]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a62      	ldr	r2, [pc, #392]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x3784>)
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	4962      	ldr	r1, [pc, #392]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x3788>)
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 80042d4:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a60      	ldr	r2, [pc, #384]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x378c>)
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4960      	ldr	r1, [pc, #384]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x3790>)
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a5e      	ldr	r2, [pc, #376]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x3794>)
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	495e      	ldr	r1, [pc, #376]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x3798>)
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 80042f4:	4b26      	ldr	r3, [pc, #152]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a5c      	ldr	r2, [pc, #368]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x379c>)
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	495c      	ldr	r1, [pc, #368]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x37a0>)
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a5a      	ldr	r2, [pc, #360]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x37a4>)
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	495a      	ldr	r1, [pc, #360]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x37a8>)
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 8004314:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x37ac>)
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	4958      	ldr	r1, [pc, #352]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x37b0>)
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	601a      	str	r2, [r3, #0]
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 8004324:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a56      	ldr	r2, [pc, #344]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x37b4>)
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	4956      	ldr	r1, [pc, #344]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x37b8>)
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a54      	ldr	r2, [pc, #336]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x37bc>)
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	4954      	ldr	r1, [pc, #336]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x37c0>)
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	601a      	str	r2, [r3, #0]
          yaw_SRAM[i_save]   = yaw;//Euler.x;
 8004344:	4b12      	ldr	r3, [pc, #72]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x37c4>)
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	4952      	ldr	r1, [pc, #328]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x37c8>)
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	601a      	str	r2, [r3, #0]
          roll_SRAM[i_save]  = roll;//Euler.y;
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a50      	ldr	r2, [pc, #320]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x37cc>)
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	4950      	ldr	r1, [pc, #320]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x37d0>)
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	601a      	str	r2, [r3, #0]
          pitch_SRAM[i_save] = pitch;//Euler.z;
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a4e      	ldr	r2, [pc, #312]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x37d4>)
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	494e      	ldr	r1, [pc, #312]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x37d8>)
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	601a      	str	r2, [r3, #0]
          yaw_rate_SRAM[i_save]   = yaw_rate;//Gyro.z;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a4c      	ldr	r2, [pc, #304]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x37dc>)
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	494c      	ldr	r1, [pc, #304]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x37e0>)
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	601a      	str	r2, [r3, #0]
          yaw_rate_notch_SRAM[i_save]  = yaw_rate_notch;
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x36c0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4a      	ldr	r2, [pc, #296]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x37e4>)
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	e094      	b.n	80044b8 <HAL_TIM_PeriodElapsedCallback+0x37e8>
 800438e:	bf00      	nop
 8004390:	2000048c 	.word	0x2000048c
 8004394:	20000298 	.word	0x20000298
 8004398:	20009134 	.word	0x20009134
 800439c:	2000029c 	.word	0x2000029c
 80043a0:	2000a0d4 	.word	0x2000a0d4
 80043a4:	200002a0 	.word	0x200002a0
 80043a8:	2000b074 	.word	0x2000b074
 80043ac:	200002a4 	.word	0x200002a4
 80043b0:	2000c014 	.word	0x2000c014
 80043b4:	20000278 	.word	0x20000278
 80043b8:	2000cfb4 	.word	0x2000cfb4
 80043bc:	2000027c 	.word	0x2000027c
 80043c0:	2000df54 	.word	0x2000df54
 80043c4:	20000280 	.word	0x20000280
 80043c8:	2000eef4 	.word	0x2000eef4
 80043cc:	20000284 	.word	0x20000284
 80043d0:	2000fe94 	.word	0x2000fe94
 80043d4:	200002c8 	.word	0x200002c8
 80043d8:	20010e34 	.word	0x20010e34
 80043dc:	200002cc 	.word	0x200002cc
 80043e0:	20011dd4 	.word	0x20011dd4
 80043e4:	200002d0 	.word	0x200002d0
 80043e8:	20012d74 	.word	0x20012d74
 80043ec:	200002d4 	.word	0x200002d4
 80043f0:	20013d14 	.word	0x20013d14
 80043f4:	200002e8 	.word	0x200002e8
 80043f8:	20014cb4 	.word	0x20014cb4
 80043fc:	200002ea 	.word	0x200002ea
 8004400:	20015484 	.word	0x20015484
 8004404:	200002ec 	.word	0x200002ec
 8004408:	20015c54 	.word	0x20015c54
 800440c:	200002ee 	.word	0x200002ee
 8004410:	20016424 	.word	0x20016424
 8004414:	20000310 	.word	0x20000310
 8004418:	20016bf4 	.word	0x20016bf4
 800441c:	20000314 	.word	0x20000314
 8004420:	20017b94 	.word	0x20017b94
 8004424:	20000318 	.word	0x20000318
 8004428:	20018b34 	.word	0x20018b34
 800442c:	2000031c 	.word	0x2000031c
 8004430:	20019ad4 	.word	0x20019ad4
 8004434:	20000320 	.word	0x20000320
 8004438:	2001aa74 	.word	0x2001aa74
 800443c:	20000324 	.word	0x20000324
 8004440:	2001ba14 	.word	0x2001ba14
 8004444:	20000328 	.word	0x20000328
 8004448:	2001c9b4 	.word	0x2001c9b4
 800444c:	2000032c 	.word	0x2000032c
 8004450:	2001d954 	.word	0x2001d954
 8004454:	20000330 	.word	0x20000330
 8004458:	2001e8f4 	.word	0x2001e8f4
 800445c:	20000334 	.word	0x20000334
 8004460:	2001f894 	.word	0x2001f894
 8004464:	20000338 	.word	0x20000338
 8004468:	20020834 	.word	0x20020834
 800446c:	2000033c 	.word	0x2000033c
 8004470:	200217d4 	.word	0x200217d4
 8004474:	20000360 	.word	0x20000360
 8004478:	20022774 	.word	0x20022774
 800447c:	20000364 	.word	0x20000364
 8004480:	20023714 	.word	0x20023714
 8004484:	20000368 	.word	0x20000368
 8004488:	200246b4 	.word	0x200246b4
 800448c:	2000036c 	.word	0x2000036c
 8004490:	20025654 	.word	0x20025654
 8004494:	200003bc 	.word	0x200003bc
 8004498:	200265f4 	.word	0x200265f4
 800449c:	200003c0 	.word	0x200003c0
 80044a0:	20027594 	.word	0x20027594
 80044a4:	200003c4 	.word	0x200003c4
 80044a8:	20028534 	.word	0x20028534
 80044ac:	200003d0 	.word	0x200003d0
 80044b0:	200294d4 	.word	0x200294d4
 80044b4:	200003e4 	.word	0x200003e4
 80044b8:	4958      	ldr	r1, [pc, #352]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x394c>)
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	601a      	str	r2, [r3, #0]
          roll_rate_SRAM[i_save]  = roll_rate;//Gyro.x;
 80044c0:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a57      	ldr	r2, [pc, #348]	; (8004624 <HAL_TIM_PeriodElapsedCallback+0x3954>)
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4957      	ldr	r1, [pc, #348]	; (8004628 <HAL_TIM_PeriodElapsedCallback+0x3958>)
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	601a      	str	r2, [r3, #0]
          pitch_rate_SRAM[i_save] = pitch_rate;//Gyro.y;
 80044d0:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a55      	ldr	r2, [pc, #340]	; (800462c <HAL_TIM_PeriodElapsedCallback+0x395c>)
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	4955      	ldr	r1, [pc, #340]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x3960>)
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	601a      	str	r2, [r3, #0]
          Acc_x_SRAM[i_save] = Acc_x;//Acc.x;
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a53      	ldr	r2, [pc, #332]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0x3964>)
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	4953      	ldr	r1, [pc, #332]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0x3968>)
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	601a      	str	r2, [r3, #0]
          Acc_y_SRAM[i_save] = Acc_y;//Acc.y;
 80044f0:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_TIM_PeriodElapsedCallback+0x396c>)
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	4951      	ldr	r1, [pc, #324]	; (8004640 <HAL_TIM_PeriodElapsedCallback+0x3970>)
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	601a      	str	r2, [r3, #0]
          Acc_z_SRAM[i_save] = Acc_z;//Acc.z;
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a4f      	ldr	r2, [pc, #316]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x3974>)
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	494f      	ldr	r1, [pc, #316]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x3978>)
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	601a      	str	r2, [r3, #0]
          Acc_x_correct_SRAM[i_save] = Acc_x_correct;
 8004510:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a4d      	ldr	r2, [pc, #308]	; (800464c <HAL_TIM_PeriodElapsedCallback+0x397c>)
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	494d      	ldr	r1, [pc, #308]	; (8004650 <HAL_TIM_PeriodElapsedCallback+0x3980>)
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	601a      	str	r2, [r3, #0]
          Acc_y_correct_SRAM[i_save] = Acc_y_correct;
 8004520:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a4b      	ldr	r2, [pc, #300]	; (8004654 <HAL_TIM_PeriodElapsedCallback+0x3984>)
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	494b      	ldr	r1, [pc, #300]	; (8004658 <HAL_TIM_PeriodElapsedCallback+0x3988>)
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	601a      	str	r2, [r3, #0]
          Acc_z_correct_SRAM[i_save] = Acc_z_correct;
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a49      	ldr	r2, [pc, #292]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x398c>)
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	4949      	ldr	r1, [pc, #292]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x3990>)
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	601a      	str	r2, [r3, #0]
          Acc_x_LPF_SRAM[i_save] = Acc_x_LPF;
 8004540:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a47      	ldr	r2, [pc, #284]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x3994>)
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	4947      	ldr	r1, [pc, #284]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x3998>)
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	601a      	str	r2, [r3, #0]
          Acc_y_LPF_SRAM[i_save] = Acc_y_LPF;
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a45      	ldr	r2, [pc, #276]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x399c>)
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	4945      	ldr	r1, [pc, #276]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x39a0>)
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	601a      	str	r2, [r3, #0]
          lambda_1_hat_SRAM[i_save] = lambda_1_hat;
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a43      	ldr	r2, [pc, #268]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x39a4>)
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4943      	ldr	r1, [pc, #268]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x39a8>)
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	601a      	str	r2, [r3, #0]
          lambda_2_hat_SRAM[i_save] = lambda_2_hat;
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a41      	ldr	r2, [pc, #260]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x39ac>)
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	4941      	ldr	r1, [pc, #260]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x39b0>)
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	601a      	str	r2, [r3, #0]
          lambda_3_hat_SRAM[i_save] = lambda_3_hat;
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a3f      	ldr	r2, [pc, #252]	; (8004684 <HAL_TIM_PeriodElapsedCallback+0x39b4>)
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	493f      	ldr	r1, [pc, #252]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x39b8>)
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	601a      	str	r2, [r3, #0]
          lambda_4_hat_SRAM[i_save] = lambda_4_hat;
 8004590:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3d      	ldr	r2, [pc, #244]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x39bc>)
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	493d      	ldr	r1, [pc, #244]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x39c0>)
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	601a      	str	r2, [r3, #0]
          lambda_1_hat_acc_SRAM[i_save] = lambda_1_hat_acc;
 80045a0:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x39c4>)
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	493b      	ldr	r1, [pc, #236]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x39c8>)
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	601a      	str	r2, [r3, #0]
          lambda_2_hat_acc_SRAM[i_save] = lambda_2_hat_acc;
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a39      	ldr	r2, [pc, #228]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x39cc>)
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	4939      	ldr	r1, [pc, #228]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x39d0>)
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	601a      	str	r2, [r3, #0]
          lambda_3_hat_acc_SRAM[i_save] = lambda_3_hat_acc;
 80045c0:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a37      	ldr	r2, [pc, #220]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x39d4>)
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4937      	ldr	r1, [pc, #220]	; (80046a8 <HAL_TIM_PeriodElapsedCallback+0x39d8>)
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	601a      	str	r2, [r3, #0]
          lambda_4_hat_acc_SRAM[i_save] = lambda_4_hat_acc;
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a35      	ldr	r2, [pc, #212]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0x39dc>)
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	4935      	ldr	r1, [pc, #212]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x39e0>)
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	601a      	str	r2, [r3, #0]
          i_save++;
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3950>)
 80045e8:	6013      	str	r3, [r2, #0]
        loop = loop + 1;
 80045ea:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x39e4>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x39e4>)
 80045f4:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 80045f6:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x39e8>)
 80045f8:	edd3 7a00 	vldr	s15, [r3]
 80045fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80046bc <HAL_TIM_PeriodElapsedCallback+0x39ec>
 8004600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004604:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x39e8>)
 8004606:	edc3 7a00 	vstr	s15, [r3]
        break;
 800460a:	e000      	b.n	800460e <HAL_TIM_PeriodElapsedCallback+0x393e>
        break;
 800460c:	bf00      	nop
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	ecbd 8b06 	vpop	{d8-d10}
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	2002c3b4 	.word	0x2002c3b4
 8004620:	2000048c 	.word	0x2000048c
 8004624:	200003d4 	.word	0x200003d4
 8004628:	2002a474 	.word	0x2002a474
 800462c:	200003d8 	.word	0x200003d8
 8004630:	2002b414 	.word	0x2002b414
 8004634:	200003f8 	.word	0x200003f8
 8004638:	2002d354 	.word	0x2002d354
 800463c:	200003fc 	.word	0x200003fc
 8004640:	2002e2f4 	.word	0x2002e2f4
 8004644:	20000400 	.word	0x20000400
 8004648:	2002f294 	.word	0x2002f294
 800464c:	20000404 	.word	0x20000404
 8004650:	20030234 	.word	0x20030234
 8004654:	20000408 	.word	0x20000408
 8004658:	200311d4 	.word	0x200311d4
 800465c:	2000040c 	.word	0x2000040c
 8004660:	20032174 	.word	0x20032174
 8004664:	20000418 	.word	0x20000418
 8004668:	20033114 	.word	0x20033114
 800466c:	2000041c 	.word	0x2000041c
 8004670:	200340b4 	.word	0x200340b4
 8004674:	20000428 	.word	0x20000428
 8004678:	20035054 	.word	0x20035054
 800467c:	2000042c 	.word	0x2000042c
 8004680:	20035ff4 	.word	0x20035ff4
 8004684:	20000430 	.word	0x20000430
 8004688:	20036f94 	.word	0x20036f94
 800468c:	20000434 	.word	0x20000434
 8004690:	20037f34 	.word	0x20037f34
 8004694:	2000045c 	.word	0x2000045c
 8004698:	20038ed4 	.word	0x20038ed4
 800469c:	20000460 	.word	0x20000460
 80046a0:	20039e74 	.word	0x20039e74
 80046a4:	20000464 	.word	0x20000464
 80046a8:	2003ae14 	.word	0x2003ae14
 80046ac:	20000468 	.word	0x20000468
 80046b0:	2003bdb4 	.word	0x2003bdb4
 80046b4:	20000218 	.word	0x20000218
 80046b8:	20000214 	.word	0x20000214
 80046bc:	3a83126f 	.word	0x3a83126f

080046c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d0:	f040 84bc 	bne.w	800504c <HAL_GPIO_EXTI_Callback+0x98c>
		// if(mode == 0){
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }
    if( t == 0.0 || t > t_experiment ){// 14.999
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_GPIO_EXTI_Callback+0x17c>)
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e2:	d009      	beq.n	80046f8 <HAL_GPIO_EXTI_Callback+0x38>
 80046e4:	4b55      	ldr	r3, [pc, #340]	; (800483c <HAL_GPIO_EXTI_Callback+0x17c>)
 80046e6:	edd3 7a00 	vldr	s15, [r3]
 80046ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	dd05      	ble.n	8004704 <HAL_GPIO_EXTI_Callback+0x44>
		  mode++;
 80046f8:	4b51      	ldr	r3, [pc, #324]	; (8004840 <HAL_GPIO_EXTI_Callback+0x180>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <HAL_GPIO_EXTI_Callback+0x180>)
 8004702:	701a      	strb	r2, [r3, #0]
    }
		// printf("%d, ", mode);
		// printf("\r\n");

    divide = mode % 3;
 8004704:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <HAL_GPIO_EXTI_Callback+0x180>)
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <HAL_GPIO_EXTI_Callback+0x184>)
 800470a:	fba3 1302 	umull	r1, r3, r3, r2
 800470e:	0859      	lsrs	r1, r3, #1
 8004710:	460b      	mov	r3, r1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	440b      	add	r3, r1
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b4b      	ldr	r3, [pc, #300]	; (8004848 <HAL_GPIO_EXTI_Callback+0x188>)
 800471c:	701a      	strb	r2, [r3, #0]

    switch(divide){
 800471e:	4b4a      	ldr	r3, [pc, #296]	; (8004848 <HAL_GPIO_EXTI_Callback+0x188>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d00f      	beq.n	8004746 <HAL_GPIO_EXTI_Callback+0x86>
 8004726:	2b02      	cmp	r3, #2
 8004728:	d018      	beq.n	800475c <HAL_GPIO_EXTI_Callback+0x9c>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d127      	bne.n	800477e <HAL_GPIO_EXTI_Callback+0xbe>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800472e:	2200      	movs	r2, #0
 8004730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004734:	4845      	ldr	r0, [pc, #276]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004736:	f002 f94b 	bl	80069d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 800473a:	2201      	movs	r2, #1
 800473c:	2101      	movs	r1, #1
 800473e:	4843      	ldr	r0, [pc, #268]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004740:	f002 f946 	bl	80069d0 <HAL_GPIO_WritePin>
        break;
 8004744:	e01b      	b.n	800477e <HAL_GPIO_EXTI_Callback+0xbe>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8004746:	2200      	movs	r2, #0
 8004748:	2101      	movs	r1, #1
 800474a:	4840      	ldr	r0, [pc, #256]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 800474c:	f002 f940 	bl	80069d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 8004750:	2201      	movs	r2, #1
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	483d      	ldr	r0, [pc, #244]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004756:	f002 f93b 	bl	80069d0 <HAL_GPIO_WritePin>
        break;
 800475a:	e010      	b.n	800477e <HAL_GPIO_EXTI_Callback+0xbe>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	2101      	movs	r1, #1
 8004760:	483a      	ldr	r0, [pc, #232]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004762:	f002 f935 	bl	80069d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 8004766:	2200      	movs	r2, #0
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	4838      	ldr	r0, [pc, #224]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 800476c:	f002 f930 	bl	80069d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 8004770:	2201      	movs	r2, #1
 8004772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004776:	4835      	ldr	r0, [pc, #212]	; (800484c <HAL_GPIO_EXTI_Callback+0x18c>)
 8004778:	f002 f92a 	bl	80069d0 <HAL_GPIO_WritePin>
        break;
 800477c:	bf00      	nop
    }

    switch(mode){
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <HAL_GPIO_EXTI_Callback+0x180>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d004      	beq.n	8004790 <HAL_GPIO_EXTI_Callback+0xd0>
 8004786:	2b02      	cmp	r3, #2
 8004788:	d02f      	beq.n	80047ea <HAL_GPIO_EXTI_Callback+0x12a>
 800478a:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 800478c:	f000 bc5e 	b.w	800504c <HAL_GPIO_EXTI_Callback+0x98c>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        if( isFirst == 0 ){
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_GPIO_EXTI_Callback+0x190>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 8458 	bne.w	800504a <HAL_GPIO_EXTI_Callback+0x98a>
          tau_dfob1 = 0.0;
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_GPIO_EXTI_Callback+0x194>)
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
          tau_dfob2 = 0.0;
 80047a2:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_GPIO_EXTI_Callback+0x198>)
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
          tau_dfob3 = 0.0;
 80047aa:	4b2c      	ldr	r3, [pc, #176]	; (800485c <HAL_GPIO_EXTI_Callback+0x19c>)
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
          tau_dfob4 = 0.0;
 80047b2:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

          tau_dfob1_pre = 0.0;
 80047ba:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
          tau_dfob1_pre = 0.0;
 80047d2:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

          isFirst++;
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_GPIO_EXTI_Callback+0x190>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	3301      	adds	r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_GPIO_EXTI_Callback+0x190>)
 80047e4:	701a      	strb	r2, [r3, #0]
        }


        break;
 80047e6:	f000 bc30 	b.w	800504a <HAL_GPIO_EXTI_Callback+0x98a>
        // }
        // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
        // fprintf(outputfile, "abc");
        // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 80047ea:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80047ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047f0:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80047f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047f8:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 80047fa:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80047fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004800:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8004804:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004808:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800480a:	4b17      	ldr	r3, [pc, #92]	; (8004868 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8004814:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8004816:	881a      	ldrh	r2, [r3, #0]
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f000 bc00 	b.w	800503c <HAL_GPIO_EXTI_Callback+0x97c>
 800483c:	20000214 	.word	0x20000214
 8004840:	2000021a 	.word	0x2000021a
 8004844:	aaaaaaab 	.word	0xaaaaaaab
 8004848:	2000021b 	.word	0x2000021b
 800484c:	40020400 	.word	0x40020400
 8004850:	2000021c 	.word	0x2000021c
 8004854:	20000360 	.word	0x20000360
 8004858:	20000364 	.word	0x20000364
 800485c:	20000368 	.word	0x20000368
 8004860:	2000036c 	.word	0x2000036c
 8004864:	20000370 	.word	0x20000370
 8004868:	200002e8 	.word	0x200002e8
 800486c:	200002ea 	.word	0x200002ea
 8004870:	200002ec 	.word	0x200002ec
 8004874:	200002ee 	.word	0x200002ee
 8004878:	2003d2b4 	.word	0x2003d2b4
 800487c:	2003d398 	.word	0x2003d398
 8004880:	20000490 	.word	0x20000490
          printf("%d, ", i_output);
 8004884:	4bc2      	ldr	r3, [pc, #776]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	48c2      	ldr	r0, [pc, #776]	; (8004b94 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800488c:	f006 fd80 	bl	800b390 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 8004890:	4bbf      	ldr	r3, [pc, #764]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4ac0      	ldr	r2, [pc, #768]	; (8004b98 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048a2:	ec53 2b17 	vmov	r2, r3, d7
 80048a6:	48bd      	ldr	r0, [pc, #756]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80048a8:	f006 fd72 	bl	800b390 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 80048ac:	4bb8      	ldr	r3, [pc, #736]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4abb      	ldr	r2, [pc, #748]	; (8004ba0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048be:	ec53 2b17 	vmov	r2, r3, d7
 80048c2:	48b6      	ldr	r0, [pc, #728]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80048c4:	f006 fd64 	bl	800b390 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 80048c8:	4bb1      	ldr	r3, [pc, #708]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4ab5      	ldr	r2, [pc, #724]	; (8004ba4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048da:	ec53 2b17 	vmov	r2, r3, d7
 80048de:	48af      	ldr	r0, [pc, #700]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80048e0:	f006 fd56 	bl	800b390 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 80048e4:	4baa      	ldr	r3, [pc, #680]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4aaf      	ldr	r2, [pc, #700]	; (8004ba8 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	edd3 7a00 	vldr	s15, [r3]
 80048f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048f6:	ec53 2b17 	vmov	r2, r3, d7
 80048fa:	48a8      	ldr	r0, [pc, #672]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80048fc:	f006 fd48 	bl	800b390 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 8004900:	4ba3      	ldr	r3, [pc, #652]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4aa9      	ldr	r2, [pc, #676]	; (8004bac <HAL_GPIO_EXTI_Callback+0x4ec>)
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004912:	ec53 2b17 	vmov	r2, r3, d7
 8004916:	48a1      	ldr	r0, [pc, #644]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004918:	f006 fd3a 	bl	800b390 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 800491c:	4b9c      	ldr	r3, [pc, #624]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4aa3      	ldr	r2, [pc, #652]	; (8004bb0 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800492e:	ec53 2b17 	vmov	r2, r3, d7
 8004932:	489a      	ldr	r0, [pc, #616]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004934:	f006 fd2c 	bl	800b390 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 8004938:	4b95      	ldr	r3, [pc, #596]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a9d      	ldr	r2, [pc, #628]	; (8004bb4 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	edd3 7a00 	vldr	s15, [r3]
 8004946:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800494a:	ec53 2b17 	vmov	r2, r3, d7
 800494e:	4893      	ldr	r0, [pc, #588]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004950:	f006 fd1e 	bl	800b390 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 8004954:	4b8e      	ldr	r3, [pc, #568]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a97      	ldr	r2, [pc, #604]	; (8004bb8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	edd3 7a00 	vldr	s15, [r3]
 8004962:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004966:	ec53 2b17 	vmov	r2, r3, d7
 800496a:	488c      	ldr	r0, [pc, #560]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 800496c:	f006 fd10 	bl	800b390 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 8004970:	4b87      	ldr	r3, [pc, #540]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a91      	ldr	r2, [pc, #580]	; (8004bbc <HAL_GPIO_EXTI_Callback+0x4fc>)
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004982:	ec53 2b17 	vmov	r2, r3, d7
 8004986:	4885      	ldr	r0, [pc, #532]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004988:	f006 fd02 	bl	800b390 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 800498c:	4b80      	ldr	r3, [pc, #512]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a8b      	ldr	r2, [pc, #556]	; (8004bc0 <HAL_GPIO_EXTI_Callback+0x500>)
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800499e:	ec53 2b17 	vmov	r2, r3, d7
 80049a2:	487e      	ldr	r0, [pc, #504]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80049a4:	f006 fcf4 	bl	800b390 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 80049a8:	4b79      	ldr	r3, [pc, #484]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a85      	ldr	r2, [pc, #532]	; (8004bc4 <HAL_GPIO_EXTI_Callback+0x504>)
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	edd3 7a00 	vldr	s15, [r3]
 80049b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049ba:	ec53 2b17 	vmov	r2, r3, d7
 80049be:	4877      	ldr	r0, [pc, #476]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80049c0:	f006 fce6 	bl	800b390 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 80049c4:	4b72      	ldr	r3, [pc, #456]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a7f      	ldr	r2, [pc, #508]	; (8004bc8 <HAL_GPIO_EXTI_Callback+0x508>)
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049d6:	ec53 2b17 	vmov	r2, r3, d7
 80049da:	4870      	ldr	r0, [pc, #448]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80049dc:	f006 fcd8 	bl	800b390 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 80049e0:	4b6b      	ldr	r3, [pc, #428]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a79      	ldr	r2, [pc, #484]	; (8004bcc <HAL_GPIO_EXTI_Callback+0x50c>)
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	edd3 7a00 	vldr	s15, [r3]
 80049ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049f2:	ec53 2b17 	vmov	r2, r3, d7
 80049f6:	4869      	ldr	r0, [pc, #420]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 80049f8:	f006 fcca 	bl	800b390 <iprintf>

          printf("%f, ", ddtheta1_res_SRAM[i_output]);
 80049fc:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a73      	ldr	r2, [pc, #460]	; (8004bd0 <HAL_GPIO_EXTI_Callback+0x510>)
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	edd3 7a00 	vldr	s15, [r3]
 8004a0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a0e:	ec53 2b17 	vmov	r2, r3, d7
 8004a12:	4862      	ldr	r0, [pc, #392]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004a14:	f006 fcbc 	bl	800b390 <iprintf>
          printf("%f, ", ddtheta2_res_SRAM[i_output]);
 8004a18:	4b5d      	ldr	r3, [pc, #372]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6d      	ldr	r2, [pc, #436]	; (8004bd4 <HAL_GPIO_EXTI_Callback+0x514>)
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	edd3 7a00 	vldr	s15, [r3]
 8004a26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a2a:	ec53 2b17 	vmov	r2, r3, d7
 8004a2e:	485b      	ldr	r0, [pc, #364]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004a30:	f006 fcae 	bl	800b390 <iprintf>
          printf("%f, ", ddtheta3_res_SRAM[i_output]);
 8004a34:	4b56      	ldr	r3, [pc, #344]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a67      	ldr	r2, [pc, #412]	; (8004bd8 <HAL_GPIO_EXTI_Callback+0x518>)
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	edd3 7a00 	vldr	s15, [r3]
 8004a42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a46:	ec53 2b17 	vmov	r2, r3, d7
 8004a4a:	4854      	ldr	r0, [pc, #336]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004a4c:	f006 fca0 	bl	800b390 <iprintf>
          printf("%f, ", ddtheta4_res_SRAM[i_output]);
 8004a50:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <HAL_GPIO_EXTI_Callback+0x51c>)
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	edd3 7a00 	vldr	s15, [r3]
 8004a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a62:	ec53 2b17 	vmov	r2, r3, d7
 8004a66:	484d      	ldr	r0, [pc, #308]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004a68:	f006 fc92 	bl	800b390 <iprintf>
          // printf("%f, ", i1_ref_SRAM[i_output]);
          // printf("%f, ", i2_ref_SRAM[i_output]);
          // printf("%f, ", i3_ref_SRAM[i_output]);
          // printf("%f, ", i4_ref_SRAM[i_output]);

          printf("%f, ", ia1_ref_SRAM[i_output]);
 8004a6c:	4b48      	ldr	r3, [pc, #288]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5b      	ldr	r2, [pc, #364]	; (8004be0 <HAL_GPIO_EXTI_Callback+0x520>)
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a7e:	ec53 2b17 	vmov	r2, r3, d7
 8004a82:	4846      	ldr	r0, [pc, #280]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004a84:	f006 fc84 	bl	800b390 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 8004a88:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a55      	ldr	r2, [pc, #340]	; (8004be4 <HAL_GPIO_EXTI_Callback+0x524>)
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	edd3 7a00 	vldr	s15, [r3]
 8004a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a9a:	ec53 2b17 	vmov	r2, r3, d7
 8004a9e:	483f      	ldr	r0, [pc, #252]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004aa0:	f006 fc76 	bl	800b390 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a4f      	ldr	r2, [pc, #316]	; (8004be8 <HAL_GPIO_EXTI_Callback+0x528>)
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	edd3 7a00 	vldr	s15, [r3]
 8004ab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ab6:	ec53 2b17 	vmov	r2, r3, d7
 8004aba:	4838      	ldr	r0, [pc, #224]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004abc:	f006 fc68 	bl	800b390 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a49      	ldr	r2, [pc, #292]	; (8004bec <HAL_GPIO_EXTI_Callback+0x52c>)
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	edd3 7a00 	vldr	s15, [r3]
 8004ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ad2:	ec53 2b17 	vmov	r2, r3, d7
 8004ad6:	4831      	ldr	r0, [pc, #196]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004ad8:	f006 fc5a 	bl	800b390 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a43      	ldr	r2, [pc, #268]	; (8004bf0 <HAL_GPIO_EXTI_Callback+0x530>)
 8004ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	482a      	ldr	r0, [pc, #168]	; (8004b94 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8004aea:	f006 fc51 	bl	800b390 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 8004aee:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <HAL_GPIO_EXTI_Callback+0x534>)
 8004af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af8:	4619      	mov	r1, r3
 8004afa:	4826      	ldr	r0, [pc, #152]	; (8004b94 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8004afc:	f006 fc48 	bl	800b390 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 8004b00:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3c      	ldr	r2, [pc, #240]	; (8004bf8 <HAL_GPIO_EXTI_Callback+0x538>)
 8004b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4821      	ldr	r0, [pc, #132]	; (8004b94 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8004b0e:	f006 fc3f 	bl	800b390 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a39      	ldr	r2, [pc, #228]	; (8004bfc <HAL_GPIO_EXTI_Callback+0x53c>)
 8004b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	481d      	ldr	r0, [pc, #116]	; (8004b94 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8004b20:	f006 fc36 	bl	800b390 <iprintf>

          printf("%f, ", fd1_ref_SRAM[i_output]);
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a35      	ldr	r2, [pc, #212]	; (8004c00 <HAL_GPIO_EXTI_Callback+0x540>)
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	edd3 7a00 	vldr	s15, [r3]
 8004b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b36:	ec53 2b17 	vmov	r2, r3, d7
 8004b3a:	4818      	ldr	r0, [pc, #96]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004b3c:	f006 fc28 	bl	800b390 <iprintf>
          printf("%f, ", fd2_ref_SRAM[i_output]);
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2f      	ldr	r2, [pc, #188]	; (8004c04 <HAL_GPIO_EXTI_Callback+0x544>)
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	edd3 7a00 	vldr	s15, [r3]
 8004b4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b52:	ec53 2b17 	vmov	r2, r3, d7
 8004b56:	4811      	ldr	r0, [pc, #68]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004b58:	f006 fc1a 	bl	800b390 <iprintf>
          printf("%f, ", fd3_ref_SRAM[i_output]);
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <HAL_GPIO_EXTI_Callback+0x548>)
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b6e:	ec53 2b17 	vmov	r2, r3, d7
 8004b72:	480a      	ldr	r0, [pc, #40]	; (8004b9c <HAL_GPIO_EXTI_Callback+0x4dc>)
 8004b74:	f006 fc0c 	bl	800b390 <iprintf>
          printf("%f, ", fd4_ref_SRAM[i_output]);
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <HAL_GPIO_EXTI_Callback+0x54c>)
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	edd3 7a00 	vldr	s15, [r3]
 8004b86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b8a:	ec53 2b17 	vmov	r2, r3, d7
 8004b8e:	e03f      	b.n	8004c10 <HAL_GPIO_EXTI_Callback+0x550>
 8004b90:	20000490 	.word	0x20000490
 8004b94:	0800dfa4 	.word	0x0800dfa4
 8004b98:	20000494 	.word	0x20000494
 8004b9c:	0800dfac 	.word	0x0800dfac
 8004ba0:	20001434 	.word	0x20001434
 8004ba4:	200023d4 	.word	0x200023d4
 8004ba8:	20003374 	.word	0x20003374
 8004bac:	20004314 	.word	0x20004314
 8004bb0:	200052b4 	.word	0x200052b4
 8004bb4:	20006254 	.word	0x20006254
 8004bb8:	200071f4 	.word	0x200071f4
 8004bbc:	20008194 	.word	0x20008194
 8004bc0:	20009134 	.word	0x20009134
 8004bc4:	2000a0d4 	.word	0x2000a0d4
 8004bc8:	2000b074 	.word	0x2000b074
 8004bcc:	2000c014 	.word	0x2000c014
 8004bd0:	2000cfb4 	.word	0x2000cfb4
 8004bd4:	2000df54 	.word	0x2000df54
 8004bd8:	2000eef4 	.word	0x2000eef4
 8004bdc:	2000fe94 	.word	0x2000fe94
 8004be0:	20010e34 	.word	0x20010e34
 8004be4:	20011dd4 	.word	0x20011dd4
 8004be8:	20012d74 	.word	0x20012d74
 8004bec:	20013d14 	.word	0x20013d14
 8004bf0:	20014cb4 	.word	0x20014cb4
 8004bf4:	20015484 	.word	0x20015484
 8004bf8:	20015c54 	.word	0x20015c54
 8004bfc:	20016424 	.word	0x20016424
 8004c00:	20016bf4 	.word	0x20016bf4
 8004c04:	20017b94 	.word	0x20017b94
 8004c08:	20018b34 	.word	0x20018b34
 8004c0c:	20019ad4 	.word	0x20019ad4
 8004c10:	48c5      	ldr	r0, [pc, #788]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004c12:	f006 fbbd 	bl	800b390 <iprintf>
          
          printf("%f, ", Ki_df_integral1_SRAM[i_output]);
 8004c16:	4bc5      	ldr	r3, [pc, #788]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4ac5      	ldr	r2, [pc, #788]	; (8004f30 <HAL_GPIO_EXTI_Callback+0x870>)
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	edd3 7a00 	vldr	s15, [r3]
 8004c24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c28:	ec53 2b17 	vmov	r2, r3, d7
 8004c2c:	48be      	ldr	r0, [pc, #760]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004c2e:	f006 fbaf 	bl	800b390 <iprintf>
          printf("%f, ", Ki_df_integral2_SRAM[i_output]);
 8004c32:	4bbe      	ldr	r3, [pc, #760]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4abf      	ldr	r2, [pc, #764]	; (8004f34 <HAL_GPIO_EXTI_Callback+0x874>)
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	edd3 7a00 	vldr	s15, [r3]
 8004c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c44:	ec53 2b17 	vmov	r2, r3, d7
 8004c48:	48b7      	ldr	r0, [pc, #732]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004c4a:	f006 fba1 	bl	800b390 <iprintf>
          printf("%f, ", Ki_df_integral3_SRAM[i_output]);
 8004c4e:	4bb7      	ldr	r3, [pc, #732]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4ab9      	ldr	r2, [pc, #740]	; (8004f38 <HAL_GPIO_EXTI_Callback+0x878>)
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c60:	ec53 2b17 	vmov	r2, r3, d7
 8004c64:	48b0      	ldr	r0, [pc, #704]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004c66:	f006 fb93 	bl	800b390 <iprintf>
          printf("%f, ", Ki_df_integral4_SRAM[i_output]);
 8004c6a:	4bb0      	ldr	r3, [pc, #704]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4ab3      	ldr	r2, [pc, #716]	; (8004f3c <HAL_GPIO_EXTI_Callback+0x87c>)
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c7c:	ec53 2b17 	vmov	r2, r3, d7
 8004c80:	48a9      	ldr	r0, [pc, #676]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004c82:	f006 fb85 	bl	800b390 <iprintf>
          
          printf("%f, ", tau_dob1_SRAM[i_output]);
 8004c86:	4ba9      	ldr	r3, [pc, #676]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4aad      	ldr	r2, [pc, #692]	; (8004f40 <HAL_GPIO_EXTI_Callback+0x880>)
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c98:	ec53 2b17 	vmov	r2, r3, d7
 8004c9c:	48a2      	ldr	r0, [pc, #648]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004c9e:	f006 fb77 	bl	800b390 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 8004ca2:	4ba2      	ldr	r3, [pc, #648]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4aa7      	ldr	r2, [pc, #668]	; (8004f44 <HAL_GPIO_EXTI_Callback+0x884>)
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	edd3 7a00 	vldr	s15, [r3]
 8004cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cb4:	ec53 2b17 	vmov	r2, r3, d7
 8004cb8:	489b      	ldr	r0, [pc, #620]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004cba:	f006 fb69 	bl	800b390 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 8004cbe:	4b9b      	ldr	r3, [pc, #620]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4aa1      	ldr	r2, [pc, #644]	; (8004f48 <HAL_GPIO_EXTI_Callback+0x888>)
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	edd3 7a00 	vldr	s15, [r3]
 8004ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cd0:	ec53 2b17 	vmov	r2, r3, d7
 8004cd4:	4894      	ldr	r0, [pc, #592]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004cd6:	f006 fb5b 	bl	800b390 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 8004cda:	4b94      	ldr	r3, [pc, #592]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a9b      	ldr	r2, [pc, #620]	; (8004f4c <HAL_GPIO_EXTI_Callback+0x88c>)
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	edd3 7a00 	vldr	s15, [r3]
 8004ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cec:	ec53 2b17 	vmov	r2, r3, d7
 8004cf0:	488d      	ldr	r0, [pc, #564]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004cf2:	f006 fb4d 	bl	800b390 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 8004cf6:	4b8d      	ldr	r3, [pc, #564]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a95      	ldr	r2, [pc, #596]	; (8004f50 <HAL_GPIO_EXTI_Callback+0x890>)
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	edd3 7a00 	vldr	s15, [r3]
 8004d04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d08:	ec53 2b17 	vmov	r2, r3, d7
 8004d0c:	4886      	ldr	r0, [pc, #536]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004d0e:	f006 fb3f 	bl	800b390 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 8004d12:	4b86      	ldr	r3, [pc, #536]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a8f      	ldr	r2, [pc, #572]	; (8004f54 <HAL_GPIO_EXTI_Callback+0x894>)
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	edd3 7a00 	vldr	s15, [r3]
 8004d20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d24:	ec53 2b17 	vmov	r2, r3, d7
 8004d28:	487f      	ldr	r0, [pc, #508]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004d2a:	f006 fb31 	bl	800b390 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 8004d2e:	4b7f      	ldr	r3, [pc, #508]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a89      	ldr	r2, [pc, #548]	; (8004f58 <HAL_GPIO_EXTI_Callback+0x898>)
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d40:	ec53 2b17 	vmov	r2, r3, d7
 8004d44:	4878      	ldr	r0, [pc, #480]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004d46:	f006 fb23 	bl	800b390 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 8004d4a:	4b78      	ldr	r3, [pc, #480]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a83      	ldr	r2, [pc, #524]	; (8004f5c <HAL_GPIO_EXTI_Callback+0x89c>)
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d5c:	ec53 2b17 	vmov	r2, r3, d7
 8004d60:	4871      	ldr	r0, [pc, #452]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004d62:	f006 fb15 	bl	800b390 <iprintf>

          printf("%f, ", yaw_SRAM[i_output]);
 8004d66:	4b71      	ldr	r3, [pc, #452]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a7d      	ldr	r2, [pc, #500]	; (8004f60 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	edd3 7a00 	vldr	s15, [r3]
 8004d74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d78:	ec53 2b17 	vmov	r2, r3, d7
 8004d7c:	486a      	ldr	r0, [pc, #424]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004d7e:	f006 fb07 	bl	800b390 <iprintf>
          printf("%f, ", roll_SRAM[i_output]);
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a77      	ldr	r2, [pc, #476]	; (8004f64 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	edd3 7a00 	vldr	s15, [r3]
 8004d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d94:	ec53 2b17 	vmov	r2, r3, d7
 8004d98:	4863      	ldr	r0, [pc, #396]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004d9a:	f006 faf9 	bl	800b390 <iprintf>
          printf("%f, ", pitch_SRAM[i_output]);
 8004d9e:	4b63      	ldr	r3, [pc, #396]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a71      	ldr	r2, [pc, #452]	; (8004f68 <HAL_GPIO_EXTI_Callback+0x8a8>)
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	edd3 7a00 	vldr	s15, [r3]
 8004dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004db0:	ec53 2b17 	vmov	r2, r3, d7
 8004db4:	485c      	ldr	r0, [pc, #368]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004db6:	f006 faeb 	bl	800b390 <iprintf>

          printf("%f, ", yaw_rate_SRAM[i_output]);
 8004dba:	4b5c      	ldr	r3, [pc, #368]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6b      	ldr	r2, [pc, #428]	; (8004f6c <HAL_GPIO_EXTI_Callback+0x8ac>)
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dcc:	ec53 2b17 	vmov	r2, r3, d7
 8004dd0:	4855      	ldr	r0, [pc, #340]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004dd2:	f006 fadd 	bl	800b390 <iprintf>
          printf("%f, ", yaw_rate_notch_SRAM[i_output]);
 8004dd6:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a65      	ldr	r2, [pc, #404]	; (8004f70 <HAL_GPIO_EXTI_Callback+0x8b0>)
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004de8:	ec53 2b17 	vmov	r2, r3, d7
 8004dec:	484e      	ldr	r0, [pc, #312]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004dee:	f006 facf 	bl	800b390 <iprintf>

          printf("%f, ", roll_rate_SRAM[i_output]);
 8004df2:	4b4e      	ldr	r3, [pc, #312]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a5f      	ldr	r2, [pc, #380]	; (8004f74 <HAL_GPIO_EXTI_Callback+0x8b4>)
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	edd3 7a00 	vldr	s15, [r3]
 8004e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e04:	ec53 2b17 	vmov	r2, r3, d7
 8004e08:	4847      	ldr	r0, [pc, #284]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004e0a:	f006 fac1 	bl	800b390 <iprintf>
          printf("%f, ", pitch_rate_SRAM[i_output]);
 8004e0e:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a59      	ldr	r2, [pc, #356]	; (8004f78 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	edd3 7a00 	vldr	s15, [r3]
 8004e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e20:	ec53 2b17 	vmov	r2, r3, d7
 8004e24:	4840      	ldr	r0, [pc, #256]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004e26:	f006 fab3 	bl	800b390 <iprintf>

          printf("%f, ", Acc_x_SRAM[i_output]);
 8004e2a:	4b40      	ldr	r3, [pc, #256]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a53      	ldr	r2, [pc, #332]	; (8004f7c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	edd3 7a00 	vldr	s15, [r3]
 8004e38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e3c:	ec53 2b17 	vmov	r2, r3, d7
 8004e40:	4839      	ldr	r0, [pc, #228]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004e42:	f006 faa5 	bl	800b390 <iprintf>
          printf("%f, ", Acc_y_SRAM[i_output]);
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4d      	ldr	r2, [pc, #308]	; (8004f80 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	edd3 7a00 	vldr	s15, [r3]
 8004e54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e58:	ec53 2b17 	vmov	r2, r3, d7
 8004e5c:	4832      	ldr	r0, [pc, #200]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004e5e:	f006 fa97 	bl	800b390 <iprintf>
          printf("%f, ", Acc_z_SRAM[i_output]);
 8004e62:	4b32      	ldr	r3, [pc, #200]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a47      	ldr	r2, [pc, #284]	; (8004f84 <HAL_GPIO_EXTI_Callback+0x8c4>)
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	edd3 7a00 	vldr	s15, [r3]
 8004e70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e74:	ec53 2b17 	vmov	r2, r3, d7
 8004e78:	482b      	ldr	r0, [pc, #172]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004e7a:	f006 fa89 	bl	800b390 <iprintf>

          printf("%f, ", Acc_x_correct_SRAM[i_output]);
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a41      	ldr	r2, [pc, #260]	; (8004f88 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	edd3 7a00 	vldr	s15, [r3]
 8004e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e90:	ec53 2b17 	vmov	r2, r3, d7
 8004e94:	4824      	ldr	r0, [pc, #144]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004e96:	f006 fa7b 	bl	800b390 <iprintf>
          printf("%f, ", Acc_y_correct_SRAM[i_output]);
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a3b      	ldr	r2, [pc, #236]	; (8004f8c <HAL_GPIO_EXTI_Callback+0x8cc>)
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	edd3 7a00 	vldr	s15, [r3]
 8004ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004eac:	ec53 2b17 	vmov	r2, r3, d7
 8004eb0:	481d      	ldr	r0, [pc, #116]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004eb2:	f006 fa6d 	bl	800b390 <iprintf>
          printf("%f, ", Acc_z_correct_SRAM[i_output]);
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	; (8004f90 <HAL_GPIO_EXTI_Callback+0x8d0>)
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	edd3 7a00 	vldr	s15, [r3]
 8004ec4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ec8:	ec53 2b17 	vmov	r2, r3, d7
 8004ecc:	4816      	ldr	r0, [pc, #88]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004ece:	f006 fa5f 	bl	800b390 <iprintf>

          printf("%f, ", lambda_1_hat_SRAM[i_output]);
 8004ed2:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <HAL_GPIO_EXTI_Callback+0x8d4>)
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ee4:	ec53 2b17 	vmov	r2, r3, d7
 8004ee8:	480f      	ldr	r0, [pc, #60]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004eea:	f006 fa51 	bl	800b390 <iprintf>
          printf("%f, ", lambda_2_hat_SRAM[i_output]);
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a29      	ldr	r2, [pc, #164]	; (8004f98 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	edd3 7a00 	vldr	s15, [r3]
 8004efc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f00:	ec53 2b17 	vmov	r2, r3, d7
 8004f04:	4808      	ldr	r0, [pc, #32]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004f06:	f006 fa43 	bl	800b390 <iprintf>
          printf("%f, ", lambda_3_hat_SRAM[i_output]);
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x86c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	edd3 7a00 	vldr	s15, [r3]
 8004f18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f1c:	ec53 2b17 	vmov	r2, r3, d7
 8004f20:	4801      	ldr	r0, [pc, #4]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x868>)
 8004f22:	f006 fa35 	bl	800b390 <iprintf>
 8004f26:	e03b      	b.n	8004fa0 <HAL_GPIO_EXTI_Callback+0x8e0>
 8004f28:	0800dfac 	.word	0x0800dfac
 8004f2c:	20000490 	.word	0x20000490
 8004f30:	2001aa74 	.word	0x2001aa74
 8004f34:	2001ba14 	.word	0x2001ba14
 8004f38:	2001c9b4 	.word	0x2001c9b4
 8004f3c:	2001d954 	.word	0x2001d954
 8004f40:	2001e8f4 	.word	0x2001e8f4
 8004f44:	2001f894 	.word	0x2001f894
 8004f48:	20020834 	.word	0x20020834
 8004f4c:	200217d4 	.word	0x200217d4
 8004f50:	20022774 	.word	0x20022774
 8004f54:	20023714 	.word	0x20023714
 8004f58:	200246b4 	.word	0x200246b4
 8004f5c:	20025654 	.word	0x20025654
 8004f60:	200265f4 	.word	0x200265f4
 8004f64:	20027594 	.word	0x20027594
 8004f68:	20028534 	.word	0x20028534
 8004f6c:	200294d4 	.word	0x200294d4
 8004f70:	2002c3b4 	.word	0x2002c3b4
 8004f74:	2002a474 	.word	0x2002a474
 8004f78:	2002b414 	.word	0x2002b414
 8004f7c:	2002d354 	.word	0x2002d354
 8004f80:	2002e2f4 	.word	0x2002e2f4
 8004f84:	2002f294 	.word	0x2002f294
 8004f88:	20030234 	.word	0x20030234
 8004f8c:	200311d4 	.word	0x200311d4
 8004f90:	20032174 	.word	0x20032174
 8004f94:	20035054 	.word	0x20035054
 8004f98:	20035ff4 	.word	0x20035ff4
 8004f9c:	20036f94 	.word	0x20036f94
          printf("%f, ", lambda_4_hat_SRAM[i_output]);
 8004fa0:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <HAL_GPIO_EXTI_Callback+0x998>)
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	edd3 7a00 	vldr	s15, [r3]
 8004fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fb2:	ec53 2b17 	vmov	r2, r3, d7
 8004fb6:	4829      	ldr	r0, [pc, #164]	; (800505c <HAL_GPIO_EXTI_Callback+0x99c>)
 8004fb8:	f006 f9ea 	bl	800b390 <iprintf>

          printf("%f, ", lambda_1_hat_acc_SRAM[i_output]);
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a27      	ldr	r2, [pc, #156]	; (8005060 <HAL_GPIO_EXTI_Callback+0x9a0>)
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fce:	ec53 2b17 	vmov	r2, r3, d7
 8004fd2:	4822      	ldr	r0, [pc, #136]	; (800505c <HAL_GPIO_EXTI_Callback+0x99c>)
 8004fd4:	f006 f9dc 	bl	800b390 <iprintf>
          printf("%f, ", lambda_2_hat_acc_SRAM[i_output]);
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a21      	ldr	r2, [pc, #132]	; (8005064 <HAL_GPIO_EXTI_Callback+0x9a4>)
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	edd3 7a00 	vldr	s15, [r3]
 8004fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fea:	ec53 2b17 	vmov	r2, r3, d7
 8004fee:	481b      	ldr	r0, [pc, #108]	; (800505c <HAL_GPIO_EXTI_Callback+0x99c>)
 8004ff0:	f006 f9ce 	bl	800b390 <iprintf>
          printf("%f, ", lambda_3_hat_acc_SRAM[i_output]);
 8004ff4:	4b17      	ldr	r3, [pc, #92]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_GPIO_EXTI_Callback+0x9a8>)
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005006:	ec53 2b17 	vmov	r2, r3, d7
 800500a:	4814      	ldr	r0, [pc, #80]	; (800505c <HAL_GPIO_EXTI_Callback+0x99c>)
 800500c:	f006 f9c0 	bl	800b390 <iprintf>
          printf("%f, ", lambda_4_hat_acc_SRAM[i_output]);
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <HAL_GPIO_EXTI_Callback+0x9ac>)
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	edd3 7a00 	vldr	s15, [r3]
 800501e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005022:	ec53 2b17 	vmov	r2, r3, d7
 8005026:	480d      	ldr	r0, [pc, #52]	; (800505c <HAL_GPIO_EXTI_Callback+0x99c>)
 8005028:	f006 f9b2 	bl	800b390 <iprintf>

          printf("\r\n");
 800502c:	4810      	ldr	r0, [pc, #64]	; (8005070 <HAL_GPIO_EXTI_Callback+0x9b0>)
 800502e:	f006 fa23 	bl	800b478 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	4a06      	ldr	r2, [pc, #24]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_GPIO_EXTI_Callback+0x994>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005044:	f6ff ac1e 	blt.w	8004884 <HAL_GPIO_EXTI_Callback+0x1c4>
        }
        break;
 8005048:	e000      	b.n	800504c <HAL_GPIO_EXTI_Callback+0x98c>
        break;
 800504a:	bf00      	nop
    }


	}
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000490 	.word	0x20000490
 8005058:	20037f34 	.word	0x20037f34
 800505c:	0800dfac 	.word	0x0800dfac
 8005060:	20038ed4 	.word	0x20038ed4
 8005064:	20039e74 	.word	0x20039e74
 8005068:	2003ae14 	.word	0x2003ae14
 800506c:	2003bdb4 	.word	0x2003bdb4
 8005070:	0800dfb4 	.word	0x0800dfb4

08005074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005078:	f001 f96f 	bl	800635a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800507c:	f000 f8b8 	bl	80051f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005080:	f000 fc8a 	bl	8005998 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005084:	f000 fc2a 	bl	80058dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005088:	f000 fc58 	bl	800593c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800508c:	f000 f9e2 	bl	8005454 <MX_TIM2_Init>
  MX_TIM1_Init();
 8005090:	f000 f986 	bl	80053a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8005094:	f000 fa2c 	bl	80054f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005098:	f000 fa80 	bl	800559c <MX_TIM4_Init>
  MX_TIM8_Init();
 800509c:	f000 fb56 	bl	800574c <MX_TIM8_Init>
  MX_TIM5_Init();
 80050a0:	f000 fad2 	bl	8005648 <MX_TIM5_Init>
  MX_TIM9_Init();
 80050a4:	f000 fbac 	bl	8005800 <MX_TIM9_Init>
  MX_I2C1_Init();
 80050a8:	f000 f93a 	bl	8005320 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80050ac:	483f      	ldr	r0, [pc, #252]	; (80051ac <main+0x138>)
 80050ae:	f003 fc6d 	bl	800898c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80050b2:	213c      	movs	r1, #60	; 0x3c
 80050b4:	483e      	ldr	r0, [pc, #248]	; (80051b0 <main+0x13c>)
 80050b6:	f003 fd9f 	bl	8008bf8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80050ba:	213c      	movs	r1, #60	; 0x3c
 80050bc:	483d      	ldr	r0, [pc, #244]	; (80051b4 <main+0x140>)
 80050be:	f003 fd9b 	bl	8008bf8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80050c2:	213c      	movs	r1, #60	; 0x3c
 80050c4:	483c      	ldr	r0, [pc, #240]	; (80051b8 <main+0x144>)
 80050c6:	f003 fd97 	bl	8008bf8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80050ca:	213c      	movs	r1, #60	; 0x3c
 80050cc:	483b      	ldr	r0, [pc, #236]	; (80051bc <main+0x148>)
 80050ce:	f003 fd93 	bl	8008bf8 <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 80050d2:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <main+0x14c>)
 80050d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050d8:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <main+0x150>)
 80050da:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 80050dc:	4b38      	ldr	r3, [pc, #224]	; (80051c0 <main+0x14c>)
 80050de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <main+0x154>)
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 80050e6:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <main+0x14c>)
 80050e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <main+0x158>)
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 80050f0:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <main+0x14c>)
 80050f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050f6:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <main+0x15c>)
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80050fa:	2100      	movs	r1, #0
 80050fc:	4835      	ldr	r0, [pc, #212]	; (80051d4 <main+0x160>)
 80050fe:	f003 fca5 	bl	8008a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8005102:	210c      	movs	r1, #12
 8005104:	4833      	ldr	r0, [pc, #204]	; (80051d4 <main+0x160>)
 8005106:	f003 fca1 	bl	8008a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800510a:	2100      	movs	r1, #0
 800510c:	4832      	ldr	r0, [pc, #200]	; (80051d8 <main+0x164>)
 800510e:	f003 fc9d 	bl	8008a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8005112:	2104      	movs	r1, #4
 8005114:	4830      	ldr	r0, [pc, #192]	; (80051d8 <main+0x164>)
 8005116:	f003 fc99 	bl	8008a4c <HAL_TIM_PWM_Start>

  #ifdef Enable_I2C
  bno055_assignI2C(&hi2c1);
 800511a:	4830      	ldr	r0, [pc, #192]	; (80051dc <main+0x168>)
 800511c:	f7fb fc9a 	bl	8000a54 <bno055_assignI2C>
  bno055_reset();
 8005120:	f7fb fa9a 	bl	8000658 <bno055_reset>
  bno055_setup();
 8005124:	f7fb faa4 	bl	8000670 <bno055_setup>
  bno055_setOperationModeNDOF();
 8005128:	f7fb fa8f 	bl	800064a <bno055_setOperationModeNDOF>
  #endif

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 800512c:	2201      	movs	r2, #1
 800512e:	2101      	movs	r1, #1
 8005130:	482b      	ldr	r0, [pc, #172]	; (80051e0 <main+0x16c>)
 8005132:	f001 fc4d 	bl	80069d0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    #ifdef Enable_I2C
    Euler      = bno055_getVectorEuler();
 8005136:	f7fb fc59 	bl	80009ec <bno055_getVectorEuler>
 800513a:	eeb0 4b40 	vmov.f64	d4, d0
 800513e:	eeb0 5b41 	vmov.f64	d5, d1
 8005142:	eeb0 6b42 	vmov.f64	d6, d2
 8005146:	eeb0 7b43 	vmov.f64	d7, d3
 800514a:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <main+0x170>)
 800514c:	ed83 4b00 	vstr	d4, [r3]
 8005150:	ed83 5b02 	vstr	d5, [r3, #8]
 8005154:	ed83 6b04 	vstr	d6, [r3, #16]
 8005158:	ed83 7b06 	vstr	d7, [r3, #24]
    Gyro       = bno055_getVectorGyroscope();
 800515c:	f7fb fc13 	bl	8000986 <bno055_getVectorGyroscope>
 8005160:	eeb0 4b40 	vmov.f64	d4, d0
 8005164:	eeb0 5b41 	vmov.f64	d5, d1
 8005168:	eeb0 6b42 	vmov.f64	d6, d2
 800516c:	eeb0 7b43 	vmov.f64	d7, d3
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <main+0x174>)
 8005172:	ed83 4b00 	vstr	d4, [r3]
 8005176:	ed83 5b02 	vstr	d5, [r3, #8]
 800517a:	ed83 6b04 	vstr	d6, [r3, #16]
 800517e:	ed83 7b06 	vstr	d7, [r3, #24]
    Acc        = bno055_getVectorAccelerometer();
 8005182:	f7fb fbcd 	bl	8000920 <bno055_getVectorAccelerometer>
 8005186:	eeb0 4b40 	vmov.f64	d4, d0
 800518a:	eeb0 5b41 	vmov.f64	d5, d1
 800518e:	eeb0 6b42 	vmov.f64	d6, d2
 8005192:	eeb0 7b43 	vmov.f64	d7, d3
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <main+0x178>)
 8005198:	ed83 4b00 	vstr	d4, [r3]
 800519c:	ed83 5b02 	vstr	d5, [r3, #8]
 80051a0:	ed83 6b04 	vstr	d6, [r3, #16]
 80051a4:	ed83 7b06 	vstr	d7, [r3, #24]
    Euler      = bno055_getVectorEuler();
 80051a8:	e7c5      	b.n	8005136 <main+0xc2>
 80051aa:	bf00      	nop
 80051ac:	2003d3f8 	.word	0x2003d3f8
 80051b0:	2003d358 	.word	0x2003d358
 80051b4:	2003d2f4 	.word	0x2003d2f4
 80051b8:	2003cda0 	.word	0x2003cda0
 80051bc:	2003cd60 	.word	0x2003cd60
 80051c0:	2000000a 	.word	0x2000000a
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40010400 	.word	0x40010400
 80051d4:	2003d2b4 	.word	0x2003d2b4
 80051d8:	2003d398 	.word	0x2003d398
 80051dc:	2003ce60 	.word	0x2003ce60
 80051e0:	40020400 	.word	0x40020400
 80051e4:	2003d338 	.word	0x2003d338
 80051e8:	2003d438 	.word	0x2003d438
 80051ec:	2003d3d8 	.word	0x2003d3d8

080051f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b0b8      	sub	sp, #224	; 0xe0
 80051f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80051fa:	2234      	movs	r2, #52	; 0x34
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f005 fc85 	bl	800ab0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005204:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	2290      	movs	r2, #144	; 0x90
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f005 fc76 	bl	800ab0e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005222:	f002 fa5b 	bl	80076dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005226:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <SystemClock_Config+0x124>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a3a      	ldr	r2, [pc, #232]	; (8005314 <SystemClock_Config+0x124>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
 8005232:	4b38      	ldr	r3, [pc, #224]	; (8005314 <SystemClock_Config+0x124>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800523e:	4b36      	ldr	r3, [pc, #216]	; (8005318 <SystemClock_Config+0x128>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005246:	4a34      	ldr	r2, [pc, #208]	; (8005318 <SystemClock_Config+0x128>)
 8005248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b32      	ldr	r3, [pc, #200]	; (8005318 <SystemClock_Config+0x128>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800525a:	2301      	movs	r3, #1
 800525c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005260:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005268:	2302      	movs	r3, #2
 800526a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800526e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005276:	2304      	movs	r3, #4
 8005278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800527c:	2360      	movs	r3, #96	; 0x60
 800527e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005282:	2302      	movs	r3, #2
 8005284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005288:	2304      	movs	r3, #4
 800528a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800528e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005292:	4618      	mov	r0, r3
 8005294:	f002 fa82 	bl	800779c <HAL_RCC_OscConfig>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800529e:	f000 fc85 	bl	8005bac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80052a2:	f002 fa2b 	bl	80076fc <HAL_PWREx_EnableOverDrive>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80052ac:	f000 fc7e 	bl	8005bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052b0:	230f      	movs	r3, #15
 80052b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052b6:	2302      	movs	r3, #2
 80052b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80052c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80052d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052d4:	2103      	movs	r1, #3
 80052d6:	4618      	mov	r0, r3
 80052d8:	f002 fd0e 	bl	8007cf8 <HAL_RCC_ClockConfig>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80052e2:	f000 fc63 	bl	8005bac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <SystemClock_Config+0x12c>)
 80052e8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80052ea:	2300      	movs	r3, #0
 80052ec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80052ee:	2300      	movs	r3, #0
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 fef3 	bl	80080e8 <HAL_RCCEx_PeriphCLKConfig>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8005308:	f000 fc50 	bl	8005bac <Error_Handler>
  }
}
 800530c:	bf00      	nop
 800530e:	37e0      	adds	r7, #224	; 0xe0
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	40007000 	.word	0x40007000
 800531c:	00204100 	.word	0x00204100

08005320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <MX_I2C1_Init+0x74>)
 8005326:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <MX_I2C1_Init+0x78>)
 8005328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <MX_I2C1_Init+0x74>)
 800532c:	4a1b      	ldr	r2, [pc, #108]	; (800539c <MX_I2C1_Init+0x7c>)
 800532e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005330:	4b18      	ldr	r3, [pc, #96]	; (8005394 <MX_I2C1_Init+0x74>)
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <MX_I2C1_Init+0x74>)
 8005338:	2201      	movs	r2, #1
 800533a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800533c:	4b15      	ldr	r3, [pc, #84]	; (8005394 <MX_I2C1_Init+0x74>)
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <MX_I2C1_Init+0x74>)
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <MX_I2C1_Init+0x74>)
 800534a:	2200      	movs	r2, #0
 800534c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <MX_I2C1_Init+0x74>)
 8005350:	2200      	movs	r2, #0
 8005352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <MX_I2C1_Init+0x74>)
 8005356:	2200      	movs	r2, #0
 8005358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800535a:	480e      	ldr	r0, [pc, #56]	; (8005394 <MX_I2C1_Init+0x74>)
 800535c:	f001 fb6a 	bl	8006a34 <HAL_I2C_Init>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005366:	f000 fc21 	bl	8005bac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800536a:	2100      	movs	r1, #0
 800536c:	4809      	ldr	r0, [pc, #36]	; (8005394 <MX_I2C1_Init+0x74>)
 800536e:	f001 ffd5 	bl	800731c <HAL_I2CEx_ConfigAnalogFilter>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005378:	f000 fc18 	bl	8005bac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800537c:	2100      	movs	r1, #0
 800537e:	4805      	ldr	r0, [pc, #20]	; (8005394 <MX_I2C1_Init+0x74>)
 8005380:	f002 f817 	bl	80073b2 <HAL_I2CEx_ConfigDigitalFilter>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800538a:	f000 fc0f 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800538e:	bf00      	nop
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	2003ce60 	.word	0x2003ce60
 8005398:	40005400 	.word	0x40005400
 800539c:	2010091a 	.word	0x2010091a

080053a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08c      	sub	sp, #48	; 0x30
 80053a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053a6:	f107 030c 	add.w	r3, r7, #12
 80053aa:	2224      	movs	r2, #36	; 0x24
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f005 fbad 	bl	800ab0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053b4:	463b      	mov	r3, r7
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053be:	4b23      	ldr	r3, [pc, #140]	; (800544c <MX_TIM1_Init+0xac>)
 80053c0:	4a23      	ldr	r2, [pc, #140]	; (8005450 <MX_TIM1_Init+0xb0>)
 80053c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80053c4:	4b21      	ldr	r3, [pc, #132]	; (800544c <MX_TIM1_Init+0xac>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <MX_TIM1_Init+0xac>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80053d0:	4b1e      	ldr	r3, [pc, #120]	; (800544c <MX_TIM1_Init+0xac>)
 80053d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d8:	4b1c      	ldr	r3, [pc, #112]	; (800544c <MX_TIM1_Init+0xac>)
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80053de:	4b1b      	ldr	r3, [pc, #108]	; (800544c <MX_TIM1_Init+0xac>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <MX_TIM1_Init+0xac>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80053ea:	2303      	movs	r3, #3
 80053ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80053f2:	2301      	movs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80053fe:	2300      	movs	r3, #0
 8005400:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005402:	2301      	movs	r3, #1
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005406:	2300      	movs	r3, #0
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800540a:	2300      	movs	r3, #0
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4619      	mov	r1, r3
 8005414:	480d      	ldr	r0, [pc, #52]	; (800544c <MX_TIM1_Init+0xac>)
 8005416:	f003 fb5d 	bl	8008ad4 <HAL_TIM_Encoder_Init>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8005420:	f000 fbc4 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005424:	2300      	movs	r3, #0
 8005426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005428:	2300      	movs	r3, #0
 800542a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800542c:	2300      	movs	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005430:	463b      	mov	r3, r7
 8005432:	4619      	mov	r1, r3
 8005434:	4805      	ldr	r0, [pc, #20]	; (800544c <MX_TIM1_Init+0xac>)
 8005436:	f004 faed 	bl	8009a14 <HAL_TIMEx_MasterConfigSynchronization>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005440:	f000 fbb4 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005444:	bf00      	nop
 8005446:	3730      	adds	r7, #48	; 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	2003d358 	.word	0x2003d358
 8005450:	40010000 	.word	0x40010000

08005454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800545a:	f107 0310 	add.w	r3, r7, #16
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <MX_TIM2_Init+0x98>)
 8005474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005478:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800547a:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <MX_TIM2_Init+0x98>)
 800547c:	225f      	movs	r2, #95	; 0x5f
 800547e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <MX_TIM2_Init+0x98>)
 8005482:	2200      	movs	r2, #0
 8005484:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8005486:	4b19      	ldr	r3, [pc, #100]	; (80054ec <MX_TIM2_Init+0x98>)
 8005488:	f240 32e7 	movw	r2, #999	; 0x3e7
 800548c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <MX_TIM2_Init+0x98>)
 8005490:	2200      	movs	r2, #0
 8005492:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <MX_TIM2_Init+0x98>)
 8005496:	2200      	movs	r2, #0
 8005498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800549a:	4814      	ldr	r0, [pc, #80]	; (80054ec <MX_TIM2_Init+0x98>)
 800549c:	f003 fa4a 	bl	8008934 <HAL_TIM_Base_Init>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80054a6:	f000 fb81 	bl	8005bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	4619      	mov	r1, r3
 80054b6:	480d      	ldr	r0, [pc, #52]	; (80054ec <MX_TIM2_Init+0x98>)
 80054b8:	f003 fe0c 	bl	80090d4 <HAL_TIM_ConfigClockSource>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80054c2:	f000 fb73 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4806      	ldr	r0, [pc, #24]	; (80054ec <MX_TIM2_Init+0x98>)
 80054d4:	f004 fa9e 	bl	8009a14 <HAL_TIMEx_MasterConfigSynchronization>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80054de:	f000 fb65 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80054e2:	bf00      	nop
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2003d3f8 	.word	0x2003d3f8

080054f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	2224      	movs	r2, #36	; 0x24
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f005 fb05 	bl	800ab0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005504:	463b      	mov	r3, r7
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <MX_TIM3_Init+0xa4>)
 8005510:	4a21      	ldr	r2, [pc, #132]	; (8005598 <MX_TIM3_Init+0xa8>)
 8005512:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005514:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <MX_TIM3_Init+0xa4>)
 8005516:	2200      	movs	r2, #0
 8005518:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800551a:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <MX_TIM3_Init+0xa4>)
 800551c:	2200      	movs	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <MX_TIM3_Init+0xa4>)
 8005522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005526:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <MX_TIM3_Init+0xa4>)
 800552a:	2200      	movs	r2, #0
 800552c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800552e:	4b19      	ldr	r3, [pc, #100]	; (8005594 <MX_TIM3_Init+0xa4>)
 8005530:	2200      	movs	r2, #0
 8005532:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005534:	2303      	movs	r3, #3
 8005536:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005548:	2300      	movs	r3, #0
 800554a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800554c:	2301      	movs	r3, #1
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005550:	2300      	movs	r3, #0
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005558:	f107 030c 	add.w	r3, r7, #12
 800555c:	4619      	mov	r1, r3
 800555e:	480d      	ldr	r0, [pc, #52]	; (8005594 <MX_TIM3_Init+0xa4>)
 8005560:	f003 fab8 	bl	8008ad4 <HAL_TIM_Encoder_Init>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800556a:	f000 fb1f 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800556e:	2300      	movs	r3, #0
 8005570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005576:	463b      	mov	r3, r7
 8005578:	4619      	mov	r1, r3
 800557a:	4806      	ldr	r0, [pc, #24]	; (8005594 <MX_TIM3_Init+0xa4>)
 800557c:	f004 fa4a 	bl	8009a14 <HAL_TIMEx_MasterConfigSynchronization>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005586:	f000 fb11 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800558a:	bf00      	nop
 800558c:	3730      	adds	r7, #48	; 0x30
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	2003d2f4 	.word	0x2003d2f4
 8005598:	40000400 	.word	0x40000400

0800559c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80055a2:	f107 030c 	add.w	r3, r7, #12
 80055a6:	2224      	movs	r2, #36	; 0x24
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f005 faaf 	bl	800ab0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055b0:	463b      	mov	r3, r7
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <MX_TIM4_Init+0xa4>)
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <MX_TIM4_Init+0xa8>)
 80055be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80055c0:	4b1f      	ldr	r3, [pc, #124]	; (8005640 <MX_TIM4_Init+0xa4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c6:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <MX_TIM4_Init+0xa4>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80055cc:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <MX_TIM4_Init+0xa4>)
 80055ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <MX_TIM4_Init+0xa4>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055da:	4b19      	ldr	r3, [pc, #100]	; (8005640 <MX_TIM4_Init+0xa4>)
 80055dc:	2200      	movs	r2, #0
 80055de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80055e0:	2303      	movs	r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80055f4:	2300      	movs	r3, #0
 80055f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80055f8:	2301      	movs	r3, #1
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4619      	mov	r1, r3
 800560a:	480d      	ldr	r0, [pc, #52]	; (8005640 <MX_TIM4_Init+0xa4>)
 800560c:	f003 fa62 	bl	8008ad4 <HAL_TIM_Encoder_Init>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005616:	f000 fac9 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005622:	463b      	mov	r3, r7
 8005624:	4619      	mov	r1, r3
 8005626:	4806      	ldr	r0, [pc, #24]	; (8005640 <MX_TIM4_Init+0xa4>)
 8005628:	f004 f9f4 	bl	8009a14 <HAL_TIMEx_MasterConfigSynchronization>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005632:	f000 fabb 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005636:	bf00      	nop
 8005638:	3730      	adds	r7, #48	; 0x30
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	2003cda0 	.word	0x2003cda0
 8005644:	40000800 	.word	0x40000800

08005648 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800564e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	609a      	str	r2, [r3, #8]
 800565a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005668:	463b      	mov	r3, r7
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	615a      	str	r2, [r3, #20]
 8005678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800567a:	4b32      	ldr	r3, [pc, #200]	; (8005744 <MX_TIM5_Init+0xfc>)
 800567c:	4a32      	ldr	r2, [pc, #200]	; (8005748 <MX_TIM5_Init+0x100>)
 800567e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8005680:	4b30      	ldr	r3, [pc, #192]	; (8005744 <MX_TIM5_Init+0xfc>)
 8005682:	2200      	movs	r2, #0
 8005684:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <MX_TIM5_Init+0xfc>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000-1;
 800568c:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <MX_TIM5_Init+0xfc>)
 800568e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005692:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <MX_TIM5_Init+0xfc>)
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800569a:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <MX_TIM5_Init+0xfc>)
 800569c:	2200      	movs	r2, #0
 800569e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80056a0:	4828      	ldr	r0, [pc, #160]	; (8005744 <MX_TIM5_Init+0xfc>)
 80056a2:	f003 f947 	bl	8008934 <HAL_TIM_Base_Init>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80056ac:	f000 fa7e 	bl	8005bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80056b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ba:	4619      	mov	r1, r3
 80056bc:	4821      	ldr	r0, [pc, #132]	; (8005744 <MX_TIM5_Init+0xfc>)
 80056be:	f003 fd09 	bl	80090d4 <HAL_TIM_ConfigClockSource>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80056c8:	f000 fa70 	bl	8005bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80056cc:	481d      	ldr	r0, [pc, #116]	; (8005744 <MX_TIM5_Init+0xfc>)
 80056ce:	f003 f987 	bl	80089e0 <HAL_TIM_PWM_Init>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80056d8:	f000 fa68 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80056e4:	f107 031c 	add.w	r3, r7, #28
 80056e8:	4619      	mov	r1, r3
 80056ea:	4816      	ldr	r0, [pc, #88]	; (8005744 <MX_TIM5_Init+0xfc>)
 80056ec:	f004 f992 	bl	8009a14 <HAL_TIMEx_MasterConfigSynchronization>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80056f6:	f000 fa59 	bl	8005bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056fa:	2360      	movs	r3, #96	; 0x60
 80056fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800570a:	463b      	mov	r3, r7
 800570c:	2200      	movs	r2, #0
 800570e:	4619      	mov	r1, r3
 8005710:	480c      	ldr	r0, [pc, #48]	; (8005744 <MX_TIM5_Init+0xfc>)
 8005712:	f003 fbc7 	bl	8008ea4 <HAL_TIM_PWM_ConfigChannel>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800571c:	f000 fa46 	bl	8005bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005720:	463b      	mov	r3, r7
 8005722:	220c      	movs	r2, #12
 8005724:	4619      	mov	r1, r3
 8005726:	4807      	ldr	r0, [pc, #28]	; (8005744 <MX_TIM5_Init+0xfc>)
 8005728:	f003 fbbc 	bl	8008ea4 <HAL_TIM_PWM_ConfigChannel>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8005732:	f000 fa3b 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005736:	4803      	ldr	r0, [pc, #12]	; (8005744 <MX_TIM5_Init+0xfc>)
 8005738:	f000 fbee 	bl	8005f18 <HAL_TIM_MspPostInit>

}
 800573c:	bf00      	nop
 800573e:	3738      	adds	r7, #56	; 0x38
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	2003d2b4 	.word	0x2003d2b4
 8005748:	40000c00 	.word	0x40000c00

0800574c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f005 f9d7 	bl	800ab0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005760:	463b      	mov	r3, r7
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <MX_TIM8_Init+0xac>)
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <MX_TIM8_Init+0xb0>)
 800576e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005770:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <MX_TIM8_Init+0xac>)
 8005772:	2200      	movs	r2, #0
 8005774:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005776:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <MX_TIM8_Init+0xac>)
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800577c:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <MX_TIM8_Init+0xac>)
 800577e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005782:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005784:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <MX_TIM8_Init+0xac>)
 8005786:	2200      	movs	r2, #0
 8005788:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800578a:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <MX_TIM8_Init+0xac>)
 800578c:	2200      	movs	r2, #0
 800578e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <MX_TIM8_Init+0xac>)
 8005792:	2200      	movs	r2, #0
 8005794:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005796:	2303      	movs	r3, #3
 8005798:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800579e:	2301      	movs	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057aa:	2300      	movs	r3, #0
 80057ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057ae:	2301      	movs	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057b2:	2300      	movs	r3, #0
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4619      	mov	r1, r3
 80057c0:	480d      	ldr	r0, [pc, #52]	; (80057f8 <MX_TIM8_Init+0xac>)
 80057c2:	f003 f987 	bl	8008ad4 <HAL_TIM_Encoder_Init>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80057cc:	f000 f9ee 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d0:	2300      	movs	r3, #0
 80057d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80057d4:	2300      	movs	r3, #0
 80057d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80057dc:	463b      	mov	r3, r7
 80057de:	4619      	mov	r1, r3
 80057e0:	4805      	ldr	r0, [pc, #20]	; (80057f8 <MX_TIM8_Init+0xac>)
 80057e2:	f004 f917 	bl	8009a14 <HAL_TIMEx_MasterConfigSynchronization>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80057ec:	f000 f9de 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80057f0:	bf00      	nop
 80057f2:	3730      	adds	r7, #48	; 0x30
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	2003cd60 	.word	0x2003cd60
 80057fc:	40010400 	.word	0x40010400

08005800 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005806:	f107 0320 	add.w	r3, r7, #32
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	609a      	str	r2, [r3, #8]
 8005812:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	611a      	str	r2, [r3, #16]
 8005822:	615a      	str	r2, [r3, #20]
 8005824:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <MX_TIM9_Init+0xd4>)
 8005828:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <MX_TIM9_Init+0xd8>)
 800582a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 800582c:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <MX_TIM9_Init+0xd4>)
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005832:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <MX_TIM9_Init+0xd4>)
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4000-1;
 8005838:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <MX_TIM9_Init+0xd4>)
 800583a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800583e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005840:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <MX_TIM9_Init+0xd4>)
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005846:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <MX_TIM9_Init+0xd4>)
 8005848:	2200      	movs	r2, #0
 800584a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800584c:	4821      	ldr	r0, [pc, #132]	; (80058d4 <MX_TIM9_Init+0xd4>)
 800584e:	f003 f871 	bl	8008934 <HAL_TIM_Base_Init>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8005858:	f000 f9a8 	bl	8005bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800585c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005860:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005862:	f107 0320 	add.w	r3, r7, #32
 8005866:	4619      	mov	r1, r3
 8005868:	481a      	ldr	r0, [pc, #104]	; (80058d4 <MX_TIM9_Init+0xd4>)
 800586a:	f003 fc33 	bl	80090d4 <HAL_TIM_ConfigClockSource>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005874:	f000 f99a 	bl	8005bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005878:	4816      	ldr	r0, [pc, #88]	; (80058d4 <MX_TIM9_Init+0xd4>)
 800587a:	f003 f8b1 	bl	80089e0 <HAL_TIM_PWM_Init>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005884:	f000 f992 	bl	8005bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005888:	2360      	movs	r3, #96	; 0x60
 800588a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	2200      	movs	r2, #0
 800589c:	4619      	mov	r1, r3
 800589e:	480d      	ldr	r0, [pc, #52]	; (80058d4 <MX_TIM9_Init+0xd4>)
 80058a0:	f003 fb00 	bl	8008ea4 <HAL_TIM_PWM_ConfigChannel>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80058aa:	f000 f97f 	bl	8005bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	2204      	movs	r2, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4807      	ldr	r0, [pc, #28]	; (80058d4 <MX_TIM9_Init+0xd4>)
 80058b6:	f003 faf5 	bl	8008ea4 <HAL_TIM_PWM_ConfigChannel>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80058c0:	f000 f974 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80058c4:	4803      	ldr	r0, [pc, #12]	; (80058d4 <MX_TIM9_Init+0xd4>)
 80058c6:	f000 fb27 	bl	8005f18 <HAL_TIM_MspPostInit>

}
 80058ca:	bf00      	nop
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	2003d398 	.word	0x2003d398
 80058d8:	40014000 	.word	0x40014000

080058dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <MX_USART3_UART_Init+0x58>)
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <MX_USART3_UART_Init+0x5c>)
 80058e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <MX_USART3_UART_Init+0x58>)
 80058e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <MX_USART3_UART_Init+0x58>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <MX_USART3_UART_Init+0x58>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <MX_USART3_UART_Init+0x58>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <MX_USART3_UART_Init+0x58>)
 8005902:	2208      	movs	r2, #8
 8005904:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <MX_USART3_UART_Init+0x58>)
 8005908:	2200      	movs	r2, #0
 800590a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <MX_USART3_UART_Init+0x58>)
 800590e:	2200      	movs	r2, #0
 8005910:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <MX_USART3_UART_Init+0x58>)
 8005914:	2200      	movs	r2, #0
 8005916:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <MX_USART3_UART_Init+0x58>)
 800591a:	2200      	movs	r2, #0
 800591c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800591e:	4805      	ldr	r0, [pc, #20]	; (8005934 <MX_USART3_UART_Init+0x58>)
 8005920:	f004 f924 	bl	8009b6c <HAL_UART_Init>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800592a:	f000 f93f 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800592e:	bf00      	nop
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2003cde0 	.word	0x2003cde0
 8005938:	40004800 	.word	0x40004800

0800593c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005942:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005946:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800594a:	2206      	movs	r2, #6
 800594c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005950:	2202      	movs	r2, #2
 8005952:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800595c:	2202      	movs	r2, #2
 800595e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005962:	2201      	movs	r2, #1
 8005964:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005968:	2200      	movs	r2, #0
 800596a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800596e:	2200      	movs	r2, #0
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005974:	2201      	movs	r2, #1
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800597e:	4805      	ldr	r0, [pc, #20]	; (8005994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005980:	f001 fd63 	bl	800744a <HAL_PCD_Init>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800598a:	f000 f90f 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2003ceac 	.word	0x2003ceac

08005998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	; 0x30
 800599c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800599e:	f107 031c 	add.w	r3, r7, #28
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	609a      	str	r2, [r3, #8]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059ae:	4b78      	ldr	r3, [pc, #480]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	4a77      	ldr	r2, [pc, #476]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059b4:	f043 0310 	orr.w	r3, r3, #16
 80059b8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ba:	4b75      	ldr	r3, [pc, #468]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059c6:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	4a71      	ldr	r2, [pc, #452]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059cc:	f043 0304 	orr.w	r3, r3, #4
 80059d0:	6313      	str	r3, [r2, #48]	; 0x30
 80059d2:	4b6f      	ldr	r3, [pc, #444]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059de:	4b6c      	ldr	r3, [pc, #432]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	4a6b      	ldr	r2, [pc, #428]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ea:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	4a65      	ldr	r2, [pc, #404]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6313      	str	r3, [r2, #48]	; 0x30
 8005a02:	4b63      	ldr	r3, [pc, #396]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a0e:	4b60      	ldr	r3, [pc, #384]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4a5f      	ldr	r2, [pc, #380]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1a:	4b5d      	ldr	r3, [pc, #372]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a26:	4b5a      	ldr	r3, [pc, #360]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	4a59      	ldr	r2, [pc, #356]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a2c:	f043 0308 	orr.w	r3, r3, #8
 8005a30:	6313      	str	r3, [r2, #48]	; 0x30
 8005a32:	4b57      	ldr	r3, [pc, #348]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a3e:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	4a53      	ldr	r2, [pc, #332]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a48:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4a:	4b51      	ldr	r3, [pc, #324]	; (8005b90 <MX_GPIO_Init+0x1f8>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	f244 0181 	movw	r1, #16513	; 0x4081
 8005a5c:	484d      	ldr	r0, [pc, #308]	; (8005b94 <MX_GPIO_Init+0x1fc>)
 8005a5e:	f000 ffb7 	bl	80069d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2140      	movs	r1, #64	; 0x40
 8005a66:	484c      	ldr	r0, [pc, #304]	; (8005b98 <MX_GPIO_Init+0x200>)
 8005a68:	f000 ffb2 	bl	80069d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a72:	4b4a      	ldr	r3, [pc, #296]	; (8005b9c <MX_GPIO_Init+0x204>)
 8005a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005a7a:	f107 031c 	add.w	r3, r7, #28
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4847      	ldr	r0, [pc, #284]	; (8005ba0 <MX_GPIO_Init+0x208>)
 8005a82:	f000 fdfb 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005a86:	2332      	movs	r3, #50	; 0x32
 8005a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a92:	2303      	movs	r3, #3
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a96:	230b      	movs	r3, #11
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a9a:	f107 031c 	add.w	r3, r7, #28
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	483f      	ldr	r0, [pc, #252]	; (8005ba0 <MX_GPIO_Init+0x208>)
 8005aa2:	f000 fdeb 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005aa6:	2386      	movs	r3, #134	; 0x86
 8005aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ab6:	230b      	movs	r3, #11
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4838      	ldr	r0, [pc, #224]	; (8005ba4 <MX_GPIO_Init+0x20c>)
 8005ac2:	f000 fddb 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005ac6:	f244 0381 	movw	r3, #16513	; 0x4081
 8005aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005acc:	2301      	movs	r3, #1
 8005ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad8:	f107 031c 	add.w	r3, r7, #28
 8005adc:	4619      	mov	r1, r3
 8005ade:	482d      	ldr	r0, [pc, #180]	; (8005b94 <MX_GPIO_Init+0x1fc>)
 8005ae0:	f000 fdcc 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aea:	2302      	movs	r3, #2
 8005aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005af2:	2303      	movs	r3, #3
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005af6:	230b      	movs	r3, #11
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005afa:	f107 031c 	add.w	r3, r7, #28
 8005afe:	4619      	mov	r1, r3
 8005b00:	4824      	ldr	r0, [pc, #144]	; (8005b94 <MX_GPIO_Init+0x1fc>)
 8005b02:	f000 fdbb 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b06:	2340      	movs	r3, #64	; 0x40
 8005b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b12:	2300      	movs	r3, #0
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b16:	f107 031c 	add.w	r3, r7, #28
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	481e      	ldr	r0, [pc, #120]	; (8005b98 <MX_GPIO_Init+0x200>)
 8005b1e:	f000 fdad 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b26:	2300      	movs	r3, #0
 8005b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005b2e:	f107 031c 	add.w	r3, r7, #28
 8005b32:	4619      	mov	r1, r3
 8005b34:	4818      	ldr	r0, [pc, #96]	; (8005b98 <MX_GPIO_Init+0x200>)
 8005b36:	f000 fda1 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <MX_GPIO_Init+0x210>)
 8005b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b48:	f107 031c 	add.w	r3, r7, #28
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4814      	ldr	r0, [pc, #80]	; (8005ba0 <MX_GPIO_Init+0x208>)
 8005b50:	f000 fd94 	bl	800667c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005b54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b62:	2303      	movs	r3, #3
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b66:	230b      	movs	r3, #11
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b6a:	f107 031c 	add.w	r3, r7, #28
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4809      	ldr	r0, [pc, #36]	; (8005b98 <MX_GPIO_Init+0x200>)
 8005b72:	f000 fd83 	bl	800667c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005b76:	2200      	movs	r2, #0
 8005b78:	2100      	movs	r1, #0
 8005b7a:	2017      	movs	r0, #23
 8005b7c:	f000 fd47 	bl	800660e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005b80:	2017      	movs	r0, #23
 8005b82:	f000 fd60 	bl	8006646 <HAL_NVIC_EnableIRQ>

}
 8005b86:	bf00      	nop
 8005b88:	3730      	adds	r7, #48	; 0x30
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40020400 	.word	0x40020400
 8005b98:	40021800 	.word	0x40021800
 8005b9c:	10110000 	.word	0x10110000
 8005ba0:	40020800 	.word	0x40020800
 8005ba4:	40020000 	.word	0x40020000
 8005ba8:	10310000 	.word	0x10310000

08005bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <HAL_MspInit+0x44>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <HAL_MspInit+0x44>)
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <HAL_MspInit+0x44>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_MspInit+0x44>)
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_MspInit+0x44>)
 8005be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be4:	6453      	str	r3, [r2, #68]	; 0x44
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_MspInit+0x44>)
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40023800 	.word	0x40023800

08005c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <HAL_I2C_MspInit+0x7c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d128      	bne.n	8005c78 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <HAL_I2C_MspInit+0x80>)
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <HAL_I2C_MspInit+0x80>)
 8005c2c:	f043 0302 	orr.w	r3, r3, #2
 8005c30:	6313      	str	r3, [r2, #48]	; 0x30
 8005c32:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <HAL_I2C_MspInit+0x80>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005c3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c44:	2312      	movs	r3, #18
 8005c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c50:	2304      	movs	r3, #4
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c54:	f107 0314 	add.w	r3, r7, #20
 8005c58:	4619      	mov	r1, r3
 8005c5a:	480b      	ldr	r0, [pc, #44]	; (8005c88 <HAL_I2C_MspInit+0x84>)
 8005c5c:	f000 fd0e 	bl	800667c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c60:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <HAL_I2C_MspInit+0x80>)
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	4a07      	ldr	r2, [pc, #28]	; (8005c84 <HAL_I2C_MspInit+0x80>)
 8005c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_I2C_MspInit+0x80>)
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005c78:	bf00      	nop
 8005c7a:	3728      	adds	r7, #40	; 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40005400 	.word	0x40005400
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40020400 	.word	0x40020400

08005c8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b090      	sub	sp, #64	; 0x40
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6b      	ldr	r2, [pc, #428]	; (8005e58 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d129      	bne.n	8005d02 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005cae:	4b6b      	ldr	r3, [pc, #428]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	4a6a      	ldr	r2, [pc, #424]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cba:	4b68      	ldr	r3, [pc, #416]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	4a64      	ldr	r2, [pc, #400]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005ccc:	f043 0310 	orr.w	r3, r3, #16
 8005cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005cd2:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005cde:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4859      	ldr	r0, [pc, #356]	; (8005e60 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005cfc:	f000 fcbe 	bl	800667c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005d00:	e0a5      	b.n	8005e4e <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a57      	ldr	r2, [pc, #348]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d144      	bne.n	8005d96 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4a52      	ldr	r2, [pc, #328]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d12:	f043 0302 	orr.w	r3, r3, #2
 8005d16:	6413      	str	r3, [r2, #64]	; 0x40
 8005d18:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d24:	4b4d      	ldr	r3, [pc, #308]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d30:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d3c:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4a46      	ldr	r2, [pc, #280]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d42:	f043 0302 	orr.w	r3, r3, #2
 8005d46:	6313      	str	r3, [r2, #48]	; 0x30
 8005d48:	4b44      	ldr	r3, [pc, #272]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d60:	2300      	movs	r3, #0
 8005d62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d64:	2302      	movs	r3, #2
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	483e      	ldr	r0, [pc, #248]	; (8005e68 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8005d70:	f000 fc84 	bl	800667c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005d74:	2320      	movs	r3, #32
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d80:	2300      	movs	r3, #0
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d84:	2302      	movs	r3, #2
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4837      	ldr	r0, [pc, #220]	; (8005e6c <HAL_TIM_Encoder_MspInit+0x1e0>)
 8005d90:	f000 fc74 	bl	800667c <HAL_GPIO_Init>
}
 8005d94:	e05b      	b.n	8005e4e <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a35      	ldr	r2, [pc, #212]	; (8005e70 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d129      	bne.n	8005df4 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005da0:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	4a2d      	ldr	r2, [pc, #180]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005da6:	f043 0304 	orr.w	r3, r3, #4
 8005daa:	6413      	str	r3, [r2, #64]	; 0x40
 8005dac:	4b2b      	ldr	r3, [pc, #172]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005dbe:	f043 0308 	orr.w	r3, r3, #8
 8005dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc4:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005dd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dde:	2300      	movs	r3, #0
 8005de0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005de2:	2302      	movs	r3, #2
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dea:	4619      	mov	r1, r3
 8005dec:	4821      	ldr	r0, [pc, #132]	; (8005e74 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005dee:	f000 fc45 	bl	800667c <HAL_GPIO_Init>
}
 8005df2:	e02c      	b.n	8005e4e <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d127      	bne.n	8005e4e <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005dfe:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005e04:	f043 0302 	orr.w	r3, r3, #2
 8005e08:	6453      	str	r3, [r2, #68]	; 0x44
 8005e0a:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005e1c:	f043 0304 	orr.w	r3, r3, #4
 8005e20:	6313      	str	r3, [r2, #48]	; 0x30
 8005e22:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e2e:	23c0      	movs	r3, #192	; 0xc0
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e32:	2302      	movs	r3, #2
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e46:	4619      	mov	r1, r3
 8005e48:	480c      	ldr	r0, [pc, #48]	; (8005e7c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005e4a:	f000 fc17 	bl	800667c <HAL_GPIO_Init>
}
 8005e4e:	bf00      	nop
 8005e50:	3740      	adds	r7, #64	; 0x40
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40020000 	.word	0x40020000
 8005e6c:	40020400 	.word	0x40020400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40020c00 	.word	0x40020c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40020800 	.word	0x40020800

08005e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d114      	bne.n	8005ebc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e92:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2100      	movs	r1, #0
 8005eae:	201c      	movs	r0, #28
 8005eb0:	f000 fbad 	bl	800660e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005eb4:	201c      	movs	r0, #28
 8005eb6:	f000 fbc6 	bl	8006646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8005eba:	e022      	b.n	8005f02 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <HAL_TIM_Base_MspInit+0x90>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	4a10      	ldr	r2, [pc, #64]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005ecc:	f043 0308 	orr.w	r3, r3, #8
 8005ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]
}
 8005ede:	e010      	b.n	8005f02 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a0b      	ldr	r2, [pc, #44]	; (8005f14 <HAL_TIM_Base_MspInit+0x94>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d10b      	bne.n	8005f02 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_TIM_Base_MspInit+0x8c>)
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
}
 8005f02:	bf00      	nop
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40014000 	.word	0x40014000

08005f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f20:	f107 0314 	add.w	r3, r7, #20
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <HAL_TIM_MspPostInit+0xa8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d11c      	bne.n	8005f74 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3a:	4b22      	ldr	r3, [pc, #136]	; (8005fc4 <HAL_TIM_MspPostInit+0xac>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <HAL_TIM_MspPostInit+0xac>)
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	6313      	str	r3, [r2, #48]	; 0x30
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <HAL_TIM_MspPostInit+0xac>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8005f52:	2309      	movs	r3, #9
 8005f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f56:	2302      	movs	r3, #2
 8005f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005f62:	2302      	movs	r3, #2
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4816      	ldr	r0, [pc, #88]	; (8005fc8 <HAL_TIM_MspPostInit+0xb0>)
 8005f6e:	f000 fb85 	bl	800667c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8005f72:	e020      	b.n	8005fb6 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <HAL_TIM_MspPostInit+0xb4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d11b      	bne.n	8005fb6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_TIM_MspPostInit+0xac>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	4a10      	ldr	r2, [pc, #64]	; (8005fc4 <HAL_TIM_MspPostInit+0xac>)
 8005f84:	f043 0310 	orr.w	r3, r3, #16
 8005f88:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <HAL_TIM_MspPostInit+0xac>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005f96:	2360      	movs	r3, #96	; 0x60
 8005f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4807      	ldr	r0, [pc, #28]	; (8005fd0 <HAL_TIM_MspPostInit+0xb8>)
 8005fb2:	f000 fb63 	bl	800667c <HAL_GPIO_Init>
}
 8005fb6:	bf00      	nop
 8005fb8:	3728      	adds	r7, #40	; 0x28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40000c00 	.word	0x40000c00
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40020000 	.word	0x40020000
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40021000 	.word	0x40021000

08005fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fdc:	f107 0314 	add.w	r3, r7, #20
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	609a      	str	r2, [r3, #8]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_UART_MspInit+0x7c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d128      	bne.n	8006048 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <HAL_UART_MspInit+0x80>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	4a16      	ldr	r2, [pc, #88]	; (8006054 <HAL_UART_MspInit+0x80>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006000:	6413      	str	r3, [r2, #64]	; 0x40
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <HAL_UART_MspInit+0x80>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <HAL_UART_MspInit+0x80>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	4a10      	ldr	r2, [pc, #64]	; (8006054 <HAL_UART_MspInit+0x80>)
 8006014:	f043 0308 	orr.w	r3, r3, #8
 8006018:	6313      	str	r3, [r2, #48]	; 0x30
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <HAL_UART_MspInit+0x80>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800602a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602c:	2302      	movs	r3, #2
 800602e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006034:	2303      	movs	r3, #3
 8006036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006038:	2307      	movs	r3, #7
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	4619      	mov	r1, r3
 8006042:	4805      	ldr	r0, [pc, #20]	; (8006058 <HAL_UART_MspInit+0x84>)
 8006044:	f000 fb1a 	bl	800667c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006048:	bf00      	nop
 800604a:	3728      	adds	r7, #40	; 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40004800 	.word	0x40004800
 8006054:	40023800 	.word	0x40023800
 8006058:	40020c00 	.word	0x40020c00

0800605c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800607c:	d141      	bne.n	8006102 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607e:	4b23      	ldr	r3, [pc, #140]	; (800610c <HAL_PCD_MspInit+0xb0>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_PCD_MspInit+0xb0>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	6313      	str	r3, [r2, #48]	; 0x30
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <HAL_PCD_MspInit+0xb0>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006096:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800609a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800609c:	2302      	movs	r3, #2
 800609e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a4:	2303      	movs	r3, #3
 80060a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060a8:	230a      	movs	r3, #10
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	4619      	mov	r1, r3
 80060b2:	4817      	ldr	r0, [pc, #92]	; (8006110 <HAL_PCD_MspInit+0xb4>)
 80060b4:	f000 fae2 	bl	800667c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80060b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060be:	2300      	movs	r3, #0
 80060c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	4619      	mov	r1, r3
 80060cc:	4810      	ldr	r0, [pc, #64]	; (8006110 <HAL_PCD_MspInit+0xb4>)
 80060ce:	f000 fad5 	bl	800667c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_PCD_MspInit+0xb0>)
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	4a0d      	ldr	r2, [pc, #52]	; (800610c <HAL_PCD_MspInit+0xb0>)
 80060d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060dc:	6353      	str	r3, [r2, #52]	; 0x34
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <HAL_PCD_MspInit+0xb0>)
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <HAL_PCD_MspInit+0xb0>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	4a07      	ldr	r2, [pc, #28]	; (800610c <HAL_PCD_MspInit+0xb0>)
 80060f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f4:	6453      	str	r3, [r2, #68]	; 0x44
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_PCD_MspInit+0xb0>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	60bb      	str	r3, [r7, #8]
 8006100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006102:	bf00      	nop
 8006104:	3728      	adds	r7, #40	; 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
 8006110:	40020000 	.word	0x40020000

08006114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006122:	b480      	push	{r7}
 8006124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006126:	e7fe      	b.n	8006126 <HardFault_Handler+0x4>

08006128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800612c:	e7fe      	b.n	800612c <MemManage_Handler+0x4>

0800612e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800612e:	b480      	push	{r7}
 8006130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006132:	e7fe      	b.n	8006132 <BusFault_Handler+0x4>

08006134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006138:	e7fe      	b.n	8006138 <UsageFault_Handler+0x4>

0800613a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800613a:	b480      	push	{r7}
 800613c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800613e:	bf00      	nop
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800614c:	bf00      	nop
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006156:	b480      	push	{r7}
 8006158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006168:	f000 f934 	bl	80063d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800616c:	bf00      	nop
 800616e:	bd80      	pop	{r7, pc}

08006170 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006174:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006178:	f000 fc44 	bl	8006a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800617c:	bf00      	nop
 800617e:	bd80      	pop	{r7, pc}

08006180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006184:	4802      	ldr	r0, [pc, #8]	; (8006190 <TIM2_IRQHandler+0x10>)
 8006186:	f002 fd6e 	bl	8008c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800618a:	bf00      	nop
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	2003d3f8 	.word	0x2003d3f8

08006194 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e00a      	b.n	80061bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80061a6:	f3af 8000 	nop.w
 80061aa:	4601      	mov	r1, r0
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	60ba      	str	r2, [r7, #8]
 80061b2:	b2ca      	uxtb	r2, r1
 80061b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	3301      	adds	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	dbf0      	blt.n	80061a6 <_read+0x12>
	}

return len;
 80061c4:	687b      	ldr	r3, [r7, #4]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e009      	b.n	80061f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	60ba      	str	r2, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fa fd5d 	bl	8000ca8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	3301      	adds	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	dbf1      	blt.n	80061e0 <_write+0x12>
	}
	return len;
 80061fc:	687b      	ldr	r3, [r7, #4]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <_close>:

int _close(int file)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
	return -1;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800622e:	605a      	str	r2, [r3, #4]
	return 0;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <_isatty>:

int _isatty(int file)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
	return 1;
 8006246:	2301      	movs	r3, #1
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
	return 0;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <_sbrk+0x5c>)
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <_sbrk+0x60>)
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006284:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <_sbrk+0x64>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <_sbrk+0x64>)
 800628e:	4a12      	ldr	r2, [pc, #72]	; (80062d8 <_sbrk+0x68>)
 8006290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <_sbrk+0x64>)
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	429a      	cmp	r2, r3
 800629e:	d207      	bcs.n	80062b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062a0:	f004 fc00 	bl	800aaa4 <__errno>
 80062a4:	4602      	mov	r2, r0
 80062a6:	230c      	movs	r3, #12
 80062a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
 80062ae:	e009      	b.n	80062c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <_sbrk+0x64>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <_sbrk+0x64>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <_sbrk+0x64>)
 80062c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062c2:	68fb      	ldr	r3, [r7, #12]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20080000 	.word	0x20080000
 80062d0:	00000400 	.word	0x00000400
 80062d4:	2003cd54 	.word	0x2003cd54
 80062d8:	2003d488 	.word	0x2003d488

080062dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062e0:	4b08      	ldr	r3, [pc, #32]	; (8006304 <SystemInit+0x28>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	4a07      	ldr	r2, [pc, #28]	; (8006304 <SystemInit+0x28>)
 80062e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80062f0:	4b04      	ldr	r3, [pc, #16]	; (8006304 <SystemInit+0x28>)
 80062f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062f6:	609a      	str	r2, [r3, #8]
#endif
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	e000ed00 	.word	0xe000ed00

08006308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800630c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800630e:	e003      	b.n	8006318 <LoopCopyDataInit>

08006310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006316:	3104      	adds	r1, #4

08006318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006318:	480b      	ldr	r0, [pc, #44]	; (8006348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800631c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800631e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006320:	d3f6      	bcc.n	8006310 <CopyDataInit>
  ldr  r2, =_sbss
 8006322:	4a0b      	ldr	r2, [pc, #44]	; (8006350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006324:	e002      	b.n	800632c <LoopFillZerobss>

08006326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006328:	f842 3b04 	str.w	r3, [r2], #4

0800632c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800632c:	4b09      	ldr	r3, [pc, #36]	; (8006354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800632e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006330:	d3f9      	bcc.n	8006326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006332:	f7ff ffd3 	bl	80062dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006336:	f004 fbbb 	bl	800aab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800633a:	f7fe fe9b 	bl	8005074 <main>
  bx  lr    
 800633e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006340:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006344:	0800e478 	.word	0x0800e478
  ldr  r0, =_sdata
 8006348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800634c:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8006350:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8006354:	2003d484 	.word	0x2003d484

08006358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006358:	e7fe      	b.n	8006358 <ADC_IRQHandler>

0800635a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800635e:	2003      	movs	r0, #3
 8006360:	f000 f94a 	bl	80065f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006364:	2000      	movs	r0, #0
 8006366:	f000 f805 	bl	8006374 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800636a:	f7ff fc27 	bl	8005bbc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_InitTick+0x54>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_InitTick+0x58>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	4619      	mov	r1, r3
 8006386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800638a:	fbb3 f3f1 	udiv	r3, r3, r1
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f965 	bl	8006662 <HAL_SYSTICK_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e00e      	b.n	80063c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	d80a      	bhi.n	80063be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063a8:	2200      	movs	r2, #0
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	f000 f92d 	bl	800660e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063b4:	4a06      	ldr	r2, [pc, #24]	; (80063d0 <HAL_InitTick+0x5c>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e000      	b.n	80063c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	2000001c 	.word	0x2000001c
 80063cc:	20000024 	.word	0x20000024
 80063d0:	20000020 	.word	0x20000020

080063d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_IncTick+0x20>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_IncTick+0x24>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4413      	add	r3, r2
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <HAL_IncTick+0x24>)
 80063e6:	6013      	str	r3, [r2, #0]
}
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000024 	.word	0x20000024
 80063f8:	2003d47c 	.word	0x2003d47c

080063fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_GetTick+0x14>)
 8006402:	681b      	ldr	r3, [r3, #0]
}
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2003d47c 	.word	0x2003d47c

08006414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800641c:	f7ff ffee 	bl	80063fc <HAL_GetTick>
 8006420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d005      	beq.n	800643a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_Delay+0x40>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800643a:	bf00      	nop
 800643c:	f7ff ffde 	bl	80063fc <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	429a      	cmp	r2, r3
 800644a:	d8f7      	bhi.n	800643c <HAL_Delay+0x28>
  {
  }
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000024 	.word	0x20000024

08006458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <__NVIC_SetPriorityGrouping+0x40>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006474:	4013      	ands	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <__NVIC_SetPriorityGrouping+0x44>)
 8006482:	4313      	orrs	r3, r2
 8006484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006486:	4a04      	ldr	r2, [pc, #16]	; (8006498 <__NVIC_SetPriorityGrouping+0x40>)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	60d3      	str	r3, [r2, #12]
}
 800648c:	bf00      	nop
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	e000ed00 	.word	0xe000ed00
 800649c:	05fa0000 	.word	0x05fa0000

080064a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <__NVIC_GetPriorityGrouping+0x18>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	0a1b      	lsrs	r3, r3, #8
 80064aa:	f003 0307 	and.w	r3, r3, #7
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000ed00 	.word	0xe000ed00

080064bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	db0b      	blt.n	80064e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	f003 021f 	and.w	r2, r3, #31
 80064d4:	4907      	ldr	r1, [pc, #28]	; (80064f4 <__NVIC_EnableIRQ+0x38>)
 80064d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2001      	movs	r0, #1
 80064de:	fa00 f202 	lsl.w	r2, r0, r2
 80064e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	e000e100 	.word	0xe000e100

080064f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db0a      	blt.n	8006522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	490c      	ldr	r1, [pc, #48]	; (8006544 <__NVIC_SetPriority+0x4c>)
 8006512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	440b      	add	r3, r1
 800651c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006520:	e00a      	b.n	8006538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	4908      	ldr	r1, [pc, #32]	; (8006548 <__NVIC_SetPriority+0x50>)
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	3b04      	subs	r3, #4
 8006530:	0112      	lsls	r2, r2, #4
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	440b      	add	r3, r1
 8006536:	761a      	strb	r2, [r3, #24]
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	e000e100 	.word	0xe000e100
 8006548:	e000ed00 	.word	0xe000ed00

0800654c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	; 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f1c3 0307 	rsb	r3, r3, #7
 8006566:	2b04      	cmp	r3, #4
 8006568:	bf28      	it	cs
 800656a:	2304      	movcs	r3, #4
 800656c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3304      	adds	r3, #4
 8006572:	2b06      	cmp	r3, #6
 8006574:	d902      	bls.n	800657c <NVIC_EncodePriority+0x30>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3b03      	subs	r3, #3
 800657a:	e000      	b.n	800657e <NVIC_EncodePriority+0x32>
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	43da      	mvns	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	401a      	ands	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006594:	f04f 31ff 	mov.w	r1, #4294967295
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	fa01 f303 	lsl.w	r3, r1, r3
 800659e:	43d9      	mvns	r1, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065a4:	4313      	orrs	r3, r2
         );
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3724      	adds	r7, #36	; 0x24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3b01      	subs	r3, #1
 80065c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065c4:	d301      	bcc.n	80065ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065c6:	2301      	movs	r3, #1
 80065c8:	e00f      	b.n	80065ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065ca:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <SysTick_Config+0x40>)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065d2:	210f      	movs	r1, #15
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	f7ff ff8e 	bl	80064f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <SysTick_Config+0x40>)
 80065de:	2200      	movs	r2, #0
 80065e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065e2:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <SysTick_Config+0x40>)
 80065e4:	2207      	movs	r2, #7
 80065e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	e000e010 	.word	0xe000e010

080065f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ff29 	bl	8006458 <__NVIC_SetPriorityGrouping>
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af00      	add	r7, sp, #0
 8006614:	4603      	mov	r3, r0
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006620:	f7ff ff3e 	bl	80064a0 <__NVIC_GetPriorityGrouping>
 8006624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	6978      	ldr	r0, [r7, #20]
 800662c:	f7ff ff8e 	bl	800654c <NVIC_EncodePriority>
 8006630:	4602      	mov	r2, r0
 8006632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff ff5d 	bl	80064f8 <__NVIC_SetPriority>
}
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	4603      	mov	r3, r0
 800664e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff ff31 	bl	80064bc <__NVIC_EnableIRQ>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff ffa2 	bl	80065b4 <SysTick_Config>
 8006670:	4603      	mov	r3, r0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800667c:	b480      	push	{r7}
 800667e:	b089      	sub	sp, #36	; 0x24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006692:	2300      	movs	r3, #0
 8006694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e175      	b.n	8006988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800669c:	2201      	movs	r2, #1
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4013      	ands	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	f040 8164 	bne.w	8006982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d00b      	beq.n	80066da <HAL_GPIO_Init+0x5e>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d007      	beq.n	80066da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066ce:	2b11      	cmp	r3, #17
 80066d0:	d003      	beq.n	80066da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b12      	cmp	r3, #18
 80066d8:	d130      	bne.n	800673c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	2203      	movs	r2, #3
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006710:	2201      	movs	r2, #1
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 0201 	and.w	r2, r3, #1
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4313      	orrs	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	2203      	movs	r2, #3
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	43db      	mvns	r3, r3
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	4013      	ands	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4313      	orrs	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x100>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b12      	cmp	r3, #18
 800677a:	d123      	bne.n	80067c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	08da      	lsrs	r2, r3, #3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3208      	adds	r2, #8
 8006784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	220f      	movs	r2, #15
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	43db      	mvns	r3, r3
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	08da      	lsrs	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3208      	adds	r2, #8
 80067be:	69b9      	ldr	r1, [r7, #24]
 80067c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	2203      	movs	r2, #3
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	43db      	mvns	r3, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4013      	ands	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 0203 	and.w	r2, r3, #3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80be 	beq.w	8006982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006806:	4b65      	ldr	r3, [pc, #404]	; (800699c <HAL_GPIO_Init+0x320>)
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	4a64      	ldr	r2, [pc, #400]	; (800699c <HAL_GPIO_Init+0x320>)
 800680c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006810:	6453      	str	r3, [r2, #68]	; 0x44
 8006812:	4b62      	ldr	r3, [pc, #392]	; (800699c <HAL_GPIO_Init+0x320>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800681e:	4a60      	ldr	r2, [pc, #384]	; (80069a0 <HAL_GPIO_Init+0x324>)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	3302      	adds	r3, #2
 8006826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	220f      	movs	r2, #15
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a57      	ldr	r2, [pc, #348]	; (80069a4 <HAL_GPIO_Init+0x328>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d037      	beq.n	80068ba <HAL_GPIO_Init+0x23e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a56      	ldr	r2, [pc, #344]	; (80069a8 <HAL_GPIO_Init+0x32c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d031      	beq.n	80068b6 <HAL_GPIO_Init+0x23a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a55      	ldr	r2, [pc, #340]	; (80069ac <HAL_GPIO_Init+0x330>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d02b      	beq.n	80068b2 <HAL_GPIO_Init+0x236>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a54      	ldr	r2, [pc, #336]	; (80069b0 <HAL_GPIO_Init+0x334>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d025      	beq.n	80068ae <HAL_GPIO_Init+0x232>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a53      	ldr	r2, [pc, #332]	; (80069b4 <HAL_GPIO_Init+0x338>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01f      	beq.n	80068aa <HAL_GPIO_Init+0x22e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a52      	ldr	r2, [pc, #328]	; (80069b8 <HAL_GPIO_Init+0x33c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d019      	beq.n	80068a6 <HAL_GPIO_Init+0x22a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a51      	ldr	r2, [pc, #324]	; (80069bc <HAL_GPIO_Init+0x340>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_GPIO_Init+0x226>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a50      	ldr	r2, [pc, #320]	; (80069c0 <HAL_GPIO_Init+0x344>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00d      	beq.n	800689e <HAL_GPIO_Init+0x222>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <HAL_GPIO_Init+0x348>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d007      	beq.n	800689a <HAL_GPIO_Init+0x21e>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a4e      	ldr	r2, [pc, #312]	; (80069c8 <HAL_GPIO_Init+0x34c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d101      	bne.n	8006896 <HAL_GPIO_Init+0x21a>
 8006892:	2309      	movs	r3, #9
 8006894:	e012      	b.n	80068bc <HAL_GPIO_Init+0x240>
 8006896:	230a      	movs	r3, #10
 8006898:	e010      	b.n	80068bc <HAL_GPIO_Init+0x240>
 800689a:	2308      	movs	r3, #8
 800689c:	e00e      	b.n	80068bc <HAL_GPIO_Init+0x240>
 800689e:	2307      	movs	r3, #7
 80068a0:	e00c      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068a2:	2306      	movs	r3, #6
 80068a4:	e00a      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068a6:	2305      	movs	r3, #5
 80068a8:	e008      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068aa:	2304      	movs	r3, #4
 80068ac:	e006      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068ae:	2303      	movs	r3, #3
 80068b0:	e004      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e002      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <HAL_GPIO_Init+0x240>
 80068ba:	2300      	movs	r3, #0
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	f002 0203 	and.w	r2, r2, #3
 80068c2:	0092      	lsls	r2, r2, #2
 80068c4:	4093      	lsls	r3, r2
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80068cc:	4934      	ldr	r1, [pc, #208]	; (80069a0 <HAL_GPIO_Init+0x324>)
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	089b      	lsrs	r3, r3, #2
 80068d2:	3302      	adds	r3, #2
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068da:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <HAL_GPIO_Init+0x350>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	43db      	mvns	r3, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	4013      	ands	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068fe:	4a33      	ldr	r2, [pc, #204]	; (80069cc <HAL_GPIO_Init+0x350>)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006904:	4b31      	ldr	r3, [pc, #196]	; (80069cc <HAL_GPIO_Init+0x350>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	43db      	mvns	r3, r3
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4013      	ands	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006928:	4a28      	ldr	r2, [pc, #160]	; (80069cc <HAL_GPIO_Init+0x350>)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800692e:	4b27      	ldr	r3, [pc, #156]	; (80069cc <HAL_GPIO_Init+0x350>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	43db      	mvns	r3, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4013      	ands	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006952:	4a1e      	ldr	r2, [pc, #120]	; (80069cc <HAL_GPIO_Init+0x350>)
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006958:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <HAL_GPIO_Init+0x350>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	43db      	mvns	r3, r3
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4013      	ands	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800697c:	4a13      	ldr	r2, [pc, #76]	; (80069cc <HAL_GPIO_Init+0x350>)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b0f      	cmp	r3, #15
 800698c:	f67f ae86 	bls.w	800669c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006990:	bf00      	nop
 8006992:	3724      	adds	r7, #36	; 0x24
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40023800 	.word	0x40023800
 80069a0:	40013800 	.word	0x40013800
 80069a4:	40020000 	.word	0x40020000
 80069a8:	40020400 	.word	0x40020400
 80069ac:	40020800 	.word	0x40020800
 80069b0:	40020c00 	.word	0x40020c00
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40021400 	.word	0x40021400
 80069bc:	40021800 	.word	0x40021800
 80069c0:	40021c00 	.word	0x40021c00
 80069c4:	40022000 	.word	0x40022000
 80069c8:	40022400 	.word	0x40022400
 80069cc:	40013c00 	.word	0x40013c00

080069d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	807b      	strh	r3, [r7, #2]
 80069dc:	4613      	mov	r3, r2
 80069de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069e0:	787b      	ldrb	r3, [r7, #1]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069e6:	887a      	ldrh	r2, [r7, #2]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80069ec:	e003      	b.n	80069f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80069ee:	887b      	ldrh	r3, [r7, #2]
 80069f0:	041a      	lsls	r2, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	619a      	str	r2, [r3, #24]
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a0e:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d006      	beq.n	8006a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a1a:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd fe4c 	bl	80046c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40013c00 	.word	0x40013c00

08006a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e07f      	b.n	8006b46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff f8d2 	bl	8005c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2224      	movs	r2, #36	; 0x24
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aaa:	609a      	str	r2, [r3, #8]
 8006aac:	e006      	b.n	8006abc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006aba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d104      	bne.n	8006ace <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <HAL_I2C_Init+0x11c>)
 8006ada:	430b      	orrs	r3, r1
 8006adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	ea42 0103 	orr.w	r1, r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	021a      	lsls	r2, r3, #8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	02008000 	.word	0x02008000

08006b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	460b      	mov	r3, r1
 8006b62:	817b      	strh	r3, [r7, #10]
 8006b64:	4613      	mov	r3, r2
 8006b66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	f040 80da 	bne.w	8006d2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_I2C_Master_Transmit+0x30>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e0d3      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1d8>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b8c:	f7ff fc36 	bl	80063fc <HAL_GetTick>
 8006b90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	2319      	movs	r3, #25
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fa00 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e0be      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2221      	movs	r2, #33	; 0x21
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2210      	movs	r2, #16
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	893a      	ldrh	r2, [r7, #8]
 8006bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2bff      	cmp	r3, #255	; 0xff
 8006bde:	d90e      	bls.n	8006bfe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	22ff      	movs	r2, #255	; 0xff
 8006be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	8979      	ldrh	r1, [r7, #10]
 8006bee:	4b51      	ldr	r3, [pc, #324]	; (8006d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fb62 	bl	80072c0 <I2C_TransferConfig>
 8006bfc:	e06c      	b.n	8006cd8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	8979      	ldrh	r1, [r7, #10]
 8006c10:	4b48      	ldr	r3, [pc, #288]	; (8006d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fb51 	bl	80072c0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006c1e:	e05b      	b.n	8006cd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	6a39      	ldr	r1, [r7, #32]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f9fd 	bl	8007024 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e07b      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d034      	beq.n	8006cd8 <HAL_I2C_Master_Transmit+0x184>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d130      	bne.n	8006cd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f98f 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e04d      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2bff      	cmp	r3, #255	; 0xff
 8006c98:	d90e      	bls.n	8006cb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	8979      	ldrh	r1, [r7, #10]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fb05 	bl	80072c0 <I2C_TransferConfig>
 8006cb6:	e00f      	b.n	8006cd8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	8979      	ldrh	r1, [r7, #10]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 faf4 	bl	80072c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d19e      	bne.n	8006c20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	6a39      	ldr	r1, [r7, #32]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f9dc 	bl	80070a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e01a      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6859      	ldr	r1, [r3, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_I2C_Master_Transmit+0x1e4>)
 8006d0a:	400b      	ands	r3, r1
 8006d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e000      	b.n	8006d2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d2a:	2302      	movs	r3, #2
  }
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	80002000 	.word	0x80002000
 8006d38:	fe00e800 	.word	0xfe00e800

08006d3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	461a      	mov	r2, r3
 8006d48:	460b      	mov	r3, r1
 8006d4a:	817b      	strh	r3, [r7, #10]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	f040 80db 	bne.w	8006f14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_I2C_Master_Receive+0x30>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e0d4      	b.n	8006f16 <HAL_I2C_Master_Receive+0x1da>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d74:	f7ff fb42 	bl	80063fc <HAL_GetTick>
 8006d78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	2319      	movs	r3, #25
 8006d80:	2201      	movs	r2, #1
 8006d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f90c 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e0bf      	b.n	8006f16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2222      	movs	r2, #34	; 0x22
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2210      	movs	r2, #16
 8006da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	893a      	ldrh	r2, [r7, #8]
 8006db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2bff      	cmp	r3, #255	; 0xff
 8006dc6:	d90e      	bls.n	8006de6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	22ff      	movs	r2, #255	; 0xff
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	8979      	ldrh	r1, [r7, #10]
 8006dd6:	4b52      	ldr	r3, [pc, #328]	; (8006f20 <HAL_I2C_Master_Receive+0x1e4>)
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fa6e 	bl	80072c0 <I2C_TransferConfig>
 8006de4:	e06d      	b.n	8006ec2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	8979      	ldrh	r1, [r7, #10]
 8006df8:	4b49      	ldr	r3, [pc, #292]	; (8006f20 <HAL_I2C_Master_Receive+0x1e4>)
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fa5d 	bl	80072c0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006e06:	e05c      	b.n	8006ec2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	6a39      	ldr	r1, [r7, #32]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f985 	bl	800711c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e07c      	b.n	8006f16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d034      	beq.n	8006ec2 <HAL_I2C_Master_Receive+0x186>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d130      	bne.n	8006ec2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	2200      	movs	r2, #0
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f89a 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e04d      	b.n	8006f16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2bff      	cmp	r3, #255	; 0xff
 8006e82:	d90e      	bls.n	8006ea2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	22ff      	movs	r2, #255	; 0xff
 8006e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	8979      	ldrh	r1, [r7, #10]
 8006e92:	2300      	movs	r3, #0
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 fa10 	bl	80072c0 <I2C_TransferConfig>
 8006ea0:	e00f      	b.n	8006ec2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	8979      	ldrh	r1, [r7, #10]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f9ff 	bl	80072c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d19d      	bne.n	8006e08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	6a39      	ldr	r1, [r7, #32]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f8e7 	bl	80070a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e01a      	b.n	8006f16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <HAL_I2C_Master_Receive+0x1e8>)
 8006ef4:	400b      	ands	r3, r1
 8006ef6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e000      	b.n	8006f16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	80002400 	.word	0x80002400
 8006f24:	fe00e800 	.word	0xfe00e800

08006f28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f36:	b2db      	uxtb	r3, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d103      	bne.n	8006f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d007      	beq.n	8006f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	619a      	str	r2, [r3, #24]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb4:	e022      	b.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d01e      	beq.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbe:	f7ff fa1d 	bl	80063fc <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d113      	bne.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	f043 0220 	orr.w	r2, r3, #32
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e00f      	b.n	800701c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4013      	ands	r3, r2
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	429a      	cmp	r2, r3
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	429a      	cmp	r2, r3
 8007018:	d0cd      	beq.n	8006fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007030:	e02c      	b.n	800708c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f8dc 	bl	80071f4 <I2C_IsAcknowledgeFailed>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e02a      	b.n	800709c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d01e      	beq.n	800708c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7ff f9d5 	bl	80063fc <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d113      	bne.n	800708c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e007      	b.n	800709c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b02      	cmp	r3, #2
 8007098:	d1cb      	bne.n	8007032 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070b0:	e028      	b.n	8007104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f89c 	bl	80071f4 <I2C_IsAcknowledgeFailed>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e026      	b.n	8007114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c6:	f7ff f999 	bl	80063fc <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d113      	bne.n	8007104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e007      	b.n	8007114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b20      	cmp	r3, #32
 8007110:	d1cf      	bne.n	80070b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007128:	e055      	b.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f860 	bl	80071f4 <I2C_IsAcknowledgeFailed>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e053      	b.n	80071e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b20      	cmp	r3, #32
 800714a:	d129      	bne.n	80071a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b04      	cmp	r3, #4
 8007158:	d105      	bne.n	8007166 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e03f      	b.n	80071e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2220      	movs	r2, #32
 800716c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6859      	ldr	r1, [r3, #4]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800717a:	400b      	ands	r3, r1
 800717c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e022      	b.n	80071e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a0:	f7ff f92c 	bl	80063fc <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d302      	bcc.n	80071b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10f      	bne.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	f043 0220 	orr.w	r2, r3, #32
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e007      	b.n	80071e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d1a2      	bne.n	800712a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	fe00e800 	.word	0xfe00e800

080071f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b10      	cmp	r3, #16
 800720c:	d151      	bne.n	80072b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800720e:	e022      	b.n	8007256 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d01e      	beq.n	8007256 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007218:	f7ff f8f0 	bl	80063fc <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	429a      	cmp	r2, r3
 8007226:	d302      	bcc.n	800722e <I2C_IsAcknowledgeFailed+0x3a>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d113      	bne.n	8007256 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	f043 0220 	orr.w	r2, r3, #32
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e02e      	b.n	80072b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b20      	cmp	r3, #32
 8007262:	d1d5      	bne.n	8007210 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2210      	movs	r2, #16
 800726a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2220      	movs	r2, #32
 8007272:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fe71 	bl	8006f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6859      	ldr	r1, [r3, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <I2C_IsAcknowledgeFailed+0xc8>)
 8007286:	400b      	ands	r3, r1
 8007288:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728e:	f043 0204 	orr.w	r2, r3, #4
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	fe00e800 	.word	0xfe00e800

080072c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	817b      	strh	r3, [r7, #10]
 80072ce:	4613      	mov	r3, r2
 80072d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	0d5b      	lsrs	r3, r3, #21
 80072dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072e0:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <I2C_TransferConfig+0x58>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	43db      	mvns	r3, r3
 80072e6:	ea02 0103 	and.w	r1, r2, r3
 80072ea:	897b      	ldrh	r3, [r7, #10]
 80072ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072f0:	7a7b      	ldrb	r3, [r7, #9]
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	431a      	orrs	r2, r3
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	431a      	orrs	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	03ff63ff 	.word	0x03ff63ff

0800731c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b20      	cmp	r3, #32
 8007330:	d138      	bne.n	80073a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800733c:	2302      	movs	r3, #2
 800733e:	e032      	b.n	80073a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2224      	movs	r2, #36	; 0x24
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800736e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e000      	b.n	80073a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073a4:	2302      	movs	r3, #2
  }
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d139      	bne.n	800743c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e033      	b.n	800743e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2224      	movs	r2, #36	; 0x24
 80073e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007404:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800744a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744c:	b08f      	sub	sp, #60	; 0x3c
 800744e:	af0a      	add	r7, sp, #40	; 0x28
 8007450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e116      	b.n	800768a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fe fdf0 	bl	800605c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2203      	movs	r2, #3
 8007480:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f003 f8aa 	bl	800a5f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	687e      	ldr	r6, [r7, #4]
 80074a8:	466d      	mov	r5, sp
 80074aa:	f106 0410 	add.w	r4, r6, #16
 80074ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80074be:	1d33      	adds	r3, r6, #4
 80074c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074c2:	6838      	ldr	r0, [r7, #0]
 80074c4:	f003 f83e 	bl	800a544 <USB_CoreInit>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e0d7      	b.n	800768a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f003 f898 	bl	800a616 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	e04a      	b.n	8007582 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80074ec:	7bfa      	ldrb	r2, [r7, #15]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	333d      	adds	r3, #61	; 0x3d
 80074fc:	2201      	movs	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007500:	7bfa      	ldrb	r2, [r7, #15]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	333c      	adds	r3, #60	; 0x3c
 8007510:	7bfa      	ldrb	r2, [r7, #15]
 8007512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007514:	7bfa      	ldrb	r2, [r7, #15]
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	b298      	uxth	r0, r3
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	3342      	adds	r3, #66	; 0x42
 8007528:	4602      	mov	r2, r0
 800752a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800752c:	7bfa      	ldrb	r2, [r7, #15]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	333f      	adds	r3, #63	; 0x3f
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007540:	7bfa      	ldrb	r2, [r7, #15]
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4613      	mov	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	1a9b      	subs	r3, r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	3344      	adds	r3, #68	; 0x44
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	3348      	adds	r3, #72	; 0x48
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007568:	7bfa      	ldrb	r2, [r7, #15]
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3350      	adds	r3, #80	; 0x50
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	3301      	adds	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	7bfa      	ldrb	r2, [r7, #15]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d3af      	bcc.n	80074ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e044      	b.n	800761c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007592:	7bfa      	ldrb	r2, [r7, #15]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	1a9b      	subs	r3, r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075a8:	7bfa      	ldrb	r2, [r7, #15]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075be:	7bfa      	ldrb	r2, [r7, #15]
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075d4:	7bfa      	ldrb	r2, [r7, #15]
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075ea:	7bfa      	ldrb	r2, [r7, #15]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	3301      	adds	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
 800761c:	7bfa      	ldrb	r2, [r7, #15]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d3b5      	bcc.n	8007592 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	687e      	ldr	r6, [r7, #4]
 800762e:	466d      	mov	r5, sp
 8007630:	f106 0410 	add.w	r4, r6, #16
 8007634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800763a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800763c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007640:	e885 0003 	stmia.w	r5, {r0, r1}
 8007644:	1d33      	adds	r3, r6, #4
 8007646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007648:	6838      	ldr	r0, [r7, #0]
 800764a:	f003 f80f 	bl	800a66c <USB_DevInit>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e014      	b.n	800768a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b01      	cmp	r3, #1
 8007676:	d102      	bne.n	800767e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f80b 	bl	8007694 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f003 f9c1 	bl	800aa0a <USB_DevDisconnect>

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	10000003 	.word	0x10000003

080076dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a04      	ldr	r2, [pc, #16]	; (80076f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ea:	6013      	str	r3, [r2, #0]
}
 80076ec:	bf00      	nop
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40007000 	.word	0x40007000

080076fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007706:	4b23      	ldr	r3, [pc, #140]	; (8007794 <HAL_PWREx_EnableOverDrive+0x98>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	4a22      	ldr	r2, [pc, #136]	; (8007794 <HAL_PWREx_EnableOverDrive+0x98>)
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007710:	6413      	str	r3, [r2, #64]	; 0x40
 8007712:	4b20      	ldr	r3, [pc, #128]	; (8007794 <HAL_PWREx_EnableOverDrive+0x98>)
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800771e:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007728:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800772a:	f7fe fe67 	bl	80063fc <HAL_GetTick>
 800772e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007730:	e009      	b.n	8007746 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007732:	f7fe fe63 	bl	80063fc <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007740:	d901      	bls.n	8007746 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e022      	b.n	800778c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007752:	d1ee      	bne.n	8007732 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007754:	4b10      	ldr	r3, [pc, #64]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a0f      	ldr	r2, [pc, #60]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800775a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800775e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007760:	f7fe fe4c 	bl	80063fc <HAL_GetTick>
 8007764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007766:	e009      	b.n	800777c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007768:	f7fe fe48 	bl	80063fc <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007776:	d901      	bls.n	800777c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e007      	b.n	800778c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007788:	d1ee      	bne.n	8007768 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40023800 	.word	0x40023800
 8007798:	40007000 	.word	0x40007000

0800779c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e29b      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8087 	beq.w	80078ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077c0:	4b96      	ldr	r3, [pc, #600]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 030c 	and.w	r3, r3, #12
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d00c      	beq.n	80077e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077cc:	4b93      	ldr	r3, [pc, #588]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 030c 	and.w	r3, r3, #12
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d112      	bne.n	80077fe <HAL_RCC_OscConfig+0x62>
 80077d8:	4b90      	ldr	r3, [pc, #576]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077e4:	d10b      	bne.n	80077fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e6:	4b8d      	ldr	r3, [pc, #564]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d06c      	beq.n	80078cc <HAL_RCC_OscConfig+0x130>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d168      	bne.n	80078cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e275      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007806:	d106      	bne.n	8007816 <HAL_RCC_OscConfig+0x7a>
 8007808:	4b84      	ldr	r3, [pc, #528]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a83      	ldr	r2, [pc, #524]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800780e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e02e      	b.n	8007874 <HAL_RCC_OscConfig+0xd8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0x9c>
 800781e:	4b7f      	ldr	r3, [pc, #508]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a7e      	ldr	r2, [pc, #504]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	4b7c      	ldr	r3, [pc, #496]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a7b      	ldr	r2, [pc, #492]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	e01d      	b.n	8007874 <HAL_RCC_OscConfig+0xd8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007840:	d10c      	bne.n	800785c <HAL_RCC_OscConfig+0xc0>
 8007842:	4b76      	ldr	r3, [pc, #472]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a75      	ldr	r2, [pc, #468]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	4b73      	ldr	r3, [pc, #460]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a72      	ldr	r2, [pc, #456]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	e00b      	b.n	8007874 <HAL_RCC_OscConfig+0xd8>
 800785c:	4b6f      	ldr	r3, [pc, #444]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a6e      	ldr	r2, [pc, #440]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	4b6c      	ldr	r3, [pc, #432]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6b      	ldr	r2, [pc, #428]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800786e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d013      	beq.n	80078a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787c:	f7fe fdbe 	bl	80063fc <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007884:	f7fe fdba 	bl	80063fc <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b64      	cmp	r3, #100	; 0x64
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e229      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007896:	4b61      	ldr	r3, [pc, #388]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0xe8>
 80078a2:	e014      	b.n	80078ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a4:	f7fe fdaa 	bl	80063fc <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ac:	f7fe fda6 	bl	80063fc <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b64      	cmp	r3, #100	; 0x64
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e215      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078be:	4b57      	ldr	r3, [pc, #348]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f0      	bne.n	80078ac <HAL_RCC_OscConfig+0x110>
 80078ca:	e000      	b.n	80078ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d069      	beq.n	80079ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078da:	4b50      	ldr	r3, [pc, #320]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 030c 	and.w	r3, r3, #12
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078e6:	4b4d      	ldr	r3, [pc, #308]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d11c      	bne.n	800792c <HAL_RCC_OscConfig+0x190>
 80078f2:	4b4a      	ldr	r3, [pc, #296]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d116      	bne.n	800792c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078fe:	4b47      	ldr	r3, [pc, #284]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_RCC_OscConfig+0x17a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d001      	beq.n	8007916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e1e9      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007916:	4b41      	ldr	r3, [pc, #260]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	493d      	ldr	r1, [pc, #244]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007926:	4313      	orrs	r3, r2
 8007928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800792a:	e040      	b.n	80079ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d023      	beq.n	800797c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007934:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a38      	ldr	r2, [pc, #224]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007940:	f7fe fd5c 	bl	80063fc <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007948:	f7fe fd58 	bl	80063fc <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e1c7      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f0      	beq.n	8007948 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007966:	4b2d      	ldr	r3, [pc, #180]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4929      	ldr	r1, [pc, #164]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007976:	4313      	orrs	r3, r2
 8007978:	600b      	str	r3, [r1, #0]
 800797a:	e018      	b.n	80079ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800797c:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007988:	f7fe fd38 	bl	80063fc <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007990:	f7fe fd34 	bl	80063fc <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e1a3      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079a2:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1f0      	bne.n	8007990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d038      	beq.n	8007a2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d019      	beq.n	80079f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079c2:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ce:	f7fe fd15 	bl	80063fc <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079d6:	f7fe fd11 	bl	80063fc <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e180      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80079ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0f0      	beq.n	80079d6 <HAL_RCC_OscConfig+0x23a>
 80079f4:	e01a      	b.n	8007a2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079f6:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80079f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fa:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <HAL_RCC_OscConfig+0x280>)
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a02:	f7fe fcfb 	bl	80063fc <HAL_GetTick>
 8007a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a08:	e00a      	b.n	8007a20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a0a:	f7fe fcf7 	bl	80063fc <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d903      	bls.n	8007a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e166      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
 8007a1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a20:	4b92      	ldr	r3, [pc, #584]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ee      	bne.n	8007a0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80a4 	beq.w	8007b82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a3a:	4b8c      	ldr	r3, [pc, #560]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a46:	4b89      	ldr	r3, [pc, #548]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	4a88      	ldr	r2, [pc, #544]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a50:	6413      	str	r3, [r2, #64]	; 0x40
 8007a52:	4b86      	ldr	r3, [pc, #536]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a62:	4b83      	ldr	r3, [pc, #524]	; (8007c70 <HAL_RCC_OscConfig+0x4d4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d118      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a6e:	4b80      	ldr	r3, [pc, #512]	; (8007c70 <HAL_RCC_OscConfig+0x4d4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a7f      	ldr	r2, [pc, #508]	; (8007c70 <HAL_RCC_OscConfig+0x4d4>)
 8007a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a7a:	f7fe fcbf 	bl	80063fc <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a82:	f7fe fcbb 	bl	80063fc <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b64      	cmp	r3, #100	; 0x64
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e12a      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a94:	4b76      	ldr	r3, [pc, #472]	; (8007c70 <HAL_RCC_OscConfig+0x4d4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x31a>
 8007aa8:	4b70      	ldr	r3, [pc, #448]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	4a6f      	ldr	r2, [pc, #444]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab4:	e02d      	b.n	8007b12 <HAL_RCC_OscConfig+0x376>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10c      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x33c>
 8007abe:	4b6b      	ldr	r3, [pc, #428]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	4a6a      	ldr	r2, [pc, #424]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ac4:	f023 0301 	bic.w	r3, r3, #1
 8007ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aca:	4b68      	ldr	r3, [pc, #416]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ace:	4a67      	ldr	r2, [pc, #412]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ad0:	f023 0304 	bic.w	r3, r3, #4
 8007ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad6:	e01c      	b.n	8007b12 <HAL_RCC_OscConfig+0x376>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b05      	cmp	r3, #5
 8007ade:	d10c      	bne.n	8007afa <HAL_RCC_OscConfig+0x35e>
 8007ae0:	4b62      	ldr	r3, [pc, #392]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	4a61      	ldr	r2, [pc, #388]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ae6:	f043 0304 	orr.w	r3, r3, #4
 8007aea:	6713      	str	r3, [r2, #112]	; 0x70
 8007aec:	4b5f      	ldr	r3, [pc, #380]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	4a5e      	ldr	r2, [pc, #376]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	6713      	str	r3, [r2, #112]	; 0x70
 8007af8:	e00b      	b.n	8007b12 <HAL_RCC_OscConfig+0x376>
 8007afa:	4b5c      	ldr	r3, [pc, #368]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a5b      	ldr	r2, [pc, #364]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	6713      	str	r3, [r2, #112]	; 0x70
 8007b06:	4b59      	ldr	r3, [pc, #356]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	4a58      	ldr	r2, [pc, #352]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b0c:	f023 0304 	bic.w	r3, r3, #4
 8007b10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d015      	beq.n	8007b46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1a:	f7fe fc6f 	bl	80063fc <HAL_GetTick>
 8007b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b20:	e00a      	b.n	8007b38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b22:	f7fe fc6b 	bl	80063fc <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e0d8      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b38:	4b4c      	ldr	r3, [pc, #304]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0ee      	beq.n	8007b22 <HAL_RCC_OscConfig+0x386>
 8007b44:	e014      	b.n	8007b70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b46:	f7fe fc59 	bl	80063fc <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b4c:	e00a      	b.n	8007b64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b4e:	f7fe fc55 	bl	80063fc <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e0c2      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b64:	4b41      	ldr	r3, [pc, #260]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1ee      	bne.n	8007b4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b76:	4b3d      	ldr	r3, [pc, #244]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	4a3c      	ldr	r2, [pc, #240]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80ae 	beq.w	8007ce8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b8c:	4b37      	ldr	r3, [pc, #220]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 030c 	and.w	r3, r3, #12
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d06d      	beq.n	8007c74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d14b      	bne.n	8007c38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ba0:	4b32      	ldr	r3, [pc, #200]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a31      	ldr	r2, [pc, #196]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fe fc26 	bl	80063fc <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bb4:	f7fe fc22 	bl	80063fc <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e091      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bc6:	4b29      	ldr	r3, [pc, #164]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f0      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69da      	ldr	r2, [r3, #28]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	019b      	lsls	r3, r3, #6
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	3b01      	subs	r3, #1
 8007bec:	041b      	lsls	r3, r3, #16
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	061b      	lsls	r3, r3, #24
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	071b      	lsls	r3, r3, #28
 8007bfe:	491b      	ldr	r1, [pc, #108]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c04:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fe fbf4 	bl	80063fc <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fe fbf0 	bl	80063fc <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e05f      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c2a:	4b10      	ldr	r3, [pc, #64]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f0      	beq.n	8007c18 <HAL_RCC_OscConfig+0x47c>
 8007c36:	e057      	b.n	8007ce8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c38:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a0b      	ldr	r2, [pc, #44]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7fe fbda 	bl	80063fc <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4c:	f7fe fbd6 	bl	80063fc <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e045      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c5e:	4b03      	ldr	r3, [pc, #12]	; (8007c6c <HAL_RCC_OscConfig+0x4d0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x4b0>
 8007c6a:	e03d      	b.n	8007ce8 <HAL_RCC_OscConfig+0x54c>
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c74:	4b1f      	ldr	r3, [pc, #124]	; (8007cf4 <HAL_RCC_OscConfig+0x558>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d030      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d129      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d122      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007caa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d119      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d10f      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d107      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d001      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40023800 	.word	0x40023800

08007cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e0d0      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d10:	4b6a      	ldr	r3, [pc, #424]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 030f 	and.w	r3, r3, #15
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d910      	bls.n	8007d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d1e:	4b67      	ldr	r3, [pc, #412]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f023 020f 	bic.w	r2, r3, #15
 8007d26:	4965      	ldr	r1, [pc, #404]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d2e:	4b63      	ldr	r3, [pc, #396]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e0b8      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d020      	beq.n	8007d8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d58:	4b59      	ldr	r3, [pc, #356]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4a58      	ldr	r2, [pc, #352]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d70:	4b53      	ldr	r3, [pc, #332]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4a52      	ldr	r2, [pc, #328]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d7c:	4b50      	ldr	r3, [pc, #320]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	494d      	ldr	r1, [pc, #308]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d040      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d107      	bne.n	8007db2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007da2:	4b47      	ldr	r3, [pc, #284]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d115      	bne.n	8007dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e07f      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d107      	bne.n	8007dca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dba:	4b41      	ldr	r3, [pc, #260]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e073      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dca:	4b3d      	ldr	r3, [pc, #244]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e06b      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dda:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f023 0203 	bic.w	r2, r3, #3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	4936      	ldr	r1, [pc, #216]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dec:	f7fe fb06 	bl	80063fc <HAL_GetTick>
 8007df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df2:	e00a      	b.n	8007e0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007df4:	f7fe fb02 	bl	80063fc <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e053      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 020c 	and.w	r2, r3, #12
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d1eb      	bne.n	8007df4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e1c:	4b27      	ldr	r3, [pc, #156]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d210      	bcs.n	8007e4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e2a:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f023 020f 	bic.w	r2, r3, #15
 8007e32:	4922      	ldr	r1, [pc, #136]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e3a:	4b20      	ldr	r3, [pc, #128]	; (8007ebc <HAL_RCC_ClockConfig+0x1c4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d001      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e032      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e58:	4b19      	ldr	r3, [pc, #100]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4916      	ldr	r1, [pc, #88]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e76:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	490e      	ldr	r1, [pc, #56]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e8a:	f000 f821 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 8007e8e:	4601      	mov	r1, r0
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	091b      	lsrs	r3, r3, #4
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	4a0a      	ldr	r2, [pc, #40]	; (8007ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8007e9c:	5cd3      	ldrb	r3, [r2, r3]
 8007e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8007ea2:	4a09      	ldr	r2, [pc, #36]	; (8007ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8007ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ea6:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <HAL_RCC_ClockConfig+0x1d4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fa62 	bl	8006374 <HAL_InitTick>

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40023c00 	.word	0x40023c00
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	0800dfb8 	.word	0x0800dfb8
 8007ec8:	2000001c 	.word	0x2000001c
 8007ecc:	20000020 	.word	0x20000020

08007ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	607b      	str	r3, [r7, #4]
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ee6:	4b63      	ldr	r3, [pc, #396]	; (8008074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f003 030c 	and.w	r3, r3, #12
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d007      	beq.n	8007f02 <HAL_RCC_GetSysClockFreq+0x32>
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d008      	beq.n	8007f08 <HAL_RCC_GetSysClockFreq+0x38>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f040 80b4 	bne.w	8008064 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007efc:	4b5e      	ldr	r3, [pc, #376]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007efe:	60bb      	str	r3, [r7, #8]
      break;
 8007f00:	e0b3      	b.n	800806a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f02:	4b5e      	ldr	r3, [pc, #376]	; (800807c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007f04:	60bb      	str	r3, [r7, #8]
      break;
 8007f06:	e0b0      	b.n	800806a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f08:	4b5a      	ldr	r3, [pc, #360]	; (8008074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f10:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f12:	4b58      	ldr	r3, [pc, #352]	; (8008074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d04a      	beq.n	8007fb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f1e:	4b55      	ldr	r3, [pc, #340]	; (8008074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	099b      	lsrs	r3, r3, #6
 8007f24:	f04f 0400 	mov.w	r4, #0
 8007f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	ea03 0501 	and.w	r5, r3, r1
 8007f34:	ea04 0602 	and.w	r6, r4, r2
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	f04f 0400 	mov.w	r4, #0
 8007f44:	0154      	lsls	r4, r2, #5
 8007f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f4a:	014b      	lsls	r3, r1, #5
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4622      	mov	r2, r4
 8007f50:	1b49      	subs	r1, r1, r5
 8007f52:	eb62 0206 	sbc.w	r2, r2, r6
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	f04f 0400 	mov.w	r4, #0
 8007f5e:	0194      	lsls	r4, r2, #6
 8007f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f64:	018b      	lsls	r3, r1, #6
 8007f66:	1a5b      	subs	r3, r3, r1
 8007f68:	eb64 0402 	sbc.w	r4, r4, r2
 8007f6c:	f04f 0100 	mov.w	r1, #0
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	00e2      	lsls	r2, r4, #3
 8007f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f7a:	00d9      	lsls	r1, r3, #3
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4614      	mov	r4, r2
 8007f80:	195b      	adds	r3, r3, r5
 8007f82:	eb44 0406 	adc.w	r4, r4, r6
 8007f86:	f04f 0100 	mov.w	r1, #0
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	0262      	lsls	r2, r4, #9
 8007f90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007f94:	0259      	lsls	r1, r3, #9
 8007f96:	460b      	mov	r3, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f04f 0400 	mov.w	r4, #0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	f7f8 f9a2 	bl	80002f0 <__aeabi_uldivmod>
 8007fac:	4603      	mov	r3, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e049      	b.n	8008048 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fb4:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	099b      	lsrs	r3, r3, #6
 8007fba:	f04f 0400 	mov.w	r4, #0
 8007fbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	ea03 0501 	and.w	r5, r3, r1
 8007fca:	ea04 0602 	and.w	r6, r4, r2
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	f04f 0400 	mov.w	r4, #0
 8007fda:	0154      	lsls	r4, r2, #5
 8007fdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fe0:	014b      	lsls	r3, r1, #5
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	1b49      	subs	r1, r1, r5
 8007fe8:	eb62 0206 	sbc.w	r2, r2, r6
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	f04f 0400 	mov.w	r4, #0
 8007ff4:	0194      	lsls	r4, r2, #6
 8007ff6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ffa:	018b      	lsls	r3, r1, #6
 8007ffc:	1a5b      	subs	r3, r3, r1
 8007ffe:	eb64 0402 	sbc.w	r4, r4, r2
 8008002:	f04f 0100 	mov.w	r1, #0
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	00e2      	lsls	r2, r4, #3
 800800c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008010:	00d9      	lsls	r1, r3, #3
 8008012:	460b      	mov	r3, r1
 8008014:	4614      	mov	r4, r2
 8008016:	195b      	adds	r3, r3, r5
 8008018:	eb44 0406 	adc.w	r4, r4, r6
 800801c:	f04f 0100 	mov.w	r1, #0
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	02a2      	lsls	r2, r4, #10
 8008026:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800802a:	0299      	lsls	r1, r3, #10
 800802c:	460b      	mov	r3, r1
 800802e:	4614      	mov	r4, r2
 8008030:	4618      	mov	r0, r3
 8008032:	4621      	mov	r1, r4
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f04f 0400 	mov.w	r4, #0
 800803a:	461a      	mov	r2, r3
 800803c:	4623      	mov	r3, r4
 800803e:	f7f8 f957 	bl	80002f0 <__aeabi_uldivmod>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	3301      	adds	r3, #1
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	60bb      	str	r3, [r7, #8]
      break;
 8008062:	e002      	b.n	800806a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008064:	4b04      	ldr	r3, [pc, #16]	; (8008078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008066:	60bb      	str	r3, [r7, #8]
      break;
 8008068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800806a:	68bb      	ldr	r3, [r7, #8]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008074:	40023800 	.word	0x40023800
 8008078:	00f42400 	.word	0x00f42400
 800807c:	007a1200 	.word	0x007a1200

08008080 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008084:	4b03      	ldr	r3, [pc, #12]	; (8008094 <HAL_RCC_GetHCLKFreq+0x14>)
 8008086:	681b      	ldr	r3, [r3, #0]
}
 8008088:	4618      	mov	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000001c 	.word	0x2000001c

08008098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800809c:	f7ff fff0 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080a0:	4601      	mov	r1, r0
 80080a2:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0a9b      	lsrs	r3, r3, #10
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4a03      	ldr	r2, [pc, #12]	; (80080bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ae:	5cd3      	ldrb	r3, [r2, r3]
 80080b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40023800 	.word	0x40023800
 80080bc:	0800dfc8 	.word	0x0800dfc8

080080c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080c4:	f7ff ffdc 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080c8:	4601      	mov	r1, r0
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	0b5b      	lsrs	r3, r3, #13
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	4a03      	ldr	r2, [pc, #12]	; (80080e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d6:	5cd3      	ldrb	r3, [r2, r3]
 80080d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40023800 	.word	0x40023800
 80080e4:	0800dfc8 	.word	0x0800dfc8

080080e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008110:	4b69      	ldr	r3, [pc, #420]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	4a68      	ldr	r2, [pc, #416]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008116:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800811a:	6093      	str	r3, [r2, #8]
 800811c:	4b66      	ldr	r3, [pc, #408]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008124:	4964      	ldr	r1, [pc, #400]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008126:	4313      	orrs	r3, r2
 8008128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008132:	2301      	movs	r3, #1
 8008134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008142:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008150:	4959      	ldr	r1, [pc, #356]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008160:	d101      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800816e:	2301      	movs	r3, #1
 8008170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d017      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800817e:	4b4e      	ldr	r3, [pc, #312]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	494a      	ldr	r1, [pc, #296]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819c:	d101      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800819e:	2301      	movs	r3, #1
 80081a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80081ba:	2301      	movs	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 808b 	beq.w	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081cc:	4b3a      	ldr	r3, [pc, #232]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	4a39      	ldr	r2, [pc, #228]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d6:	6413      	str	r3, [r2, #64]	; 0x40
 80081d8:	4b37      	ldr	r3, [pc, #220]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e0:	60bb      	str	r3, [r7, #8]
 80081e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081e4:	4b35      	ldr	r3, [pc, #212]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a34      	ldr	r2, [pc, #208]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f0:	f7fe f904 	bl	80063fc <HAL_GetTick>
 80081f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081f6:	e008      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f8:	f7fe f900 	bl	80063fc <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b64      	cmp	r3, #100	; 0x64
 8008204:	d901      	bls.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e38d      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800820a:	4b2c      	ldr	r3, [pc, #176]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f0      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008216:	4b28      	ldr	r3, [pc, #160]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d035      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	429a      	cmp	r2, r3
 8008232:	d02e      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008234:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800823e:	4b1e      	ldr	r3, [pc, #120]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	4a1d      	ldr	r2, [pc, #116]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008248:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a1a      	ldr	r2, [pc, #104]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800825c:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b01      	cmp	r3, #1
 8008266:	d114      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fe f8c8 	bl	80063fc <HAL_GetTick>
 800826c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826e:	e00a      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008270:	f7fe f8c4 	bl	80063fc <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f241 3288 	movw	r2, #5000	; 0x1388
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e34f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008286:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0ee      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800829a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800829e:	d111      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80082ae:	400b      	ands	r3, r1
 80082b0:	4901      	ldr	r1, [pc, #4]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	608b      	str	r3, [r1, #8]
 80082b6:	e00b      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80082b8:	40023800 	.word	0x40023800
 80082bc:	40007000 	.word	0x40007000
 80082c0:	0ffffcff 	.word	0x0ffffcff
 80082c4:	4bb3      	ldr	r3, [pc, #716]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4ab2      	ldr	r2, [pc, #712]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082ce:	6093      	str	r3, [r2, #8]
 80082d0:	4bb0      	ldr	r3, [pc, #704]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082dc:	49ad      	ldr	r1, [pc, #692]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0310 	and.w	r3, r3, #16
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d010      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082ee:	4ba9      	ldr	r3, [pc, #676]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f4:	4aa7      	ldr	r2, [pc, #668]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80082fe:	4ba5      	ldr	r3, [pc, #660]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008300:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	49a2      	ldr	r1, [pc, #648]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800831c:	4b9d      	ldr	r3, [pc, #628]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832a:	499a      	ldr	r1, [pc, #616]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800832c:	4313      	orrs	r3, r2
 800832e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800833e:	4b95      	ldr	r3, [pc, #596]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800834c:	4991      	ldr	r1, [pc, #580]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800834e:	4313      	orrs	r3, r2
 8008350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008360:	4b8c      	ldr	r3, [pc, #560]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836e:	4989      	ldr	r1, [pc, #548]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008370:	4313      	orrs	r3, r2
 8008372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008382:	4b84      	ldr	r3, [pc, #528]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	4980      	ldr	r1, [pc, #512]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008392:	4313      	orrs	r3, r2
 8008394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083a4:	4b7b      	ldr	r3, [pc, #492]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083aa:	f023 0203 	bic.w	r2, r3, #3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b2:	4978      	ldr	r1, [pc, #480]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083c6:	4b73      	ldr	r3, [pc, #460]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083cc:	f023 020c 	bic.w	r2, r3, #12
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d4:	496f      	ldr	r1, [pc, #444]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083e8:	4b6a      	ldr	r3, [pc, #424]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f6:	4967      	ldr	r1, [pc, #412]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800840a:	4b62      	ldr	r3, [pc, #392]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800840c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008410:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008418:	495e      	ldr	r1, [pc, #376]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800841a:	4313      	orrs	r3, r2
 800841c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800842c:	4b59      	ldr	r3, [pc, #356]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800842e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	4956      	ldr	r1, [pc, #344]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800843c:	4313      	orrs	r3, r2
 800843e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800844e:	4b51      	ldr	r3, [pc, #324]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845c:	494d      	ldr	r1, [pc, #308]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800845e:	4313      	orrs	r3, r2
 8008460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008470:	4b48      	ldr	r3, [pc, #288]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008476:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847e:	4945      	ldr	r1, [pc, #276]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008480:	4313      	orrs	r3, r2
 8008482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008492:	4b40      	ldr	r3, [pc, #256]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a0:	493c      	ldr	r1, [pc, #240]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084b4:	4b37      	ldr	r3, [pc, #220]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c2:	4934      	ldr	r1, [pc, #208]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d011      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084d6:	4b2f      	ldr	r3, [pc, #188]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e4:	492b      	ldr	r1, [pc, #172]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f4:	d101      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80084f6:	2301      	movs	r3, #1
 80084f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008506:	2301      	movs	r3, #1
 8008508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008516:	4b1f      	ldr	r3, [pc, #124]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008524:	491b      	ldr	r1, [pc, #108]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008538:	4b16      	ldr	r3, [pc, #88]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008548:	4912      	ldr	r1, [pc, #72]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800855c:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800855e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008562:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856c:	4909      	ldr	r1, [pc, #36]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00f      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008580:	4b04      	ldr	r3, [pc, #16]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008586:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008590:	e002      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008592:	bf00      	nop
 8008594:	40023800 	.word	0x40023800
 8008598:	4985      	ldr	r1, [pc, #532]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800859a:	4313      	orrs	r3, r2
 800859c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80085ac:	4b80      	ldr	r3, [pc, #512]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085bc:	497c      	ldr	r1, [pc, #496]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d005      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085d2:	f040 80d6 	bne.w	8008782 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80085d6:	4b76      	ldr	r3, [pc, #472]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a75      	ldr	r2, [pc, #468]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e2:	f7fd ff0b 	bl	80063fc <HAL_GetTick>
 80085e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085e8:	e008      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085ea:	f7fd ff07 	bl	80063fc <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b64      	cmp	r3, #100	; 0x64
 80085f6:	d901      	bls.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e194      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085fc:	4b6c      	ldr	r3, [pc, #432]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1f0      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d021      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11d      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800861c:	4b64      	ldr	r3, [pc, #400]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800861e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008622:	0c1b      	lsrs	r3, r3, #16
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800862a:	4b61      	ldr	r3, [pc, #388]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800862c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008630:	0e1b      	lsrs	r3, r3, #24
 8008632:	f003 030f 	and.w	r3, r3, #15
 8008636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	019a      	lsls	r2, r3, #6
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	041b      	lsls	r3, r3, #16
 8008642:	431a      	orrs	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	061b      	lsls	r3, r3, #24
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	071b      	lsls	r3, r3, #28
 8008650:	4957      	ldr	r1, [pc, #348]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800866c:	d00a      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008676:	2b00      	cmp	r3, #0
 8008678:	d02e      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008682:	d129      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008684:	4b4a      	ldr	r3, [pc, #296]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800868a:	0c1b      	lsrs	r3, r3, #16
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008692:	4b47      	ldr	r3, [pc, #284]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008698:	0f1b      	lsrs	r3, r3, #28
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	019a      	lsls	r2, r3, #6
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	041b      	lsls	r3, r3, #16
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	431a      	orrs	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	071b      	lsls	r3, r3, #28
 80086b8:	493d      	ldr	r1, [pc, #244]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086c0:	4b3b      	ldr	r3, [pc, #236]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c6:	f023 021f 	bic.w	r2, r3, #31
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	3b01      	subs	r3, #1
 80086d0:	4937      	ldr	r1, [pc, #220]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01d      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80086e4:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ea:	0e1b      	lsrs	r3, r3, #24
 80086ec:	f003 030f 	and.w	r3, r3, #15
 80086f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086f2:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f8:	0f1b      	lsrs	r3, r3, #28
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	019a      	lsls	r2, r3, #6
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	041b      	lsls	r3, r3, #16
 800870c:	431a      	orrs	r2, r3
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	061b      	lsls	r3, r3, #24
 8008712:	431a      	orrs	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	071b      	lsls	r3, r3, #28
 8008718:	4925      	ldr	r1, [pc, #148]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800871a:	4313      	orrs	r3, r2
 800871c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d011      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	019a      	lsls	r2, r3, #6
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	041b      	lsls	r3, r3, #16
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	061b      	lsls	r3, r3, #24
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	071b      	lsls	r3, r3, #28
 8008748:	4919      	ldr	r1, [pc, #100]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800875a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800875c:	f7fd fe4e 	bl	80063fc <HAL_GetTick>
 8008760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008762:	e008      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008764:	f7fd fe4a 	bl	80063fc <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b64      	cmp	r3, #100	; 0x64
 8008770:	d901      	bls.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e0d7      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008776:	4b0e      	ldr	r3, [pc, #56]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f0      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b01      	cmp	r3, #1
 8008786:	f040 80cd 	bne.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800878a:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a08      	ldr	r2, [pc, #32]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008796:	f7fd fe31 	bl	80063fc <HAL_GetTick>
 800879a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800879c:	e00a      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800879e:	f7fd fe2d 	bl	80063fc <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b64      	cmp	r3, #100	; 0x64
 80087aa:	d903      	bls.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e0ba      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80087b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087b4:	4b5e      	ldr	r3, [pc, #376]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c0:	d0ed      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d02e      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d12a      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80087ea:	4b51      	ldr	r3, [pc, #324]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f0:	0c1b      	lsrs	r3, r3, #16
 80087f2:	f003 0303 	and.w	r3, r3, #3
 80087f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087f8:	4b4d      	ldr	r3, [pc, #308]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	019a      	lsls	r2, r3, #6
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	041b      	lsls	r3, r3, #16
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	061b      	lsls	r3, r3, #24
 8008818:	431a      	orrs	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	071b      	lsls	r3, r3, #28
 800881e:	4944      	ldr	r1, [pc, #272]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008820:	4313      	orrs	r3, r2
 8008822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008826:	4b42      	ldr	r3, [pc, #264]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800882c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	3b01      	subs	r3, #1
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	493d      	ldr	r1, [pc, #244]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800883a:	4313      	orrs	r3, r2
 800883c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d022      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008854:	d11d      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008856:	4b36      	ldr	r3, [pc, #216]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885c:	0e1b      	lsrs	r3, r3, #24
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886a:	0f1b      	lsrs	r3, r3, #28
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	019a      	lsls	r2, r3, #6
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	431a      	orrs	r2, r3
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	071b      	lsls	r3, r3, #28
 800888a:	4929      	ldr	r1, [pc, #164]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800888c:	4313      	orrs	r3, r2
 800888e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d028      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800889e:	4b24      	ldr	r3, [pc, #144]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a4:	0e1b      	lsrs	r3, r3, #24
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088ac:	4b20      	ldr	r3, [pc, #128]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	019a      	lsls	r2, r3, #6
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	041b      	lsls	r3, r3, #16
 80088c4:	431a      	orrs	r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	061b      	lsls	r3, r3, #24
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	071b      	lsls	r3, r3, #28
 80088d2:	4917      	ldr	r1, [pc, #92]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80088da:	4b15      	ldr	r3, [pc, #84]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	4911      	ldr	r1, [pc, #68]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a0e      	ldr	r2, [pc, #56]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088fc:	f7fd fd7e 	bl	80063fc <HAL_GetTick>
 8008900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008902:	e008      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008904:	f7fd fd7a 	bl	80063fc <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b64      	cmp	r3, #100	; 0x64
 8008910:	d901      	bls.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e007      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800891e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008922:	d1ef      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40023800 	.word	0x40023800

08008934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e01d      	b.n	8008982 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fd fa90 	bl	8005e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3304      	adds	r3, #4
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f000 fc90 	bl	8009298 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0201 	orr.w	r2, r2, #1
 80089a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <HAL_TIM_Base_Start_IT+0x50>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b06      	cmp	r3, #6
 80089b4:	d00b      	beq.n	80089ce <HAL_TIM_Base_Start_IT+0x42>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089bc:	d007      	beq.n	80089ce <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 0201 	orr.w	r2, r2, #1
 80089cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	00010007 	.word	0x00010007

080089e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e01d      	b.n	8008a2e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f815 	bl	8008a36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f000 fc3a 	bl	8009298 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
	...

08008a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 ffb2 	bl	80099c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a17      	ldr	r2, [pc, #92]	; (8008ac8 <HAL_TIM_PWM_Start+0x7c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_TIM_PWM_Start+0x2c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a16      	ldr	r2, [pc, #88]	; (8008acc <HAL_TIM_PWM_Start+0x80>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d101      	bne.n	8008a7c <HAL_TIM_PWM_Start+0x30>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <HAL_TIM_PWM_Start+0x32>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d007      	beq.n	8008a92 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <HAL_TIM_PWM_Start+0x84>)
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b06      	cmp	r3, #6
 8008aa2:	d00b      	beq.n	8008abc <HAL_TIM_PWM_Start+0x70>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aaa:	d007      	beq.n	8008abc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	40010400 	.word	0x40010400
 8008ad0:	00010007 	.word	0x00010007

08008ad4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e07b      	b.n	8008be0 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d106      	bne.n	8008b02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7fd f8c5 	bl	8005c8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6899      	ldr	r1, [r3, #8]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	4b34      	ldr	r3, [pc, #208]	; (8008be8 <HAL_TIM_Encoder_Init+0x114>)
 8008b16:	400b      	ands	r3, r1
 8008b18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f000 fbb7 	bl	8009298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4b27      	ldr	r3, [pc, #156]	; (8008bec <HAL_TIM_Encoder_Init+0x118>)
 8008b50:	4013      	ands	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <HAL_TIM_Encoder_Init+0x11c>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <HAL_TIM_Encoder_Init+0x120>)
 8008b72:	4013      	ands	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	4313      	orrs	r3, r2
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	011a      	lsls	r2, r3, #4
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	031b      	lsls	r3, r3, #12
 8008b94:	4313      	orrs	r3, r2
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008ba2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008baa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	fffebff8 	.word	0xfffebff8
 8008bec:	fffffcfc 	.word	0xfffffcfc
 8008bf0:	fffff3f3 	.word	0xfffff3f3
 8008bf4:	ffff0f0f 	.word	0xffff0f0f

08008bf8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_TIM_Encoder_Start+0x16>
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d008      	beq.n	8008c1e <HAL_TIM_Encoder_Start+0x26>
 8008c0c:	e00f      	b.n	8008c2e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2201      	movs	r2, #1
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fed6 	bl	80099c8 <TIM_CCxChannelCmd>
      break;
 8008c1c:	e016      	b.n	8008c4c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2201      	movs	r2, #1
 8008c24:	2104      	movs	r1, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fece 	bl	80099c8 <TIM_CCxChannelCmd>
      break;
 8008c2c:	e00e      	b.n	8008c4c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2201      	movs	r2, #1
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fec6 	bl	80099c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2201      	movs	r2, #1
 8008c42:	2104      	movs	r1, #4
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 febf 	bl	80099c8 <TIM_CCxChannelCmd>
      break;
 8008c4a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0201 	orr.w	r2, r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d122      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d11b      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0202 	mvn.w	r2, #2
 8008c92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fad7 	bl	800925c <HAL_TIM_IC_CaptureCallback>
 8008cae:	e005      	b.n	8008cbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fac9 	bl	8009248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fada 	bl	8009270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d122      	bne.n	8008d16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d11b      	bne.n	8008d16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f06f 0204 	mvn.w	r2, #4
 8008ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 faad 	bl	800925c <HAL_TIM_IC_CaptureCallback>
 8008d02:	e005      	b.n	8008d10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa9f 	bl	8009248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fab0 	bl	8009270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d122      	bne.n	8008d6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d11b      	bne.n	8008d6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f06f 0208 	mvn.w	r2, #8
 8008d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2204      	movs	r2, #4
 8008d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	f003 0303 	and.w	r3, r3, #3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fa83 	bl	800925c <HAL_TIM_IC_CaptureCallback>
 8008d56:	e005      	b.n	8008d64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa75 	bl	8009248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa86 	bl	8009270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0310 	and.w	r3, r3, #16
 8008d74:	2b10      	cmp	r3, #16
 8008d76:	d122      	bne.n	8008dbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d11b      	bne.n	8008dbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f06f 0210 	mvn.w	r2, #16
 8008d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2208      	movs	r2, #8
 8008d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fa59 	bl	800925c <HAL_TIM_IC_CaptureCallback>
 8008daa:	e005      	b.n	8008db8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fa4b 	bl	8009248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa5c 	bl	8009270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d10e      	bne.n	8008dea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d107      	bne.n	8008dea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f06f 0201 	mvn.w	r2, #1
 8008de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7f7 ff73 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df4:	2b80      	cmp	r3, #128	; 0x80
 8008df6:	d10e      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e02:	2b80      	cmp	r3, #128	; 0x80
 8008e04:	d107      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fe97 	bl	8009b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e24:	d10e      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e30:	2b80      	cmp	r3, #128	; 0x80
 8008e32:	d107      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fe8a 	bl	8009b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4e:	2b40      	cmp	r3, #64	; 0x40
 8008e50:	d10e      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d107      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa0a 	bl	8009284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d10e      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d107      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0220 	mvn.w	r2, #32
 8008e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fe4a 	bl	8009b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e105      	b.n	80090ca <HAL_TIM_PWM_ConfigChannel+0x226>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b14      	cmp	r3, #20
 8008ed2:	f200 80f0 	bhi.w	80090b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	080090b7 	.word	0x080090b7
 8008ee4:	080090b7 	.word	0x080090b7
 8008ee8:	080090b7 	.word	0x080090b7
 8008eec:	08008f71 	.word	0x08008f71
 8008ef0:	080090b7 	.word	0x080090b7
 8008ef4:	080090b7 	.word	0x080090b7
 8008ef8:	080090b7 	.word	0x080090b7
 8008efc:	08008fb3 	.word	0x08008fb3
 8008f00:	080090b7 	.word	0x080090b7
 8008f04:	080090b7 	.word	0x080090b7
 8008f08:	080090b7 	.word	0x080090b7
 8008f0c:	08008ff3 	.word	0x08008ff3
 8008f10:	080090b7 	.word	0x080090b7
 8008f14:	080090b7 	.word	0x080090b7
 8008f18:	080090b7 	.word	0x080090b7
 8008f1c:	08009035 	.word	0x08009035
 8008f20:	080090b7 	.word	0x080090b7
 8008f24:	080090b7 	.word	0x080090b7
 8008f28:	080090b7 	.word	0x080090b7
 8008f2c:	08009075 	.word	0x08009075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fa4e 	bl	80093d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0208 	orr.w	r2, r2, #8
 8008f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0204 	bic.w	r2, r2, #4
 8008f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6999      	ldr	r1, [r3, #24]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	691a      	ldr	r2, [r3, #16]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	619a      	str	r2, [r3, #24]
      break;
 8008f6e:	e0a3      	b.n	80090b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 faa0 	bl	80094bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6999      	ldr	r1, [r3, #24]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	021a      	lsls	r2, r3, #8
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	619a      	str	r2, [r3, #24]
      break;
 8008fb0:	e082      	b.n	80090b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 faf7 	bl	80095ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0208 	orr.w	r2, r2, #8
 8008fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69da      	ldr	r2, [r3, #28]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0204 	bic.w	r2, r2, #4
 8008fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	69d9      	ldr	r1, [r3, #28]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	61da      	str	r2, [r3, #28]
      break;
 8008ff0:	e062      	b.n	80090b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fb4d 	bl	8009698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800900c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69da      	ldr	r2, [r3, #28]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800901c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69d9      	ldr	r1, [r3, #28]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	021a      	lsls	r2, r3, #8
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	61da      	str	r2, [r3, #28]
      break;
 8009032:	e041      	b.n	80090b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fb84 	bl	8009748 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0208 	orr.w	r2, r2, #8
 800904e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0204 	bic.w	r2, r2, #4
 800905e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	691a      	ldr	r2, [r3, #16]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009072:	e021      	b.n	80090b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68b9      	ldr	r1, [r7, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fbb6 	bl	80097ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800908e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800909e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	021a      	lsls	r2, r3, #8
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090b4:	e000      	b.n	80090b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80090b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop

080090d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <HAL_TIM_ConfigClockSource+0x18>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e0a6      	b.n	800923a <HAL_TIM_ConfigClockSource+0x166>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4b4f      	ldr	r3, [pc, #316]	; (8009244 <HAL_TIM_ConfigClockSource+0x170>)
 8009108:	4013      	ands	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009112:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d067      	beq.n	80091f4 <HAL_TIM_ConfigClockSource+0x120>
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	d80b      	bhi.n	8009140 <HAL_TIM_ConfigClockSource+0x6c>
 8009128:	2b10      	cmp	r3, #16
 800912a:	d073      	beq.n	8009214 <HAL_TIM_ConfigClockSource+0x140>
 800912c:	2b10      	cmp	r3, #16
 800912e:	d802      	bhi.n	8009136 <HAL_TIM_ConfigClockSource+0x62>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d06f      	beq.n	8009214 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009134:	e078      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009136:	2b20      	cmp	r3, #32
 8009138:	d06c      	beq.n	8009214 <HAL_TIM_ConfigClockSource+0x140>
 800913a:	2b30      	cmp	r3, #48	; 0x30
 800913c:	d06a      	beq.n	8009214 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800913e:	e073      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009140:	2b70      	cmp	r3, #112	; 0x70
 8009142:	d00d      	beq.n	8009160 <HAL_TIM_ConfigClockSource+0x8c>
 8009144:	2b70      	cmp	r3, #112	; 0x70
 8009146:	d804      	bhi.n	8009152 <HAL_TIM_ConfigClockSource+0x7e>
 8009148:	2b50      	cmp	r3, #80	; 0x50
 800914a:	d033      	beq.n	80091b4 <HAL_TIM_ConfigClockSource+0xe0>
 800914c:	2b60      	cmp	r3, #96	; 0x60
 800914e:	d041      	beq.n	80091d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009150:	e06a      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009156:	d066      	beq.n	8009226 <HAL_TIM_ConfigClockSource+0x152>
 8009158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915c:	d017      	beq.n	800918e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800915e:	e063      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	6899      	ldr	r1, [r3, #8]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f000 fc0a 	bl	8009988 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009182:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	609a      	str	r2, [r3, #8]
      break;
 800918c:	e04c      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6899      	ldr	r1, [r3, #8]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f000 fbf3 	bl	8009988 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091b0:	609a      	str	r2, [r3, #8]
      break;
 80091b2:	e039      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6859      	ldr	r1, [r3, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	461a      	mov	r2, r3
 80091c2:	f000 fb67 	bl	8009894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2150      	movs	r1, #80	; 0x50
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fbc0 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 80091d2:	e029      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	6859      	ldr	r1, [r3, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f000 fb86 	bl	80098f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2160      	movs	r1, #96	; 0x60
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fbb0 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 80091f2:	e019      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6818      	ldr	r0, [r3, #0]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	6859      	ldr	r1, [r3, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	461a      	mov	r2, r3
 8009202:	f000 fb47 	bl	8009894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2140      	movs	r1, #64	; 0x40
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fba0 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 8009212:	e009      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f000 fb97 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 8009224:	e000      	b.n	8009228 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	fffeff88 	.word	0xfffeff88

08009248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a40      	ldr	r2, [pc, #256]	; (80093ac <TIM_Base_SetConfig+0x114>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d013      	beq.n	80092d8 <TIM_Base_SetConfig+0x40>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b6:	d00f      	beq.n	80092d8 <TIM_Base_SetConfig+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a3d      	ldr	r2, [pc, #244]	; (80093b0 <TIM_Base_SetConfig+0x118>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00b      	beq.n	80092d8 <TIM_Base_SetConfig+0x40>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a3c      	ldr	r2, [pc, #240]	; (80093b4 <TIM_Base_SetConfig+0x11c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_Base_SetConfig+0x40>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a3b      	ldr	r2, [pc, #236]	; (80093b8 <TIM_Base_SetConfig+0x120>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_Base_SetConfig+0x40>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a3a      	ldr	r2, [pc, #232]	; (80093bc <TIM_Base_SetConfig+0x124>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d108      	bne.n	80092ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a2f      	ldr	r2, [pc, #188]	; (80093ac <TIM_Base_SetConfig+0x114>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d02b      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f8:	d027      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a2c      	ldr	r2, [pc, #176]	; (80093b0 <TIM_Base_SetConfig+0x118>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d023      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a2b      	ldr	r2, [pc, #172]	; (80093b4 <TIM_Base_SetConfig+0x11c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d01f      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a2a      	ldr	r2, [pc, #168]	; (80093b8 <TIM_Base_SetConfig+0x120>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d01b      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a29      	ldr	r2, [pc, #164]	; (80093bc <TIM_Base_SetConfig+0x124>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d017      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a28      	ldr	r2, [pc, #160]	; (80093c0 <TIM_Base_SetConfig+0x128>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a27      	ldr	r2, [pc, #156]	; (80093c4 <TIM_Base_SetConfig+0x12c>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d00f      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a26      	ldr	r2, [pc, #152]	; (80093c8 <TIM_Base_SetConfig+0x130>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00b      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a25      	ldr	r2, [pc, #148]	; (80093cc <TIM_Base_SetConfig+0x134>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d007      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a24      	ldr	r2, [pc, #144]	; (80093d0 <TIM_Base_SetConfig+0x138>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d003      	beq.n	800934a <TIM_Base_SetConfig+0xb2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a23      	ldr	r2, [pc, #140]	; (80093d4 <TIM_Base_SetConfig+0x13c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d108      	bne.n	800935c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a0a      	ldr	r2, [pc, #40]	; (80093ac <TIM_Base_SetConfig+0x114>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_Base_SetConfig+0xf8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a0c      	ldr	r2, [pc, #48]	; (80093bc <TIM_Base_SetConfig+0x124>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d103      	bne.n	8009398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	691a      	ldr	r2, [r3, #16]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	615a      	str	r2, [r3, #20]
}
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40010000 	.word	0x40010000
 80093b0:	40000400 	.word	0x40000400
 80093b4:	40000800 	.word	0x40000800
 80093b8:	40000c00 	.word	0x40000c00
 80093bc:	40010400 	.word	0x40010400
 80093c0:	40014000 	.word	0x40014000
 80093c4:	40014400 	.word	0x40014400
 80093c8:	40014800 	.word	0x40014800
 80093cc:	40001800 	.word	0x40001800
 80093d0:	40001c00 	.word	0x40001c00
 80093d4:	40002000 	.word	0x40002000

080093d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	f023 0201 	bic.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4b2b      	ldr	r3, [pc, #172]	; (80094b0 <TIM_OC1_SetConfig+0xd8>)
 8009404:	4013      	ands	r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f023 0302 	bic.w	r3, r3, #2
 8009420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	4313      	orrs	r3, r2
 800942a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <TIM_OC1_SetConfig+0xdc>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_OC1_SetConfig+0x64>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <TIM_OC1_SetConfig+0xe0>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d10c      	bne.n	8009456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f023 0308 	bic.w	r3, r3, #8
 8009442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f023 0304 	bic.w	r3, r3, #4
 8009454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a16      	ldr	r2, [pc, #88]	; (80094b4 <TIM_OC1_SetConfig+0xdc>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d003      	beq.n	8009466 <TIM_OC1_SetConfig+0x8e>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a15      	ldr	r2, [pc, #84]	; (80094b8 <TIM_OC1_SetConfig+0xe0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d111      	bne.n	800948a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800946c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	4313      	orrs	r3, r2
 800947e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	4313      	orrs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	621a      	str	r2, [r3, #32]
}
 80094a4:	bf00      	nop
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	fffeff8f 	.word	0xfffeff8f
 80094b4:	40010000 	.word	0x40010000
 80094b8:	40010400 	.word	0x40010400

080094bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	f023 0210 	bic.w	r2, r3, #16
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4b2e      	ldr	r3, [pc, #184]	; (80095a0 <TIM_OC2_SetConfig+0xe4>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f023 0320 	bic.w	r3, r3, #32
 8009506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	011b      	lsls	r3, r3, #4
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a23      	ldr	r2, [pc, #140]	; (80095a4 <TIM_OC2_SetConfig+0xe8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_OC2_SetConfig+0x68>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a22      	ldr	r2, [pc, #136]	; (80095a8 <TIM_OC2_SetConfig+0xec>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d10d      	bne.n	8009540 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800952a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800953e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a18      	ldr	r2, [pc, #96]	; (80095a4 <TIM_OC2_SetConfig+0xe8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_OC2_SetConfig+0x94>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a17      	ldr	r2, [pc, #92]	; (80095a8 <TIM_OC2_SetConfig+0xec>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d113      	bne.n	8009578 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800955e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	4313      	orrs	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	621a      	str	r2, [r3, #32]
}
 8009592:	bf00      	nop
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	feff8fff 	.word	0xfeff8fff
 80095a4:	40010000 	.word	0x40010000
 80095a8:	40010400 	.word	0x40010400

080095ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4b2d      	ldr	r3, [pc, #180]	; (800968c <TIM_OC3_SetConfig+0xe0>)
 80095d8:	4013      	ands	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	4313      	orrs	r3, r2
 8009600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a22      	ldr	r2, [pc, #136]	; (8009690 <TIM_OC3_SetConfig+0xe4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d003      	beq.n	8009612 <TIM_OC3_SetConfig+0x66>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a21      	ldr	r2, [pc, #132]	; (8009694 <TIM_OC3_SetConfig+0xe8>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d10d      	bne.n	800962e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	4313      	orrs	r3, r2
 8009624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800962c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a17      	ldr	r2, [pc, #92]	; (8009690 <TIM_OC3_SetConfig+0xe4>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC3_SetConfig+0x92>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a16      	ldr	r2, [pc, #88]	; (8009694 <TIM_OC3_SetConfig+0xe8>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d113      	bne.n	8009666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800964c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	011b      	lsls	r3, r3, #4
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	621a      	str	r2, [r3, #32]
}
 8009680:	bf00      	nop
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	fffeff8f 	.word	0xfffeff8f
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400

08009698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	4b1e      	ldr	r3, [pc, #120]	; (800973c <TIM_OC4_SetConfig+0xa4>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4313      	orrs	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	031b      	lsls	r3, r3, #12
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a13      	ldr	r2, [pc, #76]	; (8009740 <TIM_OC4_SetConfig+0xa8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d003      	beq.n	8009700 <TIM_OC4_SetConfig+0x68>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a12      	ldr	r2, [pc, #72]	; (8009744 <TIM_OC4_SetConfig+0xac>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d109      	bne.n	8009714 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	feff8fff 	.word	0xfeff8fff
 8009740:	40010000 	.word	0x40010000
 8009744:	40010400 	.word	0x40010400

08009748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4b1b      	ldr	r3, [pc, #108]	; (80097e0 <TIM_OC5_SetConfig+0x98>)
 8009774:	4013      	ands	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009788:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	041b      	lsls	r3, r3, #16
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a12      	ldr	r2, [pc, #72]	; (80097e4 <TIM_OC5_SetConfig+0x9c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_OC5_SetConfig+0x5e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a11      	ldr	r2, [pc, #68]	; (80097e8 <TIM_OC5_SetConfig+0xa0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d109      	bne.n	80097ba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	621a      	str	r2, [r3, #32]
}
 80097d4:	bf00      	nop
 80097d6:	371c      	adds	r7, #28
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	fffeff8f 	.word	0xfffeff8f
 80097e4:	40010000 	.word	0x40010000
 80097e8:	40010400 	.word	0x40010400

080097ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	4b1c      	ldr	r3, [pc, #112]	; (8009888 <TIM_OC6_SetConfig+0x9c>)
 8009818:	4013      	ands	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	021b      	lsls	r3, r3, #8
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	4313      	orrs	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800982e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	051b      	lsls	r3, r3, #20
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4313      	orrs	r3, r2
 800983a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a13      	ldr	r2, [pc, #76]	; (800988c <TIM_OC6_SetConfig+0xa0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d003      	beq.n	800984c <TIM_OC6_SetConfig+0x60>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a12      	ldr	r2, [pc, #72]	; (8009890 <TIM_OC6_SetConfig+0xa4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d109      	bne.n	8009860 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009852:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	029b      	lsls	r3, r3, #10
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	feff8fff 	.word	0xfeff8fff
 800988c:	40010000 	.word	0x40010000
 8009890:	40010400 	.word	0x40010400

08009894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f023 0201 	bic.w	r2, r3, #1
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f023 030a 	bic.w	r3, r3, #10
 80098d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b087      	sub	sp, #28
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	f023 0210 	bic.w	r2, r3, #16
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800991c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	031b      	lsls	r3, r3, #12
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4313      	orrs	r3, r2
 8009926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800992e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	621a      	str	r2, [r3, #32]
}
 8009946:	bf00      	nop
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009952:	b480      	push	{r7}
 8009954:	b085      	sub	sp, #20
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	f043 0307 	orr.w	r3, r3, #7
 8009974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	609a      	str	r2, [r3, #8]
}
 800997c:	bf00      	nop
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	021a      	lsls	r2, r3, #8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	609a      	str	r2, [r3, #8]
}
 80099bc:	bf00      	nop
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f003 031f 	and.w	r3, r3, #31
 80099da:	2201      	movs	r2, #1
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6a1a      	ldr	r2, [r3, #32]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	43db      	mvns	r3, r3
 80099ea:	401a      	ands	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a1a      	ldr	r2, [r3, #32]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009a00:	431a      	orrs	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	621a      	str	r2, [r3, #32]
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e06d      	b.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a30      	ldr	r2, [pc, #192]	; (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d004      	beq.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a2f      	ldr	r2, [pc, #188]	; (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d108      	bne.n	8009a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a20      	ldr	r2, [pc, #128]	; (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d022      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9e:	d01d      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a1d      	ldr	r2, [pc, #116]	; (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d018      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1c      	ldr	r2, [pc, #112]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d013      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a1a      	ldr	r2, [pc, #104]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00e      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a15      	ldr	r2, [pc, #84]	; (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d009      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a16      	ldr	r2, [pc, #88]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d004      	beq.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a15      	ldr	r2, [pc, #84]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d10c      	bne.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	40010000 	.word	0x40010000
 8009b18:	40010400 	.word	0x40010400
 8009b1c:	40000400 	.word	0x40000400
 8009b20:	40000800 	.word	0x40000800
 8009b24:	40000c00 	.word	0x40000c00
 8009b28:	40014000 	.word	0x40014000
 8009b2c:	40001800 	.word	0x40001800

08009b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e040      	b.n	8009c00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fc fa20 	bl	8005fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2224      	movs	r2, #36	; 0x24
 8009b98:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0201 	bic.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f8be 	bl	8009d2c <UART_SetConfig>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e022      	b.n	8009c00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fb5c 	bl	800a280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689a      	ldr	r2, [r3, #8]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0201 	orr.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fbe3 	bl	800a3c4 <UART_CheckIdleState>
 8009bfe:	4603      	mov	r3, r0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08a      	sub	sp, #40	; 0x28
 8009c0c:	af02      	add	r7, sp, #8
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d17f      	bne.n	8009d20 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_UART_Transmit+0x24>
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e078      	b.n	8009d22 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_UART_Transmit+0x36>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e071      	b.n	8009d22 <HAL_UART_Transmit+0x11a>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2221      	movs	r2, #33	; 0x21
 8009c50:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009c52:	f7fc fbd3 	bl	80063fc <HAL_GetTick>
 8009c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	88fa      	ldrh	r2, [r7, #6]
 8009c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c70:	d108      	bne.n	8009c84 <HAL_UART_Transmit+0x7c>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d104      	bne.n	8009c84 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	e003      	b.n	8009c8c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009c94:	e02c      	b.n	8009cf0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2180      	movs	r1, #128	; 0x80
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fbd4 	bl	800a44e <UART_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e038      	b.n	8009d22 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	3302      	adds	r3, #2
 8009cca:	61bb      	str	r3, [r7, #24]
 8009ccc:	e007      	b.n	8009cde <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1cc      	bne.n	8009c96 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2200      	movs	r2, #0
 8009d04:	2140      	movs	r1, #64	; 0x40
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fba1 	bl	800a44e <UART_WaitOnFlagUntilTimeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e005      	b.n	8009d22 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e000      	b.n	8009d22 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009d20:	2302      	movs	r3, #2
  }
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	431a      	orrs	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4bb1      	ldr	r3, [pc, #708]	; (800a020 <UART_SetConfig+0x2f4>)
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	6939      	ldr	r1, [r7, #16]
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68da      	ldr	r2, [r3, #12]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a1b      	ldr	r3, [r3, #32]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a9f      	ldr	r2, [pc, #636]	; (800a024 <UART_SetConfig+0x2f8>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d121      	bne.n	8009df0 <UART_SetConfig+0xc4>
 8009dac:	4b9e      	ldr	r3, [pc, #632]	; (800a028 <UART_SetConfig+0x2fc>)
 8009dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d816      	bhi.n	8009de8 <UART_SetConfig+0xbc>
 8009dba:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <UART_SetConfig+0x94>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009dd1 	.word	0x08009dd1
 8009dc4:	08009ddd 	.word	0x08009ddd
 8009dc8:	08009dd7 	.word	0x08009dd7
 8009dcc:	08009de3 	.word	0x08009de3
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	77fb      	strb	r3, [r7, #31]
 8009dd4:	e151      	b.n	800a07a <UART_SetConfig+0x34e>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	77fb      	strb	r3, [r7, #31]
 8009dda:	e14e      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	77fb      	strb	r3, [r7, #31]
 8009de0:	e14b      	b.n	800a07a <UART_SetConfig+0x34e>
 8009de2:	2308      	movs	r3, #8
 8009de4:	77fb      	strb	r3, [r7, #31]
 8009de6:	e148      	b.n	800a07a <UART_SetConfig+0x34e>
 8009de8:	2310      	movs	r3, #16
 8009dea:	77fb      	strb	r3, [r7, #31]
 8009dec:	bf00      	nop
 8009dee:	e144      	b.n	800a07a <UART_SetConfig+0x34e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a8d      	ldr	r2, [pc, #564]	; (800a02c <UART_SetConfig+0x300>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d134      	bne.n	8009e64 <UART_SetConfig+0x138>
 8009dfa:	4b8b      	ldr	r3, [pc, #556]	; (800a028 <UART_SetConfig+0x2fc>)
 8009dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e00:	f003 030c 	and.w	r3, r3, #12
 8009e04:	2b0c      	cmp	r3, #12
 8009e06:	d829      	bhi.n	8009e5c <UART_SetConfig+0x130>
 8009e08:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <UART_SetConfig+0xe4>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e45 	.word	0x08009e45
 8009e14:	08009e5d 	.word	0x08009e5d
 8009e18:	08009e5d 	.word	0x08009e5d
 8009e1c:	08009e5d 	.word	0x08009e5d
 8009e20:	08009e51 	.word	0x08009e51
 8009e24:	08009e5d 	.word	0x08009e5d
 8009e28:	08009e5d 	.word	0x08009e5d
 8009e2c:	08009e5d 	.word	0x08009e5d
 8009e30:	08009e4b 	.word	0x08009e4b
 8009e34:	08009e5d 	.word	0x08009e5d
 8009e38:	08009e5d 	.word	0x08009e5d
 8009e3c:	08009e5d 	.word	0x08009e5d
 8009e40:	08009e57 	.word	0x08009e57
 8009e44:	2300      	movs	r3, #0
 8009e46:	77fb      	strb	r3, [r7, #31]
 8009e48:	e117      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	77fb      	strb	r3, [r7, #31]
 8009e4e:	e114      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e50:	2304      	movs	r3, #4
 8009e52:	77fb      	strb	r3, [r7, #31]
 8009e54:	e111      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e56:	2308      	movs	r3, #8
 8009e58:	77fb      	strb	r3, [r7, #31]
 8009e5a:	e10e      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	77fb      	strb	r3, [r7, #31]
 8009e60:	bf00      	nop
 8009e62:	e10a      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a71      	ldr	r2, [pc, #452]	; (800a030 <UART_SetConfig+0x304>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d120      	bne.n	8009eb0 <UART_SetConfig+0x184>
 8009e6e:	4b6e      	ldr	r3, [pc, #440]	; (800a028 <UART_SetConfig+0x2fc>)
 8009e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e78:	2b10      	cmp	r3, #16
 8009e7a:	d00f      	beq.n	8009e9c <UART_SetConfig+0x170>
 8009e7c:	2b10      	cmp	r3, #16
 8009e7e:	d802      	bhi.n	8009e86 <UART_SetConfig+0x15a>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d005      	beq.n	8009e90 <UART_SetConfig+0x164>
 8009e84:	e010      	b.n	8009ea8 <UART_SetConfig+0x17c>
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	d005      	beq.n	8009e96 <UART_SetConfig+0x16a>
 8009e8a:	2b30      	cmp	r3, #48	; 0x30
 8009e8c:	d009      	beq.n	8009ea2 <UART_SetConfig+0x176>
 8009e8e:	e00b      	b.n	8009ea8 <UART_SetConfig+0x17c>
 8009e90:	2300      	movs	r3, #0
 8009e92:	77fb      	strb	r3, [r7, #31]
 8009e94:	e0f1      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e96:	2302      	movs	r3, #2
 8009e98:	77fb      	strb	r3, [r7, #31]
 8009e9a:	e0ee      	b.n	800a07a <UART_SetConfig+0x34e>
 8009e9c:	2304      	movs	r3, #4
 8009e9e:	77fb      	strb	r3, [r7, #31]
 8009ea0:	e0eb      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ea2:	2308      	movs	r3, #8
 8009ea4:	77fb      	strb	r3, [r7, #31]
 8009ea6:	e0e8      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	77fb      	strb	r3, [r7, #31]
 8009eac:	bf00      	nop
 8009eae:	e0e4      	b.n	800a07a <UART_SetConfig+0x34e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a5f      	ldr	r2, [pc, #380]	; (800a034 <UART_SetConfig+0x308>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d120      	bne.n	8009efc <UART_SetConfig+0x1d0>
 8009eba:	4b5b      	ldr	r3, [pc, #364]	; (800a028 <UART_SetConfig+0x2fc>)
 8009ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ec4:	2b40      	cmp	r3, #64	; 0x40
 8009ec6:	d00f      	beq.n	8009ee8 <UART_SetConfig+0x1bc>
 8009ec8:	2b40      	cmp	r3, #64	; 0x40
 8009eca:	d802      	bhi.n	8009ed2 <UART_SetConfig+0x1a6>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <UART_SetConfig+0x1b0>
 8009ed0:	e010      	b.n	8009ef4 <UART_SetConfig+0x1c8>
 8009ed2:	2b80      	cmp	r3, #128	; 0x80
 8009ed4:	d005      	beq.n	8009ee2 <UART_SetConfig+0x1b6>
 8009ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ed8:	d009      	beq.n	8009eee <UART_SetConfig+0x1c2>
 8009eda:	e00b      	b.n	8009ef4 <UART_SetConfig+0x1c8>
 8009edc:	2300      	movs	r3, #0
 8009ede:	77fb      	strb	r3, [r7, #31]
 8009ee0:	e0cb      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	77fb      	strb	r3, [r7, #31]
 8009ee6:	e0c8      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ee8:	2304      	movs	r3, #4
 8009eea:	77fb      	strb	r3, [r7, #31]
 8009eec:	e0c5      	b.n	800a07a <UART_SetConfig+0x34e>
 8009eee:	2308      	movs	r3, #8
 8009ef0:	77fb      	strb	r3, [r7, #31]
 8009ef2:	e0c2      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	77fb      	strb	r3, [r7, #31]
 8009ef8:	bf00      	nop
 8009efa:	e0be      	b.n	800a07a <UART_SetConfig+0x34e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a4d      	ldr	r2, [pc, #308]	; (800a038 <UART_SetConfig+0x30c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d124      	bne.n	8009f50 <UART_SetConfig+0x224>
 8009f06:	4b48      	ldr	r3, [pc, #288]	; (800a028 <UART_SetConfig+0x2fc>)
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f14:	d012      	beq.n	8009f3c <UART_SetConfig+0x210>
 8009f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1a:	d802      	bhi.n	8009f22 <UART_SetConfig+0x1f6>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d007      	beq.n	8009f30 <UART_SetConfig+0x204>
 8009f20:	e012      	b.n	8009f48 <UART_SetConfig+0x21c>
 8009f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f26:	d006      	beq.n	8009f36 <UART_SetConfig+0x20a>
 8009f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f2c:	d009      	beq.n	8009f42 <UART_SetConfig+0x216>
 8009f2e:	e00b      	b.n	8009f48 <UART_SetConfig+0x21c>
 8009f30:	2300      	movs	r3, #0
 8009f32:	77fb      	strb	r3, [r7, #31]
 8009f34:	e0a1      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f36:	2302      	movs	r3, #2
 8009f38:	77fb      	strb	r3, [r7, #31]
 8009f3a:	e09e      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	77fb      	strb	r3, [r7, #31]
 8009f40:	e09b      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f42:	2308      	movs	r3, #8
 8009f44:	77fb      	strb	r3, [r7, #31]
 8009f46:	e098      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f48:	2310      	movs	r3, #16
 8009f4a:	77fb      	strb	r3, [r7, #31]
 8009f4c:	bf00      	nop
 8009f4e:	e094      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a39      	ldr	r2, [pc, #228]	; (800a03c <UART_SetConfig+0x310>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d124      	bne.n	8009fa4 <UART_SetConfig+0x278>
 8009f5a:	4b33      	ldr	r3, [pc, #204]	; (800a028 <UART_SetConfig+0x2fc>)
 8009f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f68:	d012      	beq.n	8009f90 <UART_SetConfig+0x264>
 8009f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f6e:	d802      	bhi.n	8009f76 <UART_SetConfig+0x24a>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <UART_SetConfig+0x258>
 8009f74:	e012      	b.n	8009f9c <UART_SetConfig+0x270>
 8009f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f7a:	d006      	beq.n	8009f8a <UART_SetConfig+0x25e>
 8009f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f80:	d009      	beq.n	8009f96 <UART_SetConfig+0x26a>
 8009f82:	e00b      	b.n	8009f9c <UART_SetConfig+0x270>
 8009f84:	2301      	movs	r3, #1
 8009f86:	77fb      	strb	r3, [r7, #31]
 8009f88:	e077      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	77fb      	strb	r3, [r7, #31]
 8009f8e:	e074      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f90:	2304      	movs	r3, #4
 8009f92:	77fb      	strb	r3, [r7, #31]
 8009f94:	e071      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f96:	2308      	movs	r3, #8
 8009f98:	77fb      	strb	r3, [r7, #31]
 8009f9a:	e06e      	b.n	800a07a <UART_SetConfig+0x34e>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	77fb      	strb	r3, [r7, #31]
 8009fa0:	bf00      	nop
 8009fa2:	e06a      	b.n	800a07a <UART_SetConfig+0x34e>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a25      	ldr	r2, [pc, #148]	; (800a040 <UART_SetConfig+0x314>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d124      	bne.n	8009ff8 <UART_SetConfig+0x2cc>
 8009fae:	4b1e      	ldr	r3, [pc, #120]	; (800a028 <UART_SetConfig+0x2fc>)
 8009fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fbc:	d012      	beq.n	8009fe4 <UART_SetConfig+0x2b8>
 8009fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc2:	d802      	bhi.n	8009fca <UART_SetConfig+0x29e>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d007      	beq.n	8009fd8 <UART_SetConfig+0x2ac>
 8009fc8:	e012      	b.n	8009ff0 <UART_SetConfig+0x2c4>
 8009fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fce:	d006      	beq.n	8009fde <UART_SetConfig+0x2b2>
 8009fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fd4:	d009      	beq.n	8009fea <UART_SetConfig+0x2be>
 8009fd6:	e00b      	b.n	8009ff0 <UART_SetConfig+0x2c4>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e04d      	b.n	800a07a <UART_SetConfig+0x34e>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	77fb      	strb	r3, [r7, #31]
 8009fe2:	e04a      	b.n	800a07a <UART_SetConfig+0x34e>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	77fb      	strb	r3, [r7, #31]
 8009fe8:	e047      	b.n	800a07a <UART_SetConfig+0x34e>
 8009fea:	2308      	movs	r3, #8
 8009fec:	77fb      	strb	r3, [r7, #31]
 8009fee:	e044      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	77fb      	strb	r3, [r7, #31]
 8009ff4:	bf00      	nop
 8009ff6:	e040      	b.n	800a07a <UART_SetConfig+0x34e>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a11      	ldr	r2, [pc, #68]	; (800a044 <UART_SetConfig+0x318>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d139      	bne.n	800a076 <UART_SetConfig+0x34a>
 800a002:	4b09      	ldr	r3, [pc, #36]	; (800a028 <UART_SetConfig+0x2fc>)
 800a004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a00c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a010:	d027      	beq.n	800a062 <UART_SetConfig+0x336>
 800a012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a016:	d817      	bhi.n	800a048 <UART_SetConfig+0x31c>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01c      	beq.n	800a056 <UART_SetConfig+0x32a>
 800a01c:	e027      	b.n	800a06e <UART_SetConfig+0x342>
 800a01e:	bf00      	nop
 800a020:	efff69f3 	.word	0xefff69f3
 800a024:	40011000 	.word	0x40011000
 800a028:	40023800 	.word	0x40023800
 800a02c:	40004400 	.word	0x40004400
 800a030:	40004800 	.word	0x40004800
 800a034:	40004c00 	.word	0x40004c00
 800a038:	40005000 	.word	0x40005000
 800a03c:	40011400 	.word	0x40011400
 800a040:	40007800 	.word	0x40007800
 800a044:	40007c00 	.word	0x40007c00
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a04c:	d006      	beq.n	800a05c <UART_SetConfig+0x330>
 800a04e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a052:	d009      	beq.n	800a068 <UART_SetConfig+0x33c>
 800a054:	e00b      	b.n	800a06e <UART_SetConfig+0x342>
 800a056:	2300      	movs	r3, #0
 800a058:	77fb      	strb	r3, [r7, #31]
 800a05a:	e00e      	b.n	800a07a <UART_SetConfig+0x34e>
 800a05c:	2302      	movs	r3, #2
 800a05e:	77fb      	strb	r3, [r7, #31]
 800a060:	e00b      	b.n	800a07a <UART_SetConfig+0x34e>
 800a062:	2304      	movs	r3, #4
 800a064:	77fb      	strb	r3, [r7, #31]
 800a066:	e008      	b.n	800a07a <UART_SetConfig+0x34e>
 800a068:	2308      	movs	r3, #8
 800a06a:	77fb      	strb	r3, [r7, #31]
 800a06c:	e005      	b.n	800a07a <UART_SetConfig+0x34e>
 800a06e:	2310      	movs	r3, #16
 800a070:	77fb      	strb	r3, [r7, #31]
 800a072:	bf00      	nop
 800a074:	e001      	b.n	800a07a <UART_SetConfig+0x34e>
 800a076:	2310      	movs	r3, #16
 800a078:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a082:	d17f      	bne.n	800a184 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a084:	7ffb      	ldrb	r3, [r7, #31]
 800a086:	2b08      	cmp	r3, #8
 800a088:	d85c      	bhi.n	800a144 <UART_SetConfig+0x418>
 800a08a:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <UART_SetConfig+0x364>)
 800a08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a090:	0800a0b5 	.word	0x0800a0b5
 800a094:	0800a0d5 	.word	0x0800a0d5
 800a098:	0800a0f5 	.word	0x0800a0f5
 800a09c:	0800a145 	.word	0x0800a145
 800a0a0:	0800a10d 	.word	0x0800a10d
 800a0a4:	0800a145 	.word	0x0800a145
 800a0a8:	0800a145 	.word	0x0800a145
 800a0ac:	0800a145 	.word	0x0800a145
 800a0b0:	0800a12d 	.word	0x0800a12d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0b4:	f7fd fff0 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 800a0b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	005a      	lsls	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	085b      	lsrs	r3, r3, #1
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	61bb      	str	r3, [r7, #24]
        break;
 800a0d2:	e03a      	b.n	800a14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d4:	f7fd fff4 	bl	80080c0 <HAL_RCC_GetPCLK2Freq>
 800a0d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	005a      	lsls	r2, r3, #1
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	085b      	lsrs	r3, r3, #1
 800a0e4:	441a      	add	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	61bb      	str	r3, [r7, #24]
        break;
 800a0f2:	e02a      	b.n	800a14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	085a      	lsrs	r2, r3, #1
 800a0fa:	4b5f      	ldr	r3, [pc, #380]	; (800a278 <UART_SetConfig+0x54c>)
 800a0fc:	4413      	add	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6852      	ldr	r2, [r2, #4]
 800a102:	fbb3 f3f2 	udiv	r3, r3, r2
 800a106:	b29b      	uxth	r3, r3
 800a108:	61bb      	str	r3, [r7, #24]
        break;
 800a10a:	e01e      	b.n	800a14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a10c:	f7fd fee0 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 800a110:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	005a      	lsls	r2, r3, #1
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	085b      	lsrs	r3, r3, #1
 800a11c:	441a      	add	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	fbb2 f3f3 	udiv	r3, r2, r3
 800a126:	b29b      	uxth	r3, r3
 800a128:	61bb      	str	r3, [r7, #24]
        break;
 800a12a:	e00e      	b.n	800a14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13e:	b29b      	uxth	r3, r3
 800a140:	61bb      	str	r3, [r7, #24]
        break;
 800a142:	e002      	b.n	800a14a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	75fb      	strb	r3, [r7, #23]
        break;
 800a148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b0f      	cmp	r3, #15
 800a14e:	d916      	bls.n	800a17e <UART_SetConfig+0x452>
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a156:	d212      	bcs.n	800a17e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	f023 030f 	bic.w	r3, r3, #15
 800a160:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	085b      	lsrs	r3, r3, #1
 800a166:	b29b      	uxth	r3, r3
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	897b      	ldrh	r3, [r7, #10]
 800a170:	4313      	orrs	r3, r2
 800a172:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	897a      	ldrh	r2, [r7, #10]
 800a17a:	60da      	str	r2, [r3, #12]
 800a17c:	e070      	b.n	800a260 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	75fb      	strb	r3, [r7, #23]
 800a182:	e06d      	b.n	800a260 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a184:	7ffb      	ldrb	r3, [r7, #31]
 800a186:	2b08      	cmp	r3, #8
 800a188:	d859      	bhi.n	800a23e <UART_SetConfig+0x512>
 800a18a:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <UART_SetConfig+0x464>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1b5 	.word	0x0800a1b5
 800a194:	0800a1d3 	.word	0x0800a1d3
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a23f 	.word	0x0800a23f
 800a1a0:	0800a209 	.word	0x0800a209
 800a1a4:	0800a23f 	.word	0x0800a23f
 800a1a8:	0800a23f 	.word	0x0800a23f
 800a1ac:	0800a23f 	.word	0x0800a23f
 800a1b0:	0800a227 	.word	0x0800a227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1b4:	f7fd ff70 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 800a1b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	085a      	lsrs	r2, r3, #1
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	61bb      	str	r3, [r7, #24]
        break;
 800a1d0:	e038      	b.n	800a244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1d2:	f7fd ff75 	bl	80080c0 <HAL_RCC_GetPCLK2Freq>
 800a1d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	085a      	lsrs	r2, r3, #1
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	441a      	add	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	61bb      	str	r3, [r7, #24]
        break;
 800a1ee:	e029      	b.n	800a244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	085a      	lsrs	r2, r3, #1
 800a1f6:	4b21      	ldr	r3, [pc, #132]	; (800a27c <UART_SetConfig+0x550>)
 800a1f8:	4413      	add	r3, r2
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6852      	ldr	r2, [r2, #4]
 800a1fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	61bb      	str	r3, [r7, #24]
        break;
 800a206:	e01d      	b.n	800a244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a208:	f7fd fe62 	bl	8007ed0 <HAL_RCC_GetSysClockFreq>
 800a20c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	085a      	lsrs	r2, r3, #1
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	441a      	add	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a220:	b29b      	uxth	r3, r3
 800a222:	61bb      	str	r3, [r7, #24]
        break;
 800a224:	e00e      	b.n	800a244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	085b      	lsrs	r3, r3, #1
 800a22c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	fbb2 f3f3 	udiv	r3, r2, r3
 800a238:	b29b      	uxth	r3, r3
 800a23a:	61bb      	str	r3, [r7, #24]
        break;
 800a23c:	e002      	b.n	800a244 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	75fb      	strb	r3, [r7, #23]
        break;
 800a242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b0f      	cmp	r3, #15
 800a248:	d908      	bls.n	800a25c <UART_SetConfig+0x530>
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a250:	d204      	bcs.n	800a25c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	60da      	str	r2, [r3, #12]
 800a25a:	e001      	b.n	800a260 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3720      	adds	r7, #32
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	01e84800 	.word	0x01e84800
 800a27c:	00f42400 	.word	0x00f42400

0800a280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00a      	beq.n	800a2aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00a      	beq.n	800a2cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00a      	beq.n	800a2ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	f003 0308 	and.w	r3, r3, #8
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	f003 0310 	and.w	r3, r3, #16
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01a      	beq.n	800a396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a37e:	d10a      	bne.n	800a396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	605a      	str	r2, [r3, #4]
  }
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a3d2:	f7fc f813 	bl	80063fc <HAL_GetTick>
 800a3d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0308 	and.w	r3, r3, #8
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	d10e      	bne.n	800a404 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f82a 	bl	800a44e <UART_WaitOnFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e020      	b.n	800a446 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d10e      	bne.n	800a430 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f814 	bl	800a44e <UART_WaitOnFlagUntilTimeout>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e00a      	b.n	800a446 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2220      	movs	r2, #32
 800a43a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	603b      	str	r3, [r7, #0]
 800a45a:	4613      	mov	r3, r2
 800a45c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a45e:	e05d      	b.n	800a51c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d059      	beq.n	800a51c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a468:	f7fb ffc8 	bl	80063fc <HAL_GetTick>
 800a46c:	4602      	mov	r2, r0
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	429a      	cmp	r2, r3
 800a476:	d302      	bcc.n	800a47e <UART_WaitOnFlagUntilTimeout+0x30>
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d11b      	bne.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a48c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e042      	b.n	800a53c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d02b      	beq.n	800a51c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d2:	d123      	bne.n	800a51c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4dc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0201 	bic.w	r2, r2, #1
 800a4fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2220      	movs	r2, #32
 800a502:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2220      	movs	r2, #32
 800a508:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2220      	movs	r2, #32
 800a50e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e00f      	b.n	800a53c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	69da      	ldr	r2, [r3, #28]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	4013      	ands	r3, r2
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	429a      	cmp	r2, r3
 800a52a:	bf0c      	ite	eq
 800a52c:	2301      	moveq	r3, #1
 800a52e:	2300      	movne	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	461a      	mov	r2, r3
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	429a      	cmp	r2, r3
 800a538:	d092      	beq.n	800a460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a544:	b084      	sub	sp, #16
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	f107 001c 	add.w	r0, r7, #28
 800a552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d120      	bne.n	800a59e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <USB_CoreInit+0xac>)
 800a56e:	4013      	ands	r3, r2
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d105      	bne.n	800a592 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa52 	bl	800aa3c <USB_CoreReset>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]
 800a59c:	e010      	b.n	800a5c0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa46 	bl	800aa3c <USB_CoreReset>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d10b      	bne.n	800a5de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f043 0206 	orr.w	r2, r3, #6
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f043 0220 	orr.w	r2, r3, #32
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5ea:	b004      	add	sp, #16
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	ffbdffbf 	.word	0xffbdffbf

0800a5f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f023 0201 	bic.w	r2, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d106      	bne.n	800a642 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60da      	str	r2, [r3, #12]
 800a640:	e00b      	b.n	800a65a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d106      	bne.n	800a656 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	e001      	b.n	800a65a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e003      	b.n	800a662 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a65a:	2032      	movs	r0, #50	; 0x32
 800a65c:	f7fb feda 	bl	8006414 <HAL_Delay>

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a66c:	b084      	sub	sp, #16
 800a66e:	b580      	push	{r7, lr}
 800a670:	b086      	sub	sp, #24
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a67a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a686:	2300      	movs	r3, #0
 800a688:	613b      	str	r3, [r7, #16]
 800a68a:	e009      	b.n	800a6a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	3340      	adds	r3, #64	; 0x40
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	3301      	adds	r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	2b0e      	cmp	r3, #14
 800a6a4:	d9f2      	bls.n	800a68c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d11c      	bne.n	800a6e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ba:	f043 0302 	orr.w	r3, r3, #2
 800a6be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	e005      	b.n	800a6f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a704:	4619      	mov	r1, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70c:	461a      	mov	r2, r3
 800a70e:	680b      	ldr	r3, [r1, #0]
 800a710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	2b01      	cmp	r3, #1
 800a716:	d10c      	bne.n	800a732 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f959 	bl	800a9d8 <USB_SetDevSpeed>
 800a726:	e018      	b.n	800a75a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a728:	2101      	movs	r1, #1
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f954 	bl	800a9d8 <USB_SetDevSpeed>
 800a730:	e013      	b.n	800a75a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	2b03      	cmp	r3, #3
 800a736:	d10c      	bne.n	800a752 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d104      	bne.n	800a748 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a73e:	2100      	movs	r1, #0
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f949 	bl	800a9d8 <USB_SetDevSpeed>
 800a746:	e008      	b.n	800a75a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a748:	2101      	movs	r1, #1
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f944 	bl	800a9d8 <USB_SetDevSpeed>
 800a750:	e003      	b.n	800a75a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a752:	2103      	movs	r1, #3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f93f 	bl	800a9d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a75a:	2110      	movs	r1, #16
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f8f3 	bl	800a948 <USB_FlushTxFifo>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f911 	bl	800a994 <USB_FlushRxFifo>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a782:	461a      	mov	r2, r3
 800a784:	2300      	movs	r3, #0
 800a786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78e:	461a      	mov	r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79a:	461a      	mov	r2, r3
 800a79c:	2300      	movs	r3, #0
 800a79e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	e043      	b.n	800a82e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7bc:	d118      	bne.n	800a7f0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e013      	b.n	800a802 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	e008      	b.n	800a802 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	2300      	movs	r3, #0
 800a800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80e:	461a      	mov	r2, r3
 800a810:	2300      	movs	r3, #0
 800a812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a820:	461a      	mov	r2, r3
 800a822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	3301      	adds	r3, #1
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	429a      	cmp	r2, r3
 800a834:	d3b7      	bcc.n	800a7a6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
 800a83a:	e043      	b.n	800a8c4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a84e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a852:	d118      	bne.n	800a886 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a866:	461a      	mov	r2, r3
 800a868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	e013      	b.n	800a898 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a87c:	461a      	mov	r2, r3
 800a87e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	e008      	b.n	800a898 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a892:	461a      	mov	r2, r3
 800a894:	2300      	movs	r3, #0
 800a896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d3b7      	bcc.n	800a83c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a8ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	f043 0210 	orr.w	r2, r3, #16
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	4b0e      	ldr	r3, [pc, #56]	; (800a940 <USB_DevInit+0x2d4>)
 800a906:	4313      	orrs	r3, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f043 0208 	orr.w	r2, r3, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d105      	bne.n	800a930 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699a      	ldr	r2, [r3, #24]
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <USB_DevInit+0x2d8>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a93c:	b004      	add	sp, #16
 800a93e:	4770      	bx	lr
 800a940:	803c3800 	.word	0x803c3800
 800a944:	40000004 	.word	0x40000004

0800a948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	019b      	lsls	r3, r3, #6
 800a95a:	f043 0220 	orr.w	r2, r3, #32
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4a09      	ldr	r2, [pc, #36]	; (800a990 <USB_FlushTxFifo+0x48>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d901      	bls.n	800a974 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e006      	b.n	800a982 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d0f0      	beq.n	800a962 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	00030d40 	.word	0x00030d40

0800a994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2210      	movs	r2, #16
 800a9a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <USB_FlushRxFifo+0x40>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d901      	bls.n	800a9b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e006      	b.n	800a9c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f003 0310 	and.w	r3, r3, #16
 800a9c0:	2b10      	cmp	r3, #16
 800a9c2:	d0f0      	beq.n	800a9a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	00030d40 	.word	0x00030d40

0800a9d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa24:	f043 0302 	orr.w	r3, r3, #2
 800aa28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800aa2a:	2003      	movs	r0, #3
 800aa2c:	f7fb fcf2 	bl	8006414 <HAL_Delay>

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4a13      	ldr	r2, [pc, #76]	; (800aaa0 <USB_CoreReset+0x64>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d901      	bls.n	800aa5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e01b      	b.n	800aa92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	daf2      	bge.n	800aa48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	f043 0201 	orr.w	r2, r3, #1
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3301      	adds	r3, #1
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <USB_CoreReset+0x64>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d901      	bls.n	800aa84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e006      	b.n	800aa92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d0f0      	beq.n	800aa72 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	00030d40 	.word	0x00030d40

0800aaa4 <__errno>:
 800aaa4:	4b01      	ldr	r3, [pc, #4]	; (800aaac <__errno+0x8>)
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000028 	.word	0x20000028

0800aab0 <__libc_init_array>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	4e0d      	ldr	r6, [pc, #52]	; (800aae8 <__libc_init_array+0x38>)
 800aab4:	4c0d      	ldr	r4, [pc, #52]	; (800aaec <__libc_init_array+0x3c>)
 800aab6:	1ba4      	subs	r4, r4, r6
 800aab8:	10a4      	asrs	r4, r4, #2
 800aaba:	2500      	movs	r5, #0
 800aabc:	42a5      	cmp	r5, r4
 800aabe:	d109      	bne.n	800aad4 <__libc_init_array+0x24>
 800aac0:	4e0b      	ldr	r6, [pc, #44]	; (800aaf0 <__libc_init_array+0x40>)
 800aac2:	4c0c      	ldr	r4, [pc, #48]	; (800aaf4 <__libc_init_array+0x44>)
 800aac4:	f003 f942 	bl	800dd4c <_init>
 800aac8:	1ba4      	subs	r4, r4, r6
 800aaca:	10a4      	asrs	r4, r4, #2
 800aacc:	2500      	movs	r5, #0
 800aace:	42a5      	cmp	r5, r4
 800aad0:	d105      	bne.n	800aade <__libc_init_array+0x2e>
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aad8:	4798      	blx	r3
 800aada:	3501      	adds	r5, #1
 800aadc:	e7ee      	b.n	800aabc <__libc_init_array+0xc>
 800aade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aae2:	4798      	blx	r3
 800aae4:	3501      	adds	r5, #1
 800aae6:	e7f2      	b.n	800aace <__libc_init_array+0x1e>
 800aae8:	0800e470 	.word	0x0800e470
 800aaec:	0800e470 	.word	0x0800e470
 800aaf0:	0800e470 	.word	0x0800e470
 800aaf4:	0800e474 	.word	0x0800e474

0800aaf8 <memcpy>:
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	1e43      	subs	r3, r0, #1
 800aafc:	440a      	add	r2, r1
 800aafe:	4291      	cmp	r1, r2
 800ab00:	d100      	bne.n	800ab04 <memcpy+0xc>
 800ab02:	bd10      	pop	{r4, pc}
 800ab04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab0c:	e7f7      	b.n	800aafe <memcpy+0x6>

0800ab0e <memset>:
 800ab0e:	4402      	add	r2, r0
 800ab10:	4603      	mov	r3, r0
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d100      	bne.n	800ab18 <memset+0xa>
 800ab16:	4770      	bx	lr
 800ab18:	f803 1b01 	strb.w	r1, [r3], #1
 800ab1c:	e7f9      	b.n	800ab12 <memset+0x4>

0800ab1e <__cvt>:
 800ab1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab20:	ed2d 8b02 	vpush	{d8}
 800ab24:	eeb0 8b40 	vmov.f64	d8, d0
 800ab28:	b085      	sub	sp, #20
 800ab2a:	4617      	mov	r7, r2
 800ab2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ab2e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ab30:	ee18 2a90 	vmov	r2, s17
 800ab34:	f025 0520 	bic.w	r5, r5, #32
 800ab38:	2a00      	cmp	r2, #0
 800ab3a:	bfb6      	itet	lt
 800ab3c:	222d      	movlt	r2, #45	; 0x2d
 800ab3e:	2200      	movge	r2, #0
 800ab40:	eeb1 8b40 	vneglt.f64	d8, d0
 800ab44:	2d46      	cmp	r5, #70	; 0x46
 800ab46:	460c      	mov	r4, r1
 800ab48:	701a      	strb	r2, [r3, #0]
 800ab4a:	d004      	beq.n	800ab56 <__cvt+0x38>
 800ab4c:	2d45      	cmp	r5, #69	; 0x45
 800ab4e:	d100      	bne.n	800ab52 <__cvt+0x34>
 800ab50:	3401      	adds	r4, #1
 800ab52:	2102      	movs	r1, #2
 800ab54:	e000      	b.n	800ab58 <__cvt+0x3a>
 800ab56:	2103      	movs	r1, #3
 800ab58:	ab03      	add	r3, sp, #12
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	ab02      	add	r3, sp, #8
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	4622      	mov	r2, r4
 800ab62:	4633      	mov	r3, r6
 800ab64:	eeb0 0b48 	vmov.f64	d0, d8
 800ab68:	f000 fdda 	bl	800b720 <_dtoa_r>
 800ab6c:	2d47      	cmp	r5, #71	; 0x47
 800ab6e:	d101      	bne.n	800ab74 <__cvt+0x56>
 800ab70:	07fb      	lsls	r3, r7, #31
 800ab72:	d51e      	bpl.n	800abb2 <__cvt+0x94>
 800ab74:	2d46      	cmp	r5, #70	; 0x46
 800ab76:	eb00 0304 	add.w	r3, r0, r4
 800ab7a:	d10c      	bne.n	800ab96 <__cvt+0x78>
 800ab7c:	7802      	ldrb	r2, [r0, #0]
 800ab7e:	2a30      	cmp	r2, #48	; 0x30
 800ab80:	d107      	bne.n	800ab92 <__cvt+0x74>
 800ab82:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8a:	bf1c      	itt	ne
 800ab8c:	f1c4 0401 	rsbne	r4, r4, #1
 800ab90:	6034      	strne	r4, [r6, #0]
 800ab92:	6832      	ldr	r2, [r6, #0]
 800ab94:	4413      	add	r3, r2
 800ab96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9e:	d007      	beq.n	800abb0 <__cvt+0x92>
 800aba0:	2130      	movs	r1, #48	; 0x30
 800aba2:	9a03      	ldr	r2, [sp, #12]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d204      	bcs.n	800abb2 <__cvt+0x94>
 800aba8:	1c54      	adds	r4, r2, #1
 800abaa:	9403      	str	r4, [sp, #12]
 800abac:	7011      	strb	r1, [r2, #0]
 800abae:	e7f8      	b.n	800aba2 <__cvt+0x84>
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abb6:	1a1b      	subs	r3, r3, r0
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	b005      	add	sp, #20
 800abbc:	ecbd 8b02 	vpop	{d8}
 800abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abc2 <__exponent>:
 800abc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abc4:	2900      	cmp	r1, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	bfba      	itte	lt
 800abca:	4249      	neglt	r1, r1
 800abcc:	232d      	movlt	r3, #45	; 0x2d
 800abce:	232b      	movge	r3, #43	; 0x2b
 800abd0:	2909      	cmp	r1, #9
 800abd2:	f804 2b02 	strb.w	r2, [r4], #2
 800abd6:	7043      	strb	r3, [r0, #1]
 800abd8:	dd20      	ble.n	800ac1c <__exponent+0x5a>
 800abda:	f10d 0307 	add.w	r3, sp, #7
 800abde:	461f      	mov	r7, r3
 800abe0:	260a      	movs	r6, #10
 800abe2:	fb91 f5f6 	sdiv	r5, r1, r6
 800abe6:	fb06 1115 	mls	r1, r6, r5, r1
 800abea:	3130      	adds	r1, #48	; 0x30
 800abec:	2d09      	cmp	r5, #9
 800abee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abf2:	f103 32ff 	add.w	r2, r3, #4294967295
 800abf6:	4629      	mov	r1, r5
 800abf8:	dc09      	bgt.n	800ac0e <__exponent+0x4c>
 800abfa:	3130      	adds	r1, #48	; 0x30
 800abfc:	3b02      	subs	r3, #2
 800abfe:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac02:	42bb      	cmp	r3, r7
 800ac04:	4622      	mov	r2, r4
 800ac06:	d304      	bcc.n	800ac12 <__exponent+0x50>
 800ac08:	1a10      	subs	r0, r2, r0
 800ac0a:	b003      	add	sp, #12
 800ac0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0e:	4613      	mov	r3, r2
 800ac10:	e7e7      	b.n	800abe2 <__exponent+0x20>
 800ac12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac16:	f804 2b01 	strb.w	r2, [r4], #1
 800ac1a:	e7f2      	b.n	800ac02 <__exponent+0x40>
 800ac1c:	2330      	movs	r3, #48	; 0x30
 800ac1e:	4419      	add	r1, r3
 800ac20:	7083      	strb	r3, [r0, #2]
 800ac22:	1d02      	adds	r2, r0, #4
 800ac24:	70c1      	strb	r1, [r0, #3]
 800ac26:	e7ef      	b.n	800ac08 <__exponent+0x46>

0800ac28 <_printf_float>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	b08d      	sub	sp, #52	; 0x34
 800ac2e:	460c      	mov	r4, r1
 800ac30:	4616      	mov	r6, r2
 800ac32:	461f      	mov	r7, r3
 800ac34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ac38:	4605      	mov	r5, r0
 800ac3a:	f001 fc37 	bl	800c4ac <_localeconv_r>
 800ac3e:	f8d0 b000 	ldr.w	fp, [r0]
 800ac42:	4658      	mov	r0, fp
 800ac44:	f7f5 fafc 	bl	8000240 <strlen>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac50:	9005      	str	r0, [sp, #20]
 800ac52:	3307      	adds	r3, #7
 800ac54:	f023 0307 	bic.w	r3, r3, #7
 800ac58:	f103 0108 	add.w	r1, r3, #8
 800ac5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ac60:	6822      	ldr	r2, [r4, #0]
 800ac62:	f8c8 1000 	str.w	r1, [r8]
 800ac66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ac6e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800aef8 <_printf_float+0x2d0>
 800ac72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ac76:	eeb0 6bc0 	vabs.f64	d6, d0
 800ac7a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	dd24      	ble.n	800acce <_printf_float+0xa6>
 800ac84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8c:	d502      	bpl.n	800ac94 <_printf_float+0x6c>
 800ac8e:	232d      	movs	r3, #45	; 0x2d
 800ac90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac94:	499a      	ldr	r1, [pc, #616]	; (800af00 <_printf_float+0x2d8>)
 800ac96:	4b9b      	ldr	r3, [pc, #620]	; (800af04 <_printf_float+0x2dc>)
 800ac98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ac9c:	bf8c      	ite	hi
 800ac9e:	4688      	movhi	r8, r1
 800aca0:	4698      	movls	r8, r3
 800aca2:	f022 0204 	bic.w	r2, r2, #4
 800aca6:	2303      	movs	r3, #3
 800aca8:	6123      	str	r3, [r4, #16]
 800acaa:	6022      	str	r2, [r4, #0]
 800acac:	f04f 0a00 	mov.w	sl, #0
 800acb0:	9700      	str	r7, [sp, #0]
 800acb2:	4633      	mov	r3, r6
 800acb4:	aa0b      	add	r2, sp, #44	; 0x2c
 800acb6:	4621      	mov	r1, r4
 800acb8:	4628      	mov	r0, r5
 800acba:	f000 f9e1 	bl	800b080 <_printf_common>
 800acbe:	3001      	adds	r0, #1
 800acc0:	f040 8089 	bne.w	800add6 <_printf_float+0x1ae>
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	b00d      	add	sp, #52	; 0x34
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	eeb4 0b40 	vcmp.f64	d0, d0
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	d702      	bvc.n	800acde <_printf_float+0xb6>
 800acd8:	498b      	ldr	r1, [pc, #556]	; (800af08 <_printf_float+0x2e0>)
 800acda:	4b8c      	ldr	r3, [pc, #560]	; (800af0c <_printf_float+0x2e4>)
 800acdc:	e7dc      	b.n	800ac98 <_printf_float+0x70>
 800acde:	6861      	ldr	r1, [r4, #4]
 800ace0:	1c4b      	adds	r3, r1, #1
 800ace2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ace6:	ab0a      	add	r3, sp, #40	; 0x28
 800ace8:	a809      	add	r0, sp, #36	; 0x24
 800acea:	d13b      	bne.n	800ad64 <_printf_float+0x13c>
 800acec:	2106      	movs	r1, #6
 800acee:	6061      	str	r1, [r4, #4]
 800acf0:	f04f 0c00 	mov.w	ip, #0
 800acf4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800acf8:	e9cd 0900 	strd	r0, r9, [sp]
 800acfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	6861      	ldr	r1, [r4, #4]
 800ad04:	4628      	mov	r0, r5
 800ad06:	f7ff ff0a 	bl	800ab1e <__cvt>
 800ad0a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ad0e:	2b47      	cmp	r3, #71	; 0x47
 800ad10:	4680      	mov	r8, r0
 800ad12:	d109      	bne.n	800ad28 <_printf_float+0x100>
 800ad14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad16:	1cd8      	adds	r0, r3, #3
 800ad18:	db02      	blt.n	800ad20 <_printf_float+0xf8>
 800ad1a:	6862      	ldr	r2, [r4, #4]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	dd47      	ble.n	800adb0 <_printf_float+0x188>
 800ad20:	f1a9 0902 	sub.w	r9, r9, #2
 800ad24:	fa5f f989 	uxtb.w	r9, r9
 800ad28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad2e:	d824      	bhi.n	800ad7a <_printf_float+0x152>
 800ad30:	3901      	subs	r1, #1
 800ad32:	464a      	mov	r2, r9
 800ad34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad38:	9109      	str	r1, [sp, #36]	; 0x24
 800ad3a:	f7ff ff42 	bl	800abc2 <__exponent>
 800ad3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad40:	1813      	adds	r3, r2, r0
 800ad42:	2a01      	cmp	r2, #1
 800ad44:	4682      	mov	sl, r0
 800ad46:	6123      	str	r3, [r4, #16]
 800ad48:	dc02      	bgt.n	800ad50 <_printf_float+0x128>
 800ad4a:	6822      	ldr	r2, [r4, #0]
 800ad4c:	07d1      	lsls	r1, r2, #31
 800ad4e:	d501      	bpl.n	800ad54 <_printf_float+0x12c>
 800ad50:	3301      	adds	r3, #1
 800ad52:	6123      	str	r3, [r4, #16]
 800ad54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d0a9      	beq.n	800acb0 <_printf_float+0x88>
 800ad5c:	232d      	movs	r3, #45	; 0x2d
 800ad5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad62:	e7a5      	b.n	800acb0 <_printf_float+0x88>
 800ad64:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ad68:	f000 8178 	beq.w	800b05c <_printf_float+0x434>
 800ad6c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ad70:	d1be      	bne.n	800acf0 <_printf_float+0xc8>
 800ad72:	2900      	cmp	r1, #0
 800ad74:	d1bc      	bne.n	800acf0 <_printf_float+0xc8>
 800ad76:	2101      	movs	r1, #1
 800ad78:	e7b9      	b.n	800acee <_printf_float+0xc6>
 800ad7a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ad7e:	d119      	bne.n	800adb4 <_printf_float+0x18c>
 800ad80:	2900      	cmp	r1, #0
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	dd0c      	ble.n	800ada0 <_printf_float+0x178>
 800ad86:	6121      	str	r1, [r4, #16]
 800ad88:	b913      	cbnz	r3, 800ad90 <_printf_float+0x168>
 800ad8a:	6822      	ldr	r2, [r4, #0]
 800ad8c:	07d2      	lsls	r2, r2, #31
 800ad8e:	d502      	bpl.n	800ad96 <_printf_float+0x16e>
 800ad90:	3301      	adds	r3, #1
 800ad92:	440b      	add	r3, r1
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad98:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad9a:	f04f 0a00 	mov.w	sl, #0
 800ad9e:	e7d9      	b.n	800ad54 <_printf_float+0x12c>
 800ada0:	b913      	cbnz	r3, 800ada8 <_printf_float+0x180>
 800ada2:	6822      	ldr	r2, [r4, #0]
 800ada4:	07d0      	lsls	r0, r2, #31
 800ada6:	d501      	bpl.n	800adac <_printf_float+0x184>
 800ada8:	3302      	adds	r3, #2
 800adaa:	e7f3      	b.n	800ad94 <_printf_float+0x16c>
 800adac:	2301      	movs	r3, #1
 800adae:	e7f1      	b.n	800ad94 <_printf_float+0x16c>
 800adb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800adb4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800adb8:	4293      	cmp	r3, r2
 800adba:	db05      	blt.n	800adc8 <_printf_float+0x1a0>
 800adbc:	6822      	ldr	r2, [r4, #0]
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	07d1      	lsls	r1, r2, #31
 800adc2:	d5e8      	bpl.n	800ad96 <_printf_float+0x16e>
 800adc4:	3301      	adds	r3, #1
 800adc6:	e7e5      	b.n	800ad94 <_printf_float+0x16c>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bfd4      	ite	le
 800adcc:	f1c3 0302 	rsble	r3, r3, #2
 800add0:	2301      	movgt	r3, #1
 800add2:	4413      	add	r3, r2
 800add4:	e7de      	b.n	800ad94 <_printf_float+0x16c>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	055a      	lsls	r2, r3, #21
 800adda:	d407      	bmi.n	800adec <_printf_float+0x1c4>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	4642      	mov	r2, r8
 800ade0:	4631      	mov	r1, r6
 800ade2:	4628      	mov	r0, r5
 800ade4:	47b8      	blx	r7
 800ade6:	3001      	adds	r0, #1
 800ade8:	d12a      	bne.n	800ae40 <_printf_float+0x218>
 800adea:	e76b      	b.n	800acc4 <_printf_float+0x9c>
 800adec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800adf0:	f240 80de 	bls.w	800afb0 <_printf_float+0x388>
 800adf4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800adf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae00:	d133      	bne.n	800ae6a <_printf_float+0x242>
 800ae02:	2301      	movs	r3, #1
 800ae04:	4a42      	ldr	r2, [pc, #264]	; (800af10 <_printf_float+0x2e8>)
 800ae06:	4631      	mov	r1, r6
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b8      	blx	r7
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	f43f af59 	beq.w	800acc4 <_printf_float+0x9c>
 800ae12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae16:	429a      	cmp	r2, r3
 800ae18:	db02      	blt.n	800ae20 <_printf_float+0x1f8>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	07d8      	lsls	r0, r3, #31
 800ae1e:	d50f      	bpl.n	800ae40 <_printf_float+0x218>
 800ae20:	9b05      	ldr	r3, [sp, #20]
 800ae22:	465a      	mov	r2, fp
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f af4a 	beq.w	800acc4 <_printf_float+0x9c>
 800ae30:	f04f 0800 	mov.w	r8, #0
 800ae34:	f104 091a 	add.w	r9, r4, #26
 800ae38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	4543      	cmp	r3, r8
 800ae3e:	dc09      	bgt.n	800ae54 <_printf_float+0x22c>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	079b      	lsls	r3, r3, #30
 800ae44:	f100 8105 	bmi.w	800b052 <_printf_float+0x42a>
 800ae48:	68e0      	ldr	r0, [r4, #12]
 800ae4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae4c:	4298      	cmp	r0, r3
 800ae4e:	bfb8      	it	lt
 800ae50:	4618      	movlt	r0, r3
 800ae52:	e739      	b.n	800acc8 <_printf_float+0xa0>
 800ae54:	2301      	movs	r3, #1
 800ae56:	464a      	mov	r2, r9
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b8      	blx	r7
 800ae5e:	3001      	adds	r0, #1
 800ae60:	f43f af30 	beq.w	800acc4 <_printf_float+0x9c>
 800ae64:	f108 0801 	add.w	r8, r8, #1
 800ae68:	e7e6      	b.n	800ae38 <_printf_float+0x210>
 800ae6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dc2b      	bgt.n	800aec8 <_printf_float+0x2a0>
 800ae70:	2301      	movs	r3, #1
 800ae72:	4a27      	ldr	r2, [pc, #156]	; (800af10 <_printf_float+0x2e8>)
 800ae74:	4631      	mov	r1, r6
 800ae76:	4628      	mov	r0, r5
 800ae78:	47b8      	blx	r7
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	f43f af22 	beq.w	800acc4 <_printf_float+0x9c>
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	b923      	cbnz	r3, 800ae8e <_printf_float+0x266>
 800ae84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae86:	b913      	cbnz	r3, 800ae8e <_printf_float+0x266>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	07d9      	lsls	r1, r3, #31
 800ae8c:	d5d8      	bpl.n	800ae40 <_printf_float+0x218>
 800ae8e:	9b05      	ldr	r3, [sp, #20]
 800ae90:	465a      	mov	r2, fp
 800ae92:	4631      	mov	r1, r6
 800ae94:	4628      	mov	r0, r5
 800ae96:	47b8      	blx	r7
 800ae98:	3001      	adds	r0, #1
 800ae9a:	f43f af13 	beq.w	800acc4 <_printf_float+0x9c>
 800ae9e:	f04f 0900 	mov.w	r9, #0
 800aea2:	f104 0a1a 	add.w	sl, r4, #26
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	425b      	negs	r3, r3
 800aeaa:	454b      	cmp	r3, r9
 800aeac:	dc01      	bgt.n	800aeb2 <_printf_float+0x28a>
 800aeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb0:	e795      	b.n	800adde <_printf_float+0x1b6>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b8      	blx	r7
 800aebc:	3001      	adds	r0, #1
 800aebe:	f43f af01 	beq.w	800acc4 <_printf_float+0x9c>
 800aec2:	f109 0901 	add.w	r9, r9, #1
 800aec6:	e7ee      	b.n	800aea6 <_printf_float+0x27e>
 800aec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aecc:	429a      	cmp	r2, r3
 800aece:	bfa8      	it	ge
 800aed0:	461a      	movge	r2, r3
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	4691      	mov	r9, r2
 800aed6:	dd07      	ble.n	800aee8 <_printf_float+0x2c0>
 800aed8:	4613      	mov	r3, r2
 800aeda:	4631      	mov	r1, r6
 800aedc:	4642      	mov	r2, r8
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	f43f aeee 	beq.w	800acc4 <_printf_float+0x9c>
 800aee8:	f104 031a 	add.w	r3, r4, #26
 800aeec:	f04f 0a00 	mov.w	sl, #0
 800aef0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aef4:	9307      	str	r3, [sp, #28]
 800aef6:	e017      	b.n	800af28 <_printf_float+0x300>
 800aef8:	ffffffff 	.word	0xffffffff
 800aefc:	7fefffff 	.word	0x7fefffff
 800af00:	0800dfd8 	.word	0x0800dfd8
 800af04:	0800dfd4 	.word	0x0800dfd4
 800af08:	0800dfe0 	.word	0x0800dfe0
 800af0c:	0800dfdc 	.word	0x0800dfdc
 800af10:	0800dfe4 	.word	0x0800dfe4
 800af14:	2301      	movs	r3, #1
 800af16:	9a07      	ldr	r2, [sp, #28]
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f aed0 	beq.w	800acc4 <_printf_float+0x9c>
 800af24:	f10a 0a01 	add.w	sl, sl, #1
 800af28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2a:	9306      	str	r3, [sp, #24]
 800af2c:	eba3 0309 	sub.w	r3, r3, r9
 800af30:	4553      	cmp	r3, sl
 800af32:	dcef      	bgt.n	800af14 <_printf_float+0x2ec>
 800af34:	9b06      	ldr	r3, [sp, #24]
 800af36:	4498      	add	r8, r3
 800af38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af3c:	429a      	cmp	r2, r3
 800af3e:	db15      	blt.n	800af6c <_printf_float+0x344>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	07da      	lsls	r2, r3, #31
 800af44:	d412      	bmi.n	800af6c <_printf_float+0x344>
 800af46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af48:	9a06      	ldr	r2, [sp, #24]
 800af4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af4c:	1a9a      	subs	r2, r3, r2
 800af4e:	eba3 0a01 	sub.w	sl, r3, r1
 800af52:	4592      	cmp	sl, r2
 800af54:	bfa8      	it	ge
 800af56:	4692      	movge	sl, r2
 800af58:	f1ba 0f00 	cmp.w	sl, #0
 800af5c:	dc0e      	bgt.n	800af7c <_printf_float+0x354>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af66:	f104 091a 	add.w	r9, r4, #26
 800af6a:	e019      	b.n	800afa0 <_printf_float+0x378>
 800af6c:	9b05      	ldr	r3, [sp, #20]
 800af6e:	465a      	mov	r2, fp
 800af70:	4631      	mov	r1, r6
 800af72:	4628      	mov	r0, r5
 800af74:	47b8      	blx	r7
 800af76:	3001      	adds	r0, #1
 800af78:	d1e5      	bne.n	800af46 <_printf_float+0x31e>
 800af7a:	e6a3      	b.n	800acc4 <_printf_float+0x9c>
 800af7c:	4653      	mov	r3, sl
 800af7e:	4642      	mov	r2, r8
 800af80:	4631      	mov	r1, r6
 800af82:	4628      	mov	r0, r5
 800af84:	47b8      	blx	r7
 800af86:	3001      	adds	r0, #1
 800af88:	d1e9      	bne.n	800af5e <_printf_float+0x336>
 800af8a:	e69b      	b.n	800acc4 <_printf_float+0x9c>
 800af8c:	2301      	movs	r3, #1
 800af8e:	464a      	mov	r2, r9
 800af90:	4631      	mov	r1, r6
 800af92:	4628      	mov	r0, r5
 800af94:	47b8      	blx	r7
 800af96:	3001      	adds	r0, #1
 800af98:	f43f ae94 	beq.w	800acc4 <_printf_float+0x9c>
 800af9c:	f108 0801 	add.w	r8, r8, #1
 800afa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	eba3 030a 	sub.w	r3, r3, sl
 800afaa:	4543      	cmp	r3, r8
 800afac:	dcee      	bgt.n	800af8c <_printf_float+0x364>
 800afae:	e747      	b.n	800ae40 <_printf_float+0x218>
 800afb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afb2:	2a01      	cmp	r2, #1
 800afb4:	dc01      	bgt.n	800afba <_printf_float+0x392>
 800afb6:	07db      	lsls	r3, r3, #31
 800afb8:	d539      	bpl.n	800b02e <_printf_float+0x406>
 800afba:	2301      	movs	r3, #1
 800afbc:	4642      	mov	r2, r8
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	f43f ae7d 	beq.w	800acc4 <_printf_float+0x9c>
 800afca:	9b05      	ldr	r3, [sp, #20]
 800afcc:	465a      	mov	r2, fp
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	f108 0801 	add.w	r8, r8, #1
 800afda:	f43f ae73 	beq.w	800acc4 <_printf_float+0x9c>
 800afde:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800afe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afec:	f103 33ff 	add.w	r3, r3, #4294967295
 800aff0:	d018      	beq.n	800b024 <_printf_float+0x3fc>
 800aff2:	4642      	mov	r2, r8
 800aff4:	4631      	mov	r1, r6
 800aff6:	4628      	mov	r0, r5
 800aff8:	47b8      	blx	r7
 800affa:	3001      	adds	r0, #1
 800affc:	d10e      	bne.n	800b01c <_printf_float+0x3f4>
 800affe:	e661      	b.n	800acc4 <_printf_float+0x9c>
 800b000:	2301      	movs	r3, #1
 800b002:	464a      	mov	r2, r9
 800b004:	4631      	mov	r1, r6
 800b006:	4628      	mov	r0, r5
 800b008:	47b8      	blx	r7
 800b00a:	3001      	adds	r0, #1
 800b00c:	f43f ae5a 	beq.w	800acc4 <_printf_float+0x9c>
 800b010:	f108 0801 	add.w	r8, r8, #1
 800b014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b016:	3b01      	subs	r3, #1
 800b018:	4543      	cmp	r3, r8
 800b01a:	dcf1      	bgt.n	800b000 <_printf_float+0x3d8>
 800b01c:	4653      	mov	r3, sl
 800b01e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b022:	e6dd      	b.n	800ade0 <_printf_float+0x1b8>
 800b024:	f04f 0800 	mov.w	r8, #0
 800b028:	f104 091a 	add.w	r9, r4, #26
 800b02c:	e7f2      	b.n	800b014 <_printf_float+0x3ec>
 800b02e:	2301      	movs	r3, #1
 800b030:	e7df      	b.n	800aff2 <_printf_float+0x3ca>
 800b032:	2301      	movs	r3, #1
 800b034:	464a      	mov	r2, r9
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	f43f ae41 	beq.w	800acc4 <_printf_float+0x9c>
 800b042:	f108 0801 	add.w	r8, r8, #1
 800b046:	68e3      	ldr	r3, [r4, #12]
 800b048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b04a:	1a9b      	subs	r3, r3, r2
 800b04c:	4543      	cmp	r3, r8
 800b04e:	dcf0      	bgt.n	800b032 <_printf_float+0x40a>
 800b050:	e6fa      	b.n	800ae48 <_printf_float+0x220>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	f104 0919 	add.w	r9, r4, #25
 800b05a:	e7f4      	b.n	800b046 <_printf_float+0x41e>
 800b05c:	2900      	cmp	r1, #0
 800b05e:	f43f ae8a 	beq.w	800ad76 <_printf_float+0x14e>
 800b062:	f04f 0c00 	mov.w	ip, #0
 800b066:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b06a:	e9cd 0900 	strd	r0, r9, [sp]
 800b06e:	6022      	str	r2, [r4, #0]
 800b070:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b074:	4628      	mov	r0, r5
 800b076:	f7ff fd52 	bl	800ab1e <__cvt>
 800b07a:	4680      	mov	r8, r0
 800b07c:	e64a      	b.n	800ad14 <_printf_float+0xec>
 800b07e:	bf00      	nop

0800b080 <_printf_common>:
 800b080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b084:	4691      	mov	r9, r2
 800b086:	461f      	mov	r7, r3
 800b088:	688a      	ldr	r2, [r1, #8]
 800b08a:	690b      	ldr	r3, [r1, #16]
 800b08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b090:	4293      	cmp	r3, r2
 800b092:	bfb8      	it	lt
 800b094:	4613      	movlt	r3, r2
 800b096:	f8c9 3000 	str.w	r3, [r9]
 800b09a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	b112      	cbz	r2, 800b0aa <_printf_common+0x2a>
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	f8c9 3000 	str.w	r3, [r9]
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	0699      	lsls	r1, r3, #26
 800b0ae:	bf42      	ittt	mi
 800b0b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b0b4:	3302      	addmi	r3, #2
 800b0b6:	f8c9 3000 	strmi.w	r3, [r9]
 800b0ba:	6825      	ldr	r5, [r4, #0]
 800b0bc:	f015 0506 	ands.w	r5, r5, #6
 800b0c0:	d107      	bne.n	800b0d2 <_printf_common+0x52>
 800b0c2:	f104 0a19 	add.w	sl, r4, #25
 800b0c6:	68e3      	ldr	r3, [r4, #12]
 800b0c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b0cc:	1a9b      	subs	r3, r3, r2
 800b0ce:	42ab      	cmp	r3, r5
 800b0d0:	dc28      	bgt.n	800b124 <_printf_common+0xa4>
 800b0d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	3300      	adds	r3, #0
 800b0da:	bf18      	it	ne
 800b0dc:	2301      	movne	r3, #1
 800b0de:	0692      	lsls	r2, r2, #26
 800b0e0:	d42d      	bmi.n	800b13e <_printf_common+0xbe>
 800b0e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	47c0      	blx	r8
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	d020      	beq.n	800b132 <_printf_common+0xb2>
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	68e5      	ldr	r5, [r4, #12]
 800b0f4:	f8d9 2000 	ldr.w	r2, [r9]
 800b0f8:	f003 0306 	and.w	r3, r3, #6
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	bf08      	it	eq
 800b100:	1aad      	subeq	r5, r5, r2
 800b102:	68a3      	ldr	r3, [r4, #8]
 800b104:	6922      	ldr	r2, [r4, #16]
 800b106:	bf0c      	ite	eq
 800b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b10c:	2500      	movne	r5, #0
 800b10e:	4293      	cmp	r3, r2
 800b110:	bfc4      	itt	gt
 800b112:	1a9b      	subgt	r3, r3, r2
 800b114:	18ed      	addgt	r5, r5, r3
 800b116:	f04f 0900 	mov.w	r9, #0
 800b11a:	341a      	adds	r4, #26
 800b11c:	454d      	cmp	r5, r9
 800b11e:	d11a      	bne.n	800b156 <_printf_common+0xd6>
 800b120:	2000      	movs	r0, #0
 800b122:	e008      	b.n	800b136 <_printf_common+0xb6>
 800b124:	2301      	movs	r3, #1
 800b126:	4652      	mov	r2, sl
 800b128:	4639      	mov	r1, r7
 800b12a:	4630      	mov	r0, r6
 800b12c:	47c0      	blx	r8
 800b12e:	3001      	adds	r0, #1
 800b130:	d103      	bne.n	800b13a <_printf_common+0xba>
 800b132:	f04f 30ff 	mov.w	r0, #4294967295
 800b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13a:	3501      	adds	r5, #1
 800b13c:	e7c3      	b.n	800b0c6 <_printf_common+0x46>
 800b13e:	18e1      	adds	r1, r4, r3
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	2030      	movs	r0, #48	; 0x30
 800b144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b148:	4422      	add	r2, r4
 800b14a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b14e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b152:	3302      	adds	r3, #2
 800b154:	e7c5      	b.n	800b0e2 <_printf_common+0x62>
 800b156:	2301      	movs	r3, #1
 800b158:	4622      	mov	r2, r4
 800b15a:	4639      	mov	r1, r7
 800b15c:	4630      	mov	r0, r6
 800b15e:	47c0      	blx	r8
 800b160:	3001      	adds	r0, #1
 800b162:	d0e6      	beq.n	800b132 <_printf_common+0xb2>
 800b164:	f109 0901 	add.w	r9, r9, #1
 800b168:	e7d8      	b.n	800b11c <_printf_common+0x9c>
	...

0800b16c <_printf_i>:
 800b16c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b170:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b174:	460c      	mov	r4, r1
 800b176:	7e09      	ldrb	r1, [r1, #24]
 800b178:	b085      	sub	sp, #20
 800b17a:	296e      	cmp	r1, #110	; 0x6e
 800b17c:	4617      	mov	r7, r2
 800b17e:	4606      	mov	r6, r0
 800b180:	4698      	mov	r8, r3
 800b182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b184:	f000 80b3 	beq.w	800b2ee <_printf_i+0x182>
 800b188:	d822      	bhi.n	800b1d0 <_printf_i+0x64>
 800b18a:	2963      	cmp	r1, #99	; 0x63
 800b18c:	d036      	beq.n	800b1fc <_printf_i+0x90>
 800b18e:	d80a      	bhi.n	800b1a6 <_printf_i+0x3a>
 800b190:	2900      	cmp	r1, #0
 800b192:	f000 80b9 	beq.w	800b308 <_printf_i+0x19c>
 800b196:	2958      	cmp	r1, #88	; 0x58
 800b198:	f000 8083 	beq.w	800b2a2 <_printf_i+0x136>
 800b19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b1a4:	e032      	b.n	800b20c <_printf_i+0xa0>
 800b1a6:	2964      	cmp	r1, #100	; 0x64
 800b1a8:	d001      	beq.n	800b1ae <_printf_i+0x42>
 800b1aa:	2969      	cmp	r1, #105	; 0x69
 800b1ac:	d1f6      	bne.n	800b19c <_printf_i+0x30>
 800b1ae:	6820      	ldr	r0, [r4, #0]
 800b1b0:	6813      	ldr	r3, [r2, #0]
 800b1b2:	0605      	lsls	r5, r0, #24
 800b1b4:	f103 0104 	add.w	r1, r3, #4
 800b1b8:	d52a      	bpl.n	800b210 <_printf_i+0xa4>
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6011      	str	r1, [r2, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	da03      	bge.n	800b1ca <_printf_i+0x5e>
 800b1c2:	222d      	movs	r2, #45	; 0x2d
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b1ca:	486f      	ldr	r0, [pc, #444]	; (800b388 <_printf_i+0x21c>)
 800b1cc:	220a      	movs	r2, #10
 800b1ce:	e039      	b.n	800b244 <_printf_i+0xd8>
 800b1d0:	2973      	cmp	r1, #115	; 0x73
 800b1d2:	f000 809d 	beq.w	800b310 <_printf_i+0x1a4>
 800b1d6:	d808      	bhi.n	800b1ea <_printf_i+0x7e>
 800b1d8:	296f      	cmp	r1, #111	; 0x6f
 800b1da:	d020      	beq.n	800b21e <_printf_i+0xb2>
 800b1dc:	2970      	cmp	r1, #112	; 0x70
 800b1de:	d1dd      	bne.n	800b19c <_printf_i+0x30>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	f043 0320 	orr.w	r3, r3, #32
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	e003      	b.n	800b1f2 <_printf_i+0x86>
 800b1ea:	2975      	cmp	r1, #117	; 0x75
 800b1ec:	d017      	beq.n	800b21e <_printf_i+0xb2>
 800b1ee:	2978      	cmp	r1, #120	; 0x78
 800b1f0:	d1d4      	bne.n	800b19c <_printf_i+0x30>
 800b1f2:	2378      	movs	r3, #120	; 0x78
 800b1f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1f8:	4864      	ldr	r0, [pc, #400]	; (800b38c <_printf_i+0x220>)
 800b1fa:	e055      	b.n	800b2a8 <_printf_i+0x13c>
 800b1fc:	6813      	ldr	r3, [r2, #0]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6011      	str	r1, [r2, #0]
 800b204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b20c:	2301      	movs	r3, #1
 800b20e:	e08c      	b.n	800b32a <_printf_i+0x1be>
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	6011      	str	r1, [r2, #0]
 800b214:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b218:	bf18      	it	ne
 800b21a:	b21b      	sxthne	r3, r3
 800b21c:	e7cf      	b.n	800b1be <_printf_i+0x52>
 800b21e:	6813      	ldr	r3, [r2, #0]
 800b220:	6825      	ldr	r5, [r4, #0]
 800b222:	1d18      	adds	r0, r3, #4
 800b224:	6010      	str	r0, [r2, #0]
 800b226:	0628      	lsls	r0, r5, #24
 800b228:	d501      	bpl.n	800b22e <_printf_i+0xc2>
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	e002      	b.n	800b234 <_printf_i+0xc8>
 800b22e:	0668      	lsls	r0, r5, #25
 800b230:	d5fb      	bpl.n	800b22a <_printf_i+0xbe>
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	4854      	ldr	r0, [pc, #336]	; (800b388 <_printf_i+0x21c>)
 800b236:	296f      	cmp	r1, #111	; 0x6f
 800b238:	bf14      	ite	ne
 800b23a:	220a      	movne	r2, #10
 800b23c:	2208      	moveq	r2, #8
 800b23e:	2100      	movs	r1, #0
 800b240:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b244:	6865      	ldr	r5, [r4, #4]
 800b246:	60a5      	str	r5, [r4, #8]
 800b248:	2d00      	cmp	r5, #0
 800b24a:	f2c0 8095 	blt.w	800b378 <_printf_i+0x20c>
 800b24e:	6821      	ldr	r1, [r4, #0]
 800b250:	f021 0104 	bic.w	r1, r1, #4
 800b254:	6021      	str	r1, [r4, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d13d      	bne.n	800b2d6 <_printf_i+0x16a>
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	f040 808e 	bne.w	800b37c <_printf_i+0x210>
 800b260:	4665      	mov	r5, ip
 800b262:	2a08      	cmp	r2, #8
 800b264:	d10b      	bne.n	800b27e <_printf_i+0x112>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	07db      	lsls	r3, r3, #31
 800b26a:	d508      	bpl.n	800b27e <_printf_i+0x112>
 800b26c:	6923      	ldr	r3, [r4, #16]
 800b26e:	6862      	ldr	r2, [r4, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	bfde      	ittt	le
 800b274:	2330      	movle	r3, #48	; 0x30
 800b276:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b27a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b27e:	ebac 0305 	sub.w	r3, ip, r5
 800b282:	6123      	str	r3, [r4, #16]
 800b284:	f8cd 8000 	str.w	r8, [sp]
 800b288:	463b      	mov	r3, r7
 800b28a:	aa03      	add	r2, sp, #12
 800b28c:	4621      	mov	r1, r4
 800b28e:	4630      	mov	r0, r6
 800b290:	f7ff fef6 	bl	800b080 <_printf_common>
 800b294:	3001      	adds	r0, #1
 800b296:	d14d      	bne.n	800b334 <_printf_i+0x1c8>
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	b005      	add	sp, #20
 800b29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2a2:	4839      	ldr	r0, [pc, #228]	; (800b388 <_printf_i+0x21c>)
 800b2a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b2a8:	6813      	ldr	r3, [r2, #0]
 800b2aa:	6821      	ldr	r1, [r4, #0]
 800b2ac:	1d1d      	adds	r5, r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6015      	str	r5, [r2, #0]
 800b2b2:	060a      	lsls	r2, r1, #24
 800b2b4:	d50b      	bpl.n	800b2ce <_printf_i+0x162>
 800b2b6:	07ca      	lsls	r2, r1, #31
 800b2b8:	bf44      	itt	mi
 800b2ba:	f041 0120 	orrmi.w	r1, r1, #32
 800b2be:	6021      	strmi	r1, [r4, #0]
 800b2c0:	b91b      	cbnz	r3, 800b2ca <_printf_i+0x15e>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	f022 0220 	bic.w	r2, r2, #32
 800b2c8:	6022      	str	r2, [r4, #0]
 800b2ca:	2210      	movs	r2, #16
 800b2cc:	e7b7      	b.n	800b23e <_printf_i+0xd2>
 800b2ce:	064d      	lsls	r5, r1, #25
 800b2d0:	bf48      	it	mi
 800b2d2:	b29b      	uxthmi	r3, r3
 800b2d4:	e7ef      	b.n	800b2b6 <_printf_i+0x14a>
 800b2d6:	4665      	mov	r5, ip
 800b2d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2dc:	fb02 3311 	mls	r3, r2, r1, r3
 800b2e0:	5cc3      	ldrb	r3, [r0, r3]
 800b2e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	d1f5      	bne.n	800b2d8 <_printf_i+0x16c>
 800b2ec:	e7b9      	b.n	800b262 <_printf_i+0xf6>
 800b2ee:	6813      	ldr	r3, [r2, #0]
 800b2f0:	6825      	ldr	r5, [r4, #0]
 800b2f2:	6961      	ldr	r1, [r4, #20]
 800b2f4:	1d18      	adds	r0, r3, #4
 800b2f6:	6010      	str	r0, [r2, #0]
 800b2f8:	0628      	lsls	r0, r5, #24
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	d501      	bpl.n	800b302 <_printf_i+0x196>
 800b2fe:	6019      	str	r1, [r3, #0]
 800b300:	e002      	b.n	800b308 <_printf_i+0x19c>
 800b302:	066a      	lsls	r2, r5, #25
 800b304:	d5fb      	bpl.n	800b2fe <_printf_i+0x192>
 800b306:	8019      	strh	r1, [r3, #0]
 800b308:	2300      	movs	r3, #0
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	4665      	mov	r5, ip
 800b30e:	e7b9      	b.n	800b284 <_printf_i+0x118>
 800b310:	6813      	ldr	r3, [r2, #0]
 800b312:	1d19      	adds	r1, r3, #4
 800b314:	6011      	str	r1, [r2, #0]
 800b316:	681d      	ldr	r5, [r3, #0]
 800b318:	6862      	ldr	r2, [r4, #4]
 800b31a:	2100      	movs	r1, #0
 800b31c:	4628      	mov	r0, r5
 800b31e:	f7f4 ff97 	bl	8000250 <memchr>
 800b322:	b108      	cbz	r0, 800b328 <_printf_i+0x1bc>
 800b324:	1b40      	subs	r0, r0, r5
 800b326:	6060      	str	r0, [r4, #4]
 800b328:	6863      	ldr	r3, [r4, #4]
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	2300      	movs	r3, #0
 800b32e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b332:	e7a7      	b.n	800b284 <_printf_i+0x118>
 800b334:	6923      	ldr	r3, [r4, #16]
 800b336:	462a      	mov	r2, r5
 800b338:	4639      	mov	r1, r7
 800b33a:	4630      	mov	r0, r6
 800b33c:	47c0      	blx	r8
 800b33e:	3001      	adds	r0, #1
 800b340:	d0aa      	beq.n	800b298 <_printf_i+0x12c>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	079b      	lsls	r3, r3, #30
 800b346:	d413      	bmi.n	800b370 <_printf_i+0x204>
 800b348:	68e0      	ldr	r0, [r4, #12]
 800b34a:	9b03      	ldr	r3, [sp, #12]
 800b34c:	4298      	cmp	r0, r3
 800b34e:	bfb8      	it	lt
 800b350:	4618      	movlt	r0, r3
 800b352:	e7a3      	b.n	800b29c <_printf_i+0x130>
 800b354:	2301      	movs	r3, #1
 800b356:	464a      	mov	r2, r9
 800b358:	4639      	mov	r1, r7
 800b35a:	4630      	mov	r0, r6
 800b35c:	47c0      	blx	r8
 800b35e:	3001      	adds	r0, #1
 800b360:	d09a      	beq.n	800b298 <_printf_i+0x12c>
 800b362:	3501      	adds	r5, #1
 800b364:	68e3      	ldr	r3, [r4, #12]
 800b366:	9a03      	ldr	r2, [sp, #12]
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	42ab      	cmp	r3, r5
 800b36c:	dcf2      	bgt.n	800b354 <_printf_i+0x1e8>
 800b36e:	e7eb      	b.n	800b348 <_printf_i+0x1dc>
 800b370:	2500      	movs	r5, #0
 800b372:	f104 0919 	add.w	r9, r4, #25
 800b376:	e7f5      	b.n	800b364 <_printf_i+0x1f8>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1ac      	bne.n	800b2d6 <_printf_i+0x16a>
 800b37c:	7803      	ldrb	r3, [r0, #0]
 800b37e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b382:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b386:	e76c      	b.n	800b262 <_printf_i+0xf6>
 800b388:	0800dfe6 	.word	0x0800dfe6
 800b38c:	0800dff7 	.word	0x0800dff7

0800b390 <iprintf>:
 800b390:	b40f      	push	{r0, r1, r2, r3}
 800b392:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <iprintf+0x2c>)
 800b394:	b513      	push	{r0, r1, r4, lr}
 800b396:	681c      	ldr	r4, [r3, #0]
 800b398:	b124      	cbz	r4, 800b3a4 <iprintf+0x14>
 800b39a:	69a3      	ldr	r3, [r4, #24]
 800b39c:	b913      	cbnz	r3, 800b3a4 <iprintf+0x14>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 fffa 	bl	800c398 <__sinit>
 800b3a4:	ab05      	add	r3, sp, #20
 800b3a6:	9a04      	ldr	r2, [sp, #16]
 800b3a8:	68a1      	ldr	r1, [r4, #8]
 800b3aa:	9301      	str	r3, [sp, #4]
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f001 fcb3 	bl	800cd18 <_vfiprintf_r>
 800b3b2:	b002      	add	sp, #8
 800b3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b8:	b004      	add	sp, #16
 800b3ba:	4770      	bx	lr
 800b3bc:	20000028 	.word	0x20000028

0800b3c0 <_puts_r>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	460e      	mov	r6, r1
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	b118      	cbz	r0, 800b3d0 <_puts_r+0x10>
 800b3c8:	6983      	ldr	r3, [r0, #24]
 800b3ca:	b90b      	cbnz	r3, 800b3d0 <_puts_r+0x10>
 800b3cc:	f000 ffe4 	bl	800c398 <__sinit>
 800b3d0:	69ab      	ldr	r3, [r5, #24]
 800b3d2:	68ac      	ldr	r4, [r5, #8]
 800b3d4:	b913      	cbnz	r3, 800b3dc <_puts_r+0x1c>
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 ffde 	bl	800c398 <__sinit>
 800b3dc:	4b23      	ldr	r3, [pc, #140]	; (800b46c <_puts_r+0xac>)
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	d117      	bne.n	800b412 <_puts_r+0x52>
 800b3e2:	686c      	ldr	r4, [r5, #4]
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	071b      	lsls	r3, r3, #28
 800b3e8:	d51d      	bpl.n	800b426 <_puts_r+0x66>
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	b1db      	cbz	r3, 800b426 <_puts_r+0x66>
 800b3ee:	3e01      	subs	r6, #1
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	60a3      	str	r3, [r4, #8]
 800b3fa:	b9e9      	cbnz	r1, 800b438 <_puts_r+0x78>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	da2e      	bge.n	800b45e <_puts_r+0x9e>
 800b400:	4622      	mov	r2, r4
 800b402:	210a      	movs	r1, #10
 800b404:	4628      	mov	r0, r5
 800b406:	f000 f83f 	bl	800b488 <__swbuf_r>
 800b40a:	3001      	adds	r0, #1
 800b40c:	d011      	beq.n	800b432 <_puts_r+0x72>
 800b40e:	200a      	movs	r0, #10
 800b410:	e011      	b.n	800b436 <_puts_r+0x76>
 800b412:	4b17      	ldr	r3, [pc, #92]	; (800b470 <_puts_r+0xb0>)
 800b414:	429c      	cmp	r4, r3
 800b416:	d101      	bne.n	800b41c <_puts_r+0x5c>
 800b418:	68ac      	ldr	r4, [r5, #8]
 800b41a:	e7e3      	b.n	800b3e4 <_puts_r+0x24>
 800b41c:	4b15      	ldr	r3, [pc, #84]	; (800b474 <_puts_r+0xb4>)
 800b41e:	429c      	cmp	r4, r3
 800b420:	bf08      	it	eq
 800b422:	68ec      	ldreq	r4, [r5, #12]
 800b424:	e7de      	b.n	800b3e4 <_puts_r+0x24>
 800b426:	4621      	mov	r1, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	f000 f87f 	bl	800b52c <__swsetup_r>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0dd      	beq.n	800b3ee <_puts_r+0x2e>
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da04      	bge.n	800b446 <_puts_r+0x86>
 800b43c:	69a2      	ldr	r2, [r4, #24]
 800b43e:	429a      	cmp	r2, r3
 800b440:	dc06      	bgt.n	800b450 <_puts_r+0x90>
 800b442:	290a      	cmp	r1, #10
 800b444:	d004      	beq.n	800b450 <_puts_r+0x90>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	6022      	str	r2, [r4, #0]
 800b44c:	7019      	strb	r1, [r3, #0]
 800b44e:	e7cf      	b.n	800b3f0 <_puts_r+0x30>
 800b450:	4622      	mov	r2, r4
 800b452:	4628      	mov	r0, r5
 800b454:	f000 f818 	bl	800b488 <__swbuf_r>
 800b458:	3001      	adds	r0, #1
 800b45a:	d1c9      	bne.n	800b3f0 <_puts_r+0x30>
 800b45c:	e7e9      	b.n	800b432 <_puts_r+0x72>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	200a      	movs	r0, #10
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	6022      	str	r2, [r4, #0]
 800b466:	7018      	strb	r0, [r3, #0]
 800b468:	e7e5      	b.n	800b436 <_puts_r+0x76>
 800b46a:	bf00      	nop
 800b46c:	0800e038 	.word	0x0800e038
 800b470:	0800e058 	.word	0x0800e058
 800b474:	0800e018 	.word	0x0800e018

0800b478 <puts>:
 800b478:	4b02      	ldr	r3, [pc, #8]	; (800b484 <puts+0xc>)
 800b47a:	4601      	mov	r1, r0
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	f7ff bf9f 	b.w	800b3c0 <_puts_r>
 800b482:	bf00      	nop
 800b484:	20000028 	.word	0x20000028

0800b488 <__swbuf_r>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	460e      	mov	r6, r1
 800b48c:	4614      	mov	r4, r2
 800b48e:	4605      	mov	r5, r0
 800b490:	b118      	cbz	r0, 800b49a <__swbuf_r+0x12>
 800b492:	6983      	ldr	r3, [r0, #24]
 800b494:	b90b      	cbnz	r3, 800b49a <__swbuf_r+0x12>
 800b496:	f000 ff7f 	bl	800c398 <__sinit>
 800b49a:	4b21      	ldr	r3, [pc, #132]	; (800b520 <__swbuf_r+0x98>)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	d12a      	bne.n	800b4f6 <__swbuf_r+0x6e>
 800b4a0:	686c      	ldr	r4, [r5, #4]
 800b4a2:	69a3      	ldr	r3, [r4, #24]
 800b4a4:	60a3      	str	r3, [r4, #8]
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	071a      	lsls	r2, r3, #28
 800b4aa:	d52e      	bpl.n	800b50a <__swbuf_r+0x82>
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	b363      	cbz	r3, 800b50a <__swbuf_r+0x82>
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	6820      	ldr	r0, [r4, #0]
 800b4b4:	1ac0      	subs	r0, r0, r3
 800b4b6:	6963      	ldr	r3, [r4, #20]
 800b4b8:	b2f6      	uxtb	r6, r6
 800b4ba:	4283      	cmp	r3, r0
 800b4bc:	4637      	mov	r7, r6
 800b4be:	dc04      	bgt.n	800b4ca <__swbuf_r+0x42>
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 fefe 	bl	800c2c4 <_fflush_r>
 800b4c8:	bb28      	cbnz	r0, 800b516 <__swbuf_r+0x8e>
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	60a3      	str	r3, [r4, #8]
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	6022      	str	r2, [r4, #0]
 800b4d6:	701e      	strb	r6, [r3, #0]
 800b4d8:	6963      	ldr	r3, [r4, #20]
 800b4da:	3001      	adds	r0, #1
 800b4dc:	4283      	cmp	r3, r0
 800b4de:	d004      	beq.n	800b4ea <__swbuf_r+0x62>
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	07db      	lsls	r3, r3, #31
 800b4e4:	d519      	bpl.n	800b51a <__swbuf_r+0x92>
 800b4e6:	2e0a      	cmp	r6, #10
 800b4e8:	d117      	bne.n	800b51a <__swbuf_r+0x92>
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	f000 fee9 	bl	800c2c4 <_fflush_r>
 800b4f2:	b190      	cbz	r0, 800b51a <__swbuf_r+0x92>
 800b4f4:	e00f      	b.n	800b516 <__swbuf_r+0x8e>
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <__swbuf_r+0x9c>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	d101      	bne.n	800b500 <__swbuf_r+0x78>
 800b4fc:	68ac      	ldr	r4, [r5, #8]
 800b4fe:	e7d0      	b.n	800b4a2 <__swbuf_r+0x1a>
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <__swbuf_r+0xa0>)
 800b502:	429c      	cmp	r4, r3
 800b504:	bf08      	it	eq
 800b506:	68ec      	ldreq	r4, [r5, #12]
 800b508:	e7cb      	b.n	800b4a2 <__swbuf_r+0x1a>
 800b50a:	4621      	mov	r1, r4
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 f80d 	bl	800b52c <__swsetup_r>
 800b512:	2800      	cmp	r0, #0
 800b514:	d0cc      	beq.n	800b4b0 <__swbuf_r+0x28>
 800b516:	f04f 37ff 	mov.w	r7, #4294967295
 800b51a:	4638      	mov	r0, r7
 800b51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51e:	bf00      	nop
 800b520:	0800e038 	.word	0x0800e038
 800b524:	0800e058 	.word	0x0800e058
 800b528:	0800e018 	.word	0x0800e018

0800b52c <__swsetup_r>:
 800b52c:	4b32      	ldr	r3, [pc, #200]	; (800b5f8 <__swsetup_r+0xcc>)
 800b52e:	b570      	push	{r4, r5, r6, lr}
 800b530:	681d      	ldr	r5, [r3, #0]
 800b532:	4606      	mov	r6, r0
 800b534:	460c      	mov	r4, r1
 800b536:	b125      	cbz	r5, 800b542 <__swsetup_r+0x16>
 800b538:	69ab      	ldr	r3, [r5, #24]
 800b53a:	b913      	cbnz	r3, 800b542 <__swsetup_r+0x16>
 800b53c:	4628      	mov	r0, r5
 800b53e:	f000 ff2b 	bl	800c398 <__sinit>
 800b542:	4b2e      	ldr	r3, [pc, #184]	; (800b5fc <__swsetup_r+0xd0>)
 800b544:	429c      	cmp	r4, r3
 800b546:	d10f      	bne.n	800b568 <__swsetup_r+0x3c>
 800b548:	686c      	ldr	r4, [r5, #4]
 800b54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54e:	b29a      	uxth	r2, r3
 800b550:	0715      	lsls	r5, r2, #28
 800b552:	d42c      	bmi.n	800b5ae <__swsetup_r+0x82>
 800b554:	06d0      	lsls	r0, r2, #27
 800b556:	d411      	bmi.n	800b57c <__swsetup_r+0x50>
 800b558:	2209      	movs	r2, #9
 800b55a:	6032      	str	r2, [r6, #0]
 800b55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	f04f 30ff 	mov.w	r0, #4294967295
 800b566:	e03e      	b.n	800b5e6 <__swsetup_r+0xba>
 800b568:	4b25      	ldr	r3, [pc, #148]	; (800b600 <__swsetup_r+0xd4>)
 800b56a:	429c      	cmp	r4, r3
 800b56c:	d101      	bne.n	800b572 <__swsetup_r+0x46>
 800b56e:	68ac      	ldr	r4, [r5, #8]
 800b570:	e7eb      	b.n	800b54a <__swsetup_r+0x1e>
 800b572:	4b24      	ldr	r3, [pc, #144]	; (800b604 <__swsetup_r+0xd8>)
 800b574:	429c      	cmp	r4, r3
 800b576:	bf08      	it	eq
 800b578:	68ec      	ldreq	r4, [r5, #12]
 800b57a:	e7e6      	b.n	800b54a <__swsetup_r+0x1e>
 800b57c:	0751      	lsls	r1, r2, #29
 800b57e:	d512      	bpl.n	800b5a6 <__swsetup_r+0x7a>
 800b580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b582:	b141      	cbz	r1, 800b596 <__swsetup_r+0x6a>
 800b584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b588:	4299      	cmp	r1, r3
 800b58a:	d002      	beq.n	800b592 <__swsetup_r+0x66>
 800b58c:	4630      	mov	r0, r6
 800b58e:	f001 faf1 	bl	800cb74 <_free_r>
 800b592:	2300      	movs	r3, #0
 800b594:	6363      	str	r3, [r4, #52]	; 0x34
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	6063      	str	r3, [r4, #4]
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	f043 0308 	orr.w	r3, r3, #8
 800b5ac:	81a3      	strh	r3, [r4, #12]
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	b94b      	cbnz	r3, 800b5c6 <__swsetup_r+0x9a>
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5bc:	d003      	beq.n	800b5c6 <__swsetup_r+0x9a>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 ffa5 	bl	800c510 <__smakebuf_r>
 800b5c6:	89a2      	ldrh	r2, [r4, #12]
 800b5c8:	f012 0301 	ands.w	r3, r2, #1
 800b5cc:	d00c      	beq.n	800b5e8 <__swsetup_r+0xbc>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60a3      	str	r3, [r4, #8]
 800b5d2:	6963      	ldr	r3, [r4, #20]
 800b5d4:	425b      	negs	r3, r3
 800b5d6:	61a3      	str	r3, [r4, #24]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	b953      	cbnz	r3, 800b5f2 <__swsetup_r+0xc6>
 800b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b5e4:	d1ba      	bne.n	800b55c <__swsetup_r+0x30>
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	0792      	lsls	r2, r2, #30
 800b5ea:	bf58      	it	pl
 800b5ec:	6963      	ldrpl	r3, [r4, #20]
 800b5ee:	60a3      	str	r3, [r4, #8]
 800b5f0:	e7f2      	b.n	800b5d8 <__swsetup_r+0xac>
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	e7f7      	b.n	800b5e6 <__swsetup_r+0xba>
 800b5f6:	bf00      	nop
 800b5f8:	20000028 	.word	0x20000028
 800b5fc:	0800e038 	.word	0x0800e038
 800b600:	0800e058 	.word	0x0800e058
 800b604:	0800e018 	.word	0x0800e018

0800b608 <quorem>:
 800b608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	6903      	ldr	r3, [r0, #16]
 800b60e:	690c      	ldr	r4, [r1, #16]
 800b610:	42a3      	cmp	r3, r4
 800b612:	4680      	mov	r8, r0
 800b614:	f2c0 8082 	blt.w	800b71c <quorem+0x114>
 800b618:	3c01      	subs	r4, #1
 800b61a:	f101 0714 	add.w	r7, r1, #20
 800b61e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b622:	f100 0614 	add.w	r6, r0, #20
 800b626:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b62a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b62e:	eb06 030c 	add.w	r3, r6, ip
 800b632:	3501      	adds	r5, #1
 800b634:	eb07 090c 	add.w	r9, r7, ip
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b63e:	b395      	cbz	r5, 800b6a6 <quorem+0x9e>
 800b640:	f04f 0a00 	mov.w	sl, #0
 800b644:	4638      	mov	r0, r7
 800b646:	46b6      	mov	lr, r6
 800b648:	46d3      	mov	fp, sl
 800b64a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b64e:	b293      	uxth	r3, r2
 800b650:	fb05 a303 	mla	r3, r5, r3, sl
 800b654:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b658:	b29b      	uxth	r3, r3
 800b65a:	ebab 0303 	sub.w	r3, fp, r3
 800b65e:	0c12      	lsrs	r2, r2, #16
 800b660:	f8de b000 	ldr.w	fp, [lr]
 800b664:	fb05 a202 	mla	r2, r5, r2, sl
 800b668:	fa13 f38b 	uxtah	r3, r3, fp
 800b66c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b670:	fa1f fb82 	uxth.w	fp, r2
 800b674:	f8de 2000 	ldr.w	r2, [lr]
 800b678:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b680:	b29b      	uxth	r3, r3
 800b682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b686:	4581      	cmp	r9, r0
 800b688:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b68c:	f84e 3b04 	str.w	r3, [lr], #4
 800b690:	d2db      	bcs.n	800b64a <quorem+0x42>
 800b692:	f856 300c 	ldr.w	r3, [r6, ip]
 800b696:	b933      	cbnz	r3, 800b6a6 <quorem+0x9e>
 800b698:	9b01      	ldr	r3, [sp, #4]
 800b69a:	3b04      	subs	r3, #4
 800b69c:	429e      	cmp	r6, r3
 800b69e:	461a      	mov	r2, r3
 800b6a0:	d330      	bcc.n	800b704 <quorem+0xfc>
 800b6a2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	f001 f990 	bl	800c9cc <__mcmp>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	db25      	blt.n	800b6fc <quorem+0xf4>
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f04f 0c00 	mov.w	ip, #0
 800b6b8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b6bc:	f8d0 e000 	ldr.w	lr, [r0]
 800b6c0:	b293      	uxth	r3, r2
 800b6c2:	ebac 0303 	sub.w	r3, ip, r3
 800b6c6:	0c12      	lsrs	r2, r2, #16
 800b6c8:	fa13 f38e 	uxtah	r3, r3, lr
 800b6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6da:	45b9      	cmp	r9, r7
 800b6dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6e0:	f840 3b04 	str.w	r3, [r0], #4
 800b6e4:	d2e8      	bcs.n	800b6b8 <quorem+0xb0>
 800b6e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b6ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b6ee:	b92a      	cbnz	r2, 800b6fc <quorem+0xf4>
 800b6f0:	3b04      	subs	r3, #4
 800b6f2:	429e      	cmp	r6, r3
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	d30b      	bcc.n	800b710 <quorem+0x108>
 800b6f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	b003      	add	sp, #12
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	3b04      	subs	r3, #4
 800b708:	2a00      	cmp	r2, #0
 800b70a:	d1ca      	bne.n	800b6a2 <quorem+0x9a>
 800b70c:	3c01      	subs	r4, #1
 800b70e:	e7c5      	b.n	800b69c <quorem+0x94>
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	3b04      	subs	r3, #4
 800b714:	2a00      	cmp	r2, #0
 800b716:	d1ef      	bne.n	800b6f8 <quorem+0xf0>
 800b718:	3c01      	subs	r4, #1
 800b71a:	e7ea      	b.n	800b6f2 <quorem+0xea>
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7ee      	b.n	800b6fe <quorem+0xf6>

0800b720 <_dtoa_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	ec57 6b10 	vmov	r6, r7, d0
 800b728:	b095      	sub	sp, #84	; 0x54
 800b72a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b72c:	9108      	str	r1, [sp, #32]
 800b72e:	4604      	mov	r4, r0
 800b730:	920a      	str	r2, [sp, #40]	; 0x28
 800b732:	9311      	str	r3, [sp, #68]	; 0x44
 800b734:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b738:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b73c:	b93d      	cbnz	r5, 800b74e <_dtoa_r+0x2e>
 800b73e:	2010      	movs	r0, #16
 800b740:	f000 ff26 	bl	800c590 <malloc>
 800b744:	6260      	str	r0, [r4, #36]	; 0x24
 800b746:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b74a:	6005      	str	r5, [r0, #0]
 800b74c:	60c5      	str	r5, [r0, #12]
 800b74e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b750:	6819      	ldr	r1, [r3, #0]
 800b752:	b151      	cbz	r1, 800b76a <_dtoa_r+0x4a>
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	604a      	str	r2, [r1, #4]
 800b758:	2301      	movs	r3, #1
 800b75a:	4093      	lsls	r3, r2
 800b75c:	608b      	str	r3, [r1, #8]
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 ff52 	bl	800c608 <_Bfree>
 800b764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b766:	2200      	movs	r2, #0
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	1e3b      	subs	r3, r7, #0
 800b76c:	bfb9      	ittee	lt
 800b76e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b772:	9303      	strlt	r3, [sp, #12]
 800b774:	2300      	movge	r3, #0
 800b776:	f8c8 3000 	strge.w	r3, [r8]
 800b77a:	9d03      	ldr	r5, [sp, #12]
 800b77c:	4bac      	ldr	r3, [pc, #688]	; (800ba30 <_dtoa_r+0x310>)
 800b77e:	bfbc      	itt	lt
 800b780:	2201      	movlt	r2, #1
 800b782:	f8c8 2000 	strlt.w	r2, [r8]
 800b786:	43ab      	bics	r3, r5
 800b788:	d11b      	bne.n	800b7c2 <_dtoa_r+0xa2>
 800b78a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b78c:	f242 730f 	movw	r3, #9999	; 0x270f
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	9b02      	ldr	r3, [sp, #8]
 800b794:	b923      	cbnz	r3, 800b7a0 <_dtoa_r+0x80>
 800b796:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	f000 84dd 	beq.w	800c15a <_dtoa_r+0xa3a>
 800b7a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7a2:	b953      	cbnz	r3, 800b7ba <_dtoa_r+0x9a>
 800b7a4:	4ba3      	ldr	r3, [pc, #652]	; (800ba34 <_dtoa_r+0x314>)
 800b7a6:	e020      	b.n	800b7ea <_dtoa_r+0xca>
 800b7a8:	4ba3      	ldr	r3, [pc, #652]	; (800ba38 <_dtoa_r+0x318>)
 800b7aa:	9304      	str	r3, [sp, #16]
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b7b0:	6013      	str	r3, [r2, #0]
 800b7b2:	9804      	ldr	r0, [sp, #16]
 800b7b4:	b015      	add	sp, #84	; 0x54
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	4b9e      	ldr	r3, [pc, #632]	; (800ba34 <_dtoa_r+0x314>)
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	3303      	adds	r3, #3
 800b7c0:	e7f5      	b.n	800b7ae <_dtoa_r+0x8e>
 800b7c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b7d2:	d10c      	bne.n	800b7ee <_dtoa_r+0xce>
 800b7d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 84b9 	beq.w	800c154 <_dtoa_r+0xa34>
 800b7e2:	4b96      	ldr	r3, [pc, #600]	; (800ba3c <_dtoa_r+0x31c>)
 800b7e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	e7e1      	b.n	800b7b2 <_dtoa_r+0x92>
 800b7ee:	a913      	add	r1, sp, #76	; 0x4c
 800b7f0:	aa12      	add	r2, sp, #72	; 0x48
 800b7f2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f001 f95f 	bl	800caba <__d2b>
 800b7fc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800b800:	9001      	str	r0, [sp, #4]
 800b802:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b804:	2e00      	cmp	r6, #0
 800b806:	d046      	beq.n	800b896 <_dtoa_r+0x176>
 800b808:	9805      	ldr	r0, [sp, #20]
 800b80a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800b80e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b812:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800b816:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b81a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800b81e:	2700      	movs	r7, #0
 800b820:	ee07 aa90 	vmov	s15, sl
 800b824:	ec43 2b16 	vmov	d6, r2, r3
 800b828:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b82c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ba18 <_dtoa_r+0x2f8>
 800b830:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b834:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b838:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ba20 <_dtoa_r+0x300>
 800b83c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800b840:	eeb0 7b46 	vmov.f64	d7, d6
 800b844:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ba28 <_dtoa_r+0x308>
 800b848:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b84c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b858:	ee16 ba90 	vmov	fp, s13
 800b85c:	d508      	bpl.n	800b870 <_dtoa_r+0x150>
 800b85e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b862:	eeb4 6b47 	vcmp.f64	d6, d7
 800b866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86a:	bf18      	it	ne
 800b86c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b870:	f1bb 0f16 	cmp.w	fp, #22
 800b874:	d834      	bhi.n	800b8e0 <_dtoa_r+0x1c0>
 800b876:	4b72      	ldr	r3, [pc, #456]	; (800ba40 <_dtoa_r+0x320>)
 800b878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b87c:	ed93 7b00 	vldr	d7, [r3]
 800b880:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b884:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b88c:	dd01      	ble.n	800b892 <_dtoa_r+0x172>
 800b88e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b892:	2300      	movs	r3, #0
 800b894:	e025      	b.n	800b8e2 <_dtoa_r+0x1c2>
 800b896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b898:	eb01 0a03 	add.w	sl, r1, r3
 800b89c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800b8a0:	2b20      	cmp	r3, #32
 800b8a2:	dd17      	ble.n	800b8d4 <_dtoa_r+0x1b4>
 800b8a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b8a8:	9a02      	ldr	r2, [sp, #8]
 800b8aa:	409d      	lsls	r5, r3
 800b8ac:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800b8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8b4:	432b      	orrs	r3, r5
 800b8b6:	ee07 3a90 	vmov	s15, r3
 800b8ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b8be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8cc:	2701      	movs	r7, #1
 800b8ce:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800b8d2:	e7a5      	b.n	800b820 <_dtoa_r+0x100>
 800b8d4:	9a02      	ldr	r2, [sp, #8]
 800b8d6:	f1c3 0320 	rsb	r3, r3, #32
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	e7ea      	b.n	800b8b6 <_dtoa_r+0x196>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	eba1 0a0a 	sub.w	sl, r1, sl
 800b8e6:	9310      	str	r3, [sp, #64]	; 0x40
 800b8e8:	f1ba 0301 	subs.w	r3, sl, #1
 800b8ec:	9307      	str	r3, [sp, #28]
 800b8ee:	bf43      	ittte	mi
 800b8f0:	2300      	movmi	r3, #0
 800b8f2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800b8f6:	9307      	strmi	r3, [sp, #28]
 800b8f8:	f04f 0a00 	movpl.w	sl, #0
 800b8fc:	f1bb 0f00 	cmp.w	fp, #0
 800b900:	db19      	blt.n	800b936 <_dtoa_r+0x216>
 800b902:	9b07      	ldr	r3, [sp, #28]
 800b904:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b908:	445b      	add	r3, fp
 800b90a:	9307      	str	r3, [sp, #28]
 800b90c:	f04f 0800 	mov.w	r8, #0
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	2b09      	cmp	r3, #9
 800b914:	d866      	bhi.n	800b9e4 <_dtoa_r+0x2c4>
 800b916:	2b05      	cmp	r3, #5
 800b918:	bfc4      	itt	gt
 800b91a:	3b04      	subgt	r3, #4
 800b91c:	9308      	strgt	r3, [sp, #32]
 800b91e:	9b08      	ldr	r3, [sp, #32]
 800b920:	f1a3 0302 	sub.w	r3, r3, #2
 800b924:	bfcc      	ite	gt
 800b926:	2500      	movgt	r5, #0
 800b928:	2501      	movle	r5, #1
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d866      	bhi.n	800b9fc <_dtoa_r+0x2dc>
 800b92e:	e8df f003 	tbb	[pc, r3]
 800b932:	5755      	.short	0x5755
 800b934:	4909      	.short	0x4909
 800b936:	2300      	movs	r3, #0
 800b938:	ebaa 0a0b 	sub.w	sl, sl, fp
 800b93c:	f1cb 0800 	rsb	r8, fp, #0
 800b940:	930b      	str	r3, [sp, #44]	; 0x2c
 800b942:	e7e5      	b.n	800b910 <_dtoa_r+0x1f0>
 800b944:	2301      	movs	r3, #1
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dd59      	ble.n	800ba02 <_dtoa_r+0x2e2>
 800b94e:	9306      	str	r3, [sp, #24]
 800b950:	4699      	mov	r9, r3
 800b952:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b954:	2200      	movs	r2, #0
 800b956:	6072      	str	r2, [r6, #4]
 800b958:	2204      	movs	r2, #4
 800b95a:	f102 0014 	add.w	r0, r2, #20
 800b95e:	4298      	cmp	r0, r3
 800b960:	6871      	ldr	r1, [r6, #4]
 800b962:	d953      	bls.n	800ba0c <_dtoa_r+0x2ec>
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fe1b 	bl	800c5a0 <_Balloc>
 800b96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96c:	6030      	str	r0, [r6, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	f1b9 0f0e 	cmp.w	r9, #14
 800b976:	f200 80c2 	bhi.w	800bafe <_dtoa_r+0x3de>
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	f000 80bf 	beq.w	800bafe <_dtoa_r+0x3de>
 800b980:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b984:	f1bb 0f00 	cmp.w	fp, #0
 800b988:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b98c:	f340 80e6 	ble.w	800bb5c <_dtoa_r+0x43c>
 800b990:	4a2b      	ldr	r2, [pc, #172]	; (800ba40 <_dtoa_r+0x320>)
 800b992:	f00b 030f 	and.w	r3, fp, #15
 800b996:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b99a:	ed93 7b00 	vldr	d7, [r3]
 800b99e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800b9a2:	06da      	lsls	r2, r3, #27
 800b9a4:	f140 80d8 	bpl.w	800bb58 <_dtoa_r+0x438>
 800b9a8:	4a26      	ldr	r2, [pc, #152]	; (800ba44 <_dtoa_r+0x324>)
 800b9aa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800b9ae:	ed92 6b08 	vldr	d6, [r2, #32]
 800b9b2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b9b6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b9ba:	f003 030f 	and.w	r3, r3, #15
 800b9be:	2203      	movs	r2, #3
 800b9c0:	4920      	ldr	r1, [pc, #128]	; (800ba44 <_dtoa_r+0x324>)
 800b9c2:	e04a      	b.n	800ba5a <_dtoa_r+0x33a>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ca:	445b      	add	r3, fp
 800b9cc:	f103 0901 	add.w	r9, r3, #1
 800b9d0:	9306      	str	r3, [sp, #24]
 800b9d2:	464b      	mov	r3, r9
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	bfb8      	it	lt
 800b9d8:	2301      	movlt	r3, #1
 800b9da:	e7ba      	b.n	800b952 <_dtoa_r+0x232>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e7b2      	b.n	800b946 <_dtoa_r+0x226>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	e7f0      	b.n	800b9c6 <_dtoa_r+0x2a6>
 800b9e4:	2501      	movs	r5, #1
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800b9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f0:	9306      	str	r3, [sp, #24]
 800b9f2:	4699      	mov	r9, r3
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2312      	movs	r3, #18
 800b9f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9fa:	e7aa      	b.n	800b952 <_dtoa_r+0x232>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ba00:	e7f4      	b.n	800b9ec <_dtoa_r+0x2cc>
 800ba02:	2301      	movs	r3, #1
 800ba04:	9306      	str	r3, [sp, #24]
 800ba06:	4699      	mov	r9, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	e7f5      	b.n	800b9f8 <_dtoa_r+0x2d8>
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	6071      	str	r1, [r6, #4]
 800ba10:	0052      	lsls	r2, r2, #1
 800ba12:	e7a2      	b.n	800b95a <_dtoa_r+0x23a>
 800ba14:	f3af 8000 	nop.w
 800ba18:	636f4361 	.word	0x636f4361
 800ba1c:	3fd287a7 	.word	0x3fd287a7
 800ba20:	8b60c8b3 	.word	0x8b60c8b3
 800ba24:	3fc68a28 	.word	0x3fc68a28
 800ba28:	509f79fb 	.word	0x509f79fb
 800ba2c:	3fd34413 	.word	0x3fd34413
 800ba30:	7ff00000 	.word	0x7ff00000
 800ba34:	0800e011 	.word	0x0800e011
 800ba38:	0800e008 	.word	0x0800e008
 800ba3c:	0800dfe5 	.word	0x0800dfe5
 800ba40:	0800e0a0 	.word	0x0800e0a0
 800ba44:	0800e078 	.word	0x0800e078
 800ba48:	07de      	lsls	r6, r3, #31
 800ba4a:	d504      	bpl.n	800ba56 <_dtoa_r+0x336>
 800ba4c:	ed91 6b00 	vldr	d6, [r1]
 800ba50:	3201      	adds	r2, #1
 800ba52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba56:	105b      	asrs	r3, r3, #1
 800ba58:	3108      	adds	r1, #8
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f4      	bne.n	800ba48 <_dtoa_r+0x328>
 800ba5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ba66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 80a7 	beq.w	800bbc0 <_dtoa_r+0x4a0>
 800ba72:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ba76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba82:	f140 809d 	bpl.w	800bbc0 <_dtoa_r+0x4a0>
 800ba86:	f1b9 0f00 	cmp.w	r9, #0
 800ba8a:	f000 8099 	beq.w	800bbc0 <_dtoa_r+0x4a0>
 800ba8e:	9b06      	ldr	r3, [sp, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dd30      	ble.n	800baf6 <_dtoa_r+0x3d6>
 800ba94:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ba98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800baa0:	9d06      	ldr	r5, [sp, #24]
 800baa2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800baa6:	3201      	adds	r2, #1
 800baa8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800baac:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bab0:	ee07 2a90 	vmov	s15, r2
 800bab4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bab8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800babc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bac0:	9a03      	ldr	r2, [sp, #12]
 800bac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800baca:	2d00      	cmp	r5, #0
 800bacc:	d17b      	bne.n	800bbc6 <_dtoa_r+0x4a6>
 800bace:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bad2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bad6:	ec41 0b17 	vmov	d7, r0, r1
 800bada:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae2:	f300 8253 	bgt.w	800bf8c <_dtoa_r+0x86c>
 800bae6:	eeb1 7b47 	vneg.f64	d7, d7
 800baea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	f100 8249 	bmi.w	800bf88 <_dtoa_r+0x868>
 800baf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bafa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bafe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f2c0 8119 	blt.w	800bd38 <_dtoa_r+0x618>
 800bb06:	f1bb 0f0e 	cmp.w	fp, #14
 800bb0a:	f300 8115 	bgt.w	800bd38 <_dtoa_r+0x618>
 800bb0e:	4bc3      	ldr	r3, [pc, #780]	; (800be1c <_dtoa_r+0x6fc>)
 800bb10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb14:	ed93 6b00 	vldr	d6, [r3]
 800bb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f280 80ba 	bge.w	800bc94 <_dtoa_r+0x574>
 800bb20:	f1b9 0f00 	cmp.w	r9, #0
 800bb24:	f300 80b6 	bgt.w	800bc94 <_dtoa_r+0x574>
 800bb28:	f040 822d 	bne.w	800bf86 <_dtoa_r+0x866>
 800bb2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bb30:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bb34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb40:	464d      	mov	r5, r9
 800bb42:	464f      	mov	r7, r9
 800bb44:	f280 8204 	bge.w	800bf50 <_dtoa_r+0x830>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	9a04      	ldr	r2, [sp, #16]
 800bb4c:	1c5e      	adds	r6, r3, #1
 800bb4e:	2331      	movs	r3, #49	; 0x31
 800bb50:	7013      	strb	r3, [r2, #0]
 800bb52:	f10b 0b01 	add.w	fp, fp, #1
 800bb56:	e1ff      	b.n	800bf58 <_dtoa_r+0x838>
 800bb58:	2202      	movs	r2, #2
 800bb5a:	e731      	b.n	800b9c0 <_dtoa_r+0x2a0>
 800bb5c:	d02e      	beq.n	800bbbc <_dtoa_r+0x49c>
 800bb5e:	f1cb 0300 	rsb	r3, fp, #0
 800bb62:	4aae      	ldr	r2, [pc, #696]	; (800be1c <_dtoa_r+0x6fc>)
 800bb64:	f003 010f 	and.w	r1, r3, #15
 800bb68:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb6c:	ed92 7b00 	vldr	d7, [r2]
 800bb70:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800bb74:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bb78:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bb7c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800bb80:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bb84:	49a6      	ldr	r1, [pc, #664]	; (800be20 <_dtoa_r+0x700>)
 800bb86:	111b      	asrs	r3, r3, #4
 800bb88:	2000      	movs	r0, #0
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	b93b      	cbnz	r3, 800bb9e <_dtoa_r+0x47e>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f af6b 	beq.w	800ba6a <_dtoa_r+0x34a>
 800bb94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb9c:	e765      	b.n	800ba6a <_dtoa_r+0x34a>
 800bb9e:	07dd      	lsls	r5, r3, #31
 800bba0:	d509      	bpl.n	800bbb6 <_dtoa_r+0x496>
 800bba2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bba6:	ed91 7b00 	vldr	d7, [r1]
 800bbaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bbae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bbb2:	3201      	adds	r2, #1
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	105b      	asrs	r3, r3, #1
 800bbb8:	3108      	adds	r1, #8
 800bbba:	e7e7      	b.n	800bb8c <_dtoa_r+0x46c>
 800bbbc:	2202      	movs	r2, #2
 800bbbe:	e754      	b.n	800ba6a <_dtoa_r+0x34a>
 800bbc0:	465b      	mov	r3, fp
 800bbc2:	464d      	mov	r5, r9
 800bbc4:	e770      	b.n	800baa8 <_dtoa_r+0x388>
 800bbc6:	4a95      	ldr	r2, [pc, #596]	; (800be1c <_dtoa_r+0x6fc>)
 800bbc8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800bbcc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbd2:	ec41 0b17 	vmov	d7, r0, r1
 800bbd6:	b35a      	cbz	r2, 800bc30 <_dtoa_r+0x510>
 800bbd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bbdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bbe0:	9e04      	ldr	r6, [sp, #16]
 800bbe2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bbe6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bbea:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bbf2:	ee14 2a90 	vmov	r2, s9
 800bbf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbfa:	3230      	adds	r2, #48	; 0x30
 800bbfc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc08:	f806 2b01 	strb.w	r2, [r6], #1
 800bc0c:	d43b      	bmi.n	800bc86 <_dtoa_r+0x566>
 800bc0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bc12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1a:	d472      	bmi.n	800bd02 <_dtoa_r+0x5e2>
 800bc1c:	9a04      	ldr	r2, [sp, #16]
 800bc1e:	1ab2      	subs	r2, r6, r2
 800bc20:	4295      	cmp	r5, r2
 800bc22:	f77f af68 	ble.w	800baf6 <_dtoa_r+0x3d6>
 800bc26:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bc2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc2e:	e7de      	b.n	800bbee <_dtoa_r+0x4ce>
 800bc30:	9a04      	ldr	r2, [sp, #16]
 800bc32:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bc36:	1956      	adds	r6, r2, r5
 800bc38:	4611      	mov	r1, r2
 800bc3a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bc3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc42:	ee14 2a90 	vmov	r2, s9
 800bc46:	3230      	adds	r2, #48	; 0x30
 800bc48:	f801 2b01 	strb.w	r2, [r1], #1
 800bc4c:	42b1      	cmp	r1, r6
 800bc4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bc52:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc56:	d11a      	bne.n	800bc8e <_dtoa_r+0x56e>
 800bc58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bc5c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bc60:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc68:	dc4b      	bgt.n	800bd02 <_dtoa_r+0x5e2>
 800bc6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bc6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc76:	f57f af3e 	bpl.w	800baf6 <_dtoa_r+0x3d6>
 800bc7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc7e:	2a30      	cmp	r2, #48	; 0x30
 800bc80:	f106 31ff 	add.w	r1, r6, #4294967295
 800bc84:	d001      	beq.n	800bc8a <_dtoa_r+0x56a>
 800bc86:	469b      	mov	fp, r3
 800bc88:	e02a      	b.n	800bce0 <_dtoa_r+0x5c0>
 800bc8a:	460e      	mov	r6, r1
 800bc8c:	e7f5      	b.n	800bc7a <_dtoa_r+0x55a>
 800bc8e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc92:	e7d4      	b.n	800bc3e <_dtoa_r+0x51e>
 800bc94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc98:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bc9c:	9e04      	ldr	r6, [sp, #16]
 800bc9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bca2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bca6:	ee15 3a10 	vmov	r3, s10
 800bcaa:	3330      	adds	r3, #48	; 0x30
 800bcac:	f806 3b01 	strb.w	r3, [r6], #1
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	1af3      	subs	r3, r6, r3
 800bcb4:	4599      	cmp	r9, r3
 800bcb6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bcba:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bcbe:	d133      	bne.n	800bd28 <_dtoa_r+0x608>
 800bcc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bcc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bccc:	dc18      	bgt.n	800bd00 <_dtoa_r+0x5e0>
 800bcce:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd6:	d103      	bne.n	800bce0 <_dtoa_r+0x5c0>
 800bcd8:	ee15 3a10 	vmov	r3, s10
 800bcdc:	07db      	lsls	r3, r3, #31
 800bcde:	d40f      	bmi.n	800bd00 <_dtoa_r+0x5e0>
 800bce0:	9901      	ldr	r1, [sp, #4]
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 fc90 	bl	800c608 <_Bfree>
 800bce8:	2300      	movs	r3, #0
 800bcea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcec:	7033      	strb	r3, [r6, #0]
 800bcee:	f10b 0301 	add.w	r3, fp, #1
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f43f ad5b 	beq.w	800b7b2 <_dtoa_r+0x92>
 800bcfc:	601e      	str	r6, [r3, #0]
 800bcfe:	e558      	b.n	800b7b2 <_dtoa_r+0x92>
 800bd00:	465b      	mov	r3, fp
 800bd02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd06:	2939      	cmp	r1, #57	; 0x39
 800bd08:	f106 32ff 	add.w	r2, r6, #4294967295
 800bd0c:	d106      	bne.n	800bd1c <_dtoa_r+0x5fc>
 800bd0e:	9904      	ldr	r1, [sp, #16]
 800bd10:	4291      	cmp	r1, r2
 800bd12:	d107      	bne.n	800bd24 <_dtoa_r+0x604>
 800bd14:	2230      	movs	r2, #48	; 0x30
 800bd16:	700a      	strb	r2, [r1, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	460a      	mov	r2, r1
 800bd1c:	7811      	ldrb	r1, [r2, #0]
 800bd1e:	3101      	adds	r1, #1
 800bd20:	7011      	strb	r1, [r2, #0]
 800bd22:	e7b0      	b.n	800bc86 <_dtoa_r+0x566>
 800bd24:	4616      	mov	r6, r2
 800bd26:	e7ec      	b.n	800bd02 <_dtoa_r+0x5e2>
 800bd28:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd34:	d1b3      	bne.n	800bc9e <_dtoa_r+0x57e>
 800bd36:	e7d3      	b.n	800bce0 <_dtoa_r+0x5c0>
 800bd38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	f000 808d 	beq.w	800be5a <_dtoa_r+0x73a>
 800bd40:	9a08      	ldr	r2, [sp, #32]
 800bd42:	2a01      	cmp	r2, #1
 800bd44:	dc72      	bgt.n	800be2c <_dtoa_r+0x70c>
 800bd46:	2f00      	cmp	r7, #0
 800bd48:	d06c      	beq.n	800be24 <_dtoa_r+0x704>
 800bd4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd4e:	4645      	mov	r5, r8
 800bd50:	4656      	mov	r6, sl
 800bd52:	9a07      	ldr	r2, [sp, #28]
 800bd54:	2101      	movs	r1, #1
 800bd56:	441a      	add	r2, r3
 800bd58:	4620      	mov	r0, r4
 800bd5a:	449a      	add	sl, r3
 800bd5c:	9207      	str	r2, [sp, #28]
 800bd5e:	f000 fcf3 	bl	800c748 <__i2b>
 800bd62:	4607      	mov	r7, r0
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	dd0b      	ble.n	800bd80 <_dtoa_r+0x660>
 800bd68:	9b07      	ldr	r3, [sp, #28]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dd08      	ble.n	800bd80 <_dtoa_r+0x660>
 800bd6e:	42b3      	cmp	r3, r6
 800bd70:	9a07      	ldr	r2, [sp, #28]
 800bd72:	bfa8      	it	ge
 800bd74:	4633      	movge	r3, r6
 800bd76:	ebaa 0a03 	sub.w	sl, sl, r3
 800bd7a:	1af6      	subs	r6, r6, r3
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	9307      	str	r3, [sp, #28]
 800bd80:	f1b8 0f00 	cmp.w	r8, #0
 800bd84:	d01d      	beq.n	800bdc2 <_dtoa_r+0x6a2>
 800bd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d06a      	beq.n	800be62 <_dtoa_r+0x742>
 800bd8c:	b18d      	cbz	r5, 800bdb2 <_dtoa_r+0x692>
 800bd8e:	4639      	mov	r1, r7
 800bd90:	462a      	mov	r2, r5
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fd78 	bl	800c888 <__pow5mult>
 800bd98:	9a01      	ldr	r2, [sp, #4]
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 fcdb 	bl	800c75a <__multiply>
 800bda4:	9901      	ldr	r1, [sp, #4]
 800bda6:	900c      	str	r0, [sp, #48]	; 0x30
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f000 fc2d 	bl	800c608 <_Bfree>
 800bdae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	ebb8 0205 	subs.w	r2, r8, r5
 800bdb6:	d004      	beq.n	800bdc2 <_dtoa_r+0x6a2>
 800bdb8:	9901      	ldr	r1, [sp, #4]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fd64 	bl	800c888 <__pow5mult>
 800bdc0:	9001      	str	r0, [sp, #4]
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 fcbf 	bl	800c748 <__i2b>
 800bdca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdcc:	4605      	mov	r5, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 81ca 	beq.w	800c168 <_dtoa_r+0xa48>
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 fd55 	bl	800c888 <__pow5mult>
 800bdde:	9b08      	ldr	r3, [sp, #32]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	4605      	mov	r5, r0
 800bde4:	dc44      	bgt.n	800be70 <_dtoa_r+0x750>
 800bde6:	9b02      	ldr	r3, [sp, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d13c      	bne.n	800be66 <_dtoa_r+0x746>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d137      	bne.n	800be66 <_dtoa_r+0x746>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdfc:	0d1b      	lsrs	r3, r3, #20
 800bdfe:	051b      	lsls	r3, r3, #20
 800be00:	2b00      	cmp	r3, #0
 800be02:	d033      	beq.n	800be6c <_dtoa_r+0x74c>
 800be04:	9b07      	ldr	r3, [sp, #28]
 800be06:	3301      	adds	r3, #1
 800be08:	f10a 0a01 	add.w	sl, sl, #1
 800be0c:	9307      	str	r3, [sp, #28]
 800be0e:	f04f 0801 	mov.w	r8, #1
 800be12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be14:	bb73      	cbnz	r3, 800be74 <_dtoa_r+0x754>
 800be16:	2001      	movs	r0, #1
 800be18:	e034      	b.n	800be84 <_dtoa_r+0x764>
 800be1a:	bf00      	nop
 800be1c:	0800e0a0 	.word	0x0800e0a0
 800be20:	0800e078 	.word	0x0800e078
 800be24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be2a:	e790      	b.n	800bd4e <_dtoa_r+0x62e>
 800be2c:	f109 35ff 	add.w	r5, r9, #4294967295
 800be30:	45a8      	cmp	r8, r5
 800be32:	bfbf      	itttt	lt
 800be34:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800be36:	eba5 0808 	sublt.w	r8, r5, r8
 800be3a:	4443      	addlt	r3, r8
 800be3c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800be3e:	bfb6      	itet	lt
 800be40:	46a8      	movlt	r8, r5
 800be42:	eba8 0505 	subge.w	r5, r8, r5
 800be46:	2500      	movlt	r5, #0
 800be48:	f1b9 0f00 	cmp.w	r9, #0
 800be4c:	bfb9      	ittee	lt
 800be4e:	ebaa 0609 	sublt.w	r6, sl, r9
 800be52:	2300      	movlt	r3, #0
 800be54:	4656      	movge	r6, sl
 800be56:	464b      	movge	r3, r9
 800be58:	e77b      	b.n	800bd52 <_dtoa_r+0x632>
 800be5a:	4645      	mov	r5, r8
 800be5c:	4656      	mov	r6, sl
 800be5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be60:	e780      	b.n	800bd64 <_dtoa_r+0x644>
 800be62:	4642      	mov	r2, r8
 800be64:	e7a8      	b.n	800bdb8 <_dtoa_r+0x698>
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	e7d2      	b.n	800be12 <_dtoa_r+0x6f2>
 800be6c:	4698      	mov	r8, r3
 800be6e:	e7d0      	b.n	800be12 <_dtoa_r+0x6f2>
 800be70:	f04f 0800 	mov.w	r8, #0
 800be74:	692b      	ldr	r3, [r5, #16]
 800be76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800be7a:	6918      	ldr	r0, [r3, #16]
 800be7c:	f000 fc16 	bl	800c6ac <__hi0bits>
 800be80:	f1c0 0020 	rsb	r0, r0, #32
 800be84:	9b07      	ldr	r3, [sp, #28]
 800be86:	4418      	add	r0, r3
 800be88:	f010 001f 	ands.w	r0, r0, #31
 800be8c:	d047      	beq.n	800bf1e <_dtoa_r+0x7fe>
 800be8e:	f1c0 0320 	rsb	r3, r0, #32
 800be92:	2b04      	cmp	r3, #4
 800be94:	dd3b      	ble.n	800bf0e <_dtoa_r+0x7ee>
 800be96:	9b07      	ldr	r3, [sp, #28]
 800be98:	f1c0 001c 	rsb	r0, r0, #28
 800be9c:	4482      	add	sl, r0
 800be9e:	4406      	add	r6, r0
 800bea0:	4403      	add	r3, r0
 800bea2:	9307      	str	r3, [sp, #28]
 800bea4:	f1ba 0f00 	cmp.w	sl, #0
 800bea8:	dd05      	ble.n	800beb6 <_dtoa_r+0x796>
 800beaa:	4652      	mov	r2, sl
 800beac:	9901      	ldr	r1, [sp, #4]
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 fd38 	bl	800c924 <__lshift>
 800beb4:	9001      	str	r0, [sp, #4]
 800beb6:	9b07      	ldr	r3, [sp, #28]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dd05      	ble.n	800bec8 <_dtoa_r+0x7a8>
 800bebc:	4629      	mov	r1, r5
 800bebe:	461a      	mov	r2, r3
 800bec0:	4620      	mov	r0, r4
 800bec2:	f000 fd2f 	bl	800c924 <__lshift>
 800bec6:	4605      	mov	r5, r0
 800bec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beca:	b353      	cbz	r3, 800bf22 <_dtoa_r+0x802>
 800becc:	4629      	mov	r1, r5
 800bece:	9801      	ldr	r0, [sp, #4]
 800bed0:	f000 fd7c 	bl	800c9cc <__mcmp>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	da24      	bge.n	800bf22 <_dtoa_r+0x802>
 800bed8:	2300      	movs	r3, #0
 800beda:	220a      	movs	r2, #10
 800bedc:	9901      	ldr	r1, [sp, #4]
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 fba9 	bl	800c636 <__multadd>
 800bee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee6:	9001      	str	r0, [sp, #4]
 800bee8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 8142 	beq.w	800c176 <_dtoa_r+0xa56>
 800bef2:	2300      	movs	r3, #0
 800bef4:	4639      	mov	r1, r7
 800bef6:	220a      	movs	r2, #10
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 fb9c 	bl	800c636 <__multadd>
 800befe:	9b06      	ldr	r3, [sp, #24]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	4607      	mov	r7, r0
 800bf04:	dc4b      	bgt.n	800bf9e <_dtoa_r+0x87e>
 800bf06:	9b08      	ldr	r3, [sp, #32]
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	dd48      	ble.n	800bf9e <_dtoa_r+0x87e>
 800bf0c:	e011      	b.n	800bf32 <_dtoa_r+0x812>
 800bf0e:	d0c9      	beq.n	800bea4 <_dtoa_r+0x784>
 800bf10:	9a07      	ldr	r2, [sp, #28]
 800bf12:	331c      	adds	r3, #28
 800bf14:	441a      	add	r2, r3
 800bf16:	449a      	add	sl, r3
 800bf18:	441e      	add	r6, r3
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	e7c1      	b.n	800bea2 <_dtoa_r+0x782>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	e7f6      	b.n	800bf10 <_dtoa_r+0x7f0>
 800bf22:	f1b9 0f00 	cmp.w	r9, #0
 800bf26:	dc34      	bgt.n	800bf92 <_dtoa_r+0x872>
 800bf28:	9b08      	ldr	r3, [sp, #32]
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	dd31      	ble.n	800bf92 <_dtoa_r+0x872>
 800bf2e:	f8cd 9018 	str.w	r9, [sp, #24]
 800bf32:	9b06      	ldr	r3, [sp, #24]
 800bf34:	b963      	cbnz	r3, 800bf50 <_dtoa_r+0x830>
 800bf36:	4629      	mov	r1, r5
 800bf38:	2205      	movs	r2, #5
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 fb7b 	bl	800c636 <__multadd>
 800bf40:	4601      	mov	r1, r0
 800bf42:	4605      	mov	r5, r0
 800bf44:	9801      	ldr	r0, [sp, #4]
 800bf46:	f000 fd41 	bl	800c9cc <__mcmp>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f73f adfc 	bgt.w	800bb48 <_dtoa_r+0x428>
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	9e04      	ldr	r6, [sp, #16]
 800bf54:	ea6f 0b03 	mvn.w	fp, r3
 800bf58:	f04f 0900 	mov.w	r9, #0
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fb52 	bl	800c608 <_Bfree>
 800bf64:	2f00      	cmp	r7, #0
 800bf66:	f43f aebb 	beq.w	800bce0 <_dtoa_r+0x5c0>
 800bf6a:	f1b9 0f00 	cmp.w	r9, #0
 800bf6e:	d005      	beq.n	800bf7c <_dtoa_r+0x85c>
 800bf70:	45b9      	cmp	r9, r7
 800bf72:	d003      	beq.n	800bf7c <_dtoa_r+0x85c>
 800bf74:	4649      	mov	r1, r9
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 fb46 	bl	800c608 <_Bfree>
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 fb42 	bl	800c608 <_Bfree>
 800bf84:	e6ac      	b.n	800bce0 <_dtoa_r+0x5c0>
 800bf86:	2500      	movs	r5, #0
 800bf88:	462f      	mov	r7, r5
 800bf8a:	e7e1      	b.n	800bf50 <_dtoa_r+0x830>
 800bf8c:	469b      	mov	fp, r3
 800bf8e:	462f      	mov	r7, r5
 800bf90:	e5da      	b.n	800bb48 <_dtoa_r+0x428>
 800bf92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf94:	f8cd 9018 	str.w	r9, [sp, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 80f3 	beq.w	800c184 <_dtoa_r+0xa64>
 800bf9e:	2e00      	cmp	r6, #0
 800bfa0:	dd05      	ble.n	800bfae <_dtoa_r+0x88e>
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 fcbc 	bl	800c924 <__lshift>
 800bfac:	4607      	mov	r7, r0
 800bfae:	f1b8 0f00 	cmp.w	r8, #0
 800bfb2:	d04c      	beq.n	800c04e <_dtoa_r+0x92e>
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 faf2 	bl	800c5a0 <_Balloc>
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	3202      	adds	r2, #2
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	0092      	lsls	r2, r2, #2
 800bfc4:	f107 010c 	add.w	r1, r7, #12
 800bfc8:	300c      	adds	r0, #12
 800bfca:	f7fe fd95 	bl	800aaf8 <memcpy>
 800bfce:	2201      	movs	r2, #1
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f000 fca6 	bl	800c924 <__lshift>
 800bfd8:	9b02      	ldr	r3, [sp, #8]
 800bfda:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	46b9      	mov	r9, r7
 800bfe4:	9307      	str	r3, [sp, #28]
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	4629      	mov	r1, r5
 800bfea:	9801      	ldr	r0, [sp, #4]
 800bfec:	f7ff fb0c 	bl	800b608 <quorem>
 800bff0:	4649      	mov	r1, r9
 800bff2:	4606      	mov	r6, r0
 800bff4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bff8:	9801      	ldr	r0, [sp, #4]
 800bffa:	f000 fce7 	bl	800c9cc <__mcmp>
 800bffe:	463a      	mov	r2, r7
 800c000:	9002      	str	r0, [sp, #8]
 800c002:	4629      	mov	r1, r5
 800c004:	4620      	mov	r0, r4
 800c006:	f000 fcfb 	bl	800ca00 <__mdiff>
 800c00a:	68c3      	ldr	r3, [r0, #12]
 800c00c:	4602      	mov	r2, r0
 800c00e:	bb03      	cbnz	r3, 800c052 <_dtoa_r+0x932>
 800c010:	4601      	mov	r1, r0
 800c012:	9009      	str	r0, [sp, #36]	; 0x24
 800c014:	9801      	ldr	r0, [sp, #4]
 800c016:	f000 fcd9 	bl	800c9cc <__mcmp>
 800c01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c01c:	4603      	mov	r3, r0
 800c01e:	4611      	mov	r1, r2
 800c020:	4620      	mov	r0, r4
 800c022:	9309      	str	r3, [sp, #36]	; 0x24
 800c024:	f000 faf0 	bl	800c608 <_Bfree>
 800c028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02a:	b9a3      	cbnz	r3, 800c056 <_dtoa_r+0x936>
 800c02c:	9a08      	ldr	r2, [sp, #32]
 800c02e:	b992      	cbnz	r2, 800c056 <_dtoa_r+0x936>
 800c030:	9a07      	ldr	r2, [sp, #28]
 800c032:	b982      	cbnz	r2, 800c056 <_dtoa_r+0x936>
 800c034:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c038:	d029      	beq.n	800c08e <_dtoa_r+0x96e>
 800c03a:	9b02      	ldr	r3, [sp, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dd01      	ble.n	800c044 <_dtoa_r+0x924>
 800c040:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c044:	f10a 0601 	add.w	r6, sl, #1
 800c048:	f88a 8000 	strb.w	r8, [sl]
 800c04c:	e786      	b.n	800bf5c <_dtoa_r+0x83c>
 800c04e:	4638      	mov	r0, r7
 800c050:	e7c2      	b.n	800bfd8 <_dtoa_r+0x8b8>
 800c052:	2301      	movs	r3, #1
 800c054:	e7e3      	b.n	800c01e <_dtoa_r+0x8fe>
 800c056:	9a02      	ldr	r2, [sp, #8]
 800c058:	2a00      	cmp	r2, #0
 800c05a:	db04      	blt.n	800c066 <_dtoa_r+0x946>
 800c05c:	d124      	bne.n	800c0a8 <_dtoa_r+0x988>
 800c05e:	9a08      	ldr	r2, [sp, #32]
 800c060:	bb12      	cbnz	r2, 800c0a8 <_dtoa_r+0x988>
 800c062:	9a07      	ldr	r2, [sp, #28]
 800c064:	bb02      	cbnz	r2, 800c0a8 <_dtoa_r+0x988>
 800c066:	2b00      	cmp	r3, #0
 800c068:	ddec      	ble.n	800c044 <_dtoa_r+0x924>
 800c06a:	2201      	movs	r2, #1
 800c06c:	9901      	ldr	r1, [sp, #4]
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fc58 	bl	800c924 <__lshift>
 800c074:	4629      	mov	r1, r5
 800c076:	9001      	str	r0, [sp, #4]
 800c078:	f000 fca8 	bl	800c9cc <__mcmp>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dc03      	bgt.n	800c088 <_dtoa_r+0x968>
 800c080:	d1e0      	bne.n	800c044 <_dtoa_r+0x924>
 800c082:	f018 0f01 	tst.w	r8, #1
 800c086:	d0dd      	beq.n	800c044 <_dtoa_r+0x924>
 800c088:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c08c:	d1d8      	bne.n	800c040 <_dtoa_r+0x920>
 800c08e:	2339      	movs	r3, #57	; 0x39
 800c090:	f10a 0601 	add.w	r6, sl, #1
 800c094:	f88a 3000 	strb.w	r3, [sl]
 800c098:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c09c:	2b39      	cmp	r3, #57	; 0x39
 800c09e:	f106 32ff 	add.w	r2, r6, #4294967295
 800c0a2:	d04c      	beq.n	800c13e <_dtoa_r+0xa1e>
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	e051      	b.n	800c14c <_dtoa_r+0xa2c>
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f10a 0601 	add.w	r6, sl, #1
 800c0ae:	dd05      	ble.n	800c0bc <_dtoa_r+0x99c>
 800c0b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c0b4:	d0eb      	beq.n	800c08e <_dtoa_r+0x96e>
 800c0b6:	f108 0801 	add.w	r8, r8, #1
 800c0ba:	e7c5      	b.n	800c048 <_dtoa_r+0x928>
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	9a06      	ldr	r2, [sp, #24]
 800c0c0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c0c4:	1af3      	subs	r3, r6, r3
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d021      	beq.n	800c10e <_dtoa_r+0x9ee>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	220a      	movs	r2, #10
 800c0ce:	9901      	ldr	r1, [sp, #4]
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 fab0 	bl	800c636 <__multadd>
 800c0d6:	45b9      	cmp	r9, r7
 800c0d8:	9001      	str	r0, [sp, #4]
 800c0da:	f04f 0300 	mov.w	r3, #0
 800c0de:	f04f 020a 	mov.w	r2, #10
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	d105      	bne.n	800c0f4 <_dtoa_r+0x9d4>
 800c0e8:	f000 faa5 	bl	800c636 <__multadd>
 800c0ec:	4681      	mov	r9, r0
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	46b2      	mov	sl, r6
 800c0f2:	e779      	b.n	800bfe8 <_dtoa_r+0x8c8>
 800c0f4:	f000 fa9f 	bl	800c636 <__multadd>
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	4681      	mov	r9, r0
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	220a      	movs	r2, #10
 800c100:	4620      	mov	r0, r4
 800c102:	f000 fa98 	bl	800c636 <__multadd>
 800c106:	4607      	mov	r7, r0
 800c108:	e7f2      	b.n	800c0f0 <_dtoa_r+0x9d0>
 800c10a:	f04f 0900 	mov.w	r9, #0
 800c10e:	2201      	movs	r2, #1
 800c110:	9901      	ldr	r1, [sp, #4]
 800c112:	4620      	mov	r0, r4
 800c114:	f000 fc06 	bl	800c924 <__lshift>
 800c118:	4629      	mov	r1, r5
 800c11a:	9001      	str	r0, [sp, #4]
 800c11c:	f000 fc56 	bl	800c9cc <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	dcb9      	bgt.n	800c098 <_dtoa_r+0x978>
 800c124:	d102      	bne.n	800c12c <_dtoa_r+0xa0c>
 800c126:	f018 0f01 	tst.w	r8, #1
 800c12a:	d1b5      	bne.n	800c098 <_dtoa_r+0x978>
 800c12c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c130:	2b30      	cmp	r3, #48	; 0x30
 800c132:	f106 32ff 	add.w	r2, r6, #4294967295
 800c136:	f47f af11 	bne.w	800bf5c <_dtoa_r+0x83c>
 800c13a:	4616      	mov	r6, r2
 800c13c:	e7f6      	b.n	800c12c <_dtoa_r+0xa0c>
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	4293      	cmp	r3, r2
 800c142:	d105      	bne.n	800c150 <_dtoa_r+0xa30>
 800c144:	9a04      	ldr	r2, [sp, #16]
 800c146:	f10b 0b01 	add.w	fp, fp, #1
 800c14a:	2331      	movs	r3, #49	; 0x31
 800c14c:	7013      	strb	r3, [r2, #0]
 800c14e:	e705      	b.n	800bf5c <_dtoa_r+0x83c>
 800c150:	4616      	mov	r6, r2
 800c152:	e7a1      	b.n	800c098 <_dtoa_r+0x978>
 800c154:	4b16      	ldr	r3, [pc, #88]	; (800c1b0 <_dtoa_r+0xa90>)
 800c156:	f7ff bb48 	b.w	800b7ea <_dtoa_r+0xca>
 800c15a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f47f ab23 	bne.w	800b7a8 <_dtoa_r+0x88>
 800c162:	4b14      	ldr	r3, [pc, #80]	; (800c1b4 <_dtoa_r+0xa94>)
 800c164:	f7ff bb41 	b.w	800b7ea <_dtoa_r+0xca>
 800c168:	9b08      	ldr	r3, [sp, #32]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	f77f ae3b 	ble.w	800bde6 <_dtoa_r+0x6c6>
 800c170:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c174:	e64f      	b.n	800be16 <_dtoa_r+0x6f6>
 800c176:	9b06      	ldr	r3, [sp, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dc03      	bgt.n	800c184 <_dtoa_r+0xa64>
 800c17c:	9b08      	ldr	r3, [sp, #32]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	f73f aed7 	bgt.w	800bf32 <_dtoa_r+0x812>
 800c184:	9e04      	ldr	r6, [sp, #16]
 800c186:	9801      	ldr	r0, [sp, #4]
 800c188:	4629      	mov	r1, r5
 800c18a:	f7ff fa3d 	bl	800b608 <quorem>
 800c18e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c192:	f806 8b01 	strb.w	r8, [r6], #1
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	9a06      	ldr	r2, [sp, #24]
 800c19a:	1af3      	subs	r3, r6, r3
 800c19c:	429a      	cmp	r2, r3
 800c19e:	ddb4      	ble.n	800c10a <_dtoa_r+0x9ea>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	9901      	ldr	r1, [sp, #4]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 fa45 	bl	800c636 <__multadd>
 800c1ac:	9001      	str	r0, [sp, #4]
 800c1ae:	e7ea      	b.n	800c186 <_dtoa_r+0xa66>
 800c1b0:	0800dfe4 	.word	0x0800dfe4
 800c1b4:	0800e008 	.word	0x0800e008

0800c1b8 <__sflush_r>:
 800c1b8:	898a      	ldrh	r2, [r1, #12]
 800c1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1be:	4605      	mov	r5, r0
 800c1c0:	0710      	lsls	r0, r2, #28
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	d458      	bmi.n	800c278 <__sflush_r+0xc0>
 800c1c6:	684b      	ldr	r3, [r1, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	dc05      	bgt.n	800c1d8 <__sflush_r+0x20>
 800c1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dc02      	bgt.n	800c1d8 <__sflush_r+0x20>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	d0f9      	beq.n	800c1d2 <__sflush_r+0x1a>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1e4:	682f      	ldr	r7, [r5, #0]
 800c1e6:	6a21      	ldr	r1, [r4, #32]
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	d032      	beq.n	800c252 <__sflush_r+0x9a>
 800c1ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	075a      	lsls	r2, r3, #29
 800c1f2:	d505      	bpl.n	800c200 <__sflush_r+0x48>
 800c1f4:	6863      	ldr	r3, [r4, #4]
 800c1f6:	1ac0      	subs	r0, r0, r3
 800c1f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1fa:	b10b      	cbz	r3, 800c200 <__sflush_r+0x48>
 800c1fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1fe:	1ac0      	subs	r0, r0, r3
 800c200:	2300      	movs	r3, #0
 800c202:	4602      	mov	r2, r0
 800c204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c206:	6a21      	ldr	r1, [r4, #32]
 800c208:	4628      	mov	r0, r5
 800c20a:	47b0      	blx	r6
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	d106      	bne.n	800c220 <__sflush_r+0x68>
 800c212:	6829      	ldr	r1, [r5, #0]
 800c214:	291d      	cmp	r1, #29
 800c216:	d848      	bhi.n	800c2aa <__sflush_r+0xf2>
 800c218:	4a29      	ldr	r2, [pc, #164]	; (800c2c0 <__sflush_r+0x108>)
 800c21a:	40ca      	lsrs	r2, r1
 800c21c:	07d6      	lsls	r6, r2, #31
 800c21e:	d544      	bpl.n	800c2aa <__sflush_r+0xf2>
 800c220:	2200      	movs	r2, #0
 800c222:	6062      	str	r2, [r4, #4]
 800c224:	04d9      	lsls	r1, r3, #19
 800c226:	6922      	ldr	r2, [r4, #16]
 800c228:	6022      	str	r2, [r4, #0]
 800c22a:	d504      	bpl.n	800c236 <__sflush_r+0x7e>
 800c22c:	1c42      	adds	r2, r0, #1
 800c22e:	d101      	bne.n	800c234 <__sflush_r+0x7c>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b903      	cbnz	r3, 800c236 <__sflush_r+0x7e>
 800c234:	6560      	str	r0, [r4, #84]	; 0x54
 800c236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c238:	602f      	str	r7, [r5, #0]
 800c23a:	2900      	cmp	r1, #0
 800c23c:	d0c9      	beq.n	800c1d2 <__sflush_r+0x1a>
 800c23e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c242:	4299      	cmp	r1, r3
 800c244:	d002      	beq.n	800c24c <__sflush_r+0x94>
 800c246:	4628      	mov	r0, r5
 800c248:	f000 fc94 	bl	800cb74 <_free_r>
 800c24c:	2000      	movs	r0, #0
 800c24e:	6360      	str	r0, [r4, #52]	; 0x34
 800c250:	e7c0      	b.n	800c1d4 <__sflush_r+0x1c>
 800c252:	2301      	movs	r3, #1
 800c254:	4628      	mov	r0, r5
 800c256:	47b0      	blx	r6
 800c258:	1c41      	adds	r1, r0, #1
 800c25a:	d1c8      	bne.n	800c1ee <__sflush_r+0x36>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d0c5      	beq.n	800c1ee <__sflush_r+0x36>
 800c262:	2b1d      	cmp	r3, #29
 800c264:	d001      	beq.n	800c26a <__sflush_r+0xb2>
 800c266:	2b16      	cmp	r3, #22
 800c268:	d101      	bne.n	800c26e <__sflush_r+0xb6>
 800c26a:	602f      	str	r7, [r5, #0]
 800c26c:	e7b1      	b.n	800c1d2 <__sflush_r+0x1a>
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c274:	81a3      	strh	r3, [r4, #12]
 800c276:	e7ad      	b.n	800c1d4 <__sflush_r+0x1c>
 800c278:	690f      	ldr	r7, [r1, #16]
 800c27a:	2f00      	cmp	r7, #0
 800c27c:	d0a9      	beq.n	800c1d2 <__sflush_r+0x1a>
 800c27e:	0793      	lsls	r3, r2, #30
 800c280:	680e      	ldr	r6, [r1, #0]
 800c282:	bf08      	it	eq
 800c284:	694b      	ldreq	r3, [r1, #20]
 800c286:	600f      	str	r7, [r1, #0]
 800c288:	bf18      	it	ne
 800c28a:	2300      	movne	r3, #0
 800c28c:	eba6 0807 	sub.w	r8, r6, r7
 800c290:	608b      	str	r3, [r1, #8]
 800c292:	f1b8 0f00 	cmp.w	r8, #0
 800c296:	dd9c      	ble.n	800c1d2 <__sflush_r+0x1a>
 800c298:	4643      	mov	r3, r8
 800c29a:	463a      	mov	r2, r7
 800c29c:	6a21      	ldr	r1, [r4, #32]
 800c29e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	47b0      	blx	r6
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	dc06      	bgt.n	800c2b6 <__sflush_r+0xfe>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	e78e      	b.n	800c1d4 <__sflush_r+0x1c>
 800c2b6:	4407      	add	r7, r0
 800c2b8:	eba8 0800 	sub.w	r8, r8, r0
 800c2bc:	e7e9      	b.n	800c292 <__sflush_r+0xda>
 800c2be:	bf00      	nop
 800c2c0:	20400001 	.word	0x20400001

0800c2c4 <_fflush_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	690b      	ldr	r3, [r1, #16]
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	b1db      	cbz	r3, 800c306 <_fflush_r+0x42>
 800c2ce:	b118      	cbz	r0, 800c2d8 <_fflush_r+0x14>
 800c2d0:	6983      	ldr	r3, [r0, #24]
 800c2d2:	b90b      	cbnz	r3, 800c2d8 <_fflush_r+0x14>
 800c2d4:	f000 f860 	bl	800c398 <__sinit>
 800c2d8:	4b0c      	ldr	r3, [pc, #48]	; (800c30c <_fflush_r+0x48>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	d109      	bne.n	800c2f2 <_fflush_r+0x2e>
 800c2de:	686c      	ldr	r4, [r5, #4]
 800c2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e4:	b17b      	cbz	r3, 800c306 <_fflush_r+0x42>
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ee:	f7ff bf63 	b.w	800c1b8 <__sflush_r>
 800c2f2:	4b07      	ldr	r3, [pc, #28]	; (800c310 <_fflush_r+0x4c>)
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d101      	bne.n	800c2fc <_fflush_r+0x38>
 800c2f8:	68ac      	ldr	r4, [r5, #8]
 800c2fa:	e7f1      	b.n	800c2e0 <_fflush_r+0x1c>
 800c2fc:	4b05      	ldr	r3, [pc, #20]	; (800c314 <_fflush_r+0x50>)
 800c2fe:	429c      	cmp	r4, r3
 800c300:	bf08      	it	eq
 800c302:	68ec      	ldreq	r4, [r5, #12]
 800c304:	e7ec      	b.n	800c2e0 <_fflush_r+0x1c>
 800c306:	2000      	movs	r0, #0
 800c308:	bd38      	pop	{r3, r4, r5, pc}
 800c30a:	bf00      	nop
 800c30c:	0800e038 	.word	0x0800e038
 800c310:	0800e058 	.word	0x0800e058
 800c314:	0800e018 	.word	0x0800e018

0800c318 <std>:
 800c318:	2300      	movs	r3, #0
 800c31a:	b510      	push	{r4, lr}
 800c31c:	4604      	mov	r4, r0
 800c31e:	e9c0 3300 	strd	r3, r3, [r0]
 800c322:	6083      	str	r3, [r0, #8]
 800c324:	8181      	strh	r1, [r0, #12]
 800c326:	6643      	str	r3, [r0, #100]	; 0x64
 800c328:	81c2      	strh	r2, [r0, #14]
 800c32a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c32e:	6183      	str	r3, [r0, #24]
 800c330:	4619      	mov	r1, r3
 800c332:	2208      	movs	r2, #8
 800c334:	305c      	adds	r0, #92	; 0x5c
 800c336:	f7fe fbea 	bl	800ab0e <memset>
 800c33a:	4b05      	ldr	r3, [pc, #20]	; (800c350 <std+0x38>)
 800c33c:	6263      	str	r3, [r4, #36]	; 0x24
 800c33e:	4b05      	ldr	r3, [pc, #20]	; (800c354 <std+0x3c>)
 800c340:	62a3      	str	r3, [r4, #40]	; 0x28
 800c342:	4b05      	ldr	r3, [pc, #20]	; (800c358 <std+0x40>)
 800c344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c346:	4b05      	ldr	r3, [pc, #20]	; (800c35c <std+0x44>)
 800c348:	6224      	str	r4, [r4, #32]
 800c34a:	6323      	str	r3, [r4, #48]	; 0x30
 800c34c:	bd10      	pop	{r4, pc}
 800c34e:	bf00      	nop
 800c350:	0800cf65 	.word	0x0800cf65
 800c354:	0800cf87 	.word	0x0800cf87
 800c358:	0800cfbf 	.word	0x0800cfbf
 800c35c:	0800cfe3 	.word	0x0800cfe3

0800c360 <_cleanup_r>:
 800c360:	4901      	ldr	r1, [pc, #4]	; (800c368 <_cleanup_r+0x8>)
 800c362:	f000 b885 	b.w	800c470 <_fwalk_reent>
 800c366:	bf00      	nop
 800c368:	0800c2c5 	.word	0x0800c2c5

0800c36c <__sfmoreglue>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	1e4a      	subs	r2, r1, #1
 800c370:	2568      	movs	r5, #104	; 0x68
 800c372:	4355      	muls	r5, r2
 800c374:	460e      	mov	r6, r1
 800c376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c37a:	f000 fc49 	bl	800cc10 <_malloc_r>
 800c37e:	4604      	mov	r4, r0
 800c380:	b140      	cbz	r0, 800c394 <__sfmoreglue+0x28>
 800c382:	2100      	movs	r1, #0
 800c384:	e9c0 1600 	strd	r1, r6, [r0]
 800c388:	300c      	adds	r0, #12
 800c38a:	60a0      	str	r0, [r4, #8]
 800c38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c390:	f7fe fbbd 	bl	800ab0e <memset>
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}

0800c398 <__sinit>:
 800c398:	6983      	ldr	r3, [r0, #24]
 800c39a:	b510      	push	{r4, lr}
 800c39c:	4604      	mov	r4, r0
 800c39e:	bb33      	cbnz	r3, 800c3ee <__sinit+0x56>
 800c3a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c3a4:	6503      	str	r3, [r0, #80]	; 0x50
 800c3a6:	4b12      	ldr	r3, [pc, #72]	; (800c3f0 <__sinit+0x58>)
 800c3a8:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <__sinit+0x5c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6282      	str	r2, [r0, #40]	; 0x28
 800c3ae:	4298      	cmp	r0, r3
 800c3b0:	bf04      	itt	eq
 800c3b2:	2301      	moveq	r3, #1
 800c3b4:	6183      	streq	r3, [r0, #24]
 800c3b6:	f000 f81f 	bl	800c3f8 <__sfp>
 800c3ba:	6060      	str	r0, [r4, #4]
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 f81b 	bl	800c3f8 <__sfp>
 800c3c2:	60a0      	str	r0, [r4, #8]
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f000 f817 	bl	800c3f8 <__sfp>
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	60e0      	str	r0, [r4, #12]
 800c3ce:	2104      	movs	r1, #4
 800c3d0:	6860      	ldr	r0, [r4, #4]
 800c3d2:	f7ff ffa1 	bl	800c318 <std>
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	2109      	movs	r1, #9
 800c3da:	68a0      	ldr	r0, [r4, #8]
 800c3dc:	f7ff ff9c 	bl	800c318 <std>
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	2112      	movs	r1, #18
 800c3e4:	68e0      	ldr	r0, [r4, #12]
 800c3e6:	f7ff ff97 	bl	800c318 <std>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	61a3      	str	r3, [r4, #24]
 800c3ee:	bd10      	pop	{r4, pc}
 800c3f0:	0800dfd0 	.word	0x0800dfd0
 800c3f4:	0800c361 	.word	0x0800c361

0800c3f8 <__sfp>:
 800c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fa:	4b1b      	ldr	r3, [pc, #108]	; (800c468 <__sfp+0x70>)
 800c3fc:	681e      	ldr	r6, [r3, #0]
 800c3fe:	69b3      	ldr	r3, [r6, #24]
 800c400:	4607      	mov	r7, r0
 800c402:	b913      	cbnz	r3, 800c40a <__sfp+0x12>
 800c404:	4630      	mov	r0, r6
 800c406:	f7ff ffc7 	bl	800c398 <__sinit>
 800c40a:	3648      	adds	r6, #72	; 0x48
 800c40c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c410:	3b01      	subs	r3, #1
 800c412:	d503      	bpl.n	800c41c <__sfp+0x24>
 800c414:	6833      	ldr	r3, [r6, #0]
 800c416:	b133      	cbz	r3, 800c426 <__sfp+0x2e>
 800c418:	6836      	ldr	r6, [r6, #0]
 800c41a:	e7f7      	b.n	800c40c <__sfp+0x14>
 800c41c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c420:	b16d      	cbz	r5, 800c43e <__sfp+0x46>
 800c422:	3468      	adds	r4, #104	; 0x68
 800c424:	e7f4      	b.n	800c410 <__sfp+0x18>
 800c426:	2104      	movs	r1, #4
 800c428:	4638      	mov	r0, r7
 800c42a:	f7ff ff9f 	bl	800c36c <__sfmoreglue>
 800c42e:	6030      	str	r0, [r6, #0]
 800c430:	2800      	cmp	r0, #0
 800c432:	d1f1      	bne.n	800c418 <__sfp+0x20>
 800c434:	230c      	movs	r3, #12
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	4604      	mov	r4, r0
 800c43a:	4620      	mov	r0, r4
 800c43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43e:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <__sfp+0x74>)
 800c440:	6665      	str	r5, [r4, #100]	; 0x64
 800c442:	e9c4 5500 	strd	r5, r5, [r4]
 800c446:	60a5      	str	r5, [r4, #8]
 800c448:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c44c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c450:	2208      	movs	r2, #8
 800c452:	4629      	mov	r1, r5
 800c454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c458:	f7fe fb59 	bl	800ab0e <memset>
 800c45c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c464:	e7e9      	b.n	800c43a <__sfp+0x42>
 800c466:	bf00      	nop
 800c468:	0800dfd0 	.word	0x0800dfd0
 800c46c:	ffff0001 	.word	0xffff0001

0800c470 <_fwalk_reent>:
 800c470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c474:	4680      	mov	r8, r0
 800c476:	4689      	mov	r9, r1
 800c478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c47c:	2600      	movs	r6, #0
 800c47e:	b914      	cbnz	r4, 800c486 <_fwalk_reent+0x16>
 800c480:	4630      	mov	r0, r6
 800c482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c486:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c48a:	3f01      	subs	r7, #1
 800c48c:	d501      	bpl.n	800c492 <_fwalk_reent+0x22>
 800c48e:	6824      	ldr	r4, [r4, #0]
 800c490:	e7f5      	b.n	800c47e <_fwalk_reent+0xe>
 800c492:	89ab      	ldrh	r3, [r5, #12]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d907      	bls.n	800c4a8 <_fwalk_reent+0x38>
 800c498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c49c:	3301      	adds	r3, #1
 800c49e:	d003      	beq.n	800c4a8 <_fwalk_reent+0x38>
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	47c8      	blx	r9
 800c4a6:	4306      	orrs	r6, r0
 800c4a8:	3568      	adds	r5, #104	; 0x68
 800c4aa:	e7ee      	b.n	800c48a <_fwalk_reent+0x1a>

0800c4ac <_localeconv_r>:
 800c4ac:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <_localeconv_r+0x14>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6a18      	ldr	r0, [r3, #32]
 800c4b2:	4b04      	ldr	r3, [pc, #16]	; (800c4c4 <_localeconv_r+0x18>)
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	bf08      	it	eq
 800c4b8:	4618      	moveq	r0, r3
 800c4ba:	30f0      	adds	r0, #240	; 0xf0
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	20000028 	.word	0x20000028
 800c4c4:	2000008c 	.word	0x2000008c

0800c4c8 <__swhatbuf_r>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	460e      	mov	r6, r1
 800c4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	b096      	sub	sp, #88	; 0x58
 800c4d4:	4614      	mov	r4, r2
 800c4d6:	461d      	mov	r5, r3
 800c4d8:	da07      	bge.n	800c4ea <__swhatbuf_r+0x22>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	602b      	str	r3, [r5, #0]
 800c4de:	89b3      	ldrh	r3, [r6, #12]
 800c4e0:	061a      	lsls	r2, r3, #24
 800c4e2:	d410      	bmi.n	800c506 <__swhatbuf_r+0x3e>
 800c4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4e8:	e00e      	b.n	800c508 <__swhatbuf_r+0x40>
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f000 fda0 	bl	800d030 <_fstat_r>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	dbf2      	blt.n	800c4da <__swhatbuf_r+0x12>
 800c4f4:	9a01      	ldr	r2, [sp, #4]
 800c4f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4fe:	425a      	negs	r2, r3
 800c500:	415a      	adcs	r2, r3
 800c502:	602a      	str	r2, [r5, #0]
 800c504:	e7ee      	b.n	800c4e4 <__swhatbuf_r+0x1c>
 800c506:	2340      	movs	r3, #64	; 0x40
 800c508:	2000      	movs	r0, #0
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	b016      	add	sp, #88	; 0x58
 800c50e:	bd70      	pop	{r4, r5, r6, pc}

0800c510 <__smakebuf_r>:
 800c510:	898b      	ldrh	r3, [r1, #12]
 800c512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c514:	079d      	lsls	r5, r3, #30
 800c516:	4606      	mov	r6, r0
 800c518:	460c      	mov	r4, r1
 800c51a:	d507      	bpl.n	800c52c <__smakebuf_r+0x1c>
 800c51c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	6123      	str	r3, [r4, #16]
 800c524:	2301      	movs	r3, #1
 800c526:	6163      	str	r3, [r4, #20]
 800c528:	b002      	add	sp, #8
 800c52a:	bd70      	pop	{r4, r5, r6, pc}
 800c52c:	ab01      	add	r3, sp, #4
 800c52e:	466a      	mov	r2, sp
 800c530:	f7ff ffca 	bl	800c4c8 <__swhatbuf_r>
 800c534:	9900      	ldr	r1, [sp, #0]
 800c536:	4605      	mov	r5, r0
 800c538:	4630      	mov	r0, r6
 800c53a:	f000 fb69 	bl	800cc10 <_malloc_r>
 800c53e:	b948      	cbnz	r0, 800c554 <__smakebuf_r+0x44>
 800c540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c544:	059a      	lsls	r2, r3, #22
 800c546:	d4ef      	bmi.n	800c528 <__smakebuf_r+0x18>
 800c548:	f023 0303 	bic.w	r3, r3, #3
 800c54c:	f043 0302 	orr.w	r3, r3, #2
 800c550:	81a3      	strh	r3, [r4, #12]
 800c552:	e7e3      	b.n	800c51c <__smakebuf_r+0xc>
 800c554:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <__smakebuf_r+0x7c>)
 800c556:	62b3      	str	r3, [r6, #40]	; 0x28
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	6020      	str	r0, [r4, #0]
 800c55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	9b00      	ldr	r3, [sp, #0]
 800c564:	6163      	str	r3, [r4, #20]
 800c566:	9b01      	ldr	r3, [sp, #4]
 800c568:	6120      	str	r0, [r4, #16]
 800c56a:	b15b      	cbz	r3, 800c584 <__smakebuf_r+0x74>
 800c56c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c570:	4630      	mov	r0, r6
 800c572:	f000 fd6f 	bl	800d054 <_isatty_r>
 800c576:	b128      	cbz	r0, 800c584 <__smakebuf_r+0x74>
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	f023 0303 	bic.w	r3, r3, #3
 800c57e:	f043 0301 	orr.w	r3, r3, #1
 800c582:	81a3      	strh	r3, [r4, #12]
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	431d      	orrs	r5, r3
 800c588:	81a5      	strh	r5, [r4, #12]
 800c58a:	e7cd      	b.n	800c528 <__smakebuf_r+0x18>
 800c58c:	0800c361 	.word	0x0800c361

0800c590 <malloc>:
 800c590:	4b02      	ldr	r3, [pc, #8]	; (800c59c <malloc+0xc>)
 800c592:	4601      	mov	r1, r0
 800c594:	6818      	ldr	r0, [r3, #0]
 800c596:	f000 bb3b 	b.w	800cc10 <_malloc_r>
 800c59a:	bf00      	nop
 800c59c:	20000028 	.word	0x20000028

0800c5a0 <_Balloc>:
 800c5a0:	b570      	push	{r4, r5, r6, lr}
 800c5a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460e      	mov	r6, r1
 800c5a8:	b93d      	cbnz	r5, 800c5ba <_Balloc+0x1a>
 800c5aa:	2010      	movs	r0, #16
 800c5ac:	f7ff fff0 	bl	800c590 <malloc>
 800c5b0:	6260      	str	r0, [r4, #36]	; 0x24
 800c5b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5b6:	6005      	str	r5, [r0, #0]
 800c5b8:	60c5      	str	r5, [r0, #12]
 800c5ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c5bc:	68eb      	ldr	r3, [r5, #12]
 800c5be:	b183      	cbz	r3, 800c5e2 <_Balloc+0x42>
 800c5c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c5c8:	b9b8      	cbnz	r0, 800c5fa <_Balloc+0x5a>
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	fa01 f506 	lsl.w	r5, r1, r6
 800c5d0:	1d6a      	adds	r2, r5, #5
 800c5d2:	0092      	lsls	r2, r2, #2
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 fabf 	bl	800cb58 <_calloc_r>
 800c5da:	b160      	cbz	r0, 800c5f6 <_Balloc+0x56>
 800c5dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c5e0:	e00e      	b.n	800c600 <_Balloc+0x60>
 800c5e2:	2221      	movs	r2, #33	; 0x21
 800c5e4:	2104      	movs	r1, #4
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 fab6 	bl	800cb58 <_calloc_r>
 800c5ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5ee:	60e8      	str	r0, [r5, #12]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1e4      	bne.n	800c5c0 <_Balloc+0x20>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}
 800c5fa:	6802      	ldr	r2, [r0, #0]
 800c5fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c600:	2300      	movs	r3, #0
 800c602:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c606:	e7f7      	b.n	800c5f8 <_Balloc+0x58>

0800c608 <_Bfree>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c60c:	4606      	mov	r6, r0
 800c60e:	460d      	mov	r5, r1
 800c610:	b93c      	cbnz	r4, 800c622 <_Bfree+0x1a>
 800c612:	2010      	movs	r0, #16
 800c614:	f7ff ffbc 	bl	800c590 <malloc>
 800c618:	6270      	str	r0, [r6, #36]	; 0x24
 800c61a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c61e:	6004      	str	r4, [r0, #0]
 800c620:	60c4      	str	r4, [r0, #12]
 800c622:	b13d      	cbz	r5, 800c634 <_Bfree+0x2c>
 800c624:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c626:	686a      	ldr	r2, [r5, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c62e:	6029      	str	r1, [r5, #0]
 800c630:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c634:	bd70      	pop	{r4, r5, r6, pc}

0800c636 <__multadd>:
 800c636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63a:	690d      	ldr	r5, [r1, #16]
 800c63c:	461f      	mov	r7, r3
 800c63e:	4606      	mov	r6, r0
 800c640:	460c      	mov	r4, r1
 800c642:	f101 0c14 	add.w	ip, r1, #20
 800c646:	2300      	movs	r3, #0
 800c648:	f8dc 0000 	ldr.w	r0, [ip]
 800c64c:	b281      	uxth	r1, r0
 800c64e:	fb02 7101 	mla	r1, r2, r1, r7
 800c652:	0c0f      	lsrs	r7, r1, #16
 800c654:	0c00      	lsrs	r0, r0, #16
 800c656:	fb02 7000 	mla	r0, r2, r0, r7
 800c65a:	b289      	uxth	r1, r1
 800c65c:	3301      	adds	r3, #1
 800c65e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c662:	429d      	cmp	r5, r3
 800c664:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c668:	f84c 1b04 	str.w	r1, [ip], #4
 800c66c:	dcec      	bgt.n	800c648 <__multadd+0x12>
 800c66e:	b1d7      	cbz	r7, 800c6a6 <__multadd+0x70>
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	42ab      	cmp	r3, r5
 800c674:	dc12      	bgt.n	800c69c <__multadd+0x66>
 800c676:	6861      	ldr	r1, [r4, #4]
 800c678:	4630      	mov	r0, r6
 800c67a:	3101      	adds	r1, #1
 800c67c:	f7ff ff90 	bl	800c5a0 <_Balloc>
 800c680:	6922      	ldr	r2, [r4, #16]
 800c682:	3202      	adds	r2, #2
 800c684:	f104 010c 	add.w	r1, r4, #12
 800c688:	4680      	mov	r8, r0
 800c68a:	0092      	lsls	r2, r2, #2
 800c68c:	300c      	adds	r0, #12
 800c68e:	f7fe fa33 	bl	800aaf8 <memcpy>
 800c692:	4621      	mov	r1, r4
 800c694:	4630      	mov	r0, r6
 800c696:	f7ff ffb7 	bl	800c608 <_Bfree>
 800c69a:	4644      	mov	r4, r8
 800c69c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6a0:	3501      	adds	r5, #1
 800c6a2:	615f      	str	r7, [r3, #20]
 800c6a4:	6125      	str	r5, [r4, #16]
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c6ac <__hi0bits>:
 800c6ac:	0c02      	lsrs	r2, r0, #16
 800c6ae:	0412      	lsls	r2, r2, #16
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	b9b2      	cbnz	r2, 800c6e2 <__hi0bits+0x36>
 800c6b4:	0403      	lsls	r3, r0, #16
 800c6b6:	2010      	movs	r0, #16
 800c6b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c6bc:	bf04      	itt	eq
 800c6be:	021b      	lsleq	r3, r3, #8
 800c6c0:	3008      	addeq	r0, #8
 800c6c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c6c6:	bf04      	itt	eq
 800c6c8:	011b      	lsleq	r3, r3, #4
 800c6ca:	3004      	addeq	r0, #4
 800c6cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c6d0:	bf04      	itt	eq
 800c6d2:	009b      	lsleq	r3, r3, #2
 800c6d4:	3002      	addeq	r0, #2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db06      	blt.n	800c6e8 <__hi0bits+0x3c>
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	d503      	bpl.n	800c6e6 <__hi0bits+0x3a>
 800c6de:	3001      	adds	r0, #1
 800c6e0:	4770      	bx	lr
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e7e8      	b.n	800c6b8 <__hi0bits+0xc>
 800c6e6:	2020      	movs	r0, #32
 800c6e8:	4770      	bx	lr

0800c6ea <__lo0bits>:
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	f013 0207 	ands.w	r2, r3, #7
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	d00b      	beq.n	800c70c <__lo0bits+0x22>
 800c6f4:	07da      	lsls	r2, r3, #31
 800c6f6:	d423      	bmi.n	800c740 <__lo0bits+0x56>
 800c6f8:	0798      	lsls	r0, r3, #30
 800c6fa:	bf49      	itett	mi
 800c6fc:	085b      	lsrmi	r3, r3, #1
 800c6fe:	089b      	lsrpl	r3, r3, #2
 800c700:	2001      	movmi	r0, #1
 800c702:	600b      	strmi	r3, [r1, #0]
 800c704:	bf5c      	itt	pl
 800c706:	600b      	strpl	r3, [r1, #0]
 800c708:	2002      	movpl	r0, #2
 800c70a:	4770      	bx	lr
 800c70c:	b298      	uxth	r0, r3
 800c70e:	b9a8      	cbnz	r0, 800c73c <__lo0bits+0x52>
 800c710:	0c1b      	lsrs	r3, r3, #16
 800c712:	2010      	movs	r0, #16
 800c714:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c718:	bf04      	itt	eq
 800c71a:	0a1b      	lsreq	r3, r3, #8
 800c71c:	3008      	addeq	r0, #8
 800c71e:	071a      	lsls	r2, r3, #28
 800c720:	bf04      	itt	eq
 800c722:	091b      	lsreq	r3, r3, #4
 800c724:	3004      	addeq	r0, #4
 800c726:	079a      	lsls	r2, r3, #30
 800c728:	bf04      	itt	eq
 800c72a:	089b      	lsreq	r3, r3, #2
 800c72c:	3002      	addeq	r0, #2
 800c72e:	07da      	lsls	r2, r3, #31
 800c730:	d402      	bmi.n	800c738 <__lo0bits+0x4e>
 800c732:	085b      	lsrs	r3, r3, #1
 800c734:	d006      	beq.n	800c744 <__lo0bits+0x5a>
 800c736:	3001      	adds	r0, #1
 800c738:	600b      	str	r3, [r1, #0]
 800c73a:	4770      	bx	lr
 800c73c:	4610      	mov	r0, r2
 800c73e:	e7e9      	b.n	800c714 <__lo0bits+0x2a>
 800c740:	2000      	movs	r0, #0
 800c742:	4770      	bx	lr
 800c744:	2020      	movs	r0, #32
 800c746:	4770      	bx	lr

0800c748 <__i2b>:
 800c748:	b510      	push	{r4, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	2101      	movs	r1, #1
 800c74e:	f7ff ff27 	bl	800c5a0 <_Balloc>
 800c752:	2201      	movs	r2, #1
 800c754:	6144      	str	r4, [r0, #20]
 800c756:	6102      	str	r2, [r0, #16]
 800c758:	bd10      	pop	{r4, pc}

0800c75a <__multiply>:
 800c75a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75e:	4614      	mov	r4, r2
 800c760:	690a      	ldr	r2, [r1, #16]
 800c762:	6923      	ldr	r3, [r4, #16]
 800c764:	429a      	cmp	r2, r3
 800c766:	bfb8      	it	lt
 800c768:	460b      	movlt	r3, r1
 800c76a:	4688      	mov	r8, r1
 800c76c:	bfbc      	itt	lt
 800c76e:	46a0      	movlt	r8, r4
 800c770:	461c      	movlt	r4, r3
 800c772:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c776:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c77a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c77e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c782:	eb07 0609 	add.w	r6, r7, r9
 800c786:	42b3      	cmp	r3, r6
 800c788:	bfb8      	it	lt
 800c78a:	3101      	addlt	r1, #1
 800c78c:	f7ff ff08 	bl	800c5a0 <_Balloc>
 800c790:	f100 0514 	add.w	r5, r0, #20
 800c794:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c798:	462b      	mov	r3, r5
 800c79a:	2200      	movs	r2, #0
 800c79c:	4573      	cmp	r3, lr
 800c79e:	d316      	bcc.n	800c7ce <__multiply+0x74>
 800c7a0:	f104 0214 	add.w	r2, r4, #20
 800c7a4:	f108 0114 	add.w	r1, r8, #20
 800c7a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c7ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	9b00      	ldr	r3, [sp, #0]
 800c7b4:	9201      	str	r2, [sp, #4]
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d80c      	bhi.n	800c7d4 <__multiply+0x7a>
 800c7ba:	2e00      	cmp	r6, #0
 800c7bc:	dd03      	ble.n	800c7c6 <__multiply+0x6c>
 800c7be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d05d      	beq.n	800c882 <__multiply+0x128>
 800c7c6:	6106      	str	r6, [r0, #16]
 800c7c8:	b003      	add	sp, #12
 800c7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ce:	f843 2b04 	str.w	r2, [r3], #4
 800c7d2:	e7e3      	b.n	800c79c <__multiply+0x42>
 800c7d4:	f8b2 b000 	ldrh.w	fp, [r2]
 800c7d8:	f1bb 0f00 	cmp.w	fp, #0
 800c7dc:	d023      	beq.n	800c826 <__multiply+0xcc>
 800c7de:	4689      	mov	r9, r1
 800c7e0:	46ac      	mov	ip, r5
 800c7e2:	f04f 0800 	mov.w	r8, #0
 800c7e6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c7ea:	f8dc a000 	ldr.w	sl, [ip]
 800c7ee:	b2a3      	uxth	r3, r4
 800c7f0:	fa1f fa8a 	uxth.w	sl, sl
 800c7f4:	fb0b a303 	mla	r3, fp, r3, sl
 800c7f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c7fc:	f8dc 4000 	ldr.w	r4, [ip]
 800c800:	4443      	add	r3, r8
 800c802:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c806:	fb0b 840a 	mla	r4, fp, sl, r8
 800c80a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c80e:	46e2      	mov	sl, ip
 800c810:	b29b      	uxth	r3, r3
 800c812:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c816:	454f      	cmp	r7, r9
 800c818:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c81c:	f84a 3b04 	str.w	r3, [sl], #4
 800c820:	d82b      	bhi.n	800c87a <__multiply+0x120>
 800c822:	f8cc 8004 	str.w	r8, [ip, #4]
 800c826:	9b01      	ldr	r3, [sp, #4]
 800c828:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c82c:	3204      	adds	r2, #4
 800c82e:	f1ba 0f00 	cmp.w	sl, #0
 800c832:	d020      	beq.n	800c876 <__multiply+0x11c>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	4689      	mov	r9, r1
 800c838:	46a8      	mov	r8, r5
 800c83a:	f04f 0b00 	mov.w	fp, #0
 800c83e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c842:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c846:	fb0a 440c 	mla	r4, sl, ip, r4
 800c84a:	445c      	add	r4, fp
 800c84c:	46c4      	mov	ip, r8
 800c84e:	b29b      	uxth	r3, r3
 800c850:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c854:	f84c 3b04 	str.w	r3, [ip], #4
 800c858:	f859 3b04 	ldr.w	r3, [r9], #4
 800c85c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c860:	0c1b      	lsrs	r3, r3, #16
 800c862:	fb0a b303 	mla	r3, sl, r3, fp
 800c866:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c86a:	454f      	cmp	r7, r9
 800c86c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c870:	d805      	bhi.n	800c87e <__multiply+0x124>
 800c872:	f8c8 3004 	str.w	r3, [r8, #4]
 800c876:	3504      	adds	r5, #4
 800c878:	e79b      	b.n	800c7b2 <__multiply+0x58>
 800c87a:	46d4      	mov	ip, sl
 800c87c:	e7b3      	b.n	800c7e6 <__multiply+0x8c>
 800c87e:	46e0      	mov	r8, ip
 800c880:	e7dd      	b.n	800c83e <__multiply+0xe4>
 800c882:	3e01      	subs	r6, #1
 800c884:	e799      	b.n	800c7ba <__multiply+0x60>
	...

0800c888 <__pow5mult>:
 800c888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c88c:	4615      	mov	r5, r2
 800c88e:	f012 0203 	ands.w	r2, r2, #3
 800c892:	4606      	mov	r6, r0
 800c894:	460f      	mov	r7, r1
 800c896:	d007      	beq.n	800c8a8 <__pow5mult+0x20>
 800c898:	3a01      	subs	r2, #1
 800c89a:	4c21      	ldr	r4, [pc, #132]	; (800c920 <__pow5mult+0x98>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8a2:	f7ff fec8 	bl	800c636 <__multadd>
 800c8a6:	4607      	mov	r7, r0
 800c8a8:	10ad      	asrs	r5, r5, #2
 800c8aa:	d035      	beq.n	800c918 <__pow5mult+0x90>
 800c8ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8ae:	b93c      	cbnz	r4, 800c8c0 <__pow5mult+0x38>
 800c8b0:	2010      	movs	r0, #16
 800c8b2:	f7ff fe6d 	bl	800c590 <malloc>
 800c8b6:	6270      	str	r0, [r6, #36]	; 0x24
 800c8b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8bc:	6004      	str	r4, [r0, #0]
 800c8be:	60c4      	str	r4, [r0, #12]
 800c8c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8c8:	b94c      	cbnz	r4, 800c8de <__pow5mult+0x56>
 800c8ca:	f240 2171 	movw	r1, #625	; 0x271
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff ff3a 	bl	800c748 <__i2b>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8da:	4604      	mov	r4, r0
 800c8dc:	6003      	str	r3, [r0, #0]
 800c8de:	f04f 0800 	mov.w	r8, #0
 800c8e2:	07eb      	lsls	r3, r5, #31
 800c8e4:	d50a      	bpl.n	800c8fc <__pow5mult+0x74>
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff ff35 	bl	800c75a <__multiply>
 800c8f0:	4639      	mov	r1, r7
 800c8f2:	4681      	mov	r9, r0
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff fe87 	bl	800c608 <_Bfree>
 800c8fa:	464f      	mov	r7, r9
 800c8fc:	106d      	asrs	r5, r5, #1
 800c8fe:	d00b      	beq.n	800c918 <__pow5mult+0x90>
 800c900:	6820      	ldr	r0, [r4, #0]
 800c902:	b938      	cbnz	r0, 800c914 <__pow5mult+0x8c>
 800c904:	4622      	mov	r2, r4
 800c906:	4621      	mov	r1, r4
 800c908:	4630      	mov	r0, r6
 800c90a:	f7ff ff26 	bl	800c75a <__multiply>
 800c90e:	6020      	str	r0, [r4, #0]
 800c910:	f8c0 8000 	str.w	r8, [r0]
 800c914:	4604      	mov	r4, r0
 800c916:	e7e4      	b.n	800c8e2 <__pow5mult+0x5a>
 800c918:	4638      	mov	r0, r7
 800c91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91e:	bf00      	nop
 800c920:	0800e168 	.word	0x0800e168

0800c924 <__lshift>:
 800c924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c928:	460c      	mov	r4, r1
 800c92a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c92e:	6923      	ldr	r3, [r4, #16]
 800c930:	6849      	ldr	r1, [r1, #4]
 800c932:	eb0a 0903 	add.w	r9, sl, r3
 800c936:	68a3      	ldr	r3, [r4, #8]
 800c938:	4607      	mov	r7, r0
 800c93a:	4616      	mov	r6, r2
 800c93c:	f109 0501 	add.w	r5, r9, #1
 800c940:	42ab      	cmp	r3, r5
 800c942:	db32      	blt.n	800c9aa <__lshift+0x86>
 800c944:	4638      	mov	r0, r7
 800c946:	f7ff fe2b 	bl	800c5a0 <_Balloc>
 800c94a:	2300      	movs	r3, #0
 800c94c:	4680      	mov	r8, r0
 800c94e:	f100 0114 	add.w	r1, r0, #20
 800c952:	461a      	mov	r2, r3
 800c954:	4553      	cmp	r3, sl
 800c956:	db2b      	blt.n	800c9b0 <__lshift+0x8c>
 800c958:	6920      	ldr	r0, [r4, #16]
 800c95a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c95e:	f104 0314 	add.w	r3, r4, #20
 800c962:	f016 021f 	ands.w	r2, r6, #31
 800c966:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c96a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c96e:	d025      	beq.n	800c9bc <__lshift+0x98>
 800c970:	f1c2 0e20 	rsb	lr, r2, #32
 800c974:	2000      	movs	r0, #0
 800c976:	681e      	ldr	r6, [r3, #0]
 800c978:	468a      	mov	sl, r1
 800c97a:	4096      	lsls	r6, r2
 800c97c:	4330      	orrs	r0, r6
 800c97e:	f84a 0b04 	str.w	r0, [sl], #4
 800c982:	f853 0b04 	ldr.w	r0, [r3], #4
 800c986:	459c      	cmp	ip, r3
 800c988:	fa20 f00e 	lsr.w	r0, r0, lr
 800c98c:	d814      	bhi.n	800c9b8 <__lshift+0x94>
 800c98e:	6048      	str	r0, [r1, #4]
 800c990:	b108      	cbz	r0, 800c996 <__lshift+0x72>
 800c992:	f109 0502 	add.w	r5, r9, #2
 800c996:	3d01      	subs	r5, #1
 800c998:	4638      	mov	r0, r7
 800c99a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c99e:	4621      	mov	r1, r4
 800c9a0:	f7ff fe32 	bl	800c608 <_Bfree>
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9aa:	3101      	adds	r1, #1
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	e7c7      	b.n	800c940 <__lshift+0x1c>
 800c9b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	e7cd      	b.n	800c954 <__lshift+0x30>
 800c9b8:	4651      	mov	r1, sl
 800c9ba:	e7dc      	b.n	800c976 <__lshift+0x52>
 800c9bc:	3904      	subs	r1, #4
 800c9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9c6:	459c      	cmp	ip, r3
 800c9c8:	d8f9      	bhi.n	800c9be <__lshift+0x9a>
 800c9ca:	e7e4      	b.n	800c996 <__lshift+0x72>

0800c9cc <__mcmp>:
 800c9cc:	6903      	ldr	r3, [r0, #16]
 800c9ce:	690a      	ldr	r2, [r1, #16]
 800c9d0:	1a9b      	subs	r3, r3, r2
 800c9d2:	b530      	push	{r4, r5, lr}
 800c9d4:	d10c      	bne.n	800c9f0 <__mcmp+0x24>
 800c9d6:	0092      	lsls	r2, r2, #2
 800c9d8:	3014      	adds	r0, #20
 800c9da:	3114      	adds	r1, #20
 800c9dc:	1884      	adds	r4, r0, r2
 800c9de:	4411      	add	r1, r2
 800c9e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9e8:	4295      	cmp	r5, r2
 800c9ea:	d003      	beq.n	800c9f4 <__mcmp+0x28>
 800c9ec:	d305      	bcc.n	800c9fa <__mcmp+0x2e>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	bd30      	pop	{r4, r5, pc}
 800c9f4:	42a0      	cmp	r0, r4
 800c9f6:	d3f3      	bcc.n	800c9e0 <__mcmp+0x14>
 800c9f8:	e7fa      	b.n	800c9f0 <__mcmp+0x24>
 800c9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fe:	e7f7      	b.n	800c9f0 <__mcmp+0x24>

0800ca00 <__mdiff>:
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	460d      	mov	r5, r1
 800ca06:	4607      	mov	r7, r0
 800ca08:	4611      	mov	r1, r2
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	f7ff ffdd 	bl	800c9cc <__mcmp>
 800ca12:	1e06      	subs	r6, r0, #0
 800ca14:	d108      	bne.n	800ca28 <__mdiff+0x28>
 800ca16:	4631      	mov	r1, r6
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f7ff fdc1 	bl	800c5a0 <_Balloc>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca28:	bfa4      	itt	ge
 800ca2a:	4623      	movge	r3, r4
 800ca2c:	462c      	movge	r4, r5
 800ca2e:	4638      	mov	r0, r7
 800ca30:	6861      	ldr	r1, [r4, #4]
 800ca32:	bfa6      	itte	ge
 800ca34:	461d      	movge	r5, r3
 800ca36:	2600      	movge	r6, #0
 800ca38:	2601      	movlt	r6, #1
 800ca3a:	f7ff fdb1 	bl	800c5a0 <_Balloc>
 800ca3e:	692b      	ldr	r3, [r5, #16]
 800ca40:	60c6      	str	r6, [r0, #12]
 800ca42:	6926      	ldr	r6, [r4, #16]
 800ca44:	f105 0914 	add.w	r9, r5, #20
 800ca48:	f104 0214 	add.w	r2, r4, #20
 800ca4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ca50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ca54:	f100 0514 	add.w	r5, r0, #20
 800ca58:	f04f 0e00 	mov.w	lr, #0
 800ca5c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ca60:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca64:	fa1e f18a 	uxtah	r1, lr, sl
 800ca68:	b2a3      	uxth	r3, r4
 800ca6a:	1ac9      	subs	r1, r1, r3
 800ca6c:	0c23      	lsrs	r3, r4, #16
 800ca6e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ca72:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca76:	b289      	uxth	r1, r1
 800ca78:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ca7c:	45c8      	cmp	r8, r9
 800ca7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca82:	4694      	mov	ip, r2
 800ca84:	f845 3b04 	str.w	r3, [r5], #4
 800ca88:	d8e8      	bhi.n	800ca5c <__mdiff+0x5c>
 800ca8a:	45bc      	cmp	ip, r7
 800ca8c:	d304      	bcc.n	800ca98 <__mdiff+0x98>
 800ca8e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ca92:	b183      	cbz	r3, 800cab6 <__mdiff+0xb6>
 800ca94:	6106      	str	r6, [r0, #16]
 800ca96:	e7c5      	b.n	800ca24 <__mdiff+0x24>
 800ca98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca9c:	fa1e f381 	uxtah	r3, lr, r1
 800caa0:	141a      	asrs	r2, r3, #16
 800caa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cab0:	f845 3b04 	str.w	r3, [r5], #4
 800cab4:	e7e9      	b.n	800ca8a <__mdiff+0x8a>
 800cab6:	3e01      	subs	r6, #1
 800cab8:	e7e9      	b.n	800ca8e <__mdiff+0x8e>

0800caba <__d2b>:
 800caba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cabe:	460e      	mov	r6, r1
 800cac0:	2101      	movs	r1, #1
 800cac2:	ec59 8b10 	vmov	r8, r9, d0
 800cac6:	4615      	mov	r5, r2
 800cac8:	f7ff fd6a 	bl	800c5a0 <_Balloc>
 800cacc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cad0:	4607      	mov	r7, r0
 800cad2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cad6:	bb34      	cbnz	r4, 800cb26 <__d2b+0x6c>
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	f1b8 0300 	subs.w	r3, r8, #0
 800cade:	d027      	beq.n	800cb30 <__d2b+0x76>
 800cae0:	a802      	add	r0, sp, #8
 800cae2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cae6:	f7ff fe00 	bl	800c6ea <__lo0bits>
 800caea:	9900      	ldr	r1, [sp, #0]
 800caec:	b1f0      	cbz	r0, 800cb2c <__d2b+0x72>
 800caee:	9a01      	ldr	r2, [sp, #4]
 800caf0:	f1c0 0320 	rsb	r3, r0, #32
 800caf4:	fa02 f303 	lsl.w	r3, r2, r3
 800caf8:	430b      	orrs	r3, r1
 800cafa:	40c2      	lsrs	r2, r0
 800cafc:	617b      	str	r3, [r7, #20]
 800cafe:	9201      	str	r2, [sp, #4]
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	61bb      	str	r3, [r7, #24]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	bf14      	ite	ne
 800cb08:	2102      	movne	r1, #2
 800cb0a:	2101      	moveq	r1, #1
 800cb0c:	6139      	str	r1, [r7, #16]
 800cb0e:	b1c4      	cbz	r4, 800cb42 <__d2b+0x88>
 800cb10:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cb14:	4404      	add	r4, r0
 800cb16:	6034      	str	r4, [r6, #0]
 800cb18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb1c:	6028      	str	r0, [r5, #0]
 800cb1e:	4638      	mov	r0, r7
 800cb20:	b003      	add	sp, #12
 800cb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb2a:	e7d5      	b.n	800cad8 <__d2b+0x1e>
 800cb2c:	6179      	str	r1, [r7, #20]
 800cb2e:	e7e7      	b.n	800cb00 <__d2b+0x46>
 800cb30:	a801      	add	r0, sp, #4
 800cb32:	f7ff fdda 	bl	800c6ea <__lo0bits>
 800cb36:	9b01      	ldr	r3, [sp, #4]
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	6139      	str	r1, [r7, #16]
 800cb3e:	3020      	adds	r0, #32
 800cb40:	e7e5      	b.n	800cb0e <__d2b+0x54>
 800cb42:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cb46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb4a:	6030      	str	r0, [r6, #0]
 800cb4c:	6918      	ldr	r0, [r3, #16]
 800cb4e:	f7ff fdad 	bl	800c6ac <__hi0bits>
 800cb52:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cb56:	e7e1      	b.n	800cb1c <__d2b+0x62>

0800cb58 <_calloc_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	fb02 f401 	mul.w	r4, r2, r1
 800cb5e:	4621      	mov	r1, r4
 800cb60:	f000 f856 	bl	800cc10 <_malloc_r>
 800cb64:	4605      	mov	r5, r0
 800cb66:	b118      	cbz	r0, 800cb70 <_calloc_r+0x18>
 800cb68:	4622      	mov	r2, r4
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	f7fd ffcf 	bl	800ab0e <memset>
 800cb70:	4628      	mov	r0, r5
 800cb72:	bd38      	pop	{r3, r4, r5, pc}

0800cb74 <_free_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4605      	mov	r5, r0
 800cb78:	2900      	cmp	r1, #0
 800cb7a:	d045      	beq.n	800cc08 <_free_r+0x94>
 800cb7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb80:	1f0c      	subs	r4, r1, #4
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	bfb8      	it	lt
 800cb86:	18e4      	addlt	r4, r4, r3
 800cb88:	f000 fa98 	bl	800d0bc <__malloc_lock>
 800cb8c:	4a1f      	ldr	r2, [pc, #124]	; (800cc0c <_free_r+0x98>)
 800cb8e:	6813      	ldr	r3, [r2, #0]
 800cb90:	4610      	mov	r0, r2
 800cb92:	b933      	cbnz	r3, 800cba2 <_free_r+0x2e>
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	6014      	str	r4, [r2, #0]
 800cb98:	4628      	mov	r0, r5
 800cb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb9e:	f000 ba8e 	b.w	800d0be <__malloc_unlock>
 800cba2:	42a3      	cmp	r3, r4
 800cba4:	d90c      	bls.n	800cbc0 <_free_r+0x4c>
 800cba6:	6821      	ldr	r1, [r4, #0]
 800cba8:	1862      	adds	r2, r4, r1
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	bf04      	itt	eq
 800cbae:	681a      	ldreq	r2, [r3, #0]
 800cbb0:	685b      	ldreq	r3, [r3, #4]
 800cbb2:	6063      	str	r3, [r4, #4]
 800cbb4:	bf04      	itt	eq
 800cbb6:	1852      	addeq	r2, r2, r1
 800cbb8:	6022      	streq	r2, [r4, #0]
 800cbba:	6004      	str	r4, [r0, #0]
 800cbbc:	e7ec      	b.n	800cb98 <_free_r+0x24>
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	b10a      	cbz	r2, 800cbc8 <_free_r+0x54>
 800cbc4:	42a2      	cmp	r2, r4
 800cbc6:	d9fa      	bls.n	800cbbe <_free_r+0x4a>
 800cbc8:	6819      	ldr	r1, [r3, #0]
 800cbca:	1858      	adds	r0, r3, r1
 800cbcc:	42a0      	cmp	r0, r4
 800cbce:	d10b      	bne.n	800cbe8 <_free_r+0x74>
 800cbd0:	6820      	ldr	r0, [r4, #0]
 800cbd2:	4401      	add	r1, r0
 800cbd4:	1858      	adds	r0, r3, r1
 800cbd6:	4282      	cmp	r2, r0
 800cbd8:	6019      	str	r1, [r3, #0]
 800cbda:	d1dd      	bne.n	800cb98 <_free_r+0x24>
 800cbdc:	6810      	ldr	r0, [r2, #0]
 800cbde:	6852      	ldr	r2, [r2, #4]
 800cbe0:	605a      	str	r2, [r3, #4]
 800cbe2:	4401      	add	r1, r0
 800cbe4:	6019      	str	r1, [r3, #0]
 800cbe6:	e7d7      	b.n	800cb98 <_free_r+0x24>
 800cbe8:	d902      	bls.n	800cbf0 <_free_r+0x7c>
 800cbea:	230c      	movs	r3, #12
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	e7d3      	b.n	800cb98 <_free_r+0x24>
 800cbf0:	6820      	ldr	r0, [r4, #0]
 800cbf2:	1821      	adds	r1, r4, r0
 800cbf4:	428a      	cmp	r2, r1
 800cbf6:	bf04      	itt	eq
 800cbf8:	6811      	ldreq	r1, [r2, #0]
 800cbfa:	6852      	ldreq	r2, [r2, #4]
 800cbfc:	6062      	str	r2, [r4, #4]
 800cbfe:	bf04      	itt	eq
 800cc00:	1809      	addeq	r1, r1, r0
 800cc02:	6021      	streq	r1, [r4, #0]
 800cc04:	605c      	str	r4, [r3, #4]
 800cc06:	e7c7      	b.n	800cb98 <_free_r+0x24>
 800cc08:	bd38      	pop	{r3, r4, r5, pc}
 800cc0a:	bf00      	nop
 800cc0c:	2003cd58 	.word	0x2003cd58

0800cc10 <_malloc_r>:
 800cc10:	b570      	push	{r4, r5, r6, lr}
 800cc12:	1ccd      	adds	r5, r1, #3
 800cc14:	f025 0503 	bic.w	r5, r5, #3
 800cc18:	3508      	adds	r5, #8
 800cc1a:	2d0c      	cmp	r5, #12
 800cc1c:	bf38      	it	cc
 800cc1e:	250c      	movcc	r5, #12
 800cc20:	2d00      	cmp	r5, #0
 800cc22:	4606      	mov	r6, r0
 800cc24:	db01      	blt.n	800cc2a <_malloc_r+0x1a>
 800cc26:	42a9      	cmp	r1, r5
 800cc28:	d903      	bls.n	800cc32 <_malloc_r+0x22>
 800cc2a:	230c      	movs	r3, #12
 800cc2c:	6033      	str	r3, [r6, #0]
 800cc2e:	2000      	movs	r0, #0
 800cc30:	bd70      	pop	{r4, r5, r6, pc}
 800cc32:	f000 fa43 	bl	800d0bc <__malloc_lock>
 800cc36:	4a21      	ldr	r2, [pc, #132]	; (800ccbc <_malloc_r+0xac>)
 800cc38:	6814      	ldr	r4, [r2, #0]
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	b991      	cbnz	r1, 800cc64 <_malloc_r+0x54>
 800cc3e:	4c20      	ldr	r4, [pc, #128]	; (800ccc0 <_malloc_r+0xb0>)
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	b91b      	cbnz	r3, 800cc4c <_malloc_r+0x3c>
 800cc44:	4630      	mov	r0, r6
 800cc46:	f000 f97d 	bl	800cf44 <_sbrk_r>
 800cc4a:	6020      	str	r0, [r4, #0]
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f000 f978 	bl	800cf44 <_sbrk_r>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d124      	bne.n	800cca2 <_malloc_r+0x92>
 800cc58:	230c      	movs	r3, #12
 800cc5a:	6033      	str	r3, [r6, #0]
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f000 fa2e 	bl	800d0be <__malloc_unlock>
 800cc62:	e7e4      	b.n	800cc2e <_malloc_r+0x1e>
 800cc64:	680b      	ldr	r3, [r1, #0]
 800cc66:	1b5b      	subs	r3, r3, r5
 800cc68:	d418      	bmi.n	800cc9c <_malloc_r+0x8c>
 800cc6a:	2b0b      	cmp	r3, #11
 800cc6c:	d90f      	bls.n	800cc8e <_malloc_r+0x7e>
 800cc6e:	600b      	str	r3, [r1, #0]
 800cc70:	50cd      	str	r5, [r1, r3]
 800cc72:	18cc      	adds	r4, r1, r3
 800cc74:	4630      	mov	r0, r6
 800cc76:	f000 fa22 	bl	800d0be <__malloc_unlock>
 800cc7a:	f104 000b 	add.w	r0, r4, #11
 800cc7e:	1d23      	adds	r3, r4, #4
 800cc80:	f020 0007 	bic.w	r0, r0, #7
 800cc84:	1ac3      	subs	r3, r0, r3
 800cc86:	d0d3      	beq.n	800cc30 <_malloc_r+0x20>
 800cc88:	425a      	negs	r2, r3
 800cc8a:	50e2      	str	r2, [r4, r3]
 800cc8c:	e7d0      	b.n	800cc30 <_malloc_r+0x20>
 800cc8e:	428c      	cmp	r4, r1
 800cc90:	684b      	ldr	r3, [r1, #4]
 800cc92:	bf16      	itet	ne
 800cc94:	6063      	strne	r3, [r4, #4]
 800cc96:	6013      	streq	r3, [r2, #0]
 800cc98:	460c      	movne	r4, r1
 800cc9a:	e7eb      	b.n	800cc74 <_malloc_r+0x64>
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	6849      	ldr	r1, [r1, #4]
 800cca0:	e7cc      	b.n	800cc3c <_malloc_r+0x2c>
 800cca2:	1cc4      	adds	r4, r0, #3
 800cca4:	f024 0403 	bic.w	r4, r4, #3
 800cca8:	42a0      	cmp	r0, r4
 800ccaa:	d005      	beq.n	800ccb8 <_malloc_r+0xa8>
 800ccac:	1a21      	subs	r1, r4, r0
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f000 f948 	bl	800cf44 <_sbrk_r>
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d0cf      	beq.n	800cc58 <_malloc_r+0x48>
 800ccb8:	6025      	str	r5, [r4, #0]
 800ccba:	e7db      	b.n	800cc74 <_malloc_r+0x64>
 800ccbc:	2003cd58 	.word	0x2003cd58
 800ccc0:	2003cd5c 	.word	0x2003cd5c

0800ccc4 <__sfputc_r>:
 800ccc4:	6893      	ldr	r3, [r2, #8]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	b410      	push	{r4}
 800cccc:	6093      	str	r3, [r2, #8]
 800ccce:	da08      	bge.n	800cce2 <__sfputc_r+0x1e>
 800ccd0:	6994      	ldr	r4, [r2, #24]
 800ccd2:	42a3      	cmp	r3, r4
 800ccd4:	db01      	blt.n	800ccda <__sfputc_r+0x16>
 800ccd6:	290a      	cmp	r1, #10
 800ccd8:	d103      	bne.n	800cce2 <__sfputc_r+0x1e>
 800ccda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccde:	f7fe bbd3 	b.w	800b488 <__swbuf_r>
 800cce2:	6813      	ldr	r3, [r2, #0]
 800cce4:	1c58      	adds	r0, r3, #1
 800cce6:	6010      	str	r0, [r2, #0]
 800cce8:	7019      	strb	r1, [r3, #0]
 800ccea:	4608      	mov	r0, r1
 800ccec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <__sfputs_r>:
 800ccf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	18d5      	adds	r5, r2, r3
 800ccfc:	42ac      	cmp	r4, r5
 800ccfe:	d101      	bne.n	800cd04 <__sfputs_r+0x12>
 800cd00:	2000      	movs	r0, #0
 800cd02:	e007      	b.n	800cd14 <__sfputs_r+0x22>
 800cd04:	463a      	mov	r2, r7
 800cd06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7ff ffda 	bl	800ccc4 <__sfputc_r>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d1f3      	bne.n	800ccfc <__sfputs_r+0xa>
 800cd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd18 <_vfiprintf_r>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	b09d      	sub	sp, #116	; 0x74
 800cd20:	4617      	mov	r7, r2
 800cd22:	461d      	mov	r5, r3
 800cd24:	4606      	mov	r6, r0
 800cd26:	b118      	cbz	r0, 800cd30 <_vfiprintf_r+0x18>
 800cd28:	6983      	ldr	r3, [r0, #24]
 800cd2a:	b90b      	cbnz	r3, 800cd30 <_vfiprintf_r+0x18>
 800cd2c:	f7ff fb34 	bl	800c398 <__sinit>
 800cd30:	4b7c      	ldr	r3, [pc, #496]	; (800cf24 <_vfiprintf_r+0x20c>)
 800cd32:	429c      	cmp	r4, r3
 800cd34:	d158      	bne.n	800cde8 <_vfiprintf_r+0xd0>
 800cd36:	6874      	ldr	r4, [r6, #4]
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	0718      	lsls	r0, r3, #28
 800cd3c:	d55e      	bpl.n	800cdfc <_vfiprintf_r+0xe4>
 800cd3e:	6923      	ldr	r3, [r4, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d05b      	beq.n	800cdfc <_vfiprintf_r+0xe4>
 800cd44:	2300      	movs	r3, #0
 800cd46:	9309      	str	r3, [sp, #36]	; 0x24
 800cd48:	2320      	movs	r3, #32
 800cd4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd4e:	2330      	movs	r3, #48	; 0x30
 800cd50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd54:	9503      	str	r5, [sp, #12]
 800cd56:	f04f 0b01 	mov.w	fp, #1
 800cd5a:	46b8      	mov	r8, r7
 800cd5c:	4645      	mov	r5, r8
 800cd5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd62:	b10b      	cbz	r3, 800cd68 <_vfiprintf_r+0x50>
 800cd64:	2b25      	cmp	r3, #37	; 0x25
 800cd66:	d154      	bne.n	800ce12 <_vfiprintf_r+0xfa>
 800cd68:	ebb8 0a07 	subs.w	sl, r8, r7
 800cd6c:	d00b      	beq.n	800cd86 <_vfiprintf_r+0x6e>
 800cd6e:	4653      	mov	r3, sl
 800cd70:	463a      	mov	r2, r7
 800cd72:	4621      	mov	r1, r4
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7ff ffbc 	bl	800ccf2 <__sfputs_r>
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	f000 80c2 	beq.w	800cf04 <_vfiprintf_r+0x1ec>
 800cd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd82:	4453      	add	r3, sl
 800cd84:	9309      	str	r3, [sp, #36]	; 0x24
 800cd86:	f898 3000 	ldrb.w	r3, [r8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f000 80ba 	beq.w	800cf04 <_vfiprintf_r+0x1ec>
 800cd90:	2300      	movs	r3, #0
 800cd92:	f04f 32ff 	mov.w	r2, #4294967295
 800cd96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	9307      	str	r3, [sp, #28]
 800cd9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cda2:	931a      	str	r3, [sp, #104]	; 0x68
 800cda4:	46a8      	mov	r8, r5
 800cda6:	2205      	movs	r2, #5
 800cda8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cdac:	485e      	ldr	r0, [pc, #376]	; (800cf28 <_vfiprintf_r+0x210>)
 800cdae:	f7f3 fa4f 	bl	8000250 <memchr>
 800cdb2:	9b04      	ldr	r3, [sp, #16]
 800cdb4:	bb78      	cbnz	r0, 800ce16 <_vfiprintf_r+0xfe>
 800cdb6:	06d9      	lsls	r1, r3, #27
 800cdb8:	bf44      	itt	mi
 800cdba:	2220      	movmi	r2, #32
 800cdbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cdc0:	071a      	lsls	r2, r3, #28
 800cdc2:	bf44      	itt	mi
 800cdc4:	222b      	movmi	r2, #43	; 0x2b
 800cdc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cdca:	782a      	ldrb	r2, [r5, #0]
 800cdcc:	2a2a      	cmp	r2, #42	; 0x2a
 800cdce:	d02a      	beq.n	800ce26 <_vfiprintf_r+0x10e>
 800cdd0:	9a07      	ldr	r2, [sp, #28]
 800cdd2:	46a8      	mov	r8, r5
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	250a      	movs	r5, #10
 800cdd8:	4641      	mov	r1, r8
 800cdda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdde:	3b30      	subs	r3, #48	; 0x30
 800cde0:	2b09      	cmp	r3, #9
 800cde2:	d969      	bls.n	800ceb8 <_vfiprintf_r+0x1a0>
 800cde4:	b360      	cbz	r0, 800ce40 <_vfiprintf_r+0x128>
 800cde6:	e024      	b.n	800ce32 <_vfiprintf_r+0x11a>
 800cde8:	4b50      	ldr	r3, [pc, #320]	; (800cf2c <_vfiprintf_r+0x214>)
 800cdea:	429c      	cmp	r4, r3
 800cdec:	d101      	bne.n	800cdf2 <_vfiprintf_r+0xda>
 800cdee:	68b4      	ldr	r4, [r6, #8]
 800cdf0:	e7a2      	b.n	800cd38 <_vfiprintf_r+0x20>
 800cdf2:	4b4f      	ldr	r3, [pc, #316]	; (800cf30 <_vfiprintf_r+0x218>)
 800cdf4:	429c      	cmp	r4, r3
 800cdf6:	bf08      	it	eq
 800cdf8:	68f4      	ldreq	r4, [r6, #12]
 800cdfa:	e79d      	b.n	800cd38 <_vfiprintf_r+0x20>
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f7fe fb94 	bl	800b52c <__swsetup_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d09d      	beq.n	800cd44 <_vfiprintf_r+0x2c>
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	b01d      	add	sp, #116	; 0x74
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce12:	46a8      	mov	r8, r5
 800ce14:	e7a2      	b.n	800cd5c <_vfiprintf_r+0x44>
 800ce16:	4a44      	ldr	r2, [pc, #272]	; (800cf28 <_vfiprintf_r+0x210>)
 800ce18:	1a80      	subs	r0, r0, r2
 800ce1a:	fa0b f000 	lsl.w	r0, fp, r0
 800ce1e:	4318      	orrs	r0, r3
 800ce20:	9004      	str	r0, [sp, #16]
 800ce22:	4645      	mov	r5, r8
 800ce24:	e7be      	b.n	800cda4 <_vfiprintf_r+0x8c>
 800ce26:	9a03      	ldr	r2, [sp, #12]
 800ce28:	1d11      	adds	r1, r2, #4
 800ce2a:	6812      	ldr	r2, [r2, #0]
 800ce2c:	9103      	str	r1, [sp, #12]
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	db01      	blt.n	800ce36 <_vfiprintf_r+0x11e>
 800ce32:	9207      	str	r2, [sp, #28]
 800ce34:	e004      	b.n	800ce40 <_vfiprintf_r+0x128>
 800ce36:	4252      	negs	r2, r2
 800ce38:	f043 0302 	orr.w	r3, r3, #2
 800ce3c:	9207      	str	r2, [sp, #28]
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	f898 3000 	ldrb.w	r3, [r8]
 800ce44:	2b2e      	cmp	r3, #46	; 0x2e
 800ce46:	d10e      	bne.n	800ce66 <_vfiprintf_r+0x14e>
 800ce48:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ce4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4e:	d138      	bne.n	800cec2 <_vfiprintf_r+0x1aa>
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	1d1a      	adds	r2, r3, #4
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	9203      	str	r2, [sp, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	bfb8      	it	lt
 800ce5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce60:	f108 0802 	add.w	r8, r8, #2
 800ce64:	9305      	str	r3, [sp, #20]
 800ce66:	4d33      	ldr	r5, [pc, #204]	; (800cf34 <_vfiprintf_r+0x21c>)
 800ce68:	f898 1000 	ldrb.w	r1, [r8]
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f7f3 f9ee 	bl	8000250 <memchr>
 800ce74:	b140      	cbz	r0, 800ce88 <_vfiprintf_r+0x170>
 800ce76:	2340      	movs	r3, #64	; 0x40
 800ce78:	1b40      	subs	r0, r0, r5
 800ce7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ce7e:	9b04      	ldr	r3, [sp, #16]
 800ce80:	4303      	orrs	r3, r0
 800ce82:	f108 0801 	add.w	r8, r8, #1
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	f898 1000 	ldrb.w	r1, [r8]
 800ce8c:	482a      	ldr	r0, [pc, #168]	; (800cf38 <_vfiprintf_r+0x220>)
 800ce8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce92:	2206      	movs	r2, #6
 800ce94:	f108 0701 	add.w	r7, r8, #1
 800ce98:	f7f3 f9da 	bl	8000250 <memchr>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d037      	beq.n	800cf10 <_vfiprintf_r+0x1f8>
 800cea0:	4b26      	ldr	r3, [pc, #152]	; (800cf3c <_vfiprintf_r+0x224>)
 800cea2:	bb1b      	cbnz	r3, 800ceec <_vfiprintf_r+0x1d4>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	3307      	adds	r3, #7
 800cea8:	f023 0307 	bic.w	r3, r3, #7
 800ceac:	3308      	adds	r3, #8
 800ceae:	9303      	str	r3, [sp, #12]
 800ceb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb2:	444b      	add	r3, r9
 800ceb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb6:	e750      	b.n	800cd5a <_vfiprintf_r+0x42>
 800ceb8:	fb05 3202 	mla	r2, r5, r2, r3
 800cebc:	2001      	movs	r0, #1
 800cebe:	4688      	mov	r8, r1
 800cec0:	e78a      	b.n	800cdd8 <_vfiprintf_r+0xc0>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f108 0801 	add.w	r8, r8, #1
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	4619      	mov	r1, r3
 800cecc:	250a      	movs	r5, #10
 800cece:	4640      	mov	r0, r8
 800ced0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced4:	3a30      	subs	r2, #48	; 0x30
 800ced6:	2a09      	cmp	r2, #9
 800ced8:	d903      	bls.n	800cee2 <_vfiprintf_r+0x1ca>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0c3      	beq.n	800ce66 <_vfiprintf_r+0x14e>
 800cede:	9105      	str	r1, [sp, #20]
 800cee0:	e7c1      	b.n	800ce66 <_vfiprintf_r+0x14e>
 800cee2:	fb05 2101 	mla	r1, r5, r1, r2
 800cee6:	2301      	movs	r3, #1
 800cee8:	4680      	mov	r8, r0
 800ceea:	e7f0      	b.n	800cece <_vfiprintf_r+0x1b6>
 800ceec:	ab03      	add	r3, sp, #12
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4622      	mov	r2, r4
 800cef2:	4b13      	ldr	r3, [pc, #76]	; (800cf40 <_vfiprintf_r+0x228>)
 800cef4:	a904      	add	r1, sp, #16
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7fd fe96 	bl	800ac28 <_printf_float>
 800cefc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf00:	4681      	mov	r9, r0
 800cf02:	d1d5      	bne.n	800ceb0 <_vfiprintf_r+0x198>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	065b      	lsls	r3, r3, #25
 800cf08:	f53f af7e 	bmi.w	800ce08 <_vfiprintf_r+0xf0>
 800cf0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf0e:	e77d      	b.n	800ce0c <_vfiprintf_r+0xf4>
 800cf10:	ab03      	add	r3, sp, #12
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4622      	mov	r2, r4
 800cf16:	4b0a      	ldr	r3, [pc, #40]	; (800cf40 <_vfiprintf_r+0x228>)
 800cf18:	a904      	add	r1, sp, #16
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7fe f926 	bl	800b16c <_printf_i>
 800cf20:	e7ec      	b.n	800cefc <_vfiprintf_r+0x1e4>
 800cf22:	bf00      	nop
 800cf24:	0800e038 	.word	0x0800e038
 800cf28:	0800e174 	.word	0x0800e174
 800cf2c:	0800e058 	.word	0x0800e058
 800cf30:	0800e018 	.word	0x0800e018
 800cf34:	0800e17a 	.word	0x0800e17a
 800cf38:	0800e17e 	.word	0x0800e17e
 800cf3c:	0800ac29 	.word	0x0800ac29
 800cf40:	0800ccf3 	.word	0x0800ccf3

0800cf44 <_sbrk_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4c06      	ldr	r4, [pc, #24]	; (800cf60 <_sbrk_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	f7f9 f98e 	bl	8006270 <_sbrk>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_sbrk_r+0x1a>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_sbrk_r+0x1a>
 800cf5c:	602b      	str	r3, [r5, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	2003d480 	.word	0x2003d480

0800cf64 <__sread>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	460c      	mov	r4, r1
 800cf68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf6c:	f000 f8a8 	bl	800d0c0 <_read_r>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	bfab      	itete	ge
 800cf74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf76:	89a3      	ldrhlt	r3, [r4, #12]
 800cf78:	181b      	addge	r3, r3, r0
 800cf7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf7e:	bfac      	ite	ge
 800cf80:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf82:	81a3      	strhlt	r3, [r4, #12]
 800cf84:	bd10      	pop	{r4, pc}

0800cf86 <__swrite>:
 800cf86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8a:	461f      	mov	r7, r3
 800cf8c:	898b      	ldrh	r3, [r1, #12]
 800cf8e:	05db      	lsls	r3, r3, #23
 800cf90:	4605      	mov	r5, r0
 800cf92:	460c      	mov	r4, r1
 800cf94:	4616      	mov	r6, r2
 800cf96:	d505      	bpl.n	800cfa4 <__swrite+0x1e>
 800cf98:	2302      	movs	r3, #2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa0:	f000 f868 	bl	800d074 <_lseek_r>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	463b      	mov	r3, r7
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfba:	f000 b817 	b.w	800cfec <_write_r>

0800cfbe <__sseek>:
 800cfbe:	b510      	push	{r4, lr}
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc6:	f000 f855 	bl	800d074 <_lseek_r>
 800cfca:	1c43      	adds	r3, r0, #1
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	bf15      	itete	ne
 800cfd0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfda:	81a3      	strheq	r3, [r4, #12]
 800cfdc:	bf18      	it	ne
 800cfde:	81a3      	strhne	r3, [r4, #12]
 800cfe0:	bd10      	pop	{r4, pc}

0800cfe2 <__sclose>:
 800cfe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe6:	f000 b813 	b.w	800d010 <_close_r>
	...

0800cfec <_write_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4c07      	ldr	r4, [pc, #28]	; (800d00c <_write_r+0x20>)
 800cff0:	4605      	mov	r5, r0
 800cff2:	4608      	mov	r0, r1
 800cff4:	4611      	mov	r1, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	6022      	str	r2, [r4, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	f7f9 f8e7 	bl	80061ce <_write>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_write_r+0x1e>
 800d004:	6823      	ldr	r3, [r4, #0]
 800d006:	b103      	cbz	r3, 800d00a <_write_r+0x1e>
 800d008:	602b      	str	r3, [r5, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	2003d480 	.word	0x2003d480

0800d010 <_close_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4c06      	ldr	r4, [pc, #24]	; (800d02c <_close_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4605      	mov	r5, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	f7f9 f8f3 	bl	8006206 <_close>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_close_r+0x1a>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	b103      	cbz	r3, 800d02a <_close_r+0x1a>
 800d028:	602b      	str	r3, [r5, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	2003d480 	.word	0x2003d480

0800d030 <_fstat_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4c07      	ldr	r4, [pc, #28]	; (800d050 <_fstat_r+0x20>)
 800d034:	2300      	movs	r3, #0
 800d036:	4605      	mov	r5, r0
 800d038:	4608      	mov	r0, r1
 800d03a:	4611      	mov	r1, r2
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	f7f9 f8ee 	bl	800621e <_fstat>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	d102      	bne.n	800d04c <_fstat_r+0x1c>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	b103      	cbz	r3, 800d04c <_fstat_r+0x1c>
 800d04a:	602b      	str	r3, [r5, #0]
 800d04c:	bd38      	pop	{r3, r4, r5, pc}
 800d04e:	bf00      	nop
 800d050:	2003d480 	.word	0x2003d480

0800d054 <_isatty_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4c06      	ldr	r4, [pc, #24]	; (800d070 <_isatty_r+0x1c>)
 800d058:	2300      	movs	r3, #0
 800d05a:	4605      	mov	r5, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	6023      	str	r3, [r4, #0]
 800d060:	f7f9 f8ed 	bl	800623e <_isatty>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	d102      	bne.n	800d06e <_isatty_r+0x1a>
 800d068:	6823      	ldr	r3, [r4, #0]
 800d06a:	b103      	cbz	r3, 800d06e <_isatty_r+0x1a>
 800d06c:	602b      	str	r3, [r5, #0]
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	2003d480 	.word	0x2003d480

0800d074 <_lseek_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4c07      	ldr	r4, [pc, #28]	; (800d094 <_lseek_r+0x20>)
 800d078:	4605      	mov	r5, r0
 800d07a:	4608      	mov	r0, r1
 800d07c:	4611      	mov	r1, r2
 800d07e:	2200      	movs	r2, #0
 800d080:	6022      	str	r2, [r4, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	f7f9 f8e6 	bl	8006254 <_lseek>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_lseek_r+0x1e>
 800d08c:	6823      	ldr	r3, [r4, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_lseek_r+0x1e>
 800d090:	602b      	str	r3, [r5, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	2003d480 	.word	0x2003d480

0800d098 <__ascii_mbtowc>:
 800d098:	b082      	sub	sp, #8
 800d09a:	b901      	cbnz	r1, 800d09e <__ascii_mbtowc+0x6>
 800d09c:	a901      	add	r1, sp, #4
 800d09e:	b142      	cbz	r2, 800d0b2 <__ascii_mbtowc+0x1a>
 800d0a0:	b14b      	cbz	r3, 800d0b6 <__ascii_mbtowc+0x1e>
 800d0a2:	7813      	ldrb	r3, [r2, #0]
 800d0a4:	600b      	str	r3, [r1, #0]
 800d0a6:	7812      	ldrb	r2, [r2, #0]
 800d0a8:	1c10      	adds	r0, r2, #0
 800d0aa:	bf18      	it	ne
 800d0ac:	2001      	movne	r0, #1
 800d0ae:	b002      	add	sp, #8
 800d0b0:	4770      	bx	lr
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	e7fb      	b.n	800d0ae <__ascii_mbtowc+0x16>
 800d0b6:	f06f 0001 	mvn.w	r0, #1
 800d0ba:	e7f8      	b.n	800d0ae <__ascii_mbtowc+0x16>

0800d0bc <__malloc_lock>:
 800d0bc:	4770      	bx	lr

0800d0be <__malloc_unlock>:
 800d0be:	4770      	bx	lr

0800d0c0 <_read_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4c07      	ldr	r4, [pc, #28]	; (800d0e0 <_read_r+0x20>)
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	4608      	mov	r0, r1
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	6022      	str	r2, [r4, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	f7f9 f860 	bl	8006194 <_read>
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	d102      	bne.n	800d0de <_read_r+0x1e>
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	b103      	cbz	r3, 800d0de <_read_r+0x1e>
 800d0dc:	602b      	str	r3, [r5, #0]
 800d0de:	bd38      	pop	{r3, r4, r5, pc}
 800d0e0:	2003d480 	.word	0x2003d480

0800d0e4 <__ascii_wctomb>:
 800d0e4:	b149      	cbz	r1, 800d0fa <__ascii_wctomb+0x16>
 800d0e6:	2aff      	cmp	r2, #255	; 0xff
 800d0e8:	bf85      	ittet	hi
 800d0ea:	238a      	movhi	r3, #138	; 0x8a
 800d0ec:	6003      	strhi	r3, [r0, #0]
 800d0ee:	700a      	strbls	r2, [r1, #0]
 800d0f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0f4:	bf98      	it	ls
 800d0f6:	2001      	movls	r0, #1
 800d0f8:	4770      	bx	lr
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	4770      	bx	lr
	...

0800d100 <cos>:
 800d100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d102:	eeb0 7b40 	vmov.f64	d7, d0
 800d106:	ee17 3a90 	vmov	r3, s15
 800d10a:	4a19      	ldr	r2, [pc, #100]	; (800d170 <cos+0x70>)
 800d10c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d110:	4293      	cmp	r3, r2
 800d112:	dc04      	bgt.n	800d11e <cos+0x1e>
 800d114:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d168 <cos+0x68>
 800d118:	f000 f9a6 	bl	800d468 <__kernel_cos>
 800d11c:	e004      	b.n	800d128 <cos+0x28>
 800d11e:	4a15      	ldr	r2, [pc, #84]	; (800d174 <cos+0x74>)
 800d120:	4293      	cmp	r3, r2
 800d122:	dd04      	ble.n	800d12e <cos+0x2e>
 800d124:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d128:	b005      	add	sp, #20
 800d12a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d12e:	4668      	mov	r0, sp
 800d130:	f000 f85e 	bl	800d1f0 <__ieee754_rem_pio2>
 800d134:	f000 0003 	and.w	r0, r0, #3
 800d138:	2801      	cmp	r0, #1
 800d13a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d13e:	ed9d 0b00 	vldr	d0, [sp]
 800d142:	d007      	beq.n	800d154 <cos+0x54>
 800d144:	2802      	cmp	r0, #2
 800d146:	d00a      	beq.n	800d15e <cos+0x5e>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d0e5      	beq.n	800d118 <cos+0x18>
 800d14c:	2001      	movs	r0, #1
 800d14e:	f000 fc93 	bl	800da78 <__kernel_sin>
 800d152:	e7e9      	b.n	800d128 <cos+0x28>
 800d154:	f000 fc90 	bl	800da78 <__kernel_sin>
 800d158:	eeb1 0b40 	vneg.f64	d0, d0
 800d15c:	e7e4      	b.n	800d128 <cos+0x28>
 800d15e:	f000 f983 	bl	800d468 <__kernel_cos>
 800d162:	e7f9      	b.n	800d158 <cos+0x58>
 800d164:	f3af 8000 	nop.w
	...
 800d170:	3fe921fb 	.word	0x3fe921fb
 800d174:	7fefffff 	.word	0x7fefffff

0800d178 <sin>:
 800d178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d17a:	eeb0 7b40 	vmov.f64	d7, d0
 800d17e:	ee17 3a90 	vmov	r3, s15
 800d182:	4a19      	ldr	r2, [pc, #100]	; (800d1e8 <sin+0x70>)
 800d184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d188:	4293      	cmp	r3, r2
 800d18a:	dc05      	bgt.n	800d198 <sin+0x20>
 800d18c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d1e0 <sin+0x68>
 800d190:	2000      	movs	r0, #0
 800d192:	f000 fc71 	bl	800da78 <__kernel_sin>
 800d196:	e004      	b.n	800d1a2 <sin+0x2a>
 800d198:	4a14      	ldr	r2, [pc, #80]	; (800d1ec <sin+0x74>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	dd04      	ble.n	800d1a8 <sin+0x30>
 800d19e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d1a2:	b005      	add	sp, #20
 800d1a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1a8:	4668      	mov	r0, sp
 800d1aa:	f000 f821 	bl	800d1f0 <__ieee754_rem_pio2>
 800d1ae:	f000 0003 	and.w	r0, r0, #3
 800d1b2:	2801      	cmp	r0, #1
 800d1b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1b8:	ed9d 0b00 	vldr	d0, [sp]
 800d1bc:	d004      	beq.n	800d1c8 <sin+0x50>
 800d1be:	2802      	cmp	r0, #2
 800d1c0:	d005      	beq.n	800d1ce <sin+0x56>
 800d1c2:	b950      	cbnz	r0, 800d1da <sin+0x62>
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	e7e4      	b.n	800d192 <sin+0x1a>
 800d1c8:	f000 f94e 	bl	800d468 <__kernel_cos>
 800d1cc:	e7e9      	b.n	800d1a2 <sin+0x2a>
 800d1ce:	2001      	movs	r0, #1
 800d1d0:	f000 fc52 	bl	800da78 <__kernel_sin>
 800d1d4:	eeb1 0b40 	vneg.f64	d0, d0
 800d1d8:	e7e3      	b.n	800d1a2 <sin+0x2a>
 800d1da:	f000 f945 	bl	800d468 <__kernel_cos>
 800d1de:	e7f9      	b.n	800d1d4 <sin+0x5c>
	...
 800d1e8:	3fe921fb 	.word	0x3fe921fb
 800d1ec:	7fefffff 	.word	0x7fefffff

0800d1f0 <__ieee754_rem_pio2>:
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	eeb0 7b40 	vmov.f64	d7, d0
 800d1f6:	ee17 5a90 	vmov	r5, s15
 800d1fa:	4b95      	ldr	r3, [pc, #596]	; (800d450 <__ieee754_rem_pio2+0x260>)
 800d1fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d200:	429e      	cmp	r6, r3
 800d202:	b088      	sub	sp, #32
 800d204:	4604      	mov	r4, r0
 800d206:	dc07      	bgt.n	800d218 <__ieee754_rem_pio2+0x28>
 800d208:	2200      	movs	r2, #0
 800d20a:	2300      	movs	r3, #0
 800d20c:	ed84 0b00 	vstr	d0, [r4]
 800d210:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d214:	2000      	movs	r0, #0
 800d216:	e01b      	b.n	800d250 <__ieee754_rem_pio2+0x60>
 800d218:	4b8e      	ldr	r3, [pc, #568]	; (800d454 <__ieee754_rem_pio2+0x264>)
 800d21a:	429e      	cmp	r6, r3
 800d21c:	dc3b      	bgt.n	800d296 <__ieee754_rem_pio2+0xa6>
 800d21e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d222:	2d00      	cmp	r5, #0
 800d224:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d410 <__ieee754_rem_pio2+0x220>
 800d228:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d22c:	dd19      	ble.n	800d262 <__ieee754_rem_pio2+0x72>
 800d22e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d232:	429e      	cmp	r6, r3
 800d234:	d00e      	beq.n	800d254 <__ieee754_rem_pio2+0x64>
 800d236:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d418 <__ieee754_rem_pio2+0x228>
 800d23a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d23e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d242:	ed84 5b00 	vstr	d5, [r4]
 800d246:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d24a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d24e:	2001      	movs	r0, #1
 800d250:	b008      	add	sp, #32
 800d252:	bd70      	pop	{r4, r5, r6, pc}
 800d254:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d420 <__ieee754_rem_pio2+0x230>
 800d258:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d25c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d428 <__ieee754_rem_pio2+0x238>
 800d260:	e7eb      	b.n	800d23a <__ieee754_rem_pio2+0x4a>
 800d262:	429e      	cmp	r6, r3
 800d264:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d268:	d00e      	beq.n	800d288 <__ieee754_rem_pio2+0x98>
 800d26a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d418 <__ieee754_rem_pio2+0x228>
 800d26e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d272:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d276:	ed84 5b00 	vstr	d5, [r4]
 800d27a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	ed84 7b02 	vstr	d7, [r4, #8]
 800d286:	e7e3      	b.n	800d250 <__ieee754_rem_pio2+0x60>
 800d288:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d420 <__ieee754_rem_pio2+0x230>
 800d28c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d290:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d428 <__ieee754_rem_pio2+0x238>
 800d294:	e7eb      	b.n	800d26e <__ieee754_rem_pio2+0x7e>
 800d296:	4b70      	ldr	r3, [pc, #448]	; (800d458 <__ieee754_rem_pio2+0x268>)
 800d298:	429e      	cmp	r6, r3
 800d29a:	dc6c      	bgt.n	800d376 <__ieee754_rem_pio2+0x186>
 800d29c:	f000 fc44 	bl	800db28 <fabs>
 800d2a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d2a4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d430 <__ieee754_rem_pio2+0x240>
 800d2a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d2ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d2b0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d2b4:	ee17 0a90 	vmov	r0, s15
 800d2b8:	eeb1 5b44 	vneg.f64	d5, d4
 800d2bc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d410 <__ieee754_rem_pio2+0x220>
 800d2c0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d2c4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d418 <__ieee754_rem_pio2+0x228>
 800d2c8:	281f      	cmp	r0, #31
 800d2ca:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d2ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d2d2:	dc08      	bgt.n	800d2e6 <__ieee754_rem_pio2+0xf6>
 800d2d4:	1e42      	subs	r2, r0, #1
 800d2d6:	4b61      	ldr	r3, [pc, #388]	; (800d45c <__ieee754_rem_pio2+0x26c>)
 800d2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2dc:	42b3      	cmp	r3, r6
 800d2de:	d002      	beq.n	800d2e6 <__ieee754_rem_pio2+0xf6>
 800d2e0:	ed84 6b00 	vstr	d6, [r4]
 800d2e4:	e022      	b.n	800d32c <__ieee754_rem_pio2+0x13c>
 800d2e6:	ee16 3a90 	vmov	r3, s13
 800d2ea:	1536      	asrs	r6, r6, #20
 800d2ec:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d2f0:	1af3      	subs	r3, r6, r3
 800d2f2:	2b10      	cmp	r3, #16
 800d2f4:	ddf4      	ble.n	800d2e0 <__ieee754_rem_pio2+0xf0>
 800d2f6:	eeb0 6b40 	vmov.f64	d6, d0
 800d2fa:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d420 <__ieee754_rem_pio2+0x230>
 800d2fe:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d302:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d306:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d30a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d428 <__ieee754_rem_pio2+0x238>
 800d30e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d312:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d316:	ee13 3a90 	vmov	r3, s7
 800d31a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d31e:	1af6      	subs	r6, r6, r3
 800d320:	2e31      	cmp	r6, #49	; 0x31
 800d322:	dc17      	bgt.n	800d354 <__ieee754_rem_pio2+0x164>
 800d324:	eeb0 0b46 	vmov.f64	d0, d6
 800d328:	ed84 3b00 	vstr	d3, [r4]
 800d32c:	ed94 6b00 	vldr	d6, [r4]
 800d330:	2d00      	cmp	r5, #0
 800d332:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d336:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d33a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d33e:	da87      	bge.n	800d250 <__ieee754_rem_pio2+0x60>
 800d340:	eeb1 6b46 	vneg.f64	d6, d6
 800d344:	ed84 6b00 	vstr	d6, [r4]
 800d348:	eeb1 7b47 	vneg.f64	d7, d7
 800d34c:	4240      	negs	r0, r0
 800d34e:	ed84 7b02 	vstr	d7, [r4, #8]
 800d352:	e77d      	b.n	800d250 <__ieee754_rem_pio2+0x60>
 800d354:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d438 <__ieee754_rem_pio2+0x248>
 800d358:	eeb0 0b46 	vmov.f64	d0, d6
 800d35c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d360:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d364:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d440 <__ieee754_rem_pio2+0x250>
 800d368:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d36c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d370:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d374:	e7b4      	b.n	800d2e0 <__ieee754_rem_pio2+0xf0>
 800d376:	4b3a      	ldr	r3, [pc, #232]	; (800d460 <__ieee754_rem_pio2+0x270>)
 800d378:	429e      	cmp	r6, r3
 800d37a:	dd06      	ble.n	800d38a <__ieee754_rem_pio2+0x19a>
 800d37c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d380:	ed80 7b02 	vstr	d7, [r0, #8]
 800d384:	ed80 7b00 	vstr	d7, [r0]
 800d388:	e744      	b.n	800d214 <__ieee754_rem_pio2+0x24>
 800d38a:	1532      	asrs	r2, r6, #20
 800d38c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d390:	ee10 0a10 	vmov	r0, s0
 800d394:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d398:	ec41 0b17 	vmov	d7, r0, r1
 800d39c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d3a0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d448 <__ieee754_rem_pio2+0x258>
 800d3a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d3a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d3b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d3b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d3b8:	a908      	add	r1, sp, #32
 800d3ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d3be:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d3c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d3ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	ed31 7b02 	vldmdb	r1!, {d7}
 800d3d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3dc:	f103 30ff 	add.w	r0, r3, #4294967295
 800d3e0:	d013      	beq.n	800d40a <__ieee754_rem_pio2+0x21a>
 800d3e2:	4920      	ldr	r1, [pc, #128]	; (800d464 <__ieee754_rem_pio2+0x274>)
 800d3e4:	9101      	str	r1, [sp, #4]
 800d3e6:	2102      	movs	r1, #2
 800d3e8:	9100      	str	r1, [sp, #0]
 800d3ea:	a802      	add	r0, sp, #8
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	f000 f8a7 	bl	800d540 <__kernel_rem_pio2>
 800d3f2:	2d00      	cmp	r5, #0
 800d3f4:	f6bf af2c 	bge.w	800d250 <__ieee754_rem_pio2+0x60>
 800d3f8:	ed94 7b00 	vldr	d7, [r4]
 800d3fc:	eeb1 7b47 	vneg.f64	d7, d7
 800d400:	ed84 7b00 	vstr	d7, [r4]
 800d404:	ed94 7b02 	vldr	d7, [r4, #8]
 800d408:	e79e      	b.n	800d348 <__ieee754_rem_pio2+0x158>
 800d40a:	4603      	mov	r3, r0
 800d40c:	e7e0      	b.n	800d3d0 <__ieee754_rem_pio2+0x1e0>
 800d40e:	bf00      	nop
 800d410:	54400000 	.word	0x54400000
 800d414:	3ff921fb 	.word	0x3ff921fb
 800d418:	1a626331 	.word	0x1a626331
 800d41c:	3dd0b461 	.word	0x3dd0b461
 800d420:	1a600000 	.word	0x1a600000
 800d424:	3dd0b461 	.word	0x3dd0b461
 800d428:	2e037073 	.word	0x2e037073
 800d42c:	3ba3198a 	.word	0x3ba3198a
 800d430:	6dc9c883 	.word	0x6dc9c883
 800d434:	3fe45f30 	.word	0x3fe45f30
 800d438:	2e000000 	.word	0x2e000000
 800d43c:	3ba3198a 	.word	0x3ba3198a
 800d440:	252049c1 	.word	0x252049c1
 800d444:	397b839a 	.word	0x397b839a
 800d448:	00000000 	.word	0x00000000
 800d44c:	41700000 	.word	0x41700000
 800d450:	3fe921fb 	.word	0x3fe921fb
 800d454:	4002d97b 	.word	0x4002d97b
 800d458:	413921fb 	.word	0x413921fb
 800d45c:	0800e290 	.word	0x0800e290
 800d460:	7fefffff 	.word	0x7fefffff
 800d464:	0800e310 	.word	0x0800e310

0800d468 <__kernel_cos>:
 800d468:	ee10 1a90 	vmov	r1, s1
 800d46c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d474:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d478:	da05      	bge.n	800d486 <__kernel_cos+0x1e>
 800d47a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d47e:	ee16 3a90 	vmov	r3, s13
 800d482:	2b00      	cmp	r3, #0
 800d484:	d03d      	beq.n	800d502 <__kernel_cos+0x9a>
 800d486:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d48a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d48e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d508 <__kernel_cos+0xa0>
 800d492:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d496:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d49a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d510 <__kernel_cos+0xa8>
 800d49e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d4a2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d518 <__kernel_cos+0xb0>
 800d4a6:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d4aa:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d520 <__kernel_cos+0xb8>
 800d4ae:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d4b2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d528 <__kernel_cos+0xc0>
 800d4b6:	4b20      	ldr	r3, [pc, #128]	; (800d538 <__kernel_cos+0xd0>)
 800d4b8:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d4bc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d530 <__kernel_cos+0xc8>
 800d4c0:	4299      	cmp	r1, r3
 800d4c2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d4c6:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d4ca:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d4ce:	dc04      	bgt.n	800d4da <__kernel_cos+0x72>
 800d4d0:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d4d4:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d4d8:	4770      	bx	lr
 800d4da:	4b18      	ldr	r3, [pc, #96]	; (800d53c <__kernel_cos+0xd4>)
 800d4dc:	4299      	cmp	r1, r3
 800d4de:	dc0d      	bgt.n	800d4fc <__kernel_cos+0x94>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d4e6:	ec43 2b15 	vmov	d5, r2, r3
 800d4ea:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d4ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4f2:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d4f6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d4fa:	4770      	bx	lr
 800d4fc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d500:	e7f3      	b.n	800d4ea <__kernel_cos+0x82>
 800d502:	eeb0 0b47 	vmov.f64	d0, d7
 800d506:	4770      	bx	lr
 800d508:	be8838d4 	.word	0xbe8838d4
 800d50c:	bda8fae9 	.word	0xbda8fae9
 800d510:	bdb4b1c4 	.word	0xbdb4b1c4
 800d514:	3e21ee9e 	.word	0x3e21ee9e
 800d518:	809c52ad 	.word	0x809c52ad
 800d51c:	be927e4f 	.word	0xbe927e4f
 800d520:	19cb1590 	.word	0x19cb1590
 800d524:	3efa01a0 	.word	0x3efa01a0
 800d528:	16c15177 	.word	0x16c15177
 800d52c:	bf56c16c 	.word	0xbf56c16c
 800d530:	5555554c 	.word	0x5555554c
 800d534:	3fa55555 	.word	0x3fa55555
 800d538:	3fd33332 	.word	0x3fd33332
 800d53c:	3fe90000 	.word	0x3fe90000

0800d540 <__kernel_rem_pio2>:
 800d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	ed2d 8b06 	vpush	{d8-d10}
 800d548:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d54c:	469b      	mov	fp, r3
 800d54e:	460e      	mov	r6, r1
 800d550:	4bc7      	ldr	r3, [pc, #796]	; (800d870 <__kernel_rem_pio2+0x330>)
 800d552:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d554:	9002      	str	r0, [sp, #8]
 800d556:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d55a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d55c:	1ed1      	subs	r1, r2, #3
 800d55e:	2318      	movs	r3, #24
 800d560:	f06f 0417 	mvn.w	r4, #23
 800d564:	fb91 f1f3 	sdiv	r1, r1, r3
 800d568:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d56c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d570:	fb01 4404 	mla	r4, r1, r4, r4
 800d574:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d858 <__kernel_rem_pio2+0x318>
 800d578:	4414      	add	r4, r2
 800d57a:	eba1 050a 	sub.w	r5, r1, sl
 800d57e:	aa1a      	add	r2, sp, #104	; 0x68
 800d580:	eb09 070a 	add.w	r7, r9, sl
 800d584:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d588:	4696      	mov	lr, r2
 800d58a:	2300      	movs	r3, #0
 800d58c:	42bb      	cmp	r3, r7
 800d58e:	dd0f      	ble.n	800d5b0 <__kernel_rem_pio2+0x70>
 800d590:	af6a      	add	r7, sp, #424	; 0x1a8
 800d592:	2200      	movs	r2, #0
 800d594:	454a      	cmp	r2, r9
 800d596:	dc28      	bgt.n	800d5ea <__kernel_rem_pio2+0xaa>
 800d598:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d59c:	eb0b 0302 	add.w	r3, fp, r2
 800d5a0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d5a4:	9d02      	ldr	r5, [sp, #8]
 800d5a6:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d858 <__kernel_rem_pio2+0x318>
 800d5aa:	f04f 0c00 	mov.w	ip, #0
 800d5ae:	e016      	b.n	800d5de <__kernel_rem_pio2+0x9e>
 800d5b0:	42dd      	cmn	r5, r3
 800d5b2:	d409      	bmi.n	800d5c8 <__kernel_rem_pio2+0x88>
 800d5b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d5b8:	ee07 2a90 	vmov	s15, r2
 800d5bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5c0:	ecae 7b02 	vstmia	lr!, {d7}
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	e7e1      	b.n	800d58c <__kernel_rem_pio2+0x4c>
 800d5c8:	eeb0 7b46 	vmov.f64	d7, d6
 800d5cc:	e7f8      	b.n	800d5c0 <__kernel_rem_pio2+0x80>
 800d5ce:	ecb5 5b02 	vldmia	r5!, {d5}
 800d5d2:	ed33 6b02 	vldmdb	r3!, {d6}
 800d5d6:	f10c 0c01 	add.w	ip, ip, #1
 800d5da:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d5de:	45d4      	cmp	ip, sl
 800d5e0:	ddf5      	ble.n	800d5ce <__kernel_rem_pio2+0x8e>
 800d5e2:	eca7 7b02 	vstmia	r7!, {d7}
 800d5e6:	3201      	adds	r2, #1
 800d5e8:	e7d4      	b.n	800d594 <__kernel_rem_pio2+0x54>
 800d5ea:	ab06      	add	r3, sp, #24
 800d5ec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d5f0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d860 <__kernel_rem_pio2+0x320>
 800d5f4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d868 <__kernel_rem_pio2+0x328>
 800d5f8:	9304      	str	r3, [sp, #16]
 800d5fa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	464d      	mov	r5, r9
 800d602:	ab92      	add	r3, sp, #584	; 0x248
 800d604:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d608:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d60c:	3f01      	subs	r7, #1
 800d60e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d612:	00ff      	lsls	r7, r7, #3
 800d614:	ab92      	add	r3, sp, #584	; 0x248
 800d616:	19da      	adds	r2, r3, r7
 800d618:	3a98      	subs	r2, #152	; 0x98
 800d61a:	2300      	movs	r3, #0
 800d61c:	1ae9      	subs	r1, r5, r3
 800d61e:	2900      	cmp	r1, #0
 800d620:	dc4e      	bgt.n	800d6c0 <__kernel_rem_pio2+0x180>
 800d622:	4620      	mov	r0, r4
 800d624:	f000 fb04 	bl	800dc30 <scalbn>
 800d628:	eeb0 8b40 	vmov.f64	d8, d0
 800d62c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d630:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d634:	f000 fa84 	bl	800db40 <floor>
 800d638:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d63c:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d640:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d644:	2c00      	cmp	r4, #0
 800d646:	edcd 7a01 	vstr	s15, [sp, #4]
 800d64a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d64e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d652:	dd4a      	ble.n	800d6ea <__kernel_rem_pio2+0x1aa>
 800d654:	1e69      	subs	r1, r5, #1
 800d656:	ab06      	add	r3, sp, #24
 800d658:	f1c4 0018 	rsb	r0, r4, #24
 800d65c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d660:	9a01      	ldr	r2, [sp, #4]
 800d662:	fa4c f300 	asr.w	r3, ip, r0
 800d666:	441a      	add	r2, r3
 800d668:	4083      	lsls	r3, r0
 800d66a:	9201      	str	r2, [sp, #4]
 800d66c:	ebac 0203 	sub.w	r2, ip, r3
 800d670:	ab06      	add	r3, sp, #24
 800d672:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d676:	f1c4 0317 	rsb	r3, r4, #23
 800d67a:	fa42 f803 	asr.w	r8, r2, r3
 800d67e:	f1b8 0f00 	cmp.w	r8, #0
 800d682:	dd43      	ble.n	800d70c <__kernel_rem_pio2+0x1cc>
 800d684:	9b01      	ldr	r3, [sp, #4]
 800d686:	2000      	movs	r0, #0
 800d688:	3301      	adds	r3, #1
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	4601      	mov	r1, r0
 800d68e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d692:	4285      	cmp	r5, r0
 800d694:	dc6e      	bgt.n	800d774 <__kernel_rem_pio2+0x234>
 800d696:	2c00      	cmp	r4, #0
 800d698:	dd04      	ble.n	800d6a4 <__kernel_rem_pio2+0x164>
 800d69a:	2c01      	cmp	r4, #1
 800d69c:	d07f      	beq.n	800d79e <__kernel_rem_pio2+0x25e>
 800d69e:	2c02      	cmp	r4, #2
 800d6a0:	f000 8087 	beq.w	800d7b2 <__kernel_rem_pio2+0x272>
 800d6a4:	f1b8 0f02 	cmp.w	r8, #2
 800d6a8:	d130      	bne.n	800d70c <__kernel_rem_pio2+0x1cc>
 800d6aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d6ae:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d6b2:	b359      	cbz	r1, 800d70c <__kernel_rem_pio2+0x1cc>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 fabb 	bl	800dc30 <scalbn>
 800d6ba:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d6be:	e025      	b.n	800d70c <__kernel_rem_pio2+0x1cc>
 800d6c0:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d6c4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d6c8:	a806      	add	r0, sp, #24
 800d6ca:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d6ce:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d6d2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d6d6:	ee10 1a10 	vmov	r1, s0
 800d6da:	ed32 0b02 	vldmdb	r2!, {d0}
 800d6de:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d6e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	e798      	b.n	800d61c <__kernel_rem_pio2+0xdc>
 800d6ea:	d106      	bne.n	800d6fa <__kernel_rem_pio2+0x1ba>
 800d6ec:	1e6b      	subs	r3, r5, #1
 800d6ee:	aa06      	add	r2, sp, #24
 800d6f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d6f4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d6f8:	e7c1      	b.n	800d67e <__kernel_rem_pio2+0x13e>
 800d6fa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d6fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d706:	da32      	bge.n	800d76e <__kernel_rem_pio2+0x22e>
 800d708:	f04f 0800 	mov.w	r8, #0
 800d70c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d714:	f040 80b0 	bne.w	800d878 <__kernel_rem_pio2+0x338>
 800d718:	1e6b      	subs	r3, r5, #1
 800d71a:	4618      	mov	r0, r3
 800d71c:	2200      	movs	r2, #0
 800d71e:	4548      	cmp	r0, r9
 800d720:	da4e      	bge.n	800d7c0 <__kernel_rem_pio2+0x280>
 800d722:	2a00      	cmp	r2, #0
 800d724:	f000 8088 	beq.w	800d838 <__kernel_rem_pio2+0x2f8>
 800d728:	aa06      	add	r2, sp, #24
 800d72a:	3c18      	subs	r4, #24
 800d72c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d730:	2900      	cmp	r1, #0
 800d732:	f000 808e 	beq.w	800d852 <__kernel_rem_pio2+0x312>
 800d736:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d73a:	4620      	mov	r0, r4
 800d73c:	9302      	str	r3, [sp, #8]
 800d73e:	f000 fa77 	bl	800dc30 <scalbn>
 800d742:	9b02      	ldr	r3, [sp, #8]
 800d744:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d746:	00d9      	lsls	r1, r3, #3
 800d748:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d860 <__kernel_rem_pio2+0x320>
 800d74c:	1850      	adds	r0, r2, r1
 800d74e:	f100 0508 	add.w	r5, r0, #8
 800d752:	461c      	mov	r4, r3
 800d754:	2c00      	cmp	r4, #0
 800d756:	f280 80bd 	bge.w	800d8d4 <__kernel_rem_pio2+0x394>
 800d75a:	2500      	movs	r5, #0
 800d75c:	1b5c      	subs	r4, r3, r5
 800d75e:	2c00      	cmp	r4, #0
 800d760:	f2c0 80dd 	blt.w	800d91e <__kernel_rem_pio2+0x3de>
 800d764:	4f43      	ldr	r7, [pc, #268]	; (800d874 <__kernel_rem_pio2+0x334>)
 800d766:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d858 <__kernel_rem_pio2+0x318>
 800d76a:	2400      	movs	r4, #0
 800d76c:	e0cb      	b.n	800d906 <__kernel_rem_pio2+0x3c6>
 800d76e:	f04f 0802 	mov.w	r8, #2
 800d772:	e787      	b.n	800d684 <__kernel_rem_pio2+0x144>
 800d774:	ab06      	add	r3, sp, #24
 800d776:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d77a:	b949      	cbnz	r1, 800d790 <__kernel_rem_pio2+0x250>
 800d77c:	b12b      	cbz	r3, 800d78a <__kernel_rem_pio2+0x24a>
 800d77e:	aa06      	add	r2, sp, #24
 800d780:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d784:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d788:	2301      	movs	r3, #1
 800d78a:	3001      	adds	r0, #1
 800d78c:	4619      	mov	r1, r3
 800d78e:	e780      	b.n	800d692 <__kernel_rem_pio2+0x152>
 800d790:	aa06      	add	r2, sp, #24
 800d792:	ebac 0303 	sub.w	r3, ip, r3
 800d796:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d79a:	460b      	mov	r3, r1
 800d79c:	e7f5      	b.n	800d78a <__kernel_rem_pio2+0x24a>
 800d79e:	1e68      	subs	r0, r5, #1
 800d7a0:	ab06      	add	r3, sp, #24
 800d7a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d7aa:	aa06      	add	r2, sp, #24
 800d7ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7b0:	e778      	b.n	800d6a4 <__kernel_rem_pio2+0x164>
 800d7b2:	1e68      	subs	r0, r5, #1
 800d7b4:	ab06      	add	r3, sp, #24
 800d7b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7be:	e7f4      	b.n	800d7aa <__kernel_rem_pio2+0x26a>
 800d7c0:	a906      	add	r1, sp, #24
 800d7c2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d7c6:	3801      	subs	r0, #1
 800d7c8:	430a      	orrs	r2, r1
 800d7ca:	e7a8      	b.n	800d71e <__kernel_rem_pio2+0x1de>
 800d7cc:	f10c 0c01 	add.w	ip, ip, #1
 800d7d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d7d4:	2a00      	cmp	r2, #0
 800d7d6:	d0f9      	beq.n	800d7cc <__kernel_rem_pio2+0x28c>
 800d7d8:	eb0b 0305 	add.w	r3, fp, r5
 800d7dc:	aa1a      	add	r2, sp, #104	; 0x68
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	1898      	adds	r0, r3, r2
 800d7e2:	3008      	adds	r0, #8
 800d7e4:	1c69      	adds	r1, r5, #1
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	4465      	add	r5, ip
 800d7ec:	9005      	str	r0, [sp, #20]
 800d7ee:	428d      	cmp	r5, r1
 800d7f0:	f6ff af07 	blt.w	800d602 <__kernel_rem_pio2+0xc2>
 800d7f4:	a81a      	add	r0, sp, #104	; 0x68
 800d7f6:	eb02 0c03 	add.w	ip, r2, r3
 800d7fa:	4484      	add	ip, r0
 800d7fc:	9803      	ldr	r0, [sp, #12]
 800d7fe:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d802:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d806:	9001      	str	r0, [sp, #4]
 800d808:	ee07 0a90 	vmov	s15, r0
 800d80c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d810:	9805      	ldr	r0, [sp, #20]
 800d812:	ed8c 7b00 	vstr	d7, [ip]
 800d816:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d858 <__kernel_rem_pio2+0x318>
 800d81a:	eb00 0802 	add.w	r8, r0, r2
 800d81e:	f04f 0c00 	mov.w	ip, #0
 800d822:	45d4      	cmp	ip, sl
 800d824:	dd0c      	ble.n	800d840 <__kernel_rem_pio2+0x300>
 800d826:	eb02 0c07 	add.w	ip, r2, r7
 800d82a:	a86a      	add	r0, sp, #424	; 0x1a8
 800d82c:	4484      	add	ip, r0
 800d82e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d832:	3101      	adds	r1, #1
 800d834:	3208      	adds	r2, #8
 800d836:	e7da      	b.n	800d7ee <__kernel_rem_pio2+0x2ae>
 800d838:	9b04      	ldr	r3, [sp, #16]
 800d83a:	f04f 0c01 	mov.w	ip, #1
 800d83e:	e7c7      	b.n	800d7d0 <__kernel_rem_pio2+0x290>
 800d840:	ecbe 5b02 	vldmia	lr!, {d5}
 800d844:	ed38 6b02 	vldmdb	r8!, {d6}
 800d848:	f10c 0c01 	add.w	ip, ip, #1
 800d84c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d850:	e7e7      	b.n	800d822 <__kernel_rem_pio2+0x2e2>
 800d852:	3b01      	subs	r3, #1
 800d854:	e768      	b.n	800d728 <__kernel_rem_pio2+0x1e8>
 800d856:	bf00      	nop
	...
 800d864:	3e700000 	.word	0x3e700000
 800d868:	00000000 	.word	0x00000000
 800d86c:	41700000 	.word	0x41700000
 800d870:	0800e458 	.word	0x0800e458
 800d874:	0800e418 	.word	0x0800e418
 800d878:	4260      	negs	r0, r4
 800d87a:	eeb0 0b48 	vmov.f64	d0, d8
 800d87e:	f000 f9d7 	bl	800dc30 <scalbn>
 800d882:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800da60 <__kernel_rem_pio2+0x520>
 800d886:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88e:	db18      	blt.n	800d8c2 <__kernel_rem_pio2+0x382>
 800d890:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800da68 <__kernel_rem_pio2+0x528>
 800d894:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d898:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d89c:	aa06      	add	r2, sp, #24
 800d89e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d8a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d8a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d8aa:	a906      	add	r1, sp, #24
 800d8ac:	ee10 3a10 	vmov	r3, s0
 800d8b0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d8b4:	1c6b      	adds	r3, r5, #1
 800d8b6:	ee17 2a10 	vmov	r2, s14
 800d8ba:	3418      	adds	r4, #24
 800d8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d8c0:	e739      	b.n	800d736 <__kernel_rem_pio2+0x1f6>
 800d8c2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d8c6:	aa06      	add	r2, sp, #24
 800d8c8:	ee10 3a10 	vmov	r3, s0
 800d8cc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	e730      	b.n	800d736 <__kernel_rem_pio2+0x1f6>
 800d8d4:	aa06      	add	r2, sp, #24
 800d8d6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d8da:	9202      	str	r2, [sp, #8]
 800d8dc:	ee07 2a90 	vmov	s15, r2
 800d8e0:	3c01      	subs	r4, #1
 800d8e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d8e6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d8ea:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d8ee:	ed25 7b02 	vstmdb	r5!, {d7}
 800d8f2:	e72f      	b.n	800d754 <__kernel_rem_pio2+0x214>
 800d8f4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d8f8:	ecb7 5b02 	vldmia	r7!, {d5}
 800d8fc:	ed9c 6b00 	vldr	d6, [ip]
 800d900:	3401      	adds	r4, #1
 800d902:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d906:	454c      	cmp	r4, r9
 800d908:	dc01      	bgt.n	800d90e <__kernel_rem_pio2+0x3ce>
 800d90a:	42a5      	cmp	r5, r4
 800d90c:	daf2      	bge.n	800d8f4 <__kernel_rem_pio2+0x3b4>
 800d90e:	aa42      	add	r2, sp, #264	; 0x108
 800d910:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d914:	ed84 7b00 	vstr	d7, [r4]
 800d918:	3501      	adds	r5, #1
 800d91a:	3808      	subs	r0, #8
 800d91c:	e71e      	b.n	800d75c <__kernel_rem_pio2+0x21c>
 800d91e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d920:	2a03      	cmp	r2, #3
 800d922:	d84e      	bhi.n	800d9c2 <__kernel_rem_pio2+0x482>
 800d924:	e8df f002 	tbb	[pc, r2]
 800d928:	021f1f3e 	.word	0x021f1f3e
 800d92c:	3108      	adds	r1, #8
 800d92e:	aa42      	add	r2, sp, #264	; 0x108
 800d930:	4411      	add	r1, r2
 800d932:	4608      	mov	r0, r1
 800d934:	461c      	mov	r4, r3
 800d936:	2c00      	cmp	r4, #0
 800d938:	dc61      	bgt.n	800d9fe <__kernel_rem_pio2+0x4be>
 800d93a:	4608      	mov	r0, r1
 800d93c:	461c      	mov	r4, r3
 800d93e:	2c01      	cmp	r4, #1
 800d940:	dc6d      	bgt.n	800da1e <__kernel_rem_pio2+0x4de>
 800d942:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800da70 <__kernel_rem_pio2+0x530>
 800d946:	2b01      	cmp	r3, #1
 800d948:	dc79      	bgt.n	800da3e <__kernel_rem_pio2+0x4fe>
 800d94a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d94e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d952:	f1b8 0f00 	cmp.w	r8, #0
 800d956:	d178      	bne.n	800da4a <__kernel_rem_pio2+0x50a>
 800d958:	ed86 5b00 	vstr	d5, [r6]
 800d95c:	ed86 6b02 	vstr	d6, [r6, #8]
 800d960:	ed86 7b04 	vstr	d7, [r6, #16]
 800d964:	e02d      	b.n	800d9c2 <__kernel_rem_pio2+0x482>
 800d966:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800da70 <__kernel_rem_pio2+0x530>
 800d96a:	3108      	adds	r1, #8
 800d96c:	aa42      	add	r2, sp, #264	; 0x108
 800d96e:	4411      	add	r1, r2
 800d970:	4618      	mov	r0, r3
 800d972:	2800      	cmp	r0, #0
 800d974:	da34      	bge.n	800d9e0 <__kernel_rem_pio2+0x4a0>
 800d976:	f1b8 0f00 	cmp.w	r8, #0
 800d97a:	d037      	beq.n	800d9ec <__kernel_rem_pio2+0x4ac>
 800d97c:	eeb1 7b46 	vneg.f64	d7, d6
 800d980:	ed86 7b00 	vstr	d7, [r6]
 800d984:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d988:	a844      	add	r0, sp, #272	; 0x110
 800d98a:	2101      	movs	r1, #1
 800d98c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d990:	428b      	cmp	r3, r1
 800d992:	da2e      	bge.n	800d9f2 <__kernel_rem_pio2+0x4b2>
 800d994:	f1b8 0f00 	cmp.w	r8, #0
 800d998:	d001      	beq.n	800d99e <__kernel_rem_pio2+0x45e>
 800d99a:	eeb1 7b47 	vneg.f64	d7, d7
 800d99e:	ed86 7b02 	vstr	d7, [r6, #8]
 800d9a2:	e00e      	b.n	800d9c2 <__kernel_rem_pio2+0x482>
 800d9a4:	aa92      	add	r2, sp, #584	; 0x248
 800d9a6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800da70 <__kernel_rem_pio2+0x530>
 800d9aa:	4411      	add	r1, r2
 800d9ac:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	da0f      	bge.n	800d9d4 <__kernel_rem_pio2+0x494>
 800d9b4:	f1b8 0f00 	cmp.w	r8, #0
 800d9b8:	d001      	beq.n	800d9be <__kernel_rem_pio2+0x47e>
 800d9ba:	eeb1 7b47 	vneg.f64	d7, d7
 800d9be:	ed86 7b00 	vstr	d7, [r6]
 800d9c2:	9b01      	ldr	r3, [sp, #4]
 800d9c4:	f003 0007 	and.w	r0, r3, #7
 800d9c8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800d9cc:	ecbd 8b06 	vpop	{d8-d10}
 800d9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d4:	ed31 6b02 	vldmdb	r1!, {d6}
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d9de:	e7e7      	b.n	800d9b0 <__kernel_rem_pio2+0x470>
 800d9e0:	ed31 7b02 	vldmdb	r1!, {d7}
 800d9e4:	3801      	subs	r0, #1
 800d9e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d9ea:	e7c2      	b.n	800d972 <__kernel_rem_pio2+0x432>
 800d9ec:	eeb0 7b46 	vmov.f64	d7, d6
 800d9f0:	e7c6      	b.n	800d980 <__kernel_rem_pio2+0x440>
 800d9f2:	ecb0 6b02 	vldmia	r0!, {d6}
 800d9f6:	3101      	adds	r1, #1
 800d9f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d9fc:	e7c8      	b.n	800d990 <__kernel_rem_pio2+0x450>
 800d9fe:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da02:	ed30 5b02 	vldmdb	r0!, {d5}
 800da06:	3c01      	subs	r4, #1
 800da08:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da10:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da14:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da18:	ed80 7b00 	vstr	d7, [r0]
 800da1c:	e78b      	b.n	800d936 <__kernel_rem_pio2+0x3f6>
 800da1e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da22:	ed30 5b02 	vldmdb	r0!, {d5}
 800da26:	3c01      	subs	r4, #1
 800da28:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da30:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da34:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da38:	ed80 7b00 	vstr	d7, [r0]
 800da3c:	e77f      	b.n	800d93e <__kernel_rem_pio2+0x3fe>
 800da3e:	ed31 6b02 	vldmdb	r1!, {d6}
 800da42:	3b01      	subs	r3, #1
 800da44:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da48:	e77d      	b.n	800d946 <__kernel_rem_pio2+0x406>
 800da4a:	eeb1 5b45 	vneg.f64	d5, d5
 800da4e:	eeb1 6b46 	vneg.f64	d6, d6
 800da52:	ed86 5b00 	vstr	d5, [r6]
 800da56:	eeb1 7b47 	vneg.f64	d7, d7
 800da5a:	ed86 6b02 	vstr	d6, [r6, #8]
 800da5e:	e77f      	b.n	800d960 <__kernel_rem_pio2+0x420>
 800da60:	00000000 	.word	0x00000000
 800da64:	41700000 	.word	0x41700000
 800da68:	00000000 	.word	0x00000000
 800da6c:	3e700000 	.word	0x3e700000
	...

0800da78 <__kernel_sin>:
 800da78:	ee10 3a90 	vmov	r3, s1
 800da7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da80:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800da84:	da04      	bge.n	800da90 <__kernel_sin+0x18>
 800da86:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800da8a:	ee17 3a90 	vmov	r3, s15
 800da8e:	b35b      	cbz	r3, 800dae8 <__kernel_sin+0x70>
 800da90:	ee20 6b00 	vmul.f64	d6, d0, d0
 800da94:	ee20 5b06 	vmul.f64	d5, d0, d6
 800da98:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800daf0 <__kernel_sin+0x78>
 800da9c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800daf8 <__kernel_sin+0x80>
 800daa0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800daa4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db00 <__kernel_sin+0x88>
 800daa8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800daac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db08 <__kernel_sin+0x90>
 800dab0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dab4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db10 <__kernel_sin+0x98>
 800dab8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dabc:	b930      	cbnz	r0, 800dacc <__kernel_sin+0x54>
 800dabe:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db18 <__kernel_sin+0xa0>
 800dac2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dac6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800daca:	4770      	bx	lr
 800dacc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800dad0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dad4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800dad8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800dadc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800db20 <__kernel_sin+0xa8>
 800dae0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800dae4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
 800daf0:	5acfd57c 	.word	0x5acfd57c
 800daf4:	3de5d93a 	.word	0x3de5d93a
 800daf8:	8a2b9ceb 	.word	0x8a2b9ceb
 800dafc:	be5ae5e6 	.word	0xbe5ae5e6
 800db00:	57b1fe7d 	.word	0x57b1fe7d
 800db04:	3ec71de3 	.word	0x3ec71de3
 800db08:	19c161d5 	.word	0x19c161d5
 800db0c:	bf2a01a0 	.word	0xbf2a01a0
 800db10:	1110f8a6 	.word	0x1110f8a6
 800db14:	3f811111 	.word	0x3f811111
 800db18:	55555549 	.word	0x55555549
 800db1c:	bfc55555 	.word	0xbfc55555
 800db20:	55555549 	.word	0x55555549
 800db24:	3fc55555 	.word	0x3fc55555

0800db28 <fabs>:
 800db28:	ec51 0b10 	vmov	r0, r1, d0
 800db2c:	ee10 2a10 	vmov	r2, s0
 800db30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db34:	ec43 2b10 	vmov	d0, r2, r3
 800db38:	4770      	bx	lr
 800db3a:	0000      	movs	r0, r0
 800db3c:	0000      	movs	r0, r0
	...

0800db40 <floor>:
 800db40:	ee10 1a90 	vmov	r1, s1
 800db44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db48:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800db4c:	2b13      	cmp	r3, #19
 800db4e:	b530      	push	{r4, r5, lr}
 800db50:	ee10 0a10 	vmov	r0, s0
 800db54:	ee10 5a10 	vmov	r5, s0
 800db58:	dc33      	bgt.n	800dbc2 <floor+0x82>
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	da17      	bge.n	800db8e <floor+0x4e>
 800db5e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800dc20 <floor+0xe0>
 800db62:	ee30 0b07 	vadd.f64	d0, d0, d7
 800db66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800db6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6e:	dd09      	ble.n	800db84 <floor+0x44>
 800db70:	2900      	cmp	r1, #0
 800db72:	da50      	bge.n	800dc16 <floor+0xd6>
 800db74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db78:	4a2b      	ldr	r2, [pc, #172]	; (800dc28 <floor+0xe8>)
 800db7a:	4303      	orrs	r3, r0
 800db7c:	2000      	movs	r0, #0
 800db7e:	4283      	cmp	r3, r0
 800db80:	bf18      	it	ne
 800db82:	4611      	movne	r1, r2
 800db84:	460b      	mov	r3, r1
 800db86:	4602      	mov	r2, r0
 800db88:	ec43 2b10 	vmov	d0, r2, r3
 800db8c:	e020      	b.n	800dbd0 <floor+0x90>
 800db8e:	4a27      	ldr	r2, [pc, #156]	; (800dc2c <floor+0xec>)
 800db90:	411a      	asrs	r2, r3
 800db92:	ea01 0402 	and.w	r4, r1, r2
 800db96:	4304      	orrs	r4, r0
 800db98:	d01a      	beq.n	800dbd0 <floor+0x90>
 800db9a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800dc20 <floor+0xe0>
 800db9e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dba2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbaa:	ddeb      	ble.n	800db84 <floor+0x44>
 800dbac:	2900      	cmp	r1, #0
 800dbae:	bfbe      	ittt	lt
 800dbb0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800dbb4:	fa40 f303 	asrlt.w	r3, r0, r3
 800dbb8:	18c9      	addlt	r1, r1, r3
 800dbba:	ea21 0102 	bic.w	r1, r1, r2
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	e7e0      	b.n	800db84 <floor+0x44>
 800dbc2:	2b33      	cmp	r3, #51	; 0x33
 800dbc4:	dd05      	ble.n	800dbd2 <floor+0x92>
 800dbc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbca:	d101      	bne.n	800dbd0 <floor+0x90>
 800dbcc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dbd0:	bd30      	pop	{r4, r5, pc}
 800dbd2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800dbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbda:	40e2      	lsrs	r2, r4
 800dbdc:	4202      	tst	r2, r0
 800dbde:	d0f7      	beq.n	800dbd0 <floor+0x90>
 800dbe0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800dc20 <floor+0xe0>
 800dbe4:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dbe8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf0:	ddc8      	ble.n	800db84 <floor+0x44>
 800dbf2:	2900      	cmp	r1, #0
 800dbf4:	da02      	bge.n	800dbfc <floor+0xbc>
 800dbf6:	2b14      	cmp	r3, #20
 800dbf8:	d103      	bne.n	800dc02 <floor+0xc2>
 800dbfa:	3101      	adds	r1, #1
 800dbfc:	ea20 0002 	bic.w	r0, r0, r2
 800dc00:	e7c0      	b.n	800db84 <floor+0x44>
 800dc02:	2401      	movs	r4, #1
 800dc04:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dc08:	fa04 f303 	lsl.w	r3, r4, r3
 800dc0c:	4418      	add	r0, r3
 800dc0e:	42a8      	cmp	r0, r5
 800dc10:	bf38      	it	cc
 800dc12:	1909      	addcc	r1, r1, r4
 800dc14:	e7f2      	b.n	800dbfc <floor+0xbc>
 800dc16:	2000      	movs	r0, #0
 800dc18:	4601      	mov	r1, r0
 800dc1a:	e7b3      	b.n	800db84 <floor+0x44>
 800dc1c:	f3af 8000 	nop.w
 800dc20:	8800759c 	.word	0x8800759c
 800dc24:	7e37e43c 	.word	0x7e37e43c
 800dc28:	bff00000 	.word	0xbff00000
 800dc2c:	000fffff 	.word	0x000fffff

0800dc30 <scalbn>:
 800dc30:	b500      	push	{lr}
 800dc32:	ed2d 8b02 	vpush	{d8}
 800dc36:	b083      	sub	sp, #12
 800dc38:	ed8d 0b00 	vstr	d0, [sp]
 800dc3c:	9b01      	ldr	r3, [sp, #4]
 800dc3e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dc42:	b9a2      	cbnz	r2, 800dc6e <scalbn+0x3e>
 800dc44:	9a00      	ldr	r2, [sp, #0]
 800dc46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	d03a      	beq.n	800dcc4 <scalbn+0x94>
 800dc4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800dd08 <scalbn+0xd8>
 800dc52:	4b35      	ldr	r3, [pc, #212]	; (800dd28 <scalbn+0xf8>)
 800dc54:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dc58:	4298      	cmp	r0, r3
 800dc5a:	ed8d 7b00 	vstr	d7, [sp]
 800dc5e:	da11      	bge.n	800dc84 <scalbn+0x54>
 800dc60:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800dd10 <scalbn+0xe0>
 800dc64:	ed9d 6b00 	vldr	d6, [sp]
 800dc68:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc6c:	e007      	b.n	800dc7e <scalbn+0x4e>
 800dc6e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dc72:	428a      	cmp	r2, r1
 800dc74:	d10a      	bne.n	800dc8c <scalbn+0x5c>
 800dc76:	ed9d 7b00 	vldr	d7, [sp]
 800dc7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dc7e:	ed8d 7b00 	vstr	d7, [sp]
 800dc82:	e01f      	b.n	800dcc4 <scalbn+0x94>
 800dc84:	9b01      	ldr	r3, [sp, #4]
 800dc86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dc8a:	3a36      	subs	r2, #54	; 0x36
 800dc8c:	4402      	add	r2, r0
 800dc8e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dc92:	428a      	cmp	r2, r1
 800dc94:	dd0a      	ble.n	800dcac <scalbn+0x7c>
 800dc96:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800dd18 <scalbn+0xe8>
 800dc9a:	eeb0 0b48 	vmov.f64	d0, d8
 800dc9e:	ed9d 1b00 	vldr	d1, [sp]
 800dca2:	f000 f843 	bl	800dd2c <copysign>
 800dca6:	ee20 7b08 	vmul.f64	d7, d0, d8
 800dcaa:	e7e8      	b.n	800dc7e <scalbn+0x4e>
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	dd10      	ble.n	800dcd2 <scalbn+0xa2>
 800dcb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcbc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dcc0:	e9cd 0100 	strd	r0, r1, [sp]
 800dcc4:	ed9d 0b00 	vldr	d0, [sp]
 800dcc8:	b003      	add	sp, #12
 800dcca:	ecbd 8b02 	vpop	{d8}
 800dcce:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcd2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dcd6:	da06      	bge.n	800dce6 <scalbn+0xb6>
 800dcd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dcdc:	4298      	cmp	r0, r3
 800dcde:	dcda      	bgt.n	800dc96 <scalbn+0x66>
 800dce0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800dd10 <scalbn+0xe0>
 800dce4:	e7d9      	b.n	800dc9a <scalbn+0x6a>
 800dce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcee:	3236      	adds	r2, #54	; 0x36
 800dcf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcf4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dcf8:	ec41 0b17 	vmov	d7, r0, r1
 800dcfc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800dd20 <scalbn+0xf0>
 800dd00:	e7b2      	b.n	800dc68 <scalbn+0x38>
 800dd02:	bf00      	nop
 800dd04:	f3af 8000 	nop.w
 800dd08:	00000000 	.word	0x00000000
 800dd0c:	43500000 	.word	0x43500000
 800dd10:	c2f8f359 	.word	0xc2f8f359
 800dd14:	01a56e1f 	.word	0x01a56e1f
 800dd18:	8800759c 	.word	0x8800759c
 800dd1c:	7e37e43c 	.word	0x7e37e43c
 800dd20:	00000000 	.word	0x00000000
 800dd24:	3c900000 	.word	0x3c900000
 800dd28:	ffff3cb0 	.word	0xffff3cb0

0800dd2c <copysign>:
 800dd2c:	ec51 0b10 	vmov	r0, r1, d0
 800dd30:	ee11 0a90 	vmov	r0, s3
 800dd34:	ee10 2a10 	vmov	r2, s0
 800dd38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800dd40:	ea41 0300 	orr.w	r3, r1, r0
 800dd44:	ec43 2b10 	vmov	d0, r2, r3
 800dd48:	4770      	bx	lr
	...

0800dd4c <_init>:
 800dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4e:	bf00      	nop
 800dd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd52:	bc08      	pop	{r3}
 800dd54:	469e      	mov	lr, r3
 800dd56:	4770      	bx	lr

0800dd58 <_fini>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	bf00      	nop
 800dd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5e:	bc08      	pop	{r3}
 800dd60:	469e      	mov	lr, r3
 800dd62:	4770      	bx	lr
