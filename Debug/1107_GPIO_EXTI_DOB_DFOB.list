
1107_GPIO_EXTI_DOB_DFOB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ccc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08009ed0  08009ed0  00019ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1c0  0800a1c0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1c8  0800a1c8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c8  0800a1c8  0001a1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005fb70  200001f4  0800a3c4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005fd64  0800a3c4  0002fd64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013db2  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269e  00000000  00000000  00033fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  00036678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  000377c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029903  00000000  00000000  000387d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d258  00000000  00000000  000620d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe975  00000000  00000000  0006f32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016dca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e4  00000000  00000000  0016dd1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009eb4 	.word	0x08009eb4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	08009eb4 	.word	0x08009eb4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fe:	2201      	movs	r2, #1
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <__io_putchar+0x20>)
 8000602:	f006 f9db 	bl	80069bc <HAL_UART_Transmit>

  return ch;
 8000606:	687b      	ldr	r3, [r7, #4]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2005f794 	.word	0x2005f794
 8000614:	00000000 	.word	0x00000000

08000618 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	f041 85f9 	bne.w	800221e <HAL_TIM_PeriodElapsedCallback+0x1c06>
		// TIM2 task
    switch(mode){
 800062c:	4b65      	ldr	r3, [pc, #404]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d031      	beq.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000634:	2b02      	cmp	r3, #2
 8000636:	f001 85f1 	beq.w	800221c <HAL_TIM_PeriodElapsedCallback+0x1c04>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x2a>

        break;
    }

		}
}
 800063e:	f001 bdee 	b.w	800221e <HAL_TIM_PeriodElapsedCallback+0x1c06>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4860      	ldr	r0, [pc, #384]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000648:	f003 fda8 	bl	800419c <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800064e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000652:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000654:	4b5e      	ldr	r3, [pc, #376]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065a:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 800065c:	4b5d      	ldr	r3, [pc, #372]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800065e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000662:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000664:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000666:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800066a:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800066c:	4b57      	ldr	r3, [pc, #348]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	4b58      	ldr	r3, [pc, #352]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000680:	4b54      	ldr	r3, [pc, #336]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000682:	881a      	ldrh	r2, [r3, #0]
 8000684:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 800068a:	4b53      	ldr	r3, [pc, #332]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000694:	f001 bdc3 	b.w	800221e <HAL_TIM_PeriodElapsedCallback+0x1c06>
        cnt1 = TIM1->CNT;
 8000698:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800069a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006a0:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006aa:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 80006ac:	4b51      	ldr	r3, [pc, #324]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006b4:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 80006b6:	4b51      	ldr	r3, [pc, #324]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b50      	ldr	r3, [pc, #320]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80006be:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 80006c0:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006d0:	dd09      	ble.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xce>
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006d4:	f993 3000 	ldrsb.w	r3, [r3]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b01      	subs	r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b25a      	sxtb	r2, r3
 80006e0:	4b49      	ldr	r3, [pc, #292]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e011      	b.n	800070a <HAL_TIM_PeriodElapsedCallback+0xf2>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006f6:	dd08      	ble.n	800070a <HAL_TIM_PeriodElapsedCallback+0xf2>
 80006f8:	4b43      	ldr	r3, [pc, #268]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006fa:	f993 3000 	ldrsb.w	r3, [r3]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000708:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b3e      	ldr	r3, [pc, #248]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800071a:	dd09      	ble.n	8000730 <HAL_TIM_PeriodElapsedCallback+0x118>
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800071e:	f993 3000 	ldrsb.w	r3, [r3]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	3b01      	subs	r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25a      	sxtb	r2, r3
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e011      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x13c>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000740:	dd08      	ble.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000744:	f993 3000 	ldrsb.w	r3, [r3]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	b25a      	sxtb	r2, r3
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000752:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000764:	dd09      	ble.n	800077a <HAL_TIM_PeriodElapsedCallback+0x162>
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000768:	f993 3000 	ldrsb.w	r3, [r3]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b25a      	sxtb	r2, r3
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e011      	b.n	800079e <HAL_TIM_PeriodElapsedCallback+0x186>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078a:	dd08      	ble.n	800079e <HAL_TIM_PeriodElapsedCallback+0x186>
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800078e:	f993 3000 	ldrsb.w	r3, [r3]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	3301      	adds	r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	b25a      	sxtb	r2, r3
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800079c:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007ae:	dd39      	ble.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x20c>
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007b2:	f993 3000 	ldrsb.w	r3, [r3]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e041      	b.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x230>
 80007c4:	20000216 	.word	0x20000216
 80007c8:	40020400 	.word	0x40020400
 80007cc:	200002c0 	.word	0x200002c0
 80007d0:	200002c2 	.word	0x200002c2
 80007d4:	200002c4 	.word	0x200002c4
 80007d8:	200002c6 	.word	0x200002c6
 80007dc:	2005fc18 	.word	0x2005fc18
 80007e0:	2005fcd8 	.word	0x2005fcd8
 80007e4:	40010000 	.word	0x40010000
 80007e8:	20000218 	.word	0x20000218
 80007ec:	40000400 	.word	0x40000400
 80007f0:	2000021a 	.word	0x2000021a
 80007f4:	40010400 	.word	0x40010400
 80007f8:	2000021c 	.word	0x2000021c
 80007fc:	40000800 	.word	0x40000800
 8000800:	2000021e 	.word	0x2000021e
 8000804:	20000220 	.word	0x20000220
 8000808:	20000228 	.word	0x20000228
 800080c:	20000222 	.word	0x20000222
 8000810:	20000229 	.word	0x20000229
 8000814:	20000224 	.word	0x20000224
 8000818:	2000022a 	.word	0x2000022a
 800081c:	20000226 	.word	0x20000226
 8000820:	2000022b 	.word	0x2000022b
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000824:	4be0      	ldr	r3, [pc, #896]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4be0      	ldr	r3, [pc, #896]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x594>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000834:	dd08      	ble.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000836:	4bde      	ldr	r3, [pc, #888]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000838:	f993 3000 	ldrsb.w	r3, [r3]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	3301      	adds	r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	b25a      	sxtb	r2, r3
 8000844:	4bda      	ldr	r3, [pc, #872]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000846:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000848:	4bda      	ldr	r3, [pc, #872]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4bda      	ldr	r3, [pc, #872]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	4bd9      	ldr	r3, [pc, #868]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000858:	f993 3000 	ldrsb.w	r3, [r3]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	4413      	add	r3, r2
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000868:	4bd5      	ldr	r3, [pc, #852]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000872:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800087a:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 800087e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000882:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000886:	ee37 6b07 	vadd.f64	d6, d7, d7
 800088a:	eddf 7ace 	vldr	s15, [pc, #824]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 800088e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000892:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	4bcb      	ldr	r3, [pc, #812]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800089c:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 80008a0:	4bca      	ldr	r3, [pc, #808]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4bc4      	ldr	r3, [pc, #784]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	1ad2      	subs	r2, r2, r3
 80008ae:	4bc8      	ldr	r3, [pc, #800]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80008b0:	f993 3000 	ldrsb.w	r3, [r3]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	4413      	add	r3, r2
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008c0:	4bbf      	ldr	r3, [pc, #764]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ca:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80008ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008d2:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 80008d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80008e2:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 80008e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f2:	4bb8      	ldr	r3, [pc, #736]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80008f4:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 80008f8:	4bb7      	ldr	r3, [pc, #732]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4bae      	ldr	r3, [pc, #696]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	1ad2      	subs	r2, r2, r3
 8000906:	4bb5      	ldr	r3, [pc, #724]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8000908:	f993 3000 	ldrsb.w	r3, [r3]
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	4413      	add	r3, r2
 8000910:	ee07 3a90 	vmov	s15, r3
 8000914:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000918:	4ba9      	ldr	r3, [pc, #676]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000922:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800092a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 800092e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000932:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000936:	ee37 6b07 	vadd.f64	d6, d7, d7
 800093a:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 800093e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000942:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000946:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094a:	4ba5      	ldr	r3, [pc, #660]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000950:	4b96      	ldr	r3, [pc, #600]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b98      	ldr	r3, [pc, #608]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	1ad2      	subs	r2, r2, r3
 800095e:	4b94      	ldr	r3, [pc, #592]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	4413      	add	r3, r2
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000970:	4b93      	ldr	r3, [pc, #588]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800097a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800097e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000982:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>
 8000986:	ee27 6b06 	vmul.f64	d6, d7, d6
 800098a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800098e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000992:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8000996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800099a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800099e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a2:	4b90      	ldr	r3, [pc, #576]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80009a4:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res_raw = ( theta1_res - theta1_res_pre )/dt;
 80009a8:	4b87      	ldr	r3, [pc, #540]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80009aa:	ed93 7a00 	vldr	s14, [r3]
 80009ae:	4b8e      	ldr	r3, [pc, #568]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009b8:	eddf 6a99 	vldr	s13, [pc, #612]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 80009bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c0:	4b8a      	ldr	r3, [pc, #552]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80009c2:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res_raw = ( theta2_res - theta2_res_pre )/dt;
 80009c6:	4b83      	ldr	r3, [pc, #524]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80009c8:	ed93 7a00 	vldr	s14, [r3]
 80009cc:	4b88      	ldr	r3, [pc, #544]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009d6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 80009da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009de:	4b85      	ldr	r3, [pc, #532]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80009e0:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res_raw = ( theta3_res - theta3_res_pre )/dt;
 80009e4:	4b7e      	ldr	r3, [pc, #504]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80009e6:	ed93 7a00 	vldr	s14, [r3]
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009f4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 80009f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fc:	4b7f      	ldr	r3, [pc, #508]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80009fe:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res_raw = ( theta4_res - theta4_res_pre )/dt;
 8000a02:	4b78      	ldr	r3, [pc, #480]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8000a04:	ed93 7a00 	vldr	s14, [r3]
 8000a08:	4b7d      	ldr	r3, [pc, #500]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a12:	eddf 6a83 	vldr	s13, [pc, #524]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1a:	4b7a      	ldr	r3, [pc, #488]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000a1c:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 8000a20:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a24:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a30:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a38:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000a3c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a40:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a44:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a54:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000a58:	4b6b      	ldr	r3, [pc, #428]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000a5a:	edd3 7a00 	vldr	s15, [r3]
 8000a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a62:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000a66:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000a68:	ed93 7a00 	vldr	s14, [r3]
 8000a6c:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a7a:	ed9f 4b49 	vldr	d4, [pc, #292]	; 8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000a7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000a82:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000a86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a8e:	4b5f      	ldr	r3, [pc, #380]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8000a90:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 8000a94:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000a98:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000aa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000ab0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ab4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000ab8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ac8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000acc:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000ace:	edd3 7a00 	vldr	s15, [r3]
 8000ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000adc:	ed93 7a00 	vldr	s14, [r3]
 8000ae0:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000ae2:	edd3 7a00 	vldr	s15, [r3]
 8000ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aee:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000af2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000af6:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000afa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000afe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8000b04:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 8000b08:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000b0c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000b1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b20:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000b24:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b28:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000b2c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000b3c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8000b50:	ed93 7a00 	vldr	s14, [r3]
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b62:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000b66:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000b6a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000b6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8000b78:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 8000b7c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000b80:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000b90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b94:	e046      	b.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x60c>
 8000b96:	bf00      	nop
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	40500000 	.word	0x40500000
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	40440000 	.word	0x40440000
 8000ba8:	20000226 	.word	0x20000226
 8000bac:	2000021e 	.word	0x2000021e
 8000bb0:	2000022b 	.word	0x2000022b
 8000bb4:	20000218 	.word	0x20000218
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000228 	.word	0x20000228
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	40490fdb 	.word	0x40490fdb
 8000bc8:	20000230 	.word	0x20000230
 8000bcc:	2000021a 	.word	0x2000021a
 8000bd0:	20000229 	.word	0x20000229
 8000bd4:	20000234 	.word	0x20000234
 8000bd8:	2000021c 	.word	0x2000021c
 8000bdc:	2000022a 	.word	0x2000022a
 8000be0:	20000238 	.word	0x20000238
 8000be4:	2000023c 	.word	0x2000023c
 8000be8:	20000240 	.word	0x20000240
 8000bec:	20000270 	.word	0x20000270
 8000bf0:	20000244 	.word	0x20000244
 8000bf4:	20000274 	.word	0x20000274
 8000bf8:	20000248 	.word	0x20000248
 8000bfc:	20000278 	.word	0x20000278
 8000c00:	2000024c 	.word	0x2000024c
 8000c04:	2000027c 	.word	0x2000027c
 8000c08:	20000260 	.word	0x20000260
 8000c0c:	20000250 	.word	0x20000250
 8000c10:	20000264 	.word	0x20000264
 8000c14:	20000254 	.word	0x20000254
 8000c18:	20000268 	.word	0x20000268
 8000c1c:	20000258 	.word	0x20000258
 8000c20:	3a83126f 	.word	0x3a83126f
 8000c24:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000c28:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c2c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8000c20 <HAL_TIM_PeriodElapsedCallback+0x608>
 8000c30:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c40:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c44:	4b72      	ldr	r3, [pc, #456]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000c52:	4b70      	ldr	r3, [pc, #448]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8000c54:	ed93 7a00 	vldr	s14, [r3]
 8000c58:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c66:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x7e8>
 8000c6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c7a:	4b68      	ldr	r3, [pc, #416]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 8000c80:	4b67      	ldr	r3, [pc, #412]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8000c82:	ed93 7a00 	vldr	s14, [r3]
 8000c86:	4b67      	ldr	r3, [pc, #412]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c90:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c9a:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000c9c:	edd3 7a00 	vldr	s15, [r3]
 8000ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000e2c <HAL_TIM_PeriodElapsedCallback+0x814>
 8000ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cac:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8000cae:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8000cb4:	ed93 7a00 	vldr	s14, [r3]
 8000cb8:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc2:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000cce:	edd3 7a00 	vldr	s15, [r3]
 8000cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000e2c <HAL_TIM_PeriodElapsedCallback+0x814>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8000ce0:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = (Rw / 4.0) / (W + L) * ( - dtheta1_res - dtheta2_res + dtheta3_res + dtheta4_res);// [rad/sec]
 8000ce4:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	eeb1 7a67 	vneg.f32	s14, s15
 8000cee:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf8:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d10:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000e08 <HAL_TIM_PeriodElapsedCallback+0x7f0>
 8000d14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8000d1e:	edc3 7a00 	vstr	s15, [r3]
        x_res   += vx_res   * dt;// [m]
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000e3c <HAL_TIM_PeriodElapsedCallback+0x824>
 8000d2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8000d32:	edd3 7a00 	vldr	s15, [r3]
 8000d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3a:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000e3c <HAL_TIM_PeriodElapsedCallback+0x824>
 8000d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8000d50:	edd3 7a00 	vldr	s15, [r3]
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8000d5a:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000e3c <HAL_TIM_PeriodElapsedCallback+0x824>
 8000d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d6e:	edd3 7a00 	vldr	s15, [r3]
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d78:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	2b10      	cmp	r3, #16
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8000d94:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8000dae:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b10      	cmp	r3, #16
 8000dbc:	bf0c      	ite	eq
 8000dbe:	2301      	moveq	r3, #1
 8000dc0:	2300      	movne	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8000dc8:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b10      	cmp	r3, #16
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	b25a      	sxtb	r2, r3
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000de2:	701a      	strb	r2, [r3, #0]
        if(t < 25.0){
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df6:	d53f      	bpl.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x860>
          vx_cmd = 0.3;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e051      	b.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x88c>
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40440000 	.word	0x40440000
 8000e08:	4c71c722 	.word	0x4c71c722
 8000e0c:	3fa55555 	.word	0x3fa55555
 8000e10:	2000026c 	.word	0x2000026c
 8000e14:	2000023c 	.word	0x2000023c
 8000e18:	2000024c 	.word	0x2000024c
 8000e1c:	2000025c 	.word	0x2000025c
 8000e20:	20000250 	.word	0x20000250
 8000e24:	20000254 	.word	0x20000254
 8000e28:	20000258 	.word	0x20000258
 8000e2c:	3c4ccccd 	.word	0x3c4ccccd
 8000e30:	200002d4 	.word	0x200002d4
 8000e34:	200002d8 	.word	0x200002d8
 8000e38:	200002dc 	.word	0x200002dc
 8000e3c:	3a83126f 	.word	0x3a83126f
 8000e40:	200002e0 	.word	0x200002e0
 8000e44:	200002e4 	.word	0x200002e4
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	2005fc98 	.word	0x2005fc98
 8000e50:	2000022c 	.word	0x2000022c
 8000e54:	2005fc58 	.word	0x2005fc58
 8000e58:	2000022d 	.word	0x2000022d
 8000e5c:	2005f714 	.word	0x2005f714
 8000e60:	2000022e 	.word	0x2000022e
 8000e64:	2005f754 	.word	0x2005f754
 8000e68:	2000022f 	.word	0x2000022f
 8000e6c:	20000210 	.word	0x20000210
 8000e70:	200002c8 	.word	0x200002c8
 8000e74:	3e99999a 	.word	0x3e99999a
        }else if(t >= 25.0){
 8000e78:	4bde      	ldr	r3, [pc, #888]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8a:	db0b      	blt.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x88c>
          vx_cmd = 0.0;
 8000e8c:	4bda      	ldr	r3, [pc, #872]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
          vy_cmd = 0.0;
 8000e94:	4bd9      	ldr	r3, [pc, #868]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
          dphi_cmd = 0.0;
 8000e9c:	4bd8      	ldr	r3, [pc, #864]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
        ddx_ref   = Kp_vv_x   * (vx_cmd   -   vx_res);
 8000ea4:	4bd4      	ldr	r3, [pc, #848]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8000ea6:	ed93 7a00 	vldr	s14, [r3]
 8000eaa:	4bd6      	ldr	r3, [pc, #856]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0xbec>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb4:	4bd4      	ldr	r3, [pc, #848]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebe:	4bd3      	ldr	r3, [pc, #844]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8000ec0:	edc3 7a00 	vstr	s15, [r3]
        ddy_ref   = Kp_vv_y   * (vy_cmd   -   vy_res);
 8000ec4:	4bcd      	ldr	r3, [pc, #820]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8000ec6:	ed93 7a00 	vldr	s14, [r3]
 8000eca:	4bd1      	ldr	r3, [pc, #836]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed4:	4bcf      	ldr	r3, [pc, #828]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	4bce      	ldr	r3, [pc, #824]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]
        ddphi_ref = Kp_vv_phi * (dphi_cmd - dphi_res);
 8000ee4:	4bc6      	ldr	r3, [pc, #792]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	4bcc      	ldr	r3, [pc, #816]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ef4:	4bca      	ldr	r3, [pc, #808]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efe:	4bc9      	ldr	r3, [pc, #804]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_ref =  20.0 * ddx_ref + 20.0 * ddy_ref - 6.0 * ddphi_ref;// [rad/sec^2]
 8000f04:	4bc1      	ldr	r3, [pc, #772]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0e:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000f12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f16:	4bc0      	ldr	r3, [pc, #768]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8000f18:	edd3 7a00 	vldr	s15, [r3]
 8000f1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f20:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000f24:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f2c:	4bbd      	ldr	r3, [pc, #756]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f36:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000f3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f46:	4bb8      	ldr	r3, [pc, #736]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_ref = -20.0 * ddx_ref + 20.0 * ddy_ref - 6.0 * ddphi_ref;
 8000f4c:	4baf      	ldr	r3, [pc, #700]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f56:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 8000f5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f5e:	4bae      	ldr	r3, [pc, #696]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f68:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000f6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f74:	4bab      	ldr	r3, [pc, #684]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000f82:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f8e:	4ba7      	ldr	r3, [pc, #668]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8000f90:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref =  20.0 * ddx_ref + 20.0 * ddy_ref + 6.0 * ddphi_ref;
 8000f94:	4b9d      	ldr	r3, [pc, #628]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9e:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000fa2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fa6:	4b9c      	ldr	r3, [pc, #624]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb0:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000fb4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fbc:	4b99      	ldr	r3, [pc, #612]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000fca:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fd6:	4b96      	ldr	r3, [pc, #600]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_ref = -20.0 * ddx_ref + 20.0 * ddy_ref + 6.0 * ddphi_ref;
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe6:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 8000fea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fee:	4b8a      	ldr	r3, [pc, #552]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff8:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000ffc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001000:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001004:	4b87      	ldr	r3, [pc, #540]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8001012:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001016:	ee36 7b07 	vadd.f64	d7, d6, d7
 800101a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800101e:	4b85      	ldr	r3, [pc, #532]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
        i1_ref = (M11*ddtheta1_ref + M12*ddtheta2_ref + M13*ddtheta3_ref + M14*ddtheta4_ref)/( Gear * Ktn );
 8001024:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>
 8001028:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001032:	eddf 6a82 	vldr	s13, [pc, #520]	; 800123c <HAL_TIM_PeriodElapsedCallback+0xc24>
 8001036:	4b7d      	ldr	r3, [pc, #500]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001044:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0xc28>
 8001048:	4b79      	ldr	r3, [pc, #484]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001056:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 800105a:	4b76      	ldr	r3, [pc, #472]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001068:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0xc30>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	4b76      	ldr	r3, [pc, #472]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8001072:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = (M21*ddtheta1_ref + M22*ddtheta2_ref + M23*ddtheta3_ref + M24*ddtheta4_ref)/( Gear * Ktn );
 8001076:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800123c <HAL_TIM_PeriodElapsedCallback+0xc24>
 800107a:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001084:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>
 8001088:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001092:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001096:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 800109a:	4b65      	ldr	r3, [pc, #404]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a8:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0xc28>
 80010ac:	4b61      	ldr	r3, [pc, #388]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ba:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0xc30>
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = (M31*ddtheta1_ref + M32*ddtheta2_ref + M33*ddtheta3_ref + M34*ddtheta4_ref)/( Gear * Ktn );
 80010c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0xc28>
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d6:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>
 80010ec:	4b50      	ldr	r3, [pc, #320]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010fa:	eddf 6a50 	vldr	s13, [pc, #320]	; 800123c <HAL_TIM_PeriodElapsedCallback+0xc24>
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001108:	ee37 7a27 	vadd.f32	s14, s14, s15
 800110c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0xc30>
 8001110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 8001116:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = (M41*ddtheta1_ref + M42*ddtheta2_ref + M43*ddtheta3_ref + M44*ddtheta4_ref)/( Gear * Ktn );
 800111a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001244 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0xc28>
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800123c <HAL_TIM_PeriodElapsedCallback+0xc24>
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001248 <HAL_TIM_PeriodElapsedCallback+0xc30>
 8001162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 800116c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001270 <HAL_TIM_PeriodElapsedCallback+0xc58>
 8001170:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001274 <HAL_TIM_PeriodElapsedCallback+0xc5c>
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001180:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001184:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001188:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800118c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001270 <HAL_TIM_PeriodElapsedCallback+0xc58>
 8001190:	eddf 7a38 	vldr	s15, [pc, #224]	; 8001274 <HAL_TIM_PeriodElapsedCallback+0xc5c>
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001278 <HAL_TIM_PeriodElapsedCallback+0xc60>
 800119c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800127c <HAL_TIM_PeriodElapsedCallback+0xc64>
 80011a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011bc:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0xc20>
 80011c0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001274 <HAL_TIM_PeriodElapsedCallback+0xc5c>
 80011c4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80011ca:	ed93 5a00 	vldr	s10, [r3]
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80011d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
 80011f2:	e045      	b.n	8001280 <HAL_TIM_PeriodElapsedCallback+0xc68>
 80011f4:	20000210 	.word	0x20000210
 80011f8:	200002c8 	.word	0x200002c8
 80011fc:	200002cc 	.word	0x200002cc
 8001200:	200002d0 	.word	0x200002d0
 8001204:	200002d4 	.word	0x200002d4
 8001208:	2000000c 	.word	0x2000000c
 800120c:	200002e8 	.word	0x200002e8
 8001210:	200002d8 	.word	0x200002d8
 8001214:	20000010 	.word	0x20000010
 8001218:	200002ec 	.word	0x200002ec
 800121c:	200002dc 	.word	0x200002dc
 8001220:	20000014 	.word	0x20000014
 8001224:	200002f0 	.word	0x200002f0
 8001228:	20000280 	.word	0x20000280
 800122c:	20000284 	.word	0x20000284
 8001230:	20000288 	.word	0x20000288
 8001234:	2000028c 	.word	0x2000028c
 8001238:	3b8a4bfc 	.word	0x3b8a4bfc
 800123c:	39220502 	.word	0x39220502
 8001240:	3aceaa7d 	.word	0x3aceaa7d
 8001244:	b9220502 	.word	0xb9220502
 8001248:	3f5b8bac 	.word	0x3f5b8bac
 800124c:	20000290 	.word	0x20000290
 8001250:	20000294 	.word	0x20000294
 8001254:	20000298 	.word	0x20000298
 8001258:	2000029c 	.word	0x2000029c
 800125c:	200002a0 	.word	0x200002a0
 8001260:	20000324 	.word	0x20000324
 8001264:	20000250 	.word	0x20000250
 8001268:	20000260 	.word	0x20000260
 800126c:	20000314 	.word	0x20000314
 8001270:	3a83126f 	.word	0x3a83126f
 8001274:	42480000 	.word	0x42480000
 8001278:	42800000 	.word	0x42800000
 800127c:	3c5b8bac 	.word	0x3c5b8bac
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 8001280:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001270 <HAL_TIM_PeriodElapsedCallback+0xc58>
 8001284:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 8001274 <HAL_TIM_PeriodElapsedCallback+0xc5c>
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001290:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001294:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001298:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800129c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80012a0:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 8001270 <HAL_TIM_PeriodElapsedCallback+0xc58>
 80012a4:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8001274 <HAL_TIM_PeriodElapsedCallback+0xc5c>
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001278 <HAL_TIM_PeriodElapsedCallback+0xc60>
 80012b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b4:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800127c <HAL_TIM_PeriodElapsedCallback+0xc64>
 80012b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012bc:	4bbf      	ldr	r3, [pc, #764]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c6:	4bbe      	ldr	r3, [pc, #760]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d0:	eddf 5abc 	vldr	s11, [pc, #752]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 80012d4:	eddf 7abc 	vldr	s15, [pc, #752]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 80012d8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012dc:	4bbb      	ldr	r3, [pc, #748]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 80012de:	ed93 5a00 	vldr	s10, [r3]
 80012e2:	4bbb      	ldr	r3, [pc, #748]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80012ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80012f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001300:	4bb4      	ldr	r3, [pc, #720]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 8001306:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80015d8 <HAL_TIM_PeriodElapsedCallback+0xfc0>
 800130a:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001316:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800131a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800131e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001322:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001326:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80015d8 <HAL_TIM_PeriodElapsedCallback+0xfc0>
 800132a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80015dc <HAL_TIM_PeriodElapsedCallback+0xfc4>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80015e0 <HAL_TIM_PeriodElapsedCallback+0xfc8>
 800133e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001342:	4ba8      	ldr	r3, [pc, #672]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001356:	eddf 5a9b 	vldr	s11, [pc, #620]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 800135a:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 800135e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001362:	4ba2      	ldr	r3, [pc, #648]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8001364:	ed93 5a00 	vldr	s10, [r3]
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001372:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800137e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001382:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001386:	4b9b      	ldr	r3, [pc, #620]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 800138c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80015d8 <HAL_TIM_PeriodElapsedCallback+0xfc0>
 8001390:	eddf 7a8d 	vldr	s15, [pc, #564]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800139c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013a4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80013a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80013ac:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80015d8 <HAL_TIM_PeriodElapsedCallback+0xfc0>
 80013b0:	eddf 7a85 	vldr	s15, [pc, #532]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80015dc <HAL_TIM_PeriodElapsedCallback+0xfc4>
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80015e0 <HAL_TIM_PeriodElapsedCallback+0xfc8>
 80013c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c8:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d2:	4b8a      	ldr	r3, [pc, #552]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	eddf 5a79 	vldr	s11, [pc, #484]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 80013e0:	eddf 7a79 	vldr	s15, [pc, #484]	; 80015c8 <HAL_TIM_PeriodElapsedCallback+0xfb0>
 80013e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e8:	4b85      	ldr	r3, [pc, #532]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 80013ea:	ed93 5a00 	vldr	s10, [r3]
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80013f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80013fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001400:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001404:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001408:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800140c:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800140e:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 8001412:	4b7e      	ldr	r3, [pc, #504]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a7e      	ldr	r2, [pc, #504]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 8001418:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 800141a:	4b6e      	ldr	r3, [pc, #440]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a68      	ldr	r2, [pc, #416]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8001420:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 8001422:	4b74      	ldr	r3, [pc, #464]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a70      	ldr	r2, [pc, #448]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8001428:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 800142a:	4b77      	ldr	r3, [pc, #476]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a73      	ldr	r2, [pc, #460]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 8001430:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 8001432:	4b78      	ldr	r3, [pc, #480]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a78      	ldr	r2, [pc, #480]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 8001438:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a77      	ldr	r2, [pc, #476]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8001440:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 8001442:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a76      	ldr	r2, [pc, #472]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8001448:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 800144a:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a75      	ldr	r2, [pc, #468]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8001450:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 8001452:	4b6e      	ldr	r3, [pc, #440]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001628 <HAL_TIM_PeriodElapsedCallback+0x1010>
 800145c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8001462:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 8001466:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8001628 <HAL_TIM_PeriodElapsedCallback+0x1010>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 800147a:	4b5e      	ldr	r3, [pc, #376]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001628 <HAL_TIM_PeriodElapsedCallback+0x1010>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 800148a:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 800148e:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001628 <HAL_TIM_PeriodElapsedCallback+0x1010>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x1020>)
 800149e:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res;// * Continuous
 80014a2:	4b66      	ldr	r3, [pc, #408]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1024>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	eddf 6a46 	vldr	s13, [pc, #280]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 80014ac:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80014b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c2:	4b60      	ldr	r3, [pc, #384]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x102c>)
 80014c4:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob2 = integral_tau_dfob2 - M22 * G_DFOB * dtheta2_res;// * Continuous
 80014c8:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x1030>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 80014d2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80014d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014da:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x1034>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M33 * G_DFOB * dtheta3_res;// * Continuous
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	eddf 6a33 	vldr	s13, [pc, #204]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 80014f8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80014fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001500:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150e:	4b51      	ldr	r3, [pc, #324]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M44 * G_DFOB * dtheta4_res;// * Continuous
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x1040>)
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 800151e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001522:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	4b49      	ldr	r3, [pc, #292]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 800153c:	f993 3000 	ldrsb.w	r3, [r3]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_TIM_PeriodElapsedCallback+0xf34>
 8001544:	2b01      	cmp	r3, #1
 8001546:	f000 8091 	beq.w	800166c <HAL_TIM_PeriodElapsedCallback+0x1054>
 800154a:	e0c6      	b.n	80016da <HAL_TIM_PeriodElapsedCallback+0x10c2>
            integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - F1_plus  - D1_plus  * dtheta1_res - integral_tau_dfob1) * G_DFOB * dt;// * Continuous
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001628 <HAL_TIM_PeriodElapsedCallback+0x1010>
 8001556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800155a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80015c4 <HAL_TIM_PeriodElapsedCallback+0xfac>
 800155e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001562:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001664 <HAL_TIM_PeriodElapsedCallback+0x104c>
 8001578:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800157c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001668 <HAL_TIM_PeriodElapsedCallback+0x1050>
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80015d8 <HAL_TIM_PeriodElapsedCallback+0xfc0>
 80015a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1024>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x1024>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
            break;
 80015b8:	e08f      	b.n	80016da <HAL_TIM_PeriodElapsedCallback+0x10c2>
 80015ba:	bf00      	nop
 80015bc:	200002a4 	.word	0x200002a4
 80015c0:	20000328 	.word	0x20000328
 80015c4:	3b8a4bfc 	.word	0x3b8a4bfc
 80015c8:	42480000 	.word	0x42480000
 80015cc:	20000254 	.word	0x20000254
 80015d0:	20000264 	.word	0x20000264
 80015d4:	20000318 	.word	0x20000318
 80015d8:	3a83126f 	.word	0x3a83126f
 80015dc:	42800000 	.word	0x42800000
 80015e0:	3c5b8bac 	.word	0x3c5b8bac
 80015e4:	200002a8 	.word	0x200002a8
 80015e8:	2000032c 	.word	0x2000032c
 80015ec:	20000258 	.word	0x20000258
 80015f0:	20000268 	.word	0x20000268
 80015f4:	2000031c 	.word	0x2000031c
 80015f8:	200002ac 	.word	0x200002ac
 80015fc:	20000330 	.word	0x20000330
 8001600:	2000025c 	.word	0x2000025c
 8001604:	2000026c 	.word	0x2000026c
 8001608:	20000320 	.word	0x20000320
 800160c:	20000314 	.word	0x20000314
 8001610:	20000324 	.word	0x20000324
 8001614:	200002a0 	.word	0x200002a0
 8001618:	200002b0 	.word	0x200002b0
 800161c:	200002b4 	.word	0x200002b4
 8001620:	200002b8 	.word	0x200002b8
 8001624:	200002bc 	.word	0x200002bc
 8001628:	3f5b8bac 	.word	0x3f5b8bac
 800162c:	20000334 	.word	0x20000334
 8001630:	20000338 	.word	0x20000338
 8001634:	2000033c 	.word	0x2000033c
 8001638:	20000340 	.word	0x20000340
 800163c:	20000364 	.word	0x20000364
 8001640:	20000250 	.word	0x20000250
 8001644:	20000344 	.word	0x20000344
 8001648:	20000368 	.word	0x20000368
 800164c:	20000348 	.word	0x20000348
 8001650:	2000036c 	.word	0x2000036c
 8001654:	2000034c 	.word	0x2000034c
 8001658:	20000370 	.word	0x20000370
 800165c:	20000350 	.word	0x20000350
 8001660:	2000022c 	.word	0x2000022c
 8001664:	00000000 	.word	0x00000000
 8001668:	39d1b717 	.word	0x39d1b717
            integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - F1_minus  - D1_minus  * dtheta1_res - integral_tau_dfob1) * G_DFOB * dt;// * Continuous
 800166c:	4bb0      	ldr	r3, [pc, #704]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x1318>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8001934 <HAL_TIM_PeriodElapsedCallback+0x131c>
 8001676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800167a:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8001938 <HAL_TIM_PeriodElapsedCallback+0x1320>
 800167e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001686:	4bad      	ldr	r3, [pc, #692]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x1328>
 8001698:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800169c:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8001944 <HAL_TIM_PeriodElapsedCallback+0x132c>
 80016a0:	4ba6      	ldr	r3, [pc, #664]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x1324>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ae:	4ba6      	ldr	r3, [pc, #664]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x1330>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80016bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c0:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800194c <HAL_TIM_PeriodElapsedCallback+0x1334>
 80016c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016c8:	4b9f      	ldr	r3, [pc, #636]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x1330>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	4b9d      	ldr	r3, [pc, #628]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x1330>)
 80016d4:	edc3 7a00 	vstr	s15, [r3]
            break;
 80016d8:	bf00      	nop
        switch(direc2){
 80016da:	4b9d      	ldr	r3, [pc, #628]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x1338>)
 80016dc:	f993 3000 	ldrsb.w	r3, [r3]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x10d2>
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d037      	beq.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x1140>
 80016e8:	e06d      	b.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x11ae>
            integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - F2_plus  - D2_plus  * dtheta2_res - integral_tau_dfob2) * G_DFOB * dt;// * Continuous
 80016ea:	4b9a      	ldr	r3, [pc, #616]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x133c>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001934 <HAL_TIM_PeriodElapsedCallback+0x131c>
 80016f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001938 <HAL_TIM_PeriodElapsedCallback+0x1320>
 80016fc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001700:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001704:	4b94      	ldr	r3, [pc, #592]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x1340>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x1328>
 8001716:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800171a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800195c <HAL_TIM_PeriodElapsedCallback+0x1344>
 800171e:	4b8e      	ldr	r3, [pc, #568]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x1340>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee37 7a67 	vsub.f32	s14, s14, s15
 800172c:	4b8c      	ldr	r3, [pc, #560]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1348>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001736:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800194c <HAL_TIM_PeriodElapsedCallback+0x1334>
 8001742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001746:	4b86      	ldr	r3, [pc, #536]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1348>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	4b83      	ldr	r3, [pc, #524]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1348>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001756:	e036      	b.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x11ae>
            integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - F2_minus  - D2_minus  * dtheta2_res - integral_tau_dfob2) * G_DFOB * dt;// * Continuous
 8001758:	4b7e      	ldr	r3, [pc, #504]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x133c>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001934 <HAL_TIM_PeriodElapsedCallback+0x131c>
 8001762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001766:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001938 <HAL_TIM_PeriodElapsedCallback+0x1320>
 800176a:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800176e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x1340>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001780:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x1328>
 8001784:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001788:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001964 <HAL_TIM_PeriodElapsedCallback+0x134c>
 800178c:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x1340>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001796:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179a:	4b71      	ldr	r3, [pc, #452]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1348>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80017a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ac:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800194c <HAL_TIM_PeriodElapsedCallback+0x1334>
 80017b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b4:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1348>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	4b68      	ldr	r3, [pc, #416]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x1348>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]
            break;
 80017c4:	bf00      	nop
        switch(direc3){
 80017c6:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x1350>)
 80017c8:	f993 3000 	ldrsb.w	r3, [r3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x11be>
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d037      	beq.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x122c>
 80017d4:	e06d      	b.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x129a>
            integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - F3_plus  - D3_plus  * dtheta3_res - integral_tau_dfob3) * G_DFOB * dt;// * Continuous
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x1354>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001934 <HAL_TIM_PeriodElapsedCallback+0x131c>
 80017e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017e4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001938 <HAL_TIM_PeriodElapsedCallback+0x1320>
 80017e8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80017ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x1358>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x1328>
 8001802:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001806:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001974 <HAL_TIM_PeriodElapsedCallback+0x135c>
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x1358>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x1360>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001822:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800194c <HAL_TIM_PeriodElapsedCallback+0x1334>
 800182e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x1360>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x1360>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001842:	e036      	b.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x129a>
            integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - F3_minus  - D3_minus  * dtheta3_res - integral_tau_dfob3) * G_DFOB * dt;// * Continuous
 8001844:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x1354>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001934 <HAL_TIM_PeriodElapsedCallback+0x131c>
 800184e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001852:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001938 <HAL_TIM_PeriodElapsedCallback+0x1320>
 8001856:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800185a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x1358>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x1328>
 8001870:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001874:	eddf 6a41 	vldr	s13, [pc, #260]	; 800197c <HAL_TIM_PeriodElapsedCallback+0x1364>
 8001878:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x1358>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001882:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001886:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x1360>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001890:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800194c <HAL_TIM_PeriodElapsedCallback+0x1334>
 800189c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x1360>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018aa:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x1360>)
 80018ac:	edc3 7a00 	vstr	s15, [r3]
            break;
 80018b0:	bf00      	nop
        switch(direc4){
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x1368>)
 80018b4:	f993 3000 	ldrsb.w	r3, [r3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x12aa>
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d069      	beq.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x137c>
 80018c0:	e09f      	b.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x13ea>
            integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - F4_plus  - D4_plus  * dtheta4_res - integral_tau_dfob4) * G_DFOB * dt;// * Continuous
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x136c>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001934 <HAL_TIM_PeriodElapsedCallback+0x131c>
 80018cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001938 <HAL_TIM_PeriodElapsedCallback+0x1320>
 80018d4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80018d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x1370>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x1328>
 80018ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800198c <HAL_TIM_PeriodElapsedCallback+0x1374>
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x1370>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x1378>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800194c <HAL_TIM_PeriodElapsedCallback+0x1334>
 800191a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x1378>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x1378>)
 800192a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800192e:	e068      	b.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x13ea>
 8001930:	200002a0 	.word	0x200002a0
 8001934:	3f5b8bac 	.word	0x3f5b8bac
 8001938:	3b8a4bfc 	.word	0x3b8a4bfc
 800193c:	20000250 	.word	0x20000250
 8001940:	00000000 	.word	0x00000000
 8001944:	399d4952 	.word	0x399d4952
 8001948:	20000364 	.word	0x20000364
 800194c:	3a83126f 	.word	0x3a83126f
 8001950:	2000022d 	.word	0x2000022d
 8001954:	200002a4 	.word	0x200002a4
 8001958:	20000254 	.word	0x20000254
 800195c:	ba1d4952 	.word	0xba1d4952
 8001960:	20000368 	.word	0x20000368
 8001964:	b99d4952 	.word	0xb99d4952
 8001968:	2000022e 	.word	0x2000022e
 800196c:	200002a8 	.word	0x200002a8
 8001970:	20000258 	.word	0x20000258
 8001974:	3b89a027 	.word	0x3b89a027
 8001978:	2000036c 	.word	0x2000036c
 800197c:	3b30f27c 	.word	0x3b30f27c
 8001980:	2000022f 	.word	0x2000022f
 8001984:	200002ac 	.word	0x200002ac
 8001988:	2000025c 	.word	0x2000025c
 800198c:	ba03126f 	.word	0xba03126f
 8001990:	20000370 	.word	0x20000370
            integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - F4_minus  - D4_minus  * dtheta4_res - integral_tau_dfob4) * G_DFOB * dt;// * Continuous
 8001994:	4bae      	ldr	r3, [pc, #696]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x1638>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001c54 <HAL_TIM_PeriodElapsedCallback+0x163c>
 800199e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a2:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001c58 <HAL_TIM_PeriodElapsedCallback+0x1640>
 80019a6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80019aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ae:	4bab      	ldr	r3, [pc, #684]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x1644>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001c60 <HAL_TIM_PeriodElapsedCallback+0x1648>
 80019c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019c4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001c64 <HAL_TIM_PeriodElapsedCallback+0x164c>
 80019c8:	4ba4      	ldr	r3, [pc, #656]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x1644>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d6:	4ba4      	ldr	r3, [pc, #656]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x1650>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80019e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e8:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001c6c <HAL_TIM_PeriodElapsedCallback+0x1654>
 80019ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f0:	4b9d      	ldr	r3, [pc, #628]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x1650>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	4b9b      	ldr	r3, [pc, #620]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x1650>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001a00:	bf00      	nop
          tau_dfob1_pre = tau_dfob1;
 8001a02:	4b9b      	ldr	r3, [pc, #620]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a9b      	ldr	r2, [pc, #620]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 8001a08:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 8001a0a:	4b9b      	ldr	r3, [pc, #620]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a9b      	ldr	r2, [pc, #620]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 8001a10:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 8001a12:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a9b      	ldr	r2, [pc, #620]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x166c>)
 8001a18:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 8001a1a:	4b9b      	ldr	r3, [pc, #620]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8001a20:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw;// [N] Element of fd's wheel rotation direction
 8001a22:	4b93      	ldr	r3, [pc, #588]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	eddf 6a99 	vldr	s13, [pc, #612]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x1678>
 8001a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a30:	4b98      	ldr	r3, [pc, #608]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw;
 8001a36:	4b90      	ldr	r3, [pc, #576]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x1678>
 8001a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a44:	4b94      	ldr	r3, [pc, #592]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x1680>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw;
 8001a4a:	4b8d      	ldr	r3, [pc, #564]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x1678>
 8001a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a58:	4b90      	ldr	r3, [pc, #576]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw;
 8001a5e:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x1678>
 8001a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1688>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
        fx_hat = 1.0 / Rw             * (   tau_dfob1 - tau_dfob2 + tau_dfob3 - tau_dfob4 );
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a82:	4b7f      	ldr	r3, [pc, #508]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a9a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x1628>
 8001a9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
        fy_hat = 1.0 / Rw             * (   tau_dfob1 + tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	4b71      	ldr	r3, [pc, #452]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001abc:	4b70      	ldr	r3, [pc, #448]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac6:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad4:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x1628>
 8001ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001adc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae0:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1690>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
        Mz_hat = 1.0 / Rw * ( L + W ) * ( - tau_dfob1 - tau_dfob2 + tau_dfob3 + tau_dfob4 );
 8001ae6:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eeb1 7a67 	vneg.f32	s14, s15
 8001af0:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afa:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b12:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001c48 <HAL_TIM_PeriodElapsedCallback+0x1630>
 8001b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
        ia1_ref = i1_ref + i1_comp;
 8001b24:	4b62      	ldr	r3, [pc, #392]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x169c>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b34:	4b60      	ldr	r3, [pc, #384]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 8001b3a:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x16a4>)
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x16a8>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x16ac>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x16b0>)
 8001b52:	ed93 7a00 	vldr	s14, [r3]
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x16b4>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x16b8>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x16bc>)
 8001b68:	ed93 7a00 	vldr	s14, [r3]
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x16c0>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x1638>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001cdc <HAL_TIM_PeriodElapsedCallback+0x16c4>
 8001b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd03      	ble.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0x1580>
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8001b92:	4a53      	ldr	r2, [pc, #332]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x16c8>)
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e00c      	b.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x159a>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8001b98:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001ce4 <HAL_TIM_PeriodElapsedCallback+0x16cc>
 8001ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d502      	bpl.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x159a>
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8001bae:	4a4e      	ldr	r2, [pc, #312]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8001bb0:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x16ac>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001cdc <HAL_TIM_PeriodElapsedCallback+0x16c4>
 8001bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	dd03      	ble.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x15b6>
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x16ac>)
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x16c8>)
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e00c      	b.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x15d0>
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x16ac>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001ce4 <HAL_TIM_PeriodElapsedCallback+0x16cc>
 8001bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d502      	bpl.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x15d0>
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x16ac>)
 8001be4:	4a40      	ldr	r2, [pc, #256]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8001be6:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x16b8>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001cdc <HAL_TIM_PeriodElapsedCallback+0x16c4>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd03      	ble.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0x15ec>
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x16b8>)
 8001bfe:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x16c8>)
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e00c      	b.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x1606>
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x16b8>)
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ce4 <HAL_TIM_PeriodElapsedCallback+0x16cc>
 8001c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	d502      	bpl.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x1606>
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x16b8>)
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8001c1c:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x1638>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001cdc <HAL_TIM_PeriodElapsedCallback+0x16c4>
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	dd5c      	ble.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x16d4>
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x1638>)
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x16c8>)
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e065      	b.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x16ee>
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	fb000001 	.word	0xfb000001
 8001c44:	4033ffff 	.word	0x4033ffff
 8001c48:	09fffffd 	.word	0x09fffffd
 8001c4c:	40180000 	.word	0x40180000
 8001c50:	200002ac 	.word	0x200002ac
 8001c54:	3f5b8bac 	.word	0x3f5b8bac
 8001c58:	3b8a4bfc 	.word	0x3b8a4bfc
 8001c5c:	2000025c 	.word	0x2000025c
 8001c60:	00000000 	.word	0x00000000
 8001c64:	b68637bd 	.word	0xb68637bd
 8001c68:	20000370 	.word	0x20000370
 8001c6c:	3a83126f 	.word	0x3a83126f
 8001c70:	20000344 	.word	0x20000344
 8001c74:	20000354 	.word	0x20000354
 8001c78:	20000348 	.word	0x20000348
 8001c7c:	20000358 	.word	0x20000358
 8001c80:	2000034c 	.word	0x2000034c
 8001c84:	2000035c 	.word	0x2000035c
 8001c88:	20000350 	.word	0x20000350
 8001c8c:	20000360 	.word	0x20000360
 8001c90:	3d4ccccd 	.word	0x3d4ccccd
 8001c94:	20000374 	.word	0x20000374
 8001c98:	20000378 	.word	0x20000378
 8001c9c:	2000037c 	.word	0x2000037c
 8001ca0:	20000380 	.word	0x20000380
 8001ca4:	20000384 	.word	0x20000384
 8001ca8:	20000388 	.word	0x20000388
 8001cac:	2000038c 	.word	0x2000038c
 8001cb0:	20000290 	.word	0x20000290
 8001cb4:	20000334 	.word	0x20000334
 8001cb8:	200002a0 	.word	0x200002a0
 8001cbc:	20000294 	.word	0x20000294
 8001cc0:	20000338 	.word	0x20000338
 8001cc4:	200002a4 	.word	0x200002a4
 8001cc8:	20000298 	.word	0x20000298
 8001ccc:	2000033c 	.word	0x2000033c
 8001cd0:	200002a8 	.word	0x200002a8
 8001cd4:	2000029c 	.word	0x2000029c
 8001cd8:	20000340 	.word	0x20000340
 8001cdc:	3fb33333 	.word	0x3fb33333
 8001ce0:	3fb33333 	.word	0x3fb33333
 8001ce4:	bfb33333 	.word	0xbfb33333
 8001ce8:	bfb33333 	.word	0xbfb33333
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 8001cec:	4b9e      	ldr	r3, [pc, #632]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001f6c <HAL_TIM_PeriodElapsedCallback+0x1954>
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d502      	bpl.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x16ee>
 8001d00:	4b99      	ldr	r3, [pc, #612]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8001d02:	4a9b      	ldr	r2, [pc, #620]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8001d04:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8001d06:	4b9b      	ldr	r3, [pc, #620]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x195c>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d10:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8001f58 <HAL_TIM_PeriodElapsedCallback+0x1940>
 8001d14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d18:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8001f60 <HAL_TIM_PeriodElapsedCallback+0x1948>
 8001d1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d24:	ee17 3a90 	vmov	r3, s15
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b93      	ldr	r3, [pc, #588]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x1960>)
 8001d2c:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 8001d2e:	4b93      	ldr	r3, [pc, #588]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d38:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001f58 <HAL_TIM_PeriodElapsedCallback+0x1940>
 8001d3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d40:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001f60 <HAL_TIM_PeriodElapsedCallback+0x1948>
 8001d44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d4c:	ee17 3a90 	vmov	r3, s15
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x1968>)
 8001d54:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8001d56:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x196c>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d60:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001f58 <HAL_TIM_PeriodElapsedCallback+0x1940>
 8001d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d68:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001f60 <HAL_TIM_PeriodElapsedCallback+0x1948>
 8001d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x1970>)
 8001d7c:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 8001d7e:	4b7a      	ldr	r3, [pc, #488]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d88:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001f58 <HAL_TIM_PeriodElapsedCallback+0x1940>
 8001d8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d90:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001f60 <HAL_TIM_PeriodElapsedCallback+0x1948>
 8001d94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d9c:	ee17 3a90 	vmov	r3, s15
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x1974>)
 8001da4:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8001da6:	4b74      	ldr	r3, [pc, #464]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x1960>)
 8001da8:	881a      	ldrh	r2, [r3, #0]
 8001daa:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x1978>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x1968>)
 8001db2:	881a      	ldrh	r2, [r3, #0]
 8001db4:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x1978>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8001dba:	4b73      	ldr	r3, [pc, #460]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x1970>)
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	4b75      	ldr	r3, [pc, #468]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x197c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8001dc4:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x1974>)
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x197c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x1980>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a72      	ldr	r2, [pc, #456]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x1984>)
 8001dd4:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x1988>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a72      	ldr	r2, [pc, #456]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x198c>)
 8001ddc:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 8001dde:	4b72      	ldr	r3, [pc, #456]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x1990>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a72      	ldr	r2, [pc, #456]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x1994>)
 8001de4:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x1998>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a72      	ldr	r2, [pc, #456]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x199c>)
 8001dec:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 8001dee:	4b72      	ldr	r3, [pc, #456]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8001df4:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 8001df6:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x19a8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x19ac>)
 8001dfc:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x19b4>)
 8001e04:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x19b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x19bc>)
 8001e0c:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x19c0>)
 8001e10:	881a      	ldrh	r2, [r3, #0]
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x19c4>)
 8001e14:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 8001e16:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x19c8>)
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x19cc>)
 8001e1c:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x19d0>)
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	4b72      	ldr	r3, [pc, #456]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x19d4>)
 8001e24:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 8001e26:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x19d8>)
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x19dc>)
 8001e2c:	801a      	strh	r2, [r3, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x19e0>)
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x19e4>)
 8001e34:	fba3 1302 	umull	r1, r3, r3, r2
 8001e38:	08d9      	lsrs	r1, r3, #3
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 81d7 	bne.w	80021fa <HAL_TIM_PeriodElapsedCallback+0x1be2>
 8001e4c:	4b6c      	ldr	r3, [pc, #432]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001e54:	4293      	cmp	r3, r2
 8001e56:	f300 81d0 	bgt.w	80021fa <HAL_TIM_PeriodElapsedCallback+0x1be2>
          t_SRAM[i_save] = t;
 8001e5a:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x19ec>)
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4969      	ldr	r1, [pc, #420]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x19f0>)
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8001e6a:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	4966      	ldr	r1, [pc, #408]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x19f4>)
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8001e7a:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x19a8>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4963      	ldr	r1, [pc, #396]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x19f8>)
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	4960      	ldr	r1, [pc, #384]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x19fc>)
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x19b8>)
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	495d      	ldr	r1, [pc, #372]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x1a00>)
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	601a      	str	r2, [r3, #0]
          theta1_res_SRAM[i_save] = theta1_res;
 8001eaa:	4b55      	ldr	r3, [pc, #340]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x1980>)
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	495a      	ldr	r1, [pc, #360]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x1a04>)
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x1988>)
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	4957      	ldr	r1, [pc, #348]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x1a08>)
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 8001eca:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a36      	ldr	r2, [pc, #216]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x1990>)
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4954      	ldr	r1, [pc, #336]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x1a0c>)
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x1998>)
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4951      	ldr	r1, [pc, #324]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1a10>)
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	601a      	str	r2, [r3, #0]
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 8001eea:	4b45      	ldr	r3, [pc, #276]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x1a14>)
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	494f      	ldr	r1, [pc, #316]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x1a18>)
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x1a1c>)
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	494d      	ldr	r1, [pc, #308]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1a20>)
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a4b      	ldr	r2, [pc, #300]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x1a24>)
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	494b      	ldr	r1, [pc, #300]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1a28>)
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a49      	ldr	r2, [pc, #292]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x1a2c>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4949      	ldr	r1, [pc, #292]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x1a30>)
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	601a      	str	r2, [r3, #0]
          i1_ref_SRAM[i_save] = i1_ref;
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a47      	ldr	r2, [pc, #284]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x1a34>)
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	4947      	ldr	r1, [pc, #284]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x1a38>)
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	601a      	str	r2, [r3, #0]
          i2_ref_SRAM[i_save] = i2_ref;
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a45      	ldr	r2, [pc, #276]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x1a3c>)
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	4945      	ldr	r1, [pc, #276]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x1a40>)
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	601a      	str	r2, [r3, #0]
          i3_ref_SRAM[i_save] = i3_ref;
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x19e8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a43      	ldr	r2, [pc, #268]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x1a44>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	e085      	b.n	8002060 <HAL_TIM_PeriodElapsedCallback+0x1a48>
 8001f54:	f3af 8000 	nop.w
 8001f58:	bbf58d11 	.word	0xbbf58d11
 8001f5c:	4071db6d 	.word	0x4071db6d
 8001f60:	00000000 	.word	0x00000000
 8001f64:	407f4000 	.word	0x407f4000
 8001f68:	200002ac 	.word	0x200002ac
 8001f6c:	bfb33333 	.word	0xbfb33333
 8001f70:	bfb33333 	.word	0xbfb33333
 8001f74:	200002a0 	.word	0x200002a0
 8001f78:	200002c0 	.word	0x200002c0
 8001f7c:	200002a4 	.word	0x200002a4
 8001f80:	200002c2 	.word	0x200002c2
 8001f84:	200002a8 	.word	0x200002a8
 8001f88:	200002c4 	.word	0x200002c4
 8001f8c:	200002c6 	.word	0x200002c6
 8001f90:	2005fc18 	.word	0x2005fc18
 8001f94:	2005fcd8 	.word	0x2005fcd8
 8001f98:	20000230 	.word	0x20000230
 8001f9c:	20000240 	.word	0x20000240
 8001fa0:	20000234 	.word	0x20000234
 8001fa4:	20000244 	.word	0x20000244
 8001fa8:	20000238 	.word	0x20000238
 8001fac:	20000248 	.word	0x20000248
 8001fb0:	2000023c 	.word	0x2000023c
 8001fb4:	2000024c 	.word	0x2000024c
 8001fb8:	20000250 	.word	0x20000250
 8001fbc:	20000260 	.word	0x20000260
 8001fc0:	20000254 	.word	0x20000254
 8001fc4:	20000264 	.word	0x20000264
 8001fc8:	20000258 	.word	0x20000258
 8001fcc:	20000268 	.word	0x20000268
 8001fd0:	2000025c 	.word	0x2000025c
 8001fd4:	2000026c 	.word	0x2000026c
 8001fd8:	20000218 	.word	0x20000218
 8001fdc:	20000220 	.word	0x20000220
 8001fe0:	2000021a 	.word	0x2000021a
 8001fe4:	20000222 	.word	0x20000222
 8001fe8:	2000021c 	.word	0x2000021c
 8001fec:	20000224 	.word	0x20000224
 8001ff0:	2000021e 	.word	0x2000021e
 8001ff4:	20000226 	.word	0x20000226
 8001ff8:	20000214 	.word	0x20000214
 8001ffc:	cccccccd 	.word	0xcccccccd
 8002000:	20000390 	.word	0x20000390
 8002004:	20000210 	.word	0x20000210
 8002008:	20000398 	.word	0x20000398
 800200c:	20002aa8 	.word	0x20002aa8
 8002010:	200051b8 	.word	0x200051b8
 8002014:	200078c8 	.word	0x200078c8
 8002018:	20009fd8 	.word	0x20009fd8
 800201c:	2000c6e8 	.word	0x2000c6e8
 8002020:	2000edf8 	.word	0x2000edf8
 8002024:	20011508 	.word	0x20011508
 8002028:	20013c18 	.word	0x20013c18
 800202c:	20000280 	.word	0x20000280
 8002030:	20016328 	.word	0x20016328
 8002034:	20000284 	.word	0x20000284
 8002038:	20018a38 	.word	0x20018a38
 800203c:	20000288 	.word	0x20000288
 8002040:	2001b148 	.word	0x2001b148
 8002044:	2000028c 	.word	0x2000028c
 8002048:	2001d858 	.word	0x2001d858
 800204c:	20000290 	.word	0x20000290
 8002050:	2001ff68 	.word	0x2001ff68
 8002054:	20000294 	.word	0x20000294
 8002058:	20022678 	.word	0x20022678
 800205c:	20000298 	.word	0x20000298
 8002060:	4971      	ldr	r1, [pc, #452]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	601a      	str	r2, [r3, #0]
          i4_ref_SRAM[i_save] = i4_ref;
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a70      	ldr	r2, [pc, #448]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4970      	ldr	r1, [pc, #448]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x1c1c>)
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	496e      	ldr	r1, [pc, #440]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 8002088:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c28>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	496c      	ldr	r1, [pc, #432]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1c2c>)
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6a      	ldr	r2, [pc, #424]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c30>)
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	496a      	ldr	r1, [pc, #424]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1c34>)
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 80020a8:	4b60      	ldr	r3, [pc, #384]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a68      	ldr	r2, [pc, #416]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1c38>)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4968      	ldr	r1, [pc, #416]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1c3c>)
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 80020b8:	4b5c      	ldr	r3, [pc, #368]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a66      	ldr	r2, [pc, #408]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1c40>)
 80020be:	8811      	ldrh	r1, [r2, #0]
 80020c0:	4a66      	ldr	r2, [pc, #408]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1c44>)
 80020c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 80020c6:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a65      	ldr	r2, [pc, #404]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 80020cc:	8811      	ldrh	r1, [r2, #0]
 80020ce:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1c4c>)
 80020d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 80020d4:	4b55      	ldr	r3, [pc, #340]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 80020da:	8811      	ldrh	r1, [r2, #0]
 80020dc:	4a63      	ldr	r2, [pc, #396]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x1c54>)
 80020de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 80020e2:	4b52      	ldr	r3, [pc, #328]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a62      	ldr	r2, [pc, #392]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x1c58>)
 80020e8:	8811      	ldrh	r1, [r2, #0]
 80020ea:	4a62      	ldr	r2, [pc, #392]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x1c5c>)
 80020ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          fd1_ref_SRAM[i_save] = fd1_ref;
 80020f0:	4b4e      	ldr	r3, [pc, #312]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a60      	ldr	r2, [pc, #384]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x1c60>)
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4960      	ldr	r1, [pc, #384]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x1c64>)
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	601a      	str	r2, [r3, #0]
          fd2_ref_SRAM[i_save] = fd2_ref;
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5e      	ldr	r2, [pc, #376]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x1c68>)
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	495e      	ldr	r1, [pc, #376]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x1c6c>)
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	601a      	str	r2, [r3, #0]
          fd3_ref_SRAM[i_save] = fd3_ref;
 8002110:	4b46      	ldr	r3, [pc, #280]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5c      	ldr	r2, [pc, #368]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x1c70>)
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	495c      	ldr	r1, [pc, #368]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x1c74>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	601a      	str	r2, [r3, #0]
          fd4_ref_SRAM[i_save] = fd4_ref;
 8002120:	4b42      	ldr	r3, [pc, #264]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5a      	ldr	r2, [pc, #360]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c78>)
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	495a      	ldr	r1, [pc, #360]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x1c7c>)
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	601a      	str	r2, [r3, #0]
          Ki_df_integral1_SRAM[i_save] = Ki_df_integral1;
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x1c80>)
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	4958      	ldr	r1, [pc, #352]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x1c84>)
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	601a      	str	r2, [r3, #0]
          Ki_df_integral2_SRAM[i_save] = Ki_df_integral2;
 8002140:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a56      	ldr	r2, [pc, #344]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x1c88>)
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4956      	ldr	r1, [pc, #344]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1c8c>)
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	601a      	str	r2, [r3, #0]
          Ki_df_integral3_SRAM[i_save] = Ki_df_integral3;
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a54      	ldr	r2, [pc, #336]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x1c90>)
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4954      	ldr	r1, [pc, #336]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x1c94>)
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	601a      	str	r2, [r3, #0]
          Ki_df_integral4_SRAM[i_save] = Ki_df_integral4;
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x1c98>)
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4952      	ldr	r1, [pc, #328]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x1c9c>)
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 8002170:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x1ca0>)
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	4950      	ldr	r1, [pc, #320]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x1ca4>)
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x1ca8>)
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	494e      	ldr	r1, [pc, #312]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x1cac>)
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x1cb0>)
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	494c      	ldr	r1, [pc, #304]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cb4>)
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x1cb8>)
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	494a      	ldr	r1, [pc, #296]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x1cbc>)
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x1cc0>)
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4948      	ldr	r1, [pc, #288]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x1cc4>)
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x1cc8>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4946      	ldr	r1, [pc, #280]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x1ccc>)
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	601a      	str	r2, [r3, #0]
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x1cd0>)
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	4944      	ldr	r1, [pc, #272]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x1cd4>)
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x1cd8>)
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4942      	ldr	r1, [pc, #264]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x1cdc>)
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	601a      	str	r2, [r3, #0]
          i_save++;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80021f8:	6013      	str	r3, [r2, #0]
        loop = loop + 1;
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x1ce0>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x1ce0>)
 8002204:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x1ce4>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002300 <HAL_TIM_PeriodElapsedCallback+0x1ce8>
 8002210:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x1ce4>)
 8002216:	edc3 7a00 	vstr	s15, [r3]
        break;
 800221a:	e000      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0x1c06>
        break;
 800221c:	bf00      	nop
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20024d88 	.word	0x20024d88
 800222c:	20000390 	.word	0x20000390
 8002230:	2000029c 	.word	0x2000029c
 8002234:	20027498 	.word	0x20027498
 8002238:	200002a0 	.word	0x200002a0
 800223c:	20029ba8 	.word	0x20029ba8
 8002240:	200002a4 	.word	0x200002a4
 8002244:	2002c2b8 	.word	0x2002c2b8
 8002248:	200002a8 	.word	0x200002a8
 800224c:	2002e9c8 	.word	0x2002e9c8
 8002250:	200002ac 	.word	0x200002ac
 8002254:	200310d8 	.word	0x200310d8
 8002258:	200002c0 	.word	0x200002c0
 800225c:	200337e8 	.word	0x200337e8
 8002260:	200002c2 	.word	0x200002c2
 8002264:	20034b70 	.word	0x20034b70
 8002268:	200002c4 	.word	0x200002c4
 800226c:	20035ef8 	.word	0x20035ef8
 8002270:	200002c6 	.word	0x200002c6
 8002274:	20037280 	.word	0x20037280
 8002278:	200002f4 	.word	0x200002f4
 800227c:	20038608 	.word	0x20038608
 8002280:	200002f8 	.word	0x200002f8
 8002284:	2003ad18 	.word	0x2003ad18
 8002288:	200002fc 	.word	0x200002fc
 800228c:	2003d428 	.word	0x2003d428
 8002290:	20000300 	.word	0x20000300
 8002294:	2003fb38 	.word	0x2003fb38
 8002298:	20000304 	.word	0x20000304
 800229c:	20042248 	.word	0x20042248
 80022a0:	20000308 	.word	0x20000308
 80022a4:	20044958 	.word	0x20044958
 80022a8:	2000030c 	.word	0x2000030c
 80022ac:	20047068 	.word	0x20047068
 80022b0:	20000310 	.word	0x20000310
 80022b4:	20049778 	.word	0x20049778
 80022b8:	20000314 	.word	0x20000314
 80022bc:	2004be88 	.word	0x2004be88
 80022c0:	20000318 	.word	0x20000318
 80022c4:	2004e598 	.word	0x2004e598
 80022c8:	2000031c 	.word	0x2000031c
 80022cc:	20050ca8 	.word	0x20050ca8
 80022d0:	20000320 	.word	0x20000320
 80022d4:	200533b8 	.word	0x200533b8
 80022d8:	20000344 	.word	0x20000344
 80022dc:	20055ac8 	.word	0x20055ac8
 80022e0:	20000348 	.word	0x20000348
 80022e4:	200581d8 	.word	0x200581d8
 80022e8:	2000034c 	.word	0x2000034c
 80022ec:	2005a8e8 	.word	0x2005a8e8
 80022f0:	20000350 	.word	0x20000350
 80022f4:	2005cff8 	.word	0x2005cff8
 80022f8:	20000214 	.word	0x20000214
 80022fc:	20000210 	.word	0x20000210
 8002300:	3a83126f 	.word	0x3a83126f

08002304 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002314:	f040 8343 	bne.w	800299e <HAL_GPIO_EXTI_Callback+0x69a>
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }

		mode++;
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <HAL_GPIO_EXTI_Callback+0x150>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <HAL_GPIO_EXTI_Callback+0x150>)
 8002322:	701a      	strb	r2, [r3, #0]
		printf("%d, ", mode);
 8002324:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_GPIO_EXTI_Callback+0x150>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	484b      	ldr	r0, [pc, #300]	; (8002458 <HAL_GPIO_EXTI_Callback+0x154>)
 800232c:	f005 ff00 	bl	8008130 <iprintf>
		printf("\r\n");
 8002330:	484a      	ldr	r0, [pc, #296]	; (800245c <HAL_GPIO_EXTI_Callback+0x158>)
 8002332:	f005 ff71 	bl	8008218 <puts>

    divide = mode % 3;
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_GPIO_EXTI_Callback+0x150>)
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	4b49      	ldr	r3, [pc, #292]	; (8002460 <HAL_GPIO_EXTI_Callback+0x15c>)
 800233c:	fba3 1302 	umull	r1, r3, r3, r2
 8002340:	0859      	lsrs	r1, r3, #1
 8002342:	460b      	mov	r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	440b      	add	r3, r1
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b45      	ldr	r3, [pc, #276]	; (8002464 <HAL_GPIO_EXTI_Callback+0x160>)
 800234e:	701a      	strb	r2, [r3, #0]

    switch(divide){
 8002350:	4b44      	ldr	r3, [pc, #272]	; (8002464 <HAL_GPIO_EXTI_Callback+0x160>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d00f      	beq.n	8002378 <HAL_GPIO_EXTI_Callback+0x74>
 8002358:	2b02      	cmp	r3, #2
 800235a:	d018      	beq.n	800238e <HAL_GPIO_EXTI_Callback+0x8a>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d127      	bne.n	80023b0 <HAL_GPIO_EXTI_Callback+0xac>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002366:	4840      	ldr	r0, [pc, #256]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 8002368:	f001 ff18 	bl	800419c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 800236c:	2201      	movs	r2, #1
 800236e:	2101      	movs	r1, #1
 8002370:	483d      	ldr	r0, [pc, #244]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 8002372:	f001 ff13 	bl	800419c <HAL_GPIO_WritePin>
        break;
 8002376:	e01b      	b.n	80023b0 <HAL_GPIO_EXTI_Callback+0xac>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2101      	movs	r1, #1
 800237c:	483a      	ldr	r0, [pc, #232]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 800237e:	f001 ff0d 	bl	800419c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 8002382:	2201      	movs	r2, #1
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	4838      	ldr	r0, [pc, #224]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 8002388:	f001 ff08 	bl	800419c <HAL_GPIO_WritePin>
        break;
 800238c:	e010      	b.n	80023b0 <HAL_GPIO_EXTI_Callback+0xac>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	4835      	ldr	r0, [pc, #212]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 8002394:	f001 ff02 	bl	800419c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	4832      	ldr	r0, [pc, #200]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 800239e:	f001 fefd 	bl	800419c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023a8:	482f      	ldr	r0, [pc, #188]	; (8002468 <HAL_GPIO_EXTI_Callback+0x164>)
 80023aa:	f001 fef7 	bl	800419c <HAL_GPIO_WritePin>
        break;
 80023ae:	bf00      	nop
    }

    switch(mode){
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <HAL_GPIO_EXTI_Callback+0x150>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_EXTI_Callback+0xbc>
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d022      	beq.n	8002402 <HAL_GPIO_EXTI_Callback+0xfe>
 80023bc:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 80023be:	e2ee      	b.n	800299e <HAL_GPIO_EXTI_Callback+0x69a>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        tau_dfob1 = 0.0;
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_GPIO_EXTI_Callback+0x168>)
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
        tau_dfob2 = 0.0;
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_GPIO_EXTI_Callback+0x16c>)
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
        tau_dfob3 = 0.0;
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_GPIO_EXTI_Callback+0x170>)
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
        tau_dfob4 = 0.0;
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_GPIO_EXTI_Callback+0x174>)
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        tau_dfob1_pre = 0.0;
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_GPIO_EXTI_Callback+0x178>)
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_GPIO_EXTI_Callback+0x178>)
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_GPIO_EXTI_Callback+0x178>)
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_GPIO_EXTI_Callback+0x178>)
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        break;
 8002400:	e2cd      	b.n	800299e <HAL_GPIO_EXTI_Callback+0x69a>
      // }
      // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
      // fprintf(outputfile, "abc");
      // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002404:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002408:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_GPIO_EXTI_Callback+0x180>)
 800240c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002410:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_GPIO_EXTI_Callback+0x184>)
 8002414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002418:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_GPIO_EXTI_Callback+0x188>)
 800241c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002420:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_GPIO_EXTI_Callback+0x180>)
 800242e:	881a      	ldrh	r2, [r3, #0]
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_GPIO_EXTI_Callback+0x184>)
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_GPIO_EXTI_Callback+0x188>)
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_GPIO_EXTI_Callback+0x190>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_GPIO_EXTI_Callback+0x194>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e29d      	b.n	800298e <HAL_GPIO_EXTI_Callback+0x68a>
 8002452:	bf00      	nop
 8002454:	20000216 	.word	0x20000216
 8002458:	08009ed0 	.word	0x08009ed0
 800245c:	08009ed8 	.word	0x08009ed8
 8002460:	aaaaaaab 	.word	0xaaaaaaab
 8002464:	20000217 	.word	0x20000217
 8002468:	40020400 	.word	0x40020400
 800246c:	20000344 	.word	0x20000344
 8002470:	20000348 	.word	0x20000348
 8002474:	2000034c 	.word	0x2000034c
 8002478:	20000350 	.word	0x20000350
 800247c:	20000354 	.word	0x20000354
 8002480:	200002c0 	.word	0x200002c0
 8002484:	200002c2 	.word	0x200002c2
 8002488:	200002c4 	.word	0x200002c4
 800248c:	200002c6 	.word	0x200002c6
 8002490:	2005fc18 	.word	0x2005fc18
 8002494:	2005fcd8 	.word	0x2005fcd8
 8002498:	20000394 	.word	0x20000394
          printf("%d, ", i_output);
 800249c:	4bc2      	ldr	r3, [pc, #776]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	48c2      	ldr	r0, [pc, #776]	; (80027ac <HAL_GPIO_EXTI_Callback+0x4a8>)
 80024a4:	f005 fe44 	bl	8008130 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 80024a8:	4bbf      	ldr	r3, [pc, #764]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4ac0      	ldr	r2, [pc, #768]	; (80027b0 <HAL_GPIO_EXTI_Callback+0x4ac>)
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ba:	ec53 2b17 	vmov	r2, r3, d7
 80024be:	48bd      	ldr	r0, [pc, #756]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024c0:	f005 fe36 	bl	8008130 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 80024c4:	4bb8      	ldr	r3, [pc, #736]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4abb      	ldr	r2, [pc, #748]	; (80027b8 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024d6:	ec53 2b17 	vmov	r2, r3, d7
 80024da:	48b6      	ldr	r0, [pc, #728]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024dc:	f005 fe28 	bl	8008130 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 80024e0:	4bb1      	ldr	r3, [pc, #708]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4ab5      	ldr	r2, [pc, #724]	; (80027bc <HAL_GPIO_EXTI_Callback+0x4b8>)
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f2:	ec53 2b17 	vmov	r2, r3, d7
 80024f6:	48af      	ldr	r0, [pc, #700]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024f8:	f005 fe1a 	bl	8008130 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 80024fc:	4baa      	ldr	r3, [pc, #680]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4aaf      	ldr	r2, [pc, #700]	; (80027c0 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250e:	ec53 2b17 	vmov	r2, r3, d7
 8002512:	48a8      	ldr	r0, [pc, #672]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002514:	f005 fe0c 	bl	8008130 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 8002518:	4ba3      	ldr	r3, [pc, #652]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4aa9      	ldr	r2, [pc, #676]	; (80027c4 <HAL_GPIO_EXTI_Callback+0x4c0>)
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800252a:	ec53 2b17 	vmov	r2, r3, d7
 800252e:	48a1      	ldr	r0, [pc, #644]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002530:	f005 fdfe 	bl	8008130 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 8002534:	4b9c      	ldr	r3, [pc, #624]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4aa3      	ldr	r2, [pc, #652]	; (80027c8 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002546:	ec53 2b17 	vmov	r2, r3, d7
 800254a:	489a      	ldr	r0, [pc, #616]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800254c:	f005 fdf0 	bl	8008130 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 8002550:	4b95      	ldr	r3, [pc, #596]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a9d      	ldr	r2, [pc, #628]	; (80027cc <HAL_GPIO_EXTI_Callback+0x4c8>)
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002562:	ec53 2b17 	vmov	r2, r3, d7
 8002566:	4893      	ldr	r0, [pc, #588]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002568:	f005 fde2 	bl	8008130 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 800256c:	4b8e      	ldr	r3, [pc, #568]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a97      	ldr	r2, [pc, #604]	; (80027d0 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800257e:	ec53 2b17 	vmov	r2, r3, d7
 8002582:	488c      	ldr	r0, [pc, #560]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002584:	f005 fdd4 	bl	8008130 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 8002588:	4b87      	ldr	r3, [pc, #540]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a91      	ldr	r2, [pc, #580]	; (80027d4 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800259a:	ec53 2b17 	vmov	r2, r3, d7
 800259e:	4885      	ldr	r0, [pc, #532]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025a0:	f005 fdc6 	bl	8008130 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 80025a4:	4b80      	ldr	r3, [pc, #512]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a8b      	ldr	r2, [pc, #556]	; (80027d8 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025b6:	ec53 2b17 	vmov	r2, r3, d7
 80025ba:	487e      	ldr	r0, [pc, #504]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025bc:	f005 fdb8 	bl	8008130 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 80025c0:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a85      	ldr	r2, [pc, #532]	; (80027dc <HAL_GPIO_EXTI_Callback+0x4d8>)
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025d2:	ec53 2b17 	vmov	r2, r3, d7
 80025d6:	4877      	ldr	r0, [pc, #476]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025d8:	f005 fdaa 	bl	8008130 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 80025dc:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7f      	ldr	r2, [pc, #508]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ee:	ec53 2b17 	vmov	r2, r3, d7
 80025f2:	4870      	ldr	r0, [pc, #448]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025f4:	f005 fd9c 	bl	8008130 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 80025f8:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a79      	ldr	r2, [pc, #484]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800260a:	ec53 2b17 	vmov	r2, r3, d7
 800260e:	4869      	ldr	r0, [pc, #420]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002610:	f005 fd8e 	bl	8008130 <iprintf>

          printf("%f, ", i1_ref_SRAM[i_output]);
 8002614:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002626:	ec53 2b17 	vmov	r2, r3, d7
 800262a:	4862      	ldr	r0, [pc, #392]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800262c:	f005 fd80 	bl	8008130 <iprintf>
          printf("%f, ", i2_ref_SRAM[i_output]);
 8002630:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6d      	ldr	r2, [pc, #436]	; (80027ec <HAL_GPIO_EXTI_Callback+0x4e8>)
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002642:	ec53 2b17 	vmov	r2, r3, d7
 8002646:	485b      	ldr	r0, [pc, #364]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002648:	f005 fd72 	bl	8008130 <iprintf>
          printf("%f, ", i3_ref_SRAM[i_output]);
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800265e:	ec53 2b17 	vmov	r2, r3, d7
 8002662:	4854      	ldr	r0, [pc, #336]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002664:	f005 fd64 	bl	8008130 <iprintf>
          printf("%f, ", i4_ref_SRAM[i_output]);
 8002668:	4b4f      	ldr	r3, [pc, #316]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a61      	ldr	r2, [pc, #388]	; (80027f4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267a:	ec53 2b17 	vmov	r2, r3, d7
 800267e:	484d      	ldr	r0, [pc, #308]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002680:	f005 fd56 	bl	8008130 <iprintf>

          printf("%f, ", ia1_ref_SRAM[i_output]);
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002696:	ec53 2b17 	vmov	r2, r3, d7
 800269a:	4846      	ldr	r0, [pc, #280]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800269c:	f005 fd48 	bl	8008130 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 80026a0:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b2:	ec53 2b17 	vmov	r2, r3, d7
 80026b6:	483f      	ldr	r0, [pc, #252]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80026b8:	f005 fd3a 	bl	8008130 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4f      	ldr	r2, [pc, #316]	; (8002800 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ce:	ec53 2b17 	vmov	r2, r3, d7
 80026d2:	4838      	ldr	r0, [pc, #224]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80026d4:	f005 fd2c 	bl	8008130 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 80026d8:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_GPIO_EXTI_Callback+0x500>)
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ea:	ec53 2b17 	vmov	r2, r3, d7
 80026ee:	4831      	ldr	r0, [pc, #196]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80026f0:	f005 fd1e 	bl	8008130 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_GPIO_EXTI_Callback+0x504>)
 80026fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026fe:	4619      	mov	r1, r3
 8002700:	482a      	ldr	r0, [pc, #168]	; (80027ac <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002702:	f005 fd15 	bl	8008130 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a40      	ldr	r2, [pc, #256]	; (800280c <HAL_GPIO_EXTI_Callback+0x508>)
 800270c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002710:	4619      	mov	r1, r3
 8002712:	4826      	ldr	r0, [pc, #152]	; (80027ac <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002714:	f005 fd0c 	bl	8008130 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3c      	ldr	r2, [pc, #240]	; (8002810 <HAL_GPIO_EXTI_Callback+0x50c>)
 800271e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002722:	4619      	mov	r1, r3
 8002724:	4821      	ldr	r0, [pc, #132]	; (80027ac <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002726:	f005 fd03 	bl	8008130 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a39      	ldr	r2, [pc, #228]	; (8002814 <HAL_GPIO_EXTI_Callback+0x510>)
 8002730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002734:	4619      	mov	r1, r3
 8002736:	481d      	ldr	r0, [pc, #116]	; (80027ac <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002738:	f005 fcfa 	bl	8008130 <iprintf>
          // printf("%f, ", tau_dis1_raw_SRAM[i_output]);
          // printf("%f, ", tau_dis2_raw_SRAM[i_output]);
          // printf("%f, ", tau_dis3_raw_SRAM[i_output]);
          // printf("%f, ", tau_dis4_raw_SRAM[i_output]);

          printf("%f, ", fd1_ref_SRAM[i_output]);
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a35      	ldr	r2, [pc, #212]	; (8002818 <HAL_GPIO_EXTI_Callback+0x514>)
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800274e:	ec53 2b17 	vmov	r2, r3, d7
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002754:	f005 fcec 	bl	8008130 <iprintf>
          printf("%f, ", fd2_ref_SRAM[i_output]);
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_GPIO_EXTI_Callback+0x518>)
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800276a:	ec53 2b17 	vmov	r2, r3, d7
 800276e:	4811      	ldr	r0, [pc, #68]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002770:	f005 fcde 	bl	8008130 <iprintf>
          printf("%f, ", fd3_ref_SRAM[i_output]);
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <HAL_GPIO_EXTI_Callback+0x51c>)
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002786:	ec53 2b17 	vmov	r2, r3, d7
 800278a:	480a      	ldr	r0, [pc, #40]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800278c:	f005 fcd0 	bl	8008130 <iprintf>
          printf("%f, ", fd4_ref_SRAM[i_output]);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a23      	ldr	r2, [pc, #140]	; (8002824 <HAL_GPIO_EXTI_Callback+0x520>)
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027a2:	ec53 2b17 	vmov	r2, r3, d7
 80027a6:	e03f      	b.n	8002828 <HAL_GPIO_EXTI_Callback+0x524>
 80027a8:	20000394 	.word	0x20000394
 80027ac:	08009ed0 	.word	0x08009ed0
 80027b0:	20000398 	.word	0x20000398
 80027b4:	08009edc 	.word	0x08009edc
 80027b8:	20002aa8 	.word	0x20002aa8
 80027bc:	200051b8 	.word	0x200051b8
 80027c0:	200078c8 	.word	0x200078c8
 80027c4:	20009fd8 	.word	0x20009fd8
 80027c8:	2000c6e8 	.word	0x2000c6e8
 80027cc:	2000edf8 	.word	0x2000edf8
 80027d0:	20011508 	.word	0x20011508
 80027d4:	20013c18 	.word	0x20013c18
 80027d8:	20016328 	.word	0x20016328
 80027dc:	20018a38 	.word	0x20018a38
 80027e0:	2001b148 	.word	0x2001b148
 80027e4:	2001d858 	.word	0x2001d858
 80027e8:	2001ff68 	.word	0x2001ff68
 80027ec:	20022678 	.word	0x20022678
 80027f0:	20024d88 	.word	0x20024d88
 80027f4:	20027498 	.word	0x20027498
 80027f8:	20029ba8 	.word	0x20029ba8
 80027fc:	2002c2b8 	.word	0x2002c2b8
 8002800:	2002e9c8 	.word	0x2002e9c8
 8002804:	200310d8 	.word	0x200310d8
 8002808:	200337e8 	.word	0x200337e8
 800280c:	20034b70 	.word	0x20034b70
 8002810:	20035ef8 	.word	0x20035ef8
 8002814:	20037280 	.word	0x20037280
 8002818:	20038608 	.word	0x20038608
 800281c:	2003ad18 	.word	0x2003ad18
 8002820:	2003d428 	.word	0x2003d428
 8002824:	2003fb38 	.word	0x2003fb38
 8002828:	485f      	ldr	r0, [pc, #380]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 800282a:	f005 fc81 	bl	8008130 <iprintf>
          
          printf("%f, ", Ki_df_integral1_SRAM[i_output]);
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5f      	ldr	r2, [pc, #380]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002840:	ec53 2b17 	vmov	r2, r3, d7
 8002844:	4858      	ldr	r0, [pc, #352]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002846:	f005 fc73 	bl	8008130 <iprintf>
          printf("%f, ", Ki_df_integral2_SRAM[i_output]);
 800284a:	4b58      	ldr	r3, [pc, #352]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800285c:	ec53 2b17 	vmov	r2, r3, d7
 8002860:	4851      	ldr	r0, [pc, #324]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002862:	f005 fc65 	bl	8008130 <iprintf>
          printf("%f, ", Ki_df_integral3_SRAM[i_output]);
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002878:	ec53 2b17 	vmov	r2, r3, d7
 800287c:	484a      	ldr	r0, [pc, #296]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 800287e:	f005 fc57 	bl	8008130 <iprintf>
          printf("%f, ", Ki_df_integral4_SRAM[i_output]);
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_EXTI_Callback+0x6b8>)
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002894:	ec53 2b17 	vmov	r2, r3, d7
 8002898:	4843      	ldr	r0, [pc, #268]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 800289a:	f005 fc49 	bl	8008130 <iprintf>
          
          printf("%f, ", tau_dob1_SRAM[i_output]);
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x6bc>)
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028b0:	ec53 2b17 	vmov	r2, r3, d7
 80028b4:	483c      	ldr	r0, [pc, #240]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 80028b6:	f005 fc3b 	bl	8008130 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 80028ba:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a41      	ldr	r2, [pc, #260]	; (80029c4 <HAL_GPIO_EXTI_Callback+0x6c0>)
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028cc:	ec53 2b17 	vmov	r2, r3, d7
 80028d0:	4835      	ldr	r0, [pc, #212]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 80028d2:	f005 fc2d 	bl	8008130 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 80028d6:	4b35      	ldr	r3, [pc, #212]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x6c4>)
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028e8:	ec53 2b17 	vmov	r2, r3, d7
 80028ec:	482e      	ldr	r0, [pc, #184]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 80028ee:	f005 fc1f 	bl	8008130 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a35      	ldr	r2, [pc, #212]	; (80029cc <HAL_GPIO_EXTI_Callback+0x6c8>)
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002904:	ec53 2b17 	vmov	r2, r3, d7
 8002908:	4827      	ldr	r0, [pc, #156]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 800290a:	f005 fc11 	bl	8008130 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <HAL_GPIO_EXTI_Callback+0x6cc>)
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002920:	ec53 2b17 	vmov	r2, r3, d7
 8002924:	4820      	ldr	r0, [pc, #128]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002926:	f005 fc03 	bl	8008130 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x6d0>)
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800293c:	ec53 2b17 	vmov	r2, r3, d7
 8002940:	4819      	ldr	r0, [pc, #100]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002942:	f005 fbf5 	bl	8008130 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x6d4>)
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002958:	ec53 2b17 	vmov	r2, r3, d7
 800295c:	4812      	ldr	r0, [pc, #72]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 800295e:	f005 fbe7 	bl	8008130 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_GPIO_EXTI_Callback+0x6d8>)
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002974:	ec53 2b17 	vmov	r2, r3, d7
 8002978:	480b      	ldr	r0, [pc, #44]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 800297a:	f005 fbd9 	bl	8008130 <iprintf>

          printf("\r\n");
 800297e:	4818      	ldr	r0, [pc, #96]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x6dc>)
 8002980:	f005 fc4a 	bl	8008218 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002996:	4293      	cmp	r3, r2
 8002998:	f77f ad80 	ble.w	800249c <HAL_GPIO_EXTI_Callback+0x198>
        }
        break;
 800299c:	bf00      	nop
    }


	}
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	08009edc 	.word	0x08009edc
 80029ac:	20000394 	.word	0x20000394
 80029b0:	20042248 	.word	0x20042248
 80029b4:	20044958 	.word	0x20044958
 80029b8:	20047068 	.word	0x20047068
 80029bc:	20049778 	.word	0x20049778
 80029c0:	2004be88 	.word	0x2004be88
 80029c4:	2004e598 	.word	0x2004e598
 80029c8:	20050ca8 	.word	0x20050ca8
 80029cc:	200533b8 	.word	0x200533b8
 80029d0:	20055ac8 	.word	0x20055ac8
 80029d4:	200581d8 	.word	0x200581d8
 80029d8:	2005a8e8 	.word	0x2005a8e8
 80029dc:	2005cff8 	.word	0x2005cff8
 80029e0:	08009ed8 	.word	0x08009ed8

080029e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029e8:	f001 f89d 	bl	8003b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ec:	f000 f86c 	bl	8002ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f0:	f000 fbfc 	bl	80031ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80029f4:	f000 fb9c 	bl	8003130 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80029f8:	f000 fbca 	bl	8003190 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80029fc:	f000 f954 	bl	8002ca8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002a00:	f000 f8f8 	bl	8002bf4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002a04:	f000 f99e 	bl	8002d44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a08:	f000 f9f2 	bl	8002df0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002a0c:	f000 fac8 	bl	8002fa0 <MX_TIM8_Init>
  MX_TIM5_Init();
 8002a10:	f000 fa44 	bl	8002e9c <MX_TIM5_Init>
  MX_TIM9_Init();
 8002a14:	f000 fb1e 	bl	8003054 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002a18:	481e      	ldr	r0, [pc, #120]	; (8002a94 <main+0xb0>)
 8002a1a:	f002 fe91 	bl	8005740 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002a1e:	213c      	movs	r1, #60	; 0x3c
 8002a20:	481d      	ldr	r0, [pc, #116]	; (8002a98 <main+0xb4>)
 8002a22:	f002 ffc3 	bl	80059ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002a26:	213c      	movs	r1, #60	; 0x3c
 8002a28:	481c      	ldr	r0, [pc, #112]	; (8002a9c <main+0xb8>)
 8002a2a:	f002 ffbf 	bl	80059ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002a2e:	213c      	movs	r1, #60	; 0x3c
 8002a30:	481b      	ldr	r0, [pc, #108]	; (8002aa0 <main+0xbc>)
 8002a32:	f002 ffbb 	bl	80059ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002a36:	213c      	movs	r1, #60	; 0x3c
 8002a38:	481a      	ldr	r0, [pc, #104]	; (8002aa4 <main+0xc0>)
 8002a3a:	f002 ffb7 	bl	80059ac <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <main+0xc4>)
 8002a40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <main+0xc8>)
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <main+0xc4>)
 8002a4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <main+0xcc>)
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <main+0xc4>)
 8002a54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <main+0xd0>)
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <main+0xc4>)
 8002a5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <main+0xd4>)
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002a66:	2100      	movs	r1, #0
 8002a68:	4814      	ldr	r0, [pc, #80]	; (8002abc <main+0xd8>)
 8002a6a:	f002 fec9 	bl	8005800 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002a6e:	210c      	movs	r1, #12
 8002a70:	4812      	ldr	r0, [pc, #72]	; (8002abc <main+0xd8>)
 8002a72:	f002 fec5 	bl	8005800 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002a76:	2100      	movs	r1, #0
 8002a78:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <main+0xdc>)
 8002a7a:	f002 fec1 	bl	8005800 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002a7e:	2104      	movs	r1, #4
 8002a80:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <main+0xdc>)
 8002a82:	f002 febd 	bl	8005800 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8002a86:	2201      	movs	r2, #1
 8002a88:	2101      	movs	r1, #1
 8002a8a:	480e      	ldr	r0, [pc, #56]	; (8002ac4 <main+0xe0>)
 8002a8c:	f001 fb86 	bl	800419c <HAL_GPIO_WritePin>
//  printf("\r\n initialized Success!!\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <main+0xac>
 8002a92:	bf00      	nop
 8002a94:	2005fd18 	.word	0x2005fd18
 8002a98:	2005fc98 	.word	0x2005fc98
 8002a9c:	2005fc58 	.word	0x2005fc58
 8002aa0:	2005f754 	.word	0x2005f754
 8002aa4:	2005f714 	.word	0x2005f714
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	40010400 	.word	0x40010400
 8002abc:	2005fc18 	.word	0x2005fc18
 8002ac0:	2005fcd8 	.word	0x2005fcd8
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0b8      	sub	sp, #224	; 0xe0
 8002acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ace:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ad2:	2234      	movs	r2, #52	; 0x34
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 fee8 	bl	80078ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002adc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	2290      	movs	r2, #144	; 0x90
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fed9 	bl	80078ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002afa:	f001 fcc9 	bl	8004490 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <SystemClock_Config+0x120>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <SystemClock_Config+0x120>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <SystemClock_Config+0x120>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b16:	4b35      	ldr	r3, [pc, #212]	; (8002bec <SystemClock_Config+0x124>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b1e:	4a33      	ldr	r2, [pc, #204]	; (8002bec <SystemClock_Config+0x124>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <SystemClock_Config+0x124>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b40:	2302      	movs	r3, #2
 8002b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002b54:	2360      	movs	r3, #96	; 0x60
 8002b56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b60:	2304      	movs	r3, #4
 8002b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fcf0 	bl	8004550 <HAL_RCC_OscConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002b76:	f000 fc43 	bl	8003400 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b7a:	f001 fc99 	bl	80044b0 <HAL_PWREx_EnableOverDrive>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b84:	f000 fc3c 	bl	8003400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b88:	230f      	movs	r3, #15
 8002b8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ba8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bac:	2103      	movs	r1, #3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 ff7c 	bl	8004aac <HAL_RCC_ClockConfig>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002bba:	f000 fc21 	bl	8003400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <SystemClock_Config+0x128>)
 8002bc0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 f963 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8002bdc:	f000 fc10 	bl	8003400 <Error_Handler>
  }
}
 8002be0:	bf00      	nop
 8002be2:	37e0      	adds	r7, #224	; 0xe0
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	00200100 	.word	0x00200100

08002bf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 fe52 	bl	80078ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	463b      	mov	r3, r7
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c14:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <MX_TIM1_Init+0xb0>)
 8002c16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c46:	2301      	movs	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c56:	2301      	movs	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	4619      	mov	r1, r3
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c6a:	f002 fe0d 	bl	8005888 <HAL_TIM_Encoder_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002c74:	f000 fbc4 	bl	8003400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c84:	463b      	mov	r3, r7
 8002c86:	4619      	mov	r1, r3
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_TIM1_Init+0xac>)
 8002c8a:	f003 fd9d 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002c94:	f000 fbb4 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	3730      	adds	r7, #48	; 0x30
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2005fc98 	.word	0x2005fc98
 8002ca4:	40010000 	.word	0x40010000

08002ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ccc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002cd0:	225f      	movs	r2, #95	; 0x5f
 8002cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cee:	4814      	ldr	r0, [pc, #80]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002cf0:	f002 fcfa 	bl	80056e8 <HAL_TIM_Base_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cfa:	f000 fb81 	bl	8003400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480d      	ldr	r0, [pc, #52]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002d0c:	f003 f8bc 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d16:	f000 fb73 	bl	8003400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <MX_TIM2_Init+0x98>)
 8002d28:	f003 fd4e 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d32:	f000 fb65 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2005fd18 	.word	0x2005fd18

08002d44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 fdaa 	bl	80078ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d58:	463b      	mov	r3, r7
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <MX_TIM3_Init+0xa8>)
 8002d66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002da0:	2301      	movs	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	4619      	mov	r1, r3
 8002db2:	480d      	ldr	r0, [pc, #52]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002db4:	f002 fd68 	bl	8005888 <HAL_TIM_Encoder_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002dbe:	f000 fb1f 	bl	8003400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <MX_TIM3_Init+0xa4>)
 8002dd0:	f003 fcfa 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002dda:	f000 fb11 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	3730      	adds	r7, #48	; 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2005fc58 	.word	0x2005fc58
 8002dec:	40000400 	.word	0x40000400

08002df0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 fd54 	bl	80078ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e04:	463b      	mov	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <MX_TIM4_Init+0xa8>)
 8002e12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e34:	2303      	movs	r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	480d      	ldr	r0, [pc, #52]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e60:	f002 fd12 	bl	8005888 <HAL_TIM_Encoder_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002e6a:	f000 fac9 	bl	8003400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e76:	463b      	mov	r3, r7
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4806      	ldr	r0, [pc, #24]	; (8002e94 <MX_TIM4_Init+0xa4>)
 8002e7c:	f003 fca4 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002e86:	f000 fabb 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	3730      	adds	r7, #48	; 0x30
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2005f754 	.word	0x2005f754
 8002e98:	40000800 	.word	0x40000800

08002e9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ed0:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <MX_TIM5_Init+0x100>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40-1;
 8002ed4:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ed6:	2227      	movs	r2, #39	; 0x27
 8002ed8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ef4:	4828      	ldr	r0, [pc, #160]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ef6:	f002 fbf7 	bl	80056e8 <HAL_TIM_Base_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002f00:	f000 fa7e 	bl	8003400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4821      	ldr	r0, [pc, #132]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f12:	f002 ffb9 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002f1c:	f000 fa70 	bl	8003400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002f20:	481d      	ldr	r0, [pc, #116]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f22:	f002 fc37 	bl	8005794 <HAL_TIM_PWM_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002f2c:	f000 fa68 	bl	8003400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4816      	ldr	r0, [pc, #88]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f40:	f003 fc42 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002f4a:	f000 fa59 	bl	8003400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f4e:	2360      	movs	r3, #96	; 0x60
 8002f50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	4619      	mov	r1, r3
 8002f64:	480c      	ldr	r0, [pc, #48]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f66:	f002 fe77 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002f70:	f000 fa46 	bl	8003400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	220c      	movs	r2, #12
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4807      	ldr	r0, [pc, #28]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f7c:	f002 fe6c 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002f86:	f000 fa3b 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002f8a:	4803      	ldr	r0, [pc, #12]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f8c:	f000 fbaa 	bl	80036e4 <HAL_TIM_MspPostInit>

}
 8002f90:	bf00      	nop
 8002f92:	3738      	adds	r7, #56	; 0x38
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2005fc18 	.word	0x2005fc18
 8002f9c:	40000c00 	.word	0x40000c00

08002fa0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fa6:	f107 030c 	add.w	r3, r7, #12
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fc7c 	bl	80078ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <MX_TIM8_Init+0xac>)
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <MX_TIM8_Init+0xb0>)
 8002fc2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <MX_TIM8_Init+0xac>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <MX_TIM8_Init+0xac>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <MX_TIM8_Init+0xac>)
 8002fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <MX_TIM8_Init+0xac>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <MX_TIM8_Init+0xac>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <MX_TIM8_Init+0xac>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fea:	2303      	movs	r3, #3
 8002fec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003002:	2301      	movs	r3, #1
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003006:	2300      	movs	r3, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	4619      	mov	r1, r3
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <MX_TIM8_Init+0xac>)
 8003016:	f002 fc37 	bl	8005888 <HAL_TIM_Encoder_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003020:	f000 f9ee 	bl	8003400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <MX_TIM8_Init+0xac>)
 8003036:	f003 fbc7 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003040:	f000 f9de 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3730      	adds	r7, #48	; 0x30
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	2005f714 	.word	0x2005f714
 8003050:	40010400 	.word	0x40010400

08003054 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305a:	f107 0320 	add.w	r3, r7, #32
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	615a      	str	r2, [r3, #20]
 8003078:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800307a:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <MX_TIM9_Init+0xd4>)
 800307c:	4a2b      	ldr	r2, [pc, #172]	; (800312c <MX_TIM9_Init+0xd8>)
 800307e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 40-1;
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <MX_TIM9_Init+0xd4>)
 8003082:	2227      	movs	r2, #39	; 0x27
 8003084:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003086:	4b28      	ldr	r3, [pc, #160]	; (8003128 <MX_TIM9_Init+0xd4>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800308c:	4b26      	ldr	r3, [pc, #152]	; (8003128 <MX_TIM9_Init+0xd4>)
 800308e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003092:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <MX_TIM9_Init+0xd4>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <MX_TIM9_Init+0xd4>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80030a0:	4821      	ldr	r0, [pc, #132]	; (8003128 <MX_TIM9_Init+0xd4>)
 80030a2:	f002 fb21 	bl	80056e8 <HAL_TIM_Base_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80030ac:	f000 f9a8 	bl	8003400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80030b6:	f107 0320 	add.w	r3, r7, #32
 80030ba:	4619      	mov	r1, r3
 80030bc:	481a      	ldr	r0, [pc, #104]	; (8003128 <MX_TIM9_Init+0xd4>)
 80030be:	f002 fee3 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80030c8:	f000 f99a 	bl	8003400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80030cc:	4816      	ldr	r0, [pc, #88]	; (8003128 <MX_TIM9_Init+0xd4>)
 80030ce:	f002 fb61 	bl	8005794 <HAL_TIM_PWM_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80030d8:	f000 f992 	bl	8003400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030dc:	2360      	movs	r3, #96	; 0x60
 80030de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	2200      	movs	r2, #0
 80030f0:	4619      	mov	r1, r3
 80030f2:	480d      	ldr	r0, [pc, #52]	; (8003128 <MX_TIM9_Init+0xd4>)
 80030f4:	f002 fdb0 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80030fe:	f000 f97f 	bl	8003400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2204      	movs	r2, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4807      	ldr	r0, [pc, #28]	; (8003128 <MX_TIM9_Init+0xd4>)
 800310a:	f002 fda5 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003114:	f000 f974 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <MX_TIM9_Init+0xd4>)
 800311a:	f000 fae3 	bl	80036e4 <HAL_TIM_MspPostInit>

}
 800311e:	bf00      	nop
 8003120:	3730      	adds	r7, #48	; 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2005fcd8 	.word	0x2005fcd8
 800312c:	40014000 	.word	0x40014000

08003130 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <MX_USART3_UART_Init+0x5c>)
 8003138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_USART3_UART_Init+0x58>)
 800313c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003142:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <MX_USART3_UART_Init+0x58>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003156:	2208      	movs	r2, #8
 8003158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <MX_USART3_UART_Init+0x58>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003162:	2200      	movs	r2, #0
 8003164:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003168:	2200      	movs	r2, #0
 800316a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <MX_USART3_UART_Init+0x58>)
 800316e:	2200      	movs	r2, #0
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_USART3_UART_Init+0x58>)
 8003174:	f003 fbd4 	bl	8006920 <HAL_UART_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800317e:	f000 f93f 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2005f794 	.word	0x2005f794
 800318c:	40004800 	.word	0x40004800

08003190 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800319a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800319e:	2206      	movs	r2, #6
 80031a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031a4:	2202      	movs	r2, #2
 80031a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031b0:	2202      	movs	r2, #2
 80031b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031bc:	2200      	movs	r2, #0
 80031be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031d2:	4805      	ldr	r0, [pc, #20]	; (80031e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d4:	f001 f814 	bl	8004200 <HAL_PCD_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031de:	f000 f90f 	bl	8003400 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	2005f814 	.word	0x2005f814

080031ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003202:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003208:	f043 0310 	orr.w	r3, r3, #16
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a6b      	ldr	r2, [pc, #428]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b69      	ldr	r3, [pc, #420]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	4b66      	ldr	r3, [pc, #408]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a65      	ldr	r2, [pc, #404]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	4b60      	ldr	r3, [pc, #384]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	4b5a      	ldr	r3, [pc, #360]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a59      	ldr	r2, [pc, #356]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003292:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a53      	ldr	r2, [pc, #332]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 8003298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <MX_GPIO_Init+0x1f8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80032b0:	484d      	ldr	r0, [pc, #308]	; (80033e8 <MX_GPIO_Init+0x1fc>)
 80032b2:	f000 ff73 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2140      	movs	r1, #64	; 0x40
 80032ba:	484c      	ldr	r0, [pc, #304]	; (80033ec <MX_GPIO_Init+0x200>)
 80032bc:	f000 ff6e 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80032c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <MX_GPIO_Init+0x204>)
 80032c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	4619      	mov	r1, r3
 80032d4:	4847      	ldr	r0, [pc, #284]	; (80033f4 <MX_GPIO_Init+0x208>)
 80032d6:	f000 fdb7 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80032da:	2332      	movs	r3, #50	; 0x32
 80032dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e6:	2303      	movs	r3, #3
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032ea:	230b      	movs	r3, #11
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	4619      	mov	r1, r3
 80032f4:	483f      	ldr	r0, [pc, #252]	; (80033f4 <MX_GPIO_Init+0x208>)
 80032f6:	f000 fda7 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032fa:	2386      	movs	r3, #134	; 0x86
 80032fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800330a:	230b      	movs	r3, #11
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4619      	mov	r1, r3
 8003314:	4838      	ldr	r0, [pc, #224]	; (80033f8 <MX_GPIO_Init+0x20c>)
 8003316:	f000 fd97 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800331a:	f244 0381 	movw	r3, #16513	; 0x4081
 800331e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	2301      	movs	r3, #1
 8003322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	4619      	mov	r1, r3
 8003332:	482d      	ldr	r0, [pc, #180]	; (80033e8 <MX_GPIO_Init+0x1fc>)
 8003334:	f000 fd88 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800333c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800334a:	230b      	movs	r3, #11
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	4824      	ldr	r0, [pc, #144]	; (80033e8 <MX_GPIO_Init+0x1fc>)
 8003356:	f000 fd77 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	2301      	movs	r3, #1
 8003360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	481e      	ldr	r0, [pc, #120]	; (80033ec <MX_GPIO_Init+0x200>)
 8003372:	f000 fd69 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4619      	mov	r1, r3
 8003388:	4818      	ldr	r0, [pc, #96]	; (80033ec <MX_GPIO_Init+0x200>)
 800338a:	f000 fd5d 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800338e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <MX_GPIO_Init+0x210>)
 8003396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	4619      	mov	r1, r3
 80033a2:	4814      	ldr	r0, [pc, #80]	; (80033f4 <MX_GPIO_Init+0x208>)
 80033a4:	f000 fd50 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80033a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80033ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033ba:	230b      	movs	r3, #11
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	4809      	ldr	r0, [pc, #36]	; (80033ec <MX_GPIO_Init+0x200>)
 80033c6:	f000 fd3f 	bl	8003e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	2017      	movs	r0, #23
 80033d0:	f000 fd03 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033d4:	2017      	movs	r0, #23
 80033d6:	f000 fd1c 	bl	8003e12 <HAL_NVIC_EnableIRQ>

}
 80033da:	bf00      	nop
 80033dc:	3730      	adds	r7, #48	; 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40021800 	.word	0x40021800
 80033f0:	10110000 	.word	0x10110000
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	10310000 	.word	0x10310000

08003400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_MspInit+0x44>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_MspInit+0x44>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <HAL_MspInit+0x44>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_MspInit+0x44>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_MspInit+0x44>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_MspInit+0x44>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b090      	sub	sp, #64	; 0x40
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d129      	bne.n	80034ce <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800347a:	4b6b      	ldr	r3, [pc, #428]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6453      	str	r3, [r2, #68]	; 0x44
 8003486:	4b68      	ldr	r3, [pc, #416]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003492:	4b65      	ldr	r3, [pc, #404]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a64      	ldr	r2, [pc, #400]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b62      	ldr	r3, [pc, #392]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80034aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034bc:	2301      	movs	r3, #1
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	4859      	ldr	r0, [pc, #356]	; (800362c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80034c8:	f000 fcbe 	bl	8003e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80034cc:	e0a5      	b.n	800361a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a57      	ldr	r2, [pc, #348]	; (8003630 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d144      	bne.n	8003562 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	6413      	str	r3, [r2, #64]	; 0x40
 80034e4:	4b50      	ldr	r3, [pc, #320]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f0:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6313      	str	r3, [r2, #48]	; 0x30
 80034fc:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003508:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	6313      	str	r3, [r2, #48]	; 0x30
 8003514:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003530:	2302      	movs	r3, #2
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003538:	4619      	mov	r1, r3
 800353a:	483e      	ldr	r0, [pc, #248]	; (8003634 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800353c:	f000 fc84 	bl	8003e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003540:	2320      	movs	r3, #32
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003550:	2302      	movs	r3, #2
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003558:	4619      	mov	r1, r3
 800355a:	4837      	ldr	r0, [pc, #220]	; (8003638 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800355c:	f000 fc74 	bl	8003e48 <HAL_GPIO_Init>
}
 8003560:	e05b      	b.n	800361a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a35      	ldr	r2, [pc, #212]	; (800363c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d129      	bne.n	80035c0 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800356c:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a2d      	ldr	r2, [pc, #180]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800358a:	f043 0308 	orr.w	r3, r3, #8
 800358e:	6313      	str	r3, [r2, #48]	; 0x30
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800359c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035ae:	2302      	movs	r3, #2
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035b6:	4619      	mov	r1, r3
 80035b8:	4821      	ldr	r0, [pc, #132]	; (8003640 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80035ba:	f000 fc45 	bl	8003e48 <HAL_GPIO_Init>
}
 80035be:	e02c      	b.n	800361a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d127      	bne.n	800361a <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a16      	ldr	r2, [pc, #88]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80035e8:	f043 0304 	orr.w	r3, r3, #4
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035fa:	23c0      	movs	r3, #192	; 0xc0
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800360a:	2303      	movs	r3, #3
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003616:	f000 fc17 	bl	8003e48 <HAL_GPIO_Init>
}
 800361a:	bf00      	nop
 800361c:	3740      	adds	r7, #64	; 0x40
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	40023800 	.word	0x40023800
 800362c:	40021000 	.word	0x40021000
 8003630:	40000400 	.word	0x40000400
 8003634:	40020000 	.word	0x40020000
 8003638:	40020400 	.word	0x40020400
 800363c:	40000800 	.word	0x40000800
 8003640:	40020c00 	.word	0x40020c00
 8003644:	40010400 	.word	0x40010400
 8003648:	40020800 	.word	0x40020800

0800364c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d114      	bne.n	8003688 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	201c      	movs	r0, #28
 800367c:	f000 fbad 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003680:	201c      	movs	r0, #28
 8003682:	f000 fbc6 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003686:	e022      	b.n	80036ce <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_TIM_Base_MspInit+0x90>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10c      	bne.n	80036ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
}
 80036aa:	e010      	b.n	80036ce <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_TIM_Base_MspInit+0x94>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10b      	bne.n	80036ce <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_TIM_Base_MspInit+0x8c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000

080036e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <HAL_TIM_MspPostInit+0xa8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d11c      	bne.n	8003740 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <HAL_TIM_MspPostInit+0xac>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <HAL_TIM_MspPostInit+0xac>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <HAL_TIM_MspPostInit+0xac>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800371e:	2309      	movs	r3, #9
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800372e:	2302      	movs	r3, #2
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	4816      	ldr	r0, [pc, #88]	; (8003794 <HAL_TIM_MspPostInit+0xb0>)
 800373a:	f000 fb85 	bl	8003e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800373e:	e020      	b.n	8003782 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <HAL_TIM_MspPostInit+0xb4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11b      	bne.n	8003782 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_TIM_MspPostInit+0xac>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_TIM_MspPostInit+0xac>)
 8003750:	f043 0310 	orr.w	r3, r3, #16
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_TIM_MspPostInit+0xac>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003762:	2360      	movs	r3, #96	; 0x60
 8003764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003772:	2303      	movs	r3, #3
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	4807      	ldr	r0, [pc, #28]	; (800379c <HAL_TIM_MspPostInit+0xb8>)
 800377e:	f000 fb63 	bl	8003e48 <HAL_GPIO_Init>
}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40023800 	.word	0x40023800
 8003794:	40020000 	.word	0x40020000
 8003798:	40014000 	.word	0x40014000
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_UART_MspInit+0x7c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d128      	bne.n	8003814 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_UART_MspInit+0x80>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_UART_MspInit+0x80>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_UART_MspInit+0x80>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_UART_MspInit+0x80>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_UART_MspInit+0x80>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_UART_MspInit+0x80>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80037f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003804:	2307      	movs	r3, #7
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	4619      	mov	r1, r3
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <HAL_UART_MspInit+0x84>)
 8003810:	f000 fb1a 	bl	8003e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003814:	bf00      	nop
 8003816:	3728      	adds	r7, #40	; 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40004800 	.word	0x40004800
 8003820:	40023800 	.word	0x40023800
 8003824:	40020c00 	.word	0x40020c00

08003828 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003848:	d141      	bne.n	80038ce <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003862:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003874:	230a      	movs	r3, #10
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4619      	mov	r1, r3
 800387e:	4817      	ldr	r0, [pc, #92]	; (80038dc <HAL_PCD_MspInit+0xb4>)
 8003880:	f000 fae2 	bl	8003e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	4619      	mov	r1, r3
 8003898:	4810      	ldr	r0, [pc, #64]	; (80038dc <HAL_PCD_MspInit+0xb4>)
 800389a:	f000 fad5 	bl	8003e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 80038a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a8:	6353      	str	r3, [r2, #52]	; 0x34
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 80038bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c0:	6453      	str	r3, [r2, #68]	; 0x44
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_PCD_MspInit+0xb0>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <HardFault_Handler+0x4>

080038f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <MemManage_Handler+0x4>

080038fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038fe:	e7fe      	b.n	80038fe <BusFault_Handler+0x4>

08003900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003904:	e7fe      	b.n	8003904 <UsageFault_Handler+0x4>

08003906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003934:	f000 f934 	bl	8003ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}

0800393c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003940:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003944:	f000 fc44 	bl	80041d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}

0800394c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003950:	4802      	ldr	r0, [pc, #8]	; (800395c <TIM2_IRQHandler+0x10>)
 8003952:	f002 f862 	bl	8005a1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	2005fd18 	.word	0x2005fd18

08003960 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e00a      	b.n	8003988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003972:	f3af 8000 	nop.w
 8003976:	4601      	mov	r1, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60ba      	str	r2, [r7, #8]
 800397e:	b2ca      	uxtb	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbf0      	blt.n	8003972 <_read+0x12>
	}

return len;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e009      	b.n	80039c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	60ba      	str	r2, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fe1b 	bl	80005f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	dbf1      	blt.n	80039ac <_write+0x12>
	}
	return len;
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_close>:

int _close(int file)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
	return -1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fa:	605a      	str	r2, [r3, #4]
	return 0;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_isatty>:

int _isatty(int file)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
	return 1;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <_sbrk+0x5c>)
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <_sbrk+0x60>)
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <_sbrk+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <_sbrk+0x64>)
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <_sbrk+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d207      	bcs.n	8003a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a6c:	f003 fef4 	bl	8007858 <__errno>
 8003a70:	4602      	mov	r2, r0
 8003a72:	230c      	movs	r3, #12
 8003a74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	e009      	b.n	8003a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <_sbrk+0x64>)
 8003a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20080000 	.word	0x20080000
 8003a9c:	00000400 	.word	0x00000400
 8003aa0:	2005f708 	.word	0x2005f708
 8003aa4:	2005fd68 	.word	0x2005fd68

08003aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <SystemInit+0x28>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <SystemInit+0x28>)
 8003ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SystemInit+0x28>)
 8003abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ada:	e003      	b.n	8003ae4 <LoopCopyDataInit>

08003adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ae2:	3104      	adds	r1, #4

08003ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ae4:	480b      	ldr	r0, [pc, #44]	; (8003b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003aec:	d3f6      	bcc.n	8003adc <CopyDataInit>
  ldr  r2, =_sbss
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003af0:	e002      	b.n	8003af8 <LoopFillZerobss>

08003af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003af4:	f842 3b04 	str.w	r3, [r2], #4

08003af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003afc:	d3f9      	bcc.n	8003af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003afe:	f7ff ffd3 	bl	8003aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b02:	f003 feaf 	bl	8007864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b06:	f7fe ff6d 	bl	80029e4 <main>
  bx  lr    
 8003b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003b10:	0800a1d0 	.word	0x0800a1d0
  ldr  r0, =_sdata
 8003b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b18:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003b1c:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8003b20:	2005fd64 	.word	0x2005fd64

08003b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC_IRQHandler>

08003b26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b2a:	2003      	movs	r0, #3
 8003b2c:	f000 f94a 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b30:	2000      	movs	r0, #0
 8003b32:	f000 f805 	bl	8003b40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b36:	f7ff fc6b 	bl	8003410 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_InitTick+0x54>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_InitTick+0x58>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4619      	mov	r1, r3
 8003b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f965 	bl	8003e2e <HAL_SYSTICK_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00e      	b.n	8003b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d80a      	bhi.n	8003b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b74:	2200      	movs	r2, #0
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f000 f92d 	bl	8003dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b80:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <HAL_InitTick+0x5c>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000018 	.word	0x20000018
 8003b98:	20000020 	.word	0x20000020
 8003b9c:	2000001c 	.word	0x2000001c

08003ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_IncTick+0x20>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_IncTick+0x24>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_IncTick+0x24>)
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000020 	.word	0x20000020
 8003bc4:	2005fd5c 	.word	0x2005fd5c

08003bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return uwTick;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_GetTick+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2005fd5c 	.word	0x2005fd5c

08003be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003be8:	f7ff ffee 	bl	8003bc8 <HAL_GetTick>
 8003bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d005      	beq.n	8003c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_Delay+0x40>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c06:	bf00      	nop
 8003c08:	f7ff ffde 	bl	8003bc8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d8f7      	bhi.n	8003c08 <HAL_Delay+0x28>
  {
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000020 	.word	0x20000020

08003c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <__NVIC_SetPriorityGrouping+0x40>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <__NVIC_SetPriorityGrouping+0x40>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00
 8003c68:	05fa0000 	.word	0x05fa0000

08003c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <__NVIC_GetPriorityGrouping+0x18>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0307 	and.w	r3, r3, #7
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db0b      	blt.n	8003cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4907      	ldr	r1, [pc, #28]	; (8003cc0 <__NVIC_EnableIRQ+0x38>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db0a      	blt.n	8003cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	490c      	ldr	r1, [pc, #48]	; (8003d10 <__NVIC_SetPriority+0x4c>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cec:	e00a      	b.n	8003d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4908      	ldr	r1, [pc, #32]	; (8003d14 <__NVIC_SetPriority+0x50>)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	440b      	add	r3, r1
 8003d02:	761a      	strb	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f1c3 0307 	rsb	r3, r3, #7
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf28      	it	cs
 8003d36:	2304      	movcs	r3, #4
 8003d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <NVIC_EncodePriority+0x30>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3b03      	subs	r3, #3
 8003d46:	e000      	b.n	8003d4a <NVIC_EncodePriority+0x32>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43d9      	mvns	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	4313      	orrs	r3, r2
         );
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f7ff ff8e 	bl	8003cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff29 	bl	8003c24 <__NVIC_SetPriorityGrouping>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dec:	f7ff ff3e 	bl	8003c6c <__NVIC_GetPriorityGrouping>
 8003df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff8e 	bl	8003d18 <NVIC_EncodePriority>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff5d 	bl	8003cc4 <__NVIC_SetPriority>
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff31 	bl	8003c88 <__NVIC_EnableIRQ>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffa2 	bl	8003d80 <SysTick_Config>
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e175      	b.n	8004154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 8164 	bne.w	800414e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_GPIO_Init+0x5e>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d007      	beq.n	8003ea6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e9a:	2b11      	cmp	r3, #17
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b12      	cmp	r3, #18
 8003ea4:	d130      	bne.n	8003f08 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003edc:	2201      	movs	r2, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 0201 	and.w	r2, r3, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	2203      	movs	r2, #3
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x100>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b12      	cmp	r3, #18
 8003f46:	d123      	bne.n	8003f90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	08da      	lsrs	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3208      	adds	r2, #8
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80be 	beq.w	800414e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	4b65      	ldr	r3, [pc, #404]	; (8004168 <HAL_GPIO_Init+0x320>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	4a64      	ldr	r2, [pc, #400]	; (8004168 <HAL_GPIO_Init+0x320>)
 8003fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fde:	4b62      	ldr	r3, [pc, #392]	; (8004168 <HAL_GPIO_Init+0x320>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fea:	4a60      	ldr	r2, [pc, #384]	; (800416c <HAL_GPIO_Init+0x324>)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	220f      	movs	r2, #15
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a57      	ldr	r2, [pc, #348]	; (8004170 <HAL_GPIO_Init+0x328>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d037      	beq.n	8004086 <HAL_GPIO_Init+0x23e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a56      	ldr	r2, [pc, #344]	; (8004174 <HAL_GPIO_Init+0x32c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d031      	beq.n	8004082 <HAL_GPIO_Init+0x23a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a55      	ldr	r2, [pc, #340]	; (8004178 <HAL_GPIO_Init+0x330>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <HAL_GPIO_Init+0x236>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a54      	ldr	r2, [pc, #336]	; (800417c <HAL_GPIO_Init+0x334>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d025      	beq.n	800407a <HAL_GPIO_Init+0x232>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a53      	ldr	r2, [pc, #332]	; (8004180 <HAL_GPIO_Init+0x338>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01f      	beq.n	8004076 <HAL_GPIO_Init+0x22e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_GPIO_Init+0x33c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d019      	beq.n	8004072 <HAL_GPIO_Init+0x22a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a51      	ldr	r2, [pc, #324]	; (8004188 <HAL_GPIO_Init+0x340>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_GPIO_Init+0x226>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a50      	ldr	r2, [pc, #320]	; (800418c <HAL_GPIO_Init+0x344>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00d      	beq.n	800406a <HAL_GPIO_Init+0x222>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <HAL_GPIO_Init+0x348>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <HAL_GPIO_Init+0x21e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <HAL_GPIO_Init+0x34c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <HAL_GPIO_Init+0x21a>
 800405e:	2309      	movs	r3, #9
 8004060:	e012      	b.n	8004088 <HAL_GPIO_Init+0x240>
 8004062:	230a      	movs	r3, #10
 8004064:	e010      	b.n	8004088 <HAL_GPIO_Init+0x240>
 8004066:	2308      	movs	r3, #8
 8004068:	e00e      	b.n	8004088 <HAL_GPIO_Init+0x240>
 800406a:	2307      	movs	r3, #7
 800406c:	e00c      	b.n	8004088 <HAL_GPIO_Init+0x240>
 800406e:	2306      	movs	r3, #6
 8004070:	e00a      	b.n	8004088 <HAL_GPIO_Init+0x240>
 8004072:	2305      	movs	r3, #5
 8004074:	e008      	b.n	8004088 <HAL_GPIO_Init+0x240>
 8004076:	2304      	movs	r3, #4
 8004078:	e006      	b.n	8004088 <HAL_GPIO_Init+0x240>
 800407a:	2303      	movs	r3, #3
 800407c:	e004      	b.n	8004088 <HAL_GPIO_Init+0x240>
 800407e:	2302      	movs	r3, #2
 8004080:	e002      	b.n	8004088 <HAL_GPIO_Init+0x240>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_GPIO_Init+0x240>
 8004086:	2300      	movs	r3, #0
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	f002 0203 	and.w	r2, r2, #3
 800408e:	0092      	lsls	r2, r2, #2
 8004090:	4093      	lsls	r3, r2
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004098:	4934      	ldr	r1, [pc, #208]	; (800416c <HAL_GPIO_Init+0x324>)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	3302      	adds	r3, #2
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a6:	4b3c      	ldr	r3, [pc, #240]	; (8004198 <HAL_GPIO_Init+0x350>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ca:	4a33      	ldr	r2, [pc, #204]	; (8004198 <HAL_GPIO_Init+0x350>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040d0:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_GPIO_Init+0x350>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040f4:	4a28      	ldr	r2, [pc, #160]	; (8004198 <HAL_GPIO_Init+0x350>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_GPIO_Init+0x350>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_GPIO_Init+0x350>)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004124:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_GPIO_Init+0x350>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004148:	4a13      	ldr	r2, [pc, #76]	; (8004198 <HAL_GPIO_Init+0x350>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3301      	adds	r3, #1
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	f67f ae86 	bls.w	8003e68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3724      	adds	r7, #36	; 0x24
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40023800 	.word	0x40023800
 800416c:	40013800 	.word	0x40013800
 8004170:	40020000 	.word	0x40020000
 8004174:	40020400 	.word	0x40020400
 8004178:	40020800 	.word	0x40020800
 800417c:	40020c00 	.word	0x40020c00
 8004180:	40021000 	.word	0x40021000
 8004184:	40021400 	.word	0x40021400
 8004188:	40021800 	.word	0x40021800
 800418c:	40021c00 	.word	0x40021c00
 8004190:	40022000 	.word	0x40022000
 8004194:	40022400 	.word	0x40022400
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
 80041a8:	4613      	mov	r3, r2
 80041aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041b8:	e003      	b.n	80041c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	041a      	lsls	r2, r3, #16
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041e6:	4a05      	ldr	r2, [pc, #20]	; (80041fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe f888 	bl	8002304 <HAL_GPIO_EXTI_Callback>
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40013c00 	.word	0x40013c00

08004200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	b08f      	sub	sp, #60	; 0x3c
 8004204:	af0a      	add	r7, sp, #40	; 0x28
 8004206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e116      	b.n	8004440 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fafb 	bl	8003828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f003 f8a9 	bl	80073a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	687e      	ldr	r6, [r7, #4]
 800425e:	466d      	mov	r5, sp
 8004260:	f106 0410 	add.w	r4, r6, #16
 8004264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800426c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004270:	e885 0003 	stmia.w	r5, {r0, r1}
 8004274:	1d33      	adds	r3, r6, #4
 8004276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	f003 f83d 	bl	80072f8 <USB_CoreInit>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0d7      	b.n	8004440 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f003 f897 	bl	80073ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e04a      	b.n	8004338 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	333d      	adds	r3, #61	; 0x3d
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	333c      	adds	r3, #60	; 0x3c
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	b298      	uxth	r0, r3
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3342      	adds	r3, #66	; 0x42
 80042de:	4602      	mov	r2, r0
 80042e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	333f      	adds	r3, #63	; 0x3f
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3344      	adds	r3, #68	; 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3348      	adds	r3, #72	; 0x48
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3350      	adds	r3, #80	; 0x50
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	3301      	adds	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3af      	bcc.n	80042a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	e044      	b.n	80043d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	3301      	adds	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3b5      	bcc.n	8004348 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	687e      	ldr	r6, [r7, #4]
 80043e4:	466d      	mov	r5, sp
 80043e6:	f106 0410 	add.w	r4, r6, #16
 80043ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80043fa:	1d33      	adds	r3, r6, #4
 80043fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043fe:	6838      	ldr	r0, [r7, #0]
 8004400:	f003 f80e 	bl	8007420 <USB_DevInit>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e014      	b.n	8004440 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b01      	cmp	r3, #1
 800442c:	d102      	bne.n	8004434 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f80a 	bl	8004448 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f003 f9c0 	bl	80077be <USB_DevDisconnect>

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004448 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_PCDEx_ActivateLPM+0x44>)
 8004478:	4313      	orrs	r3, r2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	10000003 	.word	0x10000003

08004490 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40007000 	.word	0x40007000

080044b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_PWREx_EnableOverDrive+0x98>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_PWREx_EnableOverDrive+0x98>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_PWREx_EnableOverDrive+0x98>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044de:	f7ff fb73 	bl	8003bc8 <HAL_GetTick>
 80044e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044e4:	e009      	b.n	80044fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044e6:	f7ff fb6f 	bl	8003bc8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f4:	d901      	bls.n	80044fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e022      	b.n	8004540 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d1ee      	bne.n	80044e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_PWREx_EnableOverDrive+0x9c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0f      	ldr	r2, [pc, #60]	; (800454c <HAL_PWREx_EnableOverDrive+0x9c>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004514:	f7ff fb58 	bl	8003bc8 <HAL_GetTick>
 8004518:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800451a:	e009      	b.n	8004530 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800451c:	f7ff fb54 	bl	8003bc8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452a:	d901      	bls.n	8004530 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e007      	b.n	8004540 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453c:	d1ee      	bne.n	800451c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	40007000 	.word	0x40007000

08004550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e29b      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8087 	beq.w	8004682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004574:	4b96      	ldr	r3, [pc, #600]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b04      	cmp	r3, #4
 800457e:	d00c      	beq.n	800459a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004580:	4b93      	ldr	r3, [pc, #588]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d112      	bne.n	80045b2 <HAL_RCC_OscConfig+0x62>
 800458c:	4b90      	ldr	r3, [pc, #576]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004598:	d10b      	bne.n	80045b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459a:	4b8d      	ldr	r3, [pc, #564]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06c      	beq.n	8004680 <HAL_RCC_OscConfig+0x130>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d168      	bne.n	8004680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e275      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x7a>
 80045bc:	4b84      	ldr	r3, [pc, #528]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a83      	ldr	r2, [pc, #524]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e02e      	b.n	8004628 <HAL_RCC_OscConfig+0xd8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x9c>
 80045d2:	4b7f      	ldr	r3, [pc, #508]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7e      	ldr	r2, [pc, #504]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b7c      	ldr	r3, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7b      	ldr	r2, [pc, #492]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e01d      	b.n	8004628 <HAL_RCC_OscConfig+0xd8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0xc0>
 80045f6:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a75      	ldr	r2, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80045fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a72      	ldr	r2, [pc, #456]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0xd8>
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6e      	ldr	r2, [pc, #440]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a6b      	ldr	r2, [pc, #428]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d013      	beq.n	8004658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7ff faca 	bl	8003bc8 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7ff fac6 	bl	8003bc8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e229      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0xe8>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7ff fab6 	bl	8003bc8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004660:	f7ff fab2 	bl	8003bc8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e215      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	4b57      	ldr	r3, [pc, #348]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x110>
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d069      	beq.n	8004762 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800468e:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469a:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d11c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x190>
 80046a6:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d116      	bne.n	80046e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x17a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e1e9      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	493d      	ldr	r1, [pc, #244]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046de:	e040      	b.n	8004762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d023      	beq.n	8004730 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a38      	ldr	r2, [pc, #224]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7ff fa68 	bl	8003bc8 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fc:	f7ff fa64 	bl	8003bc8 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1c7      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4929      	ldr	r1, [pc, #164]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]
 800472e:	e018      	b.n	8004762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7ff fa44 	bl	8003bc8 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7ff fa40 	bl	8003bc8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e1a3      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d038      	beq.n	80047e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d019      	beq.n	80047aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7ff fa21 	bl	8003bc8 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478a:	f7ff fa1d 	bl	8003bc8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e180      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x23a>
 80047a8:	e01a      	b.n	80047e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <HAL_RCC_OscConfig+0x280>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7ff fa07 	bl	8003bc8 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047be:	f7ff fa03 	bl	8003bc8 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d903      	bls.n	80047d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e166      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
 80047d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d4:	4b92      	ldr	r3, [pc, #584]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80047d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ee      	bne.n	80047be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a4 	beq.w	8004936 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b8c      	ldr	r3, [pc, #560]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	4b89      	ldr	r3, [pc, #548]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4a88      	ldr	r2, [pc, #544]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	; 0x40
 8004806:	4b86      	ldr	r3, [pc, #536]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004816:	4b83      	ldr	r3, [pc, #524]	; (8004a24 <HAL_RCC_OscConfig+0x4d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004822:	4b80      	ldr	r3, [pc, #512]	; (8004a24 <HAL_RCC_OscConfig+0x4d4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7f      	ldr	r2, [pc, #508]	; (8004a24 <HAL_RCC_OscConfig+0x4d4>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7ff f9cb 	bl	8003bc8 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7ff f9c7 	bl	8003bc8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b64      	cmp	r3, #100	; 0x64
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e12a      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004848:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x4d4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x31a>
 800485c:	4b70      	ldr	r3, [pc, #448]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a6f      	ldr	r2, [pc, #444]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
 8004868:	e02d      	b.n	80048c6 <HAL_RCC_OscConfig+0x376>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x33c>
 8004872:	4b6b      	ldr	r3, [pc, #428]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	4a6a      	ldr	r2, [pc, #424]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6713      	str	r3, [r2, #112]	; 0x70
 800487e:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a67      	ldr	r2, [pc, #412]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
 800488a:	e01c      	b.n	80048c6 <HAL_RCC_OscConfig+0x376>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b05      	cmp	r3, #5
 8004892:	d10c      	bne.n	80048ae <HAL_RCC_OscConfig+0x35e>
 8004894:	4b62      	ldr	r3, [pc, #392]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	4a61      	ldr	r2, [pc, #388]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6713      	str	r3, [r2, #112]	; 0x70
 80048a0:	4b5f      	ldr	r3, [pc, #380]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	4a5e      	ldr	r2, [pc, #376]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	6713      	str	r3, [r2, #112]	; 0x70
 80048ac:	e00b      	b.n	80048c6 <HAL_RCC_OscConfig+0x376>
 80048ae:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	4a5b      	ldr	r2, [pc, #364]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ba:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d015      	beq.n	80048fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7ff f97b 	bl	8003bc8 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7ff f977 	bl	8003bc8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e0d8      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ee      	beq.n	80048d6 <HAL_RCC_OscConfig+0x386>
 80048f8:	e014      	b.n	8004924 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fa:	f7ff f965 	bl	8003bc8 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004900:	e00a      	b.n	8004918 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7ff f961 	bl	8003bc8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e0c2      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004918:	4b41      	ldr	r3, [pc, #260]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ee      	bne.n	8004902 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492a:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a3c      	ldr	r2, [pc, #240]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80ae 	beq.w	8004a9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004940:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
 8004948:	2b08      	cmp	r3, #8
 800494a:	d06d      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d14b      	bne.n	80049ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004954:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a31      	ldr	r2, [pc, #196]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7ff f932 	bl	8003bc8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7ff f92e 	bl	8003bc8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e091      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	019b      	lsls	r3, r3, #6
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	3b01      	subs	r3, #1
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	061b      	lsls	r3, r3, #24
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	071b      	lsls	r3, r3, #28
 80049b2:	491b      	ldr	r1, [pc, #108]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7ff f900 	bl	8003bc8 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7ff f8fc 	bl	8003bc8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e05f      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x47c>
 80049ea:	e057      	b.n	8004a9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 80049f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7ff f8e6 	bl	8003bc8 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7ff f8e2 	bl	8003bc8 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e045      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4b0>
 8004a1e:	e03d      	b.n	8004a9c <HAL_RCC_OscConfig+0x54c>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a28:	4b1f      	ldr	r3, [pc, #124]	; (8004aa8 <HAL_RCC_OscConfig+0x558>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d030      	beq.n	8004a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d129      	bne.n	8004a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d122      	bne.n	8004a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a58:	4013      	ands	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d119      	bne.n	8004a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	3b01      	subs	r3, #1
 8004a72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d10f      	bne.n	8004a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d107      	bne.n	8004a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800

08004aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0d0      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d910      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 020f 	bic.w	r2, r3, #15
 8004ada:	4965      	ldr	r1, [pc, #404]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b63      	ldr	r3, [pc, #396]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0b8      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b0c:	4b59      	ldr	r3, [pc, #356]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a58      	ldr	r2, [pc, #352]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b24:	4b53      	ldr	r3, [pc, #332]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a52      	ldr	r2, [pc, #328]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b30:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	494d      	ldr	r1, [pc, #308]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d040      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d107      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d115      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e07f      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6e:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e073      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8e:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 0203 	bic.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4936      	ldr	r1, [pc, #216]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7ff f812 	bl	8003bc8 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba8:	f7ff f80e 	bl	8003bc8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e053      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 020c 	and.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1eb      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d210      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 020f 	bic.w	r2, r3, #15
 8004be6:	4922      	ldr	r1, [pc, #136]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e032      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4916      	ldr	r1, [pc, #88]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	490e      	ldr	r1, [pc, #56]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3e:	f000 f821 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c42:	4601      	mov	r1, r0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x1cc>)
 8004c50:	5cd3      	ldrb	r3, [r2, r3]
 8004c52:	fa21 f303 	lsr.w	r3, r1, r3
 8004c56:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1d0>)
 8004c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x1d4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe ff6e 	bl	8003b40 <HAL_InitTick>

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023c00 	.word	0x40023c00
 8004c74:	40023800 	.word	0x40023800
 8004c78:	08009ee4 	.word	0x08009ee4
 8004c7c:	20000018 	.word	0x20000018
 8004c80:	2000001c 	.word	0x2000001c

08004c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x32>
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d008      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x38>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 80b4 	bne.w	8004e18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4b5e      	ldr	r3, [pc, #376]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cb2:	60bb      	str	r3, [r7, #8]
      break;
 8004cb4:	e0b3      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cb6:	4b5e      	ldr	r3, [pc, #376]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004cb8:	60bb      	str	r3, [r7, #8]
      break;
 8004cba:	e0b0      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cbc:	4b5a      	ldr	r3, [pc, #360]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004cc6:	4b58      	ldr	r3, [pc, #352]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d04a      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd2:	4b55      	ldr	r3, [pc, #340]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	f04f 0400 	mov.w	r4, #0
 8004cdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	ea03 0501 	and.w	r5, r3, r1
 8004ce8:	ea04 0602 	and.w	r6, r4, r2
 8004cec:	4629      	mov	r1, r5
 8004cee:	4632      	mov	r2, r6
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	0154      	lsls	r4, r2, #5
 8004cfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cfe:	014b      	lsls	r3, r1, #5
 8004d00:	4619      	mov	r1, r3
 8004d02:	4622      	mov	r2, r4
 8004d04:	1b49      	subs	r1, r1, r5
 8004d06:	eb62 0206 	sbc.w	r2, r2, r6
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	f04f 0400 	mov.w	r4, #0
 8004d12:	0194      	lsls	r4, r2, #6
 8004d14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d18:	018b      	lsls	r3, r1, #6
 8004d1a:	1a5b      	subs	r3, r3, r1
 8004d1c:	eb64 0402 	sbc.w	r4, r4, r2
 8004d20:	f04f 0100 	mov.w	r1, #0
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	00e2      	lsls	r2, r4, #3
 8004d2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d2e:	00d9      	lsls	r1, r3, #3
 8004d30:	460b      	mov	r3, r1
 8004d32:	4614      	mov	r4, r2
 8004d34:	195b      	adds	r3, r3, r5
 8004d36:	eb44 0406 	adc.w	r4, r4, r6
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	0262      	lsls	r2, r4, #9
 8004d44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d48:	0259      	lsls	r1, r3, #9
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	4621      	mov	r1, r4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	f7fb fac8 	bl	80002f0 <__aeabi_uldivmod>
 8004d60:	4603      	mov	r3, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e049      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d68:	4b2f      	ldr	r3, [pc, #188]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	f04f 0400 	mov.w	r4, #0
 8004d72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	ea03 0501 	and.w	r5, r3, r1
 8004d7e:	ea04 0602 	and.w	r6, r4, r2
 8004d82:	4629      	mov	r1, r5
 8004d84:	4632      	mov	r2, r6
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f04f 0400 	mov.w	r4, #0
 8004d8e:	0154      	lsls	r4, r2, #5
 8004d90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d94:	014b      	lsls	r3, r1, #5
 8004d96:	4619      	mov	r1, r3
 8004d98:	4622      	mov	r2, r4
 8004d9a:	1b49      	subs	r1, r1, r5
 8004d9c:	eb62 0206 	sbc.w	r2, r2, r6
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	f04f 0400 	mov.w	r4, #0
 8004da8:	0194      	lsls	r4, r2, #6
 8004daa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	1a5b      	subs	r3, r3, r1
 8004db2:	eb64 0402 	sbc.w	r4, r4, r2
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	00e2      	lsls	r2, r4, #3
 8004dc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dc4:	00d9      	lsls	r1, r3, #3
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4614      	mov	r4, r2
 8004dca:	195b      	adds	r3, r3, r5
 8004dcc:	eb44 0406 	adc.w	r4, r4, r6
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	02a2      	lsls	r2, r4, #10
 8004dda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004dde:	0299      	lsls	r1, r3, #10
 8004de0:	460b      	mov	r3, r1
 8004de2:	4614      	mov	r4, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	4621      	mov	r1, r4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f04f 0400 	mov.w	r4, #0
 8004dee:	461a      	mov	r2, r3
 8004df0:	4623      	mov	r3, r4
 8004df2:	f7fb fa7d 	bl	80002f0 <__aeabi_uldivmod>
 8004df6:	4603      	mov	r3, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	60bb      	str	r3, [r7, #8]
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e1a:	60bb      	str	r3, [r7, #8]
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	00f42400 	.word	0x00f42400
 8004e30:	007a1200 	.word	0x007a1200

08004e34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e38:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000018 	.word	0x20000018

08004e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e50:	f7ff fff0 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e54:	4601      	mov	r1, r0
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	0a9b      	lsrs	r3, r3, #10
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	4a03      	ldr	r2, [pc, #12]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	08009ef4 	.word	0x08009ef4

08004e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e78:	f7ff ffdc 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0b5b      	lsrs	r3, r3, #13
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40023800 	.word	0x40023800
 8004e98:	08009ef4 	.word	0x08009ef4

08004e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d012      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ec4:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a68      	ldr	r2, [pc, #416]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ece:	6093      	str	r3, [r2, #8]
 8004ed0:	4b66      	ldr	r3, [pc, #408]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	4964      	ldr	r1, [pc, #400]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d017      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ef6:	4b5d      	ldr	r3, [pc, #372]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	4959      	ldr	r1, [pc, #356]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d017      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f32:	4b4e      	ldr	r3, [pc, #312]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	494a      	ldr	r1, [pc, #296]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 808b 	beq.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	4b3a      	ldr	r3, [pc, #232]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	4a39      	ldr	r2, [pc, #228]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8c:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f98:	4b35      	ldr	r3, [pc, #212]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a34      	ldr	r2, [pc, #208]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fe fe10 	bl	8003bc8 <HAL_GetTick>
 8004fa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fac:	f7fe fe0c 	bl	8003bc8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e38d      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fca:	4b28      	ldr	r3, [pc, #160]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d035      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d02e      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe8:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005008:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800500a:	4a18      	ldr	r2, [pc, #96]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d114      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fdd4 	bl	8003bc8 <HAL_GetTick>
 8005020:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005022:	e00a      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fe fdd0 	bl	8003bc8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e34f      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0ee      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005052:	d111      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005062:	400b      	ands	r3, r1
 8005064:	4901      	ldr	r1, [pc, #4]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
 800506a:	e00b      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800506c:	40023800 	.word	0x40023800
 8005070:	40007000 	.word	0x40007000
 8005074:	0ffffcff 	.word	0x0ffffcff
 8005078:	4bb3      	ldr	r3, [pc, #716]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4ab2      	ldr	r2, [pc, #712]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005082:	6093      	str	r3, [r2, #8]
 8005084:	4bb0      	ldr	r3, [pc, #704]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005090:	49ad      	ldr	r1, [pc, #692]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005092:	4313      	orrs	r3, r2
 8005094:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d010      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050a2:	4ba9      	ldr	r3, [pc, #676]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a8:	4aa7      	ldr	r2, [pc, #668]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050b2:	4ba5      	ldr	r3, [pc, #660]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	49a2      	ldr	r1, [pc, #648]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050d0:	4b9d      	ldr	r3, [pc, #628]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050de:	499a      	ldr	r1, [pc, #616]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f2:	4b95      	ldr	r3, [pc, #596]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005100:	4991      	ldr	r1, [pc, #580]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005114:	4b8c      	ldr	r3, [pc, #560]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005122:	4989      	ldr	r1, [pc, #548]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005136:	4b84      	ldr	r3, [pc, #528]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	4980      	ldr	r1, [pc, #512]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005158:	4b7b      	ldr	r3, [pc, #492]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	4978      	ldr	r1, [pc, #480]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800517a:	4b73      	ldr	r3, [pc, #460]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	f023 020c 	bic.w	r2, r3, #12
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005188:	496f      	ldr	r1, [pc, #444]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800519c:	4b6a      	ldr	r3, [pc, #424]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	4967      	ldr	r1, [pc, #412]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051be:	4b62      	ldr	r3, [pc, #392]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	495e      	ldr	r1, [pc, #376]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051e0:	4b59      	ldr	r3, [pc, #356]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	4956      	ldr	r1, [pc, #344]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005202:	4b51      	ldr	r3, [pc, #324]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005208:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	494d      	ldr	r1, [pc, #308]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005224:	4b48      	ldr	r3, [pc, #288]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005232:	4945      	ldr	r1, [pc, #276]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005246:	4b40      	ldr	r3, [pc, #256]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005254:	493c      	ldr	r1, [pc, #240]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005268:	4b37      	ldr	r3, [pc, #220]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	4934      	ldr	r1, [pc, #208]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d011      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800528a:	4b2f      	ldr	r3, [pc, #188]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005290:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005298:	492b      	ldr	r1, [pc, #172]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a8:	d101      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ca:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d8:	491b      	ldr	r1, [pc, #108]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fc:	4912      	ldr	r1, [pc, #72]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005320:	4909      	ldr	r1, [pc, #36]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00f      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800533a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	e002      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	4985      	ldr	r1, [pc, #532]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005360:	4b80      	ldr	r3, [pc, #512]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005370:	497c      	ldr	r1, [pc, #496]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d005      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005386:	f040 80d6 	bne.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800538a:	4b76      	ldr	r3, [pc, #472]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a75      	ldr	r2, [pc, #468]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005390:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005396:	f7fe fc17 	bl	8003bc8 <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800539e:	f7fe fc13 	bl	8003bc8 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b64      	cmp	r3, #100	; 0x64
 80053aa:	d901      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e194      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053b0:	4b6c      	ldr	r3, [pc, #432]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d021      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11d      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053d0:	4b64      	ldr	r3, [pc, #400]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053de:	4b61      	ldr	r3, [pc, #388]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e4:	0e1b      	lsrs	r3, r3, #24
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	019a      	lsls	r2, r3, #6
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	061b      	lsls	r3, r3, #24
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	071b      	lsls	r3, r3, #28
 8005404:	4957      	ldr	r1, [pc, #348]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005436:	d129      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005438:	4b4a      	ldr	r3, [pc, #296]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005446:	4b47      	ldr	r3, [pc, #284]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800544c:	0f1b      	lsrs	r3, r3, #28
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	019a      	lsls	r2, r3, #6
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	061b      	lsls	r3, r3, #24
 8005466:	431a      	orrs	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	071b      	lsls	r3, r3, #28
 800546c:	493d      	ldr	r1, [pc, #244]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005474:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547a:	f023 021f 	bic.w	r2, r3, #31
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	3b01      	subs	r3, #1
 8005484:	4937      	ldr	r1, [pc, #220]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01d      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005498:	4b32      	ldr	r3, [pc, #200]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549e:	0e1b      	lsrs	r3, r3, #24
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054a6:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ac:	0f1b      	lsrs	r3, r3, #28
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	019a      	lsls	r2, r3, #6
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	431a      	orrs	r2, r3
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	071b      	lsls	r3, r3, #28
 80054cc:	4925      	ldr	r1, [pc, #148]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d011      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	019a      	lsls	r2, r3, #6
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	061b      	lsls	r3, r3, #24
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	071b      	lsls	r3, r3, #28
 80054fc:	4919      	ldr	r1, [pc, #100]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005504:	4b17      	ldr	r3, [pc, #92]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800550a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800550e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005510:	f7fe fb5a 	bl	8003bc8 <HAL_GetTick>
 8005514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005518:	f7fe fb56 	bl	8003bc8 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0d7      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 80cd 	bne.w	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a08      	ldr	r2, [pc, #32]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554a:	f7fe fb3d 	bl	8003bc8 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005552:	f7fe fb39 	bl	8003bc8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b64      	cmp	r3, #100	; 0x64
 800555e:	d903      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0ba      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005564:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005568:	4b5e      	ldr	r3, [pc, #376]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005574:	d0ed      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02e      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d12a      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800559e:	4b51      	ldr	r3, [pc, #324]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055ac:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	0f1b      	lsrs	r3, r3, #28
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	019a      	lsls	r2, r3, #6
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	061b      	lsls	r3, r3, #24
 80055cc:	431a      	orrs	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	071b      	lsls	r3, r3, #28
 80055d2:	4944      	ldr	r1, [pc, #272]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055da:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	493d      	ldr	r1, [pc, #244]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d022      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005608:	d11d      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	0e1b      	lsrs	r3, r3, #24
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005618:	4b32      	ldr	r3, [pc, #200]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	0f1b      	lsrs	r3, r3, #28
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	019a      	lsls	r2, r3, #6
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	431a      	orrs	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	071b      	lsls	r3, r3, #28
 800563e:	4929      	ldr	r1, [pc, #164]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d028      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005652:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	019a      	lsls	r2, r3, #6
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	431a      	orrs	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	071b      	lsls	r3, r3, #28
 8005686:	4917      	ldr	r1, [pc, #92]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4911      	ldr	r1, [pc, #68]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b0:	f7fe fa8a 	bl	8003bc8 <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056b8:	f7fe fa86 	bl	8003bc8 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e007      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ca:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d6:	d1ef      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800

080056e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e01d      	b.n	8005736 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fd ff9c 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 fc90 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <HAL_TIM_Base_Start_IT+0x50>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b06      	cmp	r3, #6
 8005768:	d00b      	beq.n	8005782 <HAL_TIM_Base_Start_IT+0x42>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d007      	beq.n	8005782 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	00010007 	.word	0x00010007

08005794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e01d      	b.n	80057e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f815 	bl	80057ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fc3a 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2201      	movs	r2, #1
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 ffb2 	bl	800677c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a17      	ldr	r2, [pc, #92]	; (800587c <HAL_TIM_PWM_Start+0x7c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <HAL_TIM_PWM_Start+0x2c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a16      	ldr	r2, [pc, #88]	; (8005880 <HAL_TIM_PWM_Start+0x80>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <HAL_TIM_PWM_Start+0x30>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <HAL_TIM_PWM_Start+0x32>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_TIM_PWM_Start+0x84>)
 800584e:	4013      	ands	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b06      	cmp	r3, #6
 8005856:	d00b      	beq.n	8005870 <HAL_TIM_PWM_Start+0x70>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585e:	d007      	beq.n	8005870 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40010400 	.word	0x40010400
 8005884:	00010007 	.word	0x00010007

08005888 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e07b      	b.n	8005994 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fd fdd1 	bl	8003458 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6899      	ldr	r1, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b34      	ldr	r3, [pc, #208]	; (800599c <HAL_TIM_Encoder_Init+0x114>)
 80058ca:	400b      	ands	r3, r1
 80058cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f000 fbb7 	bl	800604c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <HAL_TIM_Encoder_Init+0x118>)
 8005904:	4013      	ands	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	4313      	orrs	r3, r2
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4b21      	ldr	r3, [pc, #132]	; (80059a4 <HAL_TIM_Encoder_Init+0x11c>)
 800591e:	4013      	ands	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <HAL_TIM_Encoder_Init+0x120>)
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	4313      	orrs	r3, r2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	011a      	lsls	r2, r3, #4
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	031b      	lsls	r3, r3, #12
 8005948:	4313      	orrs	r3, r2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	4313      	orrs	r3, r2
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	fffebff8 	.word	0xfffebff8
 80059a0:	fffffcfc 	.word	0xfffffcfc
 80059a4:	fffff3f3 	.word	0xfffff3f3
 80059a8:	ffff0f0f 	.word	0xffff0f0f

080059ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_TIM_Encoder_Start+0x16>
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d008      	beq.n	80059d2 <HAL_TIM_Encoder_Start+0x26>
 80059c0:	e00f      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fed6 	bl	800677c <TIM_CCxChannelCmd>
      break;
 80059d0:	e016      	b.n	8005a00 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	2104      	movs	r1, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fece 	bl	800677c <TIM_CCxChannelCmd>
      break;
 80059e0:	e00e      	b.n	8005a00 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2201      	movs	r2, #1
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fec6 	bl	800677c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2201      	movs	r2, #1
 80059f6:	2104      	movs	r1, #4
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 febf 	bl	800677c <TIM_CCxChannelCmd>
      break;
 80059fe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d122      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d11b      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0202 	mvn.w	r2, #2
 8005a46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fad7 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005a62:	e005      	b.n	8005a70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fac9 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fada 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d122      	bne.n	8005aca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d11b      	bne.n	8005aca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0204 	mvn.w	r2, #4
 8005a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 faad 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005ab6:	e005      	b.n	8005ac4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa9f 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fab0 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d122      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d11b      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f06f 0208 	mvn.w	r2, #8
 8005aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2204      	movs	r2, #4
 8005af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa83 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005b0a:	e005      	b.n	8005b18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa75 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa86 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d122      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d11b      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f06f 0210 	mvn.w	r2, #16
 8005b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2208      	movs	r2, #8
 8005b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa59 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005b5e:	e005      	b.n	8005b6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa4b 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa5c 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d10e      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f06f 0201 	mvn.w	r2, #1
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fa fd3d 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	d10e      	bne.n	8005bca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d107      	bne.n	8005bca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fe97 	bl	80068f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b80      	cmp	r3, #128	; 0x80
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fe8a 	bl	800690c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa0a 	bl	8006038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0220 	mvn.w	r2, #32
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fe4a 	bl	80068e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e105      	b.n	8005e7e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b14      	cmp	r3, #20
 8005c86:	f200 80f0 	bhi.w	8005e6a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005e6b 	.word	0x08005e6b
 8005c98:	08005e6b 	.word	0x08005e6b
 8005c9c:	08005e6b 	.word	0x08005e6b
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005e6b 	.word	0x08005e6b
 8005ca8:	08005e6b 	.word	0x08005e6b
 8005cac:	08005e6b 	.word	0x08005e6b
 8005cb0:	08005d67 	.word	0x08005d67
 8005cb4:	08005e6b 	.word	0x08005e6b
 8005cb8:	08005e6b 	.word	0x08005e6b
 8005cbc:	08005e6b 	.word	0x08005e6b
 8005cc0:	08005da7 	.word	0x08005da7
 8005cc4:	08005e6b 	.word	0x08005e6b
 8005cc8:	08005e6b 	.word	0x08005e6b
 8005ccc:	08005e6b 	.word	0x08005e6b
 8005cd0:	08005de9 	.word	0x08005de9
 8005cd4:	08005e6b 	.word	0x08005e6b
 8005cd8:	08005e6b 	.word	0x08005e6b
 8005cdc:	08005e6b 	.word	0x08005e6b
 8005ce0:	08005e29 	.word	0x08005e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fa4e 	bl	800618c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
      break;
 8005d22:	e0a3      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 faa0 	bl	8006270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	619a      	str	r2, [r3, #24]
      break;
 8005d64:	e082      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 faf7 	bl	8006360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0208 	orr.w	r2, r2, #8
 8005d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0204 	bic.w	r2, r2, #4
 8005d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69d9      	ldr	r1, [r3, #28]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	61da      	str	r2, [r3, #28]
      break;
 8005da4:	e062      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fb4d 	bl	800644c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69d9      	ldr	r1, [r3, #28]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	61da      	str	r2, [r3, #28]
      break;
 8005de6:	e041      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fb84 	bl	80064fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0208 	orr.w	r2, r2, #8
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0204 	bic.w	r2, r2, #4
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e26:	e021      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fbb6 	bl	80065a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e68:	e000      	b.n	8005e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005e6a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0a6      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x166>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4b4f      	ldr	r3, [pc, #316]	; (8005ff8 <HAL_TIM_ConfigClockSource+0x170>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d067      	beq.n	8005fa8 <HAL_TIM_ConfigClockSource+0x120>
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d80b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x6c>
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d073      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x140>
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d802      	bhi.n	8005eea <HAL_TIM_ConfigClockSource+0x62>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d06f      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ee8:	e078      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d06c      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x140>
 8005eee:	2b30      	cmp	r3, #48	; 0x30
 8005ef0:	d06a      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005ef2:	e073      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ef4:	2b70      	cmp	r3, #112	; 0x70
 8005ef6:	d00d      	beq.n	8005f14 <HAL_TIM_ConfigClockSource+0x8c>
 8005ef8:	2b70      	cmp	r3, #112	; 0x70
 8005efa:	d804      	bhi.n	8005f06 <HAL_TIM_ConfigClockSource+0x7e>
 8005efc:	2b50      	cmp	r3, #80	; 0x50
 8005efe:	d033      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0xe0>
 8005f00:	2b60      	cmp	r3, #96	; 0x60
 8005f02:	d041      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f04:	e06a      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d066      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x152>
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d017      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f12:	e063      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	6899      	ldr	r1, [r3, #8]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f000 fc0a 	bl	800673c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	609a      	str	r2, [r3, #8]
      break;
 8005f40:	e04c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6899      	ldr	r1, [r3, #8]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f000 fbf3 	bl	800673c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f64:	609a      	str	r2, [r3, #8]
      break;
 8005f66:	e039      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f000 fb67 	bl	8006648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2150      	movs	r1, #80	; 0x50
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fbc0 	bl	8006706 <TIM_ITRx_SetConfig>
      break;
 8005f86:	e029      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f000 fb86 	bl	80066a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2160      	movs	r1, #96	; 0x60
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fbb0 	bl	8006706 <TIM_ITRx_SetConfig>
      break;
 8005fa6:	e019      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6859      	ldr	r1, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f000 fb47 	bl	8006648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2140      	movs	r1, #64	; 0x40
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fba0 	bl	8006706 <TIM_ITRx_SetConfig>
      break;
 8005fc6:	e009      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 fb97 	bl	8006706 <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	fffeff88 	.word	0xfffeff88

08005ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a40      	ldr	r2, [pc, #256]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3d      	ldr	r2, [pc, #244]	; (8006164 <TIM_Base_SetConfig+0x118>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3c      	ldr	r2, [pc, #240]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3b      	ldr	r2, [pc, #236]	; (800616c <TIM_Base_SetConfig+0x120>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <TIM_Base_SetConfig+0x114>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d027      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <TIM_Base_SetConfig+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d023      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	; (800616c <TIM_Base_SetConfig+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <TIM_Base_SetConfig+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d017      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a28      	ldr	r2, [pc, #160]	; (8006174 <TIM_Base_SetConfig+0x128>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a27      	ldr	r2, [pc, #156]	; (8006178 <TIM_Base_SetConfig+0x12c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a25      	ldr	r2, [pc, #148]	; (8006180 <TIM_Base_SetConfig+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a24      	ldr	r2, [pc, #144]	; (8006184 <TIM_Base_SetConfig+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <TIM_Base_SetConfig+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d103      	bne.n	800614c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	615a      	str	r2, [r3, #20]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40001800 	.word	0x40001800
 8006184:	40001c00 	.word	0x40001c00
 8006188:	40002000 	.word	0x40002000

0800618c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <TIM_OC1_SetConfig+0xd8>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 0302 	bic.w	r3, r3, #2
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <TIM_OC1_SetConfig+0xdc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC1_SetConfig+0x64>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a20      	ldr	r2, [pc, #128]	; (800626c <TIM_OC1_SetConfig+0xe0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10c      	bne.n	800620a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0308 	bic.w	r3, r3, #8
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 0304 	bic.w	r3, r3, #4
 8006208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a16      	ldr	r2, [pc, #88]	; (8006268 <TIM_OC1_SetConfig+0xdc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <TIM_OC1_SetConfig+0x8e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a15      	ldr	r2, [pc, #84]	; (800626c <TIM_OC1_SetConfig+0xe0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d111      	bne.n	800623e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	fffeff8f 	.word	0xfffeff8f
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400

08006270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0210 	bic.w	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <TIM_OC2_SetConfig+0xe4>)
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a23      	ldr	r2, [pc, #140]	; (8006358 <TIM_OC2_SetConfig+0xe8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC2_SetConfig+0x68>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <TIM_OC2_SetConfig+0xec>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10d      	bne.n	80062f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <TIM_OC2_SetConfig+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC2_SetConfig+0x94>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <TIM_OC2_SetConfig+0xec>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d113      	bne.n	800632c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800630a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	feff8fff 	.word	0xfeff8fff
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <TIM_OC3_SetConfig+0xe0>)
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a22      	ldr	r2, [pc, #136]	; (8006444 <TIM_OC3_SetConfig+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_OC3_SetConfig+0x66>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a21      	ldr	r2, [pc, #132]	; (8006448 <TIM_OC3_SetConfig+0xe8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d10d      	bne.n	80063e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a17      	ldr	r2, [pc, #92]	; (8006444 <TIM_OC3_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC3_SetConfig+0x92>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC3_SetConfig+0xe8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d113      	bne.n	800641a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	fffeff8f 	.word	0xfffeff8f
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b1e      	ldr	r3, [pc, #120]	; (80064f0 <TIM_OC4_SetConfig+0xa4>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <TIM_OC4_SetConfig+0xa8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC4_SetConfig+0x68>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <TIM_OC4_SetConfig+0xac>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d109      	bne.n	80064c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	019b      	lsls	r3, r3, #6
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	feff8fff 	.word	0xfeff8fff
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400

080064fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <TIM_OC5_SetConfig+0x98>)
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800653c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a12      	ldr	r2, [pc, #72]	; (8006598 <TIM_OC5_SetConfig+0x9c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_OC5_SetConfig+0x5e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <TIM_OC5_SetConfig+0xa0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d109      	bne.n	800656e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	fffeff8f 	.word	0xfffeff8f
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400

080065a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b1c      	ldr	r3, [pc, #112]	; (800663c <TIM_OC6_SetConfig+0x9c>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	051b      	lsls	r3, r3, #20
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a13      	ldr	r2, [pc, #76]	; (8006640 <TIM_OC6_SetConfig+0xa0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC6_SetConfig+0x60>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a12      	ldr	r2, [pc, #72]	; (8006644 <TIM_OC6_SetConfig+0xa4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d109      	bne.n	8006614 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	feff8fff 	.word	0xfeff8fff
 8006640:	40010000 	.word	0x40010000
 8006644:	40010400 	.word	0x40010400

08006648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0201 	bic.w	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f023 030a 	bic.w	r3, r3, #10
 8006684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b087      	sub	sp, #28
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0210 	bic.w	r2, r3, #16
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	031b      	lsls	r3, r3, #12
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	f043 0307 	orr.w	r3, r3, #7
 8006728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	021a      	lsls	r2, r3, #8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	431a      	orrs	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	609a      	str	r2, [r3, #8]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2201      	movs	r2, #1
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1a      	ldr	r2, [r3, #32]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	43db      	mvns	r3, r3
 800679e:	401a      	ands	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1a      	ldr	r2, [r3, #32]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	fa01 f303 	lsl.w	r3, r1, r3
 80067b4:	431a      	orrs	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067dc:	2302      	movs	r3, #2
 80067de:	e06d      	b.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a30      	ldr	r2, [pc, #192]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d108      	bne.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800681a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006852:	d01d      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10c      	bne.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40001800 	.word	0x40001800

080068e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e040      	b.n	80069b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fc ff2c 	bl	80037a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	; 0x24
 800694c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8be 	bl	8006ae0 <UART_SetConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e022      	b.n	80069b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fb5c 	bl	8007034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800698a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800699a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fbe3 	bl	8007178 <UART_CheckIdleState>
 80069b2:	4603      	mov	r3, r0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d17f      	bne.n	8006ad4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <HAL_UART_Transmit+0x24>
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e078      	b.n	8006ad6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Transmit+0x36>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e071      	b.n	8006ad6 <HAL_UART_Transmit+0x11a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2221      	movs	r2, #33	; 0x21
 8006a04:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a06:	f7fd f8df 	bl	8003bc8 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a24:	d108      	bne.n	8006a38 <HAL_UART_Transmit+0x7c>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e003      	b.n	8006a40 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006a48:	e02c      	b.n	8006aa4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2180      	movs	r1, #128	; 0x80
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fbd4 	bl	8007202 <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e038      	b.n	8006ad6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e007      	b.n	8006a92 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1cc      	bne.n	8006a4a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2140      	movs	r1, #64	; 0x40
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fba1 	bl	8007202 <UART_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e005      	b.n	8006ad6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4bb1      	ldr	r3, [pc, #708]	; (8006dd4 <UART_SetConfig+0x2f4>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	6939      	ldr	r1, [r7, #16]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a9f      	ldr	r2, [pc, #636]	; (8006dd8 <UART_SetConfig+0x2f8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d121      	bne.n	8006ba4 <UART_SetConfig+0xc4>
 8006b60:	4b9e      	ldr	r3, [pc, #632]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d816      	bhi.n	8006b9c <UART_SetConfig+0xbc>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x94>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006b8b 	.word	0x08006b8b
 8006b80:	08006b97 	.word	0x08006b97
 8006b84:	2301      	movs	r3, #1
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e151      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e14e      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006b90:	2304      	movs	r3, #4
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e14b      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006b96:	2308      	movs	r3, #8
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e148      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	bf00      	nop
 8006ba2:	e144      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a8d      	ldr	r2, [pc, #564]	; (8006de0 <UART_SetConfig+0x300>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d134      	bne.n	8006c18 <UART_SetConfig+0x138>
 8006bae:	4b8b      	ldr	r3, [pc, #556]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb4:	f003 030c 	and.w	r3, r3, #12
 8006bb8:	2b0c      	cmp	r3, #12
 8006bba:	d829      	bhi.n	8006c10 <UART_SetConfig+0x130>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0xe4>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006c11 	.word	0x08006c11
 8006bcc:	08006c11 	.word	0x08006c11
 8006bd0:	08006c11 	.word	0x08006c11
 8006bd4:	08006c05 	.word	0x08006c05
 8006bd8:	08006c11 	.word	0x08006c11
 8006bdc:	08006c11 	.word	0x08006c11
 8006be0:	08006c11 	.word	0x08006c11
 8006be4:	08006bff 	.word	0x08006bff
 8006be8:	08006c11 	.word	0x08006c11
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c11 	.word	0x08006c11
 8006bf4:	08006c0b 	.word	0x08006c0b
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e117      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e114      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c04:	2304      	movs	r3, #4
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e111      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	77fb      	strb	r3, [r7, #31]
 8006c0e:	e10e      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c10:	2310      	movs	r3, #16
 8006c12:	77fb      	strb	r3, [r7, #31]
 8006c14:	bf00      	nop
 8006c16:	e10a      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a71      	ldr	r2, [pc, #452]	; (8006de4 <UART_SetConfig+0x304>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d120      	bne.n	8006c64 <UART_SetConfig+0x184>
 8006c22:	4b6e      	ldr	r3, [pc, #440]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d00f      	beq.n	8006c50 <UART_SetConfig+0x170>
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d802      	bhi.n	8006c3a <UART_SetConfig+0x15a>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <UART_SetConfig+0x164>
 8006c38:	e010      	b.n	8006c5c <UART_SetConfig+0x17c>
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d005      	beq.n	8006c4a <UART_SetConfig+0x16a>
 8006c3e:	2b30      	cmp	r3, #48	; 0x30
 8006c40:	d009      	beq.n	8006c56 <UART_SetConfig+0x176>
 8006c42:	e00b      	b.n	8006c5c <UART_SetConfig+0x17c>
 8006c44:	2300      	movs	r3, #0
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e0f1      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e0ee      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c50:	2304      	movs	r3, #4
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e0eb      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c56:	2308      	movs	r3, #8
 8006c58:	77fb      	strb	r3, [r7, #31]
 8006c5a:	e0e8      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	bf00      	nop
 8006c62:	e0e4      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a5f      	ldr	r2, [pc, #380]	; (8006de8 <UART_SetConfig+0x308>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d120      	bne.n	8006cb0 <UART_SetConfig+0x1d0>
 8006c6e:	4b5b      	ldr	r3, [pc, #364]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d00f      	beq.n	8006c9c <UART_SetConfig+0x1bc>
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d802      	bhi.n	8006c86 <UART_SetConfig+0x1a6>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <UART_SetConfig+0x1b0>
 8006c84:	e010      	b.n	8006ca8 <UART_SetConfig+0x1c8>
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d005      	beq.n	8006c96 <UART_SetConfig+0x1b6>
 8006c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c8c:	d009      	beq.n	8006ca2 <UART_SetConfig+0x1c2>
 8006c8e:	e00b      	b.n	8006ca8 <UART_SetConfig+0x1c8>
 8006c90:	2300      	movs	r3, #0
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e0cb      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c96:	2302      	movs	r3, #2
 8006c98:	77fb      	strb	r3, [r7, #31]
 8006c9a:	e0c8      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e0c5      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e0c2      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	bf00      	nop
 8006cae:	e0be      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a4d      	ldr	r2, [pc, #308]	; (8006dec <UART_SetConfig+0x30c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d124      	bne.n	8006d04 <UART_SetConfig+0x224>
 8006cba:	4b48      	ldr	r3, [pc, #288]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc8:	d012      	beq.n	8006cf0 <UART_SetConfig+0x210>
 8006cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cce:	d802      	bhi.n	8006cd6 <UART_SetConfig+0x1f6>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <UART_SetConfig+0x204>
 8006cd4:	e012      	b.n	8006cfc <UART_SetConfig+0x21c>
 8006cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cda:	d006      	beq.n	8006cea <UART_SetConfig+0x20a>
 8006cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce0:	d009      	beq.n	8006cf6 <UART_SetConfig+0x216>
 8006ce2:	e00b      	b.n	8006cfc <UART_SetConfig+0x21c>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e0a1      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006cea:	2302      	movs	r3, #2
 8006cec:	77fb      	strb	r3, [r7, #31]
 8006cee:	e09e      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e09b      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e098      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	bf00      	nop
 8006d02:	e094      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <UART_SetConfig+0x310>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d124      	bne.n	8006d58 <UART_SetConfig+0x278>
 8006d0e:	4b33      	ldr	r3, [pc, #204]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1c:	d012      	beq.n	8006d44 <UART_SetConfig+0x264>
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d22:	d802      	bhi.n	8006d2a <UART_SetConfig+0x24a>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <UART_SetConfig+0x258>
 8006d28:	e012      	b.n	8006d50 <UART_SetConfig+0x270>
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2e:	d006      	beq.n	8006d3e <UART_SetConfig+0x25e>
 8006d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d34:	d009      	beq.n	8006d4a <UART_SetConfig+0x26a>
 8006d36:	e00b      	b.n	8006d50 <UART_SetConfig+0x270>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e077      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e074      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d44:	2304      	movs	r3, #4
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e071      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e06e      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d50:	2310      	movs	r3, #16
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	bf00      	nop
 8006d56:	e06a      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a25      	ldr	r2, [pc, #148]	; (8006df4 <UART_SetConfig+0x314>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d124      	bne.n	8006dac <UART_SetConfig+0x2cc>
 8006d62:	4b1e      	ldr	r3, [pc, #120]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d70:	d012      	beq.n	8006d98 <UART_SetConfig+0x2b8>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	d802      	bhi.n	8006d7e <UART_SetConfig+0x29e>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <UART_SetConfig+0x2ac>
 8006d7c:	e012      	b.n	8006da4 <UART_SetConfig+0x2c4>
 8006d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d82:	d006      	beq.n	8006d92 <UART_SetConfig+0x2b2>
 8006d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d88:	d009      	beq.n	8006d9e <UART_SetConfig+0x2be>
 8006d8a:	e00b      	b.n	8006da4 <UART_SetConfig+0x2c4>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e04d      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e04a      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e047      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006d9e:	2308      	movs	r3, #8
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e044      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006da4:	2310      	movs	r3, #16
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	bf00      	nop
 8006daa:	e040      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <UART_SetConfig+0x318>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d139      	bne.n	8006e2a <UART_SetConfig+0x34a>
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <UART_SetConfig+0x2fc>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc4:	d027      	beq.n	8006e16 <UART_SetConfig+0x336>
 8006dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dca:	d817      	bhi.n	8006dfc <UART_SetConfig+0x31c>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01c      	beq.n	8006e0a <UART_SetConfig+0x32a>
 8006dd0:	e027      	b.n	8006e22 <UART_SetConfig+0x342>
 8006dd2:	bf00      	nop
 8006dd4:	efff69f3 	.word	0xefff69f3
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	40004400 	.word	0x40004400
 8006de4:	40004800 	.word	0x40004800
 8006de8:	40004c00 	.word	0x40004c00
 8006dec:	40005000 	.word	0x40005000
 8006df0:	40011400 	.word	0x40011400
 8006df4:	40007800 	.word	0x40007800
 8006df8:	40007c00 	.word	0x40007c00
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e00:	d006      	beq.n	8006e10 <UART_SetConfig+0x330>
 8006e02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e06:	d009      	beq.n	8006e1c <UART_SetConfig+0x33c>
 8006e08:	e00b      	b.n	8006e22 <UART_SetConfig+0x342>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	77fb      	strb	r3, [r7, #31]
 8006e0e:	e00e      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006e10:	2302      	movs	r3, #2
 8006e12:	77fb      	strb	r3, [r7, #31]
 8006e14:	e00b      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006e16:	2304      	movs	r3, #4
 8006e18:	77fb      	strb	r3, [r7, #31]
 8006e1a:	e008      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e005      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006e22:	2310      	movs	r3, #16
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	bf00      	nop
 8006e28:	e001      	b.n	8006e2e <UART_SetConfig+0x34e>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d17f      	bne.n	8006f38 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006e38:	7ffb      	ldrb	r3, [r7, #31]
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d85c      	bhi.n	8006ef8 <UART_SetConfig+0x418>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x364>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e89 	.word	0x08006e89
 8006e4c:	08006ea9 	.word	0x08006ea9
 8006e50:	08006ef9 	.word	0x08006ef9
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006ef9 	.word	0x08006ef9
 8006e5c:	08006ef9 	.word	0x08006ef9
 8006e60:	08006ef9 	.word	0x08006ef9
 8006e64:	08006ee1 	.word	0x08006ee1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fd fff0 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 8006e6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	005a      	lsls	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	441a      	add	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	61bb      	str	r3, [r7, #24]
        break;
 8006e86:	e03a      	b.n	8006efe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e88:	f7fd fff4 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 8006e8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	005a      	lsls	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	441a      	add	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	61bb      	str	r3, [r7, #24]
        break;
 8006ea6:	e02a      	b.n	8006efe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	085a      	lsrs	r2, r3, #1
 8006eae:	4b5f      	ldr	r3, [pc, #380]	; (800702c <UART_SetConfig+0x54c>)
 8006eb0:	4413      	add	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6852      	ldr	r2, [r2, #4]
 8006eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	61bb      	str	r3, [r7, #24]
        break;
 8006ebe:	e01e      	b.n	8006efe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec0:	f7fd fee0 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8006ec4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	005a      	lsls	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	085b      	lsrs	r3, r3, #1
 8006ed0:	441a      	add	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	61bb      	str	r3, [r7, #24]
        break;
 8006ede:	e00e      	b.n	8006efe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	61bb      	str	r3, [r7, #24]
        break;
 8006ef6:	e002      	b.n	8006efe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
        break;
 8006efc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	d916      	bls.n	8006f32 <UART_SetConfig+0x452>
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0a:	d212      	bcs.n	8006f32 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f023 030f 	bic.w	r3, r3, #15
 8006f14:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	897a      	ldrh	r2, [r7, #10]
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	e070      	b.n	8007014 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	75fb      	strb	r3, [r7, #23]
 8006f36:	e06d      	b.n	8007014 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006f38:	7ffb      	ldrb	r3, [r7, #31]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d859      	bhi.n	8006ff2 <UART_SetConfig+0x512>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x464>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f87 	.word	0x08006f87
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006ff3 	.word	0x08006ff3
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	08006ff3 	.word	0x08006ff3
 8006f5c:	08006ff3 	.word	0x08006ff3
 8006f60:	08006ff3 	.word	0x08006ff3
 8006f64:	08006fdb 	.word	0x08006fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f68:	f7fd ff70 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 8006f6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	085a      	lsrs	r2, r3, #1
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	61bb      	str	r3, [r7, #24]
        break;
 8006f84:	e038      	b.n	8006ff8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f86:	f7fd ff75 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 8006f8a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	085a      	lsrs	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	441a      	add	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	61bb      	str	r3, [r7, #24]
        break;
 8006fa2:	e029      	b.n	8006ff8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	085a      	lsrs	r2, r3, #1
 8006faa:	4b21      	ldr	r3, [pc, #132]	; (8007030 <UART_SetConfig+0x550>)
 8006fac:	4413      	add	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6852      	ldr	r2, [r2, #4]
 8006fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	61bb      	str	r3, [r7, #24]
        break;
 8006fba:	e01d      	b.n	8006ff8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fbc:	f7fd fe62 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8006fc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	085a      	lsrs	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	441a      	add	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	61bb      	str	r3, [r7, #24]
        break;
 8006fd8:	e00e      	b.n	8006ff8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e002      	b.n	8006ff8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
        break;
 8006ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b0f      	cmp	r3, #15
 8006ffc:	d908      	bls.n	8007010 <UART_SetConfig+0x530>
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007004:	d204      	bcs.n	8007010 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	e001      	b.n	8007014 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	01e84800 	.word	0x01e84800
 8007030:	00f42400 	.word	0x00f42400

08007034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01a      	beq.n	800714a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007132:	d10a      	bne.n	800714a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	605a      	str	r2, [r3, #4]
  }
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af02      	add	r7, sp, #8
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007186:	f7fc fd1f 	bl	8003bc8 <HAL_GetTick>
 800718a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b08      	cmp	r3, #8
 8007198:	d10e      	bne.n	80071b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800719a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f82a 	bl	8007202 <UART_WaitOnFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e020      	b.n	80071fa <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d10e      	bne.n	80071e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f814 	bl	8007202 <UART_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e00a      	b.n	80071fa <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007212:	e05d      	b.n	80072d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d059      	beq.n	80072d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721c:	f7fc fcd4 	bl	8003bc8 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <UART_WaitOnFlagUntilTimeout+0x30>
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d11b      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007240:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e042      	b.n	80072f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d02b      	beq.n	80072d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007286:	d123      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007290:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2220      	movs	r2, #32
 80072c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e00f      	b.n	80072f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4013      	ands	r3, r2
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d092      	beq.n	8007214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072f8:	b084      	sub	sp, #16
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	f107 001c 	add.w	r0, r7, #28
 8007306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2b01      	cmp	r3, #1
 800730e:	d120      	bne.n	8007352 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	4b20      	ldr	r3, [pc, #128]	; (80073a4 <USB_CoreInit+0xac>)
 8007322:	4013      	ands	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d105      	bne.n	8007346 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa52 	bl	80077f0 <USB_CoreReset>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e010      	b.n	8007374 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa46 	bl	80077f0 <USB_CoreReset>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	2b01      	cmp	r3, #1
 8007378:	d10b      	bne.n	8007392 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f043 0206 	orr.w	r2, r3, #6
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800739e:	b004      	add	sp, #16
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	ffbdffbf 	.word	0xffbdffbf

080073a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f023 0201 	bic.w	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d106      	bne.n	80073f6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
 80073f4:	e00b      	b.n	800740e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e001      	b.n	800740e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e003      	b.n	8007416 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800740e:	2032      	movs	r0, #50	; 0x32
 8007410:	f7fc fbe6 	bl	8003be0 <HAL_Delay>

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007420:	b084      	sub	sp, #16
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800742e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	e009      	b.n	8007454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3340      	adds	r3, #64	; 0x40
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	2200      	movs	r2, #0
 800744c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3301      	adds	r3, #1
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b0e      	cmp	r3, #14
 8007458:	d9f2      	bls.n	8007440 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d11c      	bne.n	800749a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746e:	f043 0302 	orr.w	r3, r3, #2
 8007472:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e005      	b.n	80074a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ac:	461a      	mov	r2, r3
 80074ae:	2300      	movs	r3, #0
 80074b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	4619      	mov	r1, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c0:	461a      	mov	r2, r3
 80074c2:	680b      	ldr	r3, [r1, #0]
 80074c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d10c      	bne.n	80074e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074d2:	2100      	movs	r1, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f959 	bl	800778c <USB_SetDevSpeed>
 80074da:	e018      	b.n	800750e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074dc:	2101      	movs	r1, #1
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f954 	bl	800778c <USB_SetDevSpeed>
 80074e4:	e013      	b.n	800750e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d10c      	bne.n	8007506 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074f2:	2100      	movs	r1, #0
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f949 	bl	800778c <USB_SetDevSpeed>
 80074fa:	e008      	b.n	800750e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074fc:	2101      	movs	r1, #1
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f944 	bl	800778c <USB_SetDevSpeed>
 8007504:	e003      	b.n	800750e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007506:	2103      	movs	r1, #3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f93f 	bl	800778c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800750e:	2110      	movs	r1, #16
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8f3 	bl	80076fc <USB_FlushTxFifo>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f911 	bl	8007748 <USB_FlushRxFifo>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	461a      	mov	r2, r3
 8007538:	2300      	movs	r3, #0
 800753a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	461a      	mov	r2, r3
 8007544:	2300      	movs	r3, #0
 8007546:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754e:	461a      	mov	r2, r3
 8007550:	2300      	movs	r3, #0
 8007552:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	e043      	b.n	80075e2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800756c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007570:	d118      	bne.n	80075a4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	461a      	mov	r2, r3
 8007586:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e013      	b.n	80075b6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	461a      	mov	r2, r3
 800759c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	e008      	b.n	80075b6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b0:	461a      	mov	r2, r3
 80075b2:	2300      	movs	r3, #0
 80075b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	461a      	mov	r2, r3
 80075c4:	2300      	movs	r3, #0
 80075c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	461a      	mov	r2, r3
 80075d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	3301      	adds	r3, #1
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d3b7      	bcc.n	800755a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	e043      	b.n	8007678 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007606:	d118      	bne.n	800763a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	461a      	mov	r2, r3
 800761c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	e013      	b.n	800764c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007630:	461a      	mov	r2, r3
 8007632:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	e008      	b.n	800764c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	461a      	mov	r2, r3
 8007648:	2300      	movs	r3, #0
 800764a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	461a      	mov	r2, r3
 800765a:	2300      	movs	r3, #0
 800765c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	461a      	mov	r2, r3
 800766c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007670:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	3301      	adds	r3, #1
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	429a      	cmp	r2, r3
 800767e:	d3b7      	bcc.n	80075f0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800768e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007692:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f043 0210 	orr.w	r2, r3, #16
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <USB_DevInit+0x2d4>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f043 0208 	orr.w	r2, r3, #8
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d105      	bne.n	80076e4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699a      	ldr	r2, [r3, #24]
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <USB_DevInit+0x2d8>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f0:	b004      	add	sp, #16
 80076f2:	4770      	bx	lr
 80076f4:	803c3800 	.word	0x803c3800
 80076f8:	40000004 	.word	0x40000004

080076fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	019b      	lsls	r3, r3, #6
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a09      	ldr	r2, [pc, #36]	; (8007744 <USB_FlushTxFifo+0x48>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d901      	bls.n	8007728 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e006      	b.n	8007736 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b20      	cmp	r3, #32
 8007732:	d0f0      	beq.n	8007716 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	00030d40 	.word	0x00030d40

08007748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2210      	movs	r2, #16
 8007758:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <USB_FlushRxFifo+0x40>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d901      	bls.n	800776c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e006      	b.n	800777a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b10      	cmp	r3, #16
 8007776:	d0f0      	beq.n	800775a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	00030d40 	.word	0x00030d40

0800778c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ac:	4313      	orrs	r3, r2
 80077ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80077de:	2003      	movs	r0, #3
 80077e0:	f7fc f9fe 	bl	8003be0 <HAL_Delay>

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4a13      	ldr	r2, [pc, #76]	; (8007854 <USB_CoreReset+0x64>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d901      	bls.n	800780e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e01b      	b.n	8007846 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	daf2      	bge.n	80077fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4a09      	ldr	r2, [pc, #36]	; (8007854 <USB_CoreReset+0x64>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e006      	b.n	8007846 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d0f0      	beq.n	8007826 <USB_CoreReset+0x36>

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	00030d40 	.word	0x00030d40

08007858 <__errno>:
 8007858:	4b01      	ldr	r3, [pc, #4]	; (8007860 <__errno+0x8>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000024 	.word	0x20000024

08007864 <__libc_init_array>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	4e0d      	ldr	r6, [pc, #52]	; (800789c <__libc_init_array+0x38>)
 8007868:	4c0d      	ldr	r4, [pc, #52]	; (80078a0 <__libc_init_array+0x3c>)
 800786a:	1ba4      	subs	r4, r4, r6
 800786c:	10a4      	asrs	r4, r4, #2
 800786e:	2500      	movs	r5, #0
 8007870:	42a5      	cmp	r5, r4
 8007872:	d109      	bne.n	8007888 <__libc_init_array+0x24>
 8007874:	4e0b      	ldr	r6, [pc, #44]	; (80078a4 <__libc_init_array+0x40>)
 8007876:	4c0c      	ldr	r4, [pc, #48]	; (80078a8 <__libc_init_array+0x44>)
 8007878:	f002 fb1c 	bl	8009eb4 <_init>
 800787c:	1ba4      	subs	r4, r4, r6
 800787e:	10a4      	asrs	r4, r4, #2
 8007880:	2500      	movs	r5, #0
 8007882:	42a5      	cmp	r5, r4
 8007884:	d105      	bne.n	8007892 <__libc_init_array+0x2e>
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800788c:	4798      	blx	r3
 800788e:	3501      	adds	r5, #1
 8007890:	e7ee      	b.n	8007870 <__libc_init_array+0xc>
 8007892:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007896:	4798      	blx	r3
 8007898:	3501      	adds	r5, #1
 800789a:	e7f2      	b.n	8007882 <__libc_init_array+0x1e>
 800789c:	0800a1c8 	.word	0x0800a1c8
 80078a0:	0800a1c8 	.word	0x0800a1c8
 80078a4:	0800a1c8 	.word	0x0800a1c8
 80078a8:	0800a1cc 	.word	0x0800a1cc

080078ac <memset>:
 80078ac:	4402      	add	r2, r0
 80078ae:	4603      	mov	r3, r0
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d100      	bne.n	80078b6 <memset+0xa>
 80078b4:	4770      	bx	lr
 80078b6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ba:	e7f9      	b.n	80078b0 <memset+0x4>

080078bc <__cvt>:
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	ed2d 8b02 	vpush	{d8}
 80078c2:	eeb0 8b40 	vmov.f64	d8, d0
 80078c6:	b085      	sub	sp, #20
 80078c8:	4617      	mov	r7, r2
 80078ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80078cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078ce:	ee18 2a90 	vmov	r2, s17
 80078d2:	f025 0520 	bic.w	r5, r5, #32
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	bfb6      	itet	lt
 80078da:	222d      	movlt	r2, #45	; 0x2d
 80078dc:	2200      	movge	r2, #0
 80078de:	eeb1 8b40 	vneglt.f64	d8, d0
 80078e2:	2d46      	cmp	r5, #70	; 0x46
 80078e4:	460c      	mov	r4, r1
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	d004      	beq.n	80078f4 <__cvt+0x38>
 80078ea:	2d45      	cmp	r5, #69	; 0x45
 80078ec:	d100      	bne.n	80078f0 <__cvt+0x34>
 80078ee:	3401      	adds	r4, #1
 80078f0:	2102      	movs	r1, #2
 80078f2:	e000      	b.n	80078f6 <__cvt+0x3a>
 80078f4:	2103      	movs	r1, #3
 80078f6:	ab03      	add	r3, sp, #12
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	ab02      	add	r3, sp, #8
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4622      	mov	r2, r4
 8007900:	4633      	mov	r3, r6
 8007902:	eeb0 0b48 	vmov.f64	d0, d8
 8007906:	f000 fddb 	bl	80084c0 <_dtoa_r>
 800790a:	2d47      	cmp	r5, #71	; 0x47
 800790c:	d101      	bne.n	8007912 <__cvt+0x56>
 800790e:	07fb      	lsls	r3, r7, #31
 8007910:	d51e      	bpl.n	8007950 <__cvt+0x94>
 8007912:	2d46      	cmp	r5, #70	; 0x46
 8007914:	eb00 0304 	add.w	r3, r0, r4
 8007918:	d10c      	bne.n	8007934 <__cvt+0x78>
 800791a:	7802      	ldrb	r2, [r0, #0]
 800791c:	2a30      	cmp	r2, #48	; 0x30
 800791e:	d107      	bne.n	8007930 <__cvt+0x74>
 8007920:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007928:	bf1c      	itt	ne
 800792a:	f1c4 0401 	rsbne	r4, r4, #1
 800792e:	6034      	strne	r4, [r6, #0]
 8007930:	6832      	ldr	r2, [r6, #0]
 8007932:	4413      	add	r3, r2
 8007934:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	d007      	beq.n	800794e <__cvt+0x92>
 800793e:	2130      	movs	r1, #48	; 0x30
 8007940:	9a03      	ldr	r2, [sp, #12]
 8007942:	429a      	cmp	r2, r3
 8007944:	d204      	bcs.n	8007950 <__cvt+0x94>
 8007946:	1c54      	adds	r4, r2, #1
 8007948:	9403      	str	r4, [sp, #12]
 800794a:	7011      	strb	r1, [r2, #0]
 800794c:	e7f8      	b.n	8007940 <__cvt+0x84>
 800794e:	9303      	str	r3, [sp, #12]
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007954:	1a1b      	subs	r3, r3, r0
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	b005      	add	sp, #20
 800795a:	ecbd 8b02 	vpop	{d8}
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007960 <__exponent>:
 8007960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007962:	2900      	cmp	r1, #0
 8007964:	4604      	mov	r4, r0
 8007966:	bfba      	itte	lt
 8007968:	4249      	neglt	r1, r1
 800796a:	232d      	movlt	r3, #45	; 0x2d
 800796c:	232b      	movge	r3, #43	; 0x2b
 800796e:	2909      	cmp	r1, #9
 8007970:	f804 2b02 	strb.w	r2, [r4], #2
 8007974:	7043      	strb	r3, [r0, #1]
 8007976:	dd20      	ble.n	80079ba <__exponent+0x5a>
 8007978:	f10d 0307 	add.w	r3, sp, #7
 800797c:	461f      	mov	r7, r3
 800797e:	260a      	movs	r6, #10
 8007980:	fb91 f5f6 	sdiv	r5, r1, r6
 8007984:	fb06 1115 	mls	r1, r6, r5, r1
 8007988:	3130      	adds	r1, #48	; 0x30
 800798a:	2d09      	cmp	r5, #9
 800798c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007990:	f103 32ff 	add.w	r2, r3, #4294967295
 8007994:	4629      	mov	r1, r5
 8007996:	dc09      	bgt.n	80079ac <__exponent+0x4c>
 8007998:	3130      	adds	r1, #48	; 0x30
 800799a:	3b02      	subs	r3, #2
 800799c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079a0:	42bb      	cmp	r3, r7
 80079a2:	4622      	mov	r2, r4
 80079a4:	d304      	bcc.n	80079b0 <__exponent+0x50>
 80079a6:	1a10      	subs	r0, r2, r0
 80079a8:	b003      	add	sp, #12
 80079aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ac:	4613      	mov	r3, r2
 80079ae:	e7e7      	b.n	8007980 <__exponent+0x20>
 80079b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b4:	f804 2b01 	strb.w	r2, [r4], #1
 80079b8:	e7f2      	b.n	80079a0 <__exponent+0x40>
 80079ba:	2330      	movs	r3, #48	; 0x30
 80079bc:	4419      	add	r1, r3
 80079be:	7083      	strb	r3, [r0, #2]
 80079c0:	1d02      	adds	r2, r0, #4
 80079c2:	70c1      	strb	r1, [r0, #3]
 80079c4:	e7ef      	b.n	80079a6 <__exponent+0x46>
	...

080079c8 <_printf_float>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	b08d      	sub	sp, #52	; 0x34
 80079ce:	460c      	mov	r4, r1
 80079d0:	4616      	mov	r6, r2
 80079d2:	461f      	mov	r7, r3
 80079d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80079d8:	4605      	mov	r5, r0
 80079da:	f001 fc37 	bl	800924c <_localeconv_r>
 80079de:	f8d0 b000 	ldr.w	fp, [r0]
 80079e2:	4658      	mov	r0, fp
 80079e4:	f7f8 fc2c 	bl	8000240 <strlen>
 80079e8:	2300      	movs	r3, #0
 80079ea:	930a      	str	r3, [sp, #40]	; 0x28
 80079ec:	f8d8 3000 	ldr.w	r3, [r8]
 80079f0:	9005      	str	r0, [sp, #20]
 80079f2:	3307      	adds	r3, #7
 80079f4:	f023 0307 	bic.w	r3, r3, #7
 80079f8:	f103 0108 	add.w	r1, r3, #8
 80079fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	f8c8 1000 	str.w	r1, [r8]
 8007a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007a0e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007c98 <_printf_float+0x2d0>
 8007a12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007a16:	eeb0 6bc0 	vabs.f64	d6, d0
 8007a1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	dd24      	ble.n	8007a6e <_printf_float+0xa6>
 8007a24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	d502      	bpl.n	8007a34 <_printf_float+0x6c>
 8007a2e:	232d      	movs	r3, #45	; 0x2d
 8007a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a34:	499a      	ldr	r1, [pc, #616]	; (8007ca0 <_printf_float+0x2d8>)
 8007a36:	4b9b      	ldr	r3, [pc, #620]	; (8007ca4 <_printf_float+0x2dc>)
 8007a38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a3c:	bf8c      	ite	hi
 8007a3e:	4688      	movhi	r8, r1
 8007a40:	4698      	movls	r8, r3
 8007a42:	f022 0204 	bic.w	r2, r2, #4
 8007a46:	2303      	movs	r3, #3
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	f04f 0a00 	mov.w	sl, #0
 8007a50:	9700      	str	r7, [sp, #0]
 8007a52:	4633      	mov	r3, r6
 8007a54:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 f9e1 	bl	8007e20 <_printf_common>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f040 8089 	bne.w	8007b76 <_printf_float+0x1ae>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b00d      	add	sp, #52	; 0x34
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a76:	d702      	bvc.n	8007a7e <_printf_float+0xb6>
 8007a78:	498b      	ldr	r1, [pc, #556]	; (8007ca8 <_printf_float+0x2e0>)
 8007a7a:	4b8c      	ldr	r3, [pc, #560]	; (8007cac <_printf_float+0x2e4>)
 8007a7c:	e7dc      	b.n	8007a38 <_printf_float+0x70>
 8007a7e:	6861      	ldr	r1, [r4, #4]
 8007a80:	1c4b      	adds	r3, r1, #1
 8007a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a86:	ab0a      	add	r3, sp, #40	; 0x28
 8007a88:	a809      	add	r0, sp, #36	; 0x24
 8007a8a:	d13b      	bne.n	8007b04 <_printf_float+0x13c>
 8007a8c:	2106      	movs	r1, #6
 8007a8e:	6061      	str	r1, [r4, #4]
 8007a90:	f04f 0c00 	mov.w	ip, #0
 8007a94:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007a98:	e9cd 0900 	strd	r0, r9, [sp]
 8007a9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	6861      	ldr	r1, [r4, #4]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f7ff ff09 	bl	80078bc <__cvt>
 8007aaa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007aae:	2b47      	cmp	r3, #71	; 0x47
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	d109      	bne.n	8007ac8 <_printf_float+0x100>
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	1cd8      	adds	r0, r3, #3
 8007ab8:	db02      	blt.n	8007ac0 <_printf_float+0xf8>
 8007aba:	6862      	ldr	r2, [r4, #4]
 8007abc:	4293      	cmp	r3, r2
 8007abe:	dd47      	ble.n	8007b50 <_printf_float+0x188>
 8007ac0:	f1a9 0902 	sub.w	r9, r9, #2
 8007ac4:	fa5f f989 	uxtb.w	r9, r9
 8007ac8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ace:	d824      	bhi.n	8007b1a <_printf_float+0x152>
 8007ad0:	3901      	subs	r1, #1
 8007ad2:	464a      	mov	r2, r9
 8007ad4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ad8:	9109      	str	r1, [sp, #36]	; 0x24
 8007ada:	f7ff ff41 	bl	8007960 <__exponent>
 8007ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ae0:	1813      	adds	r3, r2, r0
 8007ae2:	2a01      	cmp	r2, #1
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	dc02      	bgt.n	8007af0 <_printf_float+0x128>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	07d1      	lsls	r1, r2, #31
 8007aee:	d501      	bpl.n	8007af4 <_printf_float+0x12c>
 8007af0:	3301      	adds	r3, #1
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0a9      	beq.n	8007a50 <_printf_float+0x88>
 8007afc:	232d      	movs	r3, #45	; 0x2d
 8007afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b02:	e7a5      	b.n	8007a50 <_printf_float+0x88>
 8007b04:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007b08:	f000 8178 	beq.w	8007dfc <_printf_float+0x434>
 8007b0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007b10:	d1be      	bne.n	8007a90 <_printf_float+0xc8>
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d1bc      	bne.n	8007a90 <_printf_float+0xc8>
 8007b16:	2101      	movs	r1, #1
 8007b18:	e7b9      	b.n	8007a8e <_printf_float+0xc6>
 8007b1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b1e:	d119      	bne.n	8007b54 <_printf_float+0x18c>
 8007b20:	2900      	cmp	r1, #0
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	dd0c      	ble.n	8007b40 <_printf_float+0x178>
 8007b26:	6121      	str	r1, [r4, #16]
 8007b28:	b913      	cbnz	r3, 8007b30 <_printf_float+0x168>
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	07d2      	lsls	r2, r2, #31
 8007b2e:	d502      	bpl.n	8007b36 <_printf_float+0x16e>
 8007b30:	3301      	adds	r3, #1
 8007b32:	440b      	add	r3, r1
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b3a:	f04f 0a00 	mov.w	sl, #0
 8007b3e:	e7d9      	b.n	8007af4 <_printf_float+0x12c>
 8007b40:	b913      	cbnz	r3, 8007b48 <_printf_float+0x180>
 8007b42:	6822      	ldr	r2, [r4, #0]
 8007b44:	07d0      	lsls	r0, r2, #31
 8007b46:	d501      	bpl.n	8007b4c <_printf_float+0x184>
 8007b48:	3302      	adds	r3, #2
 8007b4a:	e7f3      	b.n	8007b34 <_printf_float+0x16c>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e7f1      	b.n	8007b34 <_printf_float+0x16c>
 8007b50:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	db05      	blt.n	8007b68 <_printf_float+0x1a0>
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	6123      	str	r3, [r4, #16]
 8007b60:	07d1      	lsls	r1, r2, #31
 8007b62:	d5e8      	bpl.n	8007b36 <_printf_float+0x16e>
 8007b64:	3301      	adds	r3, #1
 8007b66:	e7e5      	b.n	8007b34 <_printf_float+0x16c>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bfd4      	ite	le
 8007b6c:	f1c3 0302 	rsble	r3, r3, #2
 8007b70:	2301      	movgt	r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	e7de      	b.n	8007b34 <_printf_float+0x16c>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	055a      	lsls	r2, r3, #21
 8007b7a:	d407      	bmi.n	8007b8c <_printf_float+0x1c4>
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	4642      	mov	r2, r8
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	d12a      	bne.n	8007be0 <_printf_float+0x218>
 8007b8a:	e76b      	b.n	8007a64 <_printf_float+0x9c>
 8007b8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b90:	f240 80de 	bls.w	8007d50 <_printf_float+0x388>
 8007b94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba0:	d133      	bne.n	8007c0a <_printf_float+0x242>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4a42      	ldr	r2, [pc, #264]	; (8007cb0 <_printf_float+0x2e8>)
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f af59 	beq.w	8007a64 <_printf_float+0x9c>
 8007bb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	db02      	blt.n	8007bc0 <_printf_float+0x1f8>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	07d8      	lsls	r0, r3, #31
 8007bbe:	d50f      	bpl.n	8007be0 <_printf_float+0x218>
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	465a      	mov	r2, fp
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f af4a 	beq.w	8007a64 <_printf_float+0x9c>
 8007bd0:	f04f 0800 	mov.w	r8, #0
 8007bd4:	f104 091a 	add.w	r9, r4, #26
 8007bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4543      	cmp	r3, r8
 8007bde:	dc09      	bgt.n	8007bf4 <_printf_float+0x22c>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	079b      	lsls	r3, r3, #30
 8007be4:	f100 8105 	bmi.w	8007df2 <_printf_float+0x42a>
 8007be8:	68e0      	ldr	r0, [r4, #12]
 8007bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bec:	4298      	cmp	r0, r3
 8007bee:	bfb8      	it	lt
 8007bf0:	4618      	movlt	r0, r3
 8007bf2:	e739      	b.n	8007a68 <_printf_float+0xa0>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	464a      	mov	r2, r9
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f af30 	beq.w	8007a64 <_printf_float+0x9c>
 8007c04:	f108 0801 	add.w	r8, r8, #1
 8007c08:	e7e6      	b.n	8007bd8 <_printf_float+0x210>
 8007c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dc2b      	bgt.n	8007c68 <_printf_float+0x2a0>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4a27      	ldr	r2, [pc, #156]	; (8007cb0 <_printf_float+0x2e8>)
 8007c14:	4631      	mov	r1, r6
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f af22 	beq.w	8007a64 <_printf_float+0x9c>
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	b923      	cbnz	r3, 8007c2e <_printf_float+0x266>
 8007c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c26:	b913      	cbnz	r3, 8007c2e <_printf_float+0x266>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d5d8      	bpl.n	8007be0 <_printf_float+0x218>
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	465a      	mov	r2, fp
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f af13 	beq.w	8007a64 <_printf_float+0x9c>
 8007c3e:	f04f 0900 	mov.w	r9, #0
 8007c42:	f104 0a1a 	add.w	sl, r4, #26
 8007c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c48:	425b      	negs	r3, r3
 8007c4a:	454b      	cmp	r3, r9
 8007c4c:	dc01      	bgt.n	8007c52 <_printf_float+0x28a>
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	e795      	b.n	8007b7e <_printf_float+0x1b6>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4652      	mov	r2, sl
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f af01 	beq.w	8007a64 <_printf_float+0x9c>
 8007c62:	f109 0901 	add.w	r9, r9, #1
 8007c66:	e7ee      	b.n	8007c46 <_printf_float+0x27e>
 8007c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	bfa8      	it	ge
 8007c70:	461a      	movge	r2, r3
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	4691      	mov	r9, r2
 8007c76:	dd07      	ble.n	8007c88 <_printf_float+0x2c0>
 8007c78:	4613      	mov	r3, r2
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f aeee 	beq.w	8007a64 <_printf_float+0x9c>
 8007c88:	f104 031a 	add.w	r3, r4, #26
 8007c8c:	f04f 0a00 	mov.w	sl, #0
 8007c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	e017      	b.n	8007cc8 <_printf_float+0x300>
 8007c98:	ffffffff 	.word	0xffffffff
 8007c9c:	7fefffff 	.word	0x7fefffff
 8007ca0:	08009f04 	.word	0x08009f04
 8007ca4:	08009f00 	.word	0x08009f00
 8007ca8:	08009f0c 	.word	0x08009f0c
 8007cac:	08009f08 	.word	0x08009f08
 8007cb0:	08009f10 	.word	0x08009f10
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	9a07      	ldr	r2, [sp, #28]
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f aed0 	beq.w	8007a64 <_printf_float+0x9c>
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cca:	9306      	str	r3, [sp, #24]
 8007ccc:	eba3 0309 	sub.w	r3, r3, r9
 8007cd0:	4553      	cmp	r3, sl
 8007cd2:	dcef      	bgt.n	8007cb4 <_printf_float+0x2ec>
 8007cd4:	9b06      	ldr	r3, [sp, #24]
 8007cd6:	4498      	add	r8, r3
 8007cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	db15      	blt.n	8007d0c <_printf_float+0x344>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d412      	bmi.n	8007d0c <_printf_float+0x344>
 8007ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce8:	9a06      	ldr	r2, [sp, #24]
 8007cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cec:	1a9a      	subs	r2, r3, r2
 8007cee:	eba3 0a01 	sub.w	sl, r3, r1
 8007cf2:	4592      	cmp	sl, r2
 8007cf4:	bfa8      	it	ge
 8007cf6:	4692      	movge	sl, r2
 8007cf8:	f1ba 0f00 	cmp.w	sl, #0
 8007cfc:	dc0e      	bgt.n	8007d1c <_printf_float+0x354>
 8007cfe:	f04f 0800 	mov.w	r8, #0
 8007d02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d06:	f104 091a 	add.w	r9, r4, #26
 8007d0a:	e019      	b.n	8007d40 <_printf_float+0x378>
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	465a      	mov	r2, fp
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	d1e5      	bne.n	8007ce6 <_printf_float+0x31e>
 8007d1a:	e6a3      	b.n	8007a64 <_printf_float+0x9c>
 8007d1c:	4653      	mov	r3, sl
 8007d1e:	4642      	mov	r2, r8
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	d1e9      	bne.n	8007cfe <_printf_float+0x336>
 8007d2a:	e69b      	b.n	8007a64 <_printf_float+0x9c>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	464a      	mov	r2, r9
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f ae94 	beq.w	8007a64 <_printf_float+0x9c>
 8007d3c:	f108 0801 	add.w	r8, r8, #1
 8007d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	eba3 030a 	sub.w	r3, r3, sl
 8007d4a:	4543      	cmp	r3, r8
 8007d4c:	dcee      	bgt.n	8007d2c <_printf_float+0x364>
 8007d4e:	e747      	b.n	8007be0 <_printf_float+0x218>
 8007d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d52:	2a01      	cmp	r2, #1
 8007d54:	dc01      	bgt.n	8007d5a <_printf_float+0x392>
 8007d56:	07db      	lsls	r3, r3, #31
 8007d58:	d539      	bpl.n	8007dce <_printf_float+0x406>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	f43f ae7d 	beq.w	8007a64 <_printf_float+0x9c>
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	465a      	mov	r2, fp
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	f43f ae73 	beq.w	8007a64 <_printf_float+0x9c>
 8007d7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d90:	d018      	beq.n	8007dc4 <_printf_float+0x3fc>
 8007d92:	4642      	mov	r2, r8
 8007d94:	4631      	mov	r1, r6
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b8      	blx	r7
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d10e      	bne.n	8007dbc <_printf_float+0x3f4>
 8007d9e:	e661      	b.n	8007a64 <_printf_float+0x9c>
 8007da0:	2301      	movs	r3, #1
 8007da2:	464a      	mov	r2, r9
 8007da4:	4631      	mov	r1, r6
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f ae5a 	beq.w	8007a64 <_printf_float+0x9c>
 8007db0:	f108 0801 	add.w	r8, r8, #1
 8007db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db6:	3b01      	subs	r3, #1
 8007db8:	4543      	cmp	r3, r8
 8007dba:	dcf1      	bgt.n	8007da0 <_printf_float+0x3d8>
 8007dbc:	4653      	mov	r3, sl
 8007dbe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dc2:	e6dd      	b.n	8007b80 <_printf_float+0x1b8>
 8007dc4:	f04f 0800 	mov.w	r8, #0
 8007dc8:	f104 091a 	add.w	r9, r4, #26
 8007dcc:	e7f2      	b.n	8007db4 <_printf_float+0x3ec>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e7df      	b.n	8007d92 <_printf_float+0x3ca>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	464a      	mov	r2, r9
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae41 	beq.w	8007a64 <_printf_float+0x9c>
 8007de2:	f108 0801 	add.w	r8, r8, #1
 8007de6:	68e3      	ldr	r3, [r4, #12]
 8007de8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	4543      	cmp	r3, r8
 8007dee:	dcf0      	bgt.n	8007dd2 <_printf_float+0x40a>
 8007df0:	e6fa      	b.n	8007be8 <_printf_float+0x220>
 8007df2:	f04f 0800 	mov.w	r8, #0
 8007df6:	f104 0919 	add.w	r9, r4, #25
 8007dfa:	e7f4      	b.n	8007de6 <_printf_float+0x41e>
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	f43f ae8a 	beq.w	8007b16 <_printf_float+0x14e>
 8007e02:	f04f 0c00 	mov.w	ip, #0
 8007e06:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007e0a:	e9cd 0900 	strd	r0, r9, [sp]
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e14:	4628      	mov	r0, r5
 8007e16:	f7ff fd51 	bl	80078bc <__cvt>
 8007e1a:	4680      	mov	r8, r0
 8007e1c:	e64a      	b.n	8007ab4 <_printf_float+0xec>
 8007e1e:	bf00      	nop

08007e20 <_printf_common>:
 8007e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	4691      	mov	r9, r2
 8007e26:	461f      	mov	r7, r3
 8007e28:	688a      	ldr	r2, [r1, #8]
 8007e2a:	690b      	ldr	r3, [r1, #16]
 8007e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e30:	4293      	cmp	r3, r2
 8007e32:	bfb8      	it	lt
 8007e34:	4613      	movlt	r3, r2
 8007e36:	f8c9 3000 	str.w	r3, [r9]
 8007e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e3e:	4606      	mov	r6, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	b112      	cbz	r2, 8007e4a <_printf_common+0x2a>
 8007e44:	3301      	adds	r3, #1
 8007e46:	f8c9 3000 	str.w	r3, [r9]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	0699      	lsls	r1, r3, #26
 8007e4e:	bf42      	ittt	mi
 8007e50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e54:	3302      	addmi	r3, #2
 8007e56:	f8c9 3000 	strmi.w	r3, [r9]
 8007e5a:	6825      	ldr	r5, [r4, #0]
 8007e5c:	f015 0506 	ands.w	r5, r5, #6
 8007e60:	d107      	bne.n	8007e72 <_printf_common+0x52>
 8007e62:	f104 0a19 	add.w	sl, r4, #25
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	f8d9 2000 	ldr.w	r2, [r9]
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	dc28      	bgt.n	8007ec4 <_printf_common+0xa4>
 8007e72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	3300      	adds	r3, #0
 8007e7a:	bf18      	it	ne
 8007e7c:	2301      	movne	r3, #1
 8007e7e:	0692      	lsls	r2, r2, #26
 8007e80:	d42d      	bmi.n	8007ede <_printf_common+0xbe>
 8007e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e86:	4639      	mov	r1, r7
 8007e88:	4630      	mov	r0, r6
 8007e8a:	47c0      	blx	r8
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d020      	beq.n	8007ed2 <_printf_common+0xb2>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	68e5      	ldr	r5, [r4, #12]
 8007e94:	f8d9 2000 	ldr.w	r2, [r9]
 8007e98:	f003 0306 	and.w	r3, r3, #6
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	bf08      	it	eq
 8007ea0:	1aad      	subeq	r5, r5, r2
 8007ea2:	68a3      	ldr	r3, [r4, #8]
 8007ea4:	6922      	ldr	r2, [r4, #16]
 8007ea6:	bf0c      	ite	eq
 8007ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eac:	2500      	movne	r5, #0
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	bfc4      	itt	gt
 8007eb2:	1a9b      	subgt	r3, r3, r2
 8007eb4:	18ed      	addgt	r5, r5, r3
 8007eb6:	f04f 0900 	mov.w	r9, #0
 8007eba:	341a      	adds	r4, #26
 8007ebc:	454d      	cmp	r5, r9
 8007ebe:	d11a      	bne.n	8007ef6 <_printf_common+0xd6>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	e008      	b.n	8007ed6 <_printf_common+0xb6>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	4652      	mov	r2, sl
 8007ec8:	4639      	mov	r1, r7
 8007eca:	4630      	mov	r0, r6
 8007ecc:	47c0      	blx	r8
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d103      	bne.n	8007eda <_printf_common+0xba>
 8007ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eda:	3501      	adds	r5, #1
 8007edc:	e7c3      	b.n	8007e66 <_printf_common+0x46>
 8007ede:	18e1      	adds	r1, r4, r3
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	2030      	movs	r0, #48	; 0x30
 8007ee4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ee8:	4422      	add	r2, r4
 8007eea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	e7c5      	b.n	8007e82 <_printf_common+0x62>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4622      	mov	r2, r4
 8007efa:	4639      	mov	r1, r7
 8007efc:	4630      	mov	r0, r6
 8007efe:	47c0      	blx	r8
 8007f00:	3001      	adds	r0, #1
 8007f02:	d0e6      	beq.n	8007ed2 <_printf_common+0xb2>
 8007f04:	f109 0901 	add.w	r9, r9, #1
 8007f08:	e7d8      	b.n	8007ebc <_printf_common+0x9c>
	...

08007f0c <_printf_i>:
 8007f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f14:	460c      	mov	r4, r1
 8007f16:	7e09      	ldrb	r1, [r1, #24]
 8007f18:	b085      	sub	sp, #20
 8007f1a:	296e      	cmp	r1, #110	; 0x6e
 8007f1c:	4617      	mov	r7, r2
 8007f1e:	4606      	mov	r6, r0
 8007f20:	4698      	mov	r8, r3
 8007f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f24:	f000 80b3 	beq.w	800808e <_printf_i+0x182>
 8007f28:	d822      	bhi.n	8007f70 <_printf_i+0x64>
 8007f2a:	2963      	cmp	r1, #99	; 0x63
 8007f2c:	d036      	beq.n	8007f9c <_printf_i+0x90>
 8007f2e:	d80a      	bhi.n	8007f46 <_printf_i+0x3a>
 8007f30:	2900      	cmp	r1, #0
 8007f32:	f000 80b9 	beq.w	80080a8 <_printf_i+0x19c>
 8007f36:	2958      	cmp	r1, #88	; 0x58
 8007f38:	f000 8083 	beq.w	8008042 <_printf_i+0x136>
 8007f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f44:	e032      	b.n	8007fac <_printf_i+0xa0>
 8007f46:	2964      	cmp	r1, #100	; 0x64
 8007f48:	d001      	beq.n	8007f4e <_printf_i+0x42>
 8007f4a:	2969      	cmp	r1, #105	; 0x69
 8007f4c:	d1f6      	bne.n	8007f3c <_printf_i+0x30>
 8007f4e:	6820      	ldr	r0, [r4, #0]
 8007f50:	6813      	ldr	r3, [r2, #0]
 8007f52:	0605      	lsls	r5, r0, #24
 8007f54:	f103 0104 	add.w	r1, r3, #4
 8007f58:	d52a      	bpl.n	8007fb0 <_printf_i+0xa4>
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6011      	str	r1, [r2, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	da03      	bge.n	8007f6a <_printf_i+0x5e>
 8007f62:	222d      	movs	r2, #45	; 0x2d
 8007f64:	425b      	negs	r3, r3
 8007f66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f6a:	486f      	ldr	r0, [pc, #444]	; (8008128 <_printf_i+0x21c>)
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	e039      	b.n	8007fe4 <_printf_i+0xd8>
 8007f70:	2973      	cmp	r1, #115	; 0x73
 8007f72:	f000 809d 	beq.w	80080b0 <_printf_i+0x1a4>
 8007f76:	d808      	bhi.n	8007f8a <_printf_i+0x7e>
 8007f78:	296f      	cmp	r1, #111	; 0x6f
 8007f7a:	d020      	beq.n	8007fbe <_printf_i+0xb2>
 8007f7c:	2970      	cmp	r1, #112	; 0x70
 8007f7e:	d1dd      	bne.n	8007f3c <_printf_i+0x30>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	f043 0320 	orr.w	r3, r3, #32
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	e003      	b.n	8007f92 <_printf_i+0x86>
 8007f8a:	2975      	cmp	r1, #117	; 0x75
 8007f8c:	d017      	beq.n	8007fbe <_printf_i+0xb2>
 8007f8e:	2978      	cmp	r1, #120	; 0x78
 8007f90:	d1d4      	bne.n	8007f3c <_printf_i+0x30>
 8007f92:	2378      	movs	r3, #120	; 0x78
 8007f94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f98:	4864      	ldr	r0, [pc, #400]	; (800812c <_printf_i+0x220>)
 8007f9a:	e055      	b.n	8008048 <_printf_i+0x13c>
 8007f9c:	6813      	ldr	r3, [r2, #0]
 8007f9e:	1d19      	adds	r1, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6011      	str	r1, [r2, #0]
 8007fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fac:	2301      	movs	r3, #1
 8007fae:	e08c      	b.n	80080ca <_printf_i+0x1be>
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6011      	str	r1, [r2, #0]
 8007fb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fb8:	bf18      	it	ne
 8007fba:	b21b      	sxthne	r3, r3
 8007fbc:	e7cf      	b.n	8007f5e <_printf_i+0x52>
 8007fbe:	6813      	ldr	r3, [r2, #0]
 8007fc0:	6825      	ldr	r5, [r4, #0]
 8007fc2:	1d18      	adds	r0, r3, #4
 8007fc4:	6010      	str	r0, [r2, #0]
 8007fc6:	0628      	lsls	r0, r5, #24
 8007fc8:	d501      	bpl.n	8007fce <_printf_i+0xc2>
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	e002      	b.n	8007fd4 <_printf_i+0xc8>
 8007fce:	0668      	lsls	r0, r5, #25
 8007fd0:	d5fb      	bpl.n	8007fca <_printf_i+0xbe>
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	4854      	ldr	r0, [pc, #336]	; (8008128 <_printf_i+0x21c>)
 8007fd6:	296f      	cmp	r1, #111	; 0x6f
 8007fd8:	bf14      	ite	ne
 8007fda:	220a      	movne	r2, #10
 8007fdc:	2208      	moveq	r2, #8
 8007fde:	2100      	movs	r1, #0
 8007fe0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fe4:	6865      	ldr	r5, [r4, #4]
 8007fe6:	60a5      	str	r5, [r4, #8]
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	f2c0 8095 	blt.w	8008118 <_printf_i+0x20c>
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	f021 0104 	bic.w	r1, r1, #4
 8007ff4:	6021      	str	r1, [r4, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d13d      	bne.n	8008076 <_printf_i+0x16a>
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	f040 808e 	bne.w	800811c <_printf_i+0x210>
 8008000:	4665      	mov	r5, ip
 8008002:	2a08      	cmp	r2, #8
 8008004:	d10b      	bne.n	800801e <_printf_i+0x112>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	07db      	lsls	r3, r3, #31
 800800a:	d508      	bpl.n	800801e <_printf_i+0x112>
 800800c:	6923      	ldr	r3, [r4, #16]
 800800e:	6862      	ldr	r2, [r4, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	bfde      	ittt	le
 8008014:	2330      	movle	r3, #48	; 0x30
 8008016:	f805 3c01 	strble.w	r3, [r5, #-1]
 800801a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800801e:	ebac 0305 	sub.w	r3, ip, r5
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	f8cd 8000 	str.w	r8, [sp]
 8008028:	463b      	mov	r3, r7
 800802a:	aa03      	add	r2, sp, #12
 800802c:	4621      	mov	r1, r4
 800802e:	4630      	mov	r0, r6
 8008030:	f7ff fef6 	bl	8007e20 <_printf_common>
 8008034:	3001      	adds	r0, #1
 8008036:	d14d      	bne.n	80080d4 <_printf_i+0x1c8>
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	b005      	add	sp, #20
 800803e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008042:	4839      	ldr	r0, [pc, #228]	; (8008128 <_printf_i+0x21c>)
 8008044:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008048:	6813      	ldr	r3, [r2, #0]
 800804a:	6821      	ldr	r1, [r4, #0]
 800804c:	1d1d      	adds	r5, r3, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6015      	str	r5, [r2, #0]
 8008052:	060a      	lsls	r2, r1, #24
 8008054:	d50b      	bpl.n	800806e <_printf_i+0x162>
 8008056:	07ca      	lsls	r2, r1, #31
 8008058:	bf44      	itt	mi
 800805a:	f041 0120 	orrmi.w	r1, r1, #32
 800805e:	6021      	strmi	r1, [r4, #0]
 8008060:	b91b      	cbnz	r3, 800806a <_printf_i+0x15e>
 8008062:	6822      	ldr	r2, [r4, #0]
 8008064:	f022 0220 	bic.w	r2, r2, #32
 8008068:	6022      	str	r2, [r4, #0]
 800806a:	2210      	movs	r2, #16
 800806c:	e7b7      	b.n	8007fde <_printf_i+0xd2>
 800806e:	064d      	lsls	r5, r1, #25
 8008070:	bf48      	it	mi
 8008072:	b29b      	uxthmi	r3, r3
 8008074:	e7ef      	b.n	8008056 <_printf_i+0x14a>
 8008076:	4665      	mov	r5, ip
 8008078:	fbb3 f1f2 	udiv	r1, r3, r2
 800807c:	fb02 3311 	mls	r3, r2, r1, r3
 8008080:	5cc3      	ldrb	r3, [r0, r3]
 8008082:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008086:	460b      	mov	r3, r1
 8008088:	2900      	cmp	r1, #0
 800808a:	d1f5      	bne.n	8008078 <_printf_i+0x16c>
 800808c:	e7b9      	b.n	8008002 <_printf_i+0xf6>
 800808e:	6813      	ldr	r3, [r2, #0]
 8008090:	6825      	ldr	r5, [r4, #0]
 8008092:	6961      	ldr	r1, [r4, #20]
 8008094:	1d18      	adds	r0, r3, #4
 8008096:	6010      	str	r0, [r2, #0]
 8008098:	0628      	lsls	r0, r5, #24
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	d501      	bpl.n	80080a2 <_printf_i+0x196>
 800809e:	6019      	str	r1, [r3, #0]
 80080a0:	e002      	b.n	80080a8 <_printf_i+0x19c>
 80080a2:	066a      	lsls	r2, r5, #25
 80080a4:	d5fb      	bpl.n	800809e <_printf_i+0x192>
 80080a6:	8019      	strh	r1, [r3, #0]
 80080a8:	2300      	movs	r3, #0
 80080aa:	6123      	str	r3, [r4, #16]
 80080ac:	4665      	mov	r5, ip
 80080ae:	e7b9      	b.n	8008024 <_printf_i+0x118>
 80080b0:	6813      	ldr	r3, [r2, #0]
 80080b2:	1d19      	adds	r1, r3, #4
 80080b4:	6011      	str	r1, [r2, #0]
 80080b6:	681d      	ldr	r5, [r3, #0]
 80080b8:	6862      	ldr	r2, [r4, #4]
 80080ba:	2100      	movs	r1, #0
 80080bc:	4628      	mov	r0, r5
 80080be:	f7f8 f8c7 	bl	8000250 <memchr>
 80080c2:	b108      	cbz	r0, 80080c8 <_printf_i+0x1bc>
 80080c4:	1b40      	subs	r0, r0, r5
 80080c6:	6060      	str	r0, [r4, #4]
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	2300      	movs	r3, #0
 80080ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d2:	e7a7      	b.n	8008024 <_printf_i+0x118>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	462a      	mov	r2, r5
 80080d8:	4639      	mov	r1, r7
 80080da:	4630      	mov	r0, r6
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d0aa      	beq.n	8008038 <_printf_i+0x12c>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	079b      	lsls	r3, r3, #30
 80080e6:	d413      	bmi.n	8008110 <_printf_i+0x204>
 80080e8:	68e0      	ldr	r0, [r4, #12]
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	4298      	cmp	r0, r3
 80080ee:	bfb8      	it	lt
 80080f0:	4618      	movlt	r0, r3
 80080f2:	e7a3      	b.n	800803c <_printf_i+0x130>
 80080f4:	2301      	movs	r3, #1
 80080f6:	464a      	mov	r2, r9
 80080f8:	4639      	mov	r1, r7
 80080fa:	4630      	mov	r0, r6
 80080fc:	47c0      	blx	r8
 80080fe:	3001      	adds	r0, #1
 8008100:	d09a      	beq.n	8008038 <_printf_i+0x12c>
 8008102:	3501      	adds	r5, #1
 8008104:	68e3      	ldr	r3, [r4, #12]
 8008106:	9a03      	ldr	r2, [sp, #12]
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	42ab      	cmp	r3, r5
 800810c:	dcf2      	bgt.n	80080f4 <_printf_i+0x1e8>
 800810e:	e7eb      	b.n	80080e8 <_printf_i+0x1dc>
 8008110:	2500      	movs	r5, #0
 8008112:	f104 0919 	add.w	r9, r4, #25
 8008116:	e7f5      	b.n	8008104 <_printf_i+0x1f8>
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ac      	bne.n	8008076 <_printf_i+0x16a>
 800811c:	7803      	ldrb	r3, [r0, #0]
 800811e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008122:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008126:	e76c      	b.n	8008002 <_printf_i+0xf6>
 8008128:	08009f12 	.word	0x08009f12
 800812c:	08009f23 	.word	0x08009f23

08008130 <iprintf>:
 8008130:	b40f      	push	{r0, r1, r2, r3}
 8008132:	4b0a      	ldr	r3, [pc, #40]	; (800815c <iprintf+0x2c>)
 8008134:	b513      	push	{r0, r1, r4, lr}
 8008136:	681c      	ldr	r4, [r3, #0]
 8008138:	b124      	cbz	r4, 8008144 <iprintf+0x14>
 800813a:	69a3      	ldr	r3, [r4, #24]
 800813c:	b913      	cbnz	r3, 8008144 <iprintf+0x14>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fffa 	bl	8009138 <__sinit>
 8008144:	ab05      	add	r3, sp, #20
 8008146:	9a04      	ldr	r2, [sp, #16]
 8008148:	68a1      	ldr	r1, [r4, #8]
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	4620      	mov	r0, r4
 800814e:	f001 fcbd 	bl	8009acc <_vfiprintf_r>
 8008152:	b002      	add	sp, #8
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	b004      	add	sp, #16
 800815a:	4770      	bx	lr
 800815c:	20000024 	.word	0x20000024

08008160 <_puts_r>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	460e      	mov	r6, r1
 8008164:	4605      	mov	r5, r0
 8008166:	b118      	cbz	r0, 8008170 <_puts_r+0x10>
 8008168:	6983      	ldr	r3, [r0, #24]
 800816a:	b90b      	cbnz	r3, 8008170 <_puts_r+0x10>
 800816c:	f000 ffe4 	bl	8009138 <__sinit>
 8008170:	69ab      	ldr	r3, [r5, #24]
 8008172:	68ac      	ldr	r4, [r5, #8]
 8008174:	b913      	cbnz	r3, 800817c <_puts_r+0x1c>
 8008176:	4628      	mov	r0, r5
 8008178:	f000 ffde 	bl	8009138 <__sinit>
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <_puts_r+0xac>)
 800817e:	429c      	cmp	r4, r3
 8008180:	d117      	bne.n	80081b2 <_puts_r+0x52>
 8008182:	686c      	ldr	r4, [r5, #4]
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	071b      	lsls	r3, r3, #28
 8008188:	d51d      	bpl.n	80081c6 <_puts_r+0x66>
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	b1db      	cbz	r3, 80081c6 <_puts_r+0x66>
 800818e:	3e01      	subs	r6, #1
 8008190:	68a3      	ldr	r3, [r4, #8]
 8008192:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008196:	3b01      	subs	r3, #1
 8008198:	60a3      	str	r3, [r4, #8]
 800819a:	b9e9      	cbnz	r1, 80081d8 <_puts_r+0x78>
 800819c:	2b00      	cmp	r3, #0
 800819e:	da2e      	bge.n	80081fe <_puts_r+0x9e>
 80081a0:	4622      	mov	r2, r4
 80081a2:	210a      	movs	r1, #10
 80081a4:	4628      	mov	r0, r5
 80081a6:	f000 f83f 	bl	8008228 <__swbuf_r>
 80081aa:	3001      	adds	r0, #1
 80081ac:	d011      	beq.n	80081d2 <_puts_r+0x72>
 80081ae:	200a      	movs	r0, #10
 80081b0:	e011      	b.n	80081d6 <_puts_r+0x76>
 80081b2:	4b17      	ldr	r3, [pc, #92]	; (8008210 <_puts_r+0xb0>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d101      	bne.n	80081bc <_puts_r+0x5c>
 80081b8:	68ac      	ldr	r4, [r5, #8]
 80081ba:	e7e3      	b.n	8008184 <_puts_r+0x24>
 80081bc:	4b15      	ldr	r3, [pc, #84]	; (8008214 <_puts_r+0xb4>)
 80081be:	429c      	cmp	r4, r3
 80081c0:	bf08      	it	eq
 80081c2:	68ec      	ldreq	r4, [r5, #12]
 80081c4:	e7de      	b.n	8008184 <_puts_r+0x24>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f87f 	bl	80082cc <__swsetup_r>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0dd      	beq.n	800818e <_puts_r+0x2e>
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da04      	bge.n	80081e6 <_puts_r+0x86>
 80081dc:	69a2      	ldr	r2, [r4, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	dc06      	bgt.n	80081f0 <_puts_r+0x90>
 80081e2:	290a      	cmp	r1, #10
 80081e4:	d004      	beq.n	80081f0 <_puts_r+0x90>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	6022      	str	r2, [r4, #0]
 80081ec:	7019      	strb	r1, [r3, #0]
 80081ee:	e7cf      	b.n	8008190 <_puts_r+0x30>
 80081f0:	4622      	mov	r2, r4
 80081f2:	4628      	mov	r0, r5
 80081f4:	f000 f818 	bl	8008228 <__swbuf_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	d1c9      	bne.n	8008190 <_puts_r+0x30>
 80081fc:	e7e9      	b.n	80081d2 <_puts_r+0x72>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	200a      	movs	r0, #10
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	7018      	strb	r0, [r3, #0]
 8008208:	e7e5      	b.n	80081d6 <_puts_r+0x76>
 800820a:	bf00      	nop
 800820c:	08009f64 	.word	0x08009f64
 8008210:	08009f84 	.word	0x08009f84
 8008214:	08009f44 	.word	0x08009f44

08008218 <puts>:
 8008218:	4b02      	ldr	r3, [pc, #8]	; (8008224 <puts+0xc>)
 800821a:	4601      	mov	r1, r0
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f7ff bf9f 	b.w	8008160 <_puts_r>
 8008222:	bf00      	nop
 8008224:	20000024 	.word	0x20000024

08008228 <__swbuf_r>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	460e      	mov	r6, r1
 800822c:	4614      	mov	r4, r2
 800822e:	4605      	mov	r5, r0
 8008230:	b118      	cbz	r0, 800823a <__swbuf_r+0x12>
 8008232:	6983      	ldr	r3, [r0, #24]
 8008234:	b90b      	cbnz	r3, 800823a <__swbuf_r+0x12>
 8008236:	f000 ff7f 	bl	8009138 <__sinit>
 800823a:	4b21      	ldr	r3, [pc, #132]	; (80082c0 <__swbuf_r+0x98>)
 800823c:	429c      	cmp	r4, r3
 800823e:	d12a      	bne.n	8008296 <__swbuf_r+0x6e>
 8008240:	686c      	ldr	r4, [r5, #4]
 8008242:	69a3      	ldr	r3, [r4, #24]
 8008244:	60a3      	str	r3, [r4, #8]
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	071a      	lsls	r2, r3, #28
 800824a:	d52e      	bpl.n	80082aa <__swbuf_r+0x82>
 800824c:	6923      	ldr	r3, [r4, #16]
 800824e:	b363      	cbz	r3, 80082aa <__swbuf_r+0x82>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	6820      	ldr	r0, [r4, #0]
 8008254:	1ac0      	subs	r0, r0, r3
 8008256:	6963      	ldr	r3, [r4, #20]
 8008258:	b2f6      	uxtb	r6, r6
 800825a:	4283      	cmp	r3, r0
 800825c:	4637      	mov	r7, r6
 800825e:	dc04      	bgt.n	800826a <__swbuf_r+0x42>
 8008260:	4621      	mov	r1, r4
 8008262:	4628      	mov	r0, r5
 8008264:	f000 fefe 	bl	8009064 <_fflush_r>
 8008268:	bb28      	cbnz	r0, 80082b6 <__swbuf_r+0x8e>
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	3b01      	subs	r3, #1
 800826e:	60a3      	str	r3, [r4, #8]
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	6022      	str	r2, [r4, #0]
 8008276:	701e      	strb	r6, [r3, #0]
 8008278:	6963      	ldr	r3, [r4, #20]
 800827a:	3001      	adds	r0, #1
 800827c:	4283      	cmp	r3, r0
 800827e:	d004      	beq.n	800828a <__swbuf_r+0x62>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	07db      	lsls	r3, r3, #31
 8008284:	d519      	bpl.n	80082ba <__swbuf_r+0x92>
 8008286:	2e0a      	cmp	r6, #10
 8008288:	d117      	bne.n	80082ba <__swbuf_r+0x92>
 800828a:	4621      	mov	r1, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f000 fee9 	bl	8009064 <_fflush_r>
 8008292:	b190      	cbz	r0, 80082ba <__swbuf_r+0x92>
 8008294:	e00f      	b.n	80082b6 <__swbuf_r+0x8e>
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <__swbuf_r+0x9c>)
 8008298:	429c      	cmp	r4, r3
 800829a:	d101      	bne.n	80082a0 <__swbuf_r+0x78>
 800829c:	68ac      	ldr	r4, [r5, #8]
 800829e:	e7d0      	b.n	8008242 <__swbuf_r+0x1a>
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <__swbuf_r+0xa0>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	bf08      	it	eq
 80082a6:	68ec      	ldreq	r4, [r5, #12]
 80082a8:	e7cb      	b.n	8008242 <__swbuf_r+0x1a>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 f80d 	bl	80082cc <__swsetup_r>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0cc      	beq.n	8008250 <__swbuf_r+0x28>
 80082b6:	f04f 37ff 	mov.w	r7, #4294967295
 80082ba:	4638      	mov	r0, r7
 80082bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082be:	bf00      	nop
 80082c0:	08009f64 	.word	0x08009f64
 80082c4:	08009f84 	.word	0x08009f84
 80082c8:	08009f44 	.word	0x08009f44

080082cc <__swsetup_r>:
 80082cc:	4b32      	ldr	r3, [pc, #200]	; (8008398 <__swsetup_r+0xcc>)
 80082ce:	b570      	push	{r4, r5, r6, lr}
 80082d0:	681d      	ldr	r5, [r3, #0]
 80082d2:	4606      	mov	r6, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	b125      	cbz	r5, 80082e2 <__swsetup_r+0x16>
 80082d8:	69ab      	ldr	r3, [r5, #24]
 80082da:	b913      	cbnz	r3, 80082e2 <__swsetup_r+0x16>
 80082dc:	4628      	mov	r0, r5
 80082de:	f000 ff2b 	bl	8009138 <__sinit>
 80082e2:	4b2e      	ldr	r3, [pc, #184]	; (800839c <__swsetup_r+0xd0>)
 80082e4:	429c      	cmp	r4, r3
 80082e6:	d10f      	bne.n	8008308 <__swsetup_r+0x3c>
 80082e8:	686c      	ldr	r4, [r5, #4]
 80082ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	0715      	lsls	r5, r2, #28
 80082f2:	d42c      	bmi.n	800834e <__swsetup_r+0x82>
 80082f4:	06d0      	lsls	r0, r2, #27
 80082f6:	d411      	bmi.n	800831c <__swsetup_r+0x50>
 80082f8:	2209      	movs	r2, #9
 80082fa:	6032      	str	r2, [r6, #0]
 80082fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	f04f 30ff 	mov.w	r0, #4294967295
 8008306:	e03e      	b.n	8008386 <__swsetup_r+0xba>
 8008308:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <__swsetup_r+0xd4>)
 800830a:	429c      	cmp	r4, r3
 800830c:	d101      	bne.n	8008312 <__swsetup_r+0x46>
 800830e:	68ac      	ldr	r4, [r5, #8]
 8008310:	e7eb      	b.n	80082ea <__swsetup_r+0x1e>
 8008312:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <__swsetup_r+0xd8>)
 8008314:	429c      	cmp	r4, r3
 8008316:	bf08      	it	eq
 8008318:	68ec      	ldreq	r4, [r5, #12]
 800831a:	e7e6      	b.n	80082ea <__swsetup_r+0x1e>
 800831c:	0751      	lsls	r1, r2, #29
 800831e:	d512      	bpl.n	8008346 <__swsetup_r+0x7a>
 8008320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008322:	b141      	cbz	r1, 8008336 <__swsetup_r+0x6a>
 8008324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008328:	4299      	cmp	r1, r3
 800832a:	d002      	beq.n	8008332 <__swsetup_r+0x66>
 800832c:	4630      	mov	r0, r6
 800832e:	f001 fafb 	bl	8009928 <_free_r>
 8008332:	2300      	movs	r3, #0
 8008334:	6363      	str	r3, [r4, #52]	; 0x34
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	2300      	movs	r3, #0
 8008340:	6063      	str	r3, [r4, #4]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	f043 0308 	orr.w	r3, r3, #8
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	6923      	ldr	r3, [r4, #16]
 8008350:	b94b      	cbnz	r3, 8008366 <__swsetup_r+0x9a>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835c:	d003      	beq.n	8008366 <__swsetup_r+0x9a>
 800835e:	4621      	mov	r1, r4
 8008360:	4630      	mov	r0, r6
 8008362:	f000 ffa5 	bl	80092b0 <__smakebuf_r>
 8008366:	89a2      	ldrh	r2, [r4, #12]
 8008368:	f012 0301 	ands.w	r3, r2, #1
 800836c:	d00c      	beq.n	8008388 <__swsetup_r+0xbc>
 800836e:	2300      	movs	r3, #0
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	6963      	ldr	r3, [r4, #20]
 8008374:	425b      	negs	r3, r3
 8008376:	61a3      	str	r3, [r4, #24]
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	b953      	cbnz	r3, 8008392 <__swsetup_r+0xc6>
 800837c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008380:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008384:	d1ba      	bne.n	80082fc <__swsetup_r+0x30>
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	0792      	lsls	r2, r2, #30
 800838a:	bf58      	it	pl
 800838c:	6963      	ldrpl	r3, [r4, #20]
 800838e:	60a3      	str	r3, [r4, #8]
 8008390:	e7f2      	b.n	8008378 <__swsetup_r+0xac>
 8008392:	2000      	movs	r0, #0
 8008394:	e7f7      	b.n	8008386 <__swsetup_r+0xba>
 8008396:	bf00      	nop
 8008398:	20000024 	.word	0x20000024
 800839c:	08009f64 	.word	0x08009f64
 80083a0:	08009f84 	.word	0x08009f84
 80083a4:	08009f44 	.word	0x08009f44

080083a8 <quorem>:
 80083a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	6903      	ldr	r3, [r0, #16]
 80083ae:	690c      	ldr	r4, [r1, #16]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	4680      	mov	r8, r0
 80083b4:	f2c0 8082 	blt.w	80084bc <quorem+0x114>
 80083b8:	3c01      	subs	r4, #1
 80083ba:	f101 0714 	add.w	r7, r1, #20
 80083be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80083c2:	f100 0614 	add.w	r6, r0, #20
 80083c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80083ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80083ce:	eb06 030c 	add.w	r3, r6, ip
 80083d2:	3501      	adds	r5, #1
 80083d4:	eb07 090c 	add.w	r9, r7, ip
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	fbb0 f5f5 	udiv	r5, r0, r5
 80083de:	b395      	cbz	r5, 8008446 <quorem+0x9e>
 80083e0:	f04f 0a00 	mov.w	sl, #0
 80083e4:	4638      	mov	r0, r7
 80083e6:	46b6      	mov	lr, r6
 80083e8:	46d3      	mov	fp, sl
 80083ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80083ee:	b293      	uxth	r3, r2
 80083f0:	fb05 a303 	mla	r3, r5, r3, sl
 80083f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ebab 0303 	sub.w	r3, fp, r3
 80083fe:	0c12      	lsrs	r2, r2, #16
 8008400:	f8de b000 	ldr.w	fp, [lr]
 8008404:	fb05 a202 	mla	r2, r5, r2, sl
 8008408:	fa13 f38b 	uxtah	r3, r3, fp
 800840c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008410:	fa1f fb82 	uxth.w	fp, r2
 8008414:	f8de 2000 	ldr.w	r2, [lr]
 8008418:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800841c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008420:	b29b      	uxth	r3, r3
 8008422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008426:	4581      	cmp	r9, r0
 8008428:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800842c:	f84e 3b04 	str.w	r3, [lr], #4
 8008430:	d2db      	bcs.n	80083ea <quorem+0x42>
 8008432:	f856 300c 	ldr.w	r3, [r6, ip]
 8008436:	b933      	cbnz	r3, 8008446 <quorem+0x9e>
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	3b04      	subs	r3, #4
 800843c:	429e      	cmp	r6, r3
 800843e:	461a      	mov	r2, r3
 8008440:	d330      	bcc.n	80084a4 <quorem+0xfc>
 8008442:	f8c8 4010 	str.w	r4, [r8, #16]
 8008446:	4640      	mov	r0, r8
 8008448:	f001 f99a 	bl	8009780 <__mcmp>
 800844c:	2800      	cmp	r0, #0
 800844e:	db25      	blt.n	800849c <quorem+0xf4>
 8008450:	3501      	adds	r5, #1
 8008452:	4630      	mov	r0, r6
 8008454:	f04f 0c00 	mov.w	ip, #0
 8008458:	f857 2b04 	ldr.w	r2, [r7], #4
 800845c:	f8d0 e000 	ldr.w	lr, [r0]
 8008460:	b293      	uxth	r3, r2
 8008462:	ebac 0303 	sub.w	r3, ip, r3
 8008466:	0c12      	lsrs	r2, r2, #16
 8008468:	fa13 f38e 	uxtah	r3, r3, lr
 800846c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800847a:	45b9      	cmp	r9, r7
 800847c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008480:	f840 3b04 	str.w	r3, [r0], #4
 8008484:	d2e8      	bcs.n	8008458 <quorem+0xb0>
 8008486:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800848a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800848e:	b92a      	cbnz	r2, 800849c <quorem+0xf4>
 8008490:	3b04      	subs	r3, #4
 8008492:	429e      	cmp	r6, r3
 8008494:	461a      	mov	r2, r3
 8008496:	d30b      	bcc.n	80084b0 <quorem+0x108>
 8008498:	f8c8 4010 	str.w	r4, [r8, #16]
 800849c:	4628      	mov	r0, r5
 800849e:	b003      	add	sp, #12
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	6812      	ldr	r2, [r2, #0]
 80084a6:	3b04      	subs	r3, #4
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	d1ca      	bne.n	8008442 <quorem+0x9a>
 80084ac:	3c01      	subs	r4, #1
 80084ae:	e7c5      	b.n	800843c <quorem+0x94>
 80084b0:	6812      	ldr	r2, [r2, #0]
 80084b2:	3b04      	subs	r3, #4
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	d1ef      	bne.n	8008498 <quorem+0xf0>
 80084b8:	3c01      	subs	r4, #1
 80084ba:	e7ea      	b.n	8008492 <quorem+0xea>
 80084bc:	2000      	movs	r0, #0
 80084be:	e7ee      	b.n	800849e <quorem+0xf6>

080084c0 <_dtoa_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	ec57 6b10 	vmov	r6, r7, d0
 80084c8:	b095      	sub	sp, #84	; 0x54
 80084ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084cc:	9108      	str	r1, [sp, #32]
 80084ce:	4604      	mov	r4, r0
 80084d0:	920a      	str	r2, [sp, #40]	; 0x28
 80084d2:	9311      	str	r3, [sp, #68]	; 0x44
 80084d4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80084d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80084dc:	b93d      	cbnz	r5, 80084ee <_dtoa_r+0x2e>
 80084de:	2010      	movs	r0, #16
 80084e0:	f000 ff26 	bl	8009330 <malloc>
 80084e4:	6260      	str	r0, [r4, #36]	; 0x24
 80084e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084ea:	6005      	str	r5, [r0, #0]
 80084ec:	60c5      	str	r5, [r0, #12]
 80084ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	b151      	cbz	r1, 800850a <_dtoa_r+0x4a>
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	604a      	str	r2, [r1, #4]
 80084f8:	2301      	movs	r3, #1
 80084fa:	4093      	lsls	r3, r2
 80084fc:	608b      	str	r3, [r1, #8]
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 ff5d 	bl	80093be <_Bfree>
 8008504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	1e3b      	subs	r3, r7, #0
 800850c:	bfb9      	ittee	lt
 800850e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008512:	9303      	strlt	r3, [sp, #12]
 8008514:	2300      	movge	r3, #0
 8008516:	f8c8 3000 	strge.w	r3, [r8]
 800851a:	9d03      	ldr	r5, [sp, #12]
 800851c:	4bac      	ldr	r3, [pc, #688]	; (80087d0 <_dtoa_r+0x310>)
 800851e:	bfbc      	itt	lt
 8008520:	2201      	movlt	r2, #1
 8008522:	f8c8 2000 	strlt.w	r2, [r8]
 8008526:	43ab      	bics	r3, r5
 8008528:	d11b      	bne.n	8008562 <_dtoa_r+0xa2>
 800852a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800852c:	f242 730f 	movw	r3, #9999	; 0x270f
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	9b02      	ldr	r3, [sp, #8]
 8008534:	b923      	cbnz	r3, 8008540 <_dtoa_r+0x80>
 8008536:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800853a:	2d00      	cmp	r5, #0
 800853c:	f000 84dd 	beq.w	8008efa <_dtoa_r+0xa3a>
 8008540:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008542:	b953      	cbnz	r3, 800855a <_dtoa_r+0x9a>
 8008544:	4ba3      	ldr	r3, [pc, #652]	; (80087d4 <_dtoa_r+0x314>)
 8008546:	e020      	b.n	800858a <_dtoa_r+0xca>
 8008548:	4ba3      	ldr	r3, [pc, #652]	; (80087d8 <_dtoa_r+0x318>)
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	3308      	adds	r3, #8
 800854e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	9804      	ldr	r0, [sp, #16]
 8008554:	b015      	add	sp, #84	; 0x54
 8008556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855a:	4b9e      	ldr	r3, [pc, #632]	; (80087d4 <_dtoa_r+0x314>)
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	3303      	adds	r3, #3
 8008560:	e7f5      	b.n	800854e <_dtoa_r+0x8e>
 8008562:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008566:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008572:	d10c      	bne.n	800858e <_dtoa_r+0xce>
 8008574:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008576:	2301      	movs	r3, #1
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 84b9 	beq.w	8008ef4 <_dtoa_r+0xa34>
 8008582:	4b96      	ldr	r3, [pc, #600]	; (80087dc <_dtoa_r+0x31c>)
 8008584:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	3b01      	subs	r3, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	e7e1      	b.n	8008552 <_dtoa_r+0x92>
 800858e:	a913      	add	r1, sp, #76	; 0x4c
 8008590:	aa12      	add	r2, sp, #72	; 0x48
 8008592:	ed9d 0b04 	vldr	d0, [sp, #16]
 8008596:	4620      	mov	r0, r4
 8008598:	f001 f969 	bl	800986e <__d2b>
 800859c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80085a0:	9001      	str	r0, [sp, #4]
 80085a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	d046      	beq.n	8008636 <_dtoa_r+0x176>
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80085ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80085b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80085ba:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80085be:	2700      	movs	r7, #0
 80085c0:	ee07 aa90 	vmov	s15, sl
 80085c4:	ec43 2b16 	vmov	d6, r2, r3
 80085c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80085cc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80087b8 <_dtoa_r+0x2f8>
 80085d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80085d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80085d8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80087c0 <_dtoa_r+0x300>
 80085dc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80085e0:	eeb0 7b46 	vmov.f64	d7, d6
 80085e4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80087c8 <_dtoa_r+0x308>
 80085e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80085ec:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80085f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	ee16 ba90 	vmov	fp, s13
 80085fc:	d508      	bpl.n	8008610 <_dtoa_r+0x150>
 80085fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008602:	eeb4 6b47 	vcmp.f64	d6, d7
 8008606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860a:	bf18      	it	ne
 800860c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008610:	f1bb 0f16 	cmp.w	fp, #22
 8008614:	d834      	bhi.n	8008680 <_dtoa_r+0x1c0>
 8008616:	4b72      	ldr	r3, [pc, #456]	; (80087e0 <_dtoa_r+0x320>)
 8008618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800861c:	ed93 7b00 	vldr	d7, [r3]
 8008620:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008624:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862c:	dd01      	ble.n	8008632 <_dtoa_r+0x172>
 800862e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008632:	2300      	movs	r3, #0
 8008634:	e025      	b.n	8008682 <_dtoa_r+0x1c2>
 8008636:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008638:	eb01 0a03 	add.w	sl, r1, r3
 800863c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008640:	2b20      	cmp	r3, #32
 8008642:	dd17      	ble.n	8008674 <_dtoa_r+0x1b4>
 8008644:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008648:	9a02      	ldr	r2, [sp, #8]
 800864a:	409d      	lsls	r5, r3
 800864c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008650:	fa22 f303 	lsr.w	r3, r2, r3
 8008654:	432b      	orrs	r3, r5
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800865e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008662:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800866c:	2701      	movs	r7, #1
 800866e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8008672:	e7a5      	b.n	80085c0 <_dtoa_r+0x100>
 8008674:	9a02      	ldr	r2, [sp, #8]
 8008676:	f1c3 0320 	rsb	r3, r3, #32
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	e7ea      	b.n	8008656 <_dtoa_r+0x196>
 8008680:	2301      	movs	r3, #1
 8008682:	eba1 0a0a 	sub.w	sl, r1, sl
 8008686:	9310      	str	r3, [sp, #64]	; 0x40
 8008688:	f1ba 0301 	subs.w	r3, sl, #1
 800868c:	9307      	str	r3, [sp, #28]
 800868e:	bf43      	ittte	mi
 8008690:	2300      	movmi	r3, #0
 8008692:	f1ca 0a01 	rsbmi	sl, sl, #1
 8008696:	9307      	strmi	r3, [sp, #28]
 8008698:	f04f 0a00 	movpl.w	sl, #0
 800869c:	f1bb 0f00 	cmp.w	fp, #0
 80086a0:	db19      	blt.n	80086d6 <_dtoa_r+0x216>
 80086a2:	9b07      	ldr	r3, [sp, #28]
 80086a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086a8:	445b      	add	r3, fp
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	f04f 0800 	mov.w	r8, #0
 80086b0:	9b08      	ldr	r3, [sp, #32]
 80086b2:	2b09      	cmp	r3, #9
 80086b4:	d866      	bhi.n	8008784 <_dtoa_r+0x2c4>
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	bfc4      	itt	gt
 80086ba:	3b04      	subgt	r3, #4
 80086bc:	9308      	strgt	r3, [sp, #32]
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	f1a3 0302 	sub.w	r3, r3, #2
 80086c4:	bfcc      	ite	gt
 80086c6:	2500      	movgt	r5, #0
 80086c8:	2501      	movle	r5, #1
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d866      	bhi.n	800879c <_dtoa_r+0x2dc>
 80086ce:	e8df f003 	tbb	[pc, r3]
 80086d2:	5755      	.short	0x5755
 80086d4:	4909      	.short	0x4909
 80086d6:	2300      	movs	r3, #0
 80086d8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80086dc:	f1cb 0800 	rsb	r8, fp, #0
 80086e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086e2:	e7e5      	b.n	80086b0 <_dtoa_r+0x1f0>
 80086e4:	2301      	movs	r3, #1
 80086e6:	9309      	str	r3, [sp, #36]	; 0x24
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dd59      	ble.n	80087a2 <_dtoa_r+0x2e2>
 80086ee:	9306      	str	r3, [sp, #24]
 80086f0:	4699      	mov	r9, r3
 80086f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086f4:	2200      	movs	r2, #0
 80086f6:	6072      	str	r2, [r6, #4]
 80086f8:	2204      	movs	r2, #4
 80086fa:	f102 0014 	add.w	r0, r2, #20
 80086fe:	4298      	cmp	r0, r3
 8008700:	6871      	ldr	r1, [r6, #4]
 8008702:	d953      	bls.n	80087ac <_dtoa_r+0x2ec>
 8008704:	4620      	mov	r0, r4
 8008706:	f000 fe26 	bl	8009356 <_Balloc>
 800870a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870c:	6030      	str	r0, [r6, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	f1b9 0f0e 	cmp.w	r9, #14
 8008716:	f200 80c2 	bhi.w	800889e <_dtoa_r+0x3de>
 800871a:	2d00      	cmp	r5, #0
 800871c:	f000 80bf 	beq.w	800889e <_dtoa_r+0x3de>
 8008720:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008724:	f1bb 0f00 	cmp.w	fp, #0
 8008728:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800872c:	f340 80e6 	ble.w	80088fc <_dtoa_r+0x43c>
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <_dtoa_r+0x320>)
 8008732:	f00b 030f 	and.w	r3, fp, #15
 8008736:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800873a:	ed93 7b00 	vldr	d7, [r3]
 800873e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8008742:	06da      	lsls	r2, r3, #27
 8008744:	f140 80d8 	bpl.w	80088f8 <_dtoa_r+0x438>
 8008748:	4a26      	ldr	r2, [pc, #152]	; (80087e4 <_dtoa_r+0x324>)
 800874a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800874e:	ed92 6b08 	vldr	d6, [r2, #32]
 8008752:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008756:	ed8d 6b02 	vstr	d6, [sp, #8]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	2203      	movs	r2, #3
 8008760:	4920      	ldr	r1, [pc, #128]	; (80087e4 <_dtoa_r+0x324>)
 8008762:	e04a      	b.n	80087fa <_dtoa_r+0x33a>
 8008764:	2301      	movs	r3, #1
 8008766:	9309      	str	r3, [sp, #36]	; 0x24
 8008768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876a:	445b      	add	r3, fp
 800876c:	f103 0901 	add.w	r9, r3, #1
 8008770:	9306      	str	r3, [sp, #24]
 8008772:	464b      	mov	r3, r9
 8008774:	2b01      	cmp	r3, #1
 8008776:	bfb8      	it	lt
 8008778:	2301      	movlt	r3, #1
 800877a:	e7ba      	b.n	80086f2 <_dtoa_r+0x232>
 800877c:	2300      	movs	r3, #0
 800877e:	e7b2      	b.n	80086e6 <_dtoa_r+0x226>
 8008780:	2300      	movs	r3, #0
 8008782:	e7f0      	b.n	8008766 <_dtoa_r+0x2a6>
 8008784:	2501      	movs	r5, #1
 8008786:	2300      	movs	r3, #0
 8008788:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800878c:	f04f 33ff 	mov.w	r3, #4294967295
 8008790:	9306      	str	r3, [sp, #24]
 8008792:	4699      	mov	r9, r3
 8008794:	2200      	movs	r2, #0
 8008796:	2312      	movs	r3, #18
 8008798:	920a      	str	r2, [sp, #40]	; 0x28
 800879a:	e7aa      	b.n	80086f2 <_dtoa_r+0x232>
 800879c:	2301      	movs	r3, #1
 800879e:	9309      	str	r3, [sp, #36]	; 0x24
 80087a0:	e7f4      	b.n	800878c <_dtoa_r+0x2cc>
 80087a2:	2301      	movs	r3, #1
 80087a4:	9306      	str	r3, [sp, #24]
 80087a6:	4699      	mov	r9, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	e7f5      	b.n	8008798 <_dtoa_r+0x2d8>
 80087ac:	3101      	adds	r1, #1
 80087ae:	6071      	str	r1, [r6, #4]
 80087b0:	0052      	lsls	r2, r2, #1
 80087b2:	e7a2      	b.n	80086fa <_dtoa_r+0x23a>
 80087b4:	f3af 8000 	nop.w
 80087b8:	636f4361 	.word	0x636f4361
 80087bc:	3fd287a7 	.word	0x3fd287a7
 80087c0:	8b60c8b3 	.word	0x8b60c8b3
 80087c4:	3fc68a28 	.word	0x3fc68a28
 80087c8:	509f79fb 	.word	0x509f79fb
 80087cc:	3fd34413 	.word	0x3fd34413
 80087d0:	7ff00000 	.word	0x7ff00000
 80087d4:	08009f3d 	.word	0x08009f3d
 80087d8:	08009f34 	.word	0x08009f34
 80087dc:	08009f11 	.word	0x08009f11
 80087e0:	08009fd0 	.word	0x08009fd0
 80087e4:	08009fa8 	.word	0x08009fa8
 80087e8:	07de      	lsls	r6, r3, #31
 80087ea:	d504      	bpl.n	80087f6 <_dtoa_r+0x336>
 80087ec:	ed91 6b00 	vldr	d6, [r1]
 80087f0:	3201      	adds	r2, #1
 80087f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087f6:	105b      	asrs	r3, r3, #1
 80087f8:	3108      	adds	r1, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f4      	bne.n	80087e8 <_dtoa_r+0x328>
 80087fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008802:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008806:	ed8d 7b02 	vstr	d7, [sp, #8]
 800880a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80a7 	beq.w	8008960 <_dtoa_r+0x4a0>
 8008812:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008816:	ed9d 7b02 	vldr	d7, [sp, #8]
 800881a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008822:	f140 809d 	bpl.w	8008960 <_dtoa_r+0x4a0>
 8008826:	f1b9 0f00 	cmp.w	r9, #0
 800882a:	f000 8099 	beq.w	8008960 <_dtoa_r+0x4a0>
 800882e:	9b06      	ldr	r3, [sp, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dd30      	ble.n	8008896 <_dtoa_r+0x3d6>
 8008834:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008838:	ee27 7b06 	vmul.f64	d7, d7, d6
 800883c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008840:	9d06      	ldr	r5, [sp, #24]
 8008842:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008846:	3201      	adds	r2, #1
 8008848:	ed9d 6b02 	vldr	d6, [sp, #8]
 800884c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008850:	ee07 2a90 	vmov	s15, r2
 8008854:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008858:	eea7 5b06 	vfma.f64	d5, d7, d6
 800885c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008860:	9a03      	ldr	r2, [sp, #12]
 8008862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008866:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800886a:	2d00      	cmp	r5, #0
 800886c:	d17b      	bne.n	8008966 <_dtoa_r+0x4a6>
 800886e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008872:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008876:	ec41 0b17 	vmov	d7, r0, r1
 800887a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800887e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008882:	f300 8253 	bgt.w	8008d2c <_dtoa_r+0x86c>
 8008886:	eeb1 7b47 	vneg.f64	d7, d7
 800888a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800888e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008892:	f100 8249 	bmi.w	8008d28 <_dtoa_r+0x868>
 8008896:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800889a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800889e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f2c0 8119 	blt.w	8008ad8 <_dtoa_r+0x618>
 80088a6:	f1bb 0f0e 	cmp.w	fp, #14
 80088aa:	f300 8115 	bgt.w	8008ad8 <_dtoa_r+0x618>
 80088ae:	4bc3      	ldr	r3, [pc, #780]	; (8008bbc <_dtoa_r+0x6fc>)
 80088b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80088b4:	ed93 6b00 	vldr	d6, [r3]
 80088b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f280 80ba 	bge.w	8008a34 <_dtoa_r+0x574>
 80088c0:	f1b9 0f00 	cmp.w	r9, #0
 80088c4:	f300 80b6 	bgt.w	8008a34 <_dtoa_r+0x574>
 80088c8:	f040 822d 	bne.w	8008d26 <_dtoa_r+0x866>
 80088cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80088d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80088d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e0:	464d      	mov	r5, r9
 80088e2:	464f      	mov	r7, r9
 80088e4:	f280 8204 	bge.w	8008cf0 <_dtoa_r+0x830>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	9a04      	ldr	r2, [sp, #16]
 80088ec:	1c5e      	adds	r6, r3, #1
 80088ee:	2331      	movs	r3, #49	; 0x31
 80088f0:	7013      	strb	r3, [r2, #0]
 80088f2:	f10b 0b01 	add.w	fp, fp, #1
 80088f6:	e1ff      	b.n	8008cf8 <_dtoa_r+0x838>
 80088f8:	2202      	movs	r2, #2
 80088fa:	e731      	b.n	8008760 <_dtoa_r+0x2a0>
 80088fc:	d02e      	beq.n	800895c <_dtoa_r+0x49c>
 80088fe:	f1cb 0300 	rsb	r3, fp, #0
 8008902:	4aae      	ldr	r2, [pc, #696]	; (8008bbc <_dtoa_r+0x6fc>)
 8008904:	f003 010f 	and.w	r1, r3, #15
 8008908:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800890c:	ed92 7b00 	vldr	d7, [r2]
 8008910:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8008914:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008918:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800891c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8008920:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008924:	49a6      	ldr	r1, [pc, #664]	; (8008bc0 <_dtoa_r+0x700>)
 8008926:	111b      	asrs	r3, r3, #4
 8008928:	2000      	movs	r0, #0
 800892a:	2202      	movs	r2, #2
 800892c:	b93b      	cbnz	r3, 800893e <_dtoa_r+0x47e>
 800892e:	2800      	cmp	r0, #0
 8008930:	f43f af6b 	beq.w	800880a <_dtoa_r+0x34a>
 8008934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800893c:	e765      	b.n	800880a <_dtoa_r+0x34a>
 800893e:	07dd      	lsls	r5, r3, #31
 8008940:	d509      	bpl.n	8008956 <_dtoa_r+0x496>
 8008942:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008946:	ed91 7b00 	vldr	d7, [r1]
 800894a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800894e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008952:	3201      	adds	r2, #1
 8008954:	2001      	movs	r0, #1
 8008956:	105b      	asrs	r3, r3, #1
 8008958:	3108      	adds	r1, #8
 800895a:	e7e7      	b.n	800892c <_dtoa_r+0x46c>
 800895c:	2202      	movs	r2, #2
 800895e:	e754      	b.n	800880a <_dtoa_r+0x34a>
 8008960:	465b      	mov	r3, fp
 8008962:	464d      	mov	r5, r9
 8008964:	e770      	b.n	8008848 <_dtoa_r+0x388>
 8008966:	4a95      	ldr	r2, [pc, #596]	; (8008bbc <_dtoa_r+0x6fc>)
 8008968:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800896c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008972:	ec41 0b17 	vmov	d7, r0, r1
 8008976:	b35a      	cbz	r2, 80089d0 <_dtoa_r+0x510>
 8008978:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800897c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008980:	9e04      	ldr	r6, [sp, #16]
 8008982:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008986:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800898a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800898e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008992:	ee14 2a90 	vmov	r2, s9
 8008996:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800899a:	3230      	adds	r2, #48	; 0x30
 800899c:	ee36 6b45 	vsub.f64	d6, d6, d5
 80089a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a8:	f806 2b01 	strb.w	r2, [r6], #1
 80089ac:	d43b      	bmi.n	8008a26 <_dtoa_r+0x566>
 80089ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 80089b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80089b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ba:	d472      	bmi.n	8008aa2 <_dtoa_r+0x5e2>
 80089bc:	9a04      	ldr	r2, [sp, #16]
 80089be:	1ab2      	subs	r2, r6, r2
 80089c0:	4295      	cmp	r5, r2
 80089c2:	f77f af68 	ble.w	8008896 <_dtoa_r+0x3d6>
 80089c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80089ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80089ce:	e7de      	b.n	800898e <_dtoa_r+0x4ce>
 80089d0:	9a04      	ldr	r2, [sp, #16]
 80089d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80089d6:	1956      	adds	r6, r2, r5
 80089d8:	4611      	mov	r1, r2
 80089da:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80089de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80089e2:	ee14 2a90 	vmov	r2, s9
 80089e6:	3230      	adds	r2, #48	; 0x30
 80089e8:	f801 2b01 	strb.w	r2, [r1], #1
 80089ec:	42b1      	cmp	r1, r6
 80089ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80089f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80089f6:	d11a      	bne.n	8008a2e <_dtoa_r+0x56e>
 80089f8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80089fc:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008a00:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a08:	dc4b      	bgt.n	8008aa2 <_dtoa_r+0x5e2>
 8008a0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008a0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a16:	f57f af3e 	bpl.w	8008896 <_dtoa_r+0x3d6>
 8008a1a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a1e:	2a30      	cmp	r2, #48	; 0x30
 8008a20:	f106 31ff 	add.w	r1, r6, #4294967295
 8008a24:	d001      	beq.n	8008a2a <_dtoa_r+0x56a>
 8008a26:	469b      	mov	fp, r3
 8008a28:	e02a      	b.n	8008a80 <_dtoa_r+0x5c0>
 8008a2a:	460e      	mov	r6, r1
 8008a2c:	e7f5      	b.n	8008a1a <_dtoa_r+0x55a>
 8008a2e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008a32:	e7d4      	b.n	80089de <_dtoa_r+0x51e>
 8008a34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a38:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008a3c:	9e04      	ldr	r6, [sp, #16]
 8008a3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008a42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008a46:	ee15 3a10 	vmov	r3, s10
 8008a4a:	3330      	adds	r3, #48	; 0x30
 8008a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a50:	9b04      	ldr	r3, [sp, #16]
 8008a52:	1af3      	subs	r3, r6, r3
 8008a54:	4599      	cmp	r9, r3
 8008a56:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008a5a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008a5e:	d133      	bne.n	8008ac8 <_dtoa_r+0x608>
 8008a60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008a64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	dc18      	bgt.n	8008aa0 <_dtoa_r+0x5e0>
 8008a6e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a76:	d103      	bne.n	8008a80 <_dtoa_r+0x5c0>
 8008a78:	ee15 3a10 	vmov	r3, s10
 8008a7c:	07db      	lsls	r3, r3, #31
 8008a7e:	d40f      	bmi.n	8008aa0 <_dtoa_r+0x5e0>
 8008a80:	9901      	ldr	r1, [sp, #4]
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fc9b 	bl	80093be <_Bfree>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a8c:	7033      	strb	r3, [r6, #0]
 8008a8e:	f10b 0301 	add.w	r3, fp, #1
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f43f ad5b 	beq.w	8008552 <_dtoa_r+0x92>
 8008a9c:	601e      	str	r6, [r3, #0]
 8008a9e:	e558      	b.n	8008552 <_dtoa_r+0x92>
 8008aa0:	465b      	mov	r3, fp
 8008aa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008aa6:	2939      	cmp	r1, #57	; 0x39
 8008aa8:	f106 32ff 	add.w	r2, r6, #4294967295
 8008aac:	d106      	bne.n	8008abc <_dtoa_r+0x5fc>
 8008aae:	9904      	ldr	r1, [sp, #16]
 8008ab0:	4291      	cmp	r1, r2
 8008ab2:	d107      	bne.n	8008ac4 <_dtoa_r+0x604>
 8008ab4:	2230      	movs	r2, #48	; 0x30
 8008ab6:	700a      	strb	r2, [r1, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	460a      	mov	r2, r1
 8008abc:	7811      	ldrb	r1, [r2, #0]
 8008abe:	3101      	adds	r1, #1
 8008ac0:	7011      	strb	r1, [r2, #0]
 8008ac2:	e7b0      	b.n	8008a26 <_dtoa_r+0x566>
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	e7ec      	b.n	8008aa2 <_dtoa_r+0x5e2>
 8008ac8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008acc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad4:	d1b3      	bne.n	8008a3e <_dtoa_r+0x57e>
 8008ad6:	e7d3      	b.n	8008a80 <_dtoa_r+0x5c0>
 8008ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	f000 808d 	beq.w	8008bfa <_dtoa_r+0x73a>
 8008ae0:	9a08      	ldr	r2, [sp, #32]
 8008ae2:	2a01      	cmp	r2, #1
 8008ae4:	dc72      	bgt.n	8008bcc <_dtoa_r+0x70c>
 8008ae6:	2f00      	cmp	r7, #0
 8008ae8:	d06c      	beq.n	8008bc4 <_dtoa_r+0x704>
 8008aea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008aee:	4645      	mov	r5, r8
 8008af0:	4656      	mov	r6, sl
 8008af2:	9a07      	ldr	r2, [sp, #28]
 8008af4:	2101      	movs	r1, #1
 8008af6:	441a      	add	r2, r3
 8008af8:	4620      	mov	r0, r4
 8008afa:	449a      	add	sl, r3
 8008afc:	9207      	str	r2, [sp, #28]
 8008afe:	f000 fcfe 	bl	80094fe <__i2b>
 8008b02:	4607      	mov	r7, r0
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	dd0b      	ble.n	8008b20 <_dtoa_r+0x660>
 8008b08:	9b07      	ldr	r3, [sp, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	dd08      	ble.n	8008b20 <_dtoa_r+0x660>
 8008b0e:	42b3      	cmp	r3, r6
 8008b10:	9a07      	ldr	r2, [sp, #28]
 8008b12:	bfa8      	it	ge
 8008b14:	4633      	movge	r3, r6
 8008b16:	ebaa 0a03 	sub.w	sl, sl, r3
 8008b1a:	1af6      	subs	r6, r6, r3
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	9307      	str	r3, [sp, #28]
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	d01d      	beq.n	8008b62 <_dtoa_r+0x6a2>
 8008b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d06a      	beq.n	8008c02 <_dtoa_r+0x742>
 8008b2c:	b18d      	cbz	r5, 8008b52 <_dtoa_r+0x692>
 8008b2e:	4639      	mov	r1, r7
 8008b30:	462a      	mov	r2, r5
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 fd82 	bl	800963c <__pow5mult>
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 fce6 	bl	8009510 <__multiply>
 8008b44:	9901      	ldr	r1, [sp, #4]
 8008b46:	900c      	str	r0, [sp, #48]	; 0x30
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fc38 	bl	80093be <_Bfree>
 8008b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	ebb8 0205 	subs.w	r2, r8, r5
 8008b56:	d004      	beq.n	8008b62 <_dtoa_r+0x6a2>
 8008b58:	9901      	ldr	r1, [sp, #4]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fd6e 	bl	800963c <__pow5mult>
 8008b60:	9001      	str	r0, [sp, #4]
 8008b62:	2101      	movs	r1, #1
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fcca 	bl	80094fe <__i2b>
 8008b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 81ca 	beq.w	8008f08 <_dtoa_r+0xa48>
 8008b74:	461a      	mov	r2, r3
 8008b76:	4601      	mov	r1, r0
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fd5f 	bl	800963c <__pow5mult>
 8008b7e:	9b08      	ldr	r3, [sp, #32]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	4605      	mov	r5, r0
 8008b84:	dc44      	bgt.n	8008c10 <_dtoa_r+0x750>
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d13c      	bne.n	8008c06 <_dtoa_r+0x746>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d137      	bne.n	8008c06 <_dtoa_r+0x746>
 8008b96:	9b03      	ldr	r3, [sp, #12]
 8008b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b9c:	0d1b      	lsrs	r3, r3, #20
 8008b9e:	051b      	lsls	r3, r3, #20
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d033      	beq.n	8008c0c <_dtoa_r+0x74c>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	f10a 0a01 	add.w	sl, sl, #1
 8008bac:	9307      	str	r3, [sp, #28]
 8008bae:	f04f 0801 	mov.w	r8, #1
 8008bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb4:	bb73      	cbnz	r3, 8008c14 <_dtoa_r+0x754>
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	e034      	b.n	8008c24 <_dtoa_r+0x764>
 8008bba:	bf00      	nop
 8008bbc:	08009fd0 	.word	0x08009fd0
 8008bc0:	08009fa8 	.word	0x08009fa8
 8008bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bca:	e790      	b.n	8008aee <_dtoa_r+0x62e>
 8008bcc:	f109 35ff 	add.w	r5, r9, #4294967295
 8008bd0:	45a8      	cmp	r8, r5
 8008bd2:	bfbf      	itttt	lt
 8008bd4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008bd6:	eba5 0808 	sublt.w	r8, r5, r8
 8008bda:	4443      	addlt	r3, r8
 8008bdc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008bde:	bfb6      	itet	lt
 8008be0:	46a8      	movlt	r8, r5
 8008be2:	eba8 0505 	subge.w	r5, r8, r5
 8008be6:	2500      	movlt	r5, #0
 8008be8:	f1b9 0f00 	cmp.w	r9, #0
 8008bec:	bfb9      	ittee	lt
 8008bee:	ebaa 0609 	sublt.w	r6, sl, r9
 8008bf2:	2300      	movlt	r3, #0
 8008bf4:	4656      	movge	r6, sl
 8008bf6:	464b      	movge	r3, r9
 8008bf8:	e77b      	b.n	8008af2 <_dtoa_r+0x632>
 8008bfa:	4645      	mov	r5, r8
 8008bfc:	4656      	mov	r6, sl
 8008bfe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c00:	e780      	b.n	8008b04 <_dtoa_r+0x644>
 8008c02:	4642      	mov	r2, r8
 8008c04:	e7a8      	b.n	8008b58 <_dtoa_r+0x698>
 8008c06:	f04f 0800 	mov.w	r8, #0
 8008c0a:	e7d2      	b.n	8008bb2 <_dtoa_r+0x6f2>
 8008c0c:	4698      	mov	r8, r3
 8008c0e:	e7d0      	b.n	8008bb2 <_dtoa_r+0x6f2>
 8008c10:	f04f 0800 	mov.w	r8, #0
 8008c14:	692b      	ldr	r3, [r5, #16]
 8008c16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008c1a:	6918      	ldr	r0, [r3, #16]
 8008c1c:	f000 fc21 	bl	8009462 <__hi0bits>
 8008c20:	f1c0 0020 	rsb	r0, r0, #32
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	4418      	add	r0, r3
 8008c28:	f010 001f 	ands.w	r0, r0, #31
 8008c2c:	d047      	beq.n	8008cbe <_dtoa_r+0x7fe>
 8008c2e:	f1c0 0320 	rsb	r3, r0, #32
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	dd3b      	ble.n	8008cae <_dtoa_r+0x7ee>
 8008c36:	9b07      	ldr	r3, [sp, #28]
 8008c38:	f1c0 001c 	rsb	r0, r0, #28
 8008c3c:	4482      	add	sl, r0
 8008c3e:	4406      	add	r6, r0
 8008c40:	4403      	add	r3, r0
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	f1ba 0f00 	cmp.w	sl, #0
 8008c48:	dd05      	ble.n	8008c56 <_dtoa_r+0x796>
 8008c4a:	4652      	mov	r2, sl
 8008c4c:	9901      	ldr	r1, [sp, #4]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fd42 	bl	80096d8 <__lshift>
 8008c54:	9001      	str	r0, [sp, #4]
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dd05      	ble.n	8008c68 <_dtoa_r+0x7a8>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fd39 	bl	80096d8 <__lshift>
 8008c66:	4605      	mov	r5, r0
 8008c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c6a:	b353      	cbz	r3, 8008cc2 <_dtoa_r+0x802>
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	9801      	ldr	r0, [sp, #4]
 8008c70:	f000 fd86 	bl	8009780 <__mcmp>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	da24      	bge.n	8008cc2 <_dtoa_r+0x802>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	220a      	movs	r2, #10
 8008c7c:	9901      	ldr	r1, [sp, #4]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fbb4 	bl	80093ec <__multadd>
 8008c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c86:	9001      	str	r0, [sp, #4]
 8008c88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8142 	beq.w	8008f16 <_dtoa_r+0xa56>
 8008c92:	2300      	movs	r3, #0
 8008c94:	4639      	mov	r1, r7
 8008c96:	220a      	movs	r2, #10
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fba7 	bl	80093ec <__multadd>
 8008c9e:	9b06      	ldr	r3, [sp, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	dc4b      	bgt.n	8008d3e <_dtoa_r+0x87e>
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	dd48      	ble.n	8008d3e <_dtoa_r+0x87e>
 8008cac:	e011      	b.n	8008cd2 <_dtoa_r+0x812>
 8008cae:	d0c9      	beq.n	8008c44 <_dtoa_r+0x784>
 8008cb0:	9a07      	ldr	r2, [sp, #28]
 8008cb2:	331c      	adds	r3, #28
 8008cb4:	441a      	add	r2, r3
 8008cb6:	449a      	add	sl, r3
 8008cb8:	441e      	add	r6, r3
 8008cba:	4613      	mov	r3, r2
 8008cbc:	e7c1      	b.n	8008c42 <_dtoa_r+0x782>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	e7f6      	b.n	8008cb0 <_dtoa_r+0x7f0>
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	dc34      	bgt.n	8008d32 <_dtoa_r+0x872>
 8008cc8:	9b08      	ldr	r3, [sp, #32]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	dd31      	ble.n	8008d32 <_dtoa_r+0x872>
 8008cce:	f8cd 9018 	str.w	r9, [sp, #24]
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	b963      	cbnz	r3, 8008cf0 <_dtoa_r+0x830>
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	2205      	movs	r2, #5
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fb86 	bl	80093ec <__multadd>
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	9801      	ldr	r0, [sp, #4]
 8008ce6:	f000 fd4b 	bl	8009780 <__mcmp>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f73f adfc 	bgt.w	80088e8 <_dtoa_r+0x428>
 8008cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf2:	9e04      	ldr	r6, [sp, #16]
 8008cf4:	ea6f 0b03 	mvn.w	fp, r3
 8008cf8:	f04f 0900 	mov.w	r9, #0
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 fb5d 	bl	80093be <_Bfree>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f43f aebb 	beq.w	8008a80 <_dtoa_r+0x5c0>
 8008d0a:	f1b9 0f00 	cmp.w	r9, #0
 8008d0e:	d005      	beq.n	8008d1c <_dtoa_r+0x85c>
 8008d10:	45b9      	cmp	r9, r7
 8008d12:	d003      	beq.n	8008d1c <_dtoa_r+0x85c>
 8008d14:	4649      	mov	r1, r9
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 fb51 	bl	80093be <_Bfree>
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 fb4d 	bl	80093be <_Bfree>
 8008d24:	e6ac      	b.n	8008a80 <_dtoa_r+0x5c0>
 8008d26:	2500      	movs	r5, #0
 8008d28:	462f      	mov	r7, r5
 8008d2a:	e7e1      	b.n	8008cf0 <_dtoa_r+0x830>
 8008d2c:	469b      	mov	fp, r3
 8008d2e:	462f      	mov	r7, r5
 8008d30:	e5da      	b.n	80088e8 <_dtoa_r+0x428>
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	f8cd 9018 	str.w	r9, [sp, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80f3 	beq.w	8008f24 <_dtoa_r+0xa64>
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	dd05      	ble.n	8008d4e <_dtoa_r+0x88e>
 8008d42:	4639      	mov	r1, r7
 8008d44:	4632      	mov	r2, r6
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fcc6 	bl	80096d8 <__lshift>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	f1b8 0f00 	cmp.w	r8, #0
 8008d52:	d04c      	beq.n	8008dee <_dtoa_r+0x92e>
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fafd 	bl	8009356 <_Balloc>
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	3202      	adds	r2, #2
 8008d60:	4606      	mov	r6, r0
 8008d62:	0092      	lsls	r2, r2, #2
 8008d64:	f107 010c 	add.w	r1, r7, #12
 8008d68:	300c      	adds	r0, #12
 8008d6a:	f000 fae9 	bl	8009340 <memcpy>
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4631      	mov	r1, r6
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fcb0 	bl	80096d8 <__lshift>
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	46b9      	mov	r9, r7
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	4607      	mov	r7, r0
 8008d88:	4629      	mov	r1, r5
 8008d8a:	9801      	ldr	r0, [sp, #4]
 8008d8c:	f7ff fb0c 	bl	80083a8 <quorem>
 8008d90:	4649      	mov	r1, r9
 8008d92:	4606      	mov	r6, r0
 8008d94:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d98:	9801      	ldr	r0, [sp, #4]
 8008d9a:	f000 fcf1 	bl	8009780 <__mcmp>
 8008d9e:	463a      	mov	r2, r7
 8008da0:	9002      	str	r0, [sp, #8]
 8008da2:	4629      	mov	r1, r5
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fd05 	bl	80097b4 <__mdiff>
 8008daa:	68c3      	ldr	r3, [r0, #12]
 8008dac:	4602      	mov	r2, r0
 8008dae:	bb03      	cbnz	r3, 8008df2 <_dtoa_r+0x932>
 8008db0:	4601      	mov	r1, r0
 8008db2:	9009      	str	r0, [sp, #36]	; 0x24
 8008db4:	9801      	ldr	r0, [sp, #4]
 8008db6:	f000 fce3 	bl	8009780 <__mcmp>
 8008dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc4:	f000 fafb 	bl	80093be <_Bfree>
 8008dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dca:	b9a3      	cbnz	r3, 8008df6 <_dtoa_r+0x936>
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	b992      	cbnz	r2, 8008df6 <_dtoa_r+0x936>
 8008dd0:	9a07      	ldr	r2, [sp, #28]
 8008dd2:	b982      	cbnz	r2, 8008df6 <_dtoa_r+0x936>
 8008dd4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008dd8:	d029      	beq.n	8008e2e <_dtoa_r+0x96e>
 8008dda:	9b02      	ldr	r3, [sp, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dd01      	ble.n	8008de4 <_dtoa_r+0x924>
 8008de0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008de4:	f10a 0601 	add.w	r6, sl, #1
 8008de8:	f88a 8000 	strb.w	r8, [sl]
 8008dec:	e786      	b.n	8008cfc <_dtoa_r+0x83c>
 8008dee:	4638      	mov	r0, r7
 8008df0:	e7c2      	b.n	8008d78 <_dtoa_r+0x8b8>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7e3      	b.n	8008dbe <_dtoa_r+0x8fe>
 8008df6:	9a02      	ldr	r2, [sp, #8]
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	db04      	blt.n	8008e06 <_dtoa_r+0x946>
 8008dfc:	d124      	bne.n	8008e48 <_dtoa_r+0x988>
 8008dfe:	9a08      	ldr	r2, [sp, #32]
 8008e00:	bb12      	cbnz	r2, 8008e48 <_dtoa_r+0x988>
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	bb02      	cbnz	r2, 8008e48 <_dtoa_r+0x988>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	ddec      	ble.n	8008de4 <_dtoa_r+0x924>
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	9901      	ldr	r1, [sp, #4]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 fc62 	bl	80096d8 <__lshift>
 8008e14:	4629      	mov	r1, r5
 8008e16:	9001      	str	r0, [sp, #4]
 8008e18:	f000 fcb2 	bl	8009780 <__mcmp>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	dc03      	bgt.n	8008e28 <_dtoa_r+0x968>
 8008e20:	d1e0      	bne.n	8008de4 <_dtoa_r+0x924>
 8008e22:	f018 0f01 	tst.w	r8, #1
 8008e26:	d0dd      	beq.n	8008de4 <_dtoa_r+0x924>
 8008e28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e2c:	d1d8      	bne.n	8008de0 <_dtoa_r+0x920>
 8008e2e:	2339      	movs	r3, #57	; 0x39
 8008e30:	f10a 0601 	add.w	r6, sl, #1
 8008e34:	f88a 3000 	strb.w	r3, [sl]
 8008e38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e3c:	2b39      	cmp	r3, #57	; 0x39
 8008e3e:	f106 32ff 	add.w	r2, r6, #4294967295
 8008e42:	d04c      	beq.n	8008ede <_dtoa_r+0xa1e>
 8008e44:	3301      	adds	r3, #1
 8008e46:	e051      	b.n	8008eec <_dtoa_r+0xa2c>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f10a 0601 	add.w	r6, sl, #1
 8008e4e:	dd05      	ble.n	8008e5c <_dtoa_r+0x99c>
 8008e50:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e54:	d0eb      	beq.n	8008e2e <_dtoa_r+0x96e>
 8008e56:	f108 0801 	add.w	r8, r8, #1
 8008e5a:	e7c5      	b.n	8008de8 <_dtoa_r+0x928>
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	9a06      	ldr	r2, [sp, #24]
 8008e60:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008e64:	1af3      	subs	r3, r6, r3
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d021      	beq.n	8008eae <_dtoa_r+0x9ee>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	220a      	movs	r2, #10
 8008e6e:	9901      	ldr	r1, [sp, #4]
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 fabb 	bl	80093ec <__multadd>
 8008e76:	45b9      	cmp	r9, r7
 8008e78:	9001      	str	r0, [sp, #4]
 8008e7a:	f04f 0300 	mov.w	r3, #0
 8008e7e:	f04f 020a 	mov.w	r2, #10
 8008e82:	4649      	mov	r1, r9
 8008e84:	4620      	mov	r0, r4
 8008e86:	d105      	bne.n	8008e94 <_dtoa_r+0x9d4>
 8008e88:	f000 fab0 	bl	80093ec <__multadd>
 8008e8c:	4681      	mov	r9, r0
 8008e8e:	4607      	mov	r7, r0
 8008e90:	46b2      	mov	sl, r6
 8008e92:	e779      	b.n	8008d88 <_dtoa_r+0x8c8>
 8008e94:	f000 faaa 	bl	80093ec <__multadd>
 8008e98:	4639      	mov	r1, r7
 8008e9a:	4681      	mov	r9, r0
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	220a      	movs	r2, #10
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 faa3 	bl	80093ec <__multadd>
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	e7f2      	b.n	8008e90 <_dtoa_r+0x9d0>
 8008eaa:	f04f 0900 	mov.w	r9, #0
 8008eae:	2201      	movs	r2, #1
 8008eb0:	9901      	ldr	r1, [sp, #4]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 fc10 	bl	80096d8 <__lshift>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	9001      	str	r0, [sp, #4]
 8008ebc:	f000 fc60 	bl	8009780 <__mcmp>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	dcb9      	bgt.n	8008e38 <_dtoa_r+0x978>
 8008ec4:	d102      	bne.n	8008ecc <_dtoa_r+0xa0c>
 8008ec6:	f018 0f01 	tst.w	r8, #1
 8008eca:	d1b5      	bne.n	8008e38 <_dtoa_r+0x978>
 8008ecc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ed0:	2b30      	cmp	r3, #48	; 0x30
 8008ed2:	f106 32ff 	add.w	r2, r6, #4294967295
 8008ed6:	f47f af11 	bne.w	8008cfc <_dtoa_r+0x83c>
 8008eda:	4616      	mov	r6, r2
 8008edc:	e7f6      	b.n	8008ecc <_dtoa_r+0xa0c>
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d105      	bne.n	8008ef0 <_dtoa_r+0xa30>
 8008ee4:	9a04      	ldr	r2, [sp, #16]
 8008ee6:	f10b 0b01 	add.w	fp, fp, #1
 8008eea:	2331      	movs	r3, #49	; 0x31
 8008eec:	7013      	strb	r3, [r2, #0]
 8008eee:	e705      	b.n	8008cfc <_dtoa_r+0x83c>
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	e7a1      	b.n	8008e38 <_dtoa_r+0x978>
 8008ef4:	4b16      	ldr	r3, [pc, #88]	; (8008f50 <_dtoa_r+0xa90>)
 8008ef6:	f7ff bb48 	b.w	800858a <_dtoa_r+0xca>
 8008efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f47f ab23 	bne.w	8008548 <_dtoa_r+0x88>
 8008f02:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <_dtoa_r+0xa94>)
 8008f04:	f7ff bb41 	b.w	800858a <_dtoa_r+0xca>
 8008f08:	9b08      	ldr	r3, [sp, #32]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	f77f ae3b 	ble.w	8008b86 <_dtoa_r+0x6c6>
 8008f10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008f14:	e64f      	b.n	8008bb6 <_dtoa_r+0x6f6>
 8008f16:	9b06      	ldr	r3, [sp, #24]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dc03      	bgt.n	8008f24 <_dtoa_r+0xa64>
 8008f1c:	9b08      	ldr	r3, [sp, #32]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	f73f aed7 	bgt.w	8008cd2 <_dtoa_r+0x812>
 8008f24:	9e04      	ldr	r6, [sp, #16]
 8008f26:	9801      	ldr	r0, [sp, #4]
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7ff fa3d 	bl	80083a8 <quorem>
 8008f2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f32:	f806 8b01 	strb.w	r8, [r6], #1
 8008f36:	9b04      	ldr	r3, [sp, #16]
 8008f38:	9a06      	ldr	r2, [sp, #24]
 8008f3a:	1af3      	subs	r3, r6, r3
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	ddb4      	ble.n	8008eaa <_dtoa_r+0x9ea>
 8008f40:	2300      	movs	r3, #0
 8008f42:	220a      	movs	r2, #10
 8008f44:	9901      	ldr	r1, [sp, #4]
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fa50 	bl	80093ec <__multadd>
 8008f4c:	9001      	str	r0, [sp, #4]
 8008f4e:	e7ea      	b.n	8008f26 <_dtoa_r+0xa66>
 8008f50:	08009f10 	.word	0x08009f10
 8008f54:	08009f34 	.word	0x08009f34

08008f58 <__sflush_r>:
 8008f58:	898a      	ldrh	r2, [r1, #12]
 8008f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5e:	4605      	mov	r5, r0
 8008f60:	0710      	lsls	r0, r2, #28
 8008f62:	460c      	mov	r4, r1
 8008f64:	d458      	bmi.n	8009018 <__sflush_r+0xc0>
 8008f66:	684b      	ldr	r3, [r1, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc05      	bgt.n	8008f78 <__sflush_r+0x20>
 8008f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dc02      	bgt.n	8008f78 <__sflush_r+0x20>
 8008f72:	2000      	movs	r0, #0
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d0f9      	beq.n	8008f72 <__sflush_r+0x1a>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f84:	682f      	ldr	r7, [r5, #0]
 8008f86:	6a21      	ldr	r1, [r4, #32]
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	d032      	beq.n	8008ff2 <__sflush_r+0x9a>
 8008f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	075a      	lsls	r2, r3, #29
 8008f92:	d505      	bpl.n	8008fa0 <__sflush_r+0x48>
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	1ac0      	subs	r0, r0, r3
 8008f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f9a:	b10b      	cbz	r3, 8008fa0 <__sflush_r+0x48>
 8008f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f9e:	1ac0      	subs	r0, r0, r3
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa6:	6a21      	ldr	r1, [r4, #32]
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b0      	blx	r6
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	d106      	bne.n	8008fc0 <__sflush_r+0x68>
 8008fb2:	6829      	ldr	r1, [r5, #0]
 8008fb4:	291d      	cmp	r1, #29
 8008fb6:	d848      	bhi.n	800904a <__sflush_r+0xf2>
 8008fb8:	4a29      	ldr	r2, [pc, #164]	; (8009060 <__sflush_r+0x108>)
 8008fba:	40ca      	lsrs	r2, r1
 8008fbc:	07d6      	lsls	r6, r2, #31
 8008fbe:	d544      	bpl.n	800904a <__sflush_r+0xf2>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	6062      	str	r2, [r4, #4]
 8008fc4:	04d9      	lsls	r1, r3, #19
 8008fc6:	6922      	ldr	r2, [r4, #16]
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	d504      	bpl.n	8008fd6 <__sflush_r+0x7e>
 8008fcc:	1c42      	adds	r2, r0, #1
 8008fce:	d101      	bne.n	8008fd4 <__sflush_r+0x7c>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b903      	cbnz	r3, 8008fd6 <__sflush_r+0x7e>
 8008fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd8:	602f      	str	r7, [r5, #0]
 8008fda:	2900      	cmp	r1, #0
 8008fdc:	d0c9      	beq.n	8008f72 <__sflush_r+0x1a>
 8008fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	d002      	beq.n	8008fec <__sflush_r+0x94>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 fc9e 	bl	8009928 <_free_r>
 8008fec:	2000      	movs	r0, #0
 8008fee:	6360      	str	r0, [r4, #52]	; 0x34
 8008ff0:	e7c0      	b.n	8008f74 <__sflush_r+0x1c>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b0      	blx	r6
 8008ff8:	1c41      	adds	r1, r0, #1
 8008ffa:	d1c8      	bne.n	8008f8e <__sflush_r+0x36>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0c5      	beq.n	8008f8e <__sflush_r+0x36>
 8009002:	2b1d      	cmp	r3, #29
 8009004:	d001      	beq.n	800900a <__sflush_r+0xb2>
 8009006:	2b16      	cmp	r3, #22
 8009008:	d101      	bne.n	800900e <__sflush_r+0xb6>
 800900a:	602f      	str	r7, [r5, #0]
 800900c:	e7b1      	b.n	8008f72 <__sflush_r+0x1a>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	e7ad      	b.n	8008f74 <__sflush_r+0x1c>
 8009018:	690f      	ldr	r7, [r1, #16]
 800901a:	2f00      	cmp	r7, #0
 800901c:	d0a9      	beq.n	8008f72 <__sflush_r+0x1a>
 800901e:	0793      	lsls	r3, r2, #30
 8009020:	680e      	ldr	r6, [r1, #0]
 8009022:	bf08      	it	eq
 8009024:	694b      	ldreq	r3, [r1, #20]
 8009026:	600f      	str	r7, [r1, #0]
 8009028:	bf18      	it	ne
 800902a:	2300      	movne	r3, #0
 800902c:	eba6 0807 	sub.w	r8, r6, r7
 8009030:	608b      	str	r3, [r1, #8]
 8009032:	f1b8 0f00 	cmp.w	r8, #0
 8009036:	dd9c      	ble.n	8008f72 <__sflush_r+0x1a>
 8009038:	4643      	mov	r3, r8
 800903a:	463a      	mov	r2, r7
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009040:	4628      	mov	r0, r5
 8009042:	47b0      	blx	r6
 8009044:	2800      	cmp	r0, #0
 8009046:	dc06      	bgt.n	8009056 <__sflush_r+0xfe>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295
 8009054:	e78e      	b.n	8008f74 <__sflush_r+0x1c>
 8009056:	4407      	add	r7, r0
 8009058:	eba8 0800 	sub.w	r8, r8, r0
 800905c:	e7e9      	b.n	8009032 <__sflush_r+0xda>
 800905e:	bf00      	nop
 8009060:	20400001 	.word	0x20400001

08009064 <_fflush_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	690b      	ldr	r3, [r1, #16]
 8009068:	4605      	mov	r5, r0
 800906a:	460c      	mov	r4, r1
 800906c:	b1db      	cbz	r3, 80090a6 <_fflush_r+0x42>
 800906e:	b118      	cbz	r0, 8009078 <_fflush_r+0x14>
 8009070:	6983      	ldr	r3, [r0, #24]
 8009072:	b90b      	cbnz	r3, 8009078 <_fflush_r+0x14>
 8009074:	f000 f860 	bl	8009138 <__sinit>
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <_fflush_r+0x48>)
 800907a:	429c      	cmp	r4, r3
 800907c:	d109      	bne.n	8009092 <_fflush_r+0x2e>
 800907e:	686c      	ldr	r4, [r5, #4]
 8009080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009084:	b17b      	cbz	r3, 80090a6 <_fflush_r+0x42>
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908e:	f7ff bf63 	b.w	8008f58 <__sflush_r>
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <_fflush_r+0x4c>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d101      	bne.n	800909c <_fflush_r+0x38>
 8009098:	68ac      	ldr	r4, [r5, #8]
 800909a:	e7f1      	b.n	8009080 <_fflush_r+0x1c>
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <_fflush_r+0x50>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	bf08      	it	eq
 80090a2:	68ec      	ldreq	r4, [r5, #12]
 80090a4:	e7ec      	b.n	8009080 <_fflush_r+0x1c>
 80090a6:	2000      	movs	r0, #0
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	08009f64 	.word	0x08009f64
 80090b0:	08009f84 	.word	0x08009f84
 80090b4:	08009f44 	.word	0x08009f44

080090b8 <std>:
 80090b8:	2300      	movs	r3, #0
 80090ba:	b510      	push	{r4, lr}
 80090bc:	4604      	mov	r4, r0
 80090be:	e9c0 3300 	strd	r3, r3, [r0]
 80090c2:	6083      	str	r3, [r0, #8]
 80090c4:	8181      	strh	r1, [r0, #12]
 80090c6:	6643      	str	r3, [r0, #100]	; 0x64
 80090c8:	81c2      	strh	r2, [r0, #14]
 80090ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ce:	6183      	str	r3, [r0, #24]
 80090d0:	4619      	mov	r1, r3
 80090d2:	2208      	movs	r2, #8
 80090d4:	305c      	adds	r0, #92	; 0x5c
 80090d6:	f7fe fbe9 	bl	80078ac <memset>
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <std+0x38>)
 80090dc:	6263      	str	r3, [r4, #36]	; 0x24
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <std+0x3c>)
 80090e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <std+0x40>)
 80090e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x44>)
 80090e8:	6224      	str	r4, [r4, #32]
 80090ea:	6323      	str	r3, [r4, #48]	; 0x30
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	bf00      	nop
 80090f0:	08009d19 	.word	0x08009d19
 80090f4:	08009d3b 	.word	0x08009d3b
 80090f8:	08009d73 	.word	0x08009d73
 80090fc:	08009d97 	.word	0x08009d97

08009100 <_cleanup_r>:
 8009100:	4901      	ldr	r1, [pc, #4]	; (8009108 <_cleanup_r+0x8>)
 8009102:	f000 b885 	b.w	8009210 <_fwalk_reent>
 8009106:	bf00      	nop
 8009108:	08009065 	.word	0x08009065

0800910c <__sfmoreglue>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	1e4a      	subs	r2, r1, #1
 8009110:	2568      	movs	r5, #104	; 0x68
 8009112:	4355      	muls	r5, r2
 8009114:	460e      	mov	r6, r1
 8009116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800911a:	f000 fc53 	bl	80099c4 <_malloc_r>
 800911e:	4604      	mov	r4, r0
 8009120:	b140      	cbz	r0, 8009134 <__sfmoreglue+0x28>
 8009122:	2100      	movs	r1, #0
 8009124:	e9c0 1600 	strd	r1, r6, [r0]
 8009128:	300c      	adds	r0, #12
 800912a:	60a0      	str	r0, [r4, #8]
 800912c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009130:	f7fe fbbc 	bl	80078ac <memset>
 8009134:	4620      	mov	r0, r4
 8009136:	bd70      	pop	{r4, r5, r6, pc}

08009138 <__sinit>:
 8009138:	6983      	ldr	r3, [r0, #24]
 800913a:	b510      	push	{r4, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	bb33      	cbnz	r3, 800918e <__sinit+0x56>
 8009140:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009144:	6503      	str	r3, [r0, #80]	; 0x50
 8009146:	4b12      	ldr	r3, [pc, #72]	; (8009190 <__sinit+0x58>)
 8009148:	4a12      	ldr	r2, [pc, #72]	; (8009194 <__sinit+0x5c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6282      	str	r2, [r0, #40]	; 0x28
 800914e:	4298      	cmp	r0, r3
 8009150:	bf04      	itt	eq
 8009152:	2301      	moveq	r3, #1
 8009154:	6183      	streq	r3, [r0, #24]
 8009156:	f000 f81f 	bl	8009198 <__sfp>
 800915a:	6060      	str	r0, [r4, #4]
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f81b 	bl	8009198 <__sfp>
 8009162:	60a0      	str	r0, [r4, #8]
 8009164:	4620      	mov	r0, r4
 8009166:	f000 f817 	bl	8009198 <__sfp>
 800916a:	2200      	movs	r2, #0
 800916c:	60e0      	str	r0, [r4, #12]
 800916e:	2104      	movs	r1, #4
 8009170:	6860      	ldr	r0, [r4, #4]
 8009172:	f7ff ffa1 	bl	80090b8 <std>
 8009176:	2201      	movs	r2, #1
 8009178:	2109      	movs	r1, #9
 800917a:	68a0      	ldr	r0, [r4, #8]
 800917c:	f7ff ff9c 	bl	80090b8 <std>
 8009180:	2202      	movs	r2, #2
 8009182:	2112      	movs	r1, #18
 8009184:	68e0      	ldr	r0, [r4, #12]
 8009186:	f7ff ff97 	bl	80090b8 <std>
 800918a:	2301      	movs	r3, #1
 800918c:	61a3      	str	r3, [r4, #24]
 800918e:	bd10      	pop	{r4, pc}
 8009190:	08009efc 	.word	0x08009efc
 8009194:	08009101 	.word	0x08009101

08009198 <__sfp>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	4b1b      	ldr	r3, [pc, #108]	; (8009208 <__sfp+0x70>)
 800919c:	681e      	ldr	r6, [r3, #0]
 800919e:	69b3      	ldr	r3, [r6, #24]
 80091a0:	4607      	mov	r7, r0
 80091a2:	b913      	cbnz	r3, 80091aa <__sfp+0x12>
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff ffc7 	bl	8009138 <__sinit>
 80091aa:	3648      	adds	r6, #72	; 0x48
 80091ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	d503      	bpl.n	80091bc <__sfp+0x24>
 80091b4:	6833      	ldr	r3, [r6, #0]
 80091b6:	b133      	cbz	r3, 80091c6 <__sfp+0x2e>
 80091b8:	6836      	ldr	r6, [r6, #0]
 80091ba:	e7f7      	b.n	80091ac <__sfp+0x14>
 80091bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091c0:	b16d      	cbz	r5, 80091de <__sfp+0x46>
 80091c2:	3468      	adds	r4, #104	; 0x68
 80091c4:	e7f4      	b.n	80091b0 <__sfp+0x18>
 80091c6:	2104      	movs	r1, #4
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff ff9f 	bl	800910c <__sfmoreglue>
 80091ce:	6030      	str	r0, [r6, #0]
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1f1      	bne.n	80091b8 <__sfp+0x20>
 80091d4:	230c      	movs	r3, #12
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	4604      	mov	r4, r0
 80091da:	4620      	mov	r0, r4
 80091dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091de:	4b0b      	ldr	r3, [pc, #44]	; (800920c <__sfp+0x74>)
 80091e0:	6665      	str	r5, [r4, #100]	; 0x64
 80091e2:	e9c4 5500 	strd	r5, r5, [r4]
 80091e6:	60a5      	str	r5, [r4, #8]
 80091e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80091ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80091f0:	2208      	movs	r2, #8
 80091f2:	4629      	mov	r1, r5
 80091f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f8:	f7fe fb58 	bl	80078ac <memset>
 80091fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009204:	e7e9      	b.n	80091da <__sfp+0x42>
 8009206:	bf00      	nop
 8009208:	08009efc 	.word	0x08009efc
 800920c:	ffff0001 	.word	0xffff0001

08009210 <_fwalk_reent>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800921c:	2600      	movs	r6, #0
 800921e:	b914      	cbnz	r4, 8009226 <_fwalk_reent+0x16>
 8009220:	4630      	mov	r0, r6
 8009222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009226:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800922a:	3f01      	subs	r7, #1
 800922c:	d501      	bpl.n	8009232 <_fwalk_reent+0x22>
 800922e:	6824      	ldr	r4, [r4, #0]
 8009230:	e7f5      	b.n	800921e <_fwalk_reent+0xe>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d907      	bls.n	8009248 <_fwalk_reent+0x38>
 8009238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800923c:	3301      	adds	r3, #1
 800923e:	d003      	beq.n	8009248 <_fwalk_reent+0x38>
 8009240:	4629      	mov	r1, r5
 8009242:	4640      	mov	r0, r8
 8009244:	47c8      	blx	r9
 8009246:	4306      	orrs	r6, r0
 8009248:	3568      	adds	r5, #104	; 0x68
 800924a:	e7ee      	b.n	800922a <_fwalk_reent+0x1a>

0800924c <_localeconv_r>:
 800924c:	4b04      	ldr	r3, [pc, #16]	; (8009260 <_localeconv_r+0x14>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6a18      	ldr	r0, [r3, #32]
 8009252:	4b04      	ldr	r3, [pc, #16]	; (8009264 <_localeconv_r+0x18>)
 8009254:	2800      	cmp	r0, #0
 8009256:	bf08      	it	eq
 8009258:	4618      	moveq	r0, r3
 800925a:	30f0      	adds	r0, #240	; 0xf0
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000024 	.word	0x20000024
 8009264:	20000088 	.word	0x20000088

08009268 <__swhatbuf_r>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	460e      	mov	r6, r1
 800926c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009270:	2900      	cmp	r1, #0
 8009272:	b096      	sub	sp, #88	; 0x58
 8009274:	4614      	mov	r4, r2
 8009276:	461d      	mov	r5, r3
 8009278:	da07      	bge.n	800928a <__swhatbuf_r+0x22>
 800927a:	2300      	movs	r3, #0
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	89b3      	ldrh	r3, [r6, #12]
 8009280:	061a      	lsls	r2, r3, #24
 8009282:	d410      	bmi.n	80092a6 <__swhatbuf_r+0x3e>
 8009284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009288:	e00e      	b.n	80092a8 <__swhatbuf_r+0x40>
 800928a:	466a      	mov	r2, sp
 800928c:	f000 fdaa 	bl	8009de4 <_fstat_r>
 8009290:	2800      	cmp	r0, #0
 8009292:	dbf2      	blt.n	800927a <__swhatbuf_r+0x12>
 8009294:	9a01      	ldr	r2, [sp, #4]
 8009296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800929a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800929e:	425a      	negs	r2, r3
 80092a0:	415a      	adcs	r2, r3
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	e7ee      	b.n	8009284 <__swhatbuf_r+0x1c>
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	2000      	movs	r0, #0
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	b016      	add	sp, #88	; 0x58
 80092ae:	bd70      	pop	{r4, r5, r6, pc}

080092b0 <__smakebuf_r>:
 80092b0:	898b      	ldrh	r3, [r1, #12]
 80092b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092b4:	079d      	lsls	r5, r3, #30
 80092b6:	4606      	mov	r6, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	d507      	bpl.n	80092cc <__smakebuf_r+0x1c>
 80092bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	2301      	movs	r3, #1
 80092c6:	6163      	str	r3, [r4, #20]
 80092c8:	b002      	add	sp, #8
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	ab01      	add	r3, sp, #4
 80092ce:	466a      	mov	r2, sp
 80092d0:	f7ff ffca 	bl	8009268 <__swhatbuf_r>
 80092d4:	9900      	ldr	r1, [sp, #0]
 80092d6:	4605      	mov	r5, r0
 80092d8:	4630      	mov	r0, r6
 80092da:	f000 fb73 	bl	80099c4 <_malloc_r>
 80092de:	b948      	cbnz	r0, 80092f4 <__smakebuf_r+0x44>
 80092e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d4ef      	bmi.n	80092c8 <__smakebuf_r+0x18>
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	f043 0302 	orr.w	r3, r3, #2
 80092f0:	81a3      	strh	r3, [r4, #12]
 80092f2:	e7e3      	b.n	80092bc <__smakebuf_r+0xc>
 80092f4:	4b0d      	ldr	r3, [pc, #52]	; (800932c <__smakebuf_r+0x7c>)
 80092f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	9b00      	ldr	r3, [sp, #0]
 8009304:	6163      	str	r3, [r4, #20]
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	6120      	str	r0, [r4, #16]
 800930a:	b15b      	cbz	r3, 8009324 <__smakebuf_r+0x74>
 800930c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009310:	4630      	mov	r0, r6
 8009312:	f000 fd79 	bl	8009e08 <_isatty_r>
 8009316:	b128      	cbz	r0, 8009324 <__smakebuf_r+0x74>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	f023 0303 	bic.w	r3, r3, #3
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	431d      	orrs	r5, r3
 8009328:	81a5      	strh	r5, [r4, #12]
 800932a:	e7cd      	b.n	80092c8 <__smakebuf_r+0x18>
 800932c:	08009101 	.word	0x08009101

08009330 <malloc>:
 8009330:	4b02      	ldr	r3, [pc, #8]	; (800933c <malloc+0xc>)
 8009332:	4601      	mov	r1, r0
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	f000 bb45 	b.w	80099c4 <_malloc_r>
 800933a:	bf00      	nop
 800933c:	20000024 	.word	0x20000024

08009340 <memcpy>:
 8009340:	b510      	push	{r4, lr}
 8009342:	1e43      	subs	r3, r0, #1
 8009344:	440a      	add	r2, r1
 8009346:	4291      	cmp	r1, r2
 8009348:	d100      	bne.n	800934c <memcpy+0xc>
 800934a:	bd10      	pop	{r4, pc}
 800934c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009354:	e7f7      	b.n	8009346 <memcpy+0x6>

08009356 <_Balloc>:
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800935a:	4604      	mov	r4, r0
 800935c:	460e      	mov	r6, r1
 800935e:	b93d      	cbnz	r5, 8009370 <_Balloc+0x1a>
 8009360:	2010      	movs	r0, #16
 8009362:	f7ff ffe5 	bl	8009330 <malloc>
 8009366:	6260      	str	r0, [r4, #36]	; 0x24
 8009368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800936c:	6005      	str	r5, [r0, #0]
 800936e:	60c5      	str	r5, [r0, #12]
 8009370:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009372:	68eb      	ldr	r3, [r5, #12]
 8009374:	b183      	cbz	r3, 8009398 <_Balloc+0x42>
 8009376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800937e:	b9b8      	cbnz	r0, 80093b0 <_Balloc+0x5a>
 8009380:	2101      	movs	r1, #1
 8009382:	fa01 f506 	lsl.w	r5, r1, r6
 8009386:	1d6a      	adds	r2, r5, #5
 8009388:	0092      	lsls	r2, r2, #2
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fabe 	bl	800990c <_calloc_r>
 8009390:	b160      	cbz	r0, 80093ac <_Balloc+0x56>
 8009392:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009396:	e00e      	b.n	80093b6 <_Balloc+0x60>
 8009398:	2221      	movs	r2, #33	; 0x21
 800939a:	2104      	movs	r1, #4
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fab5 	bl	800990c <_calloc_r>
 80093a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a4:	60e8      	str	r0, [r5, #12]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e4      	bne.n	8009376 <_Balloc+0x20>
 80093ac:	2000      	movs	r0, #0
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	6802      	ldr	r2, [r0, #0]
 80093b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80093b6:	2300      	movs	r3, #0
 80093b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093bc:	e7f7      	b.n	80093ae <_Balloc+0x58>

080093be <_Bfree>:
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80093c2:	4606      	mov	r6, r0
 80093c4:	460d      	mov	r5, r1
 80093c6:	b93c      	cbnz	r4, 80093d8 <_Bfree+0x1a>
 80093c8:	2010      	movs	r0, #16
 80093ca:	f7ff ffb1 	bl	8009330 <malloc>
 80093ce:	6270      	str	r0, [r6, #36]	; 0x24
 80093d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093d4:	6004      	str	r4, [r0, #0]
 80093d6:	60c4      	str	r4, [r0, #12]
 80093d8:	b13d      	cbz	r5, 80093ea <_Bfree+0x2c>
 80093da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093dc:	686a      	ldr	r2, [r5, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093e4:	6029      	str	r1, [r5, #0]
 80093e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80093ea:	bd70      	pop	{r4, r5, r6, pc}

080093ec <__multadd>:
 80093ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f0:	690d      	ldr	r5, [r1, #16]
 80093f2:	461f      	mov	r7, r3
 80093f4:	4606      	mov	r6, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	f101 0c14 	add.w	ip, r1, #20
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8dc 0000 	ldr.w	r0, [ip]
 8009402:	b281      	uxth	r1, r0
 8009404:	fb02 7101 	mla	r1, r2, r1, r7
 8009408:	0c0f      	lsrs	r7, r1, #16
 800940a:	0c00      	lsrs	r0, r0, #16
 800940c:	fb02 7000 	mla	r0, r2, r0, r7
 8009410:	b289      	uxth	r1, r1
 8009412:	3301      	adds	r3, #1
 8009414:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009418:	429d      	cmp	r5, r3
 800941a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800941e:	f84c 1b04 	str.w	r1, [ip], #4
 8009422:	dcec      	bgt.n	80093fe <__multadd+0x12>
 8009424:	b1d7      	cbz	r7, 800945c <__multadd+0x70>
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	42ab      	cmp	r3, r5
 800942a:	dc12      	bgt.n	8009452 <__multadd+0x66>
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	4630      	mov	r0, r6
 8009430:	3101      	adds	r1, #1
 8009432:	f7ff ff90 	bl	8009356 <_Balloc>
 8009436:	6922      	ldr	r2, [r4, #16]
 8009438:	3202      	adds	r2, #2
 800943a:	f104 010c 	add.w	r1, r4, #12
 800943e:	4680      	mov	r8, r0
 8009440:	0092      	lsls	r2, r2, #2
 8009442:	300c      	adds	r0, #12
 8009444:	f7ff ff7c 	bl	8009340 <memcpy>
 8009448:	4621      	mov	r1, r4
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ffb7 	bl	80093be <_Bfree>
 8009450:	4644      	mov	r4, r8
 8009452:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009456:	3501      	adds	r5, #1
 8009458:	615f      	str	r7, [r3, #20]
 800945a:	6125      	str	r5, [r4, #16]
 800945c:	4620      	mov	r0, r4
 800945e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009462 <__hi0bits>:
 8009462:	0c02      	lsrs	r2, r0, #16
 8009464:	0412      	lsls	r2, r2, #16
 8009466:	4603      	mov	r3, r0
 8009468:	b9b2      	cbnz	r2, 8009498 <__hi0bits+0x36>
 800946a:	0403      	lsls	r3, r0, #16
 800946c:	2010      	movs	r0, #16
 800946e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009472:	bf04      	itt	eq
 8009474:	021b      	lsleq	r3, r3, #8
 8009476:	3008      	addeq	r0, #8
 8009478:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800947c:	bf04      	itt	eq
 800947e:	011b      	lsleq	r3, r3, #4
 8009480:	3004      	addeq	r0, #4
 8009482:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009486:	bf04      	itt	eq
 8009488:	009b      	lsleq	r3, r3, #2
 800948a:	3002      	addeq	r0, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	db06      	blt.n	800949e <__hi0bits+0x3c>
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	d503      	bpl.n	800949c <__hi0bits+0x3a>
 8009494:	3001      	adds	r0, #1
 8009496:	4770      	bx	lr
 8009498:	2000      	movs	r0, #0
 800949a:	e7e8      	b.n	800946e <__hi0bits+0xc>
 800949c:	2020      	movs	r0, #32
 800949e:	4770      	bx	lr

080094a0 <__lo0bits>:
 80094a0:	6803      	ldr	r3, [r0, #0]
 80094a2:	f013 0207 	ands.w	r2, r3, #7
 80094a6:	4601      	mov	r1, r0
 80094a8:	d00b      	beq.n	80094c2 <__lo0bits+0x22>
 80094aa:	07da      	lsls	r2, r3, #31
 80094ac:	d423      	bmi.n	80094f6 <__lo0bits+0x56>
 80094ae:	0798      	lsls	r0, r3, #30
 80094b0:	bf49      	itett	mi
 80094b2:	085b      	lsrmi	r3, r3, #1
 80094b4:	089b      	lsrpl	r3, r3, #2
 80094b6:	2001      	movmi	r0, #1
 80094b8:	600b      	strmi	r3, [r1, #0]
 80094ba:	bf5c      	itt	pl
 80094bc:	600b      	strpl	r3, [r1, #0]
 80094be:	2002      	movpl	r0, #2
 80094c0:	4770      	bx	lr
 80094c2:	b298      	uxth	r0, r3
 80094c4:	b9a8      	cbnz	r0, 80094f2 <__lo0bits+0x52>
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	2010      	movs	r0, #16
 80094ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094ce:	bf04      	itt	eq
 80094d0:	0a1b      	lsreq	r3, r3, #8
 80094d2:	3008      	addeq	r0, #8
 80094d4:	071a      	lsls	r2, r3, #28
 80094d6:	bf04      	itt	eq
 80094d8:	091b      	lsreq	r3, r3, #4
 80094da:	3004      	addeq	r0, #4
 80094dc:	079a      	lsls	r2, r3, #30
 80094de:	bf04      	itt	eq
 80094e0:	089b      	lsreq	r3, r3, #2
 80094e2:	3002      	addeq	r0, #2
 80094e4:	07da      	lsls	r2, r3, #31
 80094e6:	d402      	bmi.n	80094ee <__lo0bits+0x4e>
 80094e8:	085b      	lsrs	r3, r3, #1
 80094ea:	d006      	beq.n	80094fa <__lo0bits+0x5a>
 80094ec:	3001      	adds	r0, #1
 80094ee:	600b      	str	r3, [r1, #0]
 80094f0:	4770      	bx	lr
 80094f2:	4610      	mov	r0, r2
 80094f4:	e7e9      	b.n	80094ca <__lo0bits+0x2a>
 80094f6:	2000      	movs	r0, #0
 80094f8:	4770      	bx	lr
 80094fa:	2020      	movs	r0, #32
 80094fc:	4770      	bx	lr

080094fe <__i2b>:
 80094fe:	b510      	push	{r4, lr}
 8009500:	460c      	mov	r4, r1
 8009502:	2101      	movs	r1, #1
 8009504:	f7ff ff27 	bl	8009356 <_Balloc>
 8009508:	2201      	movs	r2, #1
 800950a:	6144      	str	r4, [r0, #20]
 800950c:	6102      	str	r2, [r0, #16]
 800950e:	bd10      	pop	{r4, pc}

08009510 <__multiply>:
 8009510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	4614      	mov	r4, r2
 8009516:	690a      	ldr	r2, [r1, #16]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	429a      	cmp	r2, r3
 800951c:	bfb8      	it	lt
 800951e:	460b      	movlt	r3, r1
 8009520:	4688      	mov	r8, r1
 8009522:	bfbc      	itt	lt
 8009524:	46a0      	movlt	r8, r4
 8009526:	461c      	movlt	r4, r3
 8009528:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800952c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009530:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009534:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009538:	eb07 0609 	add.w	r6, r7, r9
 800953c:	42b3      	cmp	r3, r6
 800953e:	bfb8      	it	lt
 8009540:	3101      	addlt	r1, #1
 8009542:	f7ff ff08 	bl	8009356 <_Balloc>
 8009546:	f100 0514 	add.w	r5, r0, #20
 800954a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800954e:	462b      	mov	r3, r5
 8009550:	2200      	movs	r2, #0
 8009552:	4573      	cmp	r3, lr
 8009554:	d316      	bcc.n	8009584 <__multiply+0x74>
 8009556:	f104 0214 	add.w	r2, r4, #20
 800955a:	f108 0114 	add.w	r1, r8, #20
 800955e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009562:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	9b00      	ldr	r3, [sp, #0]
 800956a:	9201      	str	r2, [sp, #4]
 800956c:	4293      	cmp	r3, r2
 800956e:	d80c      	bhi.n	800958a <__multiply+0x7a>
 8009570:	2e00      	cmp	r6, #0
 8009572:	dd03      	ble.n	800957c <__multiply+0x6c>
 8009574:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05d      	beq.n	8009638 <__multiply+0x128>
 800957c:	6106      	str	r6, [r0, #16]
 800957e:	b003      	add	sp, #12
 8009580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009584:	f843 2b04 	str.w	r2, [r3], #4
 8009588:	e7e3      	b.n	8009552 <__multiply+0x42>
 800958a:	f8b2 b000 	ldrh.w	fp, [r2]
 800958e:	f1bb 0f00 	cmp.w	fp, #0
 8009592:	d023      	beq.n	80095dc <__multiply+0xcc>
 8009594:	4689      	mov	r9, r1
 8009596:	46ac      	mov	ip, r5
 8009598:	f04f 0800 	mov.w	r8, #0
 800959c:	f859 4b04 	ldr.w	r4, [r9], #4
 80095a0:	f8dc a000 	ldr.w	sl, [ip]
 80095a4:	b2a3      	uxth	r3, r4
 80095a6:	fa1f fa8a 	uxth.w	sl, sl
 80095aa:	fb0b a303 	mla	r3, fp, r3, sl
 80095ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80095b2:	f8dc 4000 	ldr.w	r4, [ip]
 80095b6:	4443      	add	r3, r8
 80095b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80095c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80095c4:	46e2      	mov	sl, ip
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095cc:	454f      	cmp	r7, r9
 80095ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095d2:	f84a 3b04 	str.w	r3, [sl], #4
 80095d6:	d82b      	bhi.n	8009630 <__multiply+0x120>
 80095d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80095dc:	9b01      	ldr	r3, [sp, #4]
 80095de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80095e2:	3204      	adds	r2, #4
 80095e4:	f1ba 0f00 	cmp.w	sl, #0
 80095e8:	d020      	beq.n	800962c <__multiply+0x11c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	4689      	mov	r9, r1
 80095ee:	46a8      	mov	r8, r5
 80095f0:	f04f 0b00 	mov.w	fp, #0
 80095f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80095f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80095fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8009600:	445c      	add	r4, fp
 8009602:	46c4      	mov	ip, r8
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800960a:	f84c 3b04 	str.w	r3, [ip], #4
 800960e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009612:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009616:	0c1b      	lsrs	r3, r3, #16
 8009618:	fb0a b303 	mla	r3, sl, r3, fp
 800961c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009620:	454f      	cmp	r7, r9
 8009622:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009626:	d805      	bhi.n	8009634 <__multiply+0x124>
 8009628:	f8c8 3004 	str.w	r3, [r8, #4]
 800962c:	3504      	adds	r5, #4
 800962e:	e79b      	b.n	8009568 <__multiply+0x58>
 8009630:	46d4      	mov	ip, sl
 8009632:	e7b3      	b.n	800959c <__multiply+0x8c>
 8009634:	46e0      	mov	r8, ip
 8009636:	e7dd      	b.n	80095f4 <__multiply+0xe4>
 8009638:	3e01      	subs	r6, #1
 800963a:	e799      	b.n	8009570 <__multiply+0x60>

0800963c <__pow5mult>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	4615      	mov	r5, r2
 8009642:	f012 0203 	ands.w	r2, r2, #3
 8009646:	4606      	mov	r6, r0
 8009648:	460f      	mov	r7, r1
 800964a:	d007      	beq.n	800965c <__pow5mult+0x20>
 800964c:	3a01      	subs	r2, #1
 800964e:	4c21      	ldr	r4, [pc, #132]	; (80096d4 <__pow5mult+0x98>)
 8009650:	2300      	movs	r3, #0
 8009652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009656:	f7ff fec9 	bl	80093ec <__multadd>
 800965a:	4607      	mov	r7, r0
 800965c:	10ad      	asrs	r5, r5, #2
 800965e:	d035      	beq.n	80096cc <__pow5mult+0x90>
 8009660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009662:	b93c      	cbnz	r4, 8009674 <__pow5mult+0x38>
 8009664:	2010      	movs	r0, #16
 8009666:	f7ff fe63 	bl	8009330 <malloc>
 800966a:	6270      	str	r0, [r6, #36]	; 0x24
 800966c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009670:	6004      	str	r4, [r0, #0]
 8009672:	60c4      	str	r4, [r0, #12]
 8009674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800967c:	b94c      	cbnz	r4, 8009692 <__pow5mult+0x56>
 800967e:	f240 2171 	movw	r1, #625	; 0x271
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff ff3b 	bl	80094fe <__i2b>
 8009688:	2300      	movs	r3, #0
 800968a:	f8c8 0008 	str.w	r0, [r8, #8]
 800968e:	4604      	mov	r4, r0
 8009690:	6003      	str	r3, [r0, #0]
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	07eb      	lsls	r3, r5, #31
 8009698:	d50a      	bpl.n	80096b0 <__pow5mult+0x74>
 800969a:	4639      	mov	r1, r7
 800969c:	4622      	mov	r2, r4
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ff36 	bl	8009510 <__multiply>
 80096a4:	4639      	mov	r1, r7
 80096a6:	4681      	mov	r9, r0
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff fe88 	bl	80093be <_Bfree>
 80096ae:	464f      	mov	r7, r9
 80096b0:	106d      	asrs	r5, r5, #1
 80096b2:	d00b      	beq.n	80096cc <__pow5mult+0x90>
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	b938      	cbnz	r0, 80096c8 <__pow5mult+0x8c>
 80096b8:	4622      	mov	r2, r4
 80096ba:	4621      	mov	r1, r4
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff ff27 	bl	8009510 <__multiply>
 80096c2:	6020      	str	r0, [r4, #0]
 80096c4:	f8c0 8000 	str.w	r8, [r0]
 80096c8:	4604      	mov	r4, r0
 80096ca:	e7e4      	b.n	8009696 <__pow5mult+0x5a>
 80096cc:	4638      	mov	r0, r7
 80096ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d2:	bf00      	nop
 80096d4:	0800a098 	.word	0x0800a098

080096d8 <__lshift>:
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096dc:	460c      	mov	r4, r1
 80096de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	6849      	ldr	r1, [r1, #4]
 80096e6:	eb0a 0903 	add.w	r9, sl, r3
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	4607      	mov	r7, r0
 80096ee:	4616      	mov	r6, r2
 80096f0:	f109 0501 	add.w	r5, r9, #1
 80096f4:	42ab      	cmp	r3, r5
 80096f6:	db32      	blt.n	800975e <__lshift+0x86>
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff fe2c 	bl	8009356 <_Balloc>
 80096fe:	2300      	movs	r3, #0
 8009700:	4680      	mov	r8, r0
 8009702:	f100 0114 	add.w	r1, r0, #20
 8009706:	461a      	mov	r2, r3
 8009708:	4553      	cmp	r3, sl
 800970a:	db2b      	blt.n	8009764 <__lshift+0x8c>
 800970c:	6920      	ldr	r0, [r4, #16]
 800970e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009712:	f104 0314 	add.w	r3, r4, #20
 8009716:	f016 021f 	ands.w	r2, r6, #31
 800971a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800971e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009722:	d025      	beq.n	8009770 <__lshift+0x98>
 8009724:	f1c2 0e20 	rsb	lr, r2, #32
 8009728:	2000      	movs	r0, #0
 800972a:	681e      	ldr	r6, [r3, #0]
 800972c:	468a      	mov	sl, r1
 800972e:	4096      	lsls	r6, r2
 8009730:	4330      	orrs	r0, r6
 8009732:	f84a 0b04 	str.w	r0, [sl], #4
 8009736:	f853 0b04 	ldr.w	r0, [r3], #4
 800973a:	459c      	cmp	ip, r3
 800973c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009740:	d814      	bhi.n	800976c <__lshift+0x94>
 8009742:	6048      	str	r0, [r1, #4]
 8009744:	b108      	cbz	r0, 800974a <__lshift+0x72>
 8009746:	f109 0502 	add.w	r5, r9, #2
 800974a:	3d01      	subs	r5, #1
 800974c:	4638      	mov	r0, r7
 800974e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009752:	4621      	mov	r1, r4
 8009754:	f7ff fe33 	bl	80093be <_Bfree>
 8009758:	4640      	mov	r0, r8
 800975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975e:	3101      	adds	r1, #1
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	e7c7      	b.n	80096f4 <__lshift+0x1c>
 8009764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009768:	3301      	adds	r3, #1
 800976a:	e7cd      	b.n	8009708 <__lshift+0x30>
 800976c:	4651      	mov	r1, sl
 800976e:	e7dc      	b.n	800972a <__lshift+0x52>
 8009770:	3904      	subs	r1, #4
 8009772:	f853 2b04 	ldr.w	r2, [r3], #4
 8009776:	f841 2f04 	str.w	r2, [r1, #4]!
 800977a:	459c      	cmp	ip, r3
 800977c:	d8f9      	bhi.n	8009772 <__lshift+0x9a>
 800977e:	e7e4      	b.n	800974a <__lshift+0x72>

08009780 <__mcmp>:
 8009780:	6903      	ldr	r3, [r0, #16]
 8009782:	690a      	ldr	r2, [r1, #16]
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	b530      	push	{r4, r5, lr}
 8009788:	d10c      	bne.n	80097a4 <__mcmp+0x24>
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	3014      	adds	r0, #20
 800978e:	3114      	adds	r1, #20
 8009790:	1884      	adds	r4, r0, r2
 8009792:	4411      	add	r1, r2
 8009794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800979c:	4295      	cmp	r5, r2
 800979e:	d003      	beq.n	80097a8 <__mcmp+0x28>
 80097a0:	d305      	bcc.n	80097ae <__mcmp+0x2e>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4618      	mov	r0, r3
 80097a6:	bd30      	pop	{r4, r5, pc}
 80097a8:	42a0      	cmp	r0, r4
 80097aa:	d3f3      	bcc.n	8009794 <__mcmp+0x14>
 80097ac:	e7fa      	b.n	80097a4 <__mcmp+0x24>
 80097ae:	f04f 33ff 	mov.w	r3, #4294967295
 80097b2:	e7f7      	b.n	80097a4 <__mcmp+0x24>

080097b4 <__mdiff>:
 80097b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b8:	460d      	mov	r5, r1
 80097ba:	4607      	mov	r7, r0
 80097bc:	4611      	mov	r1, r2
 80097be:	4628      	mov	r0, r5
 80097c0:	4614      	mov	r4, r2
 80097c2:	f7ff ffdd 	bl	8009780 <__mcmp>
 80097c6:	1e06      	subs	r6, r0, #0
 80097c8:	d108      	bne.n	80097dc <__mdiff+0x28>
 80097ca:	4631      	mov	r1, r6
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff fdc2 	bl	8009356 <_Balloc>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097dc:	bfa4      	itt	ge
 80097de:	4623      	movge	r3, r4
 80097e0:	462c      	movge	r4, r5
 80097e2:	4638      	mov	r0, r7
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	bfa6      	itte	ge
 80097e8:	461d      	movge	r5, r3
 80097ea:	2600      	movge	r6, #0
 80097ec:	2601      	movlt	r6, #1
 80097ee:	f7ff fdb2 	bl	8009356 <_Balloc>
 80097f2:	692b      	ldr	r3, [r5, #16]
 80097f4:	60c6      	str	r6, [r0, #12]
 80097f6:	6926      	ldr	r6, [r4, #16]
 80097f8:	f105 0914 	add.w	r9, r5, #20
 80097fc:	f104 0214 	add.w	r2, r4, #20
 8009800:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009804:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009808:	f100 0514 	add.w	r5, r0, #20
 800980c:	f04f 0e00 	mov.w	lr, #0
 8009810:	f852 ab04 	ldr.w	sl, [r2], #4
 8009814:	f859 4b04 	ldr.w	r4, [r9], #4
 8009818:	fa1e f18a 	uxtah	r1, lr, sl
 800981c:	b2a3      	uxth	r3, r4
 800981e:	1ac9      	subs	r1, r1, r3
 8009820:	0c23      	lsrs	r3, r4, #16
 8009822:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009826:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800982a:	b289      	uxth	r1, r1
 800982c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009830:	45c8      	cmp	r8, r9
 8009832:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009836:	4694      	mov	ip, r2
 8009838:	f845 3b04 	str.w	r3, [r5], #4
 800983c:	d8e8      	bhi.n	8009810 <__mdiff+0x5c>
 800983e:	45bc      	cmp	ip, r7
 8009840:	d304      	bcc.n	800984c <__mdiff+0x98>
 8009842:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009846:	b183      	cbz	r3, 800986a <__mdiff+0xb6>
 8009848:	6106      	str	r6, [r0, #16]
 800984a:	e7c5      	b.n	80097d8 <__mdiff+0x24>
 800984c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009850:	fa1e f381 	uxtah	r3, lr, r1
 8009854:	141a      	asrs	r2, r3, #16
 8009856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800985a:	b29b      	uxth	r3, r3
 800985c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009860:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009864:	f845 3b04 	str.w	r3, [r5], #4
 8009868:	e7e9      	b.n	800983e <__mdiff+0x8a>
 800986a:	3e01      	subs	r6, #1
 800986c:	e7e9      	b.n	8009842 <__mdiff+0x8e>

0800986e <__d2b>:
 800986e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009872:	460e      	mov	r6, r1
 8009874:	2101      	movs	r1, #1
 8009876:	ec59 8b10 	vmov	r8, r9, d0
 800987a:	4615      	mov	r5, r2
 800987c:	f7ff fd6b 	bl	8009356 <_Balloc>
 8009880:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009884:	4607      	mov	r7, r0
 8009886:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800988a:	bb34      	cbnz	r4, 80098da <__d2b+0x6c>
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f1b8 0300 	subs.w	r3, r8, #0
 8009892:	d027      	beq.n	80098e4 <__d2b+0x76>
 8009894:	a802      	add	r0, sp, #8
 8009896:	f840 3d08 	str.w	r3, [r0, #-8]!
 800989a:	f7ff fe01 	bl	80094a0 <__lo0bits>
 800989e:	9900      	ldr	r1, [sp, #0]
 80098a0:	b1f0      	cbz	r0, 80098e0 <__d2b+0x72>
 80098a2:	9a01      	ldr	r2, [sp, #4]
 80098a4:	f1c0 0320 	rsb	r3, r0, #32
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	430b      	orrs	r3, r1
 80098ae:	40c2      	lsrs	r2, r0
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	9201      	str	r2, [sp, #4]
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bf14      	ite	ne
 80098bc:	2102      	movne	r1, #2
 80098be:	2101      	moveq	r1, #1
 80098c0:	6139      	str	r1, [r7, #16]
 80098c2:	b1c4      	cbz	r4, 80098f6 <__d2b+0x88>
 80098c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80098c8:	4404      	add	r4, r0
 80098ca:	6034      	str	r4, [r6, #0]
 80098cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098d0:	6028      	str	r0, [r5, #0]
 80098d2:	4638      	mov	r0, r7
 80098d4:	b003      	add	sp, #12
 80098d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098de:	e7d5      	b.n	800988c <__d2b+0x1e>
 80098e0:	6179      	str	r1, [r7, #20]
 80098e2:	e7e7      	b.n	80098b4 <__d2b+0x46>
 80098e4:	a801      	add	r0, sp, #4
 80098e6:	f7ff fddb 	bl	80094a0 <__lo0bits>
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	2101      	movs	r1, #1
 80098f0:	6139      	str	r1, [r7, #16]
 80098f2:	3020      	adds	r0, #32
 80098f4:	e7e5      	b.n	80098c2 <__d2b+0x54>
 80098f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80098fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098fe:	6030      	str	r0, [r6, #0]
 8009900:	6918      	ldr	r0, [r3, #16]
 8009902:	f7ff fdae 	bl	8009462 <__hi0bits>
 8009906:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800990a:	e7e1      	b.n	80098d0 <__d2b+0x62>

0800990c <_calloc_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	fb02 f401 	mul.w	r4, r2, r1
 8009912:	4621      	mov	r1, r4
 8009914:	f000 f856 	bl	80099c4 <_malloc_r>
 8009918:	4605      	mov	r5, r0
 800991a:	b118      	cbz	r0, 8009924 <_calloc_r+0x18>
 800991c:	4622      	mov	r2, r4
 800991e:	2100      	movs	r1, #0
 8009920:	f7fd ffc4 	bl	80078ac <memset>
 8009924:	4628      	mov	r0, r5
 8009926:	bd38      	pop	{r3, r4, r5, pc}

08009928 <_free_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4605      	mov	r5, r0
 800992c:	2900      	cmp	r1, #0
 800992e:	d045      	beq.n	80099bc <_free_r+0x94>
 8009930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009934:	1f0c      	subs	r4, r1, #4
 8009936:	2b00      	cmp	r3, #0
 8009938:	bfb8      	it	lt
 800993a:	18e4      	addlt	r4, r4, r3
 800993c:	f000 fa98 	bl	8009e70 <__malloc_lock>
 8009940:	4a1f      	ldr	r2, [pc, #124]	; (80099c0 <_free_r+0x98>)
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	4610      	mov	r0, r2
 8009946:	b933      	cbnz	r3, 8009956 <_free_r+0x2e>
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	6014      	str	r4, [r2, #0]
 800994c:	4628      	mov	r0, r5
 800994e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009952:	f000 ba8e 	b.w	8009e72 <__malloc_unlock>
 8009956:	42a3      	cmp	r3, r4
 8009958:	d90c      	bls.n	8009974 <_free_r+0x4c>
 800995a:	6821      	ldr	r1, [r4, #0]
 800995c:	1862      	adds	r2, r4, r1
 800995e:	4293      	cmp	r3, r2
 8009960:	bf04      	itt	eq
 8009962:	681a      	ldreq	r2, [r3, #0]
 8009964:	685b      	ldreq	r3, [r3, #4]
 8009966:	6063      	str	r3, [r4, #4]
 8009968:	bf04      	itt	eq
 800996a:	1852      	addeq	r2, r2, r1
 800996c:	6022      	streq	r2, [r4, #0]
 800996e:	6004      	str	r4, [r0, #0]
 8009970:	e7ec      	b.n	800994c <_free_r+0x24>
 8009972:	4613      	mov	r3, r2
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	b10a      	cbz	r2, 800997c <_free_r+0x54>
 8009978:	42a2      	cmp	r2, r4
 800997a:	d9fa      	bls.n	8009972 <_free_r+0x4a>
 800997c:	6819      	ldr	r1, [r3, #0]
 800997e:	1858      	adds	r0, r3, r1
 8009980:	42a0      	cmp	r0, r4
 8009982:	d10b      	bne.n	800999c <_free_r+0x74>
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	4401      	add	r1, r0
 8009988:	1858      	adds	r0, r3, r1
 800998a:	4282      	cmp	r2, r0
 800998c:	6019      	str	r1, [r3, #0]
 800998e:	d1dd      	bne.n	800994c <_free_r+0x24>
 8009990:	6810      	ldr	r0, [r2, #0]
 8009992:	6852      	ldr	r2, [r2, #4]
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	4401      	add	r1, r0
 8009998:	6019      	str	r1, [r3, #0]
 800999a:	e7d7      	b.n	800994c <_free_r+0x24>
 800999c:	d902      	bls.n	80099a4 <_free_r+0x7c>
 800999e:	230c      	movs	r3, #12
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	e7d3      	b.n	800994c <_free_r+0x24>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	1821      	adds	r1, r4, r0
 80099a8:	428a      	cmp	r2, r1
 80099aa:	bf04      	itt	eq
 80099ac:	6811      	ldreq	r1, [r2, #0]
 80099ae:	6852      	ldreq	r2, [r2, #4]
 80099b0:	6062      	str	r2, [r4, #4]
 80099b2:	bf04      	itt	eq
 80099b4:	1809      	addeq	r1, r1, r0
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	605c      	str	r4, [r3, #4]
 80099ba:	e7c7      	b.n	800994c <_free_r+0x24>
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	2005f70c 	.word	0x2005f70c

080099c4 <_malloc_r>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	1ccd      	adds	r5, r1, #3
 80099c8:	f025 0503 	bic.w	r5, r5, #3
 80099cc:	3508      	adds	r5, #8
 80099ce:	2d0c      	cmp	r5, #12
 80099d0:	bf38      	it	cc
 80099d2:	250c      	movcc	r5, #12
 80099d4:	2d00      	cmp	r5, #0
 80099d6:	4606      	mov	r6, r0
 80099d8:	db01      	blt.n	80099de <_malloc_r+0x1a>
 80099da:	42a9      	cmp	r1, r5
 80099dc:	d903      	bls.n	80099e6 <_malloc_r+0x22>
 80099de:	230c      	movs	r3, #12
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	2000      	movs	r0, #0
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
 80099e6:	f000 fa43 	bl	8009e70 <__malloc_lock>
 80099ea:	4a21      	ldr	r2, [pc, #132]	; (8009a70 <_malloc_r+0xac>)
 80099ec:	6814      	ldr	r4, [r2, #0]
 80099ee:	4621      	mov	r1, r4
 80099f0:	b991      	cbnz	r1, 8009a18 <_malloc_r+0x54>
 80099f2:	4c20      	ldr	r4, [pc, #128]	; (8009a74 <_malloc_r+0xb0>)
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	b91b      	cbnz	r3, 8009a00 <_malloc_r+0x3c>
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 f97d 	bl	8009cf8 <_sbrk_r>
 80099fe:	6020      	str	r0, [r4, #0]
 8009a00:	4629      	mov	r1, r5
 8009a02:	4630      	mov	r0, r6
 8009a04:	f000 f978 	bl	8009cf8 <_sbrk_r>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d124      	bne.n	8009a56 <_malloc_r+0x92>
 8009a0c:	230c      	movs	r3, #12
 8009a0e:	6033      	str	r3, [r6, #0]
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 fa2e 	bl	8009e72 <__malloc_unlock>
 8009a16:	e7e4      	b.n	80099e2 <_malloc_r+0x1e>
 8009a18:	680b      	ldr	r3, [r1, #0]
 8009a1a:	1b5b      	subs	r3, r3, r5
 8009a1c:	d418      	bmi.n	8009a50 <_malloc_r+0x8c>
 8009a1e:	2b0b      	cmp	r3, #11
 8009a20:	d90f      	bls.n	8009a42 <_malloc_r+0x7e>
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	50cd      	str	r5, [r1, r3]
 8009a26:	18cc      	adds	r4, r1, r3
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 fa22 	bl	8009e72 <__malloc_unlock>
 8009a2e:	f104 000b 	add.w	r0, r4, #11
 8009a32:	1d23      	adds	r3, r4, #4
 8009a34:	f020 0007 	bic.w	r0, r0, #7
 8009a38:	1ac3      	subs	r3, r0, r3
 8009a3a:	d0d3      	beq.n	80099e4 <_malloc_r+0x20>
 8009a3c:	425a      	negs	r2, r3
 8009a3e:	50e2      	str	r2, [r4, r3]
 8009a40:	e7d0      	b.n	80099e4 <_malloc_r+0x20>
 8009a42:	428c      	cmp	r4, r1
 8009a44:	684b      	ldr	r3, [r1, #4]
 8009a46:	bf16      	itet	ne
 8009a48:	6063      	strne	r3, [r4, #4]
 8009a4a:	6013      	streq	r3, [r2, #0]
 8009a4c:	460c      	movne	r4, r1
 8009a4e:	e7eb      	b.n	8009a28 <_malloc_r+0x64>
 8009a50:	460c      	mov	r4, r1
 8009a52:	6849      	ldr	r1, [r1, #4]
 8009a54:	e7cc      	b.n	80099f0 <_malloc_r+0x2c>
 8009a56:	1cc4      	adds	r4, r0, #3
 8009a58:	f024 0403 	bic.w	r4, r4, #3
 8009a5c:	42a0      	cmp	r0, r4
 8009a5e:	d005      	beq.n	8009a6c <_malloc_r+0xa8>
 8009a60:	1a21      	subs	r1, r4, r0
 8009a62:	4630      	mov	r0, r6
 8009a64:	f000 f948 	bl	8009cf8 <_sbrk_r>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d0cf      	beq.n	8009a0c <_malloc_r+0x48>
 8009a6c:	6025      	str	r5, [r4, #0]
 8009a6e:	e7db      	b.n	8009a28 <_malloc_r+0x64>
 8009a70:	2005f70c 	.word	0x2005f70c
 8009a74:	2005f710 	.word	0x2005f710

08009a78 <__sfputc_r>:
 8009a78:	6893      	ldr	r3, [r2, #8]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	b410      	push	{r4}
 8009a80:	6093      	str	r3, [r2, #8]
 8009a82:	da08      	bge.n	8009a96 <__sfputc_r+0x1e>
 8009a84:	6994      	ldr	r4, [r2, #24]
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	db01      	blt.n	8009a8e <__sfputc_r+0x16>
 8009a8a:	290a      	cmp	r1, #10
 8009a8c:	d103      	bne.n	8009a96 <__sfputc_r+0x1e>
 8009a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a92:	f7fe bbc9 	b.w	8008228 <__swbuf_r>
 8009a96:	6813      	ldr	r3, [r2, #0]
 8009a98:	1c58      	adds	r0, r3, #1
 8009a9a:	6010      	str	r0, [r2, #0]
 8009a9c:	7019      	strb	r1, [r3, #0]
 8009a9e:	4608      	mov	r0, r1
 8009aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <__sfputs_r>:
 8009aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	460f      	mov	r7, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	18d5      	adds	r5, r2, r3
 8009ab0:	42ac      	cmp	r4, r5
 8009ab2:	d101      	bne.n	8009ab8 <__sfputs_r+0x12>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e007      	b.n	8009ac8 <__sfputs_r+0x22>
 8009ab8:	463a      	mov	r2, r7
 8009aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ffda 	bl	8009a78 <__sfputc_r>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d1f3      	bne.n	8009ab0 <__sfputs_r+0xa>
 8009ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009acc <_vfiprintf_r>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	b09d      	sub	sp, #116	; 0x74
 8009ad4:	4617      	mov	r7, r2
 8009ad6:	461d      	mov	r5, r3
 8009ad8:	4606      	mov	r6, r0
 8009ada:	b118      	cbz	r0, 8009ae4 <_vfiprintf_r+0x18>
 8009adc:	6983      	ldr	r3, [r0, #24]
 8009ade:	b90b      	cbnz	r3, 8009ae4 <_vfiprintf_r+0x18>
 8009ae0:	f7ff fb2a 	bl	8009138 <__sinit>
 8009ae4:	4b7c      	ldr	r3, [pc, #496]	; (8009cd8 <_vfiprintf_r+0x20c>)
 8009ae6:	429c      	cmp	r4, r3
 8009ae8:	d158      	bne.n	8009b9c <_vfiprintf_r+0xd0>
 8009aea:	6874      	ldr	r4, [r6, #4]
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	0718      	lsls	r0, r3, #28
 8009af0:	d55e      	bpl.n	8009bb0 <_vfiprintf_r+0xe4>
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d05b      	beq.n	8009bb0 <_vfiprintf_r+0xe4>
 8009af8:	2300      	movs	r3, #0
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	2320      	movs	r3, #32
 8009afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b02:	2330      	movs	r3, #48	; 0x30
 8009b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b08:	9503      	str	r5, [sp, #12]
 8009b0a:	f04f 0b01 	mov.w	fp, #1
 8009b0e:	46b8      	mov	r8, r7
 8009b10:	4645      	mov	r5, r8
 8009b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b16:	b10b      	cbz	r3, 8009b1c <_vfiprintf_r+0x50>
 8009b18:	2b25      	cmp	r3, #37	; 0x25
 8009b1a:	d154      	bne.n	8009bc6 <_vfiprintf_r+0xfa>
 8009b1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009b20:	d00b      	beq.n	8009b3a <_vfiprintf_r+0x6e>
 8009b22:	4653      	mov	r3, sl
 8009b24:	463a      	mov	r2, r7
 8009b26:	4621      	mov	r1, r4
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7ff ffbc 	bl	8009aa6 <__sfputs_r>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f000 80c2 	beq.w	8009cb8 <_vfiprintf_r+0x1ec>
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	4453      	add	r3, sl
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	f898 3000 	ldrb.w	r3, [r8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80ba 	beq.w	8009cb8 <_vfiprintf_r+0x1ec>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	9307      	str	r3, [sp, #28]
 8009b52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b56:	931a      	str	r3, [sp, #104]	; 0x68
 8009b58:	46a8      	mov	r8, r5
 8009b5a:	2205      	movs	r2, #5
 8009b5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009b60:	485e      	ldr	r0, [pc, #376]	; (8009cdc <_vfiprintf_r+0x210>)
 8009b62:	f7f6 fb75 	bl	8000250 <memchr>
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	bb78      	cbnz	r0, 8009bca <_vfiprintf_r+0xfe>
 8009b6a:	06d9      	lsls	r1, r3, #27
 8009b6c:	bf44      	itt	mi
 8009b6e:	2220      	movmi	r2, #32
 8009b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b74:	071a      	lsls	r2, r3, #28
 8009b76:	bf44      	itt	mi
 8009b78:	222b      	movmi	r2, #43	; 0x2b
 8009b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b7e:	782a      	ldrb	r2, [r5, #0]
 8009b80:	2a2a      	cmp	r2, #42	; 0x2a
 8009b82:	d02a      	beq.n	8009bda <_vfiprintf_r+0x10e>
 8009b84:	9a07      	ldr	r2, [sp, #28]
 8009b86:	46a8      	mov	r8, r5
 8009b88:	2000      	movs	r0, #0
 8009b8a:	250a      	movs	r5, #10
 8009b8c:	4641      	mov	r1, r8
 8009b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b92:	3b30      	subs	r3, #48	; 0x30
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	d969      	bls.n	8009c6c <_vfiprintf_r+0x1a0>
 8009b98:	b360      	cbz	r0, 8009bf4 <_vfiprintf_r+0x128>
 8009b9a:	e024      	b.n	8009be6 <_vfiprintf_r+0x11a>
 8009b9c:	4b50      	ldr	r3, [pc, #320]	; (8009ce0 <_vfiprintf_r+0x214>)
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	d101      	bne.n	8009ba6 <_vfiprintf_r+0xda>
 8009ba2:	68b4      	ldr	r4, [r6, #8]
 8009ba4:	e7a2      	b.n	8009aec <_vfiprintf_r+0x20>
 8009ba6:	4b4f      	ldr	r3, [pc, #316]	; (8009ce4 <_vfiprintf_r+0x218>)
 8009ba8:	429c      	cmp	r4, r3
 8009baa:	bf08      	it	eq
 8009bac:	68f4      	ldreq	r4, [r6, #12]
 8009bae:	e79d      	b.n	8009aec <_vfiprintf_r+0x20>
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7fe fb8a 	bl	80082cc <__swsetup_r>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d09d      	beq.n	8009af8 <_vfiprintf_r+0x2c>
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	b01d      	add	sp, #116	; 0x74
 8009bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc6:	46a8      	mov	r8, r5
 8009bc8:	e7a2      	b.n	8009b10 <_vfiprintf_r+0x44>
 8009bca:	4a44      	ldr	r2, [pc, #272]	; (8009cdc <_vfiprintf_r+0x210>)
 8009bcc:	1a80      	subs	r0, r0, r2
 8009bce:	fa0b f000 	lsl.w	r0, fp, r0
 8009bd2:	4318      	orrs	r0, r3
 8009bd4:	9004      	str	r0, [sp, #16]
 8009bd6:	4645      	mov	r5, r8
 8009bd8:	e7be      	b.n	8009b58 <_vfiprintf_r+0x8c>
 8009bda:	9a03      	ldr	r2, [sp, #12]
 8009bdc:	1d11      	adds	r1, r2, #4
 8009bde:	6812      	ldr	r2, [r2, #0]
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	db01      	blt.n	8009bea <_vfiprintf_r+0x11e>
 8009be6:	9207      	str	r2, [sp, #28]
 8009be8:	e004      	b.n	8009bf4 <_vfiprintf_r+0x128>
 8009bea:	4252      	negs	r2, r2
 8009bec:	f043 0302 	orr.w	r3, r3, #2
 8009bf0:	9207      	str	r2, [sp, #28]
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	f898 3000 	ldrb.w	r3, [r8]
 8009bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8009bfa:	d10e      	bne.n	8009c1a <_vfiprintf_r+0x14e>
 8009bfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009c00:	2b2a      	cmp	r3, #42	; 0x2a
 8009c02:	d138      	bne.n	8009c76 <_vfiprintf_r+0x1aa>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	1d1a      	adds	r2, r3, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	9203      	str	r2, [sp, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bfb8      	it	lt
 8009c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c14:	f108 0802 	add.w	r8, r8, #2
 8009c18:	9305      	str	r3, [sp, #20]
 8009c1a:	4d33      	ldr	r5, [pc, #204]	; (8009ce8 <_vfiprintf_r+0x21c>)
 8009c1c:	f898 1000 	ldrb.w	r1, [r8]
 8009c20:	2203      	movs	r2, #3
 8009c22:	4628      	mov	r0, r5
 8009c24:	f7f6 fb14 	bl	8000250 <memchr>
 8009c28:	b140      	cbz	r0, 8009c3c <_vfiprintf_r+0x170>
 8009c2a:	2340      	movs	r3, #64	; 0x40
 8009c2c:	1b40      	subs	r0, r0, r5
 8009c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	4303      	orrs	r3, r0
 8009c36:	f108 0801 	add.w	r8, r8, #1
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	f898 1000 	ldrb.w	r1, [r8]
 8009c40:	482a      	ldr	r0, [pc, #168]	; (8009cec <_vfiprintf_r+0x220>)
 8009c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c46:	2206      	movs	r2, #6
 8009c48:	f108 0701 	add.w	r7, r8, #1
 8009c4c:	f7f6 fb00 	bl	8000250 <memchr>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d037      	beq.n	8009cc4 <_vfiprintf_r+0x1f8>
 8009c54:	4b26      	ldr	r3, [pc, #152]	; (8009cf0 <_vfiprintf_r+0x224>)
 8009c56:	bb1b      	cbnz	r3, 8009ca0 <_vfiprintf_r+0x1d4>
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	3307      	adds	r3, #7
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	3308      	adds	r3, #8
 8009c62:	9303      	str	r3, [sp, #12]
 8009c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c66:	444b      	add	r3, r9
 8009c68:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6a:	e750      	b.n	8009b0e <_vfiprintf_r+0x42>
 8009c6c:	fb05 3202 	mla	r2, r5, r2, r3
 8009c70:	2001      	movs	r0, #1
 8009c72:	4688      	mov	r8, r1
 8009c74:	e78a      	b.n	8009b8c <_vfiprintf_r+0xc0>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f108 0801 	add.w	r8, r8, #1
 8009c7c:	9305      	str	r3, [sp, #20]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	250a      	movs	r5, #10
 8009c82:	4640      	mov	r0, r8
 8009c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c88:	3a30      	subs	r2, #48	; 0x30
 8009c8a:	2a09      	cmp	r2, #9
 8009c8c:	d903      	bls.n	8009c96 <_vfiprintf_r+0x1ca>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0c3      	beq.n	8009c1a <_vfiprintf_r+0x14e>
 8009c92:	9105      	str	r1, [sp, #20]
 8009c94:	e7c1      	b.n	8009c1a <_vfiprintf_r+0x14e>
 8009c96:	fb05 2101 	mla	r1, r5, r1, r2
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	e7f0      	b.n	8009c82 <_vfiprintf_r+0x1b6>
 8009ca0:	ab03      	add	r3, sp, #12
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <_vfiprintf_r+0x228>)
 8009ca8:	a904      	add	r1, sp, #16
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7fd fe8c 	bl	80079c8 <_printf_float>
 8009cb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	d1d5      	bne.n	8009c64 <_vfiprintf_r+0x198>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	065b      	lsls	r3, r3, #25
 8009cbc:	f53f af7e 	bmi.w	8009bbc <_vfiprintf_r+0xf0>
 8009cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cc2:	e77d      	b.n	8009bc0 <_vfiprintf_r+0xf4>
 8009cc4:	ab03      	add	r3, sp, #12
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <_vfiprintf_r+0x228>)
 8009ccc:	a904      	add	r1, sp, #16
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7fe f91c 	bl	8007f0c <_printf_i>
 8009cd4:	e7ec      	b.n	8009cb0 <_vfiprintf_r+0x1e4>
 8009cd6:	bf00      	nop
 8009cd8:	08009f64 	.word	0x08009f64
 8009cdc:	0800a0a4 	.word	0x0800a0a4
 8009ce0:	08009f84 	.word	0x08009f84
 8009ce4:	08009f44 	.word	0x08009f44
 8009ce8:	0800a0aa 	.word	0x0800a0aa
 8009cec:	0800a0ae 	.word	0x0800a0ae
 8009cf0:	080079c9 	.word	0x080079c9
 8009cf4:	08009aa7 	.word	0x08009aa7

08009cf8 <_sbrk_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4c06      	ldr	r4, [pc, #24]	; (8009d14 <_sbrk_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4605      	mov	r5, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	f7f9 fe9a 	bl	8003a3c <_sbrk>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_sbrk_r+0x1a>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_sbrk_r+0x1a>
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	2005fd60 	.word	0x2005fd60

08009d18 <__sread>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d20:	f000 f8a8 	bl	8009e74 <_read_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	bfab      	itete	ge
 8009d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d2c:	181b      	addge	r3, r3, r0
 8009d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d32:	bfac      	ite	ge
 8009d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d36:	81a3      	strhlt	r3, [r4, #12]
 8009d38:	bd10      	pop	{r4, pc}

08009d3a <__swrite>:
 8009d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	461f      	mov	r7, r3
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	05db      	lsls	r3, r3, #23
 8009d44:	4605      	mov	r5, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4616      	mov	r6, r2
 8009d4a:	d505      	bpl.n	8009d58 <__swrite+0x1e>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d54:	f000 f868 	bl	8009e28 <_lseek_r>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	f000 b817 	b.w	8009da0 <_write_r>

08009d72 <__sseek>:
 8009d72:	b510      	push	{r4, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 f855 	bl	8009e28 <_lseek_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	bf15      	itete	ne
 8009d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d8e:	81a3      	strheq	r3, [r4, #12]
 8009d90:	bf18      	it	ne
 8009d92:	81a3      	strhne	r3, [r4, #12]
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <__sclose>:
 8009d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9a:	f000 b813 	b.w	8009dc4 <_close_r>
	...

08009da0 <_write_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4c07      	ldr	r4, [pc, #28]	; (8009dc0 <_write_r+0x20>)
 8009da4:	4605      	mov	r5, r0
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7f9 fdf3 	bl	800399a <_write>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_write_r+0x1e>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_write_r+0x1e>
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	2005fd60 	.word	0x2005fd60

08009dc4 <_close_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4c06      	ldr	r4, [pc, #24]	; (8009de0 <_close_r+0x1c>)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4605      	mov	r5, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	f7f9 fdff 	bl	80039d2 <_close>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d102      	bne.n	8009dde <_close_r+0x1a>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	b103      	cbz	r3, 8009dde <_close_r+0x1a>
 8009ddc:	602b      	str	r3, [r5, #0]
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	2005fd60 	.word	0x2005fd60

08009de4 <_fstat_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4c07      	ldr	r4, [pc, #28]	; (8009e04 <_fstat_r+0x20>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4605      	mov	r5, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	f7f9 fdfa 	bl	80039ea <_fstat>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_fstat_r+0x1c>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_fstat_r+0x1c>
 8009dfe:	602b      	str	r3, [r5, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	2005fd60 	.word	0x2005fd60

08009e08 <_isatty_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4c06      	ldr	r4, [pc, #24]	; (8009e24 <_isatty_r+0x1c>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4605      	mov	r5, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	6023      	str	r3, [r4, #0]
 8009e14:	f7f9 fdf9 	bl	8003a0a <_isatty>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_isatty_r+0x1a>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_isatty_r+0x1a>
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	2005fd60 	.word	0x2005fd60

08009e28 <_lseek_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4c07      	ldr	r4, [pc, #28]	; (8009e48 <_lseek_r+0x20>)
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f9 fdf2 	bl	8003a20 <_lseek>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_lseek_r+0x1e>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_lseek_r+0x1e>
 8009e44:	602b      	str	r3, [r5, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	2005fd60 	.word	0x2005fd60

08009e4c <__ascii_mbtowc>:
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	b901      	cbnz	r1, 8009e52 <__ascii_mbtowc+0x6>
 8009e50:	a901      	add	r1, sp, #4
 8009e52:	b142      	cbz	r2, 8009e66 <__ascii_mbtowc+0x1a>
 8009e54:	b14b      	cbz	r3, 8009e6a <__ascii_mbtowc+0x1e>
 8009e56:	7813      	ldrb	r3, [r2, #0]
 8009e58:	600b      	str	r3, [r1, #0]
 8009e5a:	7812      	ldrb	r2, [r2, #0]
 8009e5c:	1c10      	adds	r0, r2, #0
 8009e5e:	bf18      	it	ne
 8009e60:	2001      	movne	r0, #1
 8009e62:	b002      	add	sp, #8
 8009e64:	4770      	bx	lr
 8009e66:	4610      	mov	r0, r2
 8009e68:	e7fb      	b.n	8009e62 <__ascii_mbtowc+0x16>
 8009e6a:	f06f 0001 	mvn.w	r0, #1
 8009e6e:	e7f8      	b.n	8009e62 <__ascii_mbtowc+0x16>

08009e70 <__malloc_lock>:
 8009e70:	4770      	bx	lr

08009e72 <__malloc_unlock>:
 8009e72:	4770      	bx	lr

08009e74 <_read_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4c07      	ldr	r4, [pc, #28]	; (8009e94 <_read_r+0x20>)
 8009e78:	4605      	mov	r5, r0
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f7f9 fd6c 	bl	8003960 <_read>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_read_r+0x1e>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_read_r+0x1e>
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	2005fd60 	.word	0x2005fd60

08009e98 <__ascii_wctomb>:
 8009e98:	b149      	cbz	r1, 8009eae <__ascii_wctomb+0x16>
 8009e9a:	2aff      	cmp	r2, #255	; 0xff
 8009e9c:	bf85      	ittet	hi
 8009e9e:	238a      	movhi	r3, #138	; 0x8a
 8009ea0:	6003      	strhi	r3, [r0, #0]
 8009ea2:	700a      	strbls	r2, [r1, #0]
 8009ea4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ea8:	bf98      	it	ls
 8009eaa:	2001      	movls	r0, #1
 8009eac:	4770      	bx	lr
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4770      	bx	lr
	...

08009eb4 <_init>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	bf00      	nop
 8009eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eba:	bc08      	pop	{r3}
 8009ebc:	469e      	mov	lr, r3
 8009ebe:	4770      	bx	lr

08009ec0 <_fini>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	bf00      	nop
 8009ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec6:	bc08      	pop	{r3}
 8009ec8:	469e      	mov	lr, r3
 8009eca:	4770      	bx	lr
