
1107_GPIO_EXTI_DOB_DFOB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bdc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08009de0  08009de0  00019de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d0  0800a0d0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d8  0800a0d8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00035d04  200001f8  0800a2d8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20035efc  0800a2d8  00025efc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d89  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269e  00000000  00000000  00033faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  00036650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000298d8  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d232  00000000  00000000  00062080  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe8ef  00000000  00000000  0006f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016dba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e4  00000000  00000000  0016dc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009dc4 	.word	0x08009dc4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	08009dc4 	.word	0x08009dc4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fe:	2201      	movs	r2, #1
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <__io_putchar+0x20>)
 8000602:	f006 f963 	bl	80068cc <HAL_UART_Transmit>

  return ch;
 8000606:	687b      	ldr	r3, [r7, #4]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2003592c 	.word	0x2003592c
 8000614:	00000000 	.word	0x00000000

08000618 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	f041 85c0 	bne.w	80021ac <HAL_TIM_PeriodElapsedCallback+0x1b94>
		// TIM2 task
    switch(mode){
 800062c:	4b65      	ldr	r3, [pc, #404]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d031      	beq.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000634:	2b02      	cmp	r3, #2
 8000636:	f001 85b8 	beq.w	80021aa <HAL_TIM_PeriodElapsedCallback+0x1b92>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x2a>

        break;
    }

		}
}
 800063e:	f001 bdb5 	b.w	80021ac <HAL_TIM_PeriodElapsedCallback+0x1b94>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4860      	ldr	r0, [pc, #384]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000648:	f003 fd30 	bl	80040ac <HAL_GPIO_WritePin>
        PWM1 = 0.5*PWM_rsl;
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800064e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000652:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 8000654:	4b5e      	ldr	r3, [pc, #376]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065a:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 800065c:	4b5d      	ldr	r3, [pc, #372]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800065e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000662:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 8000664:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000666:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800066a:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 800066c:	4b57      	ldr	r3, [pc, #348]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	4b58      	ldr	r3, [pc, #352]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8000680:	4b54      	ldr	r3, [pc, #336]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000682:	881a      	ldrh	r2, [r3, #0]
 8000684:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 800068a:	4b53      	ldr	r3, [pc, #332]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000694:	f001 bd8a 	b.w	80021ac <HAL_TIM_PeriodElapsedCallback+0x1b94>
        cnt1 = TIM1->CNT;
 8000698:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800069a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006a0:	801a      	strh	r2, [r3, #0]
        cnt2 = TIM3->CNT;
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006aa:	801a      	strh	r2, [r3, #0]
        cnt3 = TIM8->CNT;
 80006ac:	4b51      	ldr	r3, [pc, #324]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006b4:	801a      	strh	r2, [r3, #0]
        cnt4 = TIM4->CNT;
 80006b6:	4b51      	ldr	r3, [pc, #324]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b50      	ldr	r3, [pc, #320]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80006be:	801a      	strh	r2, [r3, #0]
        if     (cnt1 - cnt1_pre > 0x10000/2) digit1--;
 80006c0:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006d0:	dd09      	ble.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0xce>
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006d4:	f993 3000 	ldrsb.w	r3, [r3]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b01      	subs	r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b25a      	sxtb	r2, r3
 80006e0:	4b49      	ldr	r3, [pc, #292]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e011      	b.n	800070a <HAL_TIM_PeriodElapsedCallback+0xf2>
        else if(cnt1_pre - cnt1 > 0x10000/2) digit1++;
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006f6:	dd08      	ble.n	800070a <HAL_TIM_PeriodElapsedCallback+0xf2>
 80006f8:	4b43      	ldr	r3, [pc, #268]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006fa:	f993 3000 	ldrsb.w	r3, [r3]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000708:	701a      	strb	r2, [r3, #0]
        if     (cnt2 - cnt2_pre > 0x10000/2) digit2--;
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b3e      	ldr	r3, [pc, #248]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800071a:	dd09      	ble.n	8000730 <HAL_TIM_PeriodElapsedCallback+0x118>
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800071e:	f993 3000 	ldrsb.w	r3, [r3]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	3b01      	subs	r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25a      	sxtb	r2, r3
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e011      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x13c>
        else if(cnt2_pre - cnt2 > 0x10000/2) digit2++;
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000740:	dd08      	ble.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000744:	f993 3000 	ldrsb.w	r3, [r3]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	b25a      	sxtb	r2, r3
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000752:	701a      	strb	r2, [r3, #0]
        if     (cnt3 - cnt3_pre > 0x10000/2) digit3--;
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000764:	dd09      	ble.n	800077a <HAL_TIM_PeriodElapsedCallback+0x162>
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000768:	f993 3000 	ldrsb.w	r3, [r3]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b25a      	sxtb	r2, r3
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e011      	b.n	800079e <HAL_TIM_PeriodElapsedCallback+0x186>
        else if(cnt3_pre - cnt3 > 0x10000/2) digit3++;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078a:	dd08      	ble.n	800079e <HAL_TIM_PeriodElapsedCallback+0x186>
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800078e:	f993 3000 	ldrsb.w	r3, [r3]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	3301      	adds	r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	b25a      	sxtb	r2, r3
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800079c:	701a      	strb	r2, [r3, #0]
        if     (cnt4 - cnt4_pre > 0x10000/2) digit4--;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007ae:	dd39      	ble.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x20c>
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007b2:	f993 3000 	ldrsb.w	r3, [r3]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e041      	b.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x230>
 80007c4:	2000021a 	.word	0x2000021a
 80007c8:	40020400 	.word	0x40020400
 80007cc:	200002c4 	.word	0x200002c4
 80007d0:	200002c6 	.word	0x200002c6
 80007d4:	200002c8 	.word	0x200002c8
 80007d8:	200002ca 	.word	0x200002ca
 80007dc:	20035db0 	.word	0x20035db0
 80007e0:	20035e70 	.word	0x20035e70
 80007e4:	40010000 	.word	0x40010000
 80007e8:	2000021c 	.word	0x2000021c
 80007ec:	40000400 	.word	0x40000400
 80007f0:	2000021e 	.word	0x2000021e
 80007f4:	40010400 	.word	0x40010400
 80007f8:	20000220 	.word	0x20000220
 80007fc:	40000800 	.word	0x40000800
 8000800:	20000222 	.word	0x20000222
 8000804:	20000224 	.word	0x20000224
 8000808:	2000022c 	.word	0x2000022c
 800080c:	20000226 	.word	0x20000226
 8000810:	2000022d 	.word	0x2000022d
 8000814:	20000228 	.word	0x20000228
 8000818:	2000022e 	.word	0x2000022e
 800081c:	2000022a 	.word	0x2000022a
 8000820:	2000022f 	.word	0x2000022f
        else if(cnt4_pre - cnt4 > 0x10000/2) digit4++;
 8000824:	4bdc      	ldr	r3, [pc, #880]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4bdc      	ldr	r3, [pc, #880]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x584>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000834:	dd08      	ble.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000836:	4bda      	ldr	r3, [pc, #872]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000838:	f993 3000 	ldrsb.w	r3, [r3]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	3301      	adds	r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	b25a      	sxtb	r2, r3
 8000844:	4bd6      	ldr	r3, [pc, #856]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000846:	701a      	strb	r2, [r3, #0]
        theta1_res = (cnt1 - cnt_offset + digit1 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;// [rad]
 8000848:	4bd6      	ldr	r3, [pc, #856]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4bd6      	ldr	r3, [pc, #856]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	4bd5      	ldr	r3, [pc, #852]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000858:	f993 3000 	ldrsb.w	r3, [r3]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	4413      	add	r3, r2
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000868:	4bd1      	ldr	r3, [pc, #836]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000872:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800087a:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8000b90 <HAL_TIM_PeriodElapsedCallback+0x578>
 800087e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000882:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000886:	ee37 6b07 	vadd.f64	d6, d7, d7
 800088a:	eddf 7aca 	vldr	s15, [pc, #808]	; 8000bb4 <HAL_TIM_PeriodElapsedCallback+0x59c>
 800088e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000892:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	4bc7      	ldr	r3, [pc, #796]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800089c:	edc3 7a00 	vstr	s15, [r3]
        theta2_res = (cnt2 - cnt_offset + digit2 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 80008a0:	4bc6      	ldr	r3, [pc, #792]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4bc0      	ldr	r3, [pc, #768]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	1ad2      	subs	r2, r2, r3
 80008ae:	4bc4      	ldr	r3, [pc, #784]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80008b0:	f993 3000 	ldrsb.w	r3, [r3]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	4413      	add	r3, r2
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80008c0:	4bbb      	ldr	r3, [pc, #748]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ca:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80008ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008d2:	ed9f 6baf 	vldr	d6, [pc, #700]	; 8000b90 <HAL_TIM_PeriodElapsedCallback+0x578>
 80008d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80008e2:	eddf 7ab4 	vldr	s15, [pc, #720]	; 8000bb4 <HAL_TIM_PeriodElapsedCallback+0x59c>
 80008e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f2:	4bb4      	ldr	r3, [pc, #720]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80008f4:	edc3 7a00 	vstr	s15, [r3]
        theta3_res = (cnt3 - cnt_offset + digit3 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 80008f8:	4bb3      	ldr	r3, [pc, #716]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4baa      	ldr	r3, [pc, #680]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	1ad2      	subs	r2, r2, r3
 8000906:	4bb1      	ldr	r3, [pc, #708]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000908:	f993 3000 	ldrsb.w	r3, [r3]
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	4413      	add	r3, r2
 8000910:	ee07 3a90 	vmov	s15, r3
 8000914:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000918:	4ba5      	ldr	r3, [pc, #660]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000922:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800092a:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000b90 <HAL_TIM_PeriodElapsedCallback+0x578>
 800092e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000932:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000936:	ee37 6b07 	vadd.f64	d6, d7, d7
 800093a:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8000bb4 <HAL_TIM_PeriodElapsedCallback+0x59c>
 800093e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000942:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000946:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094a:	4ba1      	ldr	r3, [pc, #644]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
        theta4_res = (cnt4 - cnt_offset + digit4 * 0x10000) / (4.0 * rsl * Gear)*2.0*pi;
 8000950:	4b92      	ldr	r3, [pc, #584]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b94      	ldr	r3, [pc, #592]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	1ad2      	subs	r2, r2, r3
 800095e:	4b90      	ldr	r3, [pc, #576]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	4413      	add	r3, r2
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000970:	4b8f      	ldr	r3, [pc, #572]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800097a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800097e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000982:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8000b90 <HAL_TIM_PeriodElapsedCallback+0x578>
 8000986:	ee27 6b06 	vmul.f64	d6, d7, d6
 800098a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800098e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000992:	eddf 7a88 	vldr	s15, [pc, #544]	; 8000bb4 <HAL_TIM_PeriodElapsedCallback+0x59c>
 8000996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800099a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800099e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a2:	4b8c      	ldr	r3, [pc, #560]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80009a4:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res_raw = ( theta1_res - theta1_res_pre )/dt;
 80009a8:	4b83      	ldr	r3, [pc, #524]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80009aa:	ed93 7a00 	vldr	s14, [r3]
 80009ae:	4b8a      	ldr	r3, [pc, #552]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009b8:	eddf 6a88 	vldr	s13, [pc, #544]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 80009bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c0:	4b87      	ldr	r3, [pc, #540]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80009c2:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res_raw = ( theta2_res - theta2_res_pre )/dt;
 80009c6:	4b7f      	ldr	r3, [pc, #508]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80009c8:	ed93 7a00 	vldr	s14, [r3]
 80009cc:	4b85      	ldr	r3, [pc, #532]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009d6:	eddf 6a81 	vldr	s13, [pc, #516]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 80009da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009de:	4b82      	ldr	r3, [pc, #520]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80009e0:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res_raw = ( theta3_res - theta3_res_pre )/dt;
 80009e4:	4b7a      	ldr	r3, [pc, #488]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80009e6:	ed93 7a00 	vldr	s14, [r3]
 80009ea:	4b80      	ldr	r3, [pc, #512]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009f4:	eddf 6a79 	vldr	s13, [pc, #484]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 80009f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fc:	4b7c      	ldr	r3, [pc, #496]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80009fe:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res_raw = ( theta4_res - theta4_res_pre )/dt;
 8000a02:	4b74      	ldr	r3, [pc, #464]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000a04:	ed93 7a00 	vldr	s14, [r3]
 8000a08:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a12:	eddf 6a72 	vldr	s13, [pc, #456]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1a:	4b77      	ldr	r3, [pc, #476]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8000a1c:	edc3 7a00 	vstr	s15, [r3]
        dtheta1_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta1_res_pre + 2.0 * G_LPF * (theta1_res - theta1_res_pre) );
 8000a20:	4b76      	ldr	r3, [pc, #472]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000a22:	edd3 7a00 	vldr	s15, [r3]
 8000a26:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a32:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000a36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a3a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000a3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a42:	4b6e      	ldr	r3, [pc, #440]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000a44:	edd3 7a00 	vldr	s15, [r3]
 8000a48:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000a5c:	4b68      	ldr	r3, [pc, #416]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000a5e:	edd3 7a00 	vldr	s15, [r3]
 8000a62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a66:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000a6a:	4b64      	ldr	r3, [pc, #400]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000a6c:	edd3 7a00 	vldr	s15, [r3]
 8000a70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a74:	ee37 4b07 	vadd.f64	d4, d7, d7
 8000a78:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000a7a:	ed93 7a00 	vldr	s14, [r3]
 8000a7e:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8000a80:	edd3 7a00 	vldr	s15, [r3]
 8000a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a8c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8000a90:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000a94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a9c:	4b59      	ldr	r3, [pc, #356]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000a9e:	edc3 7a00 	vstr	s15, [r3]
        dtheta2_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta2_res_pre + 2.0 * G_LPF * (theta2_res - theta2_res_pre) );
 8000aa2:	4b56      	ldr	r3, [pc, #344]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000aa4:	edd3 7a00 	vldr	s15, [r3]
 8000aa8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000ab8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000abc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000ac0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000ac6:	edd3 7a00 	vldr	s15, [r3]
 8000aca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ada:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000ade:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000aec:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000aee:	edd3 7a00 	vldr	s15, [r3]
 8000af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af6:	ee37 4b07 	vadd.f64	d4, d7, d7
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000afc:	ed93 7a00 	vldr	s14, [r3]
 8000b00:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b0e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8000b12:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000b16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8000b20:	edc3 7a00 	vstr	s15, [r3]
        dtheta3_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta3_res_pre + 2.0 * G_LPF * (theta3_res - theta3_res_pre) );
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000b26:	edd3 7a00 	vldr	s15, [r3]
 8000b2a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000b3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b3e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000b42:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000bdc <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8000b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000b5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000b62:	edd3 7a00 	vldr	s15, [r3]
 8000b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b78:	ee37 4b07 	vadd.f64	d4, d7, d7
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000b7e:	ed93 7a00 	vldr	s14, [r3]
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b8c:	e042      	b.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 8000b8e:	bf00      	nop
 8000b90:	00000000 	.word	0x00000000
 8000b94:	40500000 	.word	0x40500000
 8000b98:	2000022a 	.word	0x2000022a
 8000b9c:	20000222 	.word	0x20000222
 8000ba0:	2000022f 	.word	0x2000022f
 8000ba4:	2000021c 	.word	0x2000021c
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	2000022c 	.word	0x2000022c
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	40490fdb 	.word	0x40490fdb
 8000bb8:	20000234 	.word	0x20000234
 8000bbc:	2000021e 	.word	0x2000021e
 8000bc0:	2000022d 	.word	0x2000022d
 8000bc4:	20000238 	.word	0x20000238
 8000bc8:	20000220 	.word	0x20000220
 8000bcc:	2000022e 	.word	0x2000022e
 8000bd0:	2000023c 	.word	0x2000023c
 8000bd4:	20000240 	.word	0x20000240
 8000bd8:	20000244 	.word	0x20000244
 8000bdc:	3a83126f 	.word	0x3a83126f
 8000be0:	20000274 	.word	0x20000274
 8000be4:	20000248 	.word	0x20000248
 8000be8:	20000278 	.word	0x20000278
 8000bec:	2000024c 	.word	0x2000024c
 8000bf0:	2000027c 	.word	0x2000027c
 8000bf4:	20000250 	.word	0x20000250
 8000bf8:	20000280 	.word	0x20000280
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000264 	.word	0x20000264
 8000c04:	20000254 	.word	0x20000254
 8000c08:	20000268 	.word	0x20000268
 8000c0c:	20000258 	.word	0x20000258
 8000c10:	2000026c 	.word	0x2000026c
 8000c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c18:	ee24 7b07 	vmul.f64	d7, d4, d7
 8000c1c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c28:	4bcd      	ldr	r3, [pc, #820]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000c2a:	edc3 7a00 	vstr	s15, [r3]
        dtheta4_res = 1.0 / (2.0 + G_LPF * dt) * ( (2.0 - G_LPF * dt)*dtheta4_res_pre + 2.0 * G_LPF * (theta4_res - theta4_res_pre) );
 8000c2e:	4bcd      	ldr	r3, [pc, #820]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000c30:	edd3 7a00 	vldr	s15, [r3]
 8000c34:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x950>
 8000c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8000c44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c48:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000c4c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c50:	4bc4      	ldr	r3, [pc, #784]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x950>
 8000c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c66:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c6a:	4bc0      	ldr	r3, [pc, #768]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x954>)
 8000c6c:	edd3 7a00 	vldr	s15, [r3]
 8000c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c74:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000c78:	4bba      	ldr	r3, [pc, #744]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000c7a:	edd3 7a00 	vldr	s15, [r3]
 8000c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c82:	ee37 4b07 	vadd.f64	d4, d7, d7
 8000c86:	4bba      	ldr	r3, [pc, #744]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8000c88:	ed93 7a00 	vldr	s14, [r3]
 8000c8c:	4bb9      	ldr	r3, [pc, #740]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8000c9e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000ca2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ca6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000caa:	4bb3      	ldr	r3, [pc, #716]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8000cac:	edc3 7a00 	vstr	s15, [r3]
        vx_res = (Rw / 4.0) * (dtheta1_res - dtheta2_res + dtheta3_res - dtheta4_res);// [m/sec]
 8000cb0:	4bb2      	ldr	r3, [pc, #712]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x964>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	4bb2      	ldr	r3, [pc, #712]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8000cb8:	edd3 7a00 	vldr	s15, [r3]
 8000cbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cc0:	4ba7      	ldr	r3, [pc, #668]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cca:	4bab      	ldr	r3, [pc, #684]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd4:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8000f84 <HAL_TIM_PeriodElapsedCallback+0x96c>
 8000cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cdc:	4baa      	ldr	r3, [pc, #680]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8000cde:	edc3 7a00 	vstr	s15, [r3]
        vy_res = (Rw / 4.0) * (dtheta1_res + dtheta2_res + dtheta3_res + dtheta4_res);
 8000ce2:	4ba6      	ldr	r3, [pc, #664]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x964>)
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
 8000ce8:	4ba5      	ldr	r3, [pc, #660]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8000cea:	edd3 7a00 	vldr	s15, [r3]
 8000cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cf2:	4b9b      	ldr	r3, [pc, #620]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cfc:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d06:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8000f84 <HAL_TIM_PeriodElapsedCallback+0x96c>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0e:	4b9f      	ldr	r3, [pc, #636]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8000d10:	edc3 7a00 	vstr	s15, [r3]
        dphi_res = (Rw / 4.0) / (W + L) * ( - dtheta1_res - dtheta2_res + dtheta3_res + dtheta4_res);// [rad/sec]
 8000d14:	4b99      	ldr	r3, [pc, #612]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x964>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	eeb1 7a67 	vneg.f32	s14, s15
 8000d1e:	4b98      	ldr	r3, [pc, #608]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d28:	4b8d      	ldr	r3, [pc, #564]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d32:	4b91      	ldr	r3, [pc, #580]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8000d34:	edd3 7a00 	vldr	s15, [r3]
 8000d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d40:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8000f58 <HAL_TIM_PeriodElapsedCallback+0x940>
 8000d44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d4c:	4b90      	ldr	r3, [pc, #576]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
        x_res   += vx_res   * dt;// [m]
 8000d52:	4b8d      	ldr	r3, [pc, #564]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x950>
 8000d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d60:	4b8c      	ldr	r3, [pc, #560]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6a:	4b8a      	ldr	r3, [pc, #552]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8000d6c:	edc3 7a00 	vstr	s15, [r3]
        y_res   += vy_res   * dt;
 8000d70:	4b86      	ldr	r3, [pc, #536]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x950>
 8000d7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d7e:	4b86      	ldr	r3, [pc, #536]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d88:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8000d8a:	edc3 7a00 	vstr	s15, [r3]
        phi_res += dphi_res * dt;// [rad]
 8000d8e:	4b80      	ldr	r3, [pc, #512]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8000d90:	edd3 7a00 	vldr	s15, [r3]
 8000d94:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x950>
 8000d98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d9c:	4b7f      	ldr	r3, [pc, #508]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da6:	4b7d      	ldr	r3, [pc, #500]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8000da8:	edc3 7a00 	vstr	s15, [r3]
        direc1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	2b10      	cmp	r3, #16
 8000db8:	bf0c      	ite	eq
 8000dba:	2301      	moveq	r3, #1
 8000dbc:	2300      	movne	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8000dc4:	701a      	strb	r2, [r3, #0]
        direc2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8000dc6:	4b78      	ldr	r3, [pc, #480]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	b25a      	sxtb	r2, r3
 8000ddc:	4b73      	ldr	r3, [pc, #460]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x994>)
 8000dde:	701a      	strb	r2, [r3, #0]
        direc3 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);
 8000de0:	4b73      	ldr	r3, [pc, #460]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	bf0c      	ite	eq
 8000dee:	2301      	moveq	r3, #1
 8000df0:	2300      	movne	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8000df8:	701a      	strb	r2, [r3, #0]
        direc4 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 8000dfa:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b10      	cmp	r3, #16
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8000e12:	701a      	strb	r2, [r3, #0]
        if(t > 3.0){
 8000e14:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	dd02      	ble.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x816>
          vy_cmd = -0.3;// [m/sec]
 8000e28:	4b66      	ldr	r3, [pc, #408]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8000e2a:	4a67      	ldr	r2, [pc, #412]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8000e2c:	601a      	str	r2, [r3, #0]
        ddx_ref   = Kp_vv_x   * (vx_cmd   -   vx_res);
 8000e2e:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8000e30:	ed93 7a00 	vldr	s14, [r3]
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8000e36:	edd3 7a00 	vldr	s15, [r3]
 8000e3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e3e:	4b64      	ldr	r3, [pc, #400]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e48:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8000e4a:	edc3 7a00 	vstr	s15, [r3]
        ddy_ref   = Kp_vv_y   * (vy_cmd   -   vy_res);
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8000e50:	ed93 7a00 	vldr	s14, [r3]
 8000e54:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e5e:	4b5e      	ldr	r3, [pc, #376]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
        ddphi_ref = Kp_vv_phi * (dphi_cmd - dphi_res);
 8000e6e:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8000e70:	ed93 7a00 	vldr	s14, [r3]
 8000e74:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e7e:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e88:	4b57      	ldr	r3, [pc, #348]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8000e8a:	edc3 7a00 	vstr	s15, [r3]
        ddtheta1_ref =  20.0 * ddx_ref + 20.0 * ddy_ref - 6.0 * ddphi_ref;// [rad/sec^2]
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e98:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000e9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eaa:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000eae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000eb6:	4b4c      	ldr	r3, [pc, #304]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000ec4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ec8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ecc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed0:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8000ed2:	edc3 7a00 	vstr	s15, [r3]
        ddtheta2_ref = -20.0 * ddx_ref + 20.0 * ddy_ref - 6.0 * ddphi_ref;
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee0:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 8000ee4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef2:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000ef6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000efa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8000f00:	edd3 7a00 	vldr	s15, [r3]
 8000f04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f08:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000f0c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
        ddtheta3_ref =  20.0 * ddx_ref + 20.0 * ddy_ref + 6.0 * ddphi_ref;
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f28:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000f2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f3a:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8000f3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f42:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f50:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000f54:	e04e      	b.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x9dc>
 8000f56:	bf00      	nop
 8000f58:	4c71c722 	.word	0x4c71c722
 8000f5c:	3fa55555 	.word	0x3fa55555
 8000f60:	2000025c 	.word	0x2000025c
 8000f64:	20000008 	.word	0x20000008
 8000f68:	3a83126f 	.word	0x3a83126f
 8000f6c:	20000270 	.word	0x20000270
 8000f70:	20000240 	.word	0x20000240
 8000f74:	20000250 	.word	0x20000250
 8000f78:	20000260 	.word	0x20000260
 8000f7c:	20000254 	.word	0x20000254
 8000f80:	20000258 	.word	0x20000258
 8000f84:	3c4ccccd 	.word	0x3c4ccccd
 8000f88:	200002d8 	.word	0x200002d8
 8000f8c:	200002dc 	.word	0x200002dc
 8000f90:	200002e0 	.word	0x200002e0
 8000f94:	200002e4 	.word	0x200002e4
 8000f98:	200002e8 	.word	0x200002e8
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	20035e30 	.word	0x20035e30
 8000fa4:	20000230 	.word	0x20000230
 8000fa8:	20035df0 	.word	0x20035df0
 8000fac:	20000231 	.word	0x20000231
 8000fb0:	200358ac 	.word	0x200358ac
 8000fb4:	20000232 	.word	0x20000232
 8000fb8:	200358ec 	.word	0x200358ec
 8000fbc:	20000233 	.word	0x20000233
 8000fc0:	20000214 	.word	0x20000214
 8000fc4:	200002d0 	.word	0x200002d0
 8000fc8:	be99999a 	.word	0xbe99999a
 8000fcc:	200002cc 	.word	0x200002cc
 8000fd0:	20000010 	.word	0x20000010
 8000fd4:	200002ec 	.word	0x200002ec
 8000fd8:	20000014 	.word	0x20000014
 8000fdc:	200002f0 	.word	0x200002f0
 8000fe0:	200002d4 	.word	0x200002d4
 8000fe4:	20000018 	.word	0x20000018
 8000fe8:	200002f4 	.word	0x200002f4
 8000fec:	20000284 	.word	0x20000284
 8000ff0:	20000288 	.word	0x20000288
 8000ff4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ff8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ffc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001000:	4be7      	ldr	r3, [pc, #924]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001002:	edc3 7a00 	vstr	s15, [r3]
        ddtheta4_ref = -20.0 * ddx_ref + 20.0 * ddy_ref + 6.0 * ddphi_ref;
 8001006:	4be7      	ldr	r3, [pc, #924]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001010:	eebb 6b04 	vmov.f64	d6, #180	; 0xc1a00000 -20.0
 8001014:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001018:	4be3      	ldr	r3, [pc, #908]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 800101a:	edd3 7a00 	vldr	s15, [r3]
 800101e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001022:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8001026:	ee27 7b05 	vmul.f64	d7, d7, d5
 800102a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800102e:	4bdf      	ldr	r3, [pc, #892]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001038:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800103c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001040:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001044:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001048:	4bd9      	ldr	r3, [pc, #868]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
        i1_ref = (M11*ddtheta1_ref + M12*ddtheta2_ref + M13*ddtheta3_ref + M14*ddtheta4_ref)/( Gear * Ktn );
 800104e:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 8001052:	4bd9      	ldr	r3, [pc, #868]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105c:	eddf 6ad7 	vldr	s13, [pc, #860]	; 80013bc <HAL_TIM_PeriodElapsedCallback+0xda4>
 8001060:	4bd7      	ldr	r3, [pc, #860]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106e:	eddf 6ad5 	vldr	s13, [pc, #852]	; 80013c4 <HAL_TIM_PeriodElapsedCallback+0xdac>
 8001072:	4bcb      	ldr	r3, [pc, #812]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001080:	eddf 6ad1 	vldr	s13, [pc, #836]	; 80013c8 <HAL_TIM_PeriodElapsedCallback+0xdb0>
 8001084:	4bca      	ldr	r3, [pc, #808]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001092:	eddf 6ace 	vldr	s13, [pc, #824]	; 80013cc <HAL_TIM_PeriodElapsedCallback+0xdb4>
 8001096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109a:	4bcd      	ldr	r3, [pc, #820]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
        i2_ref = (M21*ddtheta1_ref + M22*ddtheta2_ref + M23*ddtheta3_ref + M24*ddtheta4_ref)/( Gear * Ktn );
 80010a0:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80013bc <HAL_TIM_PeriodElapsedCallback+0xda4>
 80010a4:	4bc4      	ldr	r3, [pc, #784]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 80010b2:	4bc3      	ldr	r3, [pc, #780]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c0:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80013c8 <HAL_TIM_PeriodElapsedCallback+0xdb0>
 80010c4:	4bb6      	ldr	r3, [pc, #728]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d2:	eddf 6abc 	vldr	s13, [pc, #752]	; 80013c4 <HAL_TIM_PeriodElapsedCallback+0xdac>
 80010d6:	4bb6      	ldr	r3, [pc, #728]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e4:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80013cc <HAL_TIM_PeriodElapsedCallback+0xdb4>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	4bb9      	ldr	r3, [pc, #740]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]
        i3_ref = (M31*ddtheta1_ref + M32*ddtheta2_ref + M33*ddtheta3_ref + M34*ddtheta4_ref)/( Gear * Ktn );
 80010f2:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80013c4 <HAL_TIM_PeriodElapsedCallback+0xdac>
 80010f6:	4bb0      	ldr	r3, [pc, #704]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80013c8 <HAL_TIM_PeriodElapsedCallback+0xdb0>
 8001104:	4bae      	ldr	r3, [pc, #696]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001112:	eddf 6aa8 	vldr	s13, [pc, #672]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 8001116:	4ba2      	ldr	r3, [pc, #648]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001124:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80013bc <HAL_TIM_PeriodElapsedCallback+0xda4>
 8001128:	4ba1      	ldr	r3, [pc, #644]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001136:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80013cc <HAL_TIM_PeriodElapsedCallback+0xdb4>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	4ba6      	ldr	r3, [pc, #664]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8001140:	edc3 7a00 	vstr	s15, [r3]
        i4_ref = (M41*ddtheta1_ref + M42*ddtheta2_ref + M43*ddtheta3_ref + M44*ddtheta4_ref)/( Gear * Ktn );
 8001144:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80013c8 <HAL_TIM_PeriodElapsedCallback+0xdb0>
 8001148:	4b9b      	ldr	r3, [pc, #620]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001152:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80013c4 <HAL_TIM_PeriodElapsedCallback+0xdac>
 8001156:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001164:	eddf 6a95 	vldr	s13, [pc, #596]	; 80013bc <HAL_TIM_PeriodElapsedCallback+0xda4>
 8001168:	4b8d      	ldr	r3, [pc, #564]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001176:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 800117a:	4b8d      	ldr	r3, [pc, #564]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001188:	eddf 6a90 	vldr	s13, [pc, #576]	; 80013cc <HAL_TIM_PeriodElapsedCallback+0xdb4>
 800118c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
        tau_dob1 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob1_pre + G_DOB * dt * Gear * Ktn * ia1_ref - G_DOB * M11 * ( dtheta1_res - dtheta1_res_pre ) );
 8001196:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 800119a:	eddf 7a92 	vldr	s15, [pc, #584]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 800119e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011ae:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80011b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011b6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 80011ba:	eddf 7a8a 	vldr	s15, [pc, #552]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80013e8 <HAL_TIM_PeriodElapsedCallback+0xdd0>
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80013ec <HAL_TIM_PeriodElapsedCallback+0xdd4>
 80011ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d2:	4b87      	ldr	r3, [pc, #540]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0xddc>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e6:	eddf 5a73 	vldr	s11, [pc, #460]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 80011ea:	eddf 7a7e 	vldr	s15, [pc, #504]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 80011ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011f2:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xde0>)
 80011f4:	ed93 5a00 	vldr	s10, [r3]
 80011f8:	4b80      	ldr	r3, [pc, #512]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0xde4>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001202:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001216:	4b7a      	ldr	r3, [pc, #488]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0xde8>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
        tau_dob2 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob2_pre + G_DOB * dt * Gear * Ktn * ia2_ref - G_DOB * M22 * ( dtheta2_res - dtheta2_res_pre ) );
 800121c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 8001220:	eddf 7a70 	vldr	s15, [pc, #448]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800122c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001230:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001234:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001238:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800123c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 8001240:	eddf 7a68 	vldr	s15, [pc, #416]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013e8 <HAL_TIM_PeriodElapsedCallback+0xdd0>
 800124c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001250:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013ec <HAL_TIM_PeriodElapsedCallback+0xdd4>
 8001254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001262:	4b69      	ldr	r3, [pc, #420]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	eddf 5a51 	vldr	s11, [pc, #324]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 8001270:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 8001274:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001278:	4b64      	ldr	r3, [pc, #400]	; (800140c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 800127a:	ed93 5a00 	vldr	s10, [r3]
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001288:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800128c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001290:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001294:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001298:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800129c:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 800129e:	edc3 7a00 	vstr	s15, [r3]
        tau_dob3 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob3_pre + G_DOB * dt * Gear * Ktn * ia3_ref - G_DOB * M33 * ( dtheta3_res - dtheta3_res_pre ) );
 80012a2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 80012a6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012ba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80012be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80012c2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 80012c6:	eddf 7a47 	vldr	s15, [pc, #284]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80013e8 <HAL_TIM_PeriodElapsedCallback+0xdd0>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80013ec <HAL_TIM_PeriodElapsedCallback+0xdd4>
 80012da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012de:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f2:	eddf 5a30 	vldr	s11, [pc, #192]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 80012f6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 80012fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8001300:	ed93 5a00 	vldr	s10, [r3]
 8001304:	4b47      	ldr	r3, [pc, #284]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800130e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800131a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8001324:	edc3 7a00 	vstr	s15, [r3]
        tau_dob4 = 1.0 / (1.0 + G_DOB * dt) * ( tau_dob4_pre + G_DOB * dt * Gear * Ktn * ia4_ref - G_DOB * M44 * ( dtheta4_res - dtheta4_res_pre ) );
 8001328:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 800132c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 8001330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001338:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800133c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001340:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001344:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001348:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80013e0 <HAL_TIM_PeriodElapsedCallback+0xdc8>
 800134c:	eddf 7a25 	vldr	s15, [pc, #148]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 8001350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001354:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80013e8 <HAL_TIM_PeriodElapsedCallback+0xdd0>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013ec <HAL_TIM_PeriodElapsedCallback+0xdd4>
 8001360:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_TIM_PeriodElapsedCallback+0xe14>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001378:	eddf 5a0e 	vldr	s11, [pc, #56]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 800137c:	eddf 7a19 	vldr	s15, [pc, #100]	; 80013e4 <HAL_TIM_PeriodElapsedCallback+0xdcc>
 8001380:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 8001386:	ed93 5a00 	vldr	s10, [r3]
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001394:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	e04e      	b.n	800143c <HAL_TIM_PeriodElapsedCallback+0xe24>
 800139e:	bf00      	nop
 80013a0:	2000028c 	.word	0x2000028c
 80013a4:	200002ec 	.word	0x200002ec
 80013a8:	200002f0 	.word	0x200002f0
 80013ac:	200002f4 	.word	0x200002f4
 80013b0:	20000290 	.word	0x20000290
 80013b4:	3b8a4bfc 	.word	0x3b8a4bfc
 80013b8:	20000284 	.word	0x20000284
 80013bc:	39220502 	.word	0x39220502
 80013c0:	20000288 	.word	0x20000288
 80013c4:	3aceaa7d 	.word	0x3aceaa7d
 80013c8:	b9220502 	.word	0xb9220502
 80013cc:	3f5b8bac 	.word	0x3f5b8bac
 80013d0:	20000294 	.word	0x20000294
 80013d4:	20000298 	.word	0x20000298
 80013d8:	2000029c 	.word	0x2000029c
 80013dc:	200002a0 	.word	0x200002a0
 80013e0:	3a83126f 	.word	0x3a83126f
 80013e4:	42480000 	.word	0x42480000
 80013e8:	42800000 	.word	0x42800000
 80013ec:	3c5b8bac 	.word	0x3c5b8bac
 80013f0:	200002a4 	.word	0x200002a4
 80013f4:	20000308 	.word	0x20000308
 80013f8:	20000254 	.word	0x20000254
 80013fc:	20000264 	.word	0x20000264
 8001400:	200002f8 	.word	0x200002f8
 8001404:	200002a8 	.word	0x200002a8
 8001408:	2000030c 	.word	0x2000030c
 800140c:	20000258 	.word	0x20000258
 8001410:	20000268 	.word	0x20000268
 8001414:	200002fc 	.word	0x200002fc
 8001418:	200002ac 	.word	0x200002ac
 800141c:	20000310 	.word	0x20000310
 8001420:	2000025c 	.word	0x2000025c
 8001424:	2000026c 	.word	0x2000026c
 8001428:	20000300 	.word	0x20000300
 800142c:	200002b0 	.word	0x200002b0
 8001430:	20000314 	.word	0x20000314
 8001434:	20000260 	.word	0x20000260
 8001438:	20000270 	.word	0x20000270
 800143c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001440:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001444:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001448:	4bc5      	ldr	r3, [pc, #788]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1148>)
 800144a:	edc3 7a00 	vstr	s15, [r3]
          tau_dob1_pre = tau_dob1;
 800144e:	4bc5      	ldr	r3, [pc, #788]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x114c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4ac5      	ldr	r2, [pc, #788]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8001454:	6013      	str	r3, [r2, #0]
          tau_dob2_pre = tau_dob2;
 8001456:	4bc5      	ldr	r3, [pc, #788]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1154>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4ac5      	ldr	r2, [pc, #788]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 800145c:	6013      	str	r3, [r2, #0]
          tau_dob3_pre = tau_dob3;
 800145e:	4bc5      	ldr	r3, [pc, #788]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4ac5      	ldr	r2, [pc, #788]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8001464:	6013      	str	r3, [r2, #0]
          tau_dob4_pre = tau_dob4;
 8001466:	4bbe      	ldr	r3, [pc, #760]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1148>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4ac4      	ldr	r2, [pc, #784]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x1164>)
 800146c:	6013      	str	r3, [r2, #0]
          ia1_ref_pre = ia1_ref;
 800146e:	4bc4      	ldr	r3, [pc, #784]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4ac4      	ldr	r2, [pc, #784]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001474:	6013      	str	r3, [r2, #0]
          ia2_ref_pre = ia2_ref;
 8001476:	4bc4      	ldr	r3, [pc, #784]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4ac4      	ldr	r2, [pc, #784]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x1174>)
 800147c:	6013      	str	r3, [r2, #0]
          ia3_ref_pre = ia3_ref;
 800147e:	4bc4      	ldr	r3, [pc, #784]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4ac4      	ldr	r2, [pc, #784]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8001484:	6013      	str	r3, [r2, #0]
          ia4_ref_pre = ia4_ref;
 8001486:	4bc4      	ldr	r3, [pc, #784]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4ac4      	ldr	r2, [pc, #784]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x1184>)
 800148c:	6013      	str	r3, [r2, #0]
        i1_comp = tau_dob1 / ( Gear*Ktn );
 800148e:	4bb5      	ldr	r3, [pc, #724]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x114c>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	eddf 6ac2 	vldr	s13, [pc, #776]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	4bc1      	ldr	r3, [pc, #772]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x118c>)
 800149e:	edc3 7a00 	vstr	s15, [r3]
        i2_comp = tau_dob2 / ( Gear*Ktn );
 80014a2:	4bb2      	ldr	r3, [pc, #712]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1154>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	eddf 6abd 	vldr	s13, [pc, #756]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	4bbd      	ldr	r3, [pc, #756]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x1190>)
 80014b2:	edc3 7a00 	vstr	s15, [r3]
        i3_comp = tau_dob3 / ( Gear*Ktn );
 80014b6:	4baf      	ldr	r3, [pc, #700]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	eddf 6ab8 	vldr	s13, [pc, #736]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 80014c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x1194>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
        i4_comp = tau_dob4 / ( Gear*Ktn );
 80014ca:	4ba5      	ldr	r3, [pc, #660]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1148>)
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	eddf 6ab3 	vldr	s13, [pc, #716]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 80014d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d8:	4bb5      	ldr	r3, [pc, #724]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x1198>)
 80014da:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob1 = integral_tau_dfob1 - M11 * G_DFOB * dtheta1_res;// * Continuous
 80014de:	4bb5      	ldr	r3, [pc, #724]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 80014e8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80014ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f0:	4bb2      	ldr	r3, [pc, #712]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fe:	4bb0      	ldr	r3, [pc, #704]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob2 = integral_tau_dfob2 - M22 * G_DFOB * dtheta2_res;// * Continuous
 8001504:	4baf      	ldr	r3, [pc, #700]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	eddf 6aab 	vldr	s13, [pc, #684]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 800150e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001512:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001516:	4bac      	ldr	r3, [pc, #688]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001524:	4ba9      	ldr	r3, [pc, #676]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob3 = integral_tau_dfob3 - M33 * G_DFOB * dtheta3_res;// * Continuous
 800152a:	4ba9      	ldr	r3, [pc, #676]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 8001534:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800153c:	4ba5      	ldr	r3, [pc, #660]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x11bc>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154a:	4ba3      	ldr	r3, [pc, #652]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 800154c:	edc3 7a00 	vstr	s15, [r3]
        tau_dfob4 = integral_tau_dfob4 - M44 * G_DFOB * dtheta4_res;// * Continuous
 8001550:	4ba2      	ldr	r3, [pc, #648]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	eddf 6a98 	vldr	s13, [pc, #608]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 800155a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800155e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001562:	4b9f      	ldr	r3, [pc, #636]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	4b9c      	ldr	r3, [pc, #624]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8001572:	edc3 7a00 	vstr	s15, [r3]
        switch(direc1){
 8001576:	4b9c      	ldr	r3, [pc, #624]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 8001578:	f993 3000 	ldrsb.w	r3, [r3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_TIM_PeriodElapsedCallback+0xf6e>
 8001580:	2b01      	cmp	r3, #1
 8001582:	d037      	beq.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0xfdc>
 8001584:	e06d      	b.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x104a>
            integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - F1_plus  - D1_plus  * dtheta1_res - integral_tau_dfob1) * G_DFOB * dt;// * Continuous
 8001586:	4b7e      	ldr	r3, [pc, #504]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 8001590:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001594:	eddf 6a88 	vldr	s13, [pc, #544]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 8001598:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800159c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015a0:	4b86      	ldr	r3, [pc, #536]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80017ec <HAL_TIM_PeriodElapsedCallback+0x11d4>
 80015b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015b6:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80017f0 <HAL_TIM_PeriodElapsedCallback+0x11d8>
 80015ba:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c8:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015da:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x11dc>
 80015de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e2:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 80015ee:	edc3 7a00 	vstr	s15, [r3]
            break;
 80015f2:	e036      	b.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x104a>
            integral_tau_dfob1 = integral_tau_dfob1 + ( Gear * Ktn * ia1_ref + M11 * G_DFOB * dtheta1_res - F1_minus  - D1_minus  * dtheta1_res - integral_tau_dfob1) * G_DFOB * dt;// * Continuous
 80015f4:	4b62      	ldr	r3, [pc, #392]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 80015fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001602:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 8001606:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800160a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80017f8 <HAL_TIM_PeriodElapsedCallback+0x11e0>
 8001620:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001624:	eddf 6a75 	vldr	s13, [pc, #468]	; 80017fc <HAL_TIM_PeriodElapsedCallback+0x11e4>
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x11dc>
 800164c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001660:	bf00      	nop
        switch(direc2){
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8001664:	f993 3000 	ldrsb.w	r3, [r3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x105a>
 800166c:	2b01      	cmp	r3, #1
 800166e:	d037      	beq.n	80016e0 <HAL_TIM_PeriodElapsedCallback+0x10c8>
 8001670:	e06d      	b.n	800174e <HAL_TIM_PeriodElapsedCallback+0x1136>
            integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - F2_plus  - D2_plus  * dtheta2_res - integral_tau_dfob2) * G_DFOB * dt;// * Continuous
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 800167c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001680:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 8001684:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001688:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001804 <HAL_TIM_PeriodElapsedCallback+0x11ec>
 800169e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016a2:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001808 <HAL_TIM_PeriodElapsedCallback+0x11f0>
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x11dc>
 80016ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
            break;
 80016de:	e036      	b.n	800174e <HAL_TIM_PeriodElapsedCallback+0x1136>
            integral_tau_dfob2 = integral_tau_dfob2 + ( Gear * Ktn * ia2_ref + M22 * G_DFOB * dtheta2_res - F2_minus  - D2_minus  * dtheta2_res - integral_tau_dfob2) * G_DFOB * dt;// * Continuous
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x1188>
 80016ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ee:	eddf 6a32 	vldr	s13, [pc, #200]	; 80017b8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 80016f2:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80016f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800180c <HAL_TIM_PeriodElapsedCallback+0x11f4>
 800170c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001710:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001810 <HAL_TIM_PeriodElapsedCallback+0x11f8>
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x11dc>
 8001738:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8001748:	edc3 7a00 	vstr	s15, [r3]
            break;
 800174c:	bf00      	nop
        switch(direc3){
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8001750:	f993 3000 	ldrsb.w	r3, [r3]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05f      	beq.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x1200>
 8001758:	2b01      	cmp	r3, #1
 800175a:	f000 8094 	beq.w	8001886 <HAL_TIM_PeriodElapsedCallback+0x126e>
 800175e:	e0c9      	b.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x12dc>
 8001760:	20000304 	.word	0x20000304
 8001764:	200002f8 	.word	0x200002f8
 8001768:	20000308 	.word	0x20000308
 800176c:	200002fc 	.word	0x200002fc
 8001770:	2000030c 	.word	0x2000030c
 8001774:	20000300 	.word	0x20000300
 8001778:	20000310 	.word	0x20000310
 800177c:	20000314 	.word	0x20000314
 8001780:	200002a4 	.word	0x200002a4
 8001784:	200002b4 	.word	0x200002b4
 8001788:	200002a8 	.word	0x200002a8
 800178c:	200002b8 	.word	0x200002b8
 8001790:	200002ac 	.word	0x200002ac
 8001794:	200002bc 	.word	0x200002bc
 8001798:	200002b0 	.word	0x200002b0
 800179c:	200002c0 	.word	0x200002c0
 80017a0:	3f5b8bac 	.word	0x3f5b8bac
 80017a4:	20000328 	.word	0x20000328
 80017a8:	2000032c 	.word	0x2000032c
 80017ac:	20000330 	.word	0x20000330
 80017b0:	20000334 	.word	0x20000334
 80017b4:	20000358 	.word	0x20000358
 80017b8:	3b8a4bfc 	.word	0x3b8a4bfc
 80017bc:	20000254 	.word	0x20000254
 80017c0:	20000338 	.word	0x20000338
 80017c4:	2000035c 	.word	0x2000035c
 80017c8:	20000258 	.word	0x20000258
 80017cc:	2000033c 	.word	0x2000033c
 80017d0:	20000360 	.word	0x20000360
 80017d4:	2000025c 	.word	0x2000025c
 80017d8:	20000340 	.word	0x20000340
 80017dc:	20000364 	.word	0x20000364
 80017e0:	20000260 	.word	0x20000260
 80017e4:	20000344 	.word	0x20000344
 80017e8:	20000230 	.word	0x20000230
 80017ec:	3d04b5dd 	.word	0x3d04b5dd
 80017f0:	39d1b717 	.word	0x39d1b717
 80017f4:	3a83126f 	.word	0x3a83126f
 80017f8:	bcff9724 	.word	0xbcff9724
 80017fc:	399d4952 	.word	0x399d4952
 8001800:	20000231 	.word	0x20000231
 8001804:	3d1db22d 	.word	0x3d1db22d
 8001808:	ba1d4952 	.word	0xba1d4952
 800180c:	bd123a2a 	.word	0xbd123a2a
 8001810:	b99d4952 	.word	0xb99d4952
 8001814:	20000232 	.word	0x20000232
            integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - F3_plus  - D3_plus  * dtheta3_res - integral_tau_dfob3) * G_DFOB * dt;// * Continuous
 8001818:	4bc5      	ldr	r3, [pc, #788]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001b34 <HAL_TIM_PeriodElapsedCallback+0x151c>
 8001822:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001826:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8001b38 <HAL_TIM_PeriodElapsedCallback+0x1520>
 800182a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800182e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001832:	4bc2      	ldr	r3, [pc, #776]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001b40 <HAL_TIM_PeriodElapsedCallback+0x1528>
 8001844:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001848:	eddf 6abe 	vldr	s13, [pc, #760]	; 8001b44 <HAL_TIM_PeriodElapsedCallback+0x152c>
 800184c:	4bbb      	ldr	r3, [pc, #748]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185a:	4bbb      	ldr	r3, [pc, #748]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001b4c <HAL_TIM_PeriodElapsedCallback+0x1534>
 8001870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001874:	4bb4      	ldr	r3, [pc, #720]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187e:	4bb2      	ldr	r3, [pc, #712]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001884:	e036      	b.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x12dc>
            integral_tau_dfob3 = integral_tau_dfob3 + ( Gear * Ktn * ia3_ref + M33 * G_DFOB * dtheta3_res - F3_minus  - D3_minus  * dtheta3_res - integral_tau_dfob3) * G_DFOB * dt;// * Continuous
 8001886:	4baa      	ldr	r3, [pc, #680]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001b34 <HAL_TIM_PeriodElapsedCallback+0x151c>
 8001890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001894:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8001b38 <HAL_TIM_PeriodElapsedCallback+0x1520>
 8001898:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800189c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a0:	4ba6      	ldr	r3, [pc, #664]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001b50 <HAL_TIM_PeriodElapsedCallback+0x1538>
 80018b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018b6:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001b54 <HAL_TIM_PeriodElapsedCallback+0x153c>
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c8:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001b4c <HAL_TIM_PeriodElapsedCallback+0x1534>
 80018de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018e2:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	4b96      	ldr	r3, [pc, #600]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
            break;
 80018f2:	bf00      	nop
        switch(direc4){
 80018f4:	4b98      	ldr	r3, [pc, #608]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 80018f6:	f993 3000 	ldrsb.w	r3, [r3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x12ec>
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d037      	beq.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x135a>
 8001902:	e06d      	b.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x13c8>
            integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - F4_plus  - D4_plus  * dtheta4_res - integral_tau_dfob4) * G_DFOB * dt;// * Continuous
 8001904:	4b95      	ldr	r3, [pc, #596]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x1544>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001b34 <HAL_TIM_PeriodElapsedCallback+0x151c>
 800190e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001912:	eddf 6a89 	vldr	s13, [pc, #548]	; 8001b38 <HAL_TIM_PeriodElapsedCallback+0x1520>
 8001916:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800191a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800191e:	4b90      	ldr	r3, [pc, #576]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001b64 <HAL_TIM_PeriodElapsedCallback+0x154c>
 8001930:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001934:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001b68 <HAL_TIM_PeriodElapsedCallback+0x1550>
 8001938:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1554>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001950:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001958:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001b4c <HAL_TIM_PeriodElapsedCallback+0x1534>
 800195c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001960:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1554>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	4b80      	ldr	r3, [pc, #512]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1554>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001970:	e036      	b.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x13c8>
            integral_tau_dfob4 = integral_tau_dfob4 + ( Gear * Ktn * ia4_ref + M44 * G_DFOB * dtheta4_res - F4_minus  - D4_minus  * dtheta4_res - integral_tau_dfob4) * G_DFOB * dt;// * Continuous
 8001972:	4b7a      	ldr	r3, [pc, #488]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x1544>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001b34 <HAL_TIM_PeriodElapsedCallback+0x151c>
 800197c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001980:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001b38 <HAL_TIM_PeriodElapsedCallback+0x1520>
 8001984:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001988:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800198c:	4b74      	ldr	r3, [pc, #464]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001b70 <HAL_TIM_PeriodElapsedCallback+0x1558>
 800199e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019a2:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001b74 <HAL_TIM_PeriodElapsedCallback+0x155c>
 80019a6:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b4:	4b6d      	ldr	r3, [pc, #436]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1554>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80019c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001b4c <HAL_TIM_PeriodElapsedCallback+0x1534>
 80019ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1554>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1554>)
 80019da:	edc3 7a00 	vstr	s15, [r3]
            break;
 80019de:	bf00      	nop
          tau_dfob1_pre = tau_dfob1;
 80019e0:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1564>)
 80019e6:	6013      	str	r3, [r2, #0]
          tau_dfob2_pre = tau_dfob2;
 80019e8:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 80019ee:	6013      	str	r3, [r2, #0]
          tau_dfob3_pre = tau_dfob3;
 80019f0:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a65      	ldr	r2, [pc, #404]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x1574>)
 80019f6:	6013      	str	r3, [r2, #0]
          tau_dfob4_pre = tau_dfob4;
 80019f8:	4b65      	ldr	r3, [pc, #404]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1578>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 80019fe:	6013      	str	r3, [r2, #0]
        fd_hat1 = tau_dfob1 / Rw;// [N] Element of fd's wheel rotation direction
 8001a00:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001b98 <HAL_TIM_PeriodElapsedCallback+0x1580>
 8001a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0e:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x1584>)
 8001a10:	edc3 7a00 	vstr	s15, [r3]
        fd_hat2 = tau_dfob2 / Rw;
 8001a14:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001b98 <HAL_TIM_PeriodElapsedCallback+0x1580>
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1588>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]
        fd_hat3 = tau_dfob3 / Rw;
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001b98 <HAL_TIM_PeriodElapsedCallback+0x1580>
 8001a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a36:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x158c>)
 8001a38:	edc3 7a00 	vstr	s15, [r3]
        fd_hat4 = tau_dfob4 / Rw;
 8001a3c:	4b54      	ldr	r3, [pc, #336]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x1578>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001b98 <HAL_TIM_PeriodElapsedCallback+0x1580>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1590>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]
        ia1_ref = i1_ref + i1_comp;
 8001a50:	4b56      	ldr	r3, [pc, #344]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x1594>)
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1598>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
        ia2_ref = i2_ref + i2_comp;
 8001a66:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x15a0>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x15a4>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 8001a78:	edc3 7a00 	vstr	s15, [r3]
        ia3_ref = i3_ref + i3_comp;
 8001a7c:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
        ia4_ref = i4_ref + i4_comp;
 8001a92:	4b4e      	ldr	r3, [pc, #312]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x1544>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
        if      (ia1_ref > i_max) ia1_ref =  i_max;
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001bd4 <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	dd03      	ble.n	8001ac4 <HAL_TIM_PeriodElapsedCallback+0x14ac>
 8001abc:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 8001abe:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e00c      	b.n	8001ade <HAL_TIM_PeriodElapsedCallback+0x14c6>
        else if(ia1_ref < -i_max) ia1_ref = -i_max;
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001bdc <HAL_TIM_PeriodElapsedCallback+0x15c4>
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d502      	bpl.n	8001ade <HAL_TIM_PeriodElapsedCallback+0x14c6>
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 8001ada:	4a41      	ldr	r2, [pc, #260]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8001adc:	601a      	str	r2, [r3, #0]
        if      (ia2_ref > i_max) ia2_ref =  i_max;
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bd4 <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd03      	ble.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x14e2>
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 8001af4:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00c      	b.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0x14fc>
        else if(ia2_ref < -i_max) ia2_ref = -i_max;
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001bdc <HAL_TIM_PeriodElapsedCallback+0x15c4>
 8001b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d502      	bpl.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0x14fc>
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x15a8>)
 8001b10:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8001b12:	601a      	str	r2, [r3, #0]
        if      (ia3_ref > i_max) ia3_ref =  i_max;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001bd4 <HAL_TIM_PeriodElapsedCallback+0x15bc>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	dd5d      	ble.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x15cc>
 8001b28:	4b01      	ldr	r3, [pc, #4]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8001b2a:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e066      	b.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x15e6>
 8001b30:	200002ac 	.word	0x200002ac
 8001b34:	3f5b8bac 	.word	0x3f5b8bac
 8001b38:	3b8a4bfc 	.word	0x3b8a4bfc
 8001b3c:	2000025c 	.word	0x2000025c
 8001b40:	3d102de0 	.word	0x3d102de0
 8001b44:	3b89a027 	.word	0x3b89a027
 8001b48:	20000360 	.word	0x20000360
 8001b4c:	3a83126f 	.word	0x3a83126f
 8001b50:	bd116873 	.word	0xbd116873
 8001b54:	3b30f27c 	.word	0x3b30f27c
 8001b58:	20000233 	.word	0x20000233
 8001b5c:	200002b0 	.word	0x200002b0
 8001b60:	20000260 	.word	0x20000260
 8001b64:	3d6e6320 	.word	0x3d6e6320
 8001b68:	ba03126f 	.word	0xba03126f
 8001b6c:	20000364 	.word	0x20000364
 8001b70:	bd570a3d 	.word	0xbd570a3d
 8001b74:	b68637bd 	.word	0xb68637bd
 8001b78:	20000338 	.word	0x20000338
 8001b7c:	20000348 	.word	0x20000348
 8001b80:	2000033c 	.word	0x2000033c
 8001b84:	2000034c 	.word	0x2000034c
 8001b88:	20000340 	.word	0x20000340
 8001b8c:	20000350 	.word	0x20000350
 8001b90:	20000344 	.word	0x20000344
 8001b94:	20000354 	.word	0x20000354
 8001b98:	3d4ccccd 	.word	0x3d4ccccd
 8001b9c:	20000368 	.word	0x20000368
 8001ba0:	2000036c 	.word	0x2000036c
 8001ba4:	20000370 	.word	0x20000370
 8001ba8:	20000374 	.word	0x20000374
 8001bac:	20000294 	.word	0x20000294
 8001bb0:	20000328 	.word	0x20000328
 8001bb4:	200002a4 	.word	0x200002a4
 8001bb8:	20000298 	.word	0x20000298
 8001bbc:	2000032c 	.word	0x2000032c
 8001bc0:	200002a8 	.word	0x200002a8
 8001bc4:	2000029c 	.word	0x2000029c
 8001bc8:	20000330 	.word	0x20000330
 8001bcc:	200002a0 	.word	0x200002a0
 8001bd0:	20000334 	.word	0x20000334
 8001bd4:	3fb33333 	.word	0x3fb33333
 8001bd8:	3fb33333 	.word	0x3fb33333
 8001bdc:	bfb33333 	.word	0xbfb33333
 8001be0:	bfb33333 	.word	0xbfb33333
        else if(ia3_ref < -i_max) ia3_ref = -i_max;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x1604>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001c20 <HAL_TIM_PeriodElapsedCallback+0x1608>
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	d502      	bpl.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x15e6>
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x1604>)
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x160c>)
 8001bfc:	601a      	str	r2, [r3, #0]
        if      (ia4_ref > i_max) ia4_ref =  i_max;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x1610>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c2c <HAL_TIM_PeriodElapsedCallback+0x1614>
 8001c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	dd10      	ble.n	8001c34 <HAL_TIM_PeriodElapsedCallback+0x161c>
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x1610>)
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x1618>)
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e019      	b.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x1636>
 8001c1a:	bf00      	nop
 8001c1c:	200002ac 	.word	0x200002ac
 8001c20:	bfb33333 	.word	0xbfb33333
 8001c24:	bfb33333 	.word	0xbfb33333
 8001c28:	200002b0 	.word	0x200002b0
 8001c2c:	3fb33333 	.word	0x3fb33333
 8001c30:	3fb33333 	.word	0x3fb33333
        else if(ia4_ref < -i_max) ia4_ref = -i_max;
 8001c34:	4ba0      	ldr	r3, [pc, #640]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x18a0>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001ebc <HAL_TIM_PeriodElapsedCallback+0x18a4>
 8001c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d502      	bpl.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x1636>
 8001c48:	4b9b      	ldr	r3, [pc, #620]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x18a0>)
 8001c4a:	4a9d      	ldr	r2, [pc, #628]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x18a8>)
 8001c4c:	601a      	str	r2, [r3, #0]
        PWM1 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia1_ref + PWM_rsl * 0.5;
 8001c4e:	4b9d      	ldr	r3, [pc, #628]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x18ac>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c58:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1890>
 8001c5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c60:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1898>
 8001c64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c6c:	ee17 3a90 	vmov	r3, s15
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b95      	ldr	r3, [pc, #596]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x18b0>)
 8001c74:	801a      	strh	r2, [r3, #0]
        PWM2 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia2_ref + PWM_rsl * 0.5;
 8001c76:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x18b4>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c80:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1890>
 8001c84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c88:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1898>
 8001c8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c94:	ee17 3a90 	vmov	r3, s15
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b8d      	ldr	r3, [pc, #564]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x18b8>)
 8001c9c:	801a      	strh	r2, [r3, #0]
        PWM3 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia3_ref + PWM_rsl * 0.5;
 8001c9e:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x18bc>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca8:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1890>
 8001cac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cb0:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1898>
 8001cb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cb8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b85      	ldr	r3, [pc, #532]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x18c0>)
 8001cc4:	801a      	strh	r2, [r3, #0]
        PWM4 = (90.0 - 50.0)/100.0*PWM_rsl / i_max * ia4_ref + PWM_rsl * 0.5;
 8001cc6:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x18a0>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cd0:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1890>
 8001cd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cd8:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1898>
 8001cdc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ce0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ce4:	ee17 3a90 	vmov	r3, s15
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b7c      	ldr	r3, [pc, #496]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x18c4>)
 8001cec:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x18b0>)
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x18c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x18b8>)
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x18c8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 8001d02:	4b75      	ldr	r3, [pc, #468]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x18c0>)
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 8001d0c:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x18c4>)
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	4b74      	ldr	r3, [pc, #464]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
        theta1_res_pre = theta1_res;
 8001d16:	4b74      	ldr	r3, [pc, #464]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a74      	ldr	r2, [pc, #464]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 8001d1c:	6013      	str	r3, [r2, #0]
        theta2_res_pre = theta2_res;
 8001d1e:	4b74      	ldr	r3, [pc, #464]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a74      	ldr	r2, [pc, #464]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 8001d24:	6013      	str	r3, [r2, #0]
        theta3_res_pre = theta3_res;
 8001d26:	4b74      	ldr	r3, [pc, #464]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x18e0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a74      	ldr	r2, [pc, #464]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x18e4>)
 8001d2c:	6013      	str	r3, [r2, #0]
        theta4_res_pre = theta4_res;
 8001d2e:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x18e8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a74      	ldr	r2, [pc, #464]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x18ec>)
 8001d34:	6013      	str	r3, [r2, #0]
        dtheta1_res_pre = dtheta1_res;
 8001d36:	4b74      	ldr	r3, [pc, #464]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x18f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a74      	ldr	r2, [pc, #464]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 8001d3c:	6013      	str	r3, [r2, #0]
        dtheta2_res_pre = dtheta2_res;
 8001d3e:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x18f8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a74      	ldr	r2, [pc, #464]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x18fc>)
 8001d44:	6013      	str	r3, [r2, #0]
        dtheta3_res_pre = dtheta3_res;
 8001d46:	4b74      	ldr	r3, [pc, #464]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x1900>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a74      	ldr	r2, [pc, #464]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x1904>)
 8001d4c:	6013      	str	r3, [r2, #0]
        dtheta4_res_pre = dtheta4_res;
 8001d4e:	4b74      	ldr	r3, [pc, #464]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x1908>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a74      	ldr	r2, [pc, #464]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x190c>)
 8001d54:	6013      	str	r3, [r2, #0]
        cnt1_pre = cnt1;
 8001d56:	4b74      	ldr	r3, [pc, #464]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x1910>)
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	4b74      	ldr	r3, [pc, #464]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x1914>)
 8001d5c:	801a      	strh	r2, [r3, #0]
        cnt2_pre = cnt2;
 8001d5e:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x1918>)
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x191c>)
 8001d64:	801a      	strh	r2, [r3, #0]
        cnt3_pre = cnt3;
 8001d66:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 8001d68:	881a      	ldrh	r2, [r3, #0]
 8001d6a:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x1924>)
 8001d6c:	801a      	strh	r2, [r3, #0]
        cnt4_pre = cnt4;
 8001d6e:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b74      	ldr	r3, [pc, #464]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x192c>)
 8001d74:	801a      	strh	r2, [r3, #0]
        if(loop % 10 == 0 && i_save < N_SRAM){
 8001d76:	4b74      	ldr	r3, [pc, #464]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	4b74      	ldr	r3, [pc, #464]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x1934>)
 8001d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	460b      	mov	r3, r1
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 81fa 	bne.w	8002188 <HAL_TIM_PeriodElapsedCallback+0x1b70>
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d9c:	f080 81f4 	bcs.w	8002188 <HAL_TIM_PeriodElapsedCallback+0x1b70>
          t_SRAM[i_save] = t;
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x193c>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	496b      	ldr	r1, [pc, #428]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x1940>)
 8001dac:	0083      	lsls	r3, r0, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	601a      	str	r2, [r3, #0]
          dtheta1_res_SRAM[i_save] = dtheta1_res;
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x18f0>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4967      	ldr	r1, [pc, #412]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x1944>)
 8001dbe:	0083      	lsls	r3, r0, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	601a      	str	r2, [r3, #0]
          dtheta2_res_SRAM[i_save] = dtheta2_res;
 8001dc4:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x18f8>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4964      	ldr	r1, [pc, #400]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 8001dd0:	0083      	lsls	r3, r0, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	601a      	str	r2, [r3, #0]
          dtheta3_res_SRAM[i_save] = dtheta3_res;
 8001dd6:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x1900>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4960      	ldr	r1, [pc, #384]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8001de2:	0083      	lsls	r3, r0, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	601a      	str	r2, [r3, #0]
          dtheta4_res_SRAM[i_save] = dtheta4_res;
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x1908>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	495d      	ldr	r1, [pc, #372]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8001df4:	0083      	lsls	r3, r0, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	601a      	str	r2, [r3, #0]
          theta1_res_SRAM[i_save] = theta1_res;
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4959      	ldr	r1, [pc, #356]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x1954>)
 8001e06:	0083      	lsls	r3, r0, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	601a      	str	r2, [r3, #0]
          theta2_res_SRAM[i_save] = theta2_res;
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4956      	ldr	r1, [pc, #344]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8001e18:	0083      	lsls	r3, r0, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	601a      	str	r2, [r3, #0]
          theta3_res_SRAM[i_save] = theta3_res;
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x18e0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4952      	ldr	r1, [pc, #328]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x195c>)
 8001e2a:	0083      	lsls	r3, r0, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	601a      	str	r2, [r3, #0]
          theta4_res_SRAM[i_save] = theta4_res;
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x18e8>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	494f      	ldr	r1, [pc, #316]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x1960>)
 8001e3c:	0083      	lsls	r3, r0, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	601a      	str	r2, [r3, #0]
          ddtheta1_ref_SRAM[i_save] = ddtheta1_ref;
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	494c      	ldr	r1, [pc, #304]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x1968>)
 8001e4e:	0083      	lsls	r3, r0, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	601a      	str	r2, [r3, #0]
          ddtheta2_ref_SRAM[i_save] = ddtheta2_ref;
 8001e54:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x196c>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	494a      	ldr	r1, [pc, #296]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x1970>)
 8001e60:	0083      	lsls	r3, r0, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	601a      	str	r2, [r3, #0]
          ddtheta3_ref_SRAM[i_save] = ddtheta3_ref;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x1974>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4947      	ldr	r1, [pc, #284]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x1978>)
 8001e72:	0083      	lsls	r3, r0, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	601a      	str	r2, [r3, #0]
          ddtheta4_ref_SRAM[i_save] = ddtheta4_ref;
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x197c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4945      	ldr	r1, [pc, #276]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x1980>)
 8001e84:	0083      	lsls	r3, r0, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	601a      	str	r2, [r3, #0]
          i1_ref_SRAM[i_save] = i1_ref;
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x1984>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4942      	ldr	r1, [pc, #264]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x1988>)
 8001e96:	0083      	lsls	r3, r0, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	601a      	str	r2, [r3, #0]
          i2_ref_SRAM[i_save] = i2_ref;
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x198c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	e07f      	b.n	8001fa8 <HAL_TIM_PeriodElapsedCallback+0x1990>
 8001ea8:	bbf58d11 	.word	0xbbf58d11
 8001eac:	4071db6d 	.word	0x4071db6d
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	407f4000 	.word	0x407f4000
 8001eb8:	200002b0 	.word	0x200002b0
 8001ebc:	bfb33333 	.word	0xbfb33333
 8001ec0:	bfb33333 	.word	0xbfb33333
 8001ec4:	200002a4 	.word	0x200002a4
 8001ec8:	200002c4 	.word	0x200002c4
 8001ecc:	200002a8 	.word	0x200002a8
 8001ed0:	200002c6 	.word	0x200002c6
 8001ed4:	200002ac 	.word	0x200002ac
 8001ed8:	200002c8 	.word	0x200002c8
 8001edc:	200002ca 	.word	0x200002ca
 8001ee0:	20035db0 	.word	0x20035db0
 8001ee4:	20035e70 	.word	0x20035e70
 8001ee8:	20000234 	.word	0x20000234
 8001eec:	20000244 	.word	0x20000244
 8001ef0:	20000238 	.word	0x20000238
 8001ef4:	20000248 	.word	0x20000248
 8001ef8:	2000023c 	.word	0x2000023c
 8001efc:	2000024c 	.word	0x2000024c
 8001f00:	20000240 	.word	0x20000240
 8001f04:	20000250 	.word	0x20000250
 8001f08:	20000254 	.word	0x20000254
 8001f0c:	20000264 	.word	0x20000264
 8001f10:	20000258 	.word	0x20000258
 8001f14:	20000268 	.word	0x20000268
 8001f18:	2000025c 	.word	0x2000025c
 8001f1c:	2000026c 	.word	0x2000026c
 8001f20:	20000260 	.word	0x20000260
 8001f24:	20000270 	.word	0x20000270
 8001f28:	2000021c 	.word	0x2000021c
 8001f2c:	20000224 	.word	0x20000224
 8001f30:	2000021e 	.word	0x2000021e
 8001f34:	20000226 	.word	0x20000226
 8001f38:	20000220 	.word	0x20000220
 8001f3c:	20000228 	.word	0x20000228
 8001f40:	20000222 	.word	0x20000222
 8001f44:	2000022a 	.word	0x2000022a
 8001f48:	20000218 	.word	0x20000218
 8001f4c:	cccccccd 	.word	0xcccccccd
 8001f50:	20000378 	.word	0x20000378
 8001f54:	20000214 	.word	0x20000214
 8001f58:	20000380 	.word	0x20000380
 8001f5c:	20001960 	.word	0x20001960
 8001f60:	20002f40 	.word	0x20002f40
 8001f64:	20004520 	.word	0x20004520
 8001f68:	20005b00 	.word	0x20005b00
 8001f6c:	200070e0 	.word	0x200070e0
 8001f70:	200086c0 	.word	0x200086c0
 8001f74:	20009ca0 	.word	0x20009ca0
 8001f78:	2000b280 	.word	0x2000b280
 8001f7c:	20000284 	.word	0x20000284
 8001f80:	2000c860 	.word	0x2000c860
 8001f84:	20000288 	.word	0x20000288
 8001f88:	2000de40 	.word	0x2000de40
 8001f8c:	2000028c 	.word	0x2000028c
 8001f90:	2000f420 	.word	0x2000f420
 8001f94:	20000290 	.word	0x20000290
 8001f98:	20010a00 	.word	0x20010a00
 8001f9c:	20000294 	.word	0x20000294
 8001fa0:	20011fe0 	.word	0x20011fe0
 8001fa4:	20000298 	.word	0x20000298
 8001fa8:	4982      	ldr	r1, [pc, #520]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x1b9c>)
 8001faa:	0083      	lsls	r3, r0, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	601a      	str	r2, [r3, #0]
          i3_ref_SRAM[i_save] = i3_ref;
 8001fb0:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x1ba4>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4981      	ldr	r1, [pc, #516]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x1ba8>)
 8001fbc:	0083      	lsls	r3, r0, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	601a      	str	r2, [r3, #0]
          i4_ref_SRAM[i_save] = i4_ref;
 8001fc2:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x1bac>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	497e      	ldr	r1, [pc, #504]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x1bb0>)
 8001fce:	0083      	lsls	r3, r0, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	601a      	str	r2, [r3, #0]
          ia1_ref_SRAM[i_save] = ia1_ref;
 8001fd4:	4b78      	ldr	r3, [pc, #480]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x1bb4>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	497c      	ldr	r1, [pc, #496]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x1bb8>)
 8001fe0:	0083      	lsls	r3, r0, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	601a      	str	r2, [r3, #0]
          ia2_ref_SRAM[i_save] = ia2_ref;
 8001fe6:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x1bbc>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4979      	ldr	r1, [pc, #484]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x1bc0>)
 8001ff2:	0083      	lsls	r3, r0, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	601a      	str	r2, [r3, #0]
          ia3_ref_SRAM[i_save] = ia3_ref;
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4b77      	ldr	r3, [pc, #476]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x1bc4>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4977      	ldr	r1, [pc, #476]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x1bc8>)
 8002004:	0083      	lsls	r3, r0, #2
 8002006:	440b      	add	r3, r1
 8002008:	601a      	str	r2, [r3, #0]
          ia4_ref_SRAM[i_save] = ia4_ref;
 800200a:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x1bcc>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4974      	ldr	r1, [pc, #464]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x1bd0>)
 8002016:	0083      	lsls	r3, r0, #2
 8002018:	440b      	add	r3, r1
 800201a:	601a      	str	r2, [r3, #0]
          PWM1_SRAM[i_save] = PWM1;
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b72      	ldr	r3, [pc, #456]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x1bd4>)
 8002024:	8819      	ldrh	r1, [r3, #0]
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x1bd8>)
 8002028:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          PWM2_SRAM[i_save] = PWM2;
 800202c:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x1bdc>)
 8002034:	8819      	ldrh	r1, [r3, #0]
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x1be0>)
 8002038:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          PWM3_SRAM[i_save] = PWM3;
 800203c:	4b5e      	ldr	r3, [pc, #376]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x1be4>)
 8002044:	8819      	ldrh	r1, [r3, #0]
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1be8>)
 8002048:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          PWM4_SRAM[i_save] = PWM4;
 800204c:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x1bec>)
 8002054:	8819      	ldrh	r1, [r3, #0]
 8002056:	4b6c      	ldr	r3, [pc, #432]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x1bf0>)
 8002058:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          tau_dis1_raw_SRAM[i_save] = tau_dis1_raw;
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x1bf4>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	496a      	ldr	r1, [pc, #424]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x1bf8>)
 8002068:	0083      	lsls	r3, r0, #2
 800206a:	440b      	add	r3, r1
 800206c:	601a      	str	r2, [r3, #0]
          tau_dis2_raw_SRAM[i_save] = tau_dis2_raw;
 800206e:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x1bfc>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4967      	ldr	r1, [pc, #412]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x1c00>)
 800207a:	0083      	lsls	r3, r0, #2
 800207c:	440b      	add	r3, r1
 800207e:	601a      	str	r2, [r3, #0]
          tau_dis3_raw_SRAM[i_save] = tau_dis3_raw;
 8002080:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x1c04>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4965      	ldr	r1, [pc, #404]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x1c08>)
 800208c:	0083      	lsls	r3, r0, #2
 800208e:	440b      	add	r3, r1
 8002090:	601a      	str	r2, [r3, #0]
          tau_dis4_raw_SRAM[i_save] = tau_dis4_raw;
 8002092:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x1c0c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4962      	ldr	r1, [pc, #392]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x1c10>)
 800209e:	0083      	lsls	r3, r0, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	601a      	str	r2, [r3, #0]
          tau_dob1_SRAM[i_save] = tau_dob1;
 80020a4:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	4b60      	ldr	r3, [pc, #384]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c14>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4960      	ldr	r1, [pc, #384]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x1c18>)
 80020b0:	0083      	lsls	r3, r0, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	601a      	str	r2, [r3, #0]
          tau_dob2_SRAM[i_save] = tau_dob2;
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x1c1c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	495d      	ldr	r1, [pc, #372]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1c20>)
 80020c2:	0083      	lsls	r3, r0, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	601a      	str	r2, [r3, #0]
          tau_dob3_SRAM[i_save] = tau_dob3;
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1c24>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	495b      	ldr	r1, [pc, #364]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c28>)
 80020d4:	0083      	lsls	r3, r0, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	601a      	str	r2, [r3, #0]
          tau_dob4_SRAM[i_save] = tau_dob4;
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	4b58      	ldr	r3, [pc, #352]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1c2c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4958      	ldr	r1, [pc, #352]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c30>)
 80020e6:	0083      	lsls	r3, r0, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	601a      	str	r2, [r3, #0]
          i1_comp_SRAM[i_save] = i1_comp;
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1c34>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4956      	ldr	r1, [pc, #344]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1c38>)
 80020f8:	0083      	lsls	r3, r0, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	601a      	str	r2, [r3, #0]
          i2_comp_SRAM[i_save] = i2_comp;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1c3c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4953      	ldr	r1, [pc, #332]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1c40>)
 800210a:	0083      	lsls	r3, r0, #2
 800210c:	440b      	add	r3, r1
 800210e:	601a      	str	r2, [r3, #0]
          i3_comp_SRAM[i_save] = i3_comp;
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	4b51      	ldr	r3, [pc, #324]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1c44>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4951      	ldr	r1, [pc, #324]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1c48>)
 800211c:	0083      	lsls	r3, r0, #2
 800211e:	440b      	add	r3, r1
 8002120:	601a      	str	r2, [r3, #0]
          i4_comp_SRAM[i_save] = i4_comp;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1c4c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	494e      	ldr	r1, [pc, #312]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x1c50>)
 800212e:	0083      	lsls	r3, r0, #2
 8002130:	440b      	add	r3, r1
 8002132:	601a      	str	r2, [r3, #0]
          tau_dfob1_SRAM[i_save] = tau_dfob1;
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x1c54>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	494c      	ldr	r1, [pc, #304]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x1c58>)
 8002140:	0083      	lsls	r3, r0, #2
 8002142:	440b      	add	r3, r1
 8002144:	601a      	str	r2, [r3, #0]
          tau_dfob2_SRAM[i_save] = tau_dfob2;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x1c5c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4949      	ldr	r1, [pc, #292]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x1c60>)
 8002152:	0083      	lsls	r3, r0, #2
 8002154:	440b      	add	r3, r1
 8002156:	601a      	str	r2, [r3, #0]
          tau_dfob3_SRAM[i_save] = tau_dfob3;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x1c64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4947      	ldr	r1, [pc, #284]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x1c68>)
 8002164:	0083      	lsls	r3, r0, #2
 8002166:	440b      	add	r3, r1
 8002168:	601a      	str	r2, [r3, #0]
          tau_dfob4_SRAM[i_save] = tau_dfob4;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x1c6c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4944      	ldr	r1, [pc, #272]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x1c70>)
 8002176:	0083      	lsls	r3, r0, #2
 8002178:	440b      	add	r3, r1
 800217a:	601a      	str	r2, [r3, #0]
          i_save++;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1ba0>)
 8002186:	801a      	strh	r2, [r3, #0]
        loop = loop + 1;
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x1c74>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x1c74>)
 8002192:	801a      	strh	r2, [r3, #0]
        t = t + dt;
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c78>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002294 <HAL_TIM_PeriodElapsedCallback+0x1c7c>
 800219e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c78>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]
        break;
 80021a8:	e000      	b.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x1b94>
        break;
 80021aa:	bf00      	nop
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200135c0 	.word	0x200135c0
 80021b8:	20000378 	.word	0x20000378
 80021bc:	2000029c 	.word	0x2000029c
 80021c0:	20014ba0 	.word	0x20014ba0
 80021c4:	200002a0 	.word	0x200002a0
 80021c8:	20016180 	.word	0x20016180
 80021cc:	200002a4 	.word	0x200002a4
 80021d0:	20017760 	.word	0x20017760
 80021d4:	200002a8 	.word	0x200002a8
 80021d8:	20018d40 	.word	0x20018d40
 80021dc:	200002ac 	.word	0x200002ac
 80021e0:	2001a320 	.word	0x2001a320
 80021e4:	200002b0 	.word	0x200002b0
 80021e8:	2001b900 	.word	0x2001b900
 80021ec:	200002c4 	.word	0x200002c4
 80021f0:	2001cee0 	.word	0x2001cee0
 80021f4:	200002c6 	.word	0x200002c6
 80021f8:	2001d9d0 	.word	0x2001d9d0
 80021fc:	200002c8 	.word	0x200002c8
 8002200:	2001e4c0 	.word	0x2001e4c0
 8002204:	200002ca 	.word	0x200002ca
 8002208:	2001efb0 	.word	0x2001efb0
 800220c:	20000318 	.word	0x20000318
 8002210:	2001faa0 	.word	0x2001faa0
 8002214:	2000031c 	.word	0x2000031c
 8002218:	20021080 	.word	0x20021080
 800221c:	20000320 	.word	0x20000320
 8002220:	20022660 	.word	0x20022660
 8002224:	20000324 	.word	0x20000324
 8002228:	20023c40 	.word	0x20023c40
 800222c:	200002f8 	.word	0x200002f8
 8002230:	20025220 	.word	0x20025220
 8002234:	200002fc 	.word	0x200002fc
 8002238:	20026800 	.word	0x20026800
 800223c:	20000300 	.word	0x20000300
 8002240:	20027de0 	.word	0x20027de0
 8002244:	20000304 	.word	0x20000304
 8002248:	200293c0 	.word	0x200293c0
 800224c:	20000328 	.word	0x20000328
 8002250:	2002a9a0 	.word	0x2002a9a0
 8002254:	2000032c 	.word	0x2000032c
 8002258:	2002bf80 	.word	0x2002bf80
 800225c:	20000330 	.word	0x20000330
 8002260:	2002d560 	.word	0x2002d560
 8002264:	20000334 	.word	0x20000334
 8002268:	2002eb40 	.word	0x2002eb40
 800226c:	20000338 	.word	0x20000338
 8002270:	20030120 	.word	0x20030120
 8002274:	2000033c 	.word	0x2000033c
 8002278:	20031700 	.word	0x20031700
 800227c:	20000340 	.word	0x20000340
 8002280:	20032ce0 	.word	0x20032ce0
 8002284:	20000344 	.word	0x20000344
 8002288:	200342c0 	.word	0x200342c0
 800228c:	20000218 	.word	0x20000218
 8002290:	20000214 	.word	0x20000214
 8002294:	3a83126f 	.word	0x3a83126f

08002298 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a8:	f040 830a 	bne.w	80028c0 <HAL_GPIO_EXTI_Callback+0x628>
		// 	printf("EXTI Interrupt");
		// 	printf("%d, ", mode);
		// 	printf("\r\n");
		// }

		mode++;
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x150>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x150>)
 80022b6:	701a      	strb	r2, [r3, #0]
		printf("%d, ", mode);
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x150>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	484b      	ldr	r0, [pc, #300]	; (80023ec <HAL_GPIO_EXTI_Callback+0x154>)
 80022c0:	f005 febe 	bl	8008040 <iprintf>
		printf("\r\n");
 80022c4:	484a      	ldr	r0, [pc, #296]	; (80023f0 <HAL_GPIO_EXTI_Callback+0x158>)
 80022c6:	f005 ff2f 	bl	8008128 <puts>

    divide = mode % 3;
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x150>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	0859      	lsrs	r1, r3, #1
 80022d6:	460b      	mov	r3, r1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	440b      	add	r3, r1
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80022e2:	701a      	strb	r2, [r3, #0]

    switch(divide){
 80022e4:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d00f      	beq.n	800230c <HAL_GPIO_EXTI_Callback+0x74>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d018      	beq.n	8002322 <HAL_GPIO_EXTI_Callback+0x8a>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d127      	bne.n	8002344 <HAL_GPIO_EXTI_Callback+0xac>
      case 0:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022fa:	4840      	ldr	r0, [pc, #256]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 80022fc:	f001 fed6 	bl	80040ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8002300:	2201      	movs	r2, #1
 8002302:	2101      	movs	r1, #1
 8002304:	483d      	ldr	r0, [pc, #244]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 8002306:	f001 fed1 	bl	80040ac <HAL_GPIO_WritePin>
        break;
 800230a:	e01b      	b.n	8002344 <HAL_GPIO_EXTI_Callback+0xac>
      case 1:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	2101      	movs	r1, #1
 8002310:	483a      	ldr	r0, [pc, #232]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 8002312:	f001 fecb 	bl	80040ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_SET); // Blue
 8002316:	2201      	movs	r2, #1
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	4838      	ldr	r0, [pc, #224]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 800231c:	f001 fec6 	bl	80040ac <HAL_GPIO_WritePin>
        break;
 8002320:	e010      	b.n	8002344 <HAL_GPIO_EXTI_Callback+0xac>
      case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	4835      	ldr	r0, [pc, #212]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 8002328:	f001 fec0 	bl	80040ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	4832      	ldr	r0, [pc, #200]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 8002332:	f001 febb 	bl	80040ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// Red
 8002336:	2201      	movs	r2, #1
 8002338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800233c:	482f      	ldr	r0, [pc, #188]	; (80023fc <HAL_GPIO_EXTI_Callback+0x164>)
 800233e:	f001 feb5 	bl	80040ac <HAL_GPIO_WritePin>
        break;
 8002342:	bf00      	nop
    }

    switch(mode){
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x150>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_EXTI_Callback+0xbc>
 800234c:	2b02      	cmp	r3, #2
 800234e:	d022      	beq.n	8002396 <HAL_GPIO_EXTI_Callback+0xfe>
 8002350:	2b00      	cmp	r3, #0
      case 0:
        // printf("0, %d, ", mode);
        // printf("\r\n");
        break;
 8002352:	e2b5      	b.n	80028c0 <HAL_GPIO_EXTI_Callback+0x628>
      case 1:
        // printf("1, %d, ", mode);
        // printf("\r\n");

        tau_dfob1 = 0.0;
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_GPIO_EXTI_Callback+0x168>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
        tau_dfob2 = 0.0;
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_GPIO_EXTI_Callback+0x16c>)
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
        tau_dfob3 = 0.0;
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_GPIO_EXTI_Callback+0x170>)
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
        tau_dfob4 = 0.0;
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_GPIO_EXTI_Callback+0x174>)
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        tau_dfob1_pre = 0.0;
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_GPIO_EXTI_Callback+0x178>)
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_GPIO_EXTI_Callback+0x178>)
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 8002384:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_GPIO_EXTI_Callback+0x178>)
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
        tau_dfob1_pre = 0.0;
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_GPIO_EXTI_Callback+0x178>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        break;
 8002394:	e294      	b.n	80028c0 <HAL_GPIO_EXTI_Callback+0x628>
      // }
      // outputfile = fopen("C:\\Users\\TATSUMI\\STM32CubeIDE\\workspace_1.4.0\\1109_4.txt", "w");
      // fprintf(outputfile, "abc");
      // fclose(outputfile);

        PWM1 = 0.5*PWM_rsl;// Stop motor
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002398:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800239c:	801a      	strh	r2, [r3, #0]
        PWM2 = 0.5*PWM_rsl;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_GPIO_EXTI_Callback+0x180>)
 80023a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023a4:	801a      	strh	r2, [r3, #0]
        PWM3 = 0.5*PWM_rsl;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_GPIO_EXTI_Callback+0x184>)
 80023a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023ac:	801a      	strh	r2, [r3, #0]
        PWM4 = 0.5*PWM_rsl;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_GPIO_EXTI_Callback+0x188>)
 80023b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023b4:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM1);
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_GPIO_EXTI_Callback+0x17c>)
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_GPIO_EXTI_Callback+0x18c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, PWM2);
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_GPIO_EXTI_Callback+0x180>)
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_GPIO_EXTI_Callback+0x18c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, PWM3);
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_GPIO_EXTI_Callback+0x184>)
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_GPIO_EXTI_Callback+0x190>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, PWM4);
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_GPIO_EXTI_Callback+0x188>)
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_GPIO_EXTI_Callback+0x190>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38

        for( i_output=0; i_output<N_SRAM; i_output++ ){
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_GPIO_EXTI_Callback+0x194>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e265      	b.n	80028b2 <HAL_GPIO_EXTI_Callback+0x61a>
 80023e6:	bf00      	nop
 80023e8:	2000021a 	.word	0x2000021a
 80023ec:	08009de0 	.word	0x08009de0
 80023f0:	08009de8 	.word	0x08009de8
 80023f4:	aaaaaaab 	.word	0xaaaaaaab
 80023f8:	2000021b 	.word	0x2000021b
 80023fc:	40020400 	.word	0x40020400
 8002400:	20000338 	.word	0x20000338
 8002404:	2000033c 	.word	0x2000033c
 8002408:	20000340 	.word	0x20000340
 800240c:	20000344 	.word	0x20000344
 8002410:	20000348 	.word	0x20000348
 8002414:	200002c4 	.word	0x200002c4
 8002418:	200002c6 	.word	0x200002c6
 800241c:	200002c8 	.word	0x200002c8
 8002420:	200002ca 	.word	0x200002ca
 8002424:	20035db0 	.word	0x20035db0
 8002428:	20035e70 	.word	0x20035e70
 800242c:	2000037c 	.word	0x2000037c
          printf("%d, ", i_output);
 8002430:	4bc2      	ldr	r3, [pc, #776]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	48c2      	ldr	r0, [pc, #776]	; (8002740 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002438:	f005 fe02 	bl	8008040 <iprintf>

          printf("%f, ", t_SRAM[i_output]);
 800243c:	4bbf      	ldr	r3, [pc, #764]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4ac0      	ldr	r2, [pc, #768]	; (8002744 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800244e:	ec53 2b17 	vmov	r2, r3, d7
 8002452:	48bd      	ldr	r0, [pc, #756]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002454:	f005 fdf4 	bl	8008040 <iprintf>

          printf("%f, ", dtheta1_res_SRAM[i_output]);
 8002458:	4bb8      	ldr	r3, [pc, #736]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4abb      	ldr	r2, [pc, #748]	; (800274c <HAL_GPIO_EXTI_Callback+0x4b4>)
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800246a:	ec53 2b17 	vmov	r2, r3, d7
 800246e:	48b6      	ldr	r0, [pc, #728]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002470:	f005 fde6 	bl	8008040 <iprintf>
          printf("%f, ", dtheta2_res_SRAM[i_output]);
 8002474:	4bb1      	ldr	r3, [pc, #708]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4ab5      	ldr	r2, [pc, #724]	; (8002750 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002486:	ec53 2b17 	vmov	r2, r3, d7
 800248a:	48af      	ldr	r0, [pc, #700]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800248c:	f005 fdd8 	bl	8008040 <iprintf>
          printf("%f, ", dtheta3_res_SRAM[i_output]);
 8002490:	4baa      	ldr	r3, [pc, #680]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4aaf      	ldr	r2, [pc, #700]	; (8002754 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a2:	ec53 2b17 	vmov	r2, r3, d7
 80024a6:	48a8      	ldr	r0, [pc, #672]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024a8:	f005 fdca 	bl	8008040 <iprintf>
          printf("%f, ", dtheta4_res_SRAM[i_output]);
 80024ac:	4ba3      	ldr	r3, [pc, #652]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4aa9      	ldr	r2, [pc, #676]	; (8002758 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024be:	ec53 2b17 	vmov	r2, r3, d7
 80024c2:	48a1      	ldr	r0, [pc, #644]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024c4:	f005 fdbc 	bl	8008040 <iprintf>

          printf("%f, ", theta1_res_SRAM[i_output]);
 80024c8:	4b9c      	ldr	r3, [pc, #624]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4aa3      	ldr	r2, [pc, #652]	; (800275c <HAL_GPIO_EXTI_Callback+0x4c4>)
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024da:	ec53 2b17 	vmov	r2, r3, d7
 80024de:	489a      	ldr	r0, [pc, #616]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024e0:	f005 fdae 	bl	8008040 <iprintf>
          printf("%f, ", theta2_res_SRAM[i_output]);
 80024e4:	4b95      	ldr	r3, [pc, #596]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a9d      	ldr	r2, [pc, #628]	; (8002760 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f6:	ec53 2b17 	vmov	r2, r3, d7
 80024fa:	4893      	ldr	r0, [pc, #588]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80024fc:	f005 fda0 	bl	8008040 <iprintf>
          printf("%f, ", theta3_res_SRAM[i_output]);
 8002500:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a97      	ldr	r2, [pc, #604]	; (8002764 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002512:	ec53 2b17 	vmov	r2, r3, d7
 8002516:	488c      	ldr	r0, [pc, #560]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002518:	f005 fd92 	bl	8008040 <iprintf>
          printf("%f, ", theta4_res_SRAM[i_output]);
 800251c:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a91      	ldr	r2, [pc, #580]	; (8002768 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800252e:	ec53 2b17 	vmov	r2, r3, d7
 8002532:	4885      	ldr	r0, [pc, #532]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002534:	f005 fd84 	bl	8008040 <iprintf>

          printf("%f, ", ddtheta1_ref_SRAM[i_output]);
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a8b      	ldr	r2, [pc, #556]	; (800276c <HAL_GPIO_EXTI_Callback+0x4d4>)
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800254a:	ec53 2b17 	vmov	r2, r3, d7
 800254e:	487e      	ldr	r0, [pc, #504]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002550:	f005 fd76 	bl	8008040 <iprintf>
          printf("%f, ", ddtheta2_ref_SRAM[i_output]);
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a85      	ldr	r2, [pc, #532]	; (8002770 <HAL_GPIO_EXTI_Callback+0x4d8>)
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002566:	ec53 2b17 	vmov	r2, r3, d7
 800256a:	4877      	ldr	r0, [pc, #476]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800256c:	f005 fd68 	bl	8008040 <iprintf>
          printf("%f, ", ddtheta3_ref_SRAM[i_output]);
 8002570:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7f      	ldr	r2, [pc, #508]	; (8002774 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002582:	ec53 2b17 	vmov	r2, r3, d7
 8002586:	4870      	ldr	r0, [pc, #448]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002588:	f005 fd5a 	bl	8008040 <iprintf>
          printf("%f, ", ddtheta4_ref_SRAM[i_output]);
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a79      	ldr	r2, [pc, #484]	; (8002778 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800259e:	ec53 2b17 	vmov	r2, r3, d7
 80025a2:	4869      	ldr	r0, [pc, #420]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025a4:	f005 fd4c 	bl	8008040 <iprintf>

          printf("%f, ", i1_ref_SRAM[i_output]);
 80025a8:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a73      	ldr	r2, [pc, #460]	; (800277c <HAL_GPIO_EXTI_Callback+0x4e4>)
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ba:	ec53 2b17 	vmov	r2, r3, d7
 80025be:	4862      	ldr	r0, [pc, #392]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025c0:	f005 fd3e 	bl	8008040 <iprintf>
          printf("%f, ", i2_ref_SRAM[i_output]);
 80025c4:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6d      	ldr	r2, [pc, #436]	; (8002780 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025d6:	ec53 2b17 	vmov	r2, r3, d7
 80025da:	485b      	ldr	r0, [pc, #364]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025dc:	f005 fd30 	bl	8008040 <iprintf>
          printf("%f, ", i3_ref_SRAM[i_output]);
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025f2:	ec53 2b17 	vmov	r2, r3, d7
 80025f6:	4854      	ldr	r0, [pc, #336]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80025f8:	f005 fd22 	bl	8008040 <iprintf>
          printf("%f, ", i4_ref_SRAM[i_output]);
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800260e:	ec53 2b17 	vmov	r2, r3, d7
 8002612:	484d      	ldr	r0, [pc, #308]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002614:	f005 fd14 	bl	8008040 <iprintf>

          printf("%f, ", ia1_ref_SRAM[i_output]);
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5b      	ldr	r2, [pc, #364]	; (800278c <HAL_GPIO_EXTI_Callback+0x4f4>)
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800262a:	ec53 2b17 	vmov	r2, r3, d7
 800262e:	4846      	ldr	r0, [pc, #280]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002630:	f005 fd06 	bl	8008040 <iprintf>
          printf("%f, ", ia2_ref_SRAM[i_output]);
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a55      	ldr	r2, [pc, #340]	; (8002790 <HAL_GPIO_EXTI_Callback+0x4f8>)
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002646:	ec53 2b17 	vmov	r2, r3, d7
 800264a:	483f      	ldr	r0, [pc, #252]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 800264c:	f005 fcf8 	bl	8008040 <iprintf>
          printf("%f, ", ia3_ref_SRAM[i_output]);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002662:	ec53 2b17 	vmov	r2, r3, d7
 8002666:	4838      	ldr	r0, [pc, #224]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002668:	f005 fcea 	bl	8008040 <iprintf>
          printf("%f, ", ia4_ref_SRAM[i_output]);
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a49      	ldr	r2, [pc, #292]	; (8002798 <HAL_GPIO_EXTI_Callback+0x500>)
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267e:	ec53 2b17 	vmov	r2, r3, d7
 8002682:	4831      	ldr	r0, [pc, #196]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002684:	f005 fcdc 	bl	8008040 <iprintf>

          printf("%d, ", PWM1_SRAM[i_output]);
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_GPIO_EXTI_Callback+0x504>)
 800268e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002692:	4619      	mov	r1, r3
 8002694:	482a      	ldr	r0, [pc, #168]	; (8002740 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8002696:	f005 fcd3 	bl	8008040 <iprintf>
          printf("%d, ", PWM2_SRAM[i_output]);
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a40      	ldr	r2, [pc, #256]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x508>)
 80026a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4826      	ldr	r0, [pc, #152]	; (8002740 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80026a8:	f005 fcca 	bl	8008040 <iprintf>
          printf("%d, ", PWM3_SRAM[i_output]);
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3c      	ldr	r2, [pc, #240]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x50c>)
 80026b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4821      	ldr	r0, [pc, #132]	; (8002740 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80026ba:	f005 fcc1 	bl	8008040 <iprintf>
          printf("%d, ", PWM4_SRAM[i_output]);
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x510>)
 80026c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026c8:	4619      	mov	r1, r3
 80026ca:	481d      	ldr	r0, [pc, #116]	; (8002740 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80026cc:	f005 fcb8 	bl	8008040 <iprintf>

          printf("%f, ", tau_dis1_raw_SRAM[i_output]);
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a35      	ldr	r2, [pc, #212]	; (80027ac <HAL_GPIO_EXTI_Callback+0x514>)
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026e2:	ec53 2b17 	vmov	r2, r3, d7
 80026e6:	4818      	ldr	r0, [pc, #96]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80026e8:	f005 fcaa 	bl	8008040 <iprintf>
          printf("%f, ", tau_dis2_raw_SRAM[i_output]);
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <HAL_GPIO_EXTI_Callback+0x518>)
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026fe:	ec53 2b17 	vmov	r2, r3, d7
 8002702:	4811      	ldr	r0, [pc, #68]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002704:	f005 fc9c 	bl	8008040 <iprintf>
          printf("%f, ", tau_dis3_raw_SRAM[i_output]);
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x51c>)
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800271a:	ec53 2b17 	vmov	r2, r3, d7
 800271e:	480a      	ldr	r0, [pc, #40]	; (8002748 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8002720:	f005 fc8e 	bl	8008040 <iprintf>
          printf("%f, ", tau_dis4_raw_SRAM[i_output]);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_GPIO_EXTI_Callback+0x520>)
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002736:	ec53 2b17 	vmov	r2, r3, d7
 800273a:	e03f      	b.n	80027bc <HAL_GPIO_EXTI_Callback+0x524>
 800273c:	2000037c 	.word	0x2000037c
 8002740:	08009de0 	.word	0x08009de0
 8002744:	20000380 	.word	0x20000380
 8002748:	08009dec 	.word	0x08009dec
 800274c:	20001960 	.word	0x20001960
 8002750:	20002f40 	.word	0x20002f40
 8002754:	20004520 	.word	0x20004520
 8002758:	20005b00 	.word	0x20005b00
 800275c:	200070e0 	.word	0x200070e0
 8002760:	200086c0 	.word	0x200086c0
 8002764:	20009ca0 	.word	0x20009ca0
 8002768:	2000b280 	.word	0x2000b280
 800276c:	2000c860 	.word	0x2000c860
 8002770:	2000de40 	.word	0x2000de40
 8002774:	2000f420 	.word	0x2000f420
 8002778:	20010a00 	.word	0x20010a00
 800277c:	20011fe0 	.word	0x20011fe0
 8002780:	200135c0 	.word	0x200135c0
 8002784:	20014ba0 	.word	0x20014ba0
 8002788:	20016180 	.word	0x20016180
 800278c:	20017760 	.word	0x20017760
 8002790:	20018d40 	.word	0x20018d40
 8002794:	2001a320 	.word	0x2001a320
 8002798:	2001b900 	.word	0x2001b900
 800279c:	2001cee0 	.word	0x2001cee0
 80027a0:	2001d9d0 	.word	0x2001d9d0
 80027a4:	2001e4c0 	.word	0x2001e4c0
 80027a8:	2001efb0 	.word	0x2001efb0
 80027ac:	2001faa0 	.word	0x2001faa0
 80027b0:	20021080 	.word	0x20021080
 80027b4:	20022660 	.word	0x20022660
 80027b8:	20023c40 	.word	0x20023c40
 80027bc:	4842      	ldr	r0, [pc, #264]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 80027be:	f005 fc3f 	bl	8008040 <iprintf>

          printf("%f, ", tau_dob1_SRAM[i_output]);
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a42      	ldr	r2, [pc, #264]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x638>)
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027d4:	ec53 2b17 	vmov	r2, r3, d7
 80027d8:	483b      	ldr	r0, [pc, #236]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 80027da:	f005 fc31 	bl	8008040 <iprintf>
          printf("%f, ", tau_dob2_SRAM[i_output]);
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x63c>)
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027f0:	ec53 2b17 	vmov	r2, r3, d7
 80027f4:	4834      	ldr	r0, [pc, #208]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 80027f6:	f005 fc23 	bl	8008040 <iprintf>
          printf("%f, ", tau_dob3_SRAM[i_output]);
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x640>)
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800280c:	ec53 2b17 	vmov	r2, r3, d7
 8002810:	482d      	ldr	r0, [pc, #180]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 8002812:	f005 fc15 	bl	8008040 <iprintf>
          printf("%f, ", tau_dob4_SRAM[i_output]);
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a30      	ldr	r2, [pc, #192]	; (80028dc <HAL_GPIO_EXTI_Callback+0x644>)
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002828:	ec53 2b17 	vmov	r2, r3, d7
 800282c:	4826      	ldr	r0, [pc, #152]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 800282e:	f005 fc07 	bl	8008040 <iprintf>

          printf("%f, ", tau_dfob1_SRAM[i_output]);
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x648>)
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002844:	ec53 2b17 	vmov	r2, r3, d7
 8002848:	481f      	ldr	r0, [pc, #124]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 800284a:	f005 fbf9 	bl	8008040 <iprintf>
          printf("%f, ", tau_dfob2_SRAM[i_output]);
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x64c>)
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002860:	ec53 2b17 	vmov	r2, r3, d7
 8002864:	4818      	ldr	r0, [pc, #96]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 8002866:	f005 fbeb 	bl	8008040 <iprintf>
          printf("%f, ", tau_dfob3_SRAM[i_output]);
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_GPIO_EXTI_Callback+0x650>)
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287c:	ec53 2b17 	vmov	r2, r3, d7
 8002880:	4811      	ldr	r0, [pc, #68]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 8002882:	f005 fbdd 	bl	8008040 <iprintf>
          printf("%f, ", tau_dfob4_SRAM[i_output]);
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_GPIO_EXTI_Callback+0x654>)
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002898:	ec53 2b17 	vmov	r2, r3, d7
 800289c:	480a      	ldr	r0, [pc, #40]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x630>)
 800289e:	f005 fbcf 	bl	8008040 <iprintf>

          printf("\r\n");
 80028a2:	4813      	ldr	r0, [pc, #76]	; (80028f0 <HAL_GPIO_EXTI_Callback+0x658>)
 80028a4:	f005 fc40 	bl	8008128 <puts>
        for( i_output=0; i_output<N_SRAM; i_output++ ){
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_GPIO_EXTI_Callback+0x634>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80028ba:	f6ff adb9 	blt.w	8002430 <HAL_GPIO_EXTI_Callback+0x198>
        }
        break;
 80028be:	bf00      	nop
    }


	}
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	08009dec 	.word	0x08009dec
 80028cc:	2000037c 	.word	0x2000037c
 80028d0:	20025220 	.word	0x20025220
 80028d4:	20026800 	.word	0x20026800
 80028d8:	20027de0 	.word	0x20027de0
 80028dc:	200293c0 	.word	0x200293c0
 80028e0:	20030120 	.word	0x20030120
 80028e4:	20031700 	.word	0x20031700
 80028e8:	20032ce0 	.word	0x20032ce0
 80028ec:	200342c0 	.word	0x200342c0
 80028f0:	08009de8 	.word	0x08009de8

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f8:	f001 f89d 	bl	8003a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fc:	f000 f86c 	bl	80029d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002900:	f000 fbfc 	bl	80030fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002904:	f000 fb9c 	bl	8003040 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002908:	f000 fbca 	bl	80030a0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800290c:	f000 f954 	bl	8002bb8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002910:	f000 f8f8 	bl	8002b04 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002914:	f000 f99e 	bl	8002c54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002918:	f000 f9f2 	bl	8002d00 <MX_TIM4_Init>
  MX_TIM8_Init();
 800291c:	f000 fac8 	bl	8002eb0 <MX_TIM8_Init>
  MX_TIM5_Init();
 8002920:	f000 fa44 	bl	8002dac <MX_TIM5_Init>
  MX_TIM9_Init();
 8002924:	f000 fb1e 	bl	8002f64 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002928:	481e      	ldr	r0, [pc, #120]	; (80029a4 <main+0xb0>)
 800292a:	f002 fe91 	bl	8005650 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800292e:	213c      	movs	r1, #60	; 0x3c
 8002930:	481d      	ldr	r0, [pc, #116]	; (80029a8 <main+0xb4>)
 8002932:	f002 ffc3 	bl	80058bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002936:	213c      	movs	r1, #60	; 0x3c
 8002938:	481c      	ldr	r0, [pc, #112]	; (80029ac <main+0xb8>)
 800293a:	f002 ffbf 	bl	80058bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800293e:	213c      	movs	r1, #60	; 0x3c
 8002940:	481b      	ldr	r0, [pc, #108]	; (80029b0 <main+0xbc>)
 8002942:	f002 ffbb 	bl	80058bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002946:	213c      	movs	r1, #60	; 0x3c
 8002948:	481a      	ldr	r0, [pc, #104]	; (80029b4 <main+0xc0>)
 800294a:	f002 ffb7 	bl	80058bc <HAL_TIM_Encoder_Start>

  TIM1->CNT = cnt_offset;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <main+0xc4>)
 8002950:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <main+0xc8>)
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = cnt_offset;
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <main+0xc4>)
 800295a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <main+0xcc>)
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = cnt_offset;
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <main+0xc4>)
 8002964:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <main+0xd0>)
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = cnt_offset;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <main+0xc4>)
 800296e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <main+0xd4>)
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002976:	2100      	movs	r1, #0
 8002978:	4814      	ldr	r0, [pc, #80]	; (80029cc <main+0xd8>)
 800297a:	f002 fec9 	bl	8005710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800297e:	210c      	movs	r1, #12
 8002980:	4812      	ldr	r0, [pc, #72]	; (80029cc <main+0xd8>)
 8002982:	f002 fec5 	bl	8005710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002986:	2100      	movs	r1, #0
 8002988:	4811      	ldr	r0, [pc, #68]	; (80029d0 <main+0xdc>)
 800298a:	f002 fec1 	bl	8005710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800298e:	2104      	movs	r1, #4
 8002990:	480f      	ldr	r0, [pc, #60]	; (80029d0 <main+0xdc>)
 8002992:	f002 febd 	bl	8005710 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET); // Green
 8002996:	2201      	movs	r2, #1
 8002998:	2101      	movs	r1, #1
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <main+0xe0>)
 800299c:	f001 fb86 	bl	80040ac <HAL_GPIO_WritePin>
//  printf("\r\n initialized Success!!\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <main+0xac>
 80029a2:	bf00      	nop
 80029a4:	20035eb0 	.word	0x20035eb0
 80029a8:	20035e30 	.word	0x20035e30
 80029ac:	20035df0 	.word	0x20035df0
 80029b0:	200358ec 	.word	0x200358ec
 80029b4:	200358ac 	.word	0x200358ac
 80029b8:	20000000 	.word	0x20000000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800
 80029c8:	40010400 	.word	0x40010400
 80029cc:	20035db0 	.word	0x20035db0
 80029d0:	20035e70 	.word	0x20035e70
 80029d4:	40020400 	.word	0x40020400

080029d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b0b8      	sub	sp, #224	; 0xe0
 80029dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029e2:	2234      	movs	r2, #52	; 0x34
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 fee8 	bl	80077bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	2290      	movs	r2, #144	; 0x90
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fed9 	bl	80077bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a0a:	f001 fcc9 	bl	80043a0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <SystemClock_Config+0x120>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <SystemClock_Config+0x120>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <SystemClock_Config+0x120>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a26:	4b35      	ldr	r3, [pc, #212]	; (8002afc <SystemClock_Config+0x124>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <SystemClock_Config+0x124>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <SystemClock_Config+0x124>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a50:	2302      	movs	r3, #2
 8002a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002a64:	2360      	movs	r3, #96	; 0x60
 8002a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a70:	2304      	movs	r3, #4
 8002a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 fcf0 	bl	8004460 <HAL_RCC_OscConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002a86:	f000 fc43 	bl	8003310 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a8a:	f001 fc99 	bl	80043c0 <HAL_PWREx_EnableOverDrive>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a94:	f000 fc3c 	bl	8003310 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a98:	230f      	movs	r3, #15
 8002a9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ab8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002abc:	2103      	movs	r1, #3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 ff7c 	bl	80049bc <HAL_RCC_ClockConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002aca:	f000 fc21 	bl	8003310 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <SystemClock_Config+0x128>)
 8002ad0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 f963 	bl	8004dac <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8002aec:	f000 fc10 	bl	8003310 <Error_Handler>
  }
}
 8002af0:	bf00      	nop
 8002af2:	37e0      	adds	r7, #224	; 0xe0
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	00200100 	.word	0x00200100

08002b04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	; 0x30
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fe52 	bl	80077bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <MX_TIM1_Init+0xb0>)
 8002b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b56:	2301      	movs	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b66:	2301      	movs	r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4619      	mov	r1, r3
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b7a:	f002 fe0d 	bl	8005798 <HAL_TIM_Encoder_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002b84:	f000 fbc4 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b94:	463b      	mov	r3, r7
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_TIM1_Init+0xac>)
 8002b9a:	f003 fd9d 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002ba4:	f000 fbb4 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3730      	adds	r7, #48	; 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20035e30 	.word	0x20035e30
 8002bb4:	40010000 	.word	0x40010000

08002bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002be0:	225f      	movs	r2, #95	; 0x5f
 8002be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bfe:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002c00:	f002 fcfa 	bl	80055f8 <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c0a:	f000 fb81 	bl	8003310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480d      	ldr	r0, [pc, #52]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002c1c:	f003 f8bc 	bl	8005d98 <HAL_TIM_ConfigClockSource>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c26:	f000 fb73 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <MX_TIM2_Init+0x98>)
 8002c38:	f003 fd4e 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c42:	f000 fb65 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20035eb0 	.word	0x20035eb0

08002c54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fdaa 	bl	80077bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <MX_TIM3_Init+0xa8>)
 8002c76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002cc4:	f002 fd68 	bl	8005798 <HAL_TIM_Encoder_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002cce:	f000 fb1f 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cda:	463b      	mov	r3, r7
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_TIM3_Init+0xa4>)
 8002ce0:	f003 fcfa 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002cea:	f000 fb11 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20035df0 	.word	0x20035df0
 8002cfc:	40000400 	.word	0x40000400

08002d00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 fd54 	bl	80077bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	463b      	mov	r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <MX_TIM4_Init+0xa8>)
 8002d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d44:	2303      	movs	r3, #3
 8002d46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480d      	ldr	r0, [pc, #52]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d70:	f002 fd12 	bl	8005798 <HAL_TIM_Encoder_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002d7a:	f000 fac9 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d86:	463b      	mov	r3, r7
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4806      	ldr	r0, [pc, #24]	; (8002da4 <MX_TIM4_Init+0xa4>)
 8002d8c:	f003 fca4 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002d96:	f000 fabb 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d9a:	bf00      	nop
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200358ec 	.word	0x200358ec
 8002da8:	40000800 	.word	0x40000800

08002dac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	; 0x38
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dde:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002de0:	4a32      	ldr	r2, [pc, #200]	; (8002eac <MX_TIM5_Init+0x100>)
 8002de2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40-1;
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002de6:	2227      	movs	r2, #39	; 0x27
 8002de8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e04:	4828      	ldr	r0, [pc, #160]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e06:	f002 fbf7 	bl	80055f8 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002e10:	f000 fa7e 	bl	8003310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4821      	ldr	r0, [pc, #132]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e22:	f002 ffb9 	bl	8005d98 <HAL_TIM_ConfigClockSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002e2c:	f000 fa70 	bl	8003310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e30:	481d      	ldr	r0, [pc, #116]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e32:	f002 fc37 	bl	80056a4 <HAL_TIM_PWM_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002e3c:	f000 fa68 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4816      	ldr	r0, [pc, #88]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e50:	f003 fc42 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e5a:	f000 fa59 	bl	8003310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5e:	2360      	movs	r3, #96	; 0x60
 8002e60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6e:	463b      	mov	r3, r7
 8002e70:	2200      	movs	r2, #0
 8002e72:	4619      	mov	r1, r3
 8002e74:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e76:	f002 fe77 	bl	8005b68 <HAL_TIM_PWM_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002e80:	f000 fa46 	bl	8003310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	220c      	movs	r2, #12
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e8c:	f002 fe6c 	bl	8005b68 <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002e96:	f000 fa3b 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <MX_TIM5_Init+0xfc>)
 8002e9c:	f000 fbaa 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20035db0 	.word	0x20035db0
 8002eac:	40000c00 	.word	0x40000c00

08002eb0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fc7c 	bl	80077bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <MX_TIM8_Init+0xb0>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002efa:	2303      	movs	r3, #3
 8002efc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002f1e:	f107 030c 	add.w	r3, r7, #12
 8002f22:	4619      	mov	r1, r3
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002f26:	f002 fc37 	bl	8005798 <HAL_TIM_Encoder_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002f30:	f000 f9ee 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f40:	463b      	mov	r3, r7
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MX_TIM8_Init+0xac>)
 8002f46:	f003 fbc7 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002f50:	f000 f9de 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	3730      	adds	r7, #48	; 0x30
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	200358ac 	.word	0x200358ac
 8002f60:	40010400 	.word	0x40010400

08002f64 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	; 0x30
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0320 	add.w	r3, r7, #32
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	611a      	str	r2, [r3, #16]
 8002f86:	615a      	str	r2, [r3, #20]
 8002f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	; (800303c <MX_TIM9_Init+0xd8>)
 8002f8e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 40-1;
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002f92:	2227      	movs	r2, #39	; 0x27
 8002f94:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002f9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fa2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002fb0:	4821      	ldr	r0, [pc, #132]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002fb2:	f002 fb21 	bl	80055f8 <HAL_TIM_Base_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002fbc:	f000 f9a8 	bl	8003310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002fc6:	f107 0320 	add.w	r3, r7, #32
 8002fca:	4619      	mov	r1, r3
 8002fcc:	481a      	ldr	r0, [pc, #104]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002fce:	f002 fee3 	bl	8005d98 <HAL_TIM_ConfigClockSource>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002fd8:	f000 f99a 	bl	8003310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002fdc:	4816      	ldr	r0, [pc, #88]	; (8003038 <MX_TIM9_Init+0xd4>)
 8002fde:	f002 fb61 	bl	80056a4 <HAL_TIM_PWM_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002fe8:	f000 f992 	bl	8003310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fec:	2360      	movs	r3, #96	; 0x60
 8002fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	2200      	movs	r2, #0
 8003000:	4619      	mov	r1, r3
 8003002:	480d      	ldr	r0, [pc, #52]	; (8003038 <MX_TIM9_Init+0xd4>)
 8003004:	f002 fdb0 	bl	8005b68 <HAL_TIM_PWM_ConfigChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800300e:	f000 f97f 	bl	8003310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2204      	movs	r2, #4
 8003016:	4619      	mov	r1, r3
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <MX_TIM9_Init+0xd4>)
 800301a:	f002 fda5 	bl	8005b68 <HAL_TIM_PWM_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003024:	f000 f974 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <MX_TIM9_Init+0xd4>)
 800302a:	f000 fae3 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 800302e:	bf00      	nop
 8003030:	3730      	adds	r7, #48	; 0x30
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20035e70 	.word	0x20035e70
 800303c:	40014000 	.word	0x40014000

08003040 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <MX_USART3_UART_Init+0x5c>)
 8003048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <MX_USART3_UART_Init+0x58>)
 800304c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <MX_USART3_UART_Init+0x58>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003066:	2208      	movs	r2, #8
 8003068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_USART3_UART_Init+0x58>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_USART3_UART_Init+0x58>)
 800307e:	2200      	movs	r2, #0
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_USART3_UART_Init+0x58>)
 8003084:	f003 fbd4 	bl	8006830 <HAL_UART_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800308e:	f000 f93f 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2003592c 	.word	0x2003592c
 800309c:	40004800 	.word	0x40004800

080030a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80030aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ae:	2206      	movs	r2, #6
 80030b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030b4:	2202      	movs	r2, #2
 80030b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030c0:	2202      	movs	r2, #2
 80030c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030d8:	2201      	movs	r2, #1
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80030e2:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030e4:	f001 f814 	bl	8004110 <HAL_PCD_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80030ee:	f000 f90f 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200359ac 	.word	0x200359ac

080030fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003112:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a77      	ldr	r2, [pc, #476]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003118:	f043 0310 	orr.w	r3, r3, #16
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b75      	ldr	r3, [pc, #468]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800312a:	4b72      	ldr	r3, [pc, #456]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a71      	ldr	r2, [pc, #452]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a6b      	ldr	r2, [pc, #428]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b69      	ldr	r3, [pc, #420]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a65      	ldr	r2, [pc, #404]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a59      	ldr	r2, [pc, #356]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 80031a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <MX_GPIO_Init+0x1f8>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80031ba:	2200      	movs	r2, #0
 80031bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80031c0:	484d      	ldr	r0, [pc, #308]	; (80032f8 <MX_GPIO_Init+0x1fc>)
 80031c2:	f000 ff73 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	484c      	ldr	r0, [pc, #304]	; (80032fc <MX_GPIO_Init+0x200>)
 80031cc:	f000 ff6e 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80031d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031d6:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <MX_GPIO_Init+0x204>)
 80031d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	4619      	mov	r1, r3
 80031e4:	4847      	ldr	r0, [pc, #284]	; (8003304 <MX_GPIO_Init+0x208>)
 80031e6:	f000 fdb7 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80031ea:	2332      	movs	r3, #50	; 0x32
 80031ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031fa:	230b      	movs	r3, #11
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fe:	f107 031c 	add.w	r3, r7, #28
 8003202:	4619      	mov	r1, r3
 8003204:	483f      	ldr	r0, [pc, #252]	; (8003304 <MX_GPIO_Init+0x208>)
 8003206:	f000 fda7 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800320a:	2386      	movs	r3, #134	; 0x86
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800321a:	230b      	movs	r3, #11
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	4619      	mov	r1, r3
 8003224:	4838      	ldr	r0, [pc, #224]	; (8003308 <MX_GPIO_Init+0x20c>)
 8003226:	f000 fd97 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800322a:	f244 0381 	movw	r3, #16513	; 0x4081
 800322e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003230:	2301      	movs	r3, #1
 8003232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	4619      	mov	r1, r3
 8003242:	482d      	ldr	r0, [pc, #180]	; (80032f8 <MX_GPIO_Init+0x1fc>)
 8003244:	f000 fd88 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800324c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800325a:	230b      	movs	r3, #11
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4619      	mov	r1, r3
 8003264:	4824      	ldr	r0, [pc, #144]	; (80032f8 <MX_GPIO_Init+0x1fc>)
 8003266:	f000 fd77 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800326e:	2301      	movs	r3, #1
 8003270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4619      	mov	r1, r3
 8003280:	481e      	ldr	r0, [pc, #120]	; (80032fc <MX_GPIO_Init+0x200>)
 8003282:	f000 fd69 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	4818      	ldr	r0, [pc, #96]	; (80032fc <MX_GPIO_Init+0x200>)
 800329a:	f000 fd5d 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800329e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <MX_GPIO_Init+0x210>)
 80032a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	4619      	mov	r1, r3
 80032b2:	4814      	ldr	r0, [pc, #80]	; (8003304 <MX_GPIO_Init+0x208>)
 80032b4:	f000 fd50 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80032b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80032bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032ca:	230b      	movs	r3, #11
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	4619      	mov	r1, r3
 80032d4:	4809      	ldr	r0, [pc, #36]	; (80032fc <MX_GPIO_Init+0x200>)
 80032d6:	f000 fd3f 	bl	8003d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	2017      	movs	r0, #23
 80032e0:	f000 fd03 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032e4:	2017      	movs	r0, #23
 80032e6:	f000 fd1c 	bl	8003d22 <HAL_NVIC_EnableIRQ>

}
 80032ea:	bf00      	nop
 80032ec:	3730      	adds	r7, #48	; 0x30
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40021800 	.word	0x40021800
 8003300:	10110000 	.word	0x10110000
 8003304:	40020800 	.word	0x40020800
 8003308:	40020000 	.word	0x40020000
 800330c:	10310000 	.word	0x10310000

08003310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_MspInit+0x44>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <HAL_MspInit+0x44>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_MspInit+0x44>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_MspInit+0x44>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a08      	ldr	r2, [pc, #32]	; (8003364 <HAL_MspInit+0x44>)
 8003344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_MspInit+0x44>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800

08003368 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b090      	sub	sp, #64	; 0x40
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6b      	ldr	r2, [pc, #428]	; (8003534 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d129      	bne.n	80033de <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800338a:	4b6b      	ldr	r3, [pc, #428]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	4a6a      	ldr	r2, [pc, #424]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6453      	str	r3, [r2, #68]	; 0x44
 8003396:	4b68      	ldr	r3, [pc, #416]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a2:	4b65      	ldr	r3, [pc, #404]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a64      	ldr	r2, [pc, #400]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80033a8:	f043 0310 	orr.w	r3, r3, #16
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b62      	ldr	r3, [pc, #392]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80033ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033cc:	2301      	movs	r3, #1
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033d4:	4619      	mov	r1, r3
 80033d6:	4859      	ldr	r0, [pc, #356]	; (800353c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80033d8:	f000 fcbe 	bl	8003d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033dc:	e0a5      	b.n	800352a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a57      	ldr	r2, [pc, #348]	; (8003540 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d144      	bne.n	8003472 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	6413      	str	r3, [r2, #64]	; 0x40
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003400:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a4c      	ldr	r2, [pc, #304]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003418:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4a46      	ldr	r2, [pc, #280]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	6313      	str	r3, [r2, #48]	; 0x30
 8003424:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003440:	2302      	movs	r3, #2
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003448:	4619      	mov	r1, r3
 800344a:	483e      	ldr	r0, [pc, #248]	; (8003544 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800344c:	f000 fc84 	bl	8003d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003450:	2320      	movs	r3, #32
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003460:	2302      	movs	r3, #2
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003468:	4619      	mov	r1, r3
 800346a:	4837      	ldr	r0, [pc, #220]	; (8003548 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800346c:	f000 fc74 	bl	8003d58 <HAL_GPIO_Init>
}
 8003470:	e05b      	b.n	800352a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a35      	ldr	r2, [pc, #212]	; (800354c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d129      	bne.n	80034d0 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800347c:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	6413      	str	r3, [r2, #64]	; 0x40
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	6313      	str	r3, [r2, #48]	; 0x30
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80034ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034be:	2302      	movs	r3, #2
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c6:	4619      	mov	r1, r3
 80034c8:	4821      	ldr	r0, [pc, #132]	; (8003550 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80034ca:	f000 fc45 	bl	8003d58 <HAL_GPIO_Init>
}
 80034ce:	e02c      	b.n	800352a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d127      	bne.n	800352a <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	6453      	str	r3, [r2, #68]	; 0x44
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800351a:	2303      	movs	r3, #3
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003522:	4619      	mov	r1, r3
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003526:	f000 fc17 	bl	8003d58 <HAL_GPIO_Init>
}
 800352a:	bf00      	nop
 800352c:	3740      	adds	r7, #64	; 0x40
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40023800 	.word	0x40023800
 800353c:	40021000 	.word	0x40021000
 8003540:	40000400 	.word	0x40000400
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40000800 	.word	0x40000800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40020800 	.word	0x40020800

0800355c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d114      	bne.n	8003598 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	201c      	movs	r0, #28
 800358c:	f000 fbad 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003590:	201c      	movs	r0, #28
 8003592:	f000 fbc6 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003596:	e022      	b.n	80035de <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_TIM_Base_MspInit+0x90>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
}
 80035ba:	e010      	b.n	80035de <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM9)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <HAL_TIM_Base_MspInit+0x94>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10b      	bne.n	80035de <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_TIM_Base_MspInit+0x8c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000

080035f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <HAL_TIM_MspPostInit+0xa8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11c      	bne.n	8003650 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800362e:	2309      	movs	r3, #9
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800363e:	2302      	movs	r3, #2
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4816      	ldr	r0, [pc, #88]	; (80036a4 <HAL_TIM_MspPostInit+0xb0>)
 800364a:	f000 fb85 	bl	8003d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800364e:	e020      	b.n	8003692 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <HAL_TIM_MspPostInit+0xb4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d11b      	bne.n	8003692 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003660:	f043 0310 	orr.w	r3, r3, #16
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003672:	2360      	movs	r3, #96	; 0x60
 8003674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	2302      	movs	r3, #2
 8003678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003682:	2303      	movs	r3, #3
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	4807      	ldr	r0, [pc, #28]	; (80036ac <HAL_TIM_MspPostInit+0xb8>)
 800368e:	f000 fb63 	bl	8003d58 <HAL_GPIO_Init>
}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	; 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_UART_MspInit+0x7c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d128      	bne.n	8003724 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_UART_MspInit+0x80>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <HAL_UART_MspInit+0x80>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_UART_MspInit+0x80>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_UART_MspInit+0x80>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_UART_MspInit+0x80>)
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_UART_MspInit+0x80>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003714:	2307      	movs	r3, #7
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	4619      	mov	r1, r3
 800371e:	4805      	ldr	r0, [pc, #20]	; (8003734 <HAL_UART_MspInit+0x84>)
 8003720:	f000 fb1a 	bl	8003d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40004800 	.word	0x40004800
 8003730:	40023800 	.word	0x40023800
 8003734:	40020c00 	.word	0x40020c00

08003738 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003758:	d141      	bne.n	80037de <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003772:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003780:	2303      	movs	r3, #3
 8003782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003784:	230a      	movs	r3, #10
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	4619      	mov	r1, r3
 800378e:	4817      	ldr	r0, [pc, #92]	; (80037ec <HAL_PCD_MspInit+0xb4>)
 8003790:	f000 fae2 	bl	8003d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	4810      	ldr	r0, [pc, #64]	; (80037ec <HAL_PCD_MspInit+0xb4>)
 80037aa:	f000 fad5 	bl	8003d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b8:	6353      	str	r3, [r2, #52]	; 0x34
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_PCD_MspInit+0xb0>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80037de:	bf00      	nop
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40020000 	.word	0x40020000

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003802:	e7fe      	b.n	8003802 <HardFault_Handler+0x4>

08003804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003808:	e7fe      	b.n	8003808 <MemManage_Handler+0x4>

0800380a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380e:	e7fe      	b.n	800380e <BusFault_Handler+0x4>

08003810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <UsageFault_Handler+0x4>

08003816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003844:	f000 f934 	bl	8003ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003848:	bf00      	nop
 800384a:	bd80      	pop	{r7, pc}

0800384c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003850:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003854:	f000 fc44 	bl	80040e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}

0800385c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <TIM2_IRQHandler+0x10>)
 8003862:	f002 f862 	bl	800592a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20035eb0 	.word	0x20035eb0

08003870 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e00a      	b.n	8003898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003882:	f3af 8000 	nop.w
 8003886:	4601      	mov	r1, r0
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	60ba      	str	r2, [r7, #8]
 800388e:	b2ca      	uxtb	r2, r1
 8003890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	3301      	adds	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	dbf0      	blt.n	8003882 <_read+0x12>
	}

return len;
 80038a0:	687b      	ldr	r3, [r7, #4]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e009      	b.n	80038d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	60ba      	str	r2, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe93 	bl	80005f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	3301      	adds	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	dbf1      	blt.n	80038bc <_write+0x12>
	}
	return len;
 80038d8:	687b      	ldr	r3, [r7, #4]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_close>:

int _close(int file)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
	return -1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800390a:	605a      	str	r2, [r3, #4]
	return 0;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_isatty>:

int _isatty(int file)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
	return 1;
 8003922:	2301      	movs	r3, #1
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
	return 0;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <_sbrk+0x5c>)
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <_sbrk+0x60>)
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <_sbrk+0x64>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <_sbrk+0x64>)
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <_sbrk+0x68>)
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <_sbrk+0x64>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	429a      	cmp	r2, r3
 800397a:	d207      	bcs.n	800398c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800397c:	f003 fef4 	bl	8007768 <__errno>
 8003980:	4602      	mov	r2, r0
 8003982:	230c      	movs	r3, #12
 8003984:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	e009      	b.n	80039a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <_sbrk+0x64>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <_sbrk+0x64>)
 800399c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20080000 	.word	0x20080000
 80039ac:	00000400 	.word	0x00000400
 80039b0:	200358a0 	.word	0x200358a0
 80039b4:	20035f00 	.word	0x20035f00

080039b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <SystemInit+0x28>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <SystemInit+0x28>)
 80039c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SystemInit+0x28>)
 80039ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039d2:	609a      	str	r2, [r3, #8]
#endif
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039ea:	e003      	b.n	80039f4 <LoopCopyDataInit>

080039ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039f2:	3104      	adds	r1, #4

080039f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039f4:	480b      	ldr	r0, [pc, #44]	; (8003a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039fc:	d3f6      	bcc.n	80039ec <CopyDataInit>
  ldr  r2, =_sbss
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a00:	e002      	b.n	8003a08 <LoopFillZerobss>

08003a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a04:	f842 3b04 	str.w	r3, [r2], #4

08003a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a0c:	d3f9      	bcc.n	8003a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a0e:	f7ff ffd3 	bl	80039b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a12:	f003 feaf 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a16:	f7fe ff6d 	bl	80028f4 <main>
  bx  lr    
 8003a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003a20:	0800a0e0 	.word	0x0800a0e0
  ldr  r0, =_sdata
 8003a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a28:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8003a2c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8003a30:	20035efc 	.word	0x20035efc

08003a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a34:	e7fe      	b.n	8003a34 <ADC_IRQHandler>

08003a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f000 f94a 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a40:	2000      	movs	r0, #0
 8003a42:	f000 f805 	bl	8003a50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003a46:	f7ff fc6b 	bl	8003320 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_InitTick+0x54>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_InitTick+0x58>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4619      	mov	r1, r3
 8003a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f965 	bl	8003d3e <HAL_SYSTICK_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00e      	b.n	8003a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d80a      	bhi.n	8003a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a84:	2200      	movs	r2, #0
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	f000 f92d 	bl	8003cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a90:	4a06      	ldr	r2, [pc, #24]	; (8003aac <HAL_InitTick+0x5c>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000001c 	.word	0x2000001c
 8003aa8:	20000024 	.word	0x20000024
 8003aac:	20000020 	.word	0x20000020

08003ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_IncTick+0x20>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_IncTick+0x24>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_IncTick+0x24>)
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000024 	.word	0x20000024
 8003ad4:	20035ef4 	.word	0x20035ef4

08003ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return uwTick;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_GetTick+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20035ef4 	.word	0x20035ef4

08003af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff ffee 	bl	8003ad8 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d005      	beq.n	8003b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_Delay+0x40>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b16:	bf00      	nop
 8003b18:	f7ff ffde 	bl	8003ad8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d8f7      	bhi.n	8003b18 <HAL_Delay+0x28>
  {
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000024 	.word	0x20000024

08003b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <__NVIC_SetPriorityGrouping+0x40>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <__NVIC_SetPriorityGrouping+0x40>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000ed00 	.word	0xe000ed00
 8003b78:	05fa0000 	.word	0x05fa0000

08003b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <__NVIC_GetPriorityGrouping+0x18>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0307 	and.w	r3, r3, #7
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	db0b      	blt.n	8003bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <__NVIC_EnableIRQ+0x38>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fa00 f202 	lsl.w	r2, r0, r2
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db0a      	blt.n	8003bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	490c      	ldr	r1, [pc, #48]	; (8003c20 <__NVIC_SetPriority+0x4c>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bfc:	e00a      	b.n	8003c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <__NVIC_SetPriority+0x50>)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	440b      	add	r3, r1
 8003c12:	761a      	strb	r2, [r3, #24]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000e100 	.word	0xe000e100
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f1c3 0307 	rsb	r3, r3, #7
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf28      	it	cs
 8003c46:	2304      	movcs	r3, #4
 8003c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d902      	bls.n	8003c58 <NVIC_EncodePriority+0x30>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3b03      	subs	r3, #3
 8003c56:	e000      	b.n	8003c5a <NVIC_EncodePriority+0x32>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c70:	f04f 31ff 	mov.w	r1, #4294967295
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	43d9      	mvns	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	4313      	orrs	r3, r2
         );
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca0:	d301      	bcc.n	8003ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00f      	b.n	8003cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <SysTick_Config+0x40>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cae:	210f      	movs	r1, #15
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	f7ff ff8e 	bl	8003bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <SysTick_Config+0x40>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <SysTick_Config+0x40>)
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff29 	bl	8003b34 <__NVIC_SetPriorityGrouping>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cfc:	f7ff ff3e 	bl	8003b7c <__NVIC_GetPriorityGrouping>
 8003d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7ff ff8e 	bl	8003c28 <NVIC_EncodePriority>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff5d 	bl	8003bd4 <__NVIC_SetPriority>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff31 	bl	8003b98 <__NVIC_EnableIRQ>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffa2 	bl	8003c90 <SysTick_Config>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e175      	b.n	8004064 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f040 8164 	bne.w	800405e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d00b      	beq.n	8003db6 <HAL_GPIO_Init+0x5e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d007      	beq.n	8003db6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003daa:	2b11      	cmp	r3, #17
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b12      	cmp	r3, #18
 8003db4:	d130      	bne.n	8003e18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dec:	2201      	movs	r2, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 0201 	and.w	r2, r3, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x100>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b12      	cmp	r3, #18
 8003e56:	d123      	bne.n	8003ea0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	08da      	lsrs	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3208      	adds	r2, #8
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	220f      	movs	r2, #15
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	08da      	lsrs	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3208      	adds	r2, #8
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80be 	beq.w	800405e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_GPIO_Init+0x320>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	4a64      	ldr	r2, [pc, #400]	; (8004078 <HAL_GPIO_Init+0x320>)
 8003ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eec:	6453      	str	r3, [r2, #68]	; 0x44
 8003eee:	4b62      	ldr	r3, [pc, #392]	; (8004078 <HAL_GPIO_Init+0x320>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003efa:	4a60      	ldr	r2, [pc, #384]	; (800407c <HAL_GPIO_Init+0x324>)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	3302      	adds	r3, #2
 8003f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a57      	ldr	r2, [pc, #348]	; (8004080 <HAL_GPIO_Init+0x328>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d037      	beq.n	8003f96 <HAL_GPIO_Init+0x23e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a56      	ldr	r2, [pc, #344]	; (8004084 <HAL_GPIO_Init+0x32c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d031      	beq.n	8003f92 <HAL_GPIO_Init+0x23a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a55      	ldr	r2, [pc, #340]	; (8004088 <HAL_GPIO_Init+0x330>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <HAL_GPIO_Init+0x236>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a54      	ldr	r2, [pc, #336]	; (800408c <HAL_GPIO_Init+0x334>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d025      	beq.n	8003f8a <HAL_GPIO_Init+0x232>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a53      	ldr	r2, [pc, #332]	; (8004090 <HAL_GPIO_Init+0x338>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01f      	beq.n	8003f86 <HAL_GPIO_Init+0x22e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_GPIO_Init+0x33c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d019      	beq.n	8003f82 <HAL_GPIO_Init+0x22a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a51      	ldr	r2, [pc, #324]	; (8004098 <HAL_GPIO_Init+0x340>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_GPIO_Init+0x226>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a50      	ldr	r2, [pc, #320]	; (800409c <HAL_GPIO_Init+0x344>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00d      	beq.n	8003f7a <HAL_GPIO_Init+0x222>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4f      	ldr	r2, [pc, #316]	; (80040a0 <HAL_GPIO_Init+0x348>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <HAL_GPIO_Init+0x21e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4e      	ldr	r2, [pc, #312]	; (80040a4 <HAL_GPIO_Init+0x34c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_GPIO_Init+0x21a>
 8003f6e:	2309      	movs	r3, #9
 8003f70:	e012      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f72:	230a      	movs	r3, #10
 8003f74:	e010      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f76:	2308      	movs	r3, #8
 8003f78:	e00e      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f7a:	2307      	movs	r3, #7
 8003f7c:	e00c      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f7e:	2306      	movs	r3, #6
 8003f80:	e00a      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f82:	2305      	movs	r3, #5
 8003f84:	e008      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f86:	2304      	movs	r3, #4
 8003f88:	e006      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e004      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e002      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_GPIO_Init+0x240>
 8003f96:	2300      	movs	r3, #0
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	f002 0203 	and.w	r2, r2, #3
 8003f9e:	0092      	lsls	r2, r2, #2
 8003fa0:	4093      	lsls	r3, r2
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fa8:	4934      	ldr	r1, [pc, #208]	; (800407c <HAL_GPIO_Init+0x324>)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3302      	adds	r3, #2
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <HAL_GPIO_Init+0x350>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fda:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <HAL_GPIO_Init+0x350>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_GPIO_Init+0x350>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004004:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <HAL_GPIO_Init+0x350>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_GPIO_Init+0x350>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <HAL_GPIO_Init+0x350>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_GPIO_Init+0x350>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <HAL_GPIO_Init+0x350>)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3301      	adds	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	f67f ae86 	bls.w	8003d78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800406c:	bf00      	nop
 800406e:	3724      	adds	r7, #36	; 0x24
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40023800 	.word	0x40023800
 800407c:	40013800 	.word	0x40013800
 8004080:	40020000 	.word	0x40020000
 8004084:	40020400 	.word	0x40020400
 8004088:	40020800 	.word	0x40020800
 800408c:	40020c00 	.word	0x40020c00
 8004090:	40021000 	.word	0x40021000
 8004094:	40021400 	.word	0x40021400
 8004098:	40021800 	.word	0x40021800
 800409c:	40021c00 	.word	0x40021c00
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40022400 	.word	0x40022400
 80040a8:	40013c00 	.word	0x40013c00

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040c8:	e003      	b.n	80040d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	041a      	lsls	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	619a      	str	r2, [r3, #24]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040f6:	4a05      	ldr	r2, [pc, #20]	; (800410c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe f8ca 	bl	8002298 <HAL_GPIO_EXTI_Callback>
  }
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40013c00 	.word	0x40013c00

08004110 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b08f      	sub	sp, #60	; 0x3c
 8004114:	af0a      	add	r7, sp, #40	; 0x28
 8004116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e116      	b.n	8004350 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fafb 	bl	8003738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2203      	movs	r2, #3
 8004146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 f8a9 	bl	80072b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	687e      	ldr	r6, [r7, #4]
 800416e:	466d      	mov	r5, sp
 8004170:	f106 0410 	add.w	r4, r6, #16
 8004174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004180:	e885 0003 	stmia.w	r5, {r0, r1}
 8004184:	1d33      	adds	r3, r6, #4
 8004186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f003 f83d 	bl	8007208 <USB_CoreInit>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0d7      	b.n	8004350 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f003 f897 	bl	80072da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e04a      	b.n	8004248 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	333d      	adds	r3, #61	; 0x3d
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	333c      	adds	r3, #60	; 0x3c
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	b298      	uxth	r0, r3
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	3342      	adds	r3, #66	; 0x42
 80041ee:	4602      	mov	r2, r0
 80041f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	333f      	adds	r3, #63	; 0x3f
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	3344      	adds	r3, #68	; 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3348      	adds	r3, #72	; 0x48
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3350      	adds	r3, #80	; 0x50
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3301      	adds	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3af      	bcc.n	80041b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	e044      	b.n	80042e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	3301      	adds	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3b5      	bcc.n	8004258 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	687e      	ldr	r6, [r7, #4]
 80042f4:	466d      	mov	r5, sp
 80042f6:	f106 0410 	add.w	r4, r6, #16
 80042fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004306:	e885 0003 	stmia.w	r5, {r0, r1}
 800430a:	1d33      	adds	r3, r6, #4
 800430c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800430e:	6838      	ldr	r0, [r7, #0]
 8004310:	f003 f80e 	bl	8007330 <USB_DevInit>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e014      	b.n	8004350 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b01      	cmp	r3, #1
 800433c:	d102      	bne.n	8004344 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f80a 	bl	8004358 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f003 f9c0 	bl	80076ce <USB_DevDisconnect>

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_PCDEx_ActivateLPM+0x44>)
 8004388:	4313      	orrs	r3, r2
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	10000003 	.word	0x10000003

080043a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40007000 	.word	0x40007000

080043c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_PWREx_EnableOverDrive+0x98>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ee:	f7ff fb73 	bl	8003ad8 <HAL_GetTick>
 80043f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043f4:	e009      	b.n	800440a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043f6:	f7ff fb6f 	bl	8003ad8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004404:	d901      	bls.n	800440a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e022      	b.n	8004450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004416:	d1ee      	bne.n	80043f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0f      	ldr	r2, [pc, #60]	; (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 800441e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004424:	f7ff fb58 	bl	8003ad8 <HAL_GetTick>
 8004428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800442a:	e009      	b.n	8004440 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800442c:	f7ff fb54 	bl	8003ad8 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443a:	d901      	bls.n	8004440 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e007      	b.n	8004450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444c:	d1ee      	bne.n	800442c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e29b      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8087 	beq.w	8004592 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004484:	4b96      	ldr	r3, [pc, #600]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b04      	cmp	r3, #4
 800448e:	d00c      	beq.n	80044aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004490:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
 800449c:	4b90      	ldr	r3, [pc, #576]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d06c      	beq.n	8004590 <HAL_RCC_OscConfig+0x130>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d168      	bne.n	8004590 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e275      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x7a>
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e02e      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x9c>
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7e      	ldr	r2, [pc, #504]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b7c      	ldr	r3, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7b      	ldr	r2, [pc, #492]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0xc0>
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b73      	ldr	r3, [pc, #460]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a72      	ldr	r2, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 8004520:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b6c      	ldr	r3, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6b      	ldr	r2, [pc, #428]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7ff faca 	bl	8003ad8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7ff fac6 	bl	8003ad8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e229      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xe8>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7ff fab6 	bl	8003ad8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7ff fab2 	bl	8003ad8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e215      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x110>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d069      	beq.n	8004672 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459e:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b4d      	ldr	r3, [pc, #308]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e1e9      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	493d      	ldr	r1, [pc, #244]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	e040      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d023      	beq.n	8004640 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7ff fa68 	bl	8003ad8 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7ff fa64 	bl	8003ad8 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1c7      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4929      	ldr	r1, [pc, #164]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	e018      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7ff fa44 	bl	8003ad8 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7ff fa40 	bl	8003ad8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1a3      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d038      	beq.n	80046f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7ff fa21 	bl	8003ad8 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469a:	f7ff fa1d 	bl	8003ad8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e180      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x23a>
 80046b8:	e01a      	b.n	80046f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7ff fa07 	bl	8003ad8 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7ff fa03 	bl	8003ad8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d903      	bls.n	80046e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e166      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
 80046e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b92      	ldr	r3, [pc, #584]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ee      	bne.n	80046ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a4 	beq.w	8004846 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8c      	ldr	r3, [pc, #560]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a88      	ldr	r2, [pc, #544]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b86      	ldr	r3, [pc, #536]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4b83      	ldr	r3, [pc, #524]	; (8004934 <HAL_RCC_OscConfig+0x4d4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004732:	4b80      	ldr	r3, [pc, #512]	; (8004934 <HAL_RCC_OscConfig+0x4d4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7f      	ldr	r2, [pc, #508]	; (8004934 <HAL_RCC_OscConfig+0x4d4>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7ff f9cb 	bl	8003ad8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7ff f9c7 	bl	8003ad8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e12a      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x4d4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x31a>
 800476c:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a6f      	ldr	r2, [pc, #444]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x33c>
 8004782:	4b6b      	ldr	r3, [pc, #428]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a6a      	ldr	r2, [pc, #424]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a67      	ldr	r2, [pc, #412]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x35e>
 80047a4:	4b62      	ldr	r3, [pc, #392]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a61      	ldr	r2, [pc, #388]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	4b5f      	ldr	r3, [pc, #380]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 80047be:	4b5c      	ldr	r3, [pc, #368]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a5b      	ldr	r2, [pc, #364]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7ff f97b 	bl	8003ad8 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7ff f977 	bl	8003ad8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0d8      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4c      	ldr	r3, [pc, #304]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x386>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7ff f965 	bl	8003ad8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7ff f961 	bl	8003ad8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0c2      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80ae 	beq.w	80049ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d06d      	beq.n	8004938 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d14b      	bne.n	80048fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b32      	ldr	r3, [pc, #200]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a31      	ldr	r2, [pc, #196]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7ff f932 	bl	8003ad8 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7ff f92e 	bl	8003ad8 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e091      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b29      	ldr	r3, [pc, #164]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	491b      	ldr	r1, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7ff f900 	bl	8003ad8 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7ff f8fc 	bl	8003ad8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e05f      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x47c>
 80048fa:	e057      	b.n	80049ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7ff f8e6 	bl	8003ad8 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7ff f8e2 	bl	8003ad8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e045      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	4b03      	ldr	r3, [pc, #12]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x4b0>
 800492e:	e03d      	b.n	80049ac <HAL_RCC_OscConfig+0x54c>
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004938:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <HAL_RCC_OscConfig+0x558>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d030      	beq.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d129      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d122      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800496e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004970:	4293      	cmp	r3, r2
 8004972:	d119      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	3b01      	subs	r3, #1
 8004982:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d10f      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800

080049bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0d0      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b6a      	ldr	r3, [pc, #424]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d910      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b67      	ldr	r3, [pc, #412]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	4965      	ldr	r1, [pc, #404]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d040      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d115      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e073      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e06b      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f023 0203 	bic.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4936      	ldr	r1, [pc, #216]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab0:	f7ff f812 	bl	8003ad8 <HAL_GetTick>
 8004ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7ff f80e 	bl	8003ad8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e053      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 020c 	and.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1eb      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d210      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 020f 	bic.w	r2, r3, #15
 8004af6:	4922      	ldr	r1, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4601      	mov	r1, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x1cc>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	fa21 f303 	lsr.w	r3, r1, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1d0>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1d4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe ff6e 	bl	8003a50 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	08009df4 	.word	0x08009df4
 8004b8c:	2000001c 	.word	0x2000001c
 8004b90:	20000020 	.word	0x20000020

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4b63      	ldr	r3, [pc, #396]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d007      	beq.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x32>
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x38>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 80b4 	bne.w	8004d28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b5e      	ldr	r3, [pc, #376]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bc2:	60bb      	str	r3, [r7, #8]
      break;
 8004bc4:	e0b3      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bc6:	4b5e      	ldr	r3, [pc, #376]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004bc8:	60bb      	str	r3, [r7, #8]
      break;
 8004bca:	e0b0      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bcc:	4b5a      	ldr	r3, [pc, #360]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bd6:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04a      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be2:	4b55      	ldr	r3, [pc, #340]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	f04f 0400 	mov.w	r4, #0
 8004bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	ea03 0501 	and.w	r5, r3, r1
 8004bf8:	ea04 0602 	and.w	r6, r4, r2
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	4632      	mov	r2, r6
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	f04f 0400 	mov.w	r4, #0
 8004c08:	0154      	lsls	r4, r2, #5
 8004c0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c0e:	014b      	lsls	r3, r1, #5
 8004c10:	4619      	mov	r1, r3
 8004c12:	4622      	mov	r2, r4
 8004c14:	1b49      	subs	r1, r1, r5
 8004c16:	eb62 0206 	sbc.w	r2, r2, r6
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	0194      	lsls	r4, r2, #6
 8004c24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c28:	018b      	lsls	r3, r1, #6
 8004c2a:	1a5b      	subs	r3, r3, r1
 8004c2c:	eb64 0402 	sbc.w	r4, r4, r2
 8004c30:	f04f 0100 	mov.w	r1, #0
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	00e2      	lsls	r2, r4, #3
 8004c3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c3e:	00d9      	lsls	r1, r3, #3
 8004c40:	460b      	mov	r3, r1
 8004c42:	4614      	mov	r4, r2
 8004c44:	195b      	adds	r3, r3, r5
 8004c46:	eb44 0406 	adc.w	r4, r4, r6
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	0262      	lsls	r2, r4, #9
 8004c54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c58:	0259      	lsls	r1, r3, #9
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	4621      	mov	r1, r4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	f7fb fb40 	bl	80002f0 <__aeabi_uldivmod>
 8004c70:	4603      	mov	r3, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e049      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c78:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	ea03 0501 	and.w	r5, r3, r1
 8004c8e:	ea04 0602 	and.w	r6, r4, r2
 8004c92:	4629      	mov	r1, r5
 8004c94:	4632      	mov	r2, r6
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	f04f 0400 	mov.w	r4, #0
 8004c9e:	0154      	lsls	r4, r2, #5
 8004ca0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ca4:	014b      	lsls	r3, r1, #5
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4622      	mov	r2, r4
 8004caa:	1b49      	subs	r1, r1, r5
 8004cac:	eb62 0206 	sbc.w	r2, r2, r6
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	f04f 0400 	mov.w	r4, #0
 8004cb8:	0194      	lsls	r4, r2, #6
 8004cba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cbe:	018b      	lsls	r3, r1, #6
 8004cc0:	1a5b      	subs	r3, r3, r1
 8004cc2:	eb64 0402 	sbc.w	r4, r4, r2
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	00e2      	lsls	r2, r4, #3
 8004cd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cd4:	00d9      	lsls	r1, r3, #3
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	195b      	adds	r3, r3, r5
 8004cdc:	eb44 0406 	adc.w	r4, r4, r6
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	02a2      	lsls	r2, r4, #10
 8004cea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cee:	0299      	lsls	r1, r3, #10
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4614      	mov	r4, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4623      	mov	r3, r4
 8004d02:	f7fb faf5 	bl	80002f0 <__aeabi_uldivmod>
 8004d06:	4603      	mov	r3, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	3301      	adds	r3, #1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	60bb      	str	r3, [r7, #8]
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d2a:	60bb      	str	r3, [r7, #8]
      break;
 8004d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	007a1200 	.word	0x007a1200

08004d44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	2000001c 	.word	0x2000001c

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d60:	f7ff fff0 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d64:	4601      	mov	r1, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4a03      	ldr	r2, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d72:	5cd3      	ldrb	r3, [r2, r3]
 8004d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	08009e04 	.word	0x08009e04

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff ffdc 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4601      	mov	r1, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0b5b      	lsrs	r3, r3, #13
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4a03      	ldr	r2, [pc, #12]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5cd3      	ldrb	r3, [r2, r3]
 8004d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	08009e04 	.word	0x08009e04

08004dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d012      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dd4:	4b69      	ldr	r3, [pc, #420]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a68      	ldr	r2, [pc, #416]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dde:	6093      	str	r3, [r2, #8]
 8004de0:	4b66      	ldr	r3, [pc, #408]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	4964      	ldr	r1, [pc, #400]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d017      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e06:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	4959      	ldr	r1, [pc, #356]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d017      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e42:	4b4e      	ldr	r3, [pc, #312]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	494a      	ldr	r1, [pc, #296]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e60:	d101      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 808b 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e90:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9c:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ea8:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a34      	ldr	r2, [pc, #208]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fe fe10 	bl	8003ad8 <HAL_GetTick>
 8004eb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebc:	f7fe fe0c 	bl	8003ad8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e38d      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ece:	4b2c      	ldr	r3, [pc, #176]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d035      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d02e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef8:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f20:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d114      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fe fdd4 	bl	8003ad8 <HAL_GetTick>
 8004f30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fe fdd0 	bl	8003ad8 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e34f      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ee      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f62:	d111      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	4901      	ldr	r1, [pc, #4]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40007000 	.word	0x40007000
 8004f84:	0ffffcff 	.word	0x0ffffcff
 8004f88:	4bb3      	ldr	r3, [pc, #716]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4ab2      	ldr	r2, [pc, #712]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f92:	6093      	str	r3, [r2, #8]
 8004f94:	4bb0      	ldr	r3, [pc, #704]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	49ad      	ldr	r1, [pc, #692]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fb2:	4ba9      	ldr	r3, [pc, #676]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb8:	4aa7      	ldr	r2, [pc, #668]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fc2:	4ba5      	ldr	r3, [pc, #660]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	49a2      	ldr	r1, [pc, #648]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe0:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fee:	499a      	ldr	r1, [pc, #616]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005002:	4b95      	ldr	r3, [pc, #596]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005010:	4991      	ldr	r1, [pc, #580]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005024:	4b8c      	ldr	r3, [pc, #560]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	4989      	ldr	r1, [pc, #548]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005046:	4b84      	ldr	r3, [pc, #528]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4980      	ldr	r1, [pc, #512]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005068:	4b7b      	ldr	r3, [pc, #492]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	4978      	ldr	r1, [pc, #480]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800508a:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	f023 020c 	bic.w	r2, r3, #12
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005098:	496f      	ldr	r1, [pc, #444]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	4967      	ldr	r1, [pc, #412]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ce:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	495e      	ldr	r1, [pc, #376]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050f0:	4b59      	ldr	r3, [pc, #356]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	4956      	ldr	r1, [pc, #344]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005112:	4b51      	ldr	r3, [pc, #324]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	494d      	ldr	r1, [pc, #308]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005134:	4b48      	ldr	r3, [pc, #288]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005142:	4945      	ldr	r1, [pc, #276]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005156:	4b40      	ldr	r3, [pc, #256]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	493c      	ldr	r1, [pc, #240]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005178:	4b37      	ldr	r3, [pc, #220]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005186:	4934      	ldr	r1, [pc, #208]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a8:	492b      	ldr	r1, [pc, #172]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051da:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	491b      	ldr	r1, [pc, #108]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051fc:	4b16      	ldr	r3, [pc, #88]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	4912      	ldr	r1, [pc, #72]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005230:	4909      	ldr	r1, [pc, #36]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00f      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	e002      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	4985      	ldr	r1, [pc, #532]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005270:	4b80      	ldr	r3, [pc, #512]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005276:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005280:	497c      	ldr	r1, [pc, #496]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d005      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005296:	f040 80d6 	bne.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800529a:	4b76      	ldr	r3, [pc, #472]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a75      	ldr	r2, [pc, #468]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a6:	f7fe fc17 	bl	8003ad8 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052ae:	f7fe fc13 	bl	8003ad8 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	; 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e194      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c0:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f0      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d021      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11d      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052e0:	4b64      	ldr	r3, [pc, #400]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ee:	4b61      	ldr	r3, [pc, #388]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	019a      	lsls	r2, r3, #6
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	071b      	lsls	r3, r3, #28
 8005314:	4957      	ldr	r1, [pc, #348]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800533a:	2b00      	cmp	r3, #0
 800533c:	d02e      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005346:	d129      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005348:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800534a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534e:	0c1b      	lsrs	r3, r3, #16
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005356:	4b47      	ldr	r3, [pc, #284]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535c:	0f1b      	lsrs	r3, r3, #28
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	019a      	lsls	r2, r3, #6
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	431a      	orrs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	493d      	ldr	r1, [pc, #244]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005384:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538a:	f023 021f 	bic.w	r2, r3, #31
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	3b01      	subs	r3, #1
 8005394:	4937      	ldr	r1, [pc, #220]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01d      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053a8:	4b32      	ldr	r3, [pc, #200]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	0e1b      	lsrs	r3, r3, #24
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053b6:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	0f1b      	lsrs	r3, r3, #28
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	019a      	lsls	r2, r3, #6
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	061b      	lsls	r3, r3, #24
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	071b      	lsls	r3, r3, #28
 80053dc:	4925      	ldr	r1, [pc, #148]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d011      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	019a      	lsls	r2, r3, #6
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	071b      	lsls	r3, r3, #28
 800540c:	4919      	ldr	r1, [pc, #100]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800541a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800541e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fe fb5a 	bl	8003ad8 <HAL_GetTick>
 8005424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005428:	f7fe fb56 	bl	8003ad8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e0d7      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 80cd 	bne.w	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545a:	f7fe fb3d 	bl	8003ad8 <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005460:	e00a      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005462:	f7fe fb39 	bl	8003ad8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d903      	bls.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0ba      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005474:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005478:	4b5e      	ldr	r3, [pc, #376]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005484:	d0ed      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d02e      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d12a      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054ae:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054bc:	4b4d      	ldr	r3, [pc, #308]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	0f1b      	lsrs	r3, r3, #28
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	019a      	lsls	r2, r3, #6
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	071b      	lsls	r3, r3, #28
 80054e2:	4944      	ldr	r1, [pc, #272]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ea:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	3b01      	subs	r3, #1
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	493d      	ldr	r1, [pc, #244]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d022      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005518:	d11d      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800551a:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	0f1b      	lsrs	r3, r3, #28
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	431a      	orrs	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	4929      	ldr	r1, [pc, #164]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d028      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	0e1b      	lsrs	r3, r3, #24
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005570:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	019a      	lsls	r2, r3, #6
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	431a      	orrs	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	071b      	lsls	r3, r3, #28
 8005596:	4917      	ldr	r1, [pc, #92]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4911      	ldr	r1, [pc, #68]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c0:	f7fe fa8a 	bl	8003ad8 <HAL_GetTick>
 80055c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055c8:	f7fe fa86 	bl	8003ad8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	; 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e007      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e6:	d1ef      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800

080055f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e01d      	b.n	8005646 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fd ff9c 	bl	800355c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 fc90 	bl	8005f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <HAL_TIM_Base_Start_IT+0x50>)
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b06      	cmp	r3, #6
 8005678:	d00b      	beq.n	8005692 <HAL_TIM_Base_Start_IT+0x42>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d007      	beq.n	8005692 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	00010007 	.word	0x00010007

080056a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e01d      	b.n	80056f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f815 	bl	80056fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f000 fc3a 	bl	8005f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 ffb2 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <HAL_TIM_PWM_Start+0x7c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_PWM_Start+0x2c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a16      	ldr	r2, [pc, #88]	; (8005790 <HAL_TIM_PWM_Start+0x80>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_TIM_PWM_Start+0x30>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_TIM_PWM_Start+0x32>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <HAL_TIM_PWM_Start+0x84>)
 800575e:	4013      	ands	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b06      	cmp	r3, #6
 8005766:	d00b      	beq.n	8005780 <HAL_TIM_PWM_Start+0x70>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576e:	d007      	beq.n	8005780 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000
 8005790:	40010400 	.word	0x40010400
 8005794:	00010007 	.word	0x00010007

08005798 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e07b      	b.n	80058a4 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fd fdd1 	bl	8003368 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6899      	ldr	r1, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_TIM_Encoder_Init+0x114>)
 80057da:	400b      	ands	r3, r1
 80057dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f000 fbb7 	bl	8005f5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <HAL_TIM_Encoder_Init+0x118>)
 8005814:	4013      	ands	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	4313      	orrs	r3, r2
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_TIM_Encoder_Init+0x11c>)
 800582e:	4013      	ands	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <HAL_TIM_Encoder_Init+0x120>)
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	4313      	orrs	r3, r2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	031b      	lsls	r3, r3, #12
 8005858:	4313      	orrs	r3, r2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	4313      	orrs	r3, r2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	fffebff8 	.word	0xfffebff8
 80058b0:	fffffcfc 	.word	0xfffffcfc
 80058b4:	fffff3f3 	.word	0xfffff3f3
 80058b8:	ffff0f0f 	.word	0xffff0f0f

080058bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_TIM_Encoder_Start+0x16>
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d008      	beq.n	80058e2 <HAL_TIM_Encoder_Start+0x26>
 80058d0:	e00f      	b.n	80058f2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fed6 	bl	800668c <TIM_CCxChannelCmd>
      break;
 80058e0:	e016      	b.n	8005910 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2201      	movs	r2, #1
 80058e8:	2104      	movs	r1, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fece 	bl	800668c <TIM_CCxChannelCmd>
      break;
 80058f0:	e00e      	b.n	8005910 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fec6 	bl	800668c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2201      	movs	r2, #1
 8005906:	2104      	movs	r1, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f000 febf 	bl	800668c <TIM_CCxChannelCmd>
      break;
 800590e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d122      	bne.n	8005986 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b02      	cmp	r3, #2
 800594c:	d11b      	bne.n	8005986 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0202 	mvn.w	r2, #2
 8005956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fad7 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005972:	e005      	b.n	8005980 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fac9 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fada 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b04      	cmp	r3, #4
 8005992:	d122      	bne.n	80059da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d11b      	bne.n	80059da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f06f 0204 	mvn.w	r2, #4
 80059aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 faad 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 80059c6:	e005      	b.n	80059d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa9f 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fab0 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d122      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d11b      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0208 	mvn.w	r2, #8
 80059fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa83 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005a1a:	e005      	b.n	8005a28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa75 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa86 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d122      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d11b      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0210 	mvn.w	r2, #16
 8005a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2208      	movs	r2, #8
 8005a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fa59 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fa4b 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa5c 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10e      	bne.n	8005aae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0201 	mvn.w	r2, #1
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fa fdb5 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fe97 	bl	8006808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae8:	d10e      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b80      	cmp	r3, #128	; 0x80
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fe8a 	bl	800681c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d10e      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d107      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa0a 	bl	8005f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	d10e      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d107      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0220 	mvn.w	r2, #32
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fe4a 	bl	80067f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e105      	b.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b14      	cmp	r3, #20
 8005b96:	f200 80f0 	bhi.w	8005d7a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005d7b 	.word	0x08005d7b
 8005ba8:	08005d7b 	.word	0x08005d7b
 8005bac:	08005d7b 	.word	0x08005d7b
 8005bb0:	08005c35 	.word	0x08005c35
 8005bb4:	08005d7b 	.word	0x08005d7b
 8005bb8:	08005d7b 	.word	0x08005d7b
 8005bbc:	08005d7b 	.word	0x08005d7b
 8005bc0:	08005c77 	.word	0x08005c77
 8005bc4:	08005d7b 	.word	0x08005d7b
 8005bc8:	08005d7b 	.word	0x08005d7b
 8005bcc:	08005d7b 	.word	0x08005d7b
 8005bd0:	08005cb7 	.word	0x08005cb7
 8005bd4:	08005d7b 	.word	0x08005d7b
 8005bd8:	08005d7b 	.word	0x08005d7b
 8005bdc:	08005d7b 	.word	0x08005d7b
 8005be0:	08005cf9 	.word	0x08005cf9
 8005be4:	08005d7b 	.word	0x08005d7b
 8005be8:	08005d7b 	.word	0x08005d7b
 8005bec:	08005d7b 	.word	0x08005d7b
 8005bf0:	08005d39 	.word	0x08005d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fa4e 	bl	800609c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
      break;
 8005c32:	e0a3      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 faa0 	bl	8006180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
      break;
 8005c74:	e082      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 faf7 	bl	8006270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0208 	orr.w	r2, r2, #8
 8005c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0204 	bic.w	r2, r2, #4
 8005ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69d9      	ldr	r1, [r3, #28]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	61da      	str	r2, [r3, #28]
      break;
 8005cb4:	e062      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fb4d 	bl	800635c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69d9      	ldr	r1, [r3, #28]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	021a      	lsls	r2, r3, #8
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	61da      	str	r2, [r3, #28]
      break;
 8005cf6:	e041      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fb84 	bl	800640c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0208 	orr.w	r2, r2, #8
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d36:	e021      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fbb6 	bl	80064b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005d7a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop

08005d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIM_ConfigClockSource+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e0a6      	b.n	8005efe <HAL_TIM_ConfigClockSource+0x166>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4b4f      	ldr	r3, [pc, #316]	; (8005f08 <HAL_TIM_ConfigClockSource+0x170>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d067      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x120>
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d80b      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x6c>
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d073      	beq.n	8005ed8 <HAL_TIM_ConfigClockSource+0x140>
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d802      	bhi.n	8005dfa <HAL_TIM_ConfigClockSource+0x62>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d06f      	beq.n	8005ed8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005df8:	e078      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d06c      	beq.n	8005ed8 <HAL_TIM_ConfigClockSource+0x140>
 8005dfe:	2b30      	cmp	r3, #48	; 0x30
 8005e00:	d06a      	beq.n	8005ed8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e02:	e073      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e04:	2b70      	cmp	r3, #112	; 0x70
 8005e06:	d00d      	beq.n	8005e24 <HAL_TIM_ConfigClockSource+0x8c>
 8005e08:	2b70      	cmp	r3, #112	; 0x70
 8005e0a:	d804      	bhi.n	8005e16 <HAL_TIM_ConfigClockSource+0x7e>
 8005e0c:	2b50      	cmp	r3, #80	; 0x50
 8005e0e:	d033      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0xe0>
 8005e10:	2b60      	cmp	r3, #96	; 0x60
 8005e12:	d041      	beq.n	8005e98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e14:	e06a      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d066      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x152>
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e20:	d017      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005e22:	e063      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6899      	ldr	r1, [r3, #8]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f000 fc0a 	bl	800664c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
      break;
 8005e50:	e04c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f000 fbf3 	bl	800664c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e74:	609a      	str	r2, [r3, #8]
      break;
 8005e76:	e039      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6859      	ldr	r1, [r3, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f000 fb67 	bl	8006558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2150      	movs	r1, #80	; 0x50
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fbc0 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8005e96:	e029      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6859      	ldr	r1, [r3, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f000 fb86 	bl	80065b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2160      	movs	r1, #96	; 0x60
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fbb0 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8005eb6:	e019      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6859      	ldr	r1, [r3, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f000 fb47 	bl	8006558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2140      	movs	r1, #64	; 0x40
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fba0 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8005ed6:	e009      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 fb97 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e000      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	fffeff88 	.word	0xfffeff88

08005f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a40      	ldr	r2, [pc, #256]	; (8006070 <TIM_Base_SetConfig+0x114>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7a:	d00f      	beq.n	8005f9c <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3d      	ldr	r2, [pc, #244]	; (8006074 <TIM_Base_SetConfig+0x118>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00b      	beq.n	8005f9c <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a3c      	ldr	r2, [pc, #240]	; (8006078 <TIM_Base_SetConfig+0x11c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a3b      	ldr	r2, [pc, #236]	; (800607c <TIM_Base_SetConfig+0x120>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0x40>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a3a      	ldr	r2, [pc, #232]	; (8006080 <TIM_Base_SetConfig+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d108      	bne.n	8005fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2f      	ldr	r2, [pc, #188]	; (8006070 <TIM_Base_SetConfig+0x114>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d02b      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d027      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2c      	ldr	r2, [pc, #176]	; (8006074 <TIM_Base_SetConfig+0x118>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d023      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2b      	ldr	r2, [pc, #172]	; (8006078 <TIM_Base_SetConfig+0x11c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01f      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a2a      	ldr	r2, [pc, #168]	; (800607c <TIM_Base_SetConfig+0x120>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01b      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a29      	ldr	r2, [pc, #164]	; (8006080 <TIM_Base_SetConfig+0x124>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d017      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a28      	ldr	r2, [pc, #160]	; (8006084 <TIM_Base_SetConfig+0x128>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d013      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a27      	ldr	r2, [pc, #156]	; (8006088 <TIM_Base_SetConfig+0x12c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00f      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a26      	ldr	r2, [pc, #152]	; (800608c <TIM_Base_SetConfig+0x130>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00b      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a25      	ldr	r2, [pc, #148]	; (8006090 <TIM_Base_SetConfig+0x134>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d007      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a24      	ldr	r2, [pc, #144]	; (8006094 <TIM_Base_SetConfig+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d003      	beq.n	800600e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a23      	ldr	r2, [pc, #140]	; (8006098 <TIM_Base_SetConfig+0x13c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d108      	bne.n	8006020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <TIM_Base_SetConfig+0x114>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_Base_SetConfig+0xf8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <TIM_Base_SetConfig+0x124>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d103      	bne.n	800605c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	615a      	str	r2, [r3, #20]
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40010400 	.word	0x40010400
 8006084:	40014000 	.word	0x40014000
 8006088:	40014400 	.word	0x40014400
 800608c:	40014800 	.word	0x40014800
 8006090:	40001800 	.word	0x40001800
 8006094:	40001c00 	.word	0x40001c00
 8006098:	40002000 	.word	0x40002000

0800609c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f023 0201 	bic.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <TIM_OC1_SetConfig+0xd8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0303 	bic.w	r3, r3, #3
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 0302 	bic.w	r3, r3, #2
 80060e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a21      	ldr	r2, [pc, #132]	; (8006178 <TIM_OC1_SetConfig+0xdc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC1_SetConfig+0x64>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a20      	ldr	r2, [pc, #128]	; (800617c <TIM_OC1_SetConfig+0xe0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10c      	bne.n	800611a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0308 	bic.w	r3, r3, #8
 8006106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a16      	ldr	r2, [pc, #88]	; (8006178 <TIM_OC1_SetConfig+0xdc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC1_SetConfig+0x8e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <TIM_OC1_SetConfig+0xe0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d111      	bne.n	800614e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	621a      	str	r2, [r3, #32]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	fffeff8f 	.word	0xfffeff8f
 8006178:	40010000 	.word	0x40010000
 800617c:	40010400 	.word	0x40010400

08006180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0210 	bic.w	r2, r3, #16
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4b2e      	ldr	r3, [pc, #184]	; (8006264 <TIM_OC2_SetConfig+0xe4>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0320 	bic.w	r3, r3, #32
 80061ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a23      	ldr	r2, [pc, #140]	; (8006268 <TIM_OC2_SetConfig+0xe8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_OC2_SetConfig+0x68>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a22      	ldr	r2, [pc, #136]	; (800626c <TIM_OC2_SetConfig+0xec>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d10d      	bne.n	8006204 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a18      	ldr	r2, [pc, #96]	; (8006268 <TIM_OC2_SetConfig+0xe8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_OC2_SetConfig+0x94>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a17      	ldr	r2, [pc, #92]	; (800626c <TIM_OC2_SetConfig+0xec>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d113      	bne.n	800623c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800621a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	feff8fff 	.word	0xfeff8fff
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400

08006270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <TIM_OC3_SetConfig+0xe0>)
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a22      	ldr	r2, [pc, #136]	; (8006354 <TIM_OC3_SetConfig+0xe4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_OC3_SetConfig+0x66>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a21      	ldr	r2, [pc, #132]	; (8006358 <TIM_OC3_SetConfig+0xe8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d10d      	bne.n	80062f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a17      	ldr	r2, [pc, #92]	; (8006354 <TIM_OC3_SetConfig+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_OC3_SetConfig+0x92>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a16      	ldr	r2, [pc, #88]	; (8006358 <TIM_OC3_SetConfig+0xe8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d113      	bne.n	800632a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	621a      	str	r2, [r3, #32]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	fffeff8f 	.word	0xfffeff8f
 8006354:	40010000 	.word	0x40010000
 8006358:	40010400 	.word	0x40010400

0800635c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <TIM_OC4_SetConfig+0xa4>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <TIM_OC4_SetConfig+0xa8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC4_SetConfig+0x68>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a12      	ldr	r2, [pc, #72]	; (8006408 <TIM_OC4_SetConfig+0xac>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d109      	bne.n	80063d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	feff8fff 	.word	0xfeff8fff
 8006404:	40010000 	.word	0x40010000
 8006408:	40010400 	.word	0x40010400

0800640c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <TIM_OC5_SetConfig+0x98>)
 8006438:	4013      	ands	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800644c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <TIM_OC5_SetConfig+0x9c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <TIM_OC5_SetConfig+0x5e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <TIM_OC5_SetConfig+0xa0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d109      	bne.n	800647e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	fffeff8f 	.word	0xfffeff8f
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4b1c      	ldr	r3, [pc, #112]	; (800654c <TIM_OC6_SetConfig+0x9c>)
 80064dc:	4013      	ands	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	051b      	lsls	r3, r3, #20
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a13      	ldr	r2, [pc, #76]	; (8006550 <TIM_OC6_SetConfig+0xa0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC6_SetConfig+0x60>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a12      	ldr	r2, [pc, #72]	; (8006554 <TIM_OC6_SetConfig+0xa4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	feff8fff 	.word	0xfeff8fff
 8006550:	40010000 	.word	0x40010000
 8006554:	40010400 	.word	0x40010400

08006558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 030a 	bic.w	r3, r3, #10
 8006594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b087      	sub	sp, #28
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0210 	bic.w	r2, r3, #16
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	f043 0307 	orr.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	431a      	orrs	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4313      	orrs	r3, r2
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2201      	movs	r2, #1
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e06d      	b.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a30      	ldr	r2, [pc, #192]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2f      	ldr	r2, [pc, #188]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800672a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d022      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d01d      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d018      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00e      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a15      	ldr	r2, [pc, #84]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10c      	bne.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40001800 	.word	0x40001800

080067f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e040      	b.n	80068c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fc ff2c 	bl	80036b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2224      	movs	r2, #36	; 0x24
 800685c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8be 	bl	80069f0 <UART_SetConfig>
 8006874:	4603      	mov	r3, r0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e022      	b.n	80068c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb5c 	bl	8006f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800689a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fbe3 	bl	8007088 <UART_CheckIdleState>
 80068c2:	4603      	mov	r3, r0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d17f      	bne.n	80069e4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_UART_Transmit+0x24>
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e078      	b.n	80069e6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_UART_Transmit+0x36>
 80068fe:	2302      	movs	r3, #2
 8006900:	e071      	b.n	80069e6 <HAL_UART_Transmit+0x11a>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2221      	movs	r2, #33	; 0x21
 8006914:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006916:	f7fd f8df 	bl	8003ad8 <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006934:	d108      	bne.n	8006948 <HAL_UART_Transmit+0x7c>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e003      	b.n	8006950 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006958:	e02c      	b.n	80069b4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fbd4 	bl	8007112 <UART_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e038      	b.n	80069e6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	3302      	adds	r3, #2
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	e007      	b.n	80069a2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	781a      	ldrb	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3301      	adds	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1cc      	bne.n	800695a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fba1 	bl	8007112 <UART_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e005      	b.n	80069e6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4bb1      	ldr	r3, [pc, #708]	; (8006ce4 <UART_SetConfig+0x2f4>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	6939      	ldr	r1, [r7, #16]
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a9f      	ldr	r2, [pc, #636]	; (8006ce8 <UART_SetConfig+0x2f8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d121      	bne.n	8006ab4 <UART_SetConfig+0xc4>
 8006a70:	4b9e      	ldr	r3, [pc, #632]	; (8006cec <UART_SetConfig+0x2fc>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d816      	bhi.n	8006aac <UART_SetConfig+0xbc>
 8006a7e:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x94>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006a95 	.word	0x08006a95
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006a9b 	.word	0x08006a9b
 8006a90:	08006aa7 	.word	0x08006aa7
 8006a94:	2301      	movs	r3, #1
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e151      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e14e      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e14b      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	77fb      	strb	r3, [r7, #31]
 8006aaa:	e148      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006aac:	2310      	movs	r3, #16
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	bf00      	nop
 8006ab2:	e144      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a8d      	ldr	r2, [pc, #564]	; (8006cf0 <UART_SetConfig+0x300>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d134      	bne.n	8006b28 <UART_SetConfig+0x138>
 8006abe:	4b8b      	ldr	r3, [pc, #556]	; (8006cec <UART_SetConfig+0x2fc>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f003 030c 	and.w	r3, r3, #12
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	d829      	bhi.n	8006b20 <UART_SetConfig+0x130>
 8006acc:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0xe4>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006b21 	.word	0x08006b21
 8006adc:	08006b21 	.word	0x08006b21
 8006ae0:	08006b21 	.word	0x08006b21
 8006ae4:	08006b15 	.word	0x08006b15
 8006ae8:	08006b21 	.word	0x08006b21
 8006aec:	08006b21 	.word	0x08006b21
 8006af0:	08006b21 	.word	0x08006b21
 8006af4:	08006b0f 	.word	0x08006b0f
 8006af8:	08006b21 	.word	0x08006b21
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b21 	.word	0x08006b21
 8006b04:	08006b1b 	.word	0x08006b1b
 8006b08:	2300      	movs	r3, #0
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e117      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e114      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b14:	2304      	movs	r3, #4
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e111      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e10e      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b20:	2310      	movs	r3, #16
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	bf00      	nop
 8006b26:	e10a      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a71      	ldr	r2, [pc, #452]	; (8006cf4 <UART_SetConfig+0x304>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d120      	bne.n	8006b74 <UART_SetConfig+0x184>
 8006b32:	4b6e      	ldr	r3, [pc, #440]	; (8006cec <UART_SetConfig+0x2fc>)
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d00f      	beq.n	8006b60 <UART_SetConfig+0x170>
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d802      	bhi.n	8006b4a <UART_SetConfig+0x15a>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <UART_SetConfig+0x164>
 8006b48:	e010      	b.n	8006b6c <UART_SetConfig+0x17c>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d005      	beq.n	8006b5a <UART_SetConfig+0x16a>
 8006b4e:	2b30      	cmp	r3, #48	; 0x30
 8006b50:	d009      	beq.n	8006b66 <UART_SetConfig+0x176>
 8006b52:	e00b      	b.n	8006b6c <UART_SetConfig+0x17c>
 8006b54:	2300      	movs	r3, #0
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e0f1      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e0ee      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b60:	2304      	movs	r3, #4
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e0eb      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b66:	2308      	movs	r3, #8
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e0e8      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	bf00      	nop
 8006b72:	e0e4      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a5f      	ldr	r2, [pc, #380]	; (8006cf8 <UART_SetConfig+0x308>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d120      	bne.n	8006bc0 <UART_SetConfig+0x1d0>
 8006b7e:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <UART_SetConfig+0x2fc>)
 8006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d00f      	beq.n	8006bac <UART_SetConfig+0x1bc>
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d802      	bhi.n	8006b96 <UART_SetConfig+0x1a6>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <UART_SetConfig+0x1b0>
 8006b94:	e010      	b.n	8006bb8 <UART_SetConfig+0x1c8>
 8006b96:	2b80      	cmp	r3, #128	; 0x80
 8006b98:	d005      	beq.n	8006ba6 <UART_SetConfig+0x1b6>
 8006b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b9c:	d009      	beq.n	8006bb2 <UART_SetConfig+0x1c2>
 8006b9e:	e00b      	b.n	8006bb8 <UART_SetConfig+0x1c8>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e0cb      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e0c8      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006bac:	2304      	movs	r3, #4
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e0c5      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e0c2      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	bf00      	nop
 8006bbe:	e0be      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a4d      	ldr	r2, [pc, #308]	; (8006cfc <UART_SetConfig+0x30c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d124      	bne.n	8006c14 <UART_SetConfig+0x224>
 8006bca:	4b48      	ldr	r3, [pc, #288]	; (8006cec <UART_SetConfig+0x2fc>)
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd8:	d012      	beq.n	8006c00 <UART_SetConfig+0x210>
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bde:	d802      	bhi.n	8006be6 <UART_SetConfig+0x1f6>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <UART_SetConfig+0x204>
 8006be4:	e012      	b.n	8006c0c <UART_SetConfig+0x21c>
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bea:	d006      	beq.n	8006bfa <UART_SetConfig+0x20a>
 8006bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf0:	d009      	beq.n	8006c06 <UART_SetConfig+0x216>
 8006bf2:	e00b      	b.n	8006c0c <UART_SetConfig+0x21c>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e0a1      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e09e      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c00:	2304      	movs	r3, #4
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e09b      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c06:	2308      	movs	r3, #8
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e098      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	bf00      	nop
 8006c12:	e094      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a39      	ldr	r2, [pc, #228]	; (8006d00 <UART_SetConfig+0x310>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d124      	bne.n	8006c68 <UART_SetConfig+0x278>
 8006c1e:	4b33      	ldr	r3, [pc, #204]	; (8006cec <UART_SetConfig+0x2fc>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2c:	d012      	beq.n	8006c54 <UART_SetConfig+0x264>
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d802      	bhi.n	8006c3a <UART_SetConfig+0x24a>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <UART_SetConfig+0x258>
 8006c38:	e012      	b.n	8006c60 <UART_SetConfig+0x270>
 8006c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3e:	d006      	beq.n	8006c4e <UART_SetConfig+0x25e>
 8006c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c44:	d009      	beq.n	8006c5a <UART_SetConfig+0x26a>
 8006c46:	e00b      	b.n	8006c60 <UART_SetConfig+0x270>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e077      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e074      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c54:	2304      	movs	r3, #4
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e071      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e06e      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c60:	2310      	movs	r3, #16
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	bf00      	nop
 8006c66:	e06a      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a25      	ldr	r2, [pc, #148]	; (8006d04 <UART_SetConfig+0x314>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d124      	bne.n	8006cbc <UART_SetConfig+0x2cc>
 8006c72:	4b1e      	ldr	r3, [pc, #120]	; (8006cec <UART_SetConfig+0x2fc>)
 8006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c80:	d012      	beq.n	8006ca8 <UART_SetConfig+0x2b8>
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	d802      	bhi.n	8006c8e <UART_SetConfig+0x29e>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <UART_SetConfig+0x2ac>
 8006c8c:	e012      	b.n	8006cb4 <UART_SetConfig+0x2c4>
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	d006      	beq.n	8006ca2 <UART_SetConfig+0x2b2>
 8006c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c98:	d009      	beq.n	8006cae <UART_SetConfig+0x2be>
 8006c9a:	e00b      	b.n	8006cb4 <UART_SetConfig+0x2c4>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e04d      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e04a      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e047      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006cae:	2308      	movs	r3, #8
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e044      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	bf00      	nop
 8006cba:	e040      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <UART_SetConfig+0x318>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d139      	bne.n	8006d3a <UART_SetConfig+0x34a>
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <UART_SetConfig+0x2fc>)
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd4:	d027      	beq.n	8006d26 <UART_SetConfig+0x336>
 8006cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cda:	d817      	bhi.n	8006d0c <UART_SetConfig+0x31c>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01c      	beq.n	8006d1a <UART_SetConfig+0x32a>
 8006ce0:	e027      	b.n	8006d32 <UART_SetConfig+0x342>
 8006ce2:	bf00      	nop
 8006ce4:	efff69f3 	.word	0xefff69f3
 8006ce8:	40011000 	.word	0x40011000
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	40004400 	.word	0x40004400
 8006cf4:	40004800 	.word	0x40004800
 8006cf8:	40004c00 	.word	0x40004c00
 8006cfc:	40005000 	.word	0x40005000
 8006d00:	40011400 	.word	0x40011400
 8006d04:	40007800 	.word	0x40007800
 8006d08:	40007c00 	.word	0x40007c00
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d10:	d006      	beq.n	8006d20 <UART_SetConfig+0x330>
 8006d12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d16:	d009      	beq.n	8006d2c <UART_SetConfig+0x33c>
 8006d18:	e00b      	b.n	8006d32 <UART_SetConfig+0x342>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e00e      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006d20:	2302      	movs	r3, #2
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e00b      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006d26:	2304      	movs	r3, #4
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e008      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006d32:	2310      	movs	r3, #16
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	bf00      	nop
 8006d38:	e001      	b.n	8006d3e <UART_SetConfig+0x34e>
 8006d3a:	2310      	movs	r3, #16
 8006d3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d46:	d17f      	bne.n	8006e48 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006d48:	7ffb      	ldrb	r3, [r7, #31]
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d85c      	bhi.n	8006e08 <UART_SetConfig+0x418>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0x364>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006d99 	.word	0x08006d99
 8006d5c:	08006db9 	.word	0x08006db9
 8006d60:	08006e09 	.word	0x08006e09
 8006d64:	08006dd1 	.word	0x08006dd1
 8006d68:	08006e09 	.word	0x08006e09
 8006d6c:	08006e09 	.word	0x08006e09
 8006d70:	08006e09 	.word	0x08006e09
 8006d74:	08006df1 	.word	0x08006df1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d78:	f7fd fff0 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8006d7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	005a      	lsls	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	441a      	add	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	61bb      	str	r3, [r7, #24]
        break;
 8006d96:	e03a      	b.n	8006e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d98:	f7fd fff4 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8006d9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	005a      	lsls	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	441a      	add	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	61bb      	str	r3, [r7, #24]
        break;
 8006db6:	e02a      	b.n	8006e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	085a      	lsrs	r2, r3, #1
 8006dbe:	4b5f      	ldr	r3, [pc, #380]	; (8006f3c <UART_SetConfig+0x54c>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6852      	ldr	r2, [r2, #4]
 8006dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	61bb      	str	r3, [r7, #24]
        break;
 8006dce:	e01e      	b.n	8006e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd0:	f7fd fee0 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8006dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	005a      	lsls	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	61bb      	str	r3, [r7, #24]
        break;
 8006dee:	e00e      	b.n	8006e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	61bb      	str	r3, [r7, #24]
        break;
 8006e06:	e002      	b.n	8006e0e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
        break;
 8006e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d916      	bls.n	8006e42 <UART_SetConfig+0x452>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1a:	d212      	bcs.n	8006e42 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f023 030f 	bic.w	r3, r3, #15
 8006e24:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	897b      	ldrh	r3, [r7, #10]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	897a      	ldrh	r2, [r7, #10]
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	e070      	b.n	8006f24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
 8006e46:	e06d      	b.n	8006f24 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d859      	bhi.n	8006f02 <UART_SetConfig+0x512>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <UART_SetConfig+0x464>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e97 	.word	0x08006e97
 8006e5c:	08006eb5 	.word	0x08006eb5
 8006e60:	08006f03 	.word	0x08006f03
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006f03 	.word	0x08006f03
 8006e6c:	08006f03 	.word	0x08006f03
 8006e70:	08006f03 	.word	0x08006f03
 8006e74:	08006eeb 	.word	0x08006eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e78:	f7fd ff70 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8006e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	085a      	lsrs	r2, r3, #1
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	441a      	add	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	61bb      	str	r3, [r7, #24]
        break;
 8006e94:	e038      	b.n	8006f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e96:	f7fd ff75 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8006e9a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	085a      	lsrs	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	61bb      	str	r3, [r7, #24]
        break;
 8006eb2:	e029      	b.n	8006f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	085a      	lsrs	r2, r3, #1
 8006eba:	4b21      	ldr	r3, [pc, #132]	; (8006f40 <UART_SetConfig+0x550>)
 8006ebc:	4413      	add	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6852      	ldr	r2, [r2, #4]
 8006ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	61bb      	str	r3, [r7, #24]
        break;
 8006eca:	e01d      	b.n	8006f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ecc:	f7fd fe62 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8006ed0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	085a      	lsrs	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	441a      	add	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	61bb      	str	r3, [r7, #24]
        break;
 8006ee8:	e00e      	b.n	8006f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	61bb      	str	r3, [r7, #24]
        break;
 8006f00:	e002      	b.n	8006f08 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
        break;
 8006f06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d908      	bls.n	8006f20 <UART_SetConfig+0x530>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d204      	bcs.n	8006f20 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	e001      	b.n	8006f24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	01e84800 	.word	0x01e84800
 8006f40:	00f42400 	.word	0x00f42400

08006f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01a      	beq.n	800705a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007042:	d10a      	bne.n	800705a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
  }
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af02      	add	r7, sp, #8
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007096:	f7fc fd1f 	bl	8003ad8 <HAL_GetTick>
 800709a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d10e      	bne.n	80070c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f82a 	bl	8007112 <UART_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e020      	b.n	800710a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d10e      	bne.n	80070f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f814 	bl	8007112 <UART_WaitOnFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e00a      	b.n	800710a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007122:	e05d      	b.n	80071e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d059      	beq.n	80071e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712c:	f7fc fcd4 	bl	8003ad8 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	429a      	cmp	r2, r3
 800713a:	d302      	bcc.n	8007142 <UART_WaitOnFlagUntilTimeout+0x30>
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d11b      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e042      	b.n	8007200 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02b      	beq.n	80071e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007196:	d123      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2220      	movs	r2, #32
 80071cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e00f      	b.n	8007200 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d092      	beq.n	8007124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007208:	b084      	sub	sp, #16
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	f107 001c 	add.w	r0, r7, #28
 8007216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	2b01      	cmp	r3, #1
 800721e:	d120      	bne.n	8007262 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <USB_CoreInit+0xac>)
 8007232:	4013      	ands	r3, r2
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d105      	bne.n	8007256 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa52 	bl	8007700 <USB_CoreReset>
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]
 8007260:	e010      	b.n	8007284 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa46 	bl	8007700 <USB_CoreReset>
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10b      	bne.n	80072a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f043 0206 	orr.w	r2, r3, #6
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f043 0220 	orr.w	r2, r3, #32
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ae:	b004      	add	sp, #16
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	ffbdffbf 	.word	0xffbdffbf

080072b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f023 0201 	bic.w	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d106      	bne.n	8007306 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60da      	str	r2, [r3, #12]
 8007304:	e00b      	b.n	800731e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
 8007318:	e001      	b.n	800731e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e003      	b.n	8007326 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800731e:	2032      	movs	r0, #50	; 0x32
 8007320:	f7fc fbe6 	bl	8003af0 <HAL_Delay>

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007330:	b084      	sub	sp, #16
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800733e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	e009      	b.n	8007364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3340      	adds	r3, #64	; 0x40
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	2200      	movs	r2, #0
 800735c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	3301      	adds	r3, #1
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2b0e      	cmp	r3, #14
 8007368:	d9f2      	bls.n	8007350 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800736a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11c      	bne.n	80073aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e005      	b.n	80073b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c8:	4619      	mov	r1, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d0:	461a      	mov	r2, r3
 80073d2:	680b      	ldr	r3, [r1, #0]
 80073d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d10c      	bne.n	80073f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d104      	bne.n	80073ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073e2:	2100      	movs	r1, #0
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f959 	bl	800769c <USB_SetDevSpeed>
 80073ea:	e018      	b.n	800741e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073ec:	2101      	movs	r1, #1
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f954 	bl	800769c <USB_SetDevSpeed>
 80073f4:	e013      	b.n	800741e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d10c      	bne.n	8007416 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007402:	2100      	movs	r1, #0
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f949 	bl	800769c <USB_SetDevSpeed>
 800740a:	e008      	b.n	800741e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800740c:	2101      	movs	r1, #1
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f944 	bl	800769c <USB_SetDevSpeed>
 8007414:	e003      	b.n	800741e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007416:	2103      	movs	r1, #3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f93f 	bl	800769c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800741e:	2110      	movs	r1, #16
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8f3 	bl	800760c <USB_FlushTxFifo>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f911 	bl	8007658 <USB_FlushRxFifo>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	461a      	mov	r2, r3
 8007448:	2300      	movs	r3, #0
 800744a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	461a      	mov	r2, r3
 8007454:	2300      	movs	r3, #0
 8007456:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	461a      	mov	r2, r3
 8007460:	2300      	movs	r3, #0
 8007462:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	e043      	b.n	80074f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800747c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007480:	d118      	bne.n	80074b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007494:	461a      	mov	r2, r3
 8007496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	e013      	b.n	80074c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074aa:	461a      	mov	r2, r3
 80074ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e008      	b.n	80074c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	461a      	mov	r2, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d2:	461a      	mov	r2, r3
 80074d4:	2300      	movs	r3, #0
 80074d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	461a      	mov	r2, r3
 80074e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	3301      	adds	r3, #1
 80074f0:	613b      	str	r3, [r7, #16]
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d3b7      	bcc.n	800746a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	e043      	b.n	8007588 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007516:	d118      	bne.n	800754a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	461a      	mov	r2, r3
 800752c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e013      	b.n	800755c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007540:	461a      	mov	r2, r3
 8007542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e008      	b.n	800755c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007556:	461a      	mov	r2, r3
 8007558:	2300      	movs	r3, #0
 800755a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007568:	461a      	mov	r2, r3
 800756a:	2300      	movs	r3, #0
 800756c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	461a      	mov	r2, r3
 800757c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	429a      	cmp	r2, r3
 800758e:	d3b7      	bcc.n	8007500 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800759e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f043 0210 	orr.w	r2, r3, #16
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <USB_DevInit+0x2d4>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f043 0208 	orr.w	r2, r3, #8
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d105      	bne.n	80075f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <USB_DevInit+0x2d8>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007600:	b004      	add	sp, #16
 8007602:	4770      	bx	lr
 8007604:	803c3800 	.word	0x803c3800
 8007608:	40000004 	.word	0x40000004

0800760c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	019b      	lsls	r3, r3, #6
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a09      	ldr	r2, [pc, #36]	; (8007654 <USB_FlushTxFifo+0x48>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d901      	bls.n	8007638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e006      	b.n	8007646 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b20      	cmp	r3, #32
 8007642:	d0f0      	beq.n	8007626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	00030d40 	.word	0x00030d40

08007658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2210      	movs	r2, #16
 8007668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a09      	ldr	r2, [pc, #36]	; (8007698 <USB_FlushRxFifo+0x40>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d901      	bls.n	800767c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e006      	b.n	800768a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b10      	cmp	r3, #16
 8007686:	d0f0      	beq.n	800766a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	00030d40 	.word	0x00030d40

0800769c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076bc:	4313      	orrs	r3, r2
 80076be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e8:	f043 0302 	orr.w	r3, r3, #2
 80076ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80076ee:	2003      	movs	r0, #3
 80076f0:	f7fc f9fe 	bl	8003af0 <HAL_Delay>

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a13      	ldr	r2, [pc, #76]	; (8007764 <USB_CoreReset+0x64>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e01b      	b.n	8007756 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	daf2      	bge.n	800770c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4a09      	ldr	r2, [pc, #36]	; (8007764 <USB_CoreReset+0x64>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e006      	b.n	8007756 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d0f0      	beq.n	8007736 <USB_CoreReset+0x36>

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	00030d40 	.word	0x00030d40

08007768 <__errno>:
 8007768:	4b01      	ldr	r3, [pc, #4]	; (8007770 <__errno+0x8>)
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000028 	.word	0x20000028

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4e0d      	ldr	r6, [pc, #52]	; (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	; (80077b0 <__libc_init_array+0x3c>)
 800777a:	1ba4      	subs	r4, r4, r6
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2500      	movs	r5, #0
 8007780:	42a5      	cmp	r5, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4e0b      	ldr	r6, [pc, #44]	; (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	; (80077b8 <__libc_init_array+0x44>)
 8007788:	f002 fb1c 	bl	8009dc4 <_init>
 800778c:	1ba4      	subs	r4, r4, r6
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2500      	movs	r5, #0
 8007792:	42a5      	cmp	r5, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800779c:	4798      	blx	r3
 800779e:	3501      	adds	r5, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a6:	4798      	blx	r3
 80077a8:	3501      	adds	r5, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	0800a0d8 	.word	0x0800a0d8
 80077b0:	0800a0d8 	.word	0x0800a0d8
 80077b4:	0800a0d8 	.word	0x0800a0d8
 80077b8:	0800a0dc 	.word	0x0800a0dc

080077bc <memset>:
 80077bc:	4402      	add	r2, r0
 80077be:	4603      	mov	r3, r0
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d100      	bne.n	80077c6 <memset+0xa>
 80077c4:	4770      	bx	lr
 80077c6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ca:	e7f9      	b.n	80077c0 <memset+0x4>

080077cc <__cvt>:
 80077cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ce:	ed2d 8b02 	vpush	{d8}
 80077d2:	eeb0 8b40 	vmov.f64	d8, d0
 80077d6:	b085      	sub	sp, #20
 80077d8:	4617      	mov	r7, r2
 80077da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80077dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80077de:	ee18 2a90 	vmov	r2, s17
 80077e2:	f025 0520 	bic.w	r5, r5, #32
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	bfb6      	itet	lt
 80077ea:	222d      	movlt	r2, #45	; 0x2d
 80077ec:	2200      	movge	r2, #0
 80077ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80077f2:	2d46      	cmp	r5, #70	; 0x46
 80077f4:	460c      	mov	r4, r1
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	d004      	beq.n	8007804 <__cvt+0x38>
 80077fa:	2d45      	cmp	r5, #69	; 0x45
 80077fc:	d100      	bne.n	8007800 <__cvt+0x34>
 80077fe:	3401      	adds	r4, #1
 8007800:	2102      	movs	r1, #2
 8007802:	e000      	b.n	8007806 <__cvt+0x3a>
 8007804:	2103      	movs	r1, #3
 8007806:	ab03      	add	r3, sp, #12
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	ab02      	add	r3, sp, #8
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	4622      	mov	r2, r4
 8007810:	4633      	mov	r3, r6
 8007812:	eeb0 0b48 	vmov.f64	d0, d8
 8007816:	f000 fddb 	bl	80083d0 <_dtoa_r>
 800781a:	2d47      	cmp	r5, #71	; 0x47
 800781c:	d101      	bne.n	8007822 <__cvt+0x56>
 800781e:	07fb      	lsls	r3, r7, #31
 8007820:	d51e      	bpl.n	8007860 <__cvt+0x94>
 8007822:	2d46      	cmp	r5, #70	; 0x46
 8007824:	eb00 0304 	add.w	r3, r0, r4
 8007828:	d10c      	bne.n	8007844 <__cvt+0x78>
 800782a:	7802      	ldrb	r2, [r0, #0]
 800782c:	2a30      	cmp	r2, #48	; 0x30
 800782e:	d107      	bne.n	8007840 <__cvt+0x74>
 8007830:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007838:	bf1c      	itt	ne
 800783a:	f1c4 0401 	rsbne	r4, r4, #1
 800783e:	6034      	strne	r4, [r6, #0]
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	4413      	add	r3, r2
 8007844:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	d007      	beq.n	800785e <__cvt+0x92>
 800784e:	2130      	movs	r1, #48	; 0x30
 8007850:	9a03      	ldr	r2, [sp, #12]
 8007852:	429a      	cmp	r2, r3
 8007854:	d204      	bcs.n	8007860 <__cvt+0x94>
 8007856:	1c54      	adds	r4, r2, #1
 8007858:	9403      	str	r4, [sp, #12]
 800785a:	7011      	strb	r1, [r2, #0]
 800785c:	e7f8      	b.n	8007850 <__cvt+0x84>
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007864:	1a1b      	subs	r3, r3, r0
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	b005      	add	sp, #20
 800786a:	ecbd 8b02 	vpop	{d8}
 800786e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007870 <__exponent>:
 8007870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007872:	2900      	cmp	r1, #0
 8007874:	4604      	mov	r4, r0
 8007876:	bfba      	itte	lt
 8007878:	4249      	neglt	r1, r1
 800787a:	232d      	movlt	r3, #45	; 0x2d
 800787c:	232b      	movge	r3, #43	; 0x2b
 800787e:	2909      	cmp	r1, #9
 8007880:	f804 2b02 	strb.w	r2, [r4], #2
 8007884:	7043      	strb	r3, [r0, #1]
 8007886:	dd20      	ble.n	80078ca <__exponent+0x5a>
 8007888:	f10d 0307 	add.w	r3, sp, #7
 800788c:	461f      	mov	r7, r3
 800788e:	260a      	movs	r6, #10
 8007890:	fb91 f5f6 	sdiv	r5, r1, r6
 8007894:	fb06 1115 	mls	r1, r6, r5, r1
 8007898:	3130      	adds	r1, #48	; 0x30
 800789a:	2d09      	cmp	r5, #9
 800789c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80078a4:	4629      	mov	r1, r5
 80078a6:	dc09      	bgt.n	80078bc <__exponent+0x4c>
 80078a8:	3130      	adds	r1, #48	; 0x30
 80078aa:	3b02      	subs	r3, #2
 80078ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078b0:	42bb      	cmp	r3, r7
 80078b2:	4622      	mov	r2, r4
 80078b4:	d304      	bcc.n	80078c0 <__exponent+0x50>
 80078b6:	1a10      	subs	r0, r2, r0
 80078b8:	b003      	add	sp, #12
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078bc:	4613      	mov	r3, r2
 80078be:	e7e7      	b.n	8007890 <__exponent+0x20>
 80078c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c4:	f804 2b01 	strb.w	r2, [r4], #1
 80078c8:	e7f2      	b.n	80078b0 <__exponent+0x40>
 80078ca:	2330      	movs	r3, #48	; 0x30
 80078cc:	4419      	add	r1, r3
 80078ce:	7083      	strb	r3, [r0, #2]
 80078d0:	1d02      	adds	r2, r0, #4
 80078d2:	70c1      	strb	r1, [r0, #3]
 80078d4:	e7ef      	b.n	80078b6 <__exponent+0x46>
	...

080078d8 <_printf_float>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b08d      	sub	sp, #52	; 0x34
 80078de:	460c      	mov	r4, r1
 80078e0:	4616      	mov	r6, r2
 80078e2:	461f      	mov	r7, r3
 80078e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80078e8:	4605      	mov	r5, r0
 80078ea:	f001 fc37 	bl	800915c <_localeconv_r>
 80078ee:	f8d0 b000 	ldr.w	fp, [r0]
 80078f2:	4658      	mov	r0, fp
 80078f4:	f7f8 fca4 	bl	8000240 <strlen>
 80078f8:	2300      	movs	r3, #0
 80078fa:	930a      	str	r3, [sp, #40]	; 0x28
 80078fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007900:	9005      	str	r0, [sp, #20]
 8007902:	3307      	adds	r3, #7
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	f103 0108 	add.w	r1, r3, #8
 800790c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007910:	6822      	ldr	r2, [r4, #0]
 8007912:	f8c8 1000 	str.w	r1, [r8]
 8007916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800791a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800791e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007ba8 <_printf_float+0x2d0>
 8007922:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007926:	eeb0 6bc0 	vabs.f64	d6, d0
 800792a:	eeb4 6b47 	vcmp.f64	d6, d7
 800792e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007932:	dd24      	ble.n	800797e <_printf_float+0xa6>
 8007934:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	d502      	bpl.n	8007944 <_printf_float+0x6c>
 800793e:	232d      	movs	r3, #45	; 0x2d
 8007940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007944:	499a      	ldr	r1, [pc, #616]	; (8007bb0 <_printf_float+0x2d8>)
 8007946:	4b9b      	ldr	r3, [pc, #620]	; (8007bb4 <_printf_float+0x2dc>)
 8007948:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800794c:	bf8c      	ite	hi
 800794e:	4688      	movhi	r8, r1
 8007950:	4698      	movls	r8, r3
 8007952:	f022 0204 	bic.w	r2, r2, #4
 8007956:	2303      	movs	r3, #3
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	6022      	str	r2, [r4, #0]
 800795c:	f04f 0a00 	mov.w	sl, #0
 8007960:	9700      	str	r7, [sp, #0]
 8007962:	4633      	mov	r3, r6
 8007964:	aa0b      	add	r2, sp, #44	; 0x2c
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f9e1 	bl	8007d30 <_printf_common>
 800796e:	3001      	adds	r0, #1
 8007970:	f040 8089 	bne.w	8007a86 <_printf_float+0x1ae>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b00d      	add	sp, #52	; 0x34
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007986:	d702      	bvc.n	800798e <_printf_float+0xb6>
 8007988:	498b      	ldr	r1, [pc, #556]	; (8007bb8 <_printf_float+0x2e0>)
 800798a:	4b8c      	ldr	r3, [pc, #560]	; (8007bbc <_printf_float+0x2e4>)
 800798c:	e7dc      	b.n	8007948 <_printf_float+0x70>
 800798e:	6861      	ldr	r1, [r4, #4]
 8007990:	1c4b      	adds	r3, r1, #1
 8007992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007996:	ab0a      	add	r3, sp, #40	; 0x28
 8007998:	a809      	add	r0, sp, #36	; 0x24
 800799a:	d13b      	bne.n	8007a14 <_printf_float+0x13c>
 800799c:	2106      	movs	r1, #6
 800799e:	6061      	str	r1, [r4, #4]
 80079a0:	f04f 0c00 	mov.w	ip, #0
 80079a4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80079a8:	e9cd 0900 	strd	r0, r9, [sp]
 80079ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	6861      	ldr	r1, [r4, #4]
 80079b4:	4628      	mov	r0, r5
 80079b6:	f7ff ff09 	bl	80077cc <__cvt>
 80079ba:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80079be:	2b47      	cmp	r3, #71	; 0x47
 80079c0:	4680      	mov	r8, r0
 80079c2:	d109      	bne.n	80079d8 <_printf_float+0x100>
 80079c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c6:	1cd8      	adds	r0, r3, #3
 80079c8:	db02      	blt.n	80079d0 <_printf_float+0xf8>
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	4293      	cmp	r3, r2
 80079ce:	dd47      	ble.n	8007a60 <_printf_float+0x188>
 80079d0:	f1a9 0902 	sub.w	r9, r9, #2
 80079d4:	fa5f f989 	uxtb.w	r9, r9
 80079d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079de:	d824      	bhi.n	8007a2a <_printf_float+0x152>
 80079e0:	3901      	subs	r1, #1
 80079e2:	464a      	mov	r2, r9
 80079e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079e8:	9109      	str	r1, [sp, #36]	; 0x24
 80079ea:	f7ff ff41 	bl	8007870 <__exponent>
 80079ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f0:	1813      	adds	r3, r2, r0
 80079f2:	2a01      	cmp	r2, #1
 80079f4:	4682      	mov	sl, r0
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	dc02      	bgt.n	8007a00 <_printf_float+0x128>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	07d1      	lsls	r1, r2, #31
 80079fe:	d501      	bpl.n	8007a04 <_printf_float+0x12c>
 8007a00:	3301      	adds	r3, #1
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0a9      	beq.n	8007960 <_printf_float+0x88>
 8007a0c:	232d      	movs	r3, #45	; 0x2d
 8007a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a12:	e7a5      	b.n	8007960 <_printf_float+0x88>
 8007a14:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007a18:	f000 8178 	beq.w	8007d0c <_printf_float+0x434>
 8007a1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a20:	d1be      	bne.n	80079a0 <_printf_float+0xc8>
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d1bc      	bne.n	80079a0 <_printf_float+0xc8>
 8007a26:	2101      	movs	r1, #1
 8007a28:	e7b9      	b.n	800799e <_printf_float+0xc6>
 8007a2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007a2e:	d119      	bne.n	8007a64 <_printf_float+0x18c>
 8007a30:	2900      	cmp	r1, #0
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	dd0c      	ble.n	8007a50 <_printf_float+0x178>
 8007a36:	6121      	str	r1, [r4, #16]
 8007a38:	b913      	cbnz	r3, 8007a40 <_printf_float+0x168>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	07d2      	lsls	r2, r2, #31
 8007a3e:	d502      	bpl.n	8007a46 <_printf_float+0x16e>
 8007a40:	3301      	adds	r3, #1
 8007a42:	440b      	add	r3, r1
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a48:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a4a:	f04f 0a00 	mov.w	sl, #0
 8007a4e:	e7d9      	b.n	8007a04 <_printf_float+0x12c>
 8007a50:	b913      	cbnz	r3, 8007a58 <_printf_float+0x180>
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	07d0      	lsls	r0, r2, #31
 8007a56:	d501      	bpl.n	8007a5c <_printf_float+0x184>
 8007a58:	3302      	adds	r3, #2
 8007a5a:	e7f3      	b.n	8007a44 <_printf_float+0x16c>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e7f1      	b.n	8007a44 <_printf_float+0x16c>
 8007a60:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	db05      	blt.n	8007a78 <_printf_float+0x1a0>
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	07d1      	lsls	r1, r2, #31
 8007a72:	d5e8      	bpl.n	8007a46 <_printf_float+0x16e>
 8007a74:	3301      	adds	r3, #1
 8007a76:	e7e5      	b.n	8007a44 <_printf_float+0x16c>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfd4      	ite	le
 8007a7c:	f1c3 0302 	rsble	r3, r3, #2
 8007a80:	2301      	movgt	r3, #1
 8007a82:	4413      	add	r3, r2
 8007a84:	e7de      	b.n	8007a44 <_printf_float+0x16c>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	055a      	lsls	r2, r3, #21
 8007a8a:	d407      	bmi.n	8007a9c <_printf_float+0x1c4>
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	4642      	mov	r2, r8
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	d12a      	bne.n	8007af0 <_printf_float+0x218>
 8007a9a:	e76b      	b.n	8007974 <_printf_float+0x9c>
 8007a9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007aa0:	f240 80de 	bls.w	8007c60 <_printf_float+0x388>
 8007aa4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007aa8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	d133      	bne.n	8007b1a <_printf_float+0x242>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4a42      	ldr	r2, [pc, #264]	; (8007bc0 <_printf_float+0x2e8>)
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f af59 	beq.w	8007974 <_printf_float+0x9c>
 8007ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	db02      	blt.n	8007ad0 <_printf_float+0x1f8>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	07d8      	lsls	r0, r3, #31
 8007ace:	d50f      	bpl.n	8007af0 <_printf_float+0x218>
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	465a      	mov	r2, fp
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f af4a 	beq.w	8007974 <_printf_float+0x9c>
 8007ae0:	f04f 0800 	mov.w	r8, #0
 8007ae4:	f104 091a 	add.w	r9, r4, #26
 8007ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4543      	cmp	r3, r8
 8007aee:	dc09      	bgt.n	8007b04 <_printf_float+0x22c>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	079b      	lsls	r3, r3, #30
 8007af4:	f100 8105 	bmi.w	8007d02 <_printf_float+0x42a>
 8007af8:	68e0      	ldr	r0, [r4, #12]
 8007afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afc:	4298      	cmp	r0, r3
 8007afe:	bfb8      	it	lt
 8007b00:	4618      	movlt	r0, r3
 8007b02:	e739      	b.n	8007978 <_printf_float+0xa0>
 8007b04:	2301      	movs	r3, #1
 8007b06:	464a      	mov	r2, r9
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f af30 	beq.w	8007974 <_printf_float+0x9c>
 8007b14:	f108 0801 	add.w	r8, r8, #1
 8007b18:	e7e6      	b.n	8007ae8 <_printf_float+0x210>
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dc2b      	bgt.n	8007b78 <_printf_float+0x2a0>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4a27      	ldr	r2, [pc, #156]	; (8007bc0 <_printf_float+0x2e8>)
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f af22 	beq.w	8007974 <_printf_float+0x9c>
 8007b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b32:	b923      	cbnz	r3, 8007b3e <_printf_float+0x266>
 8007b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b36:	b913      	cbnz	r3, 8007b3e <_printf_float+0x266>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	07d9      	lsls	r1, r3, #31
 8007b3c:	d5d8      	bpl.n	8007af0 <_printf_float+0x218>
 8007b3e:	9b05      	ldr	r3, [sp, #20]
 8007b40:	465a      	mov	r2, fp
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f af13 	beq.w	8007974 <_printf_float+0x9c>
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	f104 0a1a 	add.w	sl, r4, #26
 8007b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b58:	425b      	negs	r3, r3
 8007b5a:	454b      	cmp	r3, r9
 8007b5c:	dc01      	bgt.n	8007b62 <_printf_float+0x28a>
 8007b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b60:	e795      	b.n	8007a8e <_printf_float+0x1b6>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4652      	mov	r2, sl
 8007b66:	4631      	mov	r1, r6
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b8      	blx	r7
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	f43f af01 	beq.w	8007974 <_printf_float+0x9c>
 8007b72:	f109 0901 	add.w	r9, r9, #1
 8007b76:	e7ee      	b.n	8007b56 <_printf_float+0x27e>
 8007b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bfa8      	it	ge
 8007b80:	461a      	movge	r2, r3
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	4691      	mov	r9, r2
 8007b86:	dd07      	ble.n	8007b98 <_printf_float+0x2c0>
 8007b88:	4613      	mov	r3, r2
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f aeee 	beq.w	8007974 <_printf_float+0x9c>
 8007b98:	f104 031a 	add.w	r3, r4, #26
 8007b9c:	f04f 0a00 	mov.w	sl, #0
 8007ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ba4:	9307      	str	r3, [sp, #28]
 8007ba6:	e017      	b.n	8007bd8 <_printf_float+0x300>
 8007ba8:	ffffffff 	.word	0xffffffff
 8007bac:	7fefffff 	.word	0x7fefffff
 8007bb0:	08009e14 	.word	0x08009e14
 8007bb4:	08009e10 	.word	0x08009e10
 8007bb8:	08009e1c 	.word	0x08009e1c
 8007bbc:	08009e18 	.word	0x08009e18
 8007bc0:	08009e20 	.word	0x08009e20
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	9a07      	ldr	r2, [sp, #28]
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f aed0 	beq.w	8007974 <_printf_float+0x9c>
 8007bd4:	f10a 0a01 	add.w	sl, sl, #1
 8007bd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bda:	9306      	str	r3, [sp, #24]
 8007bdc:	eba3 0309 	sub.w	r3, r3, r9
 8007be0:	4553      	cmp	r3, sl
 8007be2:	dcef      	bgt.n	8007bc4 <_printf_float+0x2ec>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	4498      	add	r8, r3
 8007be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bec:	429a      	cmp	r2, r3
 8007bee:	db15      	blt.n	8007c1c <_printf_float+0x344>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	07da      	lsls	r2, r3, #31
 8007bf4:	d412      	bmi.n	8007c1c <_printf_float+0x344>
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	9a06      	ldr	r2, [sp, #24]
 8007bfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bfc:	1a9a      	subs	r2, r3, r2
 8007bfe:	eba3 0a01 	sub.w	sl, r3, r1
 8007c02:	4592      	cmp	sl, r2
 8007c04:	bfa8      	it	ge
 8007c06:	4692      	movge	sl, r2
 8007c08:	f1ba 0f00 	cmp.w	sl, #0
 8007c0c:	dc0e      	bgt.n	8007c2c <_printf_float+0x354>
 8007c0e:	f04f 0800 	mov.w	r8, #0
 8007c12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c16:	f104 091a 	add.w	r9, r4, #26
 8007c1a:	e019      	b.n	8007c50 <_printf_float+0x378>
 8007c1c:	9b05      	ldr	r3, [sp, #20]
 8007c1e:	465a      	mov	r2, fp
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	d1e5      	bne.n	8007bf6 <_printf_float+0x31e>
 8007c2a:	e6a3      	b.n	8007974 <_printf_float+0x9c>
 8007c2c:	4653      	mov	r3, sl
 8007c2e:	4642      	mov	r2, r8
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	d1e9      	bne.n	8007c0e <_printf_float+0x336>
 8007c3a:	e69b      	b.n	8007974 <_printf_float+0x9c>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	464a      	mov	r2, r9
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f ae94 	beq.w	8007974 <_printf_float+0x9c>
 8007c4c:	f108 0801 	add.w	r8, r8, #1
 8007c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	eba3 030a 	sub.w	r3, r3, sl
 8007c5a:	4543      	cmp	r3, r8
 8007c5c:	dcee      	bgt.n	8007c3c <_printf_float+0x364>
 8007c5e:	e747      	b.n	8007af0 <_printf_float+0x218>
 8007c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c62:	2a01      	cmp	r2, #1
 8007c64:	dc01      	bgt.n	8007c6a <_printf_float+0x392>
 8007c66:	07db      	lsls	r3, r3, #31
 8007c68:	d539      	bpl.n	8007cde <_printf_float+0x406>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f ae7d 	beq.w	8007974 <_printf_float+0x9c>
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	465a      	mov	r2, fp
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	f43f ae73 	beq.w	8007974 <_printf_float+0x9c>
 8007c8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ca0:	d018      	beq.n	8007cd4 <_printf_float+0x3fc>
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	d10e      	bne.n	8007ccc <_printf_float+0x3f4>
 8007cae:	e661      	b.n	8007974 <_printf_float+0x9c>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	464a      	mov	r2, r9
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f ae5a 	beq.w	8007974 <_printf_float+0x9c>
 8007cc0:	f108 0801 	add.w	r8, r8, #1
 8007cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4543      	cmp	r3, r8
 8007cca:	dcf1      	bgt.n	8007cb0 <_printf_float+0x3d8>
 8007ccc:	4653      	mov	r3, sl
 8007cce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cd2:	e6dd      	b.n	8007a90 <_printf_float+0x1b8>
 8007cd4:	f04f 0800 	mov.w	r8, #0
 8007cd8:	f104 091a 	add.w	r9, r4, #26
 8007cdc:	e7f2      	b.n	8007cc4 <_printf_float+0x3ec>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e7df      	b.n	8007ca2 <_printf_float+0x3ca>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	464a      	mov	r2, r9
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	f43f ae41 	beq.w	8007974 <_printf_float+0x9c>
 8007cf2:	f108 0801 	add.w	r8, r8, #1
 8007cf6:	68e3      	ldr	r3, [r4, #12]
 8007cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	4543      	cmp	r3, r8
 8007cfe:	dcf0      	bgt.n	8007ce2 <_printf_float+0x40a>
 8007d00:	e6fa      	b.n	8007af8 <_printf_float+0x220>
 8007d02:	f04f 0800 	mov.w	r8, #0
 8007d06:	f104 0919 	add.w	r9, r4, #25
 8007d0a:	e7f4      	b.n	8007cf6 <_printf_float+0x41e>
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	f43f ae8a 	beq.w	8007a26 <_printf_float+0x14e>
 8007d12:	f04f 0c00 	mov.w	ip, #0
 8007d16:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007d1a:	e9cd 0900 	strd	r0, r9, [sp]
 8007d1e:	6022      	str	r2, [r4, #0]
 8007d20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d24:	4628      	mov	r0, r5
 8007d26:	f7ff fd51 	bl	80077cc <__cvt>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	e64a      	b.n	80079c4 <_printf_float+0xec>
 8007d2e:	bf00      	nop

08007d30 <_printf_common>:
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	4691      	mov	r9, r2
 8007d36:	461f      	mov	r7, r3
 8007d38:	688a      	ldr	r2, [r1, #8]
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d40:	4293      	cmp	r3, r2
 8007d42:	bfb8      	it	lt
 8007d44:	4613      	movlt	r3, r2
 8007d46:	f8c9 3000 	str.w	r3, [r9]
 8007d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	b112      	cbz	r2, 8007d5a <_printf_common+0x2a>
 8007d54:	3301      	adds	r3, #1
 8007d56:	f8c9 3000 	str.w	r3, [r9]
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	0699      	lsls	r1, r3, #26
 8007d5e:	bf42      	ittt	mi
 8007d60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d64:	3302      	addmi	r3, #2
 8007d66:	f8c9 3000 	strmi.w	r3, [r9]
 8007d6a:	6825      	ldr	r5, [r4, #0]
 8007d6c:	f015 0506 	ands.w	r5, r5, #6
 8007d70:	d107      	bne.n	8007d82 <_printf_common+0x52>
 8007d72:	f104 0a19 	add.w	sl, r4, #25
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	f8d9 2000 	ldr.w	r2, [r9]
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	42ab      	cmp	r3, r5
 8007d80:	dc28      	bgt.n	8007dd4 <_printf_common+0xa4>
 8007d82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	3300      	adds	r3, #0
 8007d8a:	bf18      	it	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	0692      	lsls	r2, r2, #26
 8007d90:	d42d      	bmi.n	8007dee <_printf_common+0xbe>
 8007d92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d96:	4639      	mov	r1, r7
 8007d98:	4630      	mov	r0, r6
 8007d9a:	47c0      	blx	r8
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d020      	beq.n	8007de2 <_printf_common+0xb2>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	68e5      	ldr	r5, [r4, #12]
 8007da4:	f8d9 2000 	ldr.w	r2, [r9]
 8007da8:	f003 0306 	and.w	r3, r3, #6
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	bf08      	it	eq
 8007db0:	1aad      	subeq	r5, r5, r2
 8007db2:	68a3      	ldr	r3, [r4, #8]
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	bf0c      	ite	eq
 8007db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dbc:	2500      	movne	r5, #0
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	bfc4      	itt	gt
 8007dc2:	1a9b      	subgt	r3, r3, r2
 8007dc4:	18ed      	addgt	r5, r5, r3
 8007dc6:	f04f 0900 	mov.w	r9, #0
 8007dca:	341a      	adds	r4, #26
 8007dcc:	454d      	cmp	r5, r9
 8007dce:	d11a      	bne.n	8007e06 <_printf_common+0xd6>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e008      	b.n	8007de6 <_printf_common+0xb6>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4652      	mov	r2, sl
 8007dd8:	4639      	mov	r1, r7
 8007dda:	4630      	mov	r0, r6
 8007ddc:	47c0      	blx	r8
 8007dde:	3001      	adds	r0, #1
 8007de0:	d103      	bne.n	8007dea <_printf_common+0xba>
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dea:	3501      	adds	r5, #1
 8007dec:	e7c3      	b.n	8007d76 <_printf_common+0x46>
 8007dee:	18e1      	adds	r1, r4, r3
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	2030      	movs	r0, #48	; 0x30
 8007df4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007df8:	4422      	add	r2, r4
 8007dfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e02:	3302      	adds	r3, #2
 8007e04:	e7c5      	b.n	8007d92 <_printf_common+0x62>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	47c0      	blx	r8
 8007e10:	3001      	adds	r0, #1
 8007e12:	d0e6      	beq.n	8007de2 <_printf_common+0xb2>
 8007e14:	f109 0901 	add.w	r9, r9, #1
 8007e18:	e7d8      	b.n	8007dcc <_printf_common+0x9c>
	...

08007e1c <_printf_i>:
 8007e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e24:	460c      	mov	r4, r1
 8007e26:	7e09      	ldrb	r1, [r1, #24]
 8007e28:	b085      	sub	sp, #20
 8007e2a:	296e      	cmp	r1, #110	; 0x6e
 8007e2c:	4617      	mov	r7, r2
 8007e2e:	4606      	mov	r6, r0
 8007e30:	4698      	mov	r8, r3
 8007e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e34:	f000 80b3 	beq.w	8007f9e <_printf_i+0x182>
 8007e38:	d822      	bhi.n	8007e80 <_printf_i+0x64>
 8007e3a:	2963      	cmp	r1, #99	; 0x63
 8007e3c:	d036      	beq.n	8007eac <_printf_i+0x90>
 8007e3e:	d80a      	bhi.n	8007e56 <_printf_i+0x3a>
 8007e40:	2900      	cmp	r1, #0
 8007e42:	f000 80b9 	beq.w	8007fb8 <_printf_i+0x19c>
 8007e46:	2958      	cmp	r1, #88	; 0x58
 8007e48:	f000 8083 	beq.w	8007f52 <_printf_i+0x136>
 8007e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e54:	e032      	b.n	8007ebc <_printf_i+0xa0>
 8007e56:	2964      	cmp	r1, #100	; 0x64
 8007e58:	d001      	beq.n	8007e5e <_printf_i+0x42>
 8007e5a:	2969      	cmp	r1, #105	; 0x69
 8007e5c:	d1f6      	bne.n	8007e4c <_printf_i+0x30>
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	6813      	ldr	r3, [r2, #0]
 8007e62:	0605      	lsls	r5, r0, #24
 8007e64:	f103 0104 	add.w	r1, r3, #4
 8007e68:	d52a      	bpl.n	8007ec0 <_printf_i+0xa4>
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	da03      	bge.n	8007e7a <_printf_i+0x5e>
 8007e72:	222d      	movs	r2, #45	; 0x2d
 8007e74:	425b      	negs	r3, r3
 8007e76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e7a:	486f      	ldr	r0, [pc, #444]	; (8008038 <_printf_i+0x21c>)
 8007e7c:	220a      	movs	r2, #10
 8007e7e:	e039      	b.n	8007ef4 <_printf_i+0xd8>
 8007e80:	2973      	cmp	r1, #115	; 0x73
 8007e82:	f000 809d 	beq.w	8007fc0 <_printf_i+0x1a4>
 8007e86:	d808      	bhi.n	8007e9a <_printf_i+0x7e>
 8007e88:	296f      	cmp	r1, #111	; 0x6f
 8007e8a:	d020      	beq.n	8007ece <_printf_i+0xb2>
 8007e8c:	2970      	cmp	r1, #112	; 0x70
 8007e8e:	d1dd      	bne.n	8007e4c <_printf_i+0x30>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	f043 0320 	orr.w	r3, r3, #32
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	e003      	b.n	8007ea2 <_printf_i+0x86>
 8007e9a:	2975      	cmp	r1, #117	; 0x75
 8007e9c:	d017      	beq.n	8007ece <_printf_i+0xb2>
 8007e9e:	2978      	cmp	r1, #120	; 0x78
 8007ea0:	d1d4      	bne.n	8007e4c <_printf_i+0x30>
 8007ea2:	2378      	movs	r3, #120	; 0x78
 8007ea4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ea8:	4864      	ldr	r0, [pc, #400]	; (800803c <_printf_i+0x220>)
 8007eaa:	e055      	b.n	8007f58 <_printf_i+0x13c>
 8007eac:	6813      	ldr	r3, [r2, #0]
 8007eae:	1d19      	adds	r1, r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6011      	str	r1, [r2, #0]
 8007eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e08c      	b.n	8007fda <_printf_i+0x1be>
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6011      	str	r1, [r2, #0]
 8007ec4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ec8:	bf18      	it	ne
 8007eca:	b21b      	sxthne	r3, r3
 8007ecc:	e7cf      	b.n	8007e6e <_printf_i+0x52>
 8007ece:	6813      	ldr	r3, [r2, #0]
 8007ed0:	6825      	ldr	r5, [r4, #0]
 8007ed2:	1d18      	adds	r0, r3, #4
 8007ed4:	6010      	str	r0, [r2, #0]
 8007ed6:	0628      	lsls	r0, r5, #24
 8007ed8:	d501      	bpl.n	8007ede <_printf_i+0xc2>
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	e002      	b.n	8007ee4 <_printf_i+0xc8>
 8007ede:	0668      	lsls	r0, r5, #25
 8007ee0:	d5fb      	bpl.n	8007eda <_printf_i+0xbe>
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	4854      	ldr	r0, [pc, #336]	; (8008038 <_printf_i+0x21c>)
 8007ee6:	296f      	cmp	r1, #111	; 0x6f
 8007ee8:	bf14      	ite	ne
 8007eea:	220a      	movne	r2, #10
 8007eec:	2208      	moveq	r2, #8
 8007eee:	2100      	movs	r1, #0
 8007ef0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ef4:	6865      	ldr	r5, [r4, #4]
 8007ef6:	60a5      	str	r5, [r4, #8]
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	f2c0 8095 	blt.w	8008028 <_printf_i+0x20c>
 8007efe:	6821      	ldr	r1, [r4, #0]
 8007f00:	f021 0104 	bic.w	r1, r1, #4
 8007f04:	6021      	str	r1, [r4, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d13d      	bne.n	8007f86 <_printf_i+0x16a>
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	f040 808e 	bne.w	800802c <_printf_i+0x210>
 8007f10:	4665      	mov	r5, ip
 8007f12:	2a08      	cmp	r2, #8
 8007f14:	d10b      	bne.n	8007f2e <_printf_i+0x112>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	07db      	lsls	r3, r3, #31
 8007f1a:	d508      	bpl.n	8007f2e <_printf_i+0x112>
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	bfde      	ittt	le
 8007f24:	2330      	movle	r3, #48	; 0x30
 8007f26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f2e:	ebac 0305 	sub.w	r3, ip, r5
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	f8cd 8000 	str.w	r8, [sp]
 8007f38:	463b      	mov	r3, r7
 8007f3a:	aa03      	add	r2, sp, #12
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f7ff fef6 	bl	8007d30 <_printf_common>
 8007f44:	3001      	adds	r0, #1
 8007f46:	d14d      	bne.n	8007fe4 <_printf_i+0x1c8>
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4c:	b005      	add	sp, #20
 8007f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f52:	4839      	ldr	r0, [pc, #228]	; (8008038 <_printf_i+0x21c>)
 8007f54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f58:	6813      	ldr	r3, [r2, #0]
 8007f5a:	6821      	ldr	r1, [r4, #0]
 8007f5c:	1d1d      	adds	r5, r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6015      	str	r5, [r2, #0]
 8007f62:	060a      	lsls	r2, r1, #24
 8007f64:	d50b      	bpl.n	8007f7e <_printf_i+0x162>
 8007f66:	07ca      	lsls	r2, r1, #31
 8007f68:	bf44      	itt	mi
 8007f6a:	f041 0120 	orrmi.w	r1, r1, #32
 8007f6e:	6021      	strmi	r1, [r4, #0]
 8007f70:	b91b      	cbnz	r3, 8007f7a <_printf_i+0x15e>
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	f022 0220 	bic.w	r2, r2, #32
 8007f78:	6022      	str	r2, [r4, #0]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	e7b7      	b.n	8007eee <_printf_i+0xd2>
 8007f7e:	064d      	lsls	r5, r1, #25
 8007f80:	bf48      	it	mi
 8007f82:	b29b      	uxthmi	r3, r3
 8007f84:	e7ef      	b.n	8007f66 <_printf_i+0x14a>
 8007f86:	4665      	mov	r5, ip
 8007f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f8c:	fb02 3311 	mls	r3, r2, r1, r3
 8007f90:	5cc3      	ldrb	r3, [r0, r3]
 8007f92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f96:	460b      	mov	r3, r1
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d1f5      	bne.n	8007f88 <_printf_i+0x16c>
 8007f9c:	e7b9      	b.n	8007f12 <_printf_i+0xf6>
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	6825      	ldr	r5, [r4, #0]
 8007fa2:	6961      	ldr	r1, [r4, #20]
 8007fa4:	1d18      	adds	r0, r3, #4
 8007fa6:	6010      	str	r0, [r2, #0]
 8007fa8:	0628      	lsls	r0, r5, #24
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	d501      	bpl.n	8007fb2 <_printf_i+0x196>
 8007fae:	6019      	str	r1, [r3, #0]
 8007fb0:	e002      	b.n	8007fb8 <_printf_i+0x19c>
 8007fb2:	066a      	lsls	r2, r5, #25
 8007fb4:	d5fb      	bpl.n	8007fae <_printf_i+0x192>
 8007fb6:	8019      	strh	r1, [r3, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	4665      	mov	r5, ip
 8007fbe:	e7b9      	b.n	8007f34 <_printf_i+0x118>
 8007fc0:	6813      	ldr	r3, [r2, #0]
 8007fc2:	1d19      	adds	r1, r3, #4
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	681d      	ldr	r5, [r3, #0]
 8007fc8:	6862      	ldr	r2, [r4, #4]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f7f8 f93f 	bl	8000250 <memchr>
 8007fd2:	b108      	cbz	r0, 8007fd8 <_printf_i+0x1bc>
 8007fd4:	1b40      	subs	r0, r0, r5
 8007fd6:	6060      	str	r0, [r4, #4]
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe2:	e7a7      	b.n	8007f34 <_printf_i+0x118>
 8007fe4:	6923      	ldr	r3, [r4, #16]
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	4639      	mov	r1, r7
 8007fea:	4630      	mov	r0, r6
 8007fec:	47c0      	blx	r8
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d0aa      	beq.n	8007f48 <_printf_i+0x12c>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	079b      	lsls	r3, r3, #30
 8007ff6:	d413      	bmi.n	8008020 <_printf_i+0x204>
 8007ff8:	68e0      	ldr	r0, [r4, #12]
 8007ffa:	9b03      	ldr	r3, [sp, #12]
 8007ffc:	4298      	cmp	r0, r3
 8007ffe:	bfb8      	it	lt
 8008000:	4618      	movlt	r0, r3
 8008002:	e7a3      	b.n	8007f4c <_printf_i+0x130>
 8008004:	2301      	movs	r3, #1
 8008006:	464a      	mov	r2, r9
 8008008:	4639      	mov	r1, r7
 800800a:	4630      	mov	r0, r6
 800800c:	47c0      	blx	r8
 800800e:	3001      	adds	r0, #1
 8008010:	d09a      	beq.n	8007f48 <_printf_i+0x12c>
 8008012:	3501      	adds	r5, #1
 8008014:	68e3      	ldr	r3, [r4, #12]
 8008016:	9a03      	ldr	r2, [sp, #12]
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	42ab      	cmp	r3, r5
 800801c:	dcf2      	bgt.n	8008004 <_printf_i+0x1e8>
 800801e:	e7eb      	b.n	8007ff8 <_printf_i+0x1dc>
 8008020:	2500      	movs	r5, #0
 8008022:	f104 0919 	add.w	r9, r4, #25
 8008026:	e7f5      	b.n	8008014 <_printf_i+0x1f8>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1ac      	bne.n	8007f86 <_printf_i+0x16a>
 800802c:	7803      	ldrb	r3, [r0, #0]
 800802e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008032:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008036:	e76c      	b.n	8007f12 <_printf_i+0xf6>
 8008038:	08009e22 	.word	0x08009e22
 800803c:	08009e33 	.word	0x08009e33

08008040 <iprintf>:
 8008040:	b40f      	push	{r0, r1, r2, r3}
 8008042:	4b0a      	ldr	r3, [pc, #40]	; (800806c <iprintf+0x2c>)
 8008044:	b513      	push	{r0, r1, r4, lr}
 8008046:	681c      	ldr	r4, [r3, #0]
 8008048:	b124      	cbz	r4, 8008054 <iprintf+0x14>
 800804a:	69a3      	ldr	r3, [r4, #24]
 800804c:	b913      	cbnz	r3, 8008054 <iprintf+0x14>
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fffa 	bl	8009048 <__sinit>
 8008054:	ab05      	add	r3, sp, #20
 8008056:	9a04      	ldr	r2, [sp, #16]
 8008058:	68a1      	ldr	r1, [r4, #8]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	4620      	mov	r0, r4
 800805e:	f001 fcbd 	bl	80099dc <_vfiprintf_r>
 8008062:	b002      	add	sp, #8
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	b004      	add	sp, #16
 800806a:	4770      	bx	lr
 800806c:	20000028 	.word	0x20000028

08008070 <_puts_r>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	460e      	mov	r6, r1
 8008074:	4605      	mov	r5, r0
 8008076:	b118      	cbz	r0, 8008080 <_puts_r+0x10>
 8008078:	6983      	ldr	r3, [r0, #24]
 800807a:	b90b      	cbnz	r3, 8008080 <_puts_r+0x10>
 800807c:	f000 ffe4 	bl	8009048 <__sinit>
 8008080:	69ab      	ldr	r3, [r5, #24]
 8008082:	68ac      	ldr	r4, [r5, #8]
 8008084:	b913      	cbnz	r3, 800808c <_puts_r+0x1c>
 8008086:	4628      	mov	r0, r5
 8008088:	f000 ffde 	bl	8009048 <__sinit>
 800808c:	4b23      	ldr	r3, [pc, #140]	; (800811c <_puts_r+0xac>)
 800808e:	429c      	cmp	r4, r3
 8008090:	d117      	bne.n	80080c2 <_puts_r+0x52>
 8008092:	686c      	ldr	r4, [r5, #4]
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	071b      	lsls	r3, r3, #28
 8008098:	d51d      	bpl.n	80080d6 <_puts_r+0x66>
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	b1db      	cbz	r3, 80080d6 <_puts_r+0x66>
 800809e:	3e01      	subs	r6, #1
 80080a0:	68a3      	ldr	r3, [r4, #8]
 80080a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080a6:	3b01      	subs	r3, #1
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	b9e9      	cbnz	r1, 80080e8 <_puts_r+0x78>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da2e      	bge.n	800810e <_puts_r+0x9e>
 80080b0:	4622      	mov	r2, r4
 80080b2:	210a      	movs	r1, #10
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 f83f 	bl	8008138 <__swbuf_r>
 80080ba:	3001      	adds	r0, #1
 80080bc:	d011      	beq.n	80080e2 <_puts_r+0x72>
 80080be:	200a      	movs	r0, #10
 80080c0:	e011      	b.n	80080e6 <_puts_r+0x76>
 80080c2:	4b17      	ldr	r3, [pc, #92]	; (8008120 <_puts_r+0xb0>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	d101      	bne.n	80080cc <_puts_r+0x5c>
 80080c8:	68ac      	ldr	r4, [r5, #8]
 80080ca:	e7e3      	b.n	8008094 <_puts_r+0x24>
 80080cc:	4b15      	ldr	r3, [pc, #84]	; (8008124 <_puts_r+0xb4>)
 80080ce:	429c      	cmp	r4, r3
 80080d0:	bf08      	it	eq
 80080d2:	68ec      	ldreq	r4, [r5, #12]
 80080d4:	e7de      	b.n	8008094 <_puts_r+0x24>
 80080d6:	4621      	mov	r1, r4
 80080d8:	4628      	mov	r0, r5
 80080da:	f000 f87f 	bl	80081dc <__swsetup_r>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0dd      	beq.n	800809e <_puts_r+0x2e>
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da04      	bge.n	80080f6 <_puts_r+0x86>
 80080ec:	69a2      	ldr	r2, [r4, #24]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	dc06      	bgt.n	8008100 <_puts_r+0x90>
 80080f2:	290a      	cmp	r1, #10
 80080f4:	d004      	beq.n	8008100 <_puts_r+0x90>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	6022      	str	r2, [r4, #0]
 80080fc:	7019      	strb	r1, [r3, #0]
 80080fe:	e7cf      	b.n	80080a0 <_puts_r+0x30>
 8008100:	4622      	mov	r2, r4
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f818 	bl	8008138 <__swbuf_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d1c9      	bne.n	80080a0 <_puts_r+0x30>
 800810c:	e7e9      	b.n	80080e2 <_puts_r+0x72>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	200a      	movs	r0, #10
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	6022      	str	r2, [r4, #0]
 8008116:	7018      	strb	r0, [r3, #0]
 8008118:	e7e5      	b.n	80080e6 <_puts_r+0x76>
 800811a:	bf00      	nop
 800811c:	08009e74 	.word	0x08009e74
 8008120:	08009e94 	.word	0x08009e94
 8008124:	08009e54 	.word	0x08009e54

08008128 <puts>:
 8008128:	4b02      	ldr	r3, [pc, #8]	; (8008134 <puts+0xc>)
 800812a:	4601      	mov	r1, r0
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	f7ff bf9f 	b.w	8008070 <_puts_r>
 8008132:	bf00      	nop
 8008134:	20000028 	.word	0x20000028

08008138 <__swbuf_r>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	460e      	mov	r6, r1
 800813c:	4614      	mov	r4, r2
 800813e:	4605      	mov	r5, r0
 8008140:	b118      	cbz	r0, 800814a <__swbuf_r+0x12>
 8008142:	6983      	ldr	r3, [r0, #24]
 8008144:	b90b      	cbnz	r3, 800814a <__swbuf_r+0x12>
 8008146:	f000 ff7f 	bl	8009048 <__sinit>
 800814a:	4b21      	ldr	r3, [pc, #132]	; (80081d0 <__swbuf_r+0x98>)
 800814c:	429c      	cmp	r4, r3
 800814e:	d12a      	bne.n	80081a6 <__swbuf_r+0x6e>
 8008150:	686c      	ldr	r4, [r5, #4]
 8008152:	69a3      	ldr	r3, [r4, #24]
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	071a      	lsls	r2, r3, #28
 800815a:	d52e      	bpl.n	80081ba <__swbuf_r+0x82>
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	b363      	cbz	r3, 80081ba <__swbuf_r+0x82>
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	6820      	ldr	r0, [r4, #0]
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	6963      	ldr	r3, [r4, #20]
 8008168:	b2f6      	uxtb	r6, r6
 800816a:	4283      	cmp	r3, r0
 800816c:	4637      	mov	r7, r6
 800816e:	dc04      	bgt.n	800817a <__swbuf_r+0x42>
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 fefe 	bl	8008f74 <_fflush_r>
 8008178:	bb28      	cbnz	r0, 80081c6 <__swbuf_r+0x8e>
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	3b01      	subs	r3, #1
 800817e:	60a3      	str	r3, [r4, #8]
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	6022      	str	r2, [r4, #0]
 8008186:	701e      	strb	r6, [r3, #0]
 8008188:	6963      	ldr	r3, [r4, #20]
 800818a:	3001      	adds	r0, #1
 800818c:	4283      	cmp	r3, r0
 800818e:	d004      	beq.n	800819a <__swbuf_r+0x62>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	07db      	lsls	r3, r3, #31
 8008194:	d519      	bpl.n	80081ca <__swbuf_r+0x92>
 8008196:	2e0a      	cmp	r6, #10
 8008198:	d117      	bne.n	80081ca <__swbuf_r+0x92>
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	f000 fee9 	bl	8008f74 <_fflush_r>
 80081a2:	b190      	cbz	r0, 80081ca <__swbuf_r+0x92>
 80081a4:	e00f      	b.n	80081c6 <__swbuf_r+0x8e>
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <__swbuf_r+0x9c>)
 80081a8:	429c      	cmp	r4, r3
 80081aa:	d101      	bne.n	80081b0 <__swbuf_r+0x78>
 80081ac:	68ac      	ldr	r4, [r5, #8]
 80081ae:	e7d0      	b.n	8008152 <__swbuf_r+0x1a>
 80081b0:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <__swbuf_r+0xa0>)
 80081b2:	429c      	cmp	r4, r3
 80081b4:	bf08      	it	eq
 80081b6:	68ec      	ldreq	r4, [r5, #12]
 80081b8:	e7cb      	b.n	8008152 <__swbuf_r+0x1a>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 f80d 	bl	80081dc <__swsetup_r>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d0cc      	beq.n	8008160 <__swbuf_r+0x28>
 80081c6:	f04f 37ff 	mov.w	r7, #4294967295
 80081ca:	4638      	mov	r0, r7
 80081cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ce:	bf00      	nop
 80081d0:	08009e74 	.word	0x08009e74
 80081d4:	08009e94 	.word	0x08009e94
 80081d8:	08009e54 	.word	0x08009e54

080081dc <__swsetup_r>:
 80081dc:	4b32      	ldr	r3, [pc, #200]	; (80082a8 <__swsetup_r+0xcc>)
 80081de:	b570      	push	{r4, r5, r6, lr}
 80081e0:	681d      	ldr	r5, [r3, #0]
 80081e2:	4606      	mov	r6, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	b125      	cbz	r5, 80081f2 <__swsetup_r+0x16>
 80081e8:	69ab      	ldr	r3, [r5, #24]
 80081ea:	b913      	cbnz	r3, 80081f2 <__swsetup_r+0x16>
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 ff2b 	bl	8009048 <__sinit>
 80081f2:	4b2e      	ldr	r3, [pc, #184]	; (80082ac <__swsetup_r+0xd0>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	d10f      	bne.n	8008218 <__swsetup_r+0x3c>
 80081f8:	686c      	ldr	r4, [r5, #4]
 80081fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	0715      	lsls	r5, r2, #28
 8008202:	d42c      	bmi.n	800825e <__swsetup_r+0x82>
 8008204:	06d0      	lsls	r0, r2, #27
 8008206:	d411      	bmi.n	800822c <__swsetup_r+0x50>
 8008208:	2209      	movs	r2, #9
 800820a:	6032      	str	r2, [r6, #0]
 800820c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	e03e      	b.n	8008296 <__swsetup_r+0xba>
 8008218:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <__swsetup_r+0xd4>)
 800821a:	429c      	cmp	r4, r3
 800821c:	d101      	bne.n	8008222 <__swsetup_r+0x46>
 800821e:	68ac      	ldr	r4, [r5, #8]
 8008220:	e7eb      	b.n	80081fa <__swsetup_r+0x1e>
 8008222:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <__swsetup_r+0xd8>)
 8008224:	429c      	cmp	r4, r3
 8008226:	bf08      	it	eq
 8008228:	68ec      	ldreq	r4, [r5, #12]
 800822a:	e7e6      	b.n	80081fa <__swsetup_r+0x1e>
 800822c:	0751      	lsls	r1, r2, #29
 800822e:	d512      	bpl.n	8008256 <__swsetup_r+0x7a>
 8008230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008232:	b141      	cbz	r1, 8008246 <__swsetup_r+0x6a>
 8008234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008238:	4299      	cmp	r1, r3
 800823a:	d002      	beq.n	8008242 <__swsetup_r+0x66>
 800823c:	4630      	mov	r0, r6
 800823e:	f001 fafb 	bl	8009838 <_free_r>
 8008242:	2300      	movs	r3, #0
 8008244:	6363      	str	r3, [r4, #52]	; 0x34
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	2300      	movs	r3, #0
 8008250:	6063      	str	r3, [r4, #4]
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f043 0308 	orr.w	r3, r3, #8
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	b94b      	cbnz	r3, 8008276 <__swsetup_r+0x9a>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800826c:	d003      	beq.n	8008276 <__swsetup_r+0x9a>
 800826e:	4621      	mov	r1, r4
 8008270:	4630      	mov	r0, r6
 8008272:	f000 ffa5 	bl	80091c0 <__smakebuf_r>
 8008276:	89a2      	ldrh	r2, [r4, #12]
 8008278:	f012 0301 	ands.w	r3, r2, #1
 800827c:	d00c      	beq.n	8008298 <__swsetup_r+0xbc>
 800827e:	2300      	movs	r3, #0
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	6963      	ldr	r3, [r4, #20]
 8008284:	425b      	negs	r3, r3
 8008286:	61a3      	str	r3, [r4, #24]
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	b953      	cbnz	r3, 80082a2 <__swsetup_r+0xc6>
 800828c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008290:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008294:	d1ba      	bne.n	800820c <__swsetup_r+0x30>
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	0792      	lsls	r2, r2, #30
 800829a:	bf58      	it	pl
 800829c:	6963      	ldrpl	r3, [r4, #20]
 800829e:	60a3      	str	r3, [r4, #8]
 80082a0:	e7f2      	b.n	8008288 <__swsetup_r+0xac>
 80082a2:	2000      	movs	r0, #0
 80082a4:	e7f7      	b.n	8008296 <__swsetup_r+0xba>
 80082a6:	bf00      	nop
 80082a8:	20000028 	.word	0x20000028
 80082ac:	08009e74 	.word	0x08009e74
 80082b0:	08009e94 	.word	0x08009e94
 80082b4:	08009e54 	.word	0x08009e54

080082b8 <quorem>:
 80082b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	6903      	ldr	r3, [r0, #16]
 80082be:	690c      	ldr	r4, [r1, #16]
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	4680      	mov	r8, r0
 80082c4:	f2c0 8082 	blt.w	80083cc <quorem+0x114>
 80082c8:	3c01      	subs	r4, #1
 80082ca:	f101 0714 	add.w	r7, r1, #20
 80082ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80082d2:	f100 0614 	add.w	r6, r0, #20
 80082d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80082da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80082de:	eb06 030c 	add.w	r3, r6, ip
 80082e2:	3501      	adds	r5, #1
 80082e4:	eb07 090c 	add.w	r9, r7, ip
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80082ee:	b395      	cbz	r5, 8008356 <quorem+0x9e>
 80082f0:	f04f 0a00 	mov.w	sl, #0
 80082f4:	4638      	mov	r0, r7
 80082f6:	46b6      	mov	lr, r6
 80082f8:	46d3      	mov	fp, sl
 80082fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80082fe:	b293      	uxth	r3, r2
 8008300:	fb05 a303 	mla	r3, r5, r3, sl
 8008304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008308:	b29b      	uxth	r3, r3
 800830a:	ebab 0303 	sub.w	r3, fp, r3
 800830e:	0c12      	lsrs	r2, r2, #16
 8008310:	f8de b000 	ldr.w	fp, [lr]
 8008314:	fb05 a202 	mla	r2, r5, r2, sl
 8008318:	fa13 f38b 	uxtah	r3, r3, fp
 800831c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008320:	fa1f fb82 	uxth.w	fp, r2
 8008324:	f8de 2000 	ldr.w	r2, [lr]
 8008328:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800832c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008330:	b29b      	uxth	r3, r3
 8008332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008336:	4581      	cmp	r9, r0
 8008338:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800833c:	f84e 3b04 	str.w	r3, [lr], #4
 8008340:	d2db      	bcs.n	80082fa <quorem+0x42>
 8008342:	f856 300c 	ldr.w	r3, [r6, ip]
 8008346:	b933      	cbnz	r3, 8008356 <quorem+0x9e>
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	3b04      	subs	r3, #4
 800834c:	429e      	cmp	r6, r3
 800834e:	461a      	mov	r2, r3
 8008350:	d330      	bcc.n	80083b4 <quorem+0xfc>
 8008352:	f8c8 4010 	str.w	r4, [r8, #16]
 8008356:	4640      	mov	r0, r8
 8008358:	f001 f99a 	bl	8009690 <__mcmp>
 800835c:	2800      	cmp	r0, #0
 800835e:	db25      	blt.n	80083ac <quorem+0xf4>
 8008360:	3501      	adds	r5, #1
 8008362:	4630      	mov	r0, r6
 8008364:	f04f 0c00 	mov.w	ip, #0
 8008368:	f857 2b04 	ldr.w	r2, [r7], #4
 800836c:	f8d0 e000 	ldr.w	lr, [r0]
 8008370:	b293      	uxth	r3, r2
 8008372:	ebac 0303 	sub.w	r3, ip, r3
 8008376:	0c12      	lsrs	r2, r2, #16
 8008378:	fa13 f38e 	uxtah	r3, r3, lr
 800837c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008384:	b29b      	uxth	r3, r3
 8008386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800838a:	45b9      	cmp	r9, r7
 800838c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008390:	f840 3b04 	str.w	r3, [r0], #4
 8008394:	d2e8      	bcs.n	8008368 <quorem+0xb0>
 8008396:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800839a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800839e:	b92a      	cbnz	r2, 80083ac <quorem+0xf4>
 80083a0:	3b04      	subs	r3, #4
 80083a2:	429e      	cmp	r6, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	d30b      	bcc.n	80083c0 <quorem+0x108>
 80083a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80083ac:	4628      	mov	r0, r5
 80083ae:	b003      	add	sp, #12
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	3b04      	subs	r3, #4
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	d1ca      	bne.n	8008352 <quorem+0x9a>
 80083bc:	3c01      	subs	r4, #1
 80083be:	e7c5      	b.n	800834c <quorem+0x94>
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	3b04      	subs	r3, #4
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	d1ef      	bne.n	80083a8 <quorem+0xf0>
 80083c8:	3c01      	subs	r4, #1
 80083ca:	e7ea      	b.n	80083a2 <quorem+0xea>
 80083cc:	2000      	movs	r0, #0
 80083ce:	e7ee      	b.n	80083ae <quorem+0xf6>

080083d0 <_dtoa_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	ec57 6b10 	vmov	r6, r7, d0
 80083d8:	b095      	sub	sp, #84	; 0x54
 80083da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083dc:	9108      	str	r1, [sp, #32]
 80083de:	4604      	mov	r4, r0
 80083e0:	920a      	str	r2, [sp, #40]	; 0x28
 80083e2:	9311      	str	r3, [sp, #68]	; 0x44
 80083e4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80083e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80083ec:	b93d      	cbnz	r5, 80083fe <_dtoa_r+0x2e>
 80083ee:	2010      	movs	r0, #16
 80083f0:	f000 ff26 	bl	8009240 <malloc>
 80083f4:	6260      	str	r0, [r4, #36]	; 0x24
 80083f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083fa:	6005      	str	r5, [r0, #0]
 80083fc:	60c5      	str	r5, [r0, #12]
 80083fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	b151      	cbz	r1, 800841a <_dtoa_r+0x4a>
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	604a      	str	r2, [r1, #4]
 8008408:	2301      	movs	r3, #1
 800840a:	4093      	lsls	r3, r2
 800840c:	608b      	str	r3, [r1, #8]
 800840e:	4620      	mov	r0, r4
 8008410:	f000 ff5d 	bl	80092ce <_Bfree>
 8008414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	1e3b      	subs	r3, r7, #0
 800841c:	bfb9      	ittee	lt
 800841e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008422:	9303      	strlt	r3, [sp, #12]
 8008424:	2300      	movge	r3, #0
 8008426:	f8c8 3000 	strge.w	r3, [r8]
 800842a:	9d03      	ldr	r5, [sp, #12]
 800842c:	4bac      	ldr	r3, [pc, #688]	; (80086e0 <_dtoa_r+0x310>)
 800842e:	bfbc      	itt	lt
 8008430:	2201      	movlt	r2, #1
 8008432:	f8c8 2000 	strlt.w	r2, [r8]
 8008436:	43ab      	bics	r3, r5
 8008438:	d11b      	bne.n	8008472 <_dtoa_r+0xa2>
 800843a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800843c:	f242 730f 	movw	r3, #9999	; 0x270f
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	9b02      	ldr	r3, [sp, #8]
 8008444:	b923      	cbnz	r3, 8008450 <_dtoa_r+0x80>
 8008446:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800844a:	2d00      	cmp	r5, #0
 800844c:	f000 84dd 	beq.w	8008e0a <_dtoa_r+0xa3a>
 8008450:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008452:	b953      	cbnz	r3, 800846a <_dtoa_r+0x9a>
 8008454:	4ba3      	ldr	r3, [pc, #652]	; (80086e4 <_dtoa_r+0x314>)
 8008456:	e020      	b.n	800849a <_dtoa_r+0xca>
 8008458:	4ba3      	ldr	r3, [pc, #652]	; (80086e8 <_dtoa_r+0x318>)
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	3308      	adds	r3, #8
 800845e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	9804      	ldr	r0, [sp, #16]
 8008464:	b015      	add	sp, #84	; 0x54
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	4b9e      	ldr	r3, [pc, #632]	; (80086e4 <_dtoa_r+0x314>)
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	3303      	adds	r3, #3
 8008470:	e7f5      	b.n	800845e <_dtoa_r+0x8e>
 8008472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008476:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800847a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008482:	d10c      	bne.n	800849e <_dtoa_r+0xce>
 8008484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008486:	2301      	movs	r3, #1
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 84b9 	beq.w	8008e04 <_dtoa_r+0xa34>
 8008492:	4b96      	ldr	r3, [pc, #600]	; (80086ec <_dtoa_r+0x31c>)
 8008494:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	3b01      	subs	r3, #1
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	e7e1      	b.n	8008462 <_dtoa_r+0x92>
 800849e:	a913      	add	r1, sp, #76	; 0x4c
 80084a0:	aa12      	add	r2, sp, #72	; 0x48
 80084a2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80084a6:	4620      	mov	r0, r4
 80084a8:	f001 f969 	bl	800977e <__d2b>
 80084ac:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80084b0:	9001      	str	r0, [sp, #4]
 80084b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	d046      	beq.n	8008546 <_dtoa_r+0x176>
 80084b8:	9805      	ldr	r0, [sp, #20]
 80084ba:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80084be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084c2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80084c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084ca:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80084ce:	2700      	movs	r7, #0
 80084d0:	ee07 aa90 	vmov	s15, sl
 80084d4:	ec43 2b16 	vmov	d6, r2, r3
 80084d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80084dc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80086c8 <_dtoa_r+0x2f8>
 80084e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80084e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084e8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80086d0 <_dtoa_r+0x300>
 80084ec:	eea7 6b04 	vfma.f64	d6, d7, d4
 80084f0:	eeb0 7b46 	vmov.f64	d7, d6
 80084f4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80086d8 <_dtoa_r+0x308>
 80084f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80084fc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008500:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008508:	ee16 ba90 	vmov	fp, s13
 800850c:	d508      	bpl.n	8008520 <_dtoa_r+0x150>
 800850e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008512:	eeb4 6b47 	vcmp.f64	d6, d7
 8008516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851a:	bf18      	it	ne
 800851c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008520:	f1bb 0f16 	cmp.w	fp, #22
 8008524:	d834      	bhi.n	8008590 <_dtoa_r+0x1c0>
 8008526:	4b72      	ldr	r3, [pc, #456]	; (80086f0 <_dtoa_r+0x320>)
 8008528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800852c:	ed93 7b00 	vldr	d7, [r3]
 8008530:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008534:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853c:	dd01      	ble.n	8008542 <_dtoa_r+0x172>
 800853e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008542:	2300      	movs	r3, #0
 8008544:	e025      	b.n	8008592 <_dtoa_r+0x1c2>
 8008546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008548:	eb01 0a03 	add.w	sl, r1, r3
 800854c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008550:	2b20      	cmp	r3, #32
 8008552:	dd17      	ble.n	8008584 <_dtoa_r+0x1b4>
 8008554:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008558:	9a02      	ldr	r2, [sp, #8]
 800855a:	409d      	lsls	r5, r3
 800855c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008560:	fa22 f303 	lsr.w	r3, r2, r3
 8008564:	432b      	orrs	r3, r5
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800856e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008572:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008576:	9805      	ldr	r0, [sp, #20]
 8008578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857c:	2701      	movs	r7, #1
 800857e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8008582:	e7a5      	b.n	80084d0 <_dtoa_r+0x100>
 8008584:	9a02      	ldr	r2, [sp, #8]
 8008586:	f1c3 0320 	rsb	r3, r3, #32
 800858a:	fa02 f303 	lsl.w	r3, r2, r3
 800858e:	e7ea      	b.n	8008566 <_dtoa_r+0x196>
 8008590:	2301      	movs	r3, #1
 8008592:	eba1 0a0a 	sub.w	sl, r1, sl
 8008596:	9310      	str	r3, [sp, #64]	; 0x40
 8008598:	f1ba 0301 	subs.w	r3, sl, #1
 800859c:	9307      	str	r3, [sp, #28]
 800859e:	bf43      	ittte	mi
 80085a0:	2300      	movmi	r3, #0
 80085a2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80085a6:	9307      	strmi	r3, [sp, #28]
 80085a8:	f04f 0a00 	movpl.w	sl, #0
 80085ac:	f1bb 0f00 	cmp.w	fp, #0
 80085b0:	db19      	blt.n	80085e6 <_dtoa_r+0x216>
 80085b2:	9b07      	ldr	r3, [sp, #28]
 80085b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80085b8:	445b      	add	r3, fp
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	f04f 0800 	mov.w	r8, #0
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d866      	bhi.n	8008694 <_dtoa_r+0x2c4>
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	bfc4      	itt	gt
 80085ca:	3b04      	subgt	r3, #4
 80085cc:	9308      	strgt	r3, [sp, #32]
 80085ce:	9b08      	ldr	r3, [sp, #32]
 80085d0:	f1a3 0302 	sub.w	r3, r3, #2
 80085d4:	bfcc      	ite	gt
 80085d6:	2500      	movgt	r5, #0
 80085d8:	2501      	movle	r5, #1
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d866      	bhi.n	80086ac <_dtoa_r+0x2dc>
 80085de:	e8df f003 	tbb	[pc, r3]
 80085e2:	5755      	.short	0x5755
 80085e4:	4909      	.short	0x4909
 80085e6:	2300      	movs	r3, #0
 80085e8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80085ec:	f1cb 0800 	rsb	r8, fp, #0
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	e7e5      	b.n	80085c0 <_dtoa_r+0x1f0>
 80085f4:	2301      	movs	r3, #1
 80085f6:	9309      	str	r3, [sp, #36]	; 0x24
 80085f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	dd59      	ble.n	80086b2 <_dtoa_r+0x2e2>
 80085fe:	9306      	str	r3, [sp, #24]
 8008600:	4699      	mov	r9, r3
 8008602:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008604:	2200      	movs	r2, #0
 8008606:	6072      	str	r2, [r6, #4]
 8008608:	2204      	movs	r2, #4
 800860a:	f102 0014 	add.w	r0, r2, #20
 800860e:	4298      	cmp	r0, r3
 8008610:	6871      	ldr	r1, [r6, #4]
 8008612:	d953      	bls.n	80086bc <_dtoa_r+0x2ec>
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fe26 	bl	8009266 <_Balloc>
 800861a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861c:	6030      	str	r0, [r6, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	f1b9 0f0e 	cmp.w	r9, #14
 8008626:	f200 80c2 	bhi.w	80087ae <_dtoa_r+0x3de>
 800862a:	2d00      	cmp	r5, #0
 800862c:	f000 80bf 	beq.w	80087ae <_dtoa_r+0x3de>
 8008630:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008634:	f1bb 0f00 	cmp.w	fp, #0
 8008638:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800863c:	f340 80e6 	ble.w	800880c <_dtoa_r+0x43c>
 8008640:	4a2b      	ldr	r2, [pc, #172]	; (80086f0 <_dtoa_r+0x320>)
 8008642:	f00b 030f 	and.w	r3, fp, #15
 8008646:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800864a:	ed93 7b00 	vldr	d7, [r3]
 800864e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8008652:	06da      	lsls	r2, r3, #27
 8008654:	f140 80d8 	bpl.w	8008808 <_dtoa_r+0x438>
 8008658:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <_dtoa_r+0x324>)
 800865a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800865e:	ed92 6b08 	vldr	d6, [r2, #32]
 8008662:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008666:	ed8d 6b02 	vstr	d6, [sp, #8]
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	2203      	movs	r2, #3
 8008670:	4920      	ldr	r1, [pc, #128]	; (80086f4 <_dtoa_r+0x324>)
 8008672:	e04a      	b.n	800870a <_dtoa_r+0x33a>
 8008674:	2301      	movs	r3, #1
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867a:	445b      	add	r3, fp
 800867c:	f103 0901 	add.w	r9, r3, #1
 8008680:	9306      	str	r3, [sp, #24]
 8008682:	464b      	mov	r3, r9
 8008684:	2b01      	cmp	r3, #1
 8008686:	bfb8      	it	lt
 8008688:	2301      	movlt	r3, #1
 800868a:	e7ba      	b.n	8008602 <_dtoa_r+0x232>
 800868c:	2300      	movs	r3, #0
 800868e:	e7b2      	b.n	80085f6 <_dtoa_r+0x226>
 8008690:	2300      	movs	r3, #0
 8008692:	e7f0      	b.n	8008676 <_dtoa_r+0x2a6>
 8008694:	2501      	movs	r5, #1
 8008696:	2300      	movs	r3, #0
 8008698:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800869c:	f04f 33ff 	mov.w	r3, #4294967295
 80086a0:	9306      	str	r3, [sp, #24]
 80086a2:	4699      	mov	r9, r3
 80086a4:	2200      	movs	r2, #0
 80086a6:	2312      	movs	r3, #18
 80086a8:	920a      	str	r2, [sp, #40]	; 0x28
 80086aa:	e7aa      	b.n	8008602 <_dtoa_r+0x232>
 80086ac:	2301      	movs	r3, #1
 80086ae:	9309      	str	r3, [sp, #36]	; 0x24
 80086b0:	e7f4      	b.n	800869c <_dtoa_r+0x2cc>
 80086b2:	2301      	movs	r3, #1
 80086b4:	9306      	str	r3, [sp, #24]
 80086b6:	4699      	mov	r9, r3
 80086b8:	461a      	mov	r2, r3
 80086ba:	e7f5      	b.n	80086a8 <_dtoa_r+0x2d8>
 80086bc:	3101      	adds	r1, #1
 80086be:	6071      	str	r1, [r6, #4]
 80086c0:	0052      	lsls	r2, r2, #1
 80086c2:	e7a2      	b.n	800860a <_dtoa_r+0x23a>
 80086c4:	f3af 8000 	nop.w
 80086c8:	636f4361 	.word	0x636f4361
 80086cc:	3fd287a7 	.word	0x3fd287a7
 80086d0:	8b60c8b3 	.word	0x8b60c8b3
 80086d4:	3fc68a28 	.word	0x3fc68a28
 80086d8:	509f79fb 	.word	0x509f79fb
 80086dc:	3fd34413 	.word	0x3fd34413
 80086e0:	7ff00000 	.word	0x7ff00000
 80086e4:	08009e4d 	.word	0x08009e4d
 80086e8:	08009e44 	.word	0x08009e44
 80086ec:	08009e21 	.word	0x08009e21
 80086f0:	08009ee0 	.word	0x08009ee0
 80086f4:	08009eb8 	.word	0x08009eb8
 80086f8:	07de      	lsls	r6, r3, #31
 80086fa:	d504      	bpl.n	8008706 <_dtoa_r+0x336>
 80086fc:	ed91 6b00 	vldr	d6, [r1]
 8008700:	3201      	adds	r2, #1
 8008702:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008706:	105b      	asrs	r3, r3, #1
 8008708:	3108      	adds	r1, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f4      	bne.n	80086f8 <_dtoa_r+0x328>
 800870e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008712:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008716:	ed8d 7b02 	vstr	d7, [sp, #8]
 800871a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80a7 	beq.w	8008870 <_dtoa_r+0x4a0>
 8008722:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800872a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008732:	f140 809d 	bpl.w	8008870 <_dtoa_r+0x4a0>
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	f000 8099 	beq.w	8008870 <_dtoa_r+0x4a0>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	dd30      	ble.n	80087a6 <_dtoa_r+0x3d6>
 8008744:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008748:	ee27 7b06 	vmul.f64	d7, d7, d6
 800874c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008750:	9d06      	ldr	r5, [sp, #24]
 8008752:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008756:	3201      	adds	r2, #1
 8008758:	ed9d 6b02 	vldr	d6, [sp, #8]
 800875c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008760:	ee07 2a90 	vmov	s15, r2
 8008764:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008768:	eea7 5b06 	vfma.f64	d5, d7, d6
 800876c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008770:	9a03      	ldr	r2, [sp, #12]
 8008772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008776:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800877a:	2d00      	cmp	r5, #0
 800877c:	d17b      	bne.n	8008876 <_dtoa_r+0x4a6>
 800877e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008782:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008786:	ec41 0b17 	vmov	d7, r0, r1
 800878a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008792:	f300 8253 	bgt.w	8008c3c <_dtoa_r+0x86c>
 8008796:	eeb1 7b47 	vneg.f64	d7, d7
 800879a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800879e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a2:	f100 8249 	bmi.w	8008c38 <_dtoa_r+0x868>
 80087a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80087aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f2c0 8119 	blt.w	80089e8 <_dtoa_r+0x618>
 80087b6:	f1bb 0f0e 	cmp.w	fp, #14
 80087ba:	f300 8115 	bgt.w	80089e8 <_dtoa_r+0x618>
 80087be:	4bc3      	ldr	r3, [pc, #780]	; (8008acc <_dtoa_r+0x6fc>)
 80087c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087c4:	ed93 6b00 	vldr	d6, [r3]
 80087c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f280 80ba 	bge.w	8008944 <_dtoa_r+0x574>
 80087d0:	f1b9 0f00 	cmp.w	r9, #0
 80087d4:	f300 80b6 	bgt.w	8008944 <_dtoa_r+0x574>
 80087d8:	f040 822d 	bne.w	8008c36 <_dtoa_r+0x866>
 80087dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80087e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80087e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f0:	464d      	mov	r5, r9
 80087f2:	464f      	mov	r7, r9
 80087f4:	f280 8204 	bge.w	8008c00 <_dtoa_r+0x830>
 80087f8:	9b04      	ldr	r3, [sp, #16]
 80087fa:	9a04      	ldr	r2, [sp, #16]
 80087fc:	1c5e      	adds	r6, r3, #1
 80087fe:	2331      	movs	r3, #49	; 0x31
 8008800:	7013      	strb	r3, [r2, #0]
 8008802:	f10b 0b01 	add.w	fp, fp, #1
 8008806:	e1ff      	b.n	8008c08 <_dtoa_r+0x838>
 8008808:	2202      	movs	r2, #2
 800880a:	e731      	b.n	8008670 <_dtoa_r+0x2a0>
 800880c:	d02e      	beq.n	800886c <_dtoa_r+0x49c>
 800880e:	f1cb 0300 	rsb	r3, fp, #0
 8008812:	4aae      	ldr	r2, [pc, #696]	; (8008acc <_dtoa_r+0x6fc>)
 8008814:	f003 010f 	and.w	r1, r3, #15
 8008818:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800881c:	ed92 7b00 	vldr	d7, [r2]
 8008820:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8008824:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008828:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800882c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8008830:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008834:	49a6      	ldr	r1, [pc, #664]	; (8008ad0 <_dtoa_r+0x700>)
 8008836:	111b      	asrs	r3, r3, #4
 8008838:	2000      	movs	r0, #0
 800883a:	2202      	movs	r2, #2
 800883c:	b93b      	cbnz	r3, 800884e <_dtoa_r+0x47e>
 800883e:	2800      	cmp	r0, #0
 8008840:	f43f af6b 	beq.w	800871a <_dtoa_r+0x34a>
 8008844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800884c:	e765      	b.n	800871a <_dtoa_r+0x34a>
 800884e:	07dd      	lsls	r5, r3, #31
 8008850:	d509      	bpl.n	8008866 <_dtoa_r+0x496>
 8008852:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008856:	ed91 7b00 	vldr	d7, [r1]
 800885a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800885e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008862:	3201      	adds	r2, #1
 8008864:	2001      	movs	r0, #1
 8008866:	105b      	asrs	r3, r3, #1
 8008868:	3108      	adds	r1, #8
 800886a:	e7e7      	b.n	800883c <_dtoa_r+0x46c>
 800886c:	2202      	movs	r2, #2
 800886e:	e754      	b.n	800871a <_dtoa_r+0x34a>
 8008870:	465b      	mov	r3, fp
 8008872:	464d      	mov	r5, r9
 8008874:	e770      	b.n	8008758 <_dtoa_r+0x388>
 8008876:	4a95      	ldr	r2, [pc, #596]	; (8008acc <_dtoa_r+0x6fc>)
 8008878:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800887c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008882:	ec41 0b17 	vmov	d7, r0, r1
 8008886:	b35a      	cbz	r2, 80088e0 <_dtoa_r+0x510>
 8008888:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800888c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008890:	9e04      	ldr	r6, [sp, #16]
 8008892:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008896:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800889a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800889e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80088a2:	ee14 2a90 	vmov	r2, s9
 80088a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80088aa:	3230      	adds	r2, #48	; 0x30
 80088ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80088b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b8:	f806 2b01 	strb.w	r2, [r6], #1
 80088bc:	d43b      	bmi.n	8008936 <_dtoa_r+0x566>
 80088be:	ee32 5b46 	vsub.f64	d5, d2, d6
 80088c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80088c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ca:	d472      	bmi.n	80089b2 <_dtoa_r+0x5e2>
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	1ab2      	subs	r2, r6, r2
 80088d0:	4295      	cmp	r5, r2
 80088d2:	f77f af68 	ble.w	80087a6 <_dtoa_r+0x3d6>
 80088d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80088da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80088de:	e7de      	b.n	800889e <_dtoa_r+0x4ce>
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80088e6:	1956      	adds	r6, r2, r5
 80088e8:	4611      	mov	r1, r2
 80088ea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80088ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80088f2:	ee14 2a90 	vmov	r2, s9
 80088f6:	3230      	adds	r2, #48	; 0x30
 80088f8:	f801 2b01 	strb.w	r2, [r1], #1
 80088fc:	42b1      	cmp	r1, r6
 80088fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008902:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008906:	d11a      	bne.n	800893e <_dtoa_r+0x56e>
 8008908:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800890c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008910:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	dc4b      	bgt.n	80089b2 <_dtoa_r+0x5e2>
 800891a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800891e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008926:	f57f af3e 	bpl.w	80087a6 <_dtoa_r+0x3d6>
 800892a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800892e:	2a30      	cmp	r2, #48	; 0x30
 8008930:	f106 31ff 	add.w	r1, r6, #4294967295
 8008934:	d001      	beq.n	800893a <_dtoa_r+0x56a>
 8008936:	469b      	mov	fp, r3
 8008938:	e02a      	b.n	8008990 <_dtoa_r+0x5c0>
 800893a:	460e      	mov	r6, r1
 800893c:	e7f5      	b.n	800892a <_dtoa_r+0x55a>
 800893e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008942:	e7d4      	b.n	80088ee <_dtoa_r+0x51e>
 8008944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008948:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800894c:	9e04      	ldr	r6, [sp, #16]
 800894e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008952:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008956:	ee15 3a10 	vmov	r3, s10
 800895a:	3330      	adds	r3, #48	; 0x30
 800895c:	f806 3b01 	strb.w	r3, [r6], #1
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	1af3      	subs	r3, r6, r3
 8008964:	4599      	cmp	r9, r3
 8008966:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800896a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800896e:	d133      	bne.n	80089d8 <_dtoa_r+0x608>
 8008970:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008974:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897c:	dc18      	bgt.n	80089b0 <_dtoa_r+0x5e0>
 800897e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008986:	d103      	bne.n	8008990 <_dtoa_r+0x5c0>
 8008988:	ee15 3a10 	vmov	r3, s10
 800898c:	07db      	lsls	r3, r3, #31
 800898e:	d40f      	bmi.n	80089b0 <_dtoa_r+0x5e0>
 8008990:	9901      	ldr	r1, [sp, #4]
 8008992:	4620      	mov	r0, r4
 8008994:	f000 fc9b 	bl	80092ce <_Bfree>
 8008998:	2300      	movs	r3, #0
 800899a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800899c:	7033      	strb	r3, [r6, #0]
 800899e:	f10b 0301 	add.w	r3, fp, #1
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f43f ad5b 	beq.w	8008462 <_dtoa_r+0x92>
 80089ac:	601e      	str	r6, [r3, #0]
 80089ae:	e558      	b.n	8008462 <_dtoa_r+0x92>
 80089b0:	465b      	mov	r3, fp
 80089b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089b6:	2939      	cmp	r1, #57	; 0x39
 80089b8:	f106 32ff 	add.w	r2, r6, #4294967295
 80089bc:	d106      	bne.n	80089cc <_dtoa_r+0x5fc>
 80089be:	9904      	ldr	r1, [sp, #16]
 80089c0:	4291      	cmp	r1, r2
 80089c2:	d107      	bne.n	80089d4 <_dtoa_r+0x604>
 80089c4:	2230      	movs	r2, #48	; 0x30
 80089c6:	700a      	strb	r2, [r1, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	460a      	mov	r2, r1
 80089cc:	7811      	ldrb	r1, [r2, #0]
 80089ce:	3101      	adds	r1, #1
 80089d0:	7011      	strb	r1, [r2, #0]
 80089d2:	e7b0      	b.n	8008936 <_dtoa_r+0x566>
 80089d4:	4616      	mov	r6, r2
 80089d6:	e7ec      	b.n	80089b2 <_dtoa_r+0x5e2>
 80089d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80089dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e4:	d1b3      	bne.n	800894e <_dtoa_r+0x57e>
 80089e6:	e7d3      	b.n	8008990 <_dtoa_r+0x5c0>
 80089e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	f000 808d 	beq.w	8008b0a <_dtoa_r+0x73a>
 80089f0:	9a08      	ldr	r2, [sp, #32]
 80089f2:	2a01      	cmp	r2, #1
 80089f4:	dc72      	bgt.n	8008adc <_dtoa_r+0x70c>
 80089f6:	2f00      	cmp	r7, #0
 80089f8:	d06c      	beq.n	8008ad4 <_dtoa_r+0x704>
 80089fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089fe:	4645      	mov	r5, r8
 8008a00:	4656      	mov	r6, sl
 8008a02:	9a07      	ldr	r2, [sp, #28]
 8008a04:	2101      	movs	r1, #1
 8008a06:	441a      	add	r2, r3
 8008a08:	4620      	mov	r0, r4
 8008a0a:	449a      	add	sl, r3
 8008a0c:	9207      	str	r2, [sp, #28]
 8008a0e:	f000 fcfe 	bl	800940e <__i2b>
 8008a12:	4607      	mov	r7, r0
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	dd0b      	ble.n	8008a30 <_dtoa_r+0x660>
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dd08      	ble.n	8008a30 <_dtoa_r+0x660>
 8008a1e:	42b3      	cmp	r3, r6
 8008a20:	9a07      	ldr	r2, [sp, #28]
 8008a22:	bfa8      	it	ge
 8008a24:	4633      	movge	r3, r6
 8008a26:	ebaa 0a03 	sub.w	sl, sl, r3
 8008a2a:	1af6      	subs	r6, r6, r3
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	f1b8 0f00 	cmp.w	r8, #0
 8008a34:	d01d      	beq.n	8008a72 <_dtoa_r+0x6a2>
 8008a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d06a      	beq.n	8008b12 <_dtoa_r+0x742>
 8008a3c:	b18d      	cbz	r5, 8008a62 <_dtoa_r+0x692>
 8008a3e:	4639      	mov	r1, r7
 8008a40:	462a      	mov	r2, r5
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 fd82 	bl	800954c <__pow5mult>
 8008a48:	9a01      	ldr	r2, [sp, #4]
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fce6 	bl	8009420 <__multiply>
 8008a54:	9901      	ldr	r1, [sp, #4]
 8008a56:	900c      	str	r0, [sp, #48]	; 0x30
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 fc38 	bl	80092ce <_Bfree>
 8008a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	ebb8 0205 	subs.w	r2, r8, r5
 8008a66:	d004      	beq.n	8008a72 <_dtoa_r+0x6a2>
 8008a68:	9901      	ldr	r1, [sp, #4]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fd6e 	bl	800954c <__pow5mult>
 8008a70:	9001      	str	r0, [sp, #4]
 8008a72:	2101      	movs	r1, #1
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fcca 	bl	800940e <__i2b>
 8008a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 81ca 	beq.w	8008e18 <_dtoa_r+0xa48>
 8008a84:	461a      	mov	r2, r3
 8008a86:	4601      	mov	r1, r0
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fd5f 	bl	800954c <__pow5mult>
 8008a8e:	9b08      	ldr	r3, [sp, #32]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	4605      	mov	r5, r0
 8008a94:	dc44      	bgt.n	8008b20 <_dtoa_r+0x750>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d13c      	bne.n	8008b16 <_dtoa_r+0x746>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d137      	bne.n	8008b16 <_dtoa_r+0x746>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aac:	0d1b      	lsrs	r3, r3, #20
 8008aae:	051b      	lsls	r3, r3, #20
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d033      	beq.n	8008b1c <_dtoa_r+0x74c>
 8008ab4:	9b07      	ldr	r3, [sp, #28]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f10a 0a01 	add.w	sl, sl, #1
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	f04f 0801 	mov.w	r8, #1
 8008ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac4:	bb73      	cbnz	r3, 8008b24 <_dtoa_r+0x754>
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	e034      	b.n	8008b34 <_dtoa_r+0x764>
 8008aca:	bf00      	nop
 8008acc:	08009ee0 	.word	0x08009ee0
 8008ad0:	08009eb8 	.word	0x08009eb8
 8008ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ada:	e790      	b.n	80089fe <_dtoa_r+0x62e>
 8008adc:	f109 35ff 	add.w	r5, r9, #4294967295
 8008ae0:	45a8      	cmp	r8, r5
 8008ae2:	bfbf      	itttt	lt
 8008ae4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008ae6:	eba5 0808 	sublt.w	r8, r5, r8
 8008aea:	4443      	addlt	r3, r8
 8008aec:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008aee:	bfb6      	itet	lt
 8008af0:	46a8      	movlt	r8, r5
 8008af2:	eba8 0505 	subge.w	r5, r8, r5
 8008af6:	2500      	movlt	r5, #0
 8008af8:	f1b9 0f00 	cmp.w	r9, #0
 8008afc:	bfb9      	ittee	lt
 8008afe:	ebaa 0609 	sublt.w	r6, sl, r9
 8008b02:	2300      	movlt	r3, #0
 8008b04:	4656      	movge	r6, sl
 8008b06:	464b      	movge	r3, r9
 8008b08:	e77b      	b.n	8008a02 <_dtoa_r+0x632>
 8008b0a:	4645      	mov	r5, r8
 8008b0c:	4656      	mov	r6, sl
 8008b0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b10:	e780      	b.n	8008a14 <_dtoa_r+0x644>
 8008b12:	4642      	mov	r2, r8
 8008b14:	e7a8      	b.n	8008a68 <_dtoa_r+0x698>
 8008b16:	f04f 0800 	mov.w	r8, #0
 8008b1a:	e7d2      	b.n	8008ac2 <_dtoa_r+0x6f2>
 8008b1c:	4698      	mov	r8, r3
 8008b1e:	e7d0      	b.n	8008ac2 <_dtoa_r+0x6f2>
 8008b20:	f04f 0800 	mov.w	r8, #0
 8008b24:	692b      	ldr	r3, [r5, #16]
 8008b26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008b2a:	6918      	ldr	r0, [r3, #16]
 8008b2c:	f000 fc21 	bl	8009372 <__hi0bits>
 8008b30:	f1c0 0020 	rsb	r0, r0, #32
 8008b34:	9b07      	ldr	r3, [sp, #28]
 8008b36:	4418      	add	r0, r3
 8008b38:	f010 001f 	ands.w	r0, r0, #31
 8008b3c:	d047      	beq.n	8008bce <_dtoa_r+0x7fe>
 8008b3e:	f1c0 0320 	rsb	r3, r0, #32
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	dd3b      	ble.n	8008bbe <_dtoa_r+0x7ee>
 8008b46:	9b07      	ldr	r3, [sp, #28]
 8008b48:	f1c0 001c 	rsb	r0, r0, #28
 8008b4c:	4482      	add	sl, r0
 8008b4e:	4406      	add	r6, r0
 8008b50:	4403      	add	r3, r0
 8008b52:	9307      	str	r3, [sp, #28]
 8008b54:	f1ba 0f00 	cmp.w	sl, #0
 8008b58:	dd05      	ble.n	8008b66 <_dtoa_r+0x796>
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	9901      	ldr	r1, [sp, #4]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 fd42 	bl	80095e8 <__lshift>
 8008b64:	9001      	str	r0, [sp, #4]
 8008b66:	9b07      	ldr	r3, [sp, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dd05      	ble.n	8008b78 <_dtoa_r+0x7a8>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fd39 	bl	80095e8 <__lshift>
 8008b76:	4605      	mov	r5, r0
 8008b78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b7a:	b353      	cbz	r3, 8008bd2 <_dtoa_r+0x802>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	9801      	ldr	r0, [sp, #4]
 8008b80:	f000 fd86 	bl	8009690 <__mcmp>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	da24      	bge.n	8008bd2 <_dtoa_r+0x802>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	220a      	movs	r2, #10
 8008b8c:	9901      	ldr	r1, [sp, #4]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fbb4 	bl	80092fc <__multadd>
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	9001      	str	r0, [sp, #4]
 8008b98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8142 	beq.w	8008e26 <_dtoa_r+0xa56>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	220a      	movs	r2, #10
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fba7 	bl	80092fc <__multadd>
 8008bae:	9b06      	ldr	r3, [sp, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	dc4b      	bgt.n	8008c4e <_dtoa_r+0x87e>
 8008bb6:	9b08      	ldr	r3, [sp, #32]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	dd48      	ble.n	8008c4e <_dtoa_r+0x87e>
 8008bbc:	e011      	b.n	8008be2 <_dtoa_r+0x812>
 8008bbe:	d0c9      	beq.n	8008b54 <_dtoa_r+0x784>
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	331c      	adds	r3, #28
 8008bc4:	441a      	add	r2, r3
 8008bc6:	449a      	add	sl, r3
 8008bc8:	441e      	add	r6, r3
 8008bca:	4613      	mov	r3, r2
 8008bcc:	e7c1      	b.n	8008b52 <_dtoa_r+0x782>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	e7f6      	b.n	8008bc0 <_dtoa_r+0x7f0>
 8008bd2:	f1b9 0f00 	cmp.w	r9, #0
 8008bd6:	dc34      	bgt.n	8008c42 <_dtoa_r+0x872>
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	dd31      	ble.n	8008c42 <_dtoa_r+0x872>
 8008bde:	f8cd 9018 	str.w	r9, [sp, #24]
 8008be2:	9b06      	ldr	r3, [sp, #24]
 8008be4:	b963      	cbnz	r3, 8008c00 <_dtoa_r+0x830>
 8008be6:	4629      	mov	r1, r5
 8008be8:	2205      	movs	r2, #5
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 fb86 	bl	80092fc <__multadd>
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	9801      	ldr	r0, [sp, #4]
 8008bf6:	f000 fd4b 	bl	8009690 <__mcmp>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f73f adfc 	bgt.w	80087f8 <_dtoa_r+0x428>
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	9e04      	ldr	r6, [sp, #16]
 8008c04:	ea6f 0b03 	mvn.w	fp, r3
 8008c08:	f04f 0900 	mov.w	r9, #0
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 fb5d 	bl	80092ce <_Bfree>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	f43f aebb 	beq.w	8008990 <_dtoa_r+0x5c0>
 8008c1a:	f1b9 0f00 	cmp.w	r9, #0
 8008c1e:	d005      	beq.n	8008c2c <_dtoa_r+0x85c>
 8008c20:	45b9      	cmp	r9, r7
 8008c22:	d003      	beq.n	8008c2c <_dtoa_r+0x85c>
 8008c24:	4649      	mov	r1, r9
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 fb51 	bl	80092ce <_Bfree>
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fb4d 	bl	80092ce <_Bfree>
 8008c34:	e6ac      	b.n	8008990 <_dtoa_r+0x5c0>
 8008c36:	2500      	movs	r5, #0
 8008c38:	462f      	mov	r7, r5
 8008c3a:	e7e1      	b.n	8008c00 <_dtoa_r+0x830>
 8008c3c:	469b      	mov	fp, r3
 8008c3e:	462f      	mov	r7, r5
 8008c40:	e5da      	b.n	80087f8 <_dtoa_r+0x428>
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	f8cd 9018 	str.w	r9, [sp, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80f3 	beq.w	8008e34 <_dtoa_r+0xa64>
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	dd05      	ble.n	8008c5e <_dtoa_r+0x88e>
 8008c52:	4639      	mov	r1, r7
 8008c54:	4632      	mov	r2, r6
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 fcc6 	bl	80095e8 <__lshift>
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	f1b8 0f00 	cmp.w	r8, #0
 8008c62:	d04c      	beq.n	8008cfe <_dtoa_r+0x92e>
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 fafd 	bl	8009266 <_Balloc>
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	3202      	adds	r2, #2
 8008c70:	4606      	mov	r6, r0
 8008c72:	0092      	lsls	r2, r2, #2
 8008c74:	f107 010c 	add.w	r1, r7, #12
 8008c78:	300c      	adds	r0, #12
 8008c7a:	f000 fae9 	bl	8009250 <memcpy>
 8008c7e:	2201      	movs	r2, #1
 8008c80:	4631      	mov	r1, r6
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 fcb0 	bl	80095e8 <__lshift>
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	46b9      	mov	r9, r7
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	4607      	mov	r7, r0
 8008c98:	4629      	mov	r1, r5
 8008c9a:	9801      	ldr	r0, [sp, #4]
 8008c9c:	f7ff fb0c 	bl	80082b8 <quorem>
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ca8:	9801      	ldr	r0, [sp, #4]
 8008caa:	f000 fcf1 	bl	8009690 <__mcmp>
 8008cae:	463a      	mov	r2, r7
 8008cb0:	9002      	str	r0, [sp, #8]
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fd05 	bl	80096c4 <__mdiff>
 8008cba:	68c3      	ldr	r3, [r0, #12]
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	bb03      	cbnz	r3, 8008d02 <_dtoa_r+0x932>
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	9009      	str	r0, [sp, #36]	; 0x24
 8008cc4:	9801      	ldr	r0, [sp, #4]
 8008cc6:	f000 fce3 	bl	8009690 <__mcmp>
 8008cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ccc:	4603      	mov	r3, r0
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	f000 fafb 	bl	80092ce <_Bfree>
 8008cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cda:	b9a3      	cbnz	r3, 8008d06 <_dtoa_r+0x936>
 8008cdc:	9a08      	ldr	r2, [sp, #32]
 8008cde:	b992      	cbnz	r2, 8008d06 <_dtoa_r+0x936>
 8008ce0:	9a07      	ldr	r2, [sp, #28]
 8008ce2:	b982      	cbnz	r2, 8008d06 <_dtoa_r+0x936>
 8008ce4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ce8:	d029      	beq.n	8008d3e <_dtoa_r+0x96e>
 8008cea:	9b02      	ldr	r3, [sp, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd01      	ble.n	8008cf4 <_dtoa_r+0x924>
 8008cf0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008cf4:	f10a 0601 	add.w	r6, sl, #1
 8008cf8:	f88a 8000 	strb.w	r8, [sl]
 8008cfc:	e786      	b.n	8008c0c <_dtoa_r+0x83c>
 8008cfe:	4638      	mov	r0, r7
 8008d00:	e7c2      	b.n	8008c88 <_dtoa_r+0x8b8>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e7e3      	b.n	8008cce <_dtoa_r+0x8fe>
 8008d06:	9a02      	ldr	r2, [sp, #8]
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	db04      	blt.n	8008d16 <_dtoa_r+0x946>
 8008d0c:	d124      	bne.n	8008d58 <_dtoa_r+0x988>
 8008d0e:	9a08      	ldr	r2, [sp, #32]
 8008d10:	bb12      	cbnz	r2, 8008d58 <_dtoa_r+0x988>
 8008d12:	9a07      	ldr	r2, [sp, #28]
 8008d14:	bb02      	cbnz	r2, 8008d58 <_dtoa_r+0x988>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	ddec      	ble.n	8008cf4 <_dtoa_r+0x924>
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	9901      	ldr	r1, [sp, #4]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 fc62 	bl	80095e8 <__lshift>
 8008d24:	4629      	mov	r1, r5
 8008d26:	9001      	str	r0, [sp, #4]
 8008d28:	f000 fcb2 	bl	8009690 <__mcmp>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	dc03      	bgt.n	8008d38 <_dtoa_r+0x968>
 8008d30:	d1e0      	bne.n	8008cf4 <_dtoa_r+0x924>
 8008d32:	f018 0f01 	tst.w	r8, #1
 8008d36:	d0dd      	beq.n	8008cf4 <_dtoa_r+0x924>
 8008d38:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d3c:	d1d8      	bne.n	8008cf0 <_dtoa_r+0x920>
 8008d3e:	2339      	movs	r3, #57	; 0x39
 8008d40:	f10a 0601 	add.w	r6, sl, #1
 8008d44:	f88a 3000 	strb.w	r3, [sl]
 8008d48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d4c:	2b39      	cmp	r3, #57	; 0x39
 8008d4e:	f106 32ff 	add.w	r2, r6, #4294967295
 8008d52:	d04c      	beq.n	8008dee <_dtoa_r+0xa1e>
 8008d54:	3301      	adds	r3, #1
 8008d56:	e051      	b.n	8008dfc <_dtoa_r+0xa2c>
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f10a 0601 	add.w	r6, sl, #1
 8008d5e:	dd05      	ble.n	8008d6c <_dtoa_r+0x99c>
 8008d60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d64:	d0eb      	beq.n	8008d3e <_dtoa_r+0x96e>
 8008d66:	f108 0801 	add.w	r8, r8, #1
 8008d6a:	e7c5      	b.n	8008cf8 <_dtoa_r+0x928>
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	9a06      	ldr	r2, [sp, #24]
 8008d70:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008d74:	1af3      	subs	r3, r6, r3
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d021      	beq.n	8008dbe <_dtoa_r+0x9ee>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	220a      	movs	r2, #10
 8008d7e:	9901      	ldr	r1, [sp, #4]
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fabb 	bl	80092fc <__multadd>
 8008d86:	45b9      	cmp	r9, r7
 8008d88:	9001      	str	r0, [sp, #4]
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	f04f 020a 	mov.w	r2, #10
 8008d92:	4649      	mov	r1, r9
 8008d94:	4620      	mov	r0, r4
 8008d96:	d105      	bne.n	8008da4 <_dtoa_r+0x9d4>
 8008d98:	f000 fab0 	bl	80092fc <__multadd>
 8008d9c:	4681      	mov	r9, r0
 8008d9e:	4607      	mov	r7, r0
 8008da0:	46b2      	mov	sl, r6
 8008da2:	e779      	b.n	8008c98 <_dtoa_r+0x8c8>
 8008da4:	f000 faaa 	bl	80092fc <__multadd>
 8008da8:	4639      	mov	r1, r7
 8008daa:	4681      	mov	r9, r0
 8008dac:	2300      	movs	r3, #0
 8008dae:	220a      	movs	r2, #10
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 faa3 	bl	80092fc <__multadd>
 8008db6:	4607      	mov	r7, r0
 8008db8:	e7f2      	b.n	8008da0 <_dtoa_r+0x9d0>
 8008dba:	f04f 0900 	mov.w	r9, #0
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	9901      	ldr	r1, [sp, #4]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fc10 	bl	80095e8 <__lshift>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	9001      	str	r0, [sp, #4]
 8008dcc:	f000 fc60 	bl	8009690 <__mcmp>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dcb9      	bgt.n	8008d48 <_dtoa_r+0x978>
 8008dd4:	d102      	bne.n	8008ddc <_dtoa_r+0xa0c>
 8008dd6:	f018 0f01 	tst.w	r8, #1
 8008dda:	d1b5      	bne.n	8008d48 <_dtoa_r+0x978>
 8008ddc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008de0:	2b30      	cmp	r3, #48	; 0x30
 8008de2:	f106 32ff 	add.w	r2, r6, #4294967295
 8008de6:	f47f af11 	bne.w	8008c0c <_dtoa_r+0x83c>
 8008dea:	4616      	mov	r6, r2
 8008dec:	e7f6      	b.n	8008ddc <_dtoa_r+0xa0c>
 8008dee:	9b04      	ldr	r3, [sp, #16]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d105      	bne.n	8008e00 <_dtoa_r+0xa30>
 8008df4:	9a04      	ldr	r2, [sp, #16]
 8008df6:	f10b 0b01 	add.w	fp, fp, #1
 8008dfa:	2331      	movs	r3, #49	; 0x31
 8008dfc:	7013      	strb	r3, [r2, #0]
 8008dfe:	e705      	b.n	8008c0c <_dtoa_r+0x83c>
 8008e00:	4616      	mov	r6, r2
 8008e02:	e7a1      	b.n	8008d48 <_dtoa_r+0x978>
 8008e04:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <_dtoa_r+0xa90>)
 8008e06:	f7ff bb48 	b.w	800849a <_dtoa_r+0xca>
 8008e0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f47f ab23 	bne.w	8008458 <_dtoa_r+0x88>
 8008e12:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <_dtoa_r+0xa94>)
 8008e14:	f7ff bb41 	b.w	800849a <_dtoa_r+0xca>
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	f77f ae3b 	ble.w	8008a96 <_dtoa_r+0x6c6>
 8008e20:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008e24:	e64f      	b.n	8008ac6 <_dtoa_r+0x6f6>
 8008e26:	9b06      	ldr	r3, [sp, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	dc03      	bgt.n	8008e34 <_dtoa_r+0xa64>
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	f73f aed7 	bgt.w	8008be2 <_dtoa_r+0x812>
 8008e34:	9e04      	ldr	r6, [sp, #16]
 8008e36:	9801      	ldr	r0, [sp, #4]
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f7ff fa3d 	bl	80082b8 <quorem>
 8008e3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e42:	f806 8b01 	strb.w	r8, [r6], #1
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	9a06      	ldr	r2, [sp, #24]
 8008e4a:	1af3      	subs	r3, r6, r3
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	ddb4      	ble.n	8008dba <_dtoa_r+0x9ea>
 8008e50:	2300      	movs	r3, #0
 8008e52:	220a      	movs	r2, #10
 8008e54:	9901      	ldr	r1, [sp, #4]
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 fa50 	bl	80092fc <__multadd>
 8008e5c:	9001      	str	r0, [sp, #4]
 8008e5e:	e7ea      	b.n	8008e36 <_dtoa_r+0xa66>
 8008e60:	08009e20 	.word	0x08009e20
 8008e64:	08009e44 	.word	0x08009e44

08008e68 <__sflush_r>:
 8008e68:	898a      	ldrh	r2, [r1, #12]
 8008e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	4605      	mov	r5, r0
 8008e70:	0710      	lsls	r0, r2, #28
 8008e72:	460c      	mov	r4, r1
 8008e74:	d458      	bmi.n	8008f28 <__sflush_r+0xc0>
 8008e76:	684b      	ldr	r3, [r1, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dc05      	bgt.n	8008e88 <__sflush_r+0x20>
 8008e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dc02      	bgt.n	8008e88 <__sflush_r+0x20>
 8008e82:	2000      	movs	r0, #0
 8008e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e8a:	2e00      	cmp	r6, #0
 8008e8c:	d0f9      	beq.n	8008e82 <__sflush_r+0x1a>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e94:	682f      	ldr	r7, [r5, #0]
 8008e96:	6a21      	ldr	r1, [r4, #32]
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	d032      	beq.n	8008f02 <__sflush_r+0x9a>
 8008e9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	075a      	lsls	r2, r3, #29
 8008ea2:	d505      	bpl.n	8008eb0 <__sflush_r+0x48>
 8008ea4:	6863      	ldr	r3, [r4, #4]
 8008ea6:	1ac0      	subs	r0, r0, r3
 8008ea8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008eaa:	b10b      	cbz	r3, 8008eb0 <__sflush_r+0x48>
 8008eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008eae:	1ac0      	subs	r0, r0, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eb6:	6a21      	ldr	r1, [r4, #32]
 8008eb8:	4628      	mov	r0, r5
 8008eba:	47b0      	blx	r6
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	d106      	bne.n	8008ed0 <__sflush_r+0x68>
 8008ec2:	6829      	ldr	r1, [r5, #0]
 8008ec4:	291d      	cmp	r1, #29
 8008ec6:	d848      	bhi.n	8008f5a <__sflush_r+0xf2>
 8008ec8:	4a29      	ldr	r2, [pc, #164]	; (8008f70 <__sflush_r+0x108>)
 8008eca:	40ca      	lsrs	r2, r1
 8008ecc:	07d6      	lsls	r6, r2, #31
 8008ece:	d544      	bpl.n	8008f5a <__sflush_r+0xf2>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	6062      	str	r2, [r4, #4]
 8008ed4:	04d9      	lsls	r1, r3, #19
 8008ed6:	6922      	ldr	r2, [r4, #16]
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	d504      	bpl.n	8008ee6 <__sflush_r+0x7e>
 8008edc:	1c42      	adds	r2, r0, #1
 8008ede:	d101      	bne.n	8008ee4 <__sflush_r+0x7c>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b903      	cbnz	r3, 8008ee6 <__sflush_r+0x7e>
 8008ee4:	6560      	str	r0, [r4, #84]	; 0x54
 8008ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ee8:	602f      	str	r7, [r5, #0]
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d0c9      	beq.n	8008e82 <__sflush_r+0x1a>
 8008eee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef2:	4299      	cmp	r1, r3
 8008ef4:	d002      	beq.n	8008efc <__sflush_r+0x94>
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 fc9e 	bl	8009838 <_free_r>
 8008efc:	2000      	movs	r0, #0
 8008efe:	6360      	str	r0, [r4, #52]	; 0x34
 8008f00:	e7c0      	b.n	8008e84 <__sflush_r+0x1c>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b0      	blx	r6
 8008f08:	1c41      	adds	r1, r0, #1
 8008f0a:	d1c8      	bne.n	8008e9e <__sflush_r+0x36>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0c5      	beq.n	8008e9e <__sflush_r+0x36>
 8008f12:	2b1d      	cmp	r3, #29
 8008f14:	d001      	beq.n	8008f1a <__sflush_r+0xb2>
 8008f16:	2b16      	cmp	r3, #22
 8008f18:	d101      	bne.n	8008f1e <__sflush_r+0xb6>
 8008f1a:	602f      	str	r7, [r5, #0]
 8008f1c:	e7b1      	b.n	8008e82 <__sflush_r+0x1a>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	e7ad      	b.n	8008e84 <__sflush_r+0x1c>
 8008f28:	690f      	ldr	r7, [r1, #16]
 8008f2a:	2f00      	cmp	r7, #0
 8008f2c:	d0a9      	beq.n	8008e82 <__sflush_r+0x1a>
 8008f2e:	0793      	lsls	r3, r2, #30
 8008f30:	680e      	ldr	r6, [r1, #0]
 8008f32:	bf08      	it	eq
 8008f34:	694b      	ldreq	r3, [r1, #20]
 8008f36:	600f      	str	r7, [r1, #0]
 8008f38:	bf18      	it	ne
 8008f3a:	2300      	movne	r3, #0
 8008f3c:	eba6 0807 	sub.w	r8, r6, r7
 8008f40:	608b      	str	r3, [r1, #8]
 8008f42:	f1b8 0f00 	cmp.w	r8, #0
 8008f46:	dd9c      	ble.n	8008e82 <__sflush_r+0x1a>
 8008f48:	4643      	mov	r3, r8
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b0      	blx	r6
 8008f54:	2800      	cmp	r0, #0
 8008f56:	dc06      	bgt.n	8008f66 <__sflush_r+0xfe>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	e78e      	b.n	8008e84 <__sflush_r+0x1c>
 8008f66:	4407      	add	r7, r0
 8008f68:	eba8 0800 	sub.w	r8, r8, r0
 8008f6c:	e7e9      	b.n	8008f42 <__sflush_r+0xda>
 8008f6e:	bf00      	nop
 8008f70:	20400001 	.word	0x20400001

08008f74 <_fflush_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	690b      	ldr	r3, [r1, #16]
 8008f78:	4605      	mov	r5, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	b1db      	cbz	r3, 8008fb6 <_fflush_r+0x42>
 8008f7e:	b118      	cbz	r0, 8008f88 <_fflush_r+0x14>
 8008f80:	6983      	ldr	r3, [r0, #24]
 8008f82:	b90b      	cbnz	r3, 8008f88 <_fflush_r+0x14>
 8008f84:	f000 f860 	bl	8009048 <__sinit>
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <_fflush_r+0x48>)
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d109      	bne.n	8008fa2 <_fflush_r+0x2e>
 8008f8e:	686c      	ldr	r4, [r5, #4]
 8008f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f94:	b17b      	cbz	r3, 8008fb6 <_fflush_r+0x42>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f9e:	f7ff bf63 	b.w	8008e68 <__sflush_r>
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <_fflush_r+0x4c>)
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	d101      	bne.n	8008fac <_fflush_r+0x38>
 8008fa8:	68ac      	ldr	r4, [r5, #8]
 8008faa:	e7f1      	b.n	8008f90 <_fflush_r+0x1c>
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <_fflush_r+0x50>)
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	bf08      	it	eq
 8008fb2:	68ec      	ldreq	r4, [r5, #12]
 8008fb4:	e7ec      	b.n	8008f90 <_fflush_r+0x1c>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
 8008fba:	bf00      	nop
 8008fbc:	08009e74 	.word	0x08009e74
 8008fc0:	08009e94 	.word	0x08009e94
 8008fc4:	08009e54 	.word	0x08009e54

08008fc8 <std>:
 8008fc8:	2300      	movs	r3, #0
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	e9c0 3300 	strd	r3, r3, [r0]
 8008fd2:	6083      	str	r3, [r0, #8]
 8008fd4:	8181      	strh	r1, [r0, #12]
 8008fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fd8:	81c2      	strh	r2, [r0, #14]
 8008fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fde:	6183      	str	r3, [r0, #24]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	305c      	adds	r0, #92	; 0x5c
 8008fe6:	f7fe fbe9 	bl	80077bc <memset>
 8008fea:	4b05      	ldr	r3, [pc, #20]	; (8009000 <std+0x38>)
 8008fec:	6263      	str	r3, [r4, #36]	; 0x24
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <std+0x3c>)
 8008ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ff2:	4b05      	ldr	r3, [pc, #20]	; (8009008 <std+0x40>)
 8008ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <std+0x44>)
 8008ff8:	6224      	str	r4, [r4, #32]
 8008ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8008ffc:	bd10      	pop	{r4, pc}
 8008ffe:	bf00      	nop
 8009000:	08009c29 	.word	0x08009c29
 8009004:	08009c4b 	.word	0x08009c4b
 8009008:	08009c83 	.word	0x08009c83
 800900c:	08009ca7 	.word	0x08009ca7

08009010 <_cleanup_r>:
 8009010:	4901      	ldr	r1, [pc, #4]	; (8009018 <_cleanup_r+0x8>)
 8009012:	f000 b885 	b.w	8009120 <_fwalk_reent>
 8009016:	bf00      	nop
 8009018:	08008f75 	.word	0x08008f75

0800901c <__sfmoreglue>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	1e4a      	subs	r2, r1, #1
 8009020:	2568      	movs	r5, #104	; 0x68
 8009022:	4355      	muls	r5, r2
 8009024:	460e      	mov	r6, r1
 8009026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800902a:	f000 fc53 	bl	80098d4 <_malloc_r>
 800902e:	4604      	mov	r4, r0
 8009030:	b140      	cbz	r0, 8009044 <__sfmoreglue+0x28>
 8009032:	2100      	movs	r1, #0
 8009034:	e9c0 1600 	strd	r1, r6, [r0]
 8009038:	300c      	adds	r0, #12
 800903a:	60a0      	str	r0, [r4, #8]
 800903c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009040:	f7fe fbbc 	bl	80077bc <memset>
 8009044:	4620      	mov	r0, r4
 8009046:	bd70      	pop	{r4, r5, r6, pc}

08009048 <__sinit>:
 8009048:	6983      	ldr	r3, [r0, #24]
 800904a:	b510      	push	{r4, lr}
 800904c:	4604      	mov	r4, r0
 800904e:	bb33      	cbnz	r3, 800909e <__sinit+0x56>
 8009050:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009054:	6503      	str	r3, [r0, #80]	; 0x50
 8009056:	4b12      	ldr	r3, [pc, #72]	; (80090a0 <__sinit+0x58>)
 8009058:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <__sinit+0x5c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6282      	str	r2, [r0, #40]	; 0x28
 800905e:	4298      	cmp	r0, r3
 8009060:	bf04      	itt	eq
 8009062:	2301      	moveq	r3, #1
 8009064:	6183      	streq	r3, [r0, #24]
 8009066:	f000 f81f 	bl	80090a8 <__sfp>
 800906a:	6060      	str	r0, [r4, #4]
 800906c:	4620      	mov	r0, r4
 800906e:	f000 f81b 	bl	80090a8 <__sfp>
 8009072:	60a0      	str	r0, [r4, #8]
 8009074:	4620      	mov	r0, r4
 8009076:	f000 f817 	bl	80090a8 <__sfp>
 800907a:	2200      	movs	r2, #0
 800907c:	60e0      	str	r0, [r4, #12]
 800907e:	2104      	movs	r1, #4
 8009080:	6860      	ldr	r0, [r4, #4]
 8009082:	f7ff ffa1 	bl	8008fc8 <std>
 8009086:	2201      	movs	r2, #1
 8009088:	2109      	movs	r1, #9
 800908a:	68a0      	ldr	r0, [r4, #8]
 800908c:	f7ff ff9c 	bl	8008fc8 <std>
 8009090:	2202      	movs	r2, #2
 8009092:	2112      	movs	r1, #18
 8009094:	68e0      	ldr	r0, [r4, #12]
 8009096:	f7ff ff97 	bl	8008fc8 <std>
 800909a:	2301      	movs	r3, #1
 800909c:	61a3      	str	r3, [r4, #24]
 800909e:	bd10      	pop	{r4, pc}
 80090a0:	08009e0c 	.word	0x08009e0c
 80090a4:	08009011 	.word	0x08009011

080090a8 <__sfp>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <__sfp+0x70>)
 80090ac:	681e      	ldr	r6, [r3, #0]
 80090ae:	69b3      	ldr	r3, [r6, #24]
 80090b0:	4607      	mov	r7, r0
 80090b2:	b913      	cbnz	r3, 80090ba <__sfp+0x12>
 80090b4:	4630      	mov	r0, r6
 80090b6:	f7ff ffc7 	bl	8009048 <__sinit>
 80090ba:	3648      	adds	r6, #72	; 0x48
 80090bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	d503      	bpl.n	80090cc <__sfp+0x24>
 80090c4:	6833      	ldr	r3, [r6, #0]
 80090c6:	b133      	cbz	r3, 80090d6 <__sfp+0x2e>
 80090c8:	6836      	ldr	r6, [r6, #0]
 80090ca:	e7f7      	b.n	80090bc <__sfp+0x14>
 80090cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090d0:	b16d      	cbz	r5, 80090ee <__sfp+0x46>
 80090d2:	3468      	adds	r4, #104	; 0x68
 80090d4:	e7f4      	b.n	80090c0 <__sfp+0x18>
 80090d6:	2104      	movs	r1, #4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ff9f 	bl	800901c <__sfmoreglue>
 80090de:	6030      	str	r0, [r6, #0]
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d1f1      	bne.n	80090c8 <__sfp+0x20>
 80090e4:	230c      	movs	r3, #12
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	4604      	mov	r4, r0
 80090ea:	4620      	mov	r0, r4
 80090ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ee:	4b0b      	ldr	r3, [pc, #44]	; (800911c <__sfp+0x74>)
 80090f0:	6665      	str	r5, [r4, #100]	; 0x64
 80090f2:	e9c4 5500 	strd	r5, r5, [r4]
 80090f6:	60a5      	str	r5, [r4, #8]
 80090f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80090fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009100:	2208      	movs	r2, #8
 8009102:	4629      	mov	r1, r5
 8009104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009108:	f7fe fb58 	bl	80077bc <memset>
 800910c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009114:	e7e9      	b.n	80090ea <__sfp+0x42>
 8009116:	bf00      	nop
 8009118:	08009e0c 	.word	0x08009e0c
 800911c:	ffff0001 	.word	0xffff0001

08009120 <_fwalk_reent>:
 8009120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800912c:	2600      	movs	r6, #0
 800912e:	b914      	cbnz	r4, 8009136 <_fwalk_reent+0x16>
 8009130:	4630      	mov	r0, r6
 8009132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009136:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800913a:	3f01      	subs	r7, #1
 800913c:	d501      	bpl.n	8009142 <_fwalk_reent+0x22>
 800913e:	6824      	ldr	r4, [r4, #0]
 8009140:	e7f5      	b.n	800912e <_fwalk_reent+0xe>
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d907      	bls.n	8009158 <_fwalk_reent+0x38>
 8009148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800914c:	3301      	adds	r3, #1
 800914e:	d003      	beq.n	8009158 <_fwalk_reent+0x38>
 8009150:	4629      	mov	r1, r5
 8009152:	4640      	mov	r0, r8
 8009154:	47c8      	blx	r9
 8009156:	4306      	orrs	r6, r0
 8009158:	3568      	adds	r5, #104	; 0x68
 800915a:	e7ee      	b.n	800913a <_fwalk_reent+0x1a>

0800915c <_localeconv_r>:
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <_localeconv_r+0x14>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6a18      	ldr	r0, [r3, #32]
 8009162:	4b04      	ldr	r3, [pc, #16]	; (8009174 <_localeconv_r+0x18>)
 8009164:	2800      	cmp	r0, #0
 8009166:	bf08      	it	eq
 8009168:	4618      	moveq	r0, r3
 800916a:	30f0      	adds	r0, #240	; 0xf0
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000028 	.word	0x20000028
 8009174:	2000008c 	.word	0x2000008c

08009178 <__swhatbuf_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	460e      	mov	r6, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2900      	cmp	r1, #0
 8009182:	b096      	sub	sp, #88	; 0x58
 8009184:	4614      	mov	r4, r2
 8009186:	461d      	mov	r5, r3
 8009188:	da07      	bge.n	800919a <__swhatbuf_r+0x22>
 800918a:	2300      	movs	r3, #0
 800918c:	602b      	str	r3, [r5, #0]
 800918e:	89b3      	ldrh	r3, [r6, #12]
 8009190:	061a      	lsls	r2, r3, #24
 8009192:	d410      	bmi.n	80091b6 <__swhatbuf_r+0x3e>
 8009194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009198:	e00e      	b.n	80091b8 <__swhatbuf_r+0x40>
 800919a:	466a      	mov	r2, sp
 800919c:	f000 fdaa 	bl	8009cf4 <_fstat_r>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dbf2      	blt.n	800918a <__swhatbuf_r+0x12>
 80091a4:	9a01      	ldr	r2, [sp, #4]
 80091a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091ae:	425a      	negs	r2, r3
 80091b0:	415a      	adcs	r2, r3
 80091b2:	602a      	str	r2, [r5, #0]
 80091b4:	e7ee      	b.n	8009194 <__swhatbuf_r+0x1c>
 80091b6:	2340      	movs	r3, #64	; 0x40
 80091b8:	2000      	movs	r0, #0
 80091ba:	6023      	str	r3, [r4, #0]
 80091bc:	b016      	add	sp, #88	; 0x58
 80091be:	bd70      	pop	{r4, r5, r6, pc}

080091c0 <__smakebuf_r>:
 80091c0:	898b      	ldrh	r3, [r1, #12]
 80091c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091c4:	079d      	lsls	r5, r3, #30
 80091c6:	4606      	mov	r6, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	d507      	bpl.n	80091dc <__smakebuf_r+0x1c>
 80091cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	2301      	movs	r3, #1
 80091d6:	6163      	str	r3, [r4, #20]
 80091d8:	b002      	add	sp, #8
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	ab01      	add	r3, sp, #4
 80091de:	466a      	mov	r2, sp
 80091e0:	f7ff ffca 	bl	8009178 <__swhatbuf_r>
 80091e4:	9900      	ldr	r1, [sp, #0]
 80091e6:	4605      	mov	r5, r0
 80091e8:	4630      	mov	r0, r6
 80091ea:	f000 fb73 	bl	80098d4 <_malloc_r>
 80091ee:	b948      	cbnz	r0, 8009204 <__smakebuf_r+0x44>
 80091f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d4ef      	bmi.n	80091d8 <__smakebuf_r+0x18>
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	f043 0302 	orr.w	r3, r3, #2
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	e7e3      	b.n	80091cc <__smakebuf_r+0xc>
 8009204:	4b0d      	ldr	r3, [pc, #52]	; (800923c <__smakebuf_r+0x7c>)
 8009206:	62b3      	str	r3, [r6, #40]	; 0x28
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	6020      	str	r0, [r4, #0]
 800920c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	9b00      	ldr	r3, [sp, #0]
 8009214:	6163      	str	r3, [r4, #20]
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	6120      	str	r0, [r4, #16]
 800921a:	b15b      	cbz	r3, 8009234 <__smakebuf_r+0x74>
 800921c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009220:	4630      	mov	r0, r6
 8009222:	f000 fd79 	bl	8009d18 <_isatty_r>
 8009226:	b128      	cbz	r0, 8009234 <__smakebuf_r+0x74>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	431d      	orrs	r5, r3
 8009238:	81a5      	strh	r5, [r4, #12]
 800923a:	e7cd      	b.n	80091d8 <__smakebuf_r+0x18>
 800923c:	08009011 	.word	0x08009011

08009240 <malloc>:
 8009240:	4b02      	ldr	r3, [pc, #8]	; (800924c <malloc+0xc>)
 8009242:	4601      	mov	r1, r0
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	f000 bb45 	b.w	80098d4 <_malloc_r>
 800924a:	bf00      	nop
 800924c:	20000028 	.word	0x20000028

08009250 <memcpy>:
 8009250:	b510      	push	{r4, lr}
 8009252:	1e43      	subs	r3, r0, #1
 8009254:	440a      	add	r2, r1
 8009256:	4291      	cmp	r1, r2
 8009258:	d100      	bne.n	800925c <memcpy+0xc>
 800925a:	bd10      	pop	{r4, pc}
 800925c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009264:	e7f7      	b.n	8009256 <memcpy+0x6>

08009266 <_Balloc>:
 8009266:	b570      	push	{r4, r5, r6, lr}
 8009268:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800926a:	4604      	mov	r4, r0
 800926c:	460e      	mov	r6, r1
 800926e:	b93d      	cbnz	r5, 8009280 <_Balloc+0x1a>
 8009270:	2010      	movs	r0, #16
 8009272:	f7ff ffe5 	bl	8009240 <malloc>
 8009276:	6260      	str	r0, [r4, #36]	; 0x24
 8009278:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800927c:	6005      	str	r5, [r0, #0]
 800927e:	60c5      	str	r5, [r0, #12]
 8009280:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009282:	68eb      	ldr	r3, [r5, #12]
 8009284:	b183      	cbz	r3, 80092a8 <_Balloc+0x42>
 8009286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800928e:	b9b8      	cbnz	r0, 80092c0 <_Balloc+0x5a>
 8009290:	2101      	movs	r1, #1
 8009292:	fa01 f506 	lsl.w	r5, r1, r6
 8009296:	1d6a      	adds	r2, r5, #5
 8009298:	0092      	lsls	r2, r2, #2
 800929a:	4620      	mov	r0, r4
 800929c:	f000 fabe 	bl	800981c <_calloc_r>
 80092a0:	b160      	cbz	r0, 80092bc <_Balloc+0x56>
 80092a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80092a6:	e00e      	b.n	80092c6 <_Balloc+0x60>
 80092a8:	2221      	movs	r2, #33	; 0x21
 80092aa:	2104      	movs	r1, #4
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fab5 	bl	800981c <_calloc_r>
 80092b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092b4:	60e8      	str	r0, [r5, #12]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e4      	bne.n	8009286 <_Balloc+0x20>
 80092bc:	2000      	movs	r0, #0
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	6802      	ldr	r2, [r0, #0]
 80092c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80092c6:	2300      	movs	r3, #0
 80092c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092cc:	e7f7      	b.n	80092be <_Balloc+0x58>

080092ce <_Bfree>:
 80092ce:	b570      	push	{r4, r5, r6, lr}
 80092d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092d2:	4606      	mov	r6, r0
 80092d4:	460d      	mov	r5, r1
 80092d6:	b93c      	cbnz	r4, 80092e8 <_Bfree+0x1a>
 80092d8:	2010      	movs	r0, #16
 80092da:	f7ff ffb1 	bl	8009240 <malloc>
 80092de:	6270      	str	r0, [r6, #36]	; 0x24
 80092e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092e4:	6004      	str	r4, [r0, #0]
 80092e6:	60c4      	str	r4, [r0, #12]
 80092e8:	b13d      	cbz	r5, 80092fa <_Bfree+0x2c>
 80092ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092ec:	686a      	ldr	r2, [r5, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092f4:	6029      	str	r1, [r5, #0]
 80092f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80092fa:	bd70      	pop	{r4, r5, r6, pc}

080092fc <__multadd>:
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	690d      	ldr	r5, [r1, #16]
 8009302:	461f      	mov	r7, r3
 8009304:	4606      	mov	r6, r0
 8009306:	460c      	mov	r4, r1
 8009308:	f101 0c14 	add.w	ip, r1, #20
 800930c:	2300      	movs	r3, #0
 800930e:	f8dc 0000 	ldr.w	r0, [ip]
 8009312:	b281      	uxth	r1, r0
 8009314:	fb02 7101 	mla	r1, r2, r1, r7
 8009318:	0c0f      	lsrs	r7, r1, #16
 800931a:	0c00      	lsrs	r0, r0, #16
 800931c:	fb02 7000 	mla	r0, r2, r0, r7
 8009320:	b289      	uxth	r1, r1
 8009322:	3301      	adds	r3, #1
 8009324:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009328:	429d      	cmp	r5, r3
 800932a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800932e:	f84c 1b04 	str.w	r1, [ip], #4
 8009332:	dcec      	bgt.n	800930e <__multadd+0x12>
 8009334:	b1d7      	cbz	r7, 800936c <__multadd+0x70>
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	42ab      	cmp	r3, r5
 800933a:	dc12      	bgt.n	8009362 <__multadd+0x66>
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	4630      	mov	r0, r6
 8009340:	3101      	adds	r1, #1
 8009342:	f7ff ff90 	bl	8009266 <_Balloc>
 8009346:	6922      	ldr	r2, [r4, #16]
 8009348:	3202      	adds	r2, #2
 800934a:	f104 010c 	add.w	r1, r4, #12
 800934e:	4680      	mov	r8, r0
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	300c      	adds	r0, #12
 8009354:	f7ff ff7c 	bl	8009250 <memcpy>
 8009358:	4621      	mov	r1, r4
 800935a:	4630      	mov	r0, r6
 800935c:	f7ff ffb7 	bl	80092ce <_Bfree>
 8009360:	4644      	mov	r4, r8
 8009362:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009366:	3501      	adds	r5, #1
 8009368:	615f      	str	r7, [r3, #20]
 800936a:	6125      	str	r5, [r4, #16]
 800936c:	4620      	mov	r0, r4
 800936e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009372 <__hi0bits>:
 8009372:	0c02      	lsrs	r2, r0, #16
 8009374:	0412      	lsls	r2, r2, #16
 8009376:	4603      	mov	r3, r0
 8009378:	b9b2      	cbnz	r2, 80093a8 <__hi0bits+0x36>
 800937a:	0403      	lsls	r3, r0, #16
 800937c:	2010      	movs	r0, #16
 800937e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009382:	bf04      	itt	eq
 8009384:	021b      	lsleq	r3, r3, #8
 8009386:	3008      	addeq	r0, #8
 8009388:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800938c:	bf04      	itt	eq
 800938e:	011b      	lsleq	r3, r3, #4
 8009390:	3004      	addeq	r0, #4
 8009392:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009396:	bf04      	itt	eq
 8009398:	009b      	lsleq	r3, r3, #2
 800939a:	3002      	addeq	r0, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	db06      	blt.n	80093ae <__hi0bits+0x3c>
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	d503      	bpl.n	80093ac <__hi0bits+0x3a>
 80093a4:	3001      	adds	r0, #1
 80093a6:	4770      	bx	lr
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7e8      	b.n	800937e <__hi0bits+0xc>
 80093ac:	2020      	movs	r0, #32
 80093ae:	4770      	bx	lr

080093b0 <__lo0bits>:
 80093b0:	6803      	ldr	r3, [r0, #0]
 80093b2:	f013 0207 	ands.w	r2, r3, #7
 80093b6:	4601      	mov	r1, r0
 80093b8:	d00b      	beq.n	80093d2 <__lo0bits+0x22>
 80093ba:	07da      	lsls	r2, r3, #31
 80093bc:	d423      	bmi.n	8009406 <__lo0bits+0x56>
 80093be:	0798      	lsls	r0, r3, #30
 80093c0:	bf49      	itett	mi
 80093c2:	085b      	lsrmi	r3, r3, #1
 80093c4:	089b      	lsrpl	r3, r3, #2
 80093c6:	2001      	movmi	r0, #1
 80093c8:	600b      	strmi	r3, [r1, #0]
 80093ca:	bf5c      	itt	pl
 80093cc:	600b      	strpl	r3, [r1, #0]
 80093ce:	2002      	movpl	r0, #2
 80093d0:	4770      	bx	lr
 80093d2:	b298      	uxth	r0, r3
 80093d4:	b9a8      	cbnz	r0, 8009402 <__lo0bits+0x52>
 80093d6:	0c1b      	lsrs	r3, r3, #16
 80093d8:	2010      	movs	r0, #16
 80093da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093de:	bf04      	itt	eq
 80093e0:	0a1b      	lsreq	r3, r3, #8
 80093e2:	3008      	addeq	r0, #8
 80093e4:	071a      	lsls	r2, r3, #28
 80093e6:	bf04      	itt	eq
 80093e8:	091b      	lsreq	r3, r3, #4
 80093ea:	3004      	addeq	r0, #4
 80093ec:	079a      	lsls	r2, r3, #30
 80093ee:	bf04      	itt	eq
 80093f0:	089b      	lsreq	r3, r3, #2
 80093f2:	3002      	addeq	r0, #2
 80093f4:	07da      	lsls	r2, r3, #31
 80093f6:	d402      	bmi.n	80093fe <__lo0bits+0x4e>
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	d006      	beq.n	800940a <__lo0bits+0x5a>
 80093fc:	3001      	adds	r0, #1
 80093fe:	600b      	str	r3, [r1, #0]
 8009400:	4770      	bx	lr
 8009402:	4610      	mov	r0, r2
 8009404:	e7e9      	b.n	80093da <__lo0bits+0x2a>
 8009406:	2000      	movs	r0, #0
 8009408:	4770      	bx	lr
 800940a:	2020      	movs	r0, #32
 800940c:	4770      	bx	lr

0800940e <__i2b>:
 800940e:	b510      	push	{r4, lr}
 8009410:	460c      	mov	r4, r1
 8009412:	2101      	movs	r1, #1
 8009414:	f7ff ff27 	bl	8009266 <_Balloc>
 8009418:	2201      	movs	r2, #1
 800941a:	6144      	str	r4, [r0, #20]
 800941c:	6102      	str	r2, [r0, #16]
 800941e:	bd10      	pop	{r4, pc}

08009420 <__multiply>:
 8009420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	4614      	mov	r4, r2
 8009426:	690a      	ldr	r2, [r1, #16]
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	429a      	cmp	r2, r3
 800942c:	bfb8      	it	lt
 800942e:	460b      	movlt	r3, r1
 8009430:	4688      	mov	r8, r1
 8009432:	bfbc      	itt	lt
 8009434:	46a0      	movlt	r8, r4
 8009436:	461c      	movlt	r4, r3
 8009438:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800943c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009440:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009444:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009448:	eb07 0609 	add.w	r6, r7, r9
 800944c:	42b3      	cmp	r3, r6
 800944e:	bfb8      	it	lt
 8009450:	3101      	addlt	r1, #1
 8009452:	f7ff ff08 	bl	8009266 <_Balloc>
 8009456:	f100 0514 	add.w	r5, r0, #20
 800945a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800945e:	462b      	mov	r3, r5
 8009460:	2200      	movs	r2, #0
 8009462:	4573      	cmp	r3, lr
 8009464:	d316      	bcc.n	8009494 <__multiply+0x74>
 8009466:	f104 0214 	add.w	r2, r4, #20
 800946a:	f108 0114 	add.w	r1, r8, #20
 800946e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009472:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	9b00      	ldr	r3, [sp, #0]
 800947a:	9201      	str	r2, [sp, #4]
 800947c:	4293      	cmp	r3, r2
 800947e:	d80c      	bhi.n	800949a <__multiply+0x7a>
 8009480:	2e00      	cmp	r6, #0
 8009482:	dd03      	ble.n	800948c <__multiply+0x6c>
 8009484:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009488:	2b00      	cmp	r3, #0
 800948a:	d05d      	beq.n	8009548 <__multiply+0x128>
 800948c:	6106      	str	r6, [r0, #16]
 800948e:	b003      	add	sp, #12
 8009490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009494:	f843 2b04 	str.w	r2, [r3], #4
 8009498:	e7e3      	b.n	8009462 <__multiply+0x42>
 800949a:	f8b2 b000 	ldrh.w	fp, [r2]
 800949e:	f1bb 0f00 	cmp.w	fp, #0
 80094a2:	d023      	beq.n	80094ec <__multiply+0xcc>
 80094a4:	4689      	mov	r9, r1
 80094a6:	46ac      	mov	ip, r5
 80094a8:	f04f 0800 	mov.w	r8, #0
 80094ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80094b0:	f8dc a000 	ldr.w	sl, [ip]
 80094b4:	b2a3      	uxth	r3, r4
 80094b6:	fa1f fa8a 	uxth.w	sl, sl
 80094ba:	fb0b a303 	mla	r3, fp, r3, sl
 80094be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80094c2:	f8dc 4000 	ldr.w	r4, [ip]
 80094c6:	4443      	add	r3, r8
 80094c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094cc:	fb0b 840a 	mla	r4, fp, sl, r8
 80094d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80094d4:	46e2      	mov	sl, ip
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094dc:	454f      	cmp	r7, r9
 80094de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094e2:	f84a 3b04 	str.w	r3, [sl], #4
 80094e6:	d82b      	bhi.n	8009540 <__multiply+0x120>
 80094e8:	f8cc 8004 	str.w	r8, [ip, #4]
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80094f2:	3204      	adds	r2, #4
 80094f4:	f1ba 0f00 	cmp.w	sl, #0
 80094f8:	d020      	beq.n	800953c <__multiply+0x11c>
 80094fa:	682b      	ldr	r3, [r5, #0]
 80094fc:	4689      	mov	r9, r1
 80094fe:	46a8      	mov	r8, r5
 8009500:	f04f 0b00 	mov.w	fp, #0
 8009504:	f8b9 c000 	ldrh.w	ip, [r9]
 8009508:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800950c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009510:	445c      	add	r4, fp
 8009512:	46c4      	mov	ip, r8
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800951a:	f84c 3b04 	str.w	r3, [ip], #4
 800951e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009522:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	fb0a b303 	mla	r3, sl, r3, fp
 800952c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009530:	454f      	cmp	r7, r9
 8009532:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009536:	d805      	bhi.n	8009544 <__multiply+0x124>
 8009538:	f8c8 3004 	str.w	r3, [r8, #4]
 800953c:	3504      	adds	r5, #4
 800953e:	e79b      	b.n	8009478 <__multiply+0x58>
 8009540:	46d4      	mov	ip, sl
 8009542:	e7b3      	b.n	80094ac <__multiply+0x8c>
 8009544:	46e0      	mov	r8, ip
 8009546:	e7dd      	b.n	8009504 <__multiply+0xe4>
 8009548:	3e01      	subs	r6, #1
 800954a:	e799      	b.n	8009480 <__multiply+0x60>

0800954c <__pow5mult>:
 800954c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009550:	4615      	mov	r5, r2
 8009552:	f012 0203 	ands.w	r2, r2, #3
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	d007      	beq.n	800956c <__pow5mult+0x20>
 800955c:	3a01      	subs	r2, #1
 800955e:	4c21      	ldr	r4, [pc, #132]	; (80095e4 <__pow5mult+0x98>)
 8009560:	2300      	movs	r3, #0
 8009562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009566:	f7ff fec9 	bl	80092fc <__multadd>
 800956a:	4607      	mov	r7, r0
 800956c:	10ad      	asrs	r5, r5, #2
 800956e:	d035      	beq.n	80095dc <__pow5mult+0x90>
 8009570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009572:	b93c      	cbnz	r4, 8009584 <__pow5mult+0x38>
 8009574:	2010      	movs	r0, #16
 8009576:	f7ff fe63 	bl	8009240 <malloc>
 800957a:	6270      	str	r0, [r6, #36]	; 0x24
 800957c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009580:	6004      	str	r4, [r0, #0]
 8009582:	60c4      	str	r4, [r0, #12]
 8009584:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800958c:	b94c      	cbnz	r4, 80095a2 <__pow5mult+0x56>
 800958e:	f240 2171 	movw	r1, #625	; 0x271
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff ff3b 	bl	800940e <__i2b>
 8009598:	2300      	movs	r3, #0
 800959a:	f8c8 0008 	str.w	r0, [r8, #8]
 800959e:	4604      	mov	r4, r0
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	07eb      	lsls	r3, r5, #31
 80095a8:	d50a      	bpl.n	80095c0 <__pow5mult+0x74>
 80095aa:	4639      	mov	r1, r7
 80095ac:	4622      	mov	r2, r4
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7ff ff36 	bl	8009420 <__multiply>
 80095b4:	4639      	mov	r1, r7
 80095b6:	4681      	mov	r9, r0
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7ff fe88 	bl	80092ce <_Bfree>
 80095be:	464f      	mov	r7, r9
 80095c0:	106d      	asrs	r5, r5, #1
 80095c2:	d00b      	beq.n	80095dc <__pow5mult+0x90>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	b938      	cbnz	r0, 80095d8 <__pow5mult+0x8c>
 80095c8:	4622      	mov	r2, r4
 80095ca:	4621      	mov	r1, r4
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff ff27 	bl	8009420 <__multiply>
 80095d2:	6020      	str	r0, [r4, #0]
 80095d4:	f8c0 8000 	str.w	r8, [r0]
 80095d8:	4604      	mov	r4, r0
 80095da:	e7e4      	b.n	80095a6 <__pow5mult+0x5a>
 80095dc:	4638      	mov	r0, r7
 80095de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e2:	bf00      	nop
 80095e4:	08009fa8 	.word	0x08009fa8

080095e8 <__lshift>:
 80095e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ec:	460c      	mov	r4, r1
 80095ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095f2:	6923      	ldr	r3, [r4, #16]
 80095f4:	6849      	ldr	r1, [r1, #4]
 80095f6:	eb0a 0903 	add.w	r9, sl, r3
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	4607      	mov	r7, r0
 80095fe:	4616      	mov	r6, r2
 8009600:	f109 0501 	add.w	r5, r9, #1
 8009604:	42ab      	cmp	r3, r5
 8009606:	db32      	blt.n	800966e <__lshift+0x86>
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff fe2c 	bl	8009266 <_Balloc>
 800960e:	2300      	movs	r3, #0
 8009610:	4680      	mov	r8, r0
 8009612:	f100 0114 	add.w	r1, r0, #20
 8009616:	461a      	mov	r2, r3
 8009618:	4553      	cmp	r3, sl
 800961a:	db2b      	blt.n	8009674 <__lshift+0x8c>
 800961c:	6920      	ldr	r0, [r4, #16]
 800961e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009622:	f104 0314 	add.w	r3, r4, #20
 8009626:	f016 021f 	ands.w	r2, r6, #31
 800962a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800962e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009632:	d025      	beq.n	8009680 <__lshift+0x98>
 8009634:	f1c2 0e20 	rsb	lr, r2, #32
 8009638:	2000      	movs	r0, #0
 800963a:	681e      	ldr	r6, [r3, #0]
 800963c:	468a      	mov	sl, r1
 800963e:	4096      	lsls	r6, r2
 8009640:	4330      	orrs	r0, r6
 8009642:	f84a 0b04 	str.w	r0, [sl], #4
 8009646:	f853 0b04 	ldr.w	r0, [r3], #4
 800964a:	459c      	cmp	ip, r3
 800964c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009650:	d814      	bhi.n	800967c <__lshift+0x94>
 8009652:	6048      	str	r0, [r1, #4]
 8009654:	b108      	cbz	r0, 800965a <__lshift+0x72>
 8009656:	f109 0502 	add.w	r5, r9, #2
 800965a:	3d01      	subs	r5, #1
 800965c:	4638      	mov	r0, r7
 800965e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009662:	4621      	mov	r1, r4
 8009664:	f7ff fe33 	bl	80092ce <_Bfree>
 8009668:	4640      	mov	r0, r8
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	3101      	adds	r1, #1
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	e7c7      	b.n	8009604 <__lshift+0x1c>
 8009674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009678:	3301      	adds	r3, #1
 800967a:	e7cd      	b.n	8009618 <__lshift+0x30>
 800967c:	4651      	mov	r1, sl
 800967e:	e7dc      	b.n	800963a <__lshift+0x52>
 8009680:	3904      	subs	r1, #4
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	f841 2f04 	str.w	r2, [r1, #4]!
 800968a:	459c      	cmp	ip, r3
 800968c:	d8f9      	bhi.n	8009682 <__lshift+0x9a>
 800968e:	e7e4      	b.n	800965a <__lshift+0x72>

08009690 <__mcmp>:
 8009690:	6903      	ldr	r3, [r0, #16]
 8009692:	690a      	ldr	r2, [r1, #16]
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	b530      	push	{r4, r5, lr}
 8009698:	d10c      	bne.n	80096b4 <__mcmp+0x24>
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	3014      	adds	r0, #20
 800969e:	3114      	adds	r1, #20
 80096a0:	1884      	adds	r4, r0, r2
 80096a2:	4411      	add	r1, r2
 80096a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096ac:	4295      	cmp	r5, r2
 80096ae:	d003      	beq.n	80096b8 <__mcmp+0x28>
 80096b0:	d305      	bcc.n	80096be <__mcmp+0x2e>
 80096b2:	2301      	movs	r3, #1
 80096b4:	4618      	mov	r0, r3
 80096b6:	bd30      	pop	{r4, r5, pc}
 80096b8:	42a0      	cmp	r0, r4
 80096ba:	d3f3      	bcc.n	80096a4 <__mcmp+0x14>
 80096bc:	e7fa      	b.n	80096b4 <__mcmp+0x24>
 80096be:	f04f 33ff 	mov.w	r3, #4294967295
 80096c2:	e7f7      	b.n	80096b4 <__mcmp+0x24>

080096c4 <__mdiff>:
 80096c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	460d      	mov	r5, r1
 80096ca:	4607      	mov	r7, r0
 80096cc:	4611      	mov	r1, r2
 80096ce:	4628      	mov	r0, r5
 80096d0:	4614      	mov	r4, r2
 80096d2:	f7ff ffdd 	bl	8009690 <__mcmp>
 80096d6:	1e06      	subs	r6, r0, #0
 80096d8:	d108      	bne.n	80096ec <__mdiff+0x28>
 80096da:	4631      	mov	r1, r6
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff fdc2 	bl	8009266 <_Balloc>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ec:	bfa4      	itt	ge
 80096ee:	4623      	movge	r3, r4
 80096f0:	462c      	movge	r4, r5
 80096f2:	4638      	mov	r0, r7
 80096f4:	6861      	ldr	r1, [r4, #4]
 80096f6:	bfa6      	itte	ge
 80096f8:	461d      	movge	r5, r3
 80096fa:	2600      	movge	r6, #0
 80096fc:	2601      	movlt	r6, #1
 80096fe:	f7ff fdb2 	bl	8009266 <_Balloc>
 8009702:	692b      	ldr	r3, [r5, #16]
 8009704:	60c6      	str	r6, [r0, #12]
 8009706:	6926      	ldr	r6, [r4, #16]
 8009708:	f105 0914 	add.w	r9, r5, #20
 800970c:	f104 0214 	add.w	r2, r4, #20
 8009710:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009714:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009718:	f100 0514 	add.w	r5, r0, #20
 800971c:	f04f 0e00 	mov.w	lr, #0
 8009720:	f852 ab04 	ldr.w	sl, [r2], #4
 8009724:	f859 4b04 	ldr.w	r4, [r9], #4
 8009728:	fa1e f18a 	uxtah	r1, lr, sl
 800972c:	b2a3      	uxth	r3, r4
 800972e:	1ac9      	subs	r1, r1, r3
 8009730:	0c23      	lsrs	r3, r4, #16
 8009732:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009736:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800973a:	b289      	uxth	r1, r1
 800973c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009740:	45c8      	cmp	r8, r9
 8009742:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009746:	4694      	mov	ip, r2
 8009748:	f845 3b04 	str.w	r3, [r5], #4
 800974c:	d8e8      	bhi.n	8009720 <__mdiff+0x5c>
 800974e:	45bc      	cmp	ip, r7
 8009750:	d304      	bcc.n	800975c <__mdiff+0x98>
 8009752:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009756:	b183      	cbz	r3, 800977a <__mdiff+0xb6>
 8009758:	6106      	str	r6, [r0, #16]
 800975a:	e7c5      	b.n	80096e8 <__mdiff+0x24>
 800975c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009760:	fa1e f381 	uxtah	r3, lr, r1
 8009764:	141a      	asrs	r2, r3, #16
 8009766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800976a:	b29b      	uxth	r3, r3
 800976c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009770:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009774:	f845 3b04 	str.w	r3, [r5], #4
 8009778:	e7e9      	b.n	800974e <__mdiff+0x8a>
 800977a:	3e01      	subs	r6, #1
 800977c:	e7e9      	b.n	8009752 <__mdiff+0x8e>

0800977e <__d2b>:
 800977e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009782:	460e      	mov	r6, r1
 8009784:	2101      	movs	r1, #1
 8009786:	ec59 8b10 	vmov	r8, r9, d0
 800978a:	4615      	mov	r5, r2
 800978c:	f7ff fd6b 	bl	8009266 <_Balloc>
 8009790:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009794:	4607      	mov	r7, r0
 8009796:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800979a:	bb34      	cbnz	r4, 80097ea <__d2b+0x6c>
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	f1b8 0300 	subs.w	r3, r8, #0
 80097a2:	d027      	beq.n	80097f4 <__d2b+0x76>
 80097a4:	a802      	add	r0, sp, #8
 80097a6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80097aa:	f7ff fe01 	bl	80093b0 <__lo0bits>
 80097ae:	9900      	ldr	r1, [sp, #0]
 80097b0:	b1f0      	cbz	r0, 80097f0 <__d2b+0x72>
 80097b2:	9a01      	ldr	r2, [sp, #4]
 80097b4:	f1c0 0320 	rsb	r3, r0, #32
 80097b8:	fa02 f303 	lsl.w	r3, r2, r3
 80097bc:	430b      	orrs	r3, r1
 80097be:	40c2      	lsrs	r2, r0
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	9201      	str	r2, [sp, #4]
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	61bb      	str	r3, [r7, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bf14      	ite	ne
 80097cc:	2102      	movne	r1, #2
 80097ce:	2101      	moveq	r1, #1
 80097d0:	6139      	str	r1, [r7, #16]
 80097d2:	b1c4      	cbz	r4, 8009806 <__d2b+0x88>
 80097d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80097d8:	4404      	add	r4, r0
 80097da:	6034      	str	r4, [r6, #0]
 80097dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097e0:	6028      	str	r0, [r5, #0]
 80097e2:	4638      	mov	r0, r7
 80097e4:	b003      	add	sp, #12
 80097e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ee:	e7d5      	b.n	800979c <__d2b+0x1e>
 80097f0:	6179      	str	r1, [r7, #20]
 80097f2:	e7e7      	b.n	80097c4 <__d2b+0x46>
 80097f4:	a801      	add	r0, sp, #4
 80097f6:	f7ff fddb 	bl	80093b0 <__lo0bits>
 80097fa:	9b01      	ldr	r3, [sp, #4]
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	2101      	movs	r1, #1
 8009800:	6139      	str	r1, [r7, #16]
 8009802:	3020      	adds	r0, #32
 8009804:	e7e5      	b.n	80097d2 <__d2b+0x54>
 8009806:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800980a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800980e:	6030      	str	r0, [r6, #0]
 8009810:	6918      	ldr	r0, [r3, #16]
 8009812:	f7ff fdae 	bl	8009372 <__hi0bits>
 8009816:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800981a:	e7e1      	b.n	80097e0 <__d2b+0x62>

0800981c <_calloc_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	fb02 f401 	mul.w	r4, r2, r1
 8009822:	4621      	mov	r1, r4
 8009824:	f000 f856 	bl	80098d4 <_malloc_r>
 8009828:	4605      	mov	r5, r0
 800982a:	b118      	cbz	r0, 8009834 <_calloc_r+0x18>
 800982c:	4622      	mov	r2, r4
 800982e:	2100      	movs	r1, #0
 8009830:	f7fd ffc4 	bl	80077bc <memset>
 8009834:	4628      	mov	r0, r5
 8009836:	bd38      	pop	{r3, r4, r5, pc}

08009838 <_free_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4605      	mov	r5, r0
 800983c:	2900      	cmp	r1, #0
 800983e:	d045      	beq.n	80098cc <_free_r+0x94>
 8009840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009844:	1f0c      	subs	r4, r1, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfb8      	it	lt
 800984a:	18e4      	addlt	r4, r4, r3
 800984c:	f000 fa98 	bl	8009d80 <__malloc_lock>
 8009850:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <_free_r+0x98>)
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	4610      	mov	r0, r2
 8009856:	b933      	cbnz	r3, 8009866 <_free_r+0x2e>
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	6014      	str	r4, [r2, #0]
 800985c:	4628      	mov	r0, r5
 800985e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009862:	f000 ba8e 	b.w	8009d82 <__malloc_unlock>
 8009866:	42a3      	cmp	r3, r4
 8009868:	d90c      	bls.n	8009884 <_free_r+0x4c>
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	1862      	adds	r2, r4, r1
 800986e:	4293      	cmp	r3, r2
 8009870:	bf04      	itt	eq
 8009872:	681a      	ldreq	r2, [r3, #0]
 8009874:	685b      	ldreq	r3, [r3, #4]
 8009876:	6063      	str	r3, [r4, #4]
 8009878:	bf04      	itt	eq
 800987a:	1852      	addeq	r2, r2, r1
 800987c:	6022      	streq	r2, [r4, #0]
 800987e:	6004      	str	r4, [r0, #0]
 8009880:	e7ec      	b.n	800985c <_free_r+0x24>
 8009882:	4613      	mov	r3, r2
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	b10a      	cbz	r2, 800988c <_free_r+0x54>
 8009888:	42a2      	cmp	r2, r4
 800988a:	d9fa      	bls.n	8009882 <_free_r+0x4a>
 800988c:	6819      	ldr	r1, [r3, #0]
 800988e:	1858      	adds	r0, r3, r1
 8009890:	42a0      	cmp	r0, r4
 8009892:	d10b      	bne.n	80098ac <_free_r+0x74>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	4401      	add	r1, r0
 8009898:	1858      	adds	r0, r3, r1
 800989a:	4282      	cmp	r2, r0
 800989c:	6019      	str	r1, [r3, #0]
 800989e:	d1dd      	bne.n	800985c <_free_r+0x24>
 80098a0:	6810      	ldr	r0, [r2, #0]
 80098a2:	6852      	ldr	r2, [r2, #4]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	4401      	add	r1, r0
 80098a8:	6019      	str	r1, [r3, #0]
 80098aa:	e7d7      	b.n	800985c <_free_r+0x24>
 80098ac:	d902      	bls.n	80098b4 <_free_r+0x7c>
 80098ae:	230c      	movs	r3, #12
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	e7d3      	b.n	800985c <_free_r+0x24>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	1821      	adds	r1, r4, r0
 80098b8:	428a      	cmp	r2, r1
 80098ba:	bf04      	itt	eq
 80098bc:	6811      	ldreq	r1, [r2, #0]
 80098be:	6852      	ldreq	r2, [r2, #4]
 80098c0:	6062      	str	r2, [r4, #4]
 80098c2:	bf04      	itt	eq
 80098c4:	1809      	addeq	r1, r1, r0
 80098c6:	6021      	streq	r1, [r4, #0]
 80098c8:	605c      	str	r4, [r3, #4]
 80098ca:	e7c7      	b.n	800985c <_free_r+0x24>
 80098cc:	bd38      	pop	{r3, r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	200358a4 	.word	0x200358a4

080098d4 <_malloc_r>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	1ccd      	adds	r5, r1, #3
 80098d8:	f025 0503 	bic.w	r5, r5, #3
 80098dc:	3508      	adds	r5, #8
 80098de:	2d0c      	cmp	r5, #12
 80098e0:	bf38      	it	cc
 80098e2:	250c      	movcc	r5, #12
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	4606      	mov	r6, r0
 80098e8:	db01      	blt.n	80098ee <_malloc_r+0x1a>
 80098ea:	42a9      	cmp	r1, r5
 80098ec:	d903      	bls.n	80098f6 <_malloc_r+0x22>
 80098ee:	230c      	movs	r3, #12
 80098f0:	6033      	str	r3, [r6, #0]
 80098f2:	2000      	movs	r0, #0
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
 80098f6:	f000 fa43 	bl	8009d80 <__malloc_lock>
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <_malloc_r+0xac>)
 80098fc:	6814      	ldr	r4, [r2, #0]
 80098fe:	4621      	mov	r1, r4
 8009900:	b991      	cbnz	r1, 8009928 <_malloc_r+0x54>
 8009902:	4c20      	ldr	r4, [pc, #128]	; (8009984 <_malloc_r+0xb0>)
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	b91b      	cbnz	r3, 8009910 <_malloc_r+0x3c>
 8009908:	4630      	mov	r0, r6
 800990a:	f000 f97d 	bl	8009c08 <_sbrk_r>
 800990e:	6020      	str	r0, [r4, #0]
 8009910:	4629      	mov	r1, r5
 8009912:	4630      	mov	r0, r6
 8009914:	f000 f978 	bl	8009c08 <_sbrk_r>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d124      	bne.n	8009966 <_malloc_r+0x92>
 800991c:	230c      	movs	r3, #12
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	4630      	mov	r0, r6
 8009922:	f000 fa2e 	bl	8009d82 <__malloc_unlock>
 8009926:	e7e4      	b.n	80098f2 <_malloc_r+0x1e>
 8009928:	680b      	ldr	r3, [r1, #0]
 800992a:	1b5b      	subs	r3, r3, r5
 800992c:	d418      	bmi.n	8009960 <_malloc_r+0x8c>
 800992e:	2b0b      	cmp	r3, #11
 8009930:	d90f      	bls.n	8009952 <_malloc_r+0x7e>
 8009932:	600b      	str	r3, [r1, #0]
 8009934:	50cd      	str	r5, [r1, r3]
 8009936:	18cc      	adds	r4, r1, r3
 8009938:	4630      	mov	r0, r6
 800993a:	f000 fa22 	bl	8009d82 <__malloc_unlock>
 800993e:	f104 000b 	add.w	r0, r4, #11
 8009942:	1d23      	adds	r3, r4, #4
 8009944:	f020 0007 	bic.w	r0, r0, #7
 8009948:	1ac3      	subs	r3, r0, r3
 800994a:	d0d3      	beq.n	80098f4 <_malloc_r+0x20>
 800994c:	425a      	negs	r2, r3
 800994e:	50e2      	str	r2, [r4, r3]
 8009950:	e7d0      	b.n	80098f4 <_malloc_r+0x20>
 8009952:	428c      	cmp	r4, r1
 8009954:	684b      	ldr	r3, [r1, #4]
 8009956:	bf16      	itet	ne
 8009958:	6063      	strne	r3, [r4, #4]
 800995a:	6013      	streq	r3, [r2, #0]
 800995c:	460c      	movne	r4, r1
 800995e:	e7eb      	b.n	8009938 <_malloc_r+0x64>
 8009960:	460c      	mov	r4, r1
 8009962:	6849      	ldr	r1, [r1, #4]
 8009964:	e7cc      	b.n	8009900 <_malloc_r+0x2c>
 8009966:	1cc4      	adds	r4, r0, #3
 8009968:	f024 0403 	bic.w	r4, r4, #3
 800996c:	42a0      	cmp	r0, r4
 800996e:	d005      	beq.n	800997c <_malloc_r+0xa8>
 8009970:	1a21      	subs	r1, r4, r0
 8009972:	4630      	mov	r0, r6
 8009974:	f000 f948 	bl	8009c08 <_sbrk_r>
 8009978:	3001      	adds	r0, #1
 800997a:	d0cf      	beq.n	800991c <_malloc_r+0x48>
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	e7db      	b.n	8009938 <_malloc_r+0x64>
 8009980:	200358a4 	.word	0x200358a4
 8009984:	200358a8 	.word	0x200358a8

08009988 <__sfputc_r>:
 8009988:	6893      	ldr	r3, [r2, #8]
 800998a:	3b01      	subs	r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	b410      	push	{r4}
 8009990:	6093      	str	r3, [r2, #8]
 8009992:	da08      	bge.n	80099a6 <__sfputc_r+0x1e>
 8009994:	6994      	ldr	r4, [r2, #24]
 8009996:	42a3      	cmp	r3, r4
 8009998:	db01      	blt.n	800999e <__sfputc_r+0x16>
 800999a:	290a      	cmp	r1, #10
 800999c:	d103      	bne.n	80099a6 <__sfputc_r+0x1e>
 800999e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a2:	f7fe bbc9 	b.w	8008138 <__swbuf_r>
 80099a6:	6813      	ldr	r3, [r2, #0]
 80099a8:	1c58      	adds	r0, r3, #1
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	7019      	strb	r1, [r3, #0]
 80099ae:	4608      	mov	r0, r1
 80099b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <__sfputs_r>:
 80099b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b8:	4606      	mov	r6, r0
 80099ba:	460f      	mov	r7, r1
 80099bc:	4614      	mov	r4, r2
 80099be:	18d5      	adds	r5, r2, r3
 80099c0:	42ac      	cmp	r4, r5
 80099c2:	d101      	bne.n	80099c8 <__sfputs_r+0x12>
 80099c4:	2000      	movs	r0, #0
 80099c6:	e007      	b.n	80099d8 <__sfputs_r+0x22>
 80099c8:	463a      	mov	r2, r7
 80099ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ce:	4630      	mov	r0, r6
 80099d0:	f7ff ffda 	bl	8009988 <__sfputc_r>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d1f3      	bne.n	80099c0 <__sfputs_r+0xa>
 80099d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099dc <_vfiprintf_r>:
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	b09d      	sub	sp, #116	; 0x74
 80099e4:	4617      	mov	r7, r2
 80099e6:	461d      	mov	r5, r3
 80099e8:	4606      	mov	r6, r0
 80099ea:	b118      	cbz	r0, 80099f4 <_vfiprintf_r+0x18>
 80099ec:	6983      	ldr	r3, [r0, #24]
 80099ee:	b90b      	cbnz	r3, 80099f4 <_vfiprintf_r+0x18>
 80099f0:	f7ff fb2a 	bl	8009048 <__sinit>
 80099f4:	4b7c      	ldr	r3, [pc, #496]	; (8009be8 <_vfiprintf_r+0x20c>)
 80099f6:	429c      	cmp	r4, r3
 80099f8:	d158      	bne.n	8009aac <_vfiprintf_r+0xd0>
 80099fa:	6874      	ldr	r4, [r6, #4]
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	0718      	lsls	r0, r3, #28
 8009a00:	d55e      	bpl.n	8009ac0 <_vfiprintf_r+0xe4>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d05b      	beq.n	8009ac0 <_vfiprintf_r+0xe4>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0c:	2320      	movs	r3, #32
 8009a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a12:	2330      	movs	r3, #48	; 0x30
 8009a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a18:	9503      	str	r5, [sp, #12]
 8009a1a:	f04f 0b01 	mov.w	fp, #1
 8009a1e:	46b8      	mov	r8, r7
 8009a20:	4645      	mov	r5, r8
 8009a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a26:	b10b      	cbz	r3, 8009a2c <_vfiprintf_r+0x50>
 8009a28:	2b25      	cmp	r3, #37	; 0x25
 8009a2a:	d154      	bne.n	8009ad6 <_vfiprintf_r+0xfa>
 8009a2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009a30:	d00b      	beq.n	8009a4a <_vfiprintf_r+0x6e>
 8009a32:	4653      	mov	r3, sl
 8009a34:	463a      	mov	r2, r7
 8009a36:	4621      	mov	r1, r4
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff ffbc 	bl	80099b6 <__sfputs_r>
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f000 80c2 	beq.w	8009bc8 <_vfiprintf_r+0x1ec>
 8009a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a46:	4453      	add	r3, sl
 8009a48:	9309      	str	r3, [sp, #36]	; 0x24
 8009a4a:	f898 3000 	ldrb.w	r3, [r8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80ba 	beq.w	8009bc8 <_vfiprintf_r+0x1ec>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a66:	931a      	str	r3, [sp, #104]	; 0x68
 8009a68:	46a8      	mov	r8, r5
 8009a6a:	2205      	movs	r2, #5
 8009a6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009a70:	485e      	ldr	r0, [pc, #376]	; (8009bec <_vfiprintf_r+0x210>)
 8009a72:	f7f6 fbed 	bl	8000250 <memchr>
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	bb78      	cbnz	r0, 8009ada <_vfiprintf_r+0xfe>
 8009a7a:	06d9      	lsls	r1, r3, #27
 8009a7c:	bf44      	itt	mi
 8009a7e:	2220      	movmi	r2, #32
 8009a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a84:	071a      	lsls	r2, r3, #28
 8009a86:	bf44      	itt	mi
 8009a88:	222b      	movmi	r2, #43	; 0x2b
 8009a8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a8e:	782a      	ldrb	r2, [r5, #0]
 8009a90:	2a2a      	cmp	r2, #42	; 0x2a
 8009a92:	d02a      	beq.n	8009aea <_vfiprintf_r+0x10e>
 8009a94:	9a07      	ldr	r2, [sp, #28]
 8009a96:	46a8      	mov	r8, r5
 8009a98:	2000      	movs	r0, #0
 8009a9a:	250a      	movs	r5, #10
 8009a9c:	4641      	mov	r1, r8
 8009a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa2:	3b30      	subs	r3, #48	; 0x30
 8009aa4:	2b09      	cmp	r3, #9
 8009aa6:	d969      	bls.n	8009b7c <_vfiprintf_r+0x1a0>
 8009aa8:	b360      	cbz	r0, 8009b04 <_vfiprintf_r+0x128>
 8009aaa:	e024      	b.n	8009af6 <_vfiprintf_r+0x11a>
 8009aac:	4b50      	ldr	r3, [pc, #320]	; (8009bf0 <_vfiprintf_r+0x214>)
 8009aae:	429c      	cmp	r4, r3
 8009ab0:	d101      	bne.n	8009ab6 <_vfiprintf_r+0xda>
 8009ab2:	68b4      	ldr	r4, [r6, #8]
 8009ab4:	e7a2      	b.n	80099fc <_vfiprintf_r+0x20>
 8009ab6:	4b4f      	ldr	r3, [pc, #316]	; (8009bf4 <_vfiprintf_r+0x218>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	bf08      	it	eq
 8009abc:	68f4      	ldreq	r4, [r6, #12]
 8009abe:	e79d      	b.n	80099fc <_vfiprintf_r+0x20>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7fe fb8a 	bl	80081dc <__swsetup_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d09d      	beq.n	8009a08 <_vfiprintf_r+0x2c>
 8009acc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad0:	b01d      	add	sp, #116	; 0x74
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	46a8      	mov	r8, r5
 8009ad8:	e7a2      	b.n	8009a20 <_vfiprintf_r+0x44>
 8009ada:	4a44      	ldr	r2, [pc, #272]	; (8009bec <_vfiprintf_r+0x210>)
 8009adc:	1a80      	subs	r0, r0, r2
 8009ade:	fa0b f000 	lsl.w	r0, fp, r0
 8009ae2:	4318      	orrs	r0, r3
 8009ae4:	9004      	str	r0, [sp, #16]
 8009ae6:	4645      	mov	r5, r8
 8009ae8:	e7be      	b.n	8009a68 <_vfiprintf_r+0x8c>
 8009aea:	9a03      	ldr	r2, [sp, #12]
 8009aec:	1d11      	adds	r1, r2, #4
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	9103      	str	r1, [sp, #12]
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	db01      	blt.n	8009afa <_vfiprintf_r+0x11e>
 8009af6:	9207      	str	r2, [sp, #28]
 8009af8:	e004      	b.n	8009b04 <_vfiprintf_r+0x128>
 8009afa:	4252      	negs	r2, r2
 8009afc:	f043 0302 	orr.w	r3, r3, #2
 8009b00:	9207      	str	r2, [sp, #28]
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	f898 3000 	ldrb.w	r3, [r8]
 8009b08:	2b2e      	cmp	r3, #46	; 0x2e
 8009b0a:	d10e      	bne.n	8009b2a <_vfiprintf_r+0x14e>
 8009b0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009b10:	2b2a      	cmp	r3, #42	; 0x2a
 8009b12:	d138      	bne.n	8009b86 <_vfiprintf_r+0x1aa>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	1d1a      	adds	r2, r3, #4
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	9203      	str	r2, [sp, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bfb8      	it	lt
 8009b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b24:	f108 0802 	add.w	r8, r8, #2
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	4d33      	ldr	r5, [pc, #204]	; (8009bf8 <_vfiprintf_r+0x21c>)
 8009b2c:	f898 1000 	ldrb.w	r1, [r8]
 8009b30:	2203      	movs	r2, #3
 8009b32:	4628      	mov	r0, r5
 8009b34:	f7f6 fb8c 	bl	8000250 <memchr>
 8009b38:	b140      	cbz	r0, 8009b4c <_vfiprintf_r+0x170>
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	1b40      	subs	r0, r0, r5
 8009b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b42:	9b04      	ldr	r3, [sp, #16]
 8009b44:	4303      	orrs	r3, r0
 8009b46:	f108 0801 	add.w	r8, r8, #1
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	f898 1000 	ldrb.w	r1, [r8]
 8009b50:	482a      	ldr	r0, [pc, #168]	; (8009bfc <_vfiprintf_r+0x220>)
 8009b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b56:	2206      	movs	r2, #6
 8009b58:	f108 0701 	add.w	r7, r8, #1
 8009b5c:	f7f6 fb78 	bl	8000250 <memchr>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d037      	beq.n	8009bd4 <_vfiprintf_r+0x1f8>
 8009b64:	4b26      	ldr	r3, [pc, #152]	; (8009c00 <_vfiprintf_r+0x224>)
 8009b66:	bb1b      	cbnz	r3, 8009bb0 <_vfiprintf_r+0x1d4>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	3307      	adds	r3, #7
 8009b6c:	f023 0307 	bic.w	r3, r3, #7
 8009b70:	3308      	adds	r3, #8
 8009b72:	9303      	str	r3, [sp, #12]
 8009b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b76:	444b      	add	r3, r9
 8009b78:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7a:	e750      	b.n	8009a1e <_vfiprintf_r+0x42>
 8009b7c:	fb05 3202 	mla	r2, r5, r2, r3
 8009b80:	2001      	movs	r0, #1
 8009b82:	4688      	mov	r8, r1
 8009b84:	e78a      	b.n	8009a9c <_vfiprintf_r+0xc0>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f108 0801 	add.w	r8, r8, #1
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	250a      	movs	r5, #10
 8009b92:	4640      	mov	r0, r8
 8009b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b98:	3a30      	subs	r2, #48	; 0x30
 8009b9a:	2a09      	cmp	r2, #9
 8009b9c:	d903      	bls.n	8009ba6 <_vfiprintf_r+0x1ca>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0c3      	beq.n	8009b2a <_vfiprintf_r+0x14e>
 8009ba2:	9105      	str	r1, [sp, #20]
 8009ba4:	e7c1      	b.n	8009b2a <_vfiprintf_r+0x14e>
 8009ba6:	fb05 2101 	mla	r1, r5, r1, r2
 8009baa:	2301      	movs	r3, #1
 8009bac:	4680      	mov	r8, r0
 8009bae:	e7f0      	b.n	8009b92 <_vfiprintf_r+0x1b6>
 8009bb0:	ab03      	add	r3, sp, #12
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4b13      	ldr	r3, [pc, #76]	; (8009c04 <_vfiprintf_r+0x228>)
 8009bb8:	a904      	add	r1, sp, #16
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7fd fe8c 	bl	80078d8 <_printf_float>
 8009bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bc4:	4681      	mov	r9, r0
 8009bc6:	d1d5      	bne.n	8009b74 <_vfiprintf_r+0x198>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	065b      	lsls	r3, r3, #25
 8009bcc:	f53f af7e 	bmi.w	8009acc <_vfiprintf_r+0xf0>
 8009bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd2:	e77d      	b.n	8009ad0 <_vfiprintf_r+0xf4>
 8009bd4:	ab03      	add	r3, sp, #12
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <_vfiprintf_r+0x228>)
 8009bdc:	a904      	add	r1, sp, #16
 8009bde:	4630      	mov	r0, r6
 8009be0:	f7fe f91c 	bl	8007e1c <_printf_i>
 8009be4:	e7ec      	b.n	8009bc0 <_vfiprintf_r+0x1e4>
 8009be6:	bf00      	nop
 8009be8:	08009e74 	.word	0x08009e74
 8009bec:	08009fb4 	.word	0x08009fb4
 8009bf0:	08009e94 	.word	0x08009e94
 8009bf4:	08009e54 	.word	0x08009e54
 8009bf8:	08009fba 	.word	0x08009fba
 8009bfc:	08009fbe 	.word	0x08009fbe
 8009c00:	080078d9 	.word	0x080078d9
 8009c04:	080099b7 	.word	0x080099b7

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4c06      	ldr	r4, [pc, #24]	; (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4605      	mov	r5, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	f7f9 fe9a 	bl	800394c <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	20035ef8 	.word	0x20035ef8

08009c28 <__sread>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c30:	f000 f8a8 	bl	8009d84 <_read_r>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	bfab      	itete	ge
 8009c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c3c:	181b      	addge	r3, r3, r0
 8009c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c42:	bfac      	ite	ge
 8009c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c46:	81a3      	strhlt	r3, [r4, #12]
 8009c48:	bd10      	pop	{r4, pc}

08009c4a <__swrite>:
 8009c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4e:	461f      	mov	r7, r3
 8009c50:	898b      	ldrh	r3, [r1, #12]
 8009c52:	05db      	lsls	r3, r3, #23
 8009c54:	4605      	mov	r5, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	4616      	mov	r6, r2
 8009c5a:	d505      	bpl.n	8009c68 <__swrite+0x1e>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c64:	f000 f868 	bl	8009d38 <_lseek_r>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	4632      	mov	r2, r6
 8009c76:	463b      	mov	r3, r7
 8009c78:	4628      	mov	r0, r5
 8009c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7e:	f000 b817 	b.w	8009cb0 <_write_r>

08009c82 <__sseek>:
 8009c82:	b510      	push	{r4, lr}
 8009c84:	460c      	mov	r4, r1
 8009c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8a:	f000 f855 	bl	8009d38 <_lseek_r>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	bf15      	itete	ne
 8009c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c9e:	81a3      	strheq	r3, [r4, #12]
 8009ca0:	bf18      	it	ne
 8009ca2:	81a3      	strhne	r3, [r4, #12]
 8009ca4:	bd10      	pop	{r4, pc}

08009ca6 <__sclose>:
 8009ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009caa:	f000 b813 	b.w	8009cd4 <_close_r>
	...

08009cb0 <_write_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4c07      	ldr	r4, [pc, #28]	; (8009cd0 <_write_r+0x20>)
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f7f9 fdf3 	bl	80038aa <_write>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_write_r+0x1e>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_write_r+0x1e>
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	20035ef8 	.word	0x20035ef8

08009cd4 <_close_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4c06      	ldr	r4, [pc, #24]	; (8009cf0 <_close_r+0x1c>)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4605      	mov	r5, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	f7f9 fdff 	bl	80038e2 <_close>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_close_r+0x1a>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_close_r+0x1a>
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20035ef8 	.word	0x20035ef8

08009cf4 <_fstat_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4c07      	ldr	r4, [pc, #28]	; (8009d14 <_fstat_r+0x20>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	4611      	mov	r1, r2
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	f7f9 fdfa 	bl	80038fa <_fstat>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d102      	bne.n	8009d10 <_fstat_r+0x1c>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	b103      	cbz	r3, 8009d10 <_fstat_r+0x1c>
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
 8009d12:	bf00      	nop
 8009d14:	20035ef8 	.word	0x20035ef8

08009d18 <_isatty_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4c06      	ldr	r4, [pc, #24]	; (8009d34 <_isatty_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4605      	mov	r5, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	f7f9 fdf9 	bl	800391a <_isatty>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_isatty_r+0x1a>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_isatty_r+0x1a>
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20035ef8 	.word	0x20035ef8

08009d38 <_lseek_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4c07      	ldr	r4, [pc, #28]	; (8009d58 <_lseek_r+0x20>)
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	6022      	str	r2, [r4, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f7f9 fdf2 	bl	8003930 <_lseek>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_lseek_r+0x1e>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_lseek_r+0x1e>
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	20035ef8 	.word	0x20035ef8

08009d5c <__ascii_mbtowc>:
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	b901      	cbnz	r1, 8009d62 <__ascii_mbtowc+0x6>
 8009d60:	a901      	add	r1, sp, #4
 8009d62:	b142      	cbz	r2, 8009d76 <__ascii_mbtowc+0x1a>
 8009d64:	b14b      	cbz	r3, 8009d7a <__ascii_mbtowc+0x1e>
 8009d66:	7813      	ldrb	r3, [r2, #0]
 8009d68:	600b      	str	r3, [r1, #0]
 8009d6a:	7812      	ldrb	r2, [r2, #0]
 8009d6c:	1c10      	adds	r0, r2, #0
 8009d6e:	bf18      	it	ne
 8009d70:	2001      	movne	r0, #1
 8009d72:	b002      	add	sp, #8
 8009d74:	4770      	bx	lr
 8009d76:	4610      	mov	r0, r2
 8009d78:	e7fb      	b.n	8009d72 <__ascii_mbtowc+0x16>
 8009d7a:	f06f 0001 	mvn.w	r0, #1
 8009d7e:	e7f8      	b.n	8009d72 <__ascii_mbtowc+0x16>

08009d80 <__malloc_lock>:
 8009d80:	4770      	bx	lr

08009d82 <__malloc_unlock>:
 8009d82:	4770      	bx	lr

08009d84 <_read_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4c07      	ldr	r4, [pc, #28]	; (8009da4 <_read_r+0x20>)
 8009d88:	4605      	mov	r5, r0
 8009d8a:	4608      	mov	r0, r1
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	6022      	str	r2, [r4, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	f7f9 fd6c 	bl	8003870 <_read>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_read_r+0x1e>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_read_r+0x1e>
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	20035ef8 	.word	0x20035ef8

08009da8 <__ascii_wctomb>:
 8009da8:	b149      	cbz	r1, 8009dbe <__ascii_wctomb+0x16>
 8009daa:	2aff      	cmp	r2, #255	; 0xff
 8009dac:	bf85      	ittet	hi
 8009dae:	238a      	movhi	r3, #138	; 0x8a
 8009db0:	6003      	strhi	r3, [r0, #0]
 8009db2:	700a      	strbls	r2, [r1, #0]
 8009db4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009db8:	bf98      	it	ls
 8009dba:	2001      	movls	r0, #1
 8009dbc:	4770      	bx	lr
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4770      	bx	lr
	...

08009dc4 <_init>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr

08009dd0 <_fini>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr
